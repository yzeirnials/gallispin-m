
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac778f8 prev 0x55587ac6f098 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587ac779f0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55587ac77a80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55587ac77af8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55587ac77bb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55587ac77c80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55587ac77df8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55587ac77d30 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55587ac77ea0 <col:24>
| `-OptimizeNoneAttr 0x55587ac77ef8 <col:34>
|-CXXMethodDecl 0x55587ac77f40 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55587ac781f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55587ac77ff0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55587ac78068 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55587ac780e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55587ac782b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55587ac782e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55587ac78350 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55587ac783d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55587ac786f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55587ac78490 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55587ac78508 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55587ac78580 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55587ac78600 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55587ac78810 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55587ac80188 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55587ac80188
| `-ParmVarDecl 0x55587ac80298 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55587ac80338 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55587ac80338
| `-ParmVarDecl 0x55587ac80448 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55587ad867e0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac6a910 prev 0x55587ac6a690 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55587ac6aa08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55587ac6aa98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55587ac6aaf8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55587ac6abe8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55587ac6ace8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55587ac6aeb8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55587ac6ad68 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55587ac6ade0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55587ac6b048 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55587ac6af80 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55587ac6b0f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55587ac6b228 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55587ac6b160 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55587ac6b3c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55587ac6b308 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55587ac6b568 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55587ac6b4a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55587ac6b610 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55587ac6b710 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55587ac6b7f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac6b6f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55587ac6b6d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55587ac6b7a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55587ac6b808 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac6b780 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55587ac6b760 <col:44> 'int' 2
|-CXXMethodDecl 0x55587ac6b950 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55587ac6b838 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55587ac6b8b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55587ac6baa8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55587ac6ba18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55587ac6bce8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55587ac6bb68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55587ac6bbe0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55587ac6bd98 <col:20>
| `-OptimizeNoneAttr 0x55587ac6bdf0 <col:30>
|-CXXMethodDecl 0x55587ac6bef8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55587ac6be30 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55587ac6bfa0 <col:20>
| `-OptimizeNoneAttr 0x55587ac6bff8 <col:30>
|-CXXMethodDecl 0x55587ac6c048 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55587ac6c110 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55587ac6c228 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55587ac6c2b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55587ac6c338 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55587ac6c3c0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55587ac6c448 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55587ac6c4d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55587ac6c598 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55587ac6c620 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55587ac6c6a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55587ac6c730 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55587ac6c7b8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55587ac6c840 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55587ac6c8d0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55587ac6c990 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55587ac6ca20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55587ac6cb70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55587ac6cad8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55587ac6cd00 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55587ac6cc30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55587ac6cfb0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55587ac6cdb8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55587ac6ce38 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55587ac6ceb8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55587ac6d068 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55587ac6d170 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55587ac6d400 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac6d150 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55587ac6d130 <col:33> 'int' 0
| |-EnumConstantDecl 0x55587ac6d200 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55587ac6d418 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac6d1e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55587ac6d1c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55587ac6d290 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55587ac6d430 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac6d270 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55587ac6d250 <col:38> 'int' 90
| |-EnumConstantDecl 0x55587ac6d320 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55587ac6d448 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac6d300 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55587ac6d2e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55587ac6d3b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55587ac6d460 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac6d390 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55587ac6d370 <col:32> 'int' 2000
|-CXXMethodDecl 0x55587ac6d4a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55587ac6d8e0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55587ac6d750 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55587ac6d7c8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac6d9b0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55587ac6db30 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55587ac6da60 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac6dd38 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55587ac6dbe8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55587ac6dc60 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac6de38 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55587ac6ded8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55587ac6dfa0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55587ac6e030 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55587ac6e260 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac6e010 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55587ac6dff0 <col:36> 'int' EnumConstant 0x55587ac6dfa0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55587ac6e080 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55587ac6e0d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55587ac6e120 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55587ac6e170 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55587ac6e1c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55587ac6e210 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55587ac6e348 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55587ac6e288 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55587ac6e410 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55587ac6e4d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55587ac6e590 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55587ac6e650 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55587ac6e768 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55587ac6e830 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55587ac6e9b0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55587ac6e8e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55587ac6ead8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55587ac6ecd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55587ac6eb88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55587ac6ec08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55587ac7c628 <col:54, line:127:5>
|   |-ParenExpr 0x55587ac7c4d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55587ac7c4a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac7c198 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55587ac7c170 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55587ac7c158 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55587ac7c140 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55587ac7c110 <col:31> 'Router *' lvalue ->_router 0x55587ac79ff0
|   |   |         `-CXXThisExpr 0x55587ac7c100 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55587ac7c1f8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac7c1d8 <col:48> 'int' 0
|   |   `-CallExpr 0x55587ac7c408 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55587ac7c3f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac7c3d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac7c448 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac7c268 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55587ac7c460 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac7c288 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55587ac7c478 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac7c2c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55587ac7c490 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac7c3b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac7c3a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac7c358 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55587ac7c570 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55587ac7c508 <col:9> 'Router *' lvalue ->_router 0x55587ac79ff0
|   | | `-CXXThisExpr 0x55587ac7c4f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55587ac7c558 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55587ac7c538 <col:19> 'Router *' lvalue ParmVar 0x55587ac6eb88 'r' 'Router *'
|   `-BinaryOperator 0x55587ac7c608 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55587ac7c5a0 <col:9> 'int' lvalue ->_eindex 0x55587ac7a058
|     | `-CXXThisExpr 0x55587ac7c590 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55587ac7c5f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac7c5d0 <col:19> 'int' lvalue ParmVar 0x55587ac6ec08 'eindex' 'int'
|-CXXMethodDecl 0x55587ac6ee60 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55587ac6ed98 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55587ac6ef30 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55587ac6eff8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55587ac6f098 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55587ac6f2e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55587ac6f160 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55587ac6f1e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55587ac6f398 <col:20>
| `-OptimizeNoneAttr 0x55587ac6f3f0 <col:30>
|-CXXMethodDecl 0x55587ac6f4f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55587ac6f430 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55587ac6f5a0 <col:20>
| `-OptimizeNoneAttr 0x55587ac6f5f8 <col:30>
|-CXXMethodDecl 0x55587ac6f6c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55587ac6f638 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55587ac6f770 <col:20>
| `-OptimizeNoneAttr 0x55587ac6f7c8 <col:30>
|-CXXMethodDecl 0x55587ac6f958 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55587ac6f800 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55587ac6f880 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55587ac6fae8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55587ac6fa20 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55587ac6fc38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55587ac6fba8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55587ac6fd88 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55587ac6fcf8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55587ac6fed8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55587ac6fe48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55587ac70198 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55587ac6ff90 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55587ac70010 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55587ac700b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55587ac70270 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55587ac70330 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55587ac70600 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55587ac704b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55587ac70528 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac70728 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55587ac70900 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55587ac707e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55587ac70860 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55587ac70ae8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55587ac709c8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55587ac70a48 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55587ac70e58 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55587ac70ba8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55587ac70c20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55587ac70ca0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55587ac7bc10 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55587ac7bbf0 <col:106> 'int' 0
| `-ParmVarDecl 0x55587ac70d18 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55587ac7bc48 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55587ac7bc28 <col:126> 'int' 0
|-CXXMethodDecl 0x55587ac711f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55587ac70f28 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55587ac70fc0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55587ac71040 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55587ac710b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55587ac7bc80 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55587ac7bc60 <col:114> 'int' 0
|-CXXMethodDecl 0x55587ac71588 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55587ac712d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55587ac71348 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55587ac713c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55587ac7bc98 <col:96> 'int' 0
| `-ParmVarDecl 0x55587ac71440 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55587ac7bcd8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55587ac7bcb8 <col:116> 'int' 0
|-CXXMethodDecl 0x55587ac71908 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55587ac71658 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55587ac716d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55587ac71750 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55587ac7bd10 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55587ac7bcf0 <col:109> 'int' 0
| `-ParmVarDecl 0x55587ac717c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55587ac7bd48 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55587ac7bd28 <col:129> 'int' 0
|-CXXMethodDecl 0x55587ac71c88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55587ac719d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55587ac71a50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55587ac71ad0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55587ac71b48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55587ac7bd80 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55587ac7bd60 <col:117> 'int' 0
|-CXXMethodDecl 0x55587ac72018 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55587ac71d60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac71dd8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55587ac71e58 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55587ac7bd98 <col:99> 'int' 0
| `-ParmVarDecl 0x55587ac71ed0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55587ac7bdd8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55587ac7bdb8 <col:119> 'int' 0
|-CXXMethodDecl 0x55587ac72438 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55587ac720e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55587ac72168 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55587ac721e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55587ac72260 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55587ac7be10 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55587ac7bdf0 <col:108> 'int' 0
| `-ParmVarDecl 0x55587ac722e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55587ac7be48 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55587ac7be28 <col:141> 'int' 0
|-CXXMethodDecl 0x55587ac72858 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55587ac72510 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55587ac72590 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55587ac72608 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55587ac72688 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55587ac72708 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55587ac7be60 <col:121> 'int' 0
|-CXXMethodDecl 0x55587ac72c88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55587ac72938 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55587ac729b8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55587ac72a30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55587ac72ab0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55587ac7be80 <col:98> 'int' 0
| `-ParmVarDecl 0x55587ac72b30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55587ac7bea0 <col:123> 'int' 0
|-CXXMethodDecl 0x55587ac72f50 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55587ac72d60 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55587ac72de0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55587ac72e60 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55587ac7bec0 <col:80> 'int' 0
|-EnumDecl 0x55587ac73008 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55587ac73110 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55587ac733a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac730f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55587ac730d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55587ac731a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55587ac733b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac73180 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55587ac73160 <col:40> 'int' 2
| |-EnumConstantDecl 0x55587ac73230 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55587ac733d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac73210 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55587ac731f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55587ac732c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55587ac733e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac732a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55587ac73280 <col:36> 'int' 7
| `-EnumConstantDecl 0x55587ac73350 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55587ac73400 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac73330 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55587ac73310 <col:34> 'int' 6
|-CXXMethodDecl 0x55587ac736b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55587ac73428 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55587ac734c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55587ac73548 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55587ac735c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55587ac7bf78 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55587ac7bf60 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55587ac7bf48 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55587ac7bf28 <col:98, col:105> 'String' (CXXTemporary 0x55587ac7bf28)
|           `-CXXTemporaryObjectExpr 0x55587ac7bef0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55587ac73958 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55587ac73788 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55587ac73800 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55587ac73878 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55587ac7c028 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55587ac7c010 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55587ac7bff8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55587ac7bfd8 <col:94, col:101> 'String' (CXXTemporary 0x55587ac7bfd8)
| |         `-CXXTemporaryObjectExpr 0x55587ac7bfa0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55587ac7c810 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55587ac7c788 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55587ac7c758 <col:9> '<bound member function type>' ->add_task_handlers 0x55587ac736b8
|     | `-CXXThisExpr 0x55587ac7c748 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55587ac7c7c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55587ac7c6c8 <col:27> 'Task *' lvalue ParmVar 0x55587ac73788 'task' 'Task *'
|     |-ImplicitCastExpr 0x55587ac7c7e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55587ac7c6e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55587ac73800 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55587ac7c7f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55587ac7c708 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55587ac73350 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55587ac7c728 <col:62> 'const String' lvalue ParmVar 0x55587ac73878 'prefix' 'const String &'
|-CXXMethodDecl 0x55587ac73b68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55587ac73a20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55587ac73a98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55587ac7c0d8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55587ac7c0c0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55587ac7c0a8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55587ac7c088 <col:70, col:77> 'String' (CXXTemporary 0x55587ac7c088)
| |         `-CXXTemporaryObjectExpr 0x55587ac7c050 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55587ac7c9e8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55587ac7c960 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55587ac7c930 <col:9> '<bound member function type>' ->add_task_handlers 0x55587ac736b8
|     | `-CXXThisExpr 0x55587ac7c920 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55587ac7c9a0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55587ac7c8a0 <col:27> 'Task *' lvalue ParmVar 0x55587ac73a20 'task' 'Task *'
|     |-ImplicitCastExpr 0x55587ac7c9b8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55587ac7c8c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55587ac7c9d0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55587ac7c8e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55587ac73350 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55587ac7c900 <col:57> 'const String' lvalue ParmVar 0x55587ac73a98 'prefix' 'const String &'
|-CXXMethodDecl 0x55587ac73e48 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55587ac73c30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac73cb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac73d28 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55587ac740f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55587ac73f18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac73f98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac74018 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55587ac743e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55587ac741c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac74248 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac742c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55587ac74698 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55587ac744b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac74538 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac745b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55587ac74948 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55587ac74768 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac747e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac74868 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55587ac74bf8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55587ac74a18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac74a98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac74b10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55587ac74ea8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55587ac74cc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac74d48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac74dc8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55587ac751b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55587ac74fd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac75050 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac750d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55587ac75498 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55587ac75288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac75308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac753b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55587ac75778 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55587ac75568 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac755e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac75690 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55587ac759e0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55587ac75848 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55587ac758c8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55587ac75940 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55587ac75c88 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55587ac75ab0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55587ac75b30 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55587ac75ba8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55587ac75f38 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55587ac75d58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac75dd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac75e58 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55587ac761e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55587ac76008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac76088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac76100 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55587ac76498 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55587ac762b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac76338 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac763b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55587ac76768 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55587ac76568 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac765e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55587ac76688 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55587ac76a98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55587ac76838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55587ac768b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55587ac76930 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55587ac769a8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55587ac7c0f0 <col:93> 'bool' false
|-CXXMethodDecl 0x55587ac76c80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55587ac76b68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55587ac76be8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55587ac76e58 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55587ac76d40 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55587ac76dc0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55587ac77138 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55587ac76f18 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55587ac76f90 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55587ac77010 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55587ac77088 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac77428 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55587ac77208 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55587ac77280 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55587ac77300 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55587ac77378 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac77660 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55587ac77500 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55587ac77580 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55587ac77848 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55587ac77728 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55587ac777a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55587ac778f8 prev 0x55587ac6f098 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55587ac779f0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55587ac77a80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55587ac77af8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55587ac77bb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55587ac77c80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55587ac77df8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55587ac77d30 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55587ac77ea0 <col:24>
| | `-OptimizeNoneAttr 0x55587ac77ef8 <col:34>
| |-CXXMethodDecl 0x55587ac77f40 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55587ac781f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55587ac77ff0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55587ac78068 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55587ac780e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55587ac782b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55587ac782e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55587ac78350 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55587ac783d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55587ac786f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55587ac78490 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55587ac78508 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55587ac78580 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55587ac78600 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55587ac78810 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55587ac80188 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55587ac80188
| | `-ParmVarDecl 0x55587ac80298 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55587ac80338 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55587ac80338
| | `-ParmVarDecl 0x55587ac80448 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55587ad867e0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55587ac78888 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55587ac78928 <col:38> "" ""
|-CXXMethodDecl 0x55587ac789b8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55587ac78a58 <col:44> "" ""
|-AccessSpecDecl 0x55587ac78ac8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55587ac78af0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55587ac78bf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55587ac78c40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac78bd0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55587ac78bb0 <col:27> 'int' 4
|-FieldDecl 0x55587ac78cf8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55587ac78ea8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55587ac78f60 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55587ac79ff0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55587ac7a058 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55587ac7a1a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55587ac7a0e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55587ac7a358 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55587ac7a268 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55587ac7a538 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55587ac7a418 <col:20> col:23 'int'
| `-ParmVarDecl 0x55587ac7a498 <col:25> col:28 'int'
|-CXXMethodDecl 0x55587ac7a7e0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55587ac7a600 <col:23> col:26 'int'
| |-ParmVarDecl 0x55587ac7a680 <col:28> col:31 'int'
| `-ParmVarDecl 0x55587ac7a6f8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55587ac7a898 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55587ac7a960 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55587ac7a9b0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55587ac7aa00 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55587ac7abe0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55587ac7aa90 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55587ac7ab08 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac7ae88 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55587ac7aca8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55587ac7ad28 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55587ac7ada0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac7b0a8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55587ac7af58 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55587ac7afd8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55587ac7b3e0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55587ac7b168 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55587ac7b1e8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55587ac7b260 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55587ac7b2e0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55587ac7b5c8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55587ac7b4b0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55587ac7b530 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55587ac7b718 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55587ac7b688 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55587ac7ba98 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55587ac7b7d8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55587ac7b858 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55587ac7b8d0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55587ac7b950 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55587ac7bbb0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ForceICMP
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _count
       112 |   int _type
       116 |   int _code
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac832f8 <../elements/local/forceicmp.hh:17:1, line:32:1> line:17:7 class ForceICMP definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55587ac83458 <col:1, col:7> col:7 implicit referenced class ForceICMP
|-AccessSpecDecl 0x55587ac834e8 <line:18:1, col:7> col:1 public
|-CXXConstructorDecl 0x55587ac83570 <line:19:3, col:13> col:3 ForceICMP 'void ()'
|-CXXDestructorDecl 0x55587ac83660 <line:20:3, col:14> col:3 ~ForceICMP 'void ()' noexcept-unevaluated 0x55587ac83660
| `-Overrides: [ 0x55587ac6abe8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55587ac83790 <line:22:3, col:56> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55587ac6c048 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55587ac84238 <col:34, col:56>
|   `-ReturnStmt 0x55587ac84228 <col:36, col:43>
|     `-ImplicitCastExpr 0x55587ac84210 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55587ac841e8 <col:43> 'const char [10]' lvalue "ForceICMP"
|-CXXMethodDecl 0x55587ac83858 <line:23:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55587ac6c110 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55587ac84298 <col:34, col:54>
|   `-ReturnStmt 0x55587ac84288 <col:36, col:43>
|     `-ImplicitCastExpr 0x55587ac84270 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55587ac84250 <col:43> 'const char []' lvalue Var 0x55587ac6c3c0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55587ac83b30 <line:24:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55587ac6d8e0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55587ac839e0 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x55587ac83a58 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac83c80 <line:26:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55587ac6b228 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55587ac83bf0 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55587ac83d28 <line:28:1, col:8> col:1 private
|-FieldDecl 0x55587ac83d68 <line:29:3, col:7> col:7 referenced _count 'int'
|-FieldDecl 0x55587ac83dd0 <line:30:3, col:7> col:7 referenced _type 'int'
|-FieldDecl 0x55587ac83e38 <line:31:3, col:7> col:7 referenced _code 'int'
|-CXXConstructorDecl 0x55587ac83eb8 <line:17:7> col:7 implicit ForceICMP 'void (const ForceICMP &)' inline default_delete noexcept-unevaluated 0x55587ac83eb8
| `-ParmVarDecl 0x55587ac83fc8 <col:7> col:7 'const ForceICMP &'
`-CXXMethodDecl 0x55587ac84068 <col:7> col:7 implicit operator= 'ForceICMP &(const ForceICMP &)' inline default_delete noexcept-unevaluated 0x55587ac84068
  `-ParmVarDecl 0x55587ac84178 <col:7> col:7 'const ForceICMP &'

Layout: <CGRecordLayout
  LLVMType:%class.ForceICMP = type { %class.Element.base, i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.ForceICMP = type { %class.Element.base, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587aa3d7a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55587aa3d8b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55587aa3d958 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55587aa3d9b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55587aa3da18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55587aa3dac8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587aa3ddd0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587aa3dee8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55587aa3df90 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55587aa3dff8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55587aa3e088 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55587aa44120 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55587aa44558 <col:12>
|-CXXConstructorDecl 0x55587aa44228 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55587aa44338 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55587aa3df90 'data' 'const char *'
| | `-ImplicitCastExpr 0x55587aa46ae0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55587aa46ab0 <col:12> 'const char *const' lvalue .data 0x55587aa3df90
| |     `-DeclRefExpr 0x55587aa46a90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa44338 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55587aa3dff8 'length' 'int'
| | `-ImplicitCastExpr 0x55587aa46b70 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55587aa46b40 <col:12> 'const int' lvalue .length 0x55587aa3dff8
| |     `-DeclRefExpr 0x55587aa46b20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa44338 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55587aa3e088 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55587aa46c00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55587aa46bd0 <col:12> 'String::memo_t *const' lvalue .memo 0x55587aa3e088
| |     `-DeclRefExpr 0x55587aa46bb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa44338 '' 'const String::rep_t &'
| `-CompoundStmt 0x55587aa46c58 <col:12>
|-CXXConstructorDecl 0x55587aa443d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55587aa443d8
| `-ParmVarDecl 0x55587aa444e8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55587aa49a40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55587aa55458 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55587aa55568 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55587aa55a80 <col:12>
|   |-BinaryOperator 0x55587aa55898 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55587aa55850 <col:12> 'const char *' lvalue ->data 0x55587aa3df90
|   | | `-CXXThisExpr 0x55587aa55840 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55587aa55880 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55587aa55810 <col:12> 'const char *const' lvalue .data 0x55587aa3df90
|   |     `-DeclRefExpr 0x55587aa557f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa55568 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55587aa55960 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55587aa55918 <col:12> 'int' lvalue ->length 0x55587aa3dff8
|   | | `-CXXThisExpr 0x55587aa55908 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55587aa55948 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55587aa558d8 <col:12> 'const int' lvalue .length 0x55587aa3dff8
|   |     `-DeclRefExpr 0x55587aa558b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa55568 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55587aa55a28 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55587aa559e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55587aa3e088
|   | | `-CXXThisExpr 0x55587aa559d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55587aa55a10 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55587aa559a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55587aa3e088
|   |     `-DeclRefExpr 0x55587aa55980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa55568 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55587aa55a70 <col:12>
|     `-UnaryOperator 0x55587aa55a58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587aa55a48 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55587aa555d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55587aa555d8
  `-ParmVarDecl 0x55587aa556e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587aa34d10 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55587aa34e28 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55587aa34eb8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55587aa34ef8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55587a708fd0 'const char *'
|   `-QualType 0x55587a708521 'const char' const
|     `-BuiltinType 0x55587a708520 'char'
|-TypedefDecl 0x55587aa34f80 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55587aa34f50 'String::const_iterator' sugar
|   |-Typedef 0x55587aa34ef8 'const_iterator'
|   `-PointerType 0x55587a708fd0 'const char *'
|     `-QualType 0x55587a708521 'const char' const
|       `-BuiltinType 0x55587a708520 'char'
|-TypedefDecl 0x55587aa350f0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55587aa35060 'int (String::*)() const'
|   |-RecordType 0x55587aa34da0 'String'
|   | `-CXXRecord 0x55587aa34d10 'String'
|   `-ParenType 0x55587aa35000 'int () const' sugar
|     `-FunctionProtoType 0x55587aa09ba0 'int () const' const cdecl
|       `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587aa35158 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55587a85e7a0 'int64_t' sugar
|   |-Typedef 0x55587a771390 'int64_t'
|   `-TypedefType 0x55587a74a630 '__int64_t' sugar
|     |-Typedef 0x55587a74a208 '__int64_t'
|     `-BuiltinType 0x55587a7085a0 'long'
|-TypedefDecl 0x55587aa351c0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55587a85e6c0 'uint64_t' sugar
|   |-Typedef 0x55587a771530 'uint64_t'
|   `-TypedefType 0x55587a74a6c0 '__uint64_t' sugar
|     |-Typedef 0x55587a74a278 '__uint64_t'
|     `-BuiltinType 0x55587a708640 'unsigned long'
|-TypedefDecl 0x55587aa35250 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55587aa35220 'String::intmax_t' sugar
|   |-Typedef 0x55587aa35158 'intmax_t'
|   `-TypedefType 0x55587a85e7a0 'int64_t' sugar
|     |-Typedef 0x55587a771390 'int64_t'
|     `-TypedefType 0x55587a74a630 '__int64_t' sugar
|       |-Typedef 0x55587a74a208 '__int64_t'
|       `-BuiltinType 0x55587a7085a0 'long'
|-TypedefDecl 0x55587aa352e0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55587aa352b0 'String::uintmax_t' sugar
|   |-Typedef 0x55587aa351c0 'uintmax_t'
|   `-TypedefType 0x55587a85e6c0 'uint64_t' sugar
|     |-Typedef 0x55587a771530 'uint64_t'
|     `-TypedefType 0x55587a74a6c0 '__uint64_t' sugar
|       |-Typedef 0x55587a74a278 '__uint64_t'
|       `-BuiltinType 0x55587a708640 'unsigned long'
|-CXXConstructorDecl 0x55587aa353a0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55587aa35548 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55587aa35488 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55587aa356f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55587aa35638 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55587aa35850 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55587aa357c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55587aa35a68 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55587aa35918 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55587aa35998 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55587aa35c88 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55587aa35b38 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55587aa35bb8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55587aa35ea8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55587aa35d58 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55587aa35dd8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55587aa360c8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55587aa35f78 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55587aa35ff8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55587aa36258 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55587aa36190 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55587aa363d8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55587aa36318 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55587aa36568 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55587aa364a0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55587aa366c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55587aa36630 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55587aa36818 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55587aa36788 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55587aa36970 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55587aa368e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55587aa36af8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55587aa36a38 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55587aa36c88 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55587aa36bc0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55587aa36e18 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55587aa36d50 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55587aa36fa8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55587aa36ee0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55587aa370a0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55587aa371c8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55587aa37348 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55587aa37280 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55587aa37498 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55587aa37408 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55587aa37550 <col:63> "" ""
|-CXXMethodDecl 0x55587aa37698 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55587aa375d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55587aa378a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55587aa37758 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55587aa377d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55587aa37ac8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55587aa37970 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55587aa379f0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55587aa37da8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55587aa37b88 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55587aa37c08 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55587aa43bf0 <col:55> 'int' 10
| `-ParmVarDecl 0x55587aa37c80 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55587aa43c10 <col:76> 'bool' true
|-CXXMethodDecl 0x55587aa38088 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55587aa37e70 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55587aa37ef0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55587aa43c20 <col:56> 'int' 10
| `-ParmVarDecl 0x55587aa37f68 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55587aa43c40 <col:77> 'bool' true
|-CXXMethodDecl 0x55587aa38190 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55587aa38258 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55587aa38320 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55587aa383c0 <col:20>
| `-OptimizeNoneAttr 0x55587aa38418 <col:30>
|-CXXConversionDecl 0x55587aa38508 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55587aa385d8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55587aa38698 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55587aa38788 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55587aa38848 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55587aa389c8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55587aa38900 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55587aa38b18 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55587aa38a88 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55587aa38c08 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55587aa38cc8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55587aa38f18 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55587aa38d80 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55587aa38e00 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55587aa39178 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55587aa38fe0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55587aa39060 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55587aa39248 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55587aa39458 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55587aa39300 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55587aa39380 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55587aa39678 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55587aa39520 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55587aa395a0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55587aa39808 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55587aa39740 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55587aa398f8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55587aa39a68 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55587aa399a8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55587aa39c78 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55587aa39b28 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55587aa39ba8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55587aa39e90 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55587aa39d38 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55587aa39db0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55587aa3a020 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55587aa39f50 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55587aa3a240 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55587aa3a0e0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55587aa3a160 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55587aa3a390 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55587aa3a300 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55587aa3a568 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55587aa3a450 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55587aa3a4d0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55587aa3a6b8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55587aa3a628 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55587aa3a8d0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55587aa3a770 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55587aa3a7f0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55587aa43c50 <col:39> 'int' 0
|-CXXMethodDecl 0x55587aa3aaf0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55587aa3a990 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55587aa3aa10 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55587aa43c70 <col:48> 'int' 0
|-CXXMethodDecl 0x55587aa3acd0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55587aa3abb0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55587aa3ac30 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55587aa43c90 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55587aa3ada0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55587aa3ae60 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55587aa3af20 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55587aa3afe0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55587aa3b0a0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55587aa3b248 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55587aa3b150 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55587aa3b3c8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55587aa3b300 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55587aa3b5a0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55587aa3b488 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55587aa3b718 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55587aa3b658 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55587aa3b860 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55587aa3b7d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55587aa3b9b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55587aa3b920 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55587aa3bb88 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55587aa3ba70 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55587aa3baf0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55587aa3bd68 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55587aa3bc50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55587aa3bcd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55587aa3beb8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55587aa3be28 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55587aa3c0c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55587aa3bf78 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55587aa3bff8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55587aa3c228 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55587aa3c190 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55587aa3c380 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55587aa3c2e8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55587aa3c428 <col:57> "" ""
|-CXXMethodDecl 0x55587aa3c538 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55587aa3c4a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55587aa3c688 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55587aa3c5f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55587aa3c808 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55587aa3c740 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55587aa3c8d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55587aa3c990 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55587aa3ca50 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55587aa3caf0 <col:49> "" ""
|-CXXMethodDecl 0x55587aa3cb80 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55587aa3cc40 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55587aa3cd30 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55587aa3cdf8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55587aa3ceb8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55587aa3cf78 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55587aa3d070 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55587aa3d138 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55587aa3d200 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55587aa3d3d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55587aa3d2b8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55587aa3d338 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55587aa3d600 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55587aa3d4a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55587aa3d520 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55587aa3d710 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55587aa3d778 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55587aa3d7a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55587aa3d8b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55587aa3d958 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55587aa3d9b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55587aa3da18 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55587aa3dac8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55587aa3db30 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55587aa3dd68 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55587aa3ddb8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587aa3dd48 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55587aa3dc58 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55587aa3dc00 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55587aa3dc40 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55587aa3dc20 <col:32> 'int' 8
|-CXXRecordDecl 0x55587aa3ddd0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55587aa3dee8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55587aa3df90 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55587aa3dff8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55587aa3e088 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55587aa44120 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55587aa44558 <col:12>
| |-CXXConstructorDecl 0x55587aa44228 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55587aa44338 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55587aa3df90 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55587aa46ae0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55587aa46ab0 <col:12> 'const char *const' lvalue .data 0x55587aa3df90
| | |     `-DeclRefExpr 0x55587aa46a90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa44338 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55587aa3dff8 'length' 'int'
| | | `-ImplicitCastExpr 0x55587aa46b70 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55587aa46b40 <col:12> 'const int' lvalue .length 0x55587aa3dff8
| | |     `-DeclRefExpr 0x55587aa46b20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa44338 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55587aa3e088 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55587aa46c00 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55587aa46bd0 <col:12> 'String::memo_t *const' lvalue .memo 0x55587aa3e088
| | |     `-DeclRefExpr 0x55587aa46bb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa44338 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55587aa46c58 <col:12>
| |-CXXConstructorDecl 0x55587aa443d8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55587aa443d8
| | `-ParmVarDecl 0x55587aa444e8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55587aa49a40 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55587aa55458 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55587aa55568 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55587aa55a80 <col:12>
| |   |-BinaryOperator 0x55587aa55898 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55587aa55850 <col:12> 'const char *' lvalue ->data 0x55587aa3df90
| |   | | `-CXXThisExpr 0x55587aa55840 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55587aa55880 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55587aa55810 <col:12> 'const char *const' lvalue .data 0x55587aa3df90
| |   |     `-DeclRefExpr 0x55587aa557f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa55568 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55587aa55960 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55587aa55918 <col:12> 'int' lvalue ->length 0x55587aa3dff8
| |   | | `-CXXThisExpr 0x55587aa55908 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55587aa55948 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55587aa558d8 <col:12> 'const int' lvalue .length 0x55587aa3dff8
| |   |     `-DeclRefExpr 0x55587aa558b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa55568 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55587aa55a28 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55587aa559e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55587aa3e088
| |   | | `-CXXThisExpr 0x55587aa559d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55587aa55a10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55587aa559a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55587aa3e088
| |   |     `-DeclRefExpr 0x55587aa55980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55587aa55568 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55587aa55a70 <col:12>
| |     `-UnaryOperator 0x55587aa55a58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55587aa55a48 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55587aa555d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55587aa555d8
|   `-ParmVarDecl 0x55587aa556e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55587aa3e100 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55587aa3e348 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55587aa3e168 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55587aa3e1e8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55587aa3e260 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55587aa440e0 <col:79, line:261:5>
|   |-BinaryOperator 0x55587aa43d58 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55587aa43cf0 <col:2, col:5> 'const char *' lvalue .data 0x55587aa3df90
|   | | `-MemberExpr 0x55587aa43cc0 <col:2> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|   | |   `-CXXThisExpr 0x55587aa43cb0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55587aa43d40 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55587aa43d20 <col:12> 'const char *' lvalue ParmVar 0x55587aa3e168 'data' 'const char *'
|   |-BinaryOperator 0x55587aa43e20 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55587aa43db8 <col:2, col:5> 'int' lvalue .length 0x55587aa3dff8
|   | | `-MemberExpr 0x55587aa43d88 <col:2> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|   | |   `-CXXThisExpr 0x55587aa43d78 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55587aa43e08 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55587aa43de8 <col:14> 'int' lvalue ParmVar 0x55587aa3e1e8 'length' 'int'
|   `-IfStmt 0x55587aa440c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55587aa43f40 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55587aa43f28 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55587aa43f08 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55587aa43ee8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55587aa43e80 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55587aa3e088
|     |       | `-MemberExpr 0x55587aa43e50 <col:7> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|     |       |   `-CXXThisExpr 0x55587aa43e40 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55587aa43ed0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55587aa43eb0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55587aa3e260 'memo' 'String::memo_t *'
|     `-CallExpr 0x55587aa440a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55587aa44088 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55587aa43f90 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55587aa2cd78 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55587aa43ff8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55587aa3d958
|         `-ImplicitCastExpr 0x55587aa43fe0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55587aa43fc0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55587aa3e260 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55587aa3e5f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55587aa3e418 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55587aa3e498 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55587aa3e510 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55587aa3e100 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55587aa44568 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55587aa446f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55587aa44660 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55587aa445d0 <col:2> '<bound member function type>' ->assign_memo 0x55587aa3e348
|     | `-ImplicitCastExpr 0x55587aa44698 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55587aa445c0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55587aa446b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55587aa44600 <col:14> 'const char *' lvalue ParmVar 0x55587aa3e418 'data' 'const char *'
|     |-ImplicitCastExpr 0x55587aa446c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55587aa44620 <col:20> 'int' lvalue ParmVar 0x55587aa3e498 'length' 'int'
|     `-ImplicitCastExpr 0x55587aa446e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55587aa44640 <col:28> 'String::memo_t *' lvalue ParmVar 0x55587aa3e510 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55587aa3e788 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55587aa3e6c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55587aa44950 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55587aa448d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55587aa44720 <col:2> '<bound member function type>' ->assign_memo 0x55587aa3e348
|     | `-CXXThisExpr 0x55587aa44710 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55587aa44908 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55587aa447a0 <col:14, col:19> 'const char *' lvalue .data 0x55587aa3df90
|     |   `-MemberExpr 0x55587aa44770 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55587aa3e100
|     |     `-DeclRefExpr 0x55587aa44750 <col:14> 'const String' lvalue ParmVar 0x55587aa3e6c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55587aa44920 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55587aa44820 <col:25, col:30> 'int' lvalue .length 0x55587aa3dff8
|     |   `-MemberExpr 0x55587aa447f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55587aa3e100
|     |     `-DeclRefExpr 0x55587aa447d0 <col:25> 'const String' lvalue ParmVar 0x55587aa3e6c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55587aa44938 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55587aa448a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55587aa3e088
|         `-MemberExpr 0x55587aa44870 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55587aa3e100
|           `-DeclRefExpr 0x55587aa44850 <col:38> 'const String' lvalue ParmVar 0x55587aa3e6c8 'x' 'const String &'
|-CXXMethodDecl 0x55587aa3e850 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55587aa45310 <col:31, line:278:5>
|   `-IfStmt 0x55587aa452f8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55587aa449f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55587aa449d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55587aa449a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55587aa3e088
|     |     `-MemberExpr 0x55587aa44978 <col:6> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|     |       `-CXXThisExpr 0x55587aa44968 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55587aa452d0 <col:15, line:277:2>
|       |-ParenExpr 0x55587aa44ea0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55587aa44e70 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55587aa44b00 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55587aa44ae8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55587aa44ad0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55587aa44a90 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55587aa3d958
|       |   |       `-ImplicitCastExpr 0x55587aa44a78 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55587aa44a48 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55587aa3e088
|       |   |           `-MemberExpr 0x55587aa44a18 <col:27> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|       |   |             `-CXXThisExpr 0x55587aa44a08 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55587aa44b60 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55587aa44b40 <col:54> 'int' 0
|       |   `-CallExpr 0x55587aa44dd0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55587aa44db8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55587aa44d38 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55587aa44e10 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55587aa44c48 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55587aa44e28 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55587aa44c78 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55587aa44e40 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55587aa44cb0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55587aa44e58 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55587aa44d20 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55587aa44d08 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55587aa44cd0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55587aa451f0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55587aa450b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55587aa45098 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55587aa45010 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55587aa2e1c0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55587aa44fe0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55587aa3d958
|       | |   `-ImplicitCastExpr 0x55587aa44fc8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55587aa44f98 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55587aa3e088
|       | |       `-MemberExpr 0x55587aa44f68 <col:40> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|       | |         `-CXXThisExpr 0x55587aa44f58 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55587aa451b0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55587aa45198 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55587aa450d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55587aa43030 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55587aa451d8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55587aa45138 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55587aa3e088
|       |       `-MemberExpr 0x55587aa45108 <col:15> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|       |         `-CXXThisExpr 0x55587aa450f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55587aa452b0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55587aa45248 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55587aa3e088
|         | `-MemberExpr 0x55587aa45218 <col:6> 'String::rep_t' lvalue ->_r 0x55587aa3e100
|         |   `-CXXThisExpr 0x55587aa45208 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55587aa45298 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55587aa45278 <col:16> 'int' 0
|-CXXMethodDecl 0x55587aa3eae8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55587aa3e908 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55587aa3e988 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55587aa3ea00 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55587aa3ebc0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55587aa3ee10 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55587aa3ec78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55587aa3ecf8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55587aa3ed70 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55587aa3eff8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55587aa3eee0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55587aa3ef60 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55587aa3f0f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55587aa453e8 <col:41, line:286:5>
|   `-ReturnStmt 0x55587aa453d8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55587aa453a8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55587aa45370 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55587aa45358 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55587aa45338 <col:46> 'int' 1
|-CXXMethodDecl 0x55587aa3f398 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55587aa3f1b0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55587aa3f230 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55587aa3f2b0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55587aa43030 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55587aa3f460 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55587aa43100 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55587aa432d0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55587aa431b8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55587aa43238 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55587aa43390 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55587aa43458 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55587aa43558 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55587aa435d0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55587aa43648 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55587aa436b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55587aa437b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55587aa43800 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587aa43790 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55587aa43770 <col:22> 'int' 14
|-CXXMethodDecl 0x55587aa43a18 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55587aa43830 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55587aa438b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55587aa43930 <col:43> col:46 'int'
|-FriendDecl 0x55587aa43b20 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55587aa43bb0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55587acd5d40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55587acd5f18 prev 0x55587acd5d40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55587acd5fa8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55587acd5fd0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587acd7980 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55587acd7930 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55587acd7910 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55587acd6230 'type'
|     `-SubstTemplateTypeParmType 0x55587acd61b0 'String' sugar
|       |-TemplateTypeParmType 0x55587a9f95c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587a9f9570 'T'
|       `-RecordType 0x55587aa34da0 'String'
|         `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acd7a38 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55587acd7a00 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55587acd79e0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55587acd7980 'type'
|     `-ElaboratedType 0x55587acd7930 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55587acd7910 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55587acd6230 'type'
|         `-SubstTemplateTypeParmType 0x55587acd61b0 'String' sugar
|           |-TemplateTypeParmType 0x55587a9f95c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55587a9f9570 'T'
|           `-RecordType 0x55587aa34da0 'String'
|             `-CXXRecord 0x55587aa34d10 'String'
|-CXXMethodDecl 0x55587acd7bb8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55587acd7ac8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55587acd7ca8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55587acd7d88 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55587acd8058 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55587acd7f60 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55587acd8298 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55587acd8110 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55587acd8188 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55587acd8468 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55587acd8358 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55587acd83d0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55587acd85c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55587acd8698 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55587acd88e8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55587acd8758 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55587acd87d0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55587acd8b48 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55587acd89b8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55587acd8a30 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55587acd8d08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55587acd8c18 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55587acd8ec8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55587acd8dd0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55587acd8f80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55587acd9030 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55587acd9268 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55587acd90e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55587acd9158 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55587acd9508 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55587acd9410 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55587acd95d0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55587acd9620 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55587acd9670 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55587ac6d550 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55587acd47a8 prev 0x55587ac6d550 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55587acd5cb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55587acd5c60 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55587acd5c40 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55587acd5af0 'type'
|     `-SubstTemplateTypeParmType 0x55587acd5980 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55587a9cf370 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55587a9cf318 'F'
|       `-RecordType 0x55587acd55e0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55587acd5500 'typed_array_memory'
|-FieldDecl 0x55587acd96c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55587acd9710 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55587acd9748 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|   |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55587aa06888 'T'
|   `-RecordType 0x55587aa34da0 'String'
|     `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acd97d8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55587acd97a0 'String &'
|   `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|     |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55587aa06888 'T'
|     `-RecordType 0x55587aa34da0 'String'
|       `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acd9868 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55587acd9830 'const String &'
|   `-QualType 0x55587acd4841 'const String' const
|     `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-RecordType 0x55587aa34da0 'String'
|         `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acd98f8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55587acd98c0 'String *'
|   `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|     |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55587aa06888 'T'
|     `-RecordType 0x55587aa34da0 'String'
|       `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acd9988 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55587acd9950 'const String *'
|   `-QualType 0x55587acd4841 'const String' const
|     `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-RecordType 0x55587aa34da0 'String'
|         `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acda5e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55587acda590 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55587acda570 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55587acda4a8 'type'
|     `-LValueReferenceType 0x55587acda470 'const String &'
|       `-QualType 0x55587acda211 'const String' const
|         `-SubstTemplateTypeParmType 0x55587acda210 'String' sugar
|           |-TemplateTypeParmType 0x55587a9d92c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55587a9d9268 'T'
|           `-RecordType 0x55587aa34da0 'String'
|             `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acda648 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55587acd9830 'const String &'
|   `-QualType 0x55587acd4841 'const String' const
|     `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-RecordType 0x55587aa34da0 'String'
|         `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acda6a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587acda708 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55587acd98c0 'String *'
|   `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|     |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55587aa06888 'T'
|     `-RecordType 0x55587aa34da0 'String'
|       `-CXXRecord 0x55587aa34d10 'String'
|-TypedefDecl 0x55587acda770 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55587acd9950 'const String *'
|   `-QualType 0x55587acd4841 'const String' const
|     `-SubstTemplateTypeParmType 0x55587acd4840 'String' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-RecordType 0x55587aa34da0 'String'
|         `-CXXRecord 0x55587aa34d10 'String'
|-EnumDecl 0x55587acda7c8 <line:134:5> col:5
| `-EnumConstantDecl 0x55587acda8c0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55587acda8a0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55587aa07f68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55587aa07f40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55587aa07f20 <col:40> 'int' 1
|-CXXConstructorDecl 0x55587acda948 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55587acdabd8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55587acdaa00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55587acdaaa0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55587acdae68 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55587acdad50 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55587acdb128 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55587acdb010 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55587acdb440 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55587acdb320 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55587acdb750 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55587acdb630 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55587acdba40 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55587acdb888 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55587acdb900 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55587acdbb68 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55587acdbc18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587acdbc70 <col:30> Inherited
|-CXXMethodDecl 0x55587acdbcb8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55587acdbd68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587acdbdc0 <col:30> Inherited
|-CXXMethodDecl 0x55587acdbe88 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55587acdbf38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587acdbf90 <col:30> Inherited
|-CXXMethodDecl 0x55587acdbfd8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55587acdc088 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587acdc0e0 <col:30> Inherited
|-CXXMethodDecl 0x55587acdc128 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55587acdc1d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587acdc230 <col:30> Inherited
|-CXXMethodDecl 0x55587acdc278 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55587acdc328 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587acdc380 <col:30> Inherited
|-CXXMethodDecl 0x55587acdc3a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55587acdc458 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55587acdc508 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55587acdc6c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55587acdc5b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55587acdc630 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55587acdc818 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55587acdc788 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587acdc9c8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55587acdc8d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55587acdca80 <col:20>
| `-OptimizeNoneAttr 0x55587acdcad8 <col:30>
|-CXXMethodDecl 0x55587acdcbf8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55587acdcb00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55587acdccb0 <col:20>
| `-OptimizeNoneAttr 0x55587acdcd08 <col:30>
|-CXXMethodDecl 0x55587acdcdc0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55587acdcd30 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587acdcf08 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55587acdce78 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587acdd038 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55587acdd138 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55587acdd208 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55587acdd2d8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55587acdd418 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55587acdd388 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587acdd560 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55587acdd4d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587acdd6a8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55587acdd618 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55587acdd760 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55587acdd860 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55587acdd7d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55587acdd918 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55587acdd9d8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55587acddad8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55587acddc58 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55587acddb98 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55587acde448 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55587acddd10 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55587acde3a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55587acde2a8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55587acde528 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55587acde678 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55587acde5e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55587acde730 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55587acde978 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55587acde7f0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55587acde868 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55587acdeb08 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55587acdea48 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55587acded18 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55587acdebd0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55587acdec48 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55587acdedd8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55587acdf038 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55587acdef40 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55587acdf108 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55587ad83ca8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac842b0 prev 0x55587ac6a720 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55587ac843a8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55587ac84438 <col:22, col:28> col:22 public
|-EnumDecl 0x55587ac84460 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55587ac84578 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac84558 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55587ac84540 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55587ac84520 <col:14> 'int' 999
| |-EnumConstantDecl 0x55587ac84620 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac84600 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55587ac845e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55587ac845c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55587ac846b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac84690 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55587ac84670 <col:17> 'int' 0
| |-EnumConstantDecl 0x55587ac84740 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac84720 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55587ac84700 <col:13> 'int' 1
| |-EnumConstantDecl 0x55587ac847d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac847b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55587ac84790 <col:16> 'int' 2
| |-EnumConstantDecl 0x55587ac84860 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac84840 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55587ac84820 <col:13> 'int' 3
| |-EnumConstantDecl 0x55587ac848f0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac848d0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55587ac848b0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55587ac84980 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac84960 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55587ac84940 <col:14> 'int' 5
| |-EnumConstantDecl 0x55587ac84a10 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55587ac849f0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55587ac849d0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55587ac84aa0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55587ac84a80 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55587ac84a60 <col:13> 'int' 7
|-VarDecl 0x55587ac84b10 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55587ac84b98 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55587ac84c20 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55587ac84ca8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55587ac84d30 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55587ac84db8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55587ac84e40 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55587ac84ec8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55587ac84f50 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55587ac84fd8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55587ac85060 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55587ac85160 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55587ac8c1c8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55587ac8c958 <line:128:13> 'int' 0
| `-CompoundStmt 0x55587ac8c9c8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55587ac85250 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55587ac8c9d8 <col:29, line:132:5>
|-CXXMethodDecl 0x55587ac85408 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55587ac85340 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac854d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55587ac855b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55587ac8ca30 <col:44, line:161:5>
|   `-ReturnStmt 0x55587ac8ca20 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55587ac8ca08 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac8c9e8 <col:9> 'ErrorHandler *' lvalue Var 0x55587ac8c228 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac85728 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55587ac85668 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55587ac857f0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55587ac8ca90 <col:43, line:173:5>
|   `-ReturnStmt 0x55587ac8ca80 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55587ac8ca68 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac8ca48 <col:9> 'ErrorHandler *' lvalue Var 0x55587ac8c2a0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55587ac858a8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55587ac85928 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55587ac85a38 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55587ac859a8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55587ac85b88 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55587ac85af8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55587ac85ce0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55587ac85c48 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55587ac85e38 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55587ac85da0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55587ac85f90 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55587ac85ef8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55587ac861a0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55587ac86048 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55587ac860c8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55587ac86378 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55587ac86260 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55587ac862e0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55587ac86598 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55587ac86438 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55587ac864b8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55587ac86778 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55587ac86658 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55587ac866d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55587ac86958 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55587ac86838 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55587ac868b8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55587ac86ae0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55587ac86a18 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55587ac86cb0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55587ac86b98 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55587ac86c10 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55587ac8cce8 <col:57, line:234:5>
|   `-ReturnStmt 0x55587ac8ccd8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55587ac8ccc0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55587ac8cc68 <col:9, col:41> 'int'
|         |-MemberExpr 0x55587ac8cc38 <col:9> '<bound member function type>' ->xmessage 0x55587ac86ae0
|         | `-CXXThisExpr 0x55587ac8cc28 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55587ac8cca8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55587ac8cc90 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55587ac8cc08 <col:18, col:40> 'String' (CXXTemporary 0x55587ac8cc08)
|               `-CallExpr 0x55587ac8cbd0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55587ac8cbb8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55587ac8cb30 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55587ac88d38 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55587ac8cb50 <col:31> 'const String' lvalue ParmVar 0x55587ac86c10 'str' 'const String &'
|                 `-DeclRefExpr 0x55587ac8cb70 <col:36> 'const String' lvalue ParmVar 0x55587ac86b98 'anno' 'const String &'
|-CXXMethodDecl 0x55587ac86ff0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55587ac86d70 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55587ac86df0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55587ac86ec0 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55587ac8cf78 <col:68, line:243:5>
|   `-ReturnStmt 0x55587ac8cf68 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55587ac8cf50 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55587ac8cef0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55587ac8cec0 <col:9> '<bound member function type>' ->xmessage 0x55587ac86cb0
|         | `-CXXThisExpr 0x55587ac8ceb0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55587ac8cd88 <col:18> 'const String' lvalue ParmVar 0x55587ac86d70 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55587ac8cf38 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55587ac8cf20 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55587ac8ce90 <col:24, col:40> 'String' (CXXTemporary 0x55587ac8ce90)
|               `-CXXMemberCallExpr 0x55587ac8ce28 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55587ac8cdb8 <col:24> '<bound member function type>' ->vformat 0x55587ac881d0
|                 | `-CXXThisExpr 0x55587ac8cda8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55587ac8ce58 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55587ac8cde8 <col:32> 'const char *' lvalue ParmVar 0x55587ac86df0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55587ac8ce70 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55587ac8ce08 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55587ac86ec0 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55587ac87290 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55587ac870b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55587ac87130 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55587ac871a8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55587ac8d2b8 <col:23, line:254:5>
|   `-ReturnStmt 0x55587ac8d2a8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55587ac8d290 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55587ac8d230 <col:9, col:71> 'int'
|         |-MemberExpr 0x55587ac8d200 <col:9> '<bound member function type>' ->xmessage 0x55587ac86cb0
|         | `-CXXThisExpr 0x55587ac8d1f0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55587ac8d278 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55587ac8d260 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55587ac8d1b0 <col:18, col:65> 'String' (CXXTemporary 0x55587ac8d1b0)
|         |     `-CallExpr 0x55587ac8d148 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55587ac8d130 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55587ac8d018 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55587ac88d38 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55587ac8d038 <col:31> 'const String' lvalue ParmVar 0x55587ac87130 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55587ac8d190 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55587ac8d178 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55587ac8d110 <col:37, col:64> 'String' (CXXTemporary 0x55587ac8d110)
|         |             `-CallExpr 0x55587ac8d0e0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55587ac8d0c8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55587ac8d058 <col:37> 'String (const String &)' lvalue CXXMethod 0x55587ac89388 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55587ac8d078 <col:56> 'const String' lvalue ParmVar 0x55587ac870b8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55587ac8d1d0 <col:68> 'const String' lvalue ParmVar 0x55587ac871a8 'str' 'const String &'
|-CXXMethodDecl 0x55587ac87610 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55587ac87358 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55587ac873d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55587ac87450 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55587ac874c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55587ac8d570 <col:34, line:267:5>
|   `-ReturnStmt 0x55587ac8d560 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55587ac8d548 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55587ac8d4e0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55587ac8d4b0 <col:9> '<bound member function type>' ->xmessage 0x55587ac87290
|         | `-CXXThisExpr 0x55587ac8d4a0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55587ac8d358 <col:18> 'const String' lvalue ParmVar 0x55587ac87358 'landmark' 'const String &'
|         |-DeclRefExpr 0x55587ac8d378 <col:28> 'const String' lvalue ParmVar 0x55587ac873d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55587ac8d530 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55587ac8d518 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55587ac8d480 <col:34, col:50> 'String' (CXXTemporary 0x55587ac8d480)
|               `-CXXMemberCallExpr 0x55587ac8d418 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55587ac8d3a8 <col:34> '<bound member function type>' ->vformat 0x55587ac881d0
|                 | `-CXXThisExpr 0x55587ac8d398 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55587ac8d448 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55587ac8d3d8 <col:42> 'const char *' lvalue ParmVar 0x55587ac87450 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55587ac8d460 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55587ac8d3f8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55587ac874c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55587ac87720 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55587ac8d5f0 <col:25, line:288:5>
|   `-ReturnStmt 0x55587ac8d5e0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55587ac8d5c8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55587ac8d598 <col:9> 'const int' lvalue ->_nerrors 0x55587ac8c1c8
|         `-CXXThisExpr 0x55587ac8d588 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55587ac87930 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55587ac877d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55587ac87858 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55587ac87c18 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55587ac879f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55587ac87a78 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55587ac87af0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55587ac87db0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55587ac87ce8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55587ac87ff8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55587ac87e70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55587ac87ee8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55587ac8d850 <col:58, line:357:5>
|   `-ReturnStmt 0x55587ac8d840 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55587ac8d828 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55587ac8d7f8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55587ac8d7e0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55587ac8d7c0 <col:9, col:29> 'String' (CXXTemporary 0x55587ac8d7c0)
|             `-CallExpr 0x55587ac8d750 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55587ac8d738 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55587ac8d6b8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55587ac87c18 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55587ac8d658 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55587ac8d788 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55587ac8d678 <col:21> 'const char *' lvalue ParmVar 0x55587ac87e70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55587ac8d7a0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55587ac8d698 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55587ac87ee8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55587ac881d0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55587ac880c0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55587ac88138 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55587ac88328 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55587ac88298 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55587ac884a8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55587ac883e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55587ac88740 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55587ac88560 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55587ac885e0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55587ac88658 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55587ac888a0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55587ac88810 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55587ac8d968 <col:37, line:441:5>
|   `-IfStmt 0x55587ac8d950 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55587ac8d8d8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55587ac8d8a8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55587ac8d868 <col:6> 'int' lvalue ParmVar 0x55587ac88810 'level' 'int'
|     | `-ImplicitCastExpr 0x55587ac8d8c0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55587ac8d888 <col:15> 'ErrorHandler::Level' EnumConstant 0x55587ac84860 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55587ac8d938 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55587ac8d908 <col:8> 'int' lvalue ->_nerrors 0x55587ac8c1c8
|         `-CXXThisExpr 0x55587ac8d8f8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55587ac88968 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55587ac8da00 <col:26, line:448:5>
|   `-BinaryOperator 0x55587ac8d9e0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55587ac8d990 <col:2> 'int' lvalue ->_nerrors 0x55587ac8c1c8
|     | `-CXXThisExpr 0x55587ac8d980 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55587ac8d9c0 <col:13> 'int' 0
|-CXXMethodDecl 0x55587ac88b30 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55587ac88a20 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55587ac88a98 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55587ac88d38 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55587ac88bf0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55587ac88c68 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55587ac88fe8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55587ac88df8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55587ac88e78 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55587ac88ef8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55587ac890a0 <col:59> 0 0
|-CXXMethodDecl 0x55587ac89238 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55587ac89118 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55587ac89198 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55587ac8e070 <col:70, line:534:5>
|   |-DeclStmt 0x55587ac8db70 <line:528:2, col:20>
|   | |-VarDecl 0x55587ac8da28 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55587ac8da90 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55587ac8dac8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55587ac8db30 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55587ac8dc40 <line:529:2, col:23>
|   | `-VarDecl 0x55587ac8dba0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55587ac8dc28 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55587ac8dc08 <col:18> 'const char *' lvalue ParmVar 0x55587ac89118 'begin' 'const char *'
|   |-DoStmt 0x55587ac8e008 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55587ac8df38 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55587ac8df20 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55587ac8df00 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55587ac8dc58 <col:6> 'const char *' lvalue Var 0x55587ac8dba0 'x' 'const char *'
|   | |     `-CallExpr 0x55587ac8de50 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55587ac8de38 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55587ac8ddf0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55587ac8c6a0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55587ac8deb8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55587ac8dea0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55587ac8dd10 <col:20, col:27> 'String' (CXXTemporary 0x55587ac8dd10)
|   | |       |     `-CXXTemporaryObjectExpr 0x55587ac8dcd8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55587ac8ded0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55587ac8dd30 <col:30> 'const char *' lvalue Var 0x55587ac8dba0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55587ac8dee8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55587ac8dd50 <col:33> 'const char *' lvalue ParmVar 0x55587ac89198 'end' 'const char *'
|   | |       |-UnaryOperator 0x55587ac8dd90 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55587ac8dd70 <col:39> 'String' lvalue Var 0x55587ac8da28 'name' 'String'
|   | |       |-UnaryOperator 0x55587ac8ddc8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55587ac8dda8 <col:46> 'String' lvalue Var 0x55587ac8dac8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55587ac8dde0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55587ac8dff0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55587ac8dfd8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55587ac8dfb8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55587ac8df88 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|   |         `-ImplicitCastExpr 0x55587ac8df70 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55587ac8df50 <col:11> 'String' lvalue Var 0x55587ac8da28 'name' 'String'
|   `-ReturnStmt 0x55587ac8e060 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55587ac8e048 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac8e028 <col:9> 'const char *' lvalue Var 0x55587ac8dba0 'x' 'const char *'
|-CXXMethodDecl 0x55587ac89388 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55587ac892f8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55587ac8e678 <col:55, line:550:5>
|   `-IfStmt 0x55587ac8e650 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55587ac8e2b0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55587ac8e298 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55587ac8e280 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55587ac8e260 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55587ac8e230 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|     | |       `-DeclRefExpr 0x55587ac8e0d0 <col:6> 'const String' lvalue ParmVar 0x55587ac892f8 'x' 'const String &'
|     | `-BinaryOperator 0x55587ac8e210 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55587ac8e1e0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55587ac8e190 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55587ac8e178 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55587ac8e130 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55587aa51d40 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55587ac8e0f0 <col:11> 'const String' lvalue ParmVar 0x55587ac892f8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55587ac8e110 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55587ac8e1f8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55587ac8e1c8 <col:19> 'char' 123
|     |-ReturnStmt 0x55587ac8e320 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55587ac8e2f0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55587ac8e2d0 <col:13> 'const String' lvalue ParmVar 0x55587ac892f8 'x' 'const String &'
|     `-IfStmt 0x55587ac8e628 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55587ac8e3b8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55587ac8e3a0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55587ac8e380 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55587ac8e350 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|       |       `-DeclRefExpr 0x55587ac8e330 <col:11> 'const String' lvalue ParmVar 0x55587ac892f8 'x' 'const String &'
|       |-ReturnStmt 0x55587ac8e540 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55587ac8e528 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55587ac8e4f8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55587ac8e4e0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55587ac8e4c0 <col:13, col:29> 'String' (CXXTemporary 0x55587ac8e4c0)
|       |         `-CallExpr 0x55587ac8e470 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55587ac8e458 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55587ac8e3d0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55587ac88b30 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55587ac8e4a0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55587ac8e3f0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55587ac8e410 <col:28> 'const String' lvalue ParmVar 0x55587ac892f8 'x' 'const String &'
|       `-ReturnStmt 0x55587ac8e618 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55587ac8e600 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55587ac8e5d0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55587ac8e5b8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55587ac8e598 <col:13, col:20> 'String' (CXXTemporary 0x55587ac8e598)
|                 `-CXXTemporaryObjectExpr 0x55587ac8e560 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55587ac89588 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55587ac89440 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55587ac894b8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55587ac8c948 <col:71> 'bool' false
|-CXXRecordDecl 0x55587ac89638 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55587ac89938 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55587ac898d0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55587ac89870 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55587ac89830 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55587aa34da0 'String'
|       | `-CXXRecord 0x55587aa34d10 'String'
|       |-BuiltinType 0x55587a708580 'int'
|       `-DecayedType 0x55587ac86e90 '__va_list_tag *' sugar
|         |-TypedefType 0x55587ac86e60 'va_list' sugar
|         | |-Typedef 0x55587a926e90 'va_list'
|         | `-TypedefType 0x55587a926e40 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55587a85ea58 '__gnuc_va_list'
|         |   `-TypedefType 0x55587a85e9c0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55587a749d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55587a749ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55587a7092d0 '__va_list_tag'
|         |         `-CXXRecord 0x55587a709238 '__va_list_tag'
|         `-PointerType 0x55587a92c730 '__va_list_tag *'
|           `-RecordType 0x55587a7092d0 '__va_list_tag'
|             `-CXXRecord 0x55587a709238 '__va_list_tag'
|-EnumDecl 0x55587ac89990 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55587ac89a90 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac89ff0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89a70 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55587ac89a50 <col:16> 'int' 1
| |-EnumConstantDecl 0x55587ac89b20 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bc90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89b00 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55587ac89ae0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55587ac89bb0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bca8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89b90 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55587ac89b70 <col:22> 'int' 4
| |-EnumConstantDecl 0x55587ac89c40 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bcc0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89c20 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55587ac89c00 <col:17> 'int' 8
| |-EnumConstantDecl 0x55587ac89cd0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bcd8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89cb0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55587ac89c90 <col:22> 'int' 16
| |-EnumConstantDecl 0x55587ac89d60 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bcf0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89d40 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55587ac89d20 <col:19> 'int' 32
| |-EnumConstantDecl 0x55587ac89df0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bd08 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89dd0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55587ac89db0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55587ac89e80 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bd20 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89e60 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55587ac89e40 <col:14> 'int' 128
| |-EnumConstantDecl 0x55587ac89f10 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55587ac8bd38 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac89ef0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55587ac89ed0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55587ac89fa0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55587ac8bd50 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac89f80 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55587ac89f60 <col:12> 'int' 1024
|-CXXMethodDecl 0x55587ac8bf58 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55587ac8bd78 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55587ac8be10 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55587ac8c0e0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55587ac8c018 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55587ac8c188 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55587ac8c1c8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55587ac8c228 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55587ac8c2a0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55587ac8c6a0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55587ac8c318 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55587ac8c398 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55587ac8c418 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55587ac8c490 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55587ac8c508 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55587ac8c580 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55587ac8c7c8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55587ac8c7c8
| `-ParmVarDecl 0x55587ac8c8d8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55587ac8e9d8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55587ac8e9d8
  `-ParmVarDecl 0x55587ac8eae8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ace9d18 prev 0x55587ac2fff8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587ace9e10 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55587ace9ea0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55587ace9fa8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55587ace9ed8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55587aceb380 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55587aceb360 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55587aceaef8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55587aceb410 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55587aceb3d0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55587ace9ed8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55587aceaf60 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55587aceb490 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55587aceb450 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55587aceafc0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55587aceb4d0 <col:54> 'bool' false
| `-CompoundStmt 0x55587aceb5d8 <col:61, line:38:5>
|   `-BinaryOperator 0x55587aceb5b8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55587aceb550 <col:9> 'const Element *' lvalue ->_context 0x55587aceae98
|     | `-CXXThisExpr 0x55587aceb540 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55587aceb5a0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55587aceb580 <col:20> 'int' 0
|-CXXConstructorDecl 0x55587acea1b8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55587acea068 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55587acea0e0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55587aceb3b8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55587aceb398 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55587aceae98 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55587aceb630 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55587aceb5f0 <col:20> 'const Element *' lvalue ParmVar 0x55587acea068 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55587aceaef8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55587aceb6b0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55587aceb670 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55587acea0e0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55587aceaf60 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55587aceb730 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55587aceb6f0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55587aceafc0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55587aceb770 <col:73> 'bool' false
| `-CompoundStmt 0x55587aceb7e8 <col:80, line:46:5>
|-CXXMethodDecl 0x55587acea2e8 <line:49:5, line:51:5> line:49:20 used context 'const Element *() const'
| `-CompoundStmt 0x55587aceb860 <col:36, line:51:5>
|   `-ReturnStmt 0x55587aceb850 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55587aceb838 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55587aceb808 <col:16> 'const Element *const' lvalue ->_context 0x55587aceae98
|         `-CXXThisExpr 0x55587aceb7f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55587acea3d8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55587aceb8e0 <col:32, line:57:5>
|   `-ReturnStmt 0x55587aceb8d0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55587aceb8b8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55587aceb888 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55587aceaef8
|         `-CXXThisExpr 0x55587aceb878 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55587acea498 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55587acea620 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55587acea550 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55587acea770 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55587acea6e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55587acea8c0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55587acea830 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55587aceaac8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55587acea978 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55587acea9f0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55587aceada8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55587aceab88 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55587aceac08 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55587aceac80 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55587aceae60 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55587aceae98 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55587aceaef8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55587aceaf60 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55587aceafc0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55587aceb010 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55587aceb010
| `-ParmVarDecl 0x55587aceb128 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55587aceb1c8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55587aceb1c8
| `-ParmVarDecl 0x55587aceb2d8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55587ad874e0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55587ad0e4e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55587ad0e6b8 prev 0x55587ad0e4e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55587ad0e748 <col:46, col:52> col:46 public
|-TypedefDecl 0x55587ad0e770 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1cbd0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55587ad1cb80 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55587ad0ec20 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55587ad0eb20 'type'
|     `-TemplateSpecializationType 0x55587ad0eab0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55587ad0e990 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55587ad0e970 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55587ad0e950 <col:24> 'unsigned long' 4
|       `-RecordType 0x55587ad0ea90 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55587ad0e9b0 'char_array'
|-TypedefDecl 0x55587ad1cc88 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55587ad1cc50 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55587ad1cc30 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55587ad1cbd0 'type'
|     `-ElaboratedType 0x55587ad1cb80 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55587ad0ec20 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55587ad0eb20 'type'
|         `-TemplateSpecializationType 0x55587ad0eab0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55587ad0e990 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55587ad0e970 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55587ad0e950 <col:24> 'unsigned long' 4
|           `-RecordType 0x55587ad0ea90 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55587ad0e9b0 'char_array'
|-CXXMethodDecl 0x55587ad1ce08 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55587ad1cd18 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55587ad1cef8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55587ad1cfd8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55587ad1d2a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55587ad1d1b0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55587ad1d4e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55587ad1d360 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55587ad1d3d8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55587ad1d6b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55587ad1d5a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55587ad1d620 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55587ad1d818 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55587ad1d8e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55587ad1db38 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55587ad1d9a8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55587ad1da20 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55587ad1dd98 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55587ad1dc08 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55587ad1dc80 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55587ad1df58 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55587ad1de68 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55587ad1e118 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55587ad1e020 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55587ad1e1d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55587ad1e280 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55587ad1e4b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55587ad1e330 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55587ad1e3a8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55587ad1e758 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55587ad1e660 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55587ad1e820 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55587ad1e870 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55587ad1e8c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55587ad0cee8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55587ad0d0f8 prev 0x55587ad0cee8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55587ad0e450 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55587ad0e400 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55587ad0e3e0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55587ad0e290 'type'
|     `-SubstTemplateTypeParmType 0x55587ad0e0b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55587a9cebf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587a9ceb98 'T'
|       `-RecordType 0x55587ad0dc00 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55587ad0db18 'sized_array_memory'
|-FieldDecl 0x55587ad1e910 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55587ad1e960 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55587ad1e998 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|   |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55587aa06888 'T'
|   `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1ea28 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55587ad1e9f0 'int &'
|   `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|     |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55587aa06888 'T'
|     `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1eae8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55587ad1eab0 'const int &'
|   `-QualType 0x55587ad0d191 'const int' const
|     `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1eb78 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55587ad1eb40 'int *'
|   `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|     |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55587aa06888 'T'
|     `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1ec08 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55587ad1ebd0 'const int *'
|   `-QualType 0x55587ad0d191 'const int' const
|     `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1f7f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55587ad1f7a0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55587ad1f780 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55587ad1f710 'type'
|     `-SubstTemplateTypeParmType 0x55587ad1f4d0 'int' sugar
|       |-TemplateTypeParmType 0x55587a9d99f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587a9d99a0 'T'
|       `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1f858 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55587ad1eab0 'const int &'
|   `-QualType 0x55587ad0d191 'const int' const
|     `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1f8b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1f918 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55587ad1eb40 'int *'
|   `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|     |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55587aa06888 'T'
|     `-BuiltinType 0x55587a708580 'int'
|-TypedefDecl 0x55587ad1f980 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55587ad1ebd0 'const int *'
|   `-QualType 0x55587ad0d191 'const int' const
|     `-SubstTemplateTypeParmType 0x55587ad0d190 'int' sugar
|       |-TemplateTypeParmType 0x55587aa068e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55587aa06888 'T'
|       `-BuiltinType 0x55587a708580 'int'
|-EnumDecl 0x55587ad1f9d8 <line:134:5> col:5
| `-EnumConstantDecl 0x55587ad1fad0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55587ad1fab0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55587aa07f68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55587aa07f40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55587aa07f20 <col:40> 'int' 1
|-CXXConstructorDecl 0x55587ad1fb58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55587ad1fda8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55587ad1fc10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55587ad1fcb0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55587ad20068 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55587ad1ff50 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55587ad20328 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55587ad20210 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55587ad20670 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55587ad20550 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55587ad20980 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55587ad20860 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55587ad20c70 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55587ad20ab8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55587ad20b30 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55587ad20d98 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55587ad20e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587ad20ed0 <col:30> Inherited
|-CXXMethodDecl 0x55587ad20f18 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55587ad20fc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587ad21020 <col:30> Inherited
|-CXXMethodDecl 0x55587ad210e8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55587ad21198 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587ad211f0 <col:30> Inherited
|-CXXMethodDecl 0x55587ad21238 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55587ad212e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587ad21340 <col:30> Inherited
|-CXXMethodDecl 0x55587ad21388 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55587ad21438 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587ad21490 <col:30> Inherited
|-CXXMethodDecl 0x55587ad214d8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55587ad21588 <col:20> Inherited
| `-OptimizeNoneAttr 0x55587ad215e0 <col:30> Inherited
|-CXXMethodDecl 0x55587ad21608 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55587ad216b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55587ad21768 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55587ad21928 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55587ad21818 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55587ad21890 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55587ad21a78 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55587ad219e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587ad21c28 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55587ad21b30 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55587ad21ce0 <col:20>
| `-OptimizeNoneAttr 0x55587ad21d38 <col:30>
|-CXXMethodDecl 0x55587ad21e58 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55587ad21d60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55587ad21f10 <col:20>
| `-OptimizeNoneAttr 0x55587ad21f68 <col:30>
|-CXXMethodDecl 0x55587ad22020 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55587ad21f90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587ad22168 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55587ad220d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587ad22298 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55587ad223c8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55587ad22498 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55587ad22568 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55587ad226a8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55587ad22618 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587ad227f0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55587ad22760 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55587ad22938 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55587ad228a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55587ad229f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55587ad22af0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55587ad22a60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55587ad22ba8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55587ad22c68 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55587ad22d68 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55587ad22ee8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55587ad22e28 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55587ad236a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55587ad22fa0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55587ad23608 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55587ad23508 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55587ad23788 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55587ad238d8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55587ad23848 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55587ad23990 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55587ad23bd8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55587ad23a50 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55587ad23ac8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55587ad23d98 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55587ad23ca8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55587ad24fb0 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55587ad23e60 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55587ad23ed8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55587ad25070 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55587ad252c8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55587ad251d0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55587ad25398 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ad0b058 prev 0x55587acf0fc8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55587ad0b150 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55587ad0b240 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55587ad35d90 <col:16, line:828:9>
|-CXXDestructorDecl 0x55587ad0b330 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55587ad35da0 <col:25, line:830:9>
|-CXXMethodDecl 0x55587ad0b430 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55587ad0b4e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55587ad0b588 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55587ad0b588
| `-ParmVarDecl 0x55587ad0b698 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55587ad0be58 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55587ad0be58
  `-ParmVarDecl 0x55587ad0bf68 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587acf0dd8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55587acf0f38 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55587acf0fc8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55587acf1080 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55587acf1188 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55587acf10b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55587ad26958 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55587ad26938 <col:31> 'int' 0
|-CXXConstructorDecl 0x55587acf14a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55587acf1320 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55587acf1398 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55587ad26990 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55587ad26970 <col:59> 'int' 0
|-CXXConstructorDecl 0x55587acf1680 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55587acf1570 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55587acf15e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55587ad269c8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55587ad269a8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55587acf1a38 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55587acf1820 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55587acf1898 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55587acf1910 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55587ad26a00 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55587ad269e0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55587acf1bf8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55587acf1b38 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55587acf1cf0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55587acf1ed8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55587acf1de0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55587acf1fc8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55587ad26db0 <col:24, line:291:5>
|   `-ReturnStmt 0x55587ad26da0 <line:290:9, col:79>
|     `-BinaryOperator 0x55587ad26d80 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55587ad26c58 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55587ad26bb0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55587ad26b90 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55587ad26a88 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55587ad26a70 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55587ad26a58 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55587ad26a28 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55587ad0ce80
|       | |   |       `-CXXThisExpr 0x55587ad26a18 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55587ad26b78 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55587ad26b60 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55587ad26b28 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55587ad26af8 <col:28, col:35> '<bound member function type>' ->size 0x55587acdc3a8
|       | |           `-ImplicitCastExpr 0x55587ad26b48 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55587ad26ae0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55587ad26ab0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55587ad0ce80
|       | |                 `-CXXThisExpr 0x55587ad26aa0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55587ad26c40 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55587ad26c28 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55587ad26c10 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55587ad26be0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55587ad254e0
|       |         `-CXXThisExpr 0x55587ad26bd0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55587ad26d60 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55587ad26d48 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55587ad26d30 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55587ad26cf0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55587ad26cd8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55587ad26c88 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55587ad25590
|         |     |   `-CXXThisExpr 0x55587ad26c78 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55587ad26cb8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55587ad26d10 <col:79> 'int' 0
|-CXXMethodDecl 0x55587acf2088 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55587ad26f88 <col:32, line:296:5>
|   `-ReturnStmt 0x55587ad26f78 <line:295:9, col:49>
|     `-BinaryOperator 0x55587ad26f58 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55587ad26e38 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55587ad26e20 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55587ad26e08 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55587ad26dd8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55587ad254e0
|       |       `-CXXThisExpr 0x55587ad26dc8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55587ad26f38 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55587ad26f20 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55587ad26f08 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55587ad26ec8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55587ad26eb0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55587ad26e60 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55587ad25590
|         |     |   `-CXXThisExpr 0x55587ad26e50 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55587ad26e90 <col:43> 'int' 0
|         `-IntegerLiteral 0x55587ad26ee8 <col:49> 'int' 0
|-CXXMethodDecl 0x55587acf2178 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55587ad27198 <col:19, line:306:5>
|   |-IfStmt 0x55587ad270b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55587ad26ff8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55587ad26fe0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55587ad26fb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55587ad0ce80
|   | |     `-CXXThisExpr 0x55587ad26fa0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55587ad27098 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55587ad27068 <col:13, col:20> '<bound member function type>' ->clear 0x55587acdedd8
|   |     `-ImplicitCastExpr 0x55587ad27050 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55587ad27020 <col:13> 'Vector<String> *' lvalue ->_conf 0x55587ad0ce80
|   |         `-CXXThisExpr 0x55587ad27010 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55587ad27140 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55587ad27110 <col:9, col:16> '<bound member function type>' .clear 0x55587ad25070
|   |   `-MemberExpr 0x55587ad270e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55587ad25480
|   |     `-CXXThisExpr 0x55587ad270d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55587ad27188 <line:305:9, col:17>
|     `-UnaryOperator 0x55587ad27170 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587ad27160 <col:17> 'Args *' this
|-CXXMethodDecl 0x55587acf23f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55587acf2300 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55587acf2578 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55587acf24b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55587acf28f8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55587acf2620 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55587acf2858 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55587acf26c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55587acf2740 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55587ad274b8 <col:67, line:327:5>
|     |-WhileStmt 0x55587ad27468 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55587ad27280 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55587ad27200 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55587ac284c8 0x55587aa71aa8 0x55587aa71780 0x55587aa61f50 0x55587aa61c00 0x55587aa614f0 0x55587aa33e60 0x55587a9c1330
|     | | |-DeclRefExpr 0x55587ad271c0 <col:16> 'Iter' lvalue ParmVar 0x55587acf26c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55587ad271e0 <col:25> 'Iter' lvalue ParmVar 0x55587acf2740 'end' 'Iter'
|     | `-CompoundStmt 0x55587ad27448 <col:30, line:325:9>
|     |   |-CallExpr 0x55587ad273e8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55587ad272c8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55587ad273b8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55587ad27348 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|     |   |   `-DeclRefExpr 0x55587ad27328 <col:24> 'Iter' lvalue ParmVar 0x55587acf26c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55587ad27430 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55587ad27410 <col:15> 'Iter' lvalue ParmVar 0x55587acf26c8 'begin' 'Iter'
|     `-ReturnStmt 0x55587ad274a8 <line:326:9, col:17>
|       `-UnaryOperator 0x55587ad27490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad27480 <col:17> 'Args *' this
|-CXXMethodDecl 0x55587acf2a00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55587acf2970 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55587acf2b48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55587acf2ab8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55587acf2c10 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55587ad27598 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55587ad27538 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55587ad274e8 <col:9> '<bound member function type>' ->reset_from 0x55587ad25908
|   | | `-CXXThisExpr 0x55587ad274d8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55587ad27518 <col:20> 'int' 0
|   `-ReturnStmt 0x55587ad27588 <line:352:9, col:17>
|     `-UnaryOperator 0x55587ad27570 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587ad27560 <col:17> 'Args *' this
|-VarDecl 0x55587acf2cc8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55587acf2d30 <col:38> 'int' 1
|-VarDecl 0x55587acf2dc0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55587acf2e28 <col:39> 'int' 2
|-VarDecl 0x55587acf2eb8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55587acf2f20 <col:39> 'int' 4
|-VarDecl 0x55587acf2fb0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55587acf3018 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55587acf3398 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55587acf3090 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587acf32f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55587acf3140 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf31e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55587ad276f0 <col:43, line:371:5>
|     `-ReturnStmt 0x55587ad276e0 <line:370:9, col:34>
|       `-CallExpr 0x55587ad276a8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad275c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad27648 <col:21> 'const char *' lvalue ParmVar 0x55587acf3140 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad27668 <col:30> 'int' 0
|         `-DeclRefExpr 0x55587ad27688 <col:33> 'T' lvalue ParmVar 0x55587acf31e8 'x' 'T &'
|-FunctionTemplateDecl 0x55587acf36c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55587acf3400 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587acf3628 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55587acf34b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf3558 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55587ad27840 <col:45, line:375:5>
|     `-ReturnStmt 0x55587ad27830 <line:374:9, col:42>
|       `-CallExpr 0x55587ad277f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad27718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad27798 <col:21> 'const char *' lvalue ParmVar 0x55587acf34b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad277b8 <col:30> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55587ad277d8 <col:41> 'T' lvalue ParmVar 0x55587acf3558 'x' 'T &'
|-FunctionTemplateDecl 0x55587acf39f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55587acf3730 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587acf3958 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55587acf37e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf3888 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55587ad27990 <col:45, line:379:5>
|     `-ReturnStmt 0x55587ad27980 <line:378:9, col:43>
|       `-CallExpr 0x55587ad27948 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad27868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad278e8 <col:21> 'const char *' lvalue ParmVar 0x55587acf37e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad27908 <col:30> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int'
|         `-DeclRefExpr 0x55587ad27928 <col:42> 'T' lvalue ParmVar 0x55587acf3888 'x' 'T &'
|-FunctionTemplateDecl 0x55587acf3d28 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55587acf3a60 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587acf3c88 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55587acf3b10 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf3bb8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55587ad27b90 <col:46, line:383:5>
|     `-ReturnStmt 0x55587ad27b80 <line:382:9, col:55>
|       `-CallExpr 0x55587ad27b48 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad279b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad27a38 <col:21> 'const char *' lvalue ParmVar 0x55587acf3b10 'keyword' 'const char *'
|         |-BinaryOperator 0x55587ad27b08 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55587ad27ab8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55587ad27a98 <col:30> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55587ad27af0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55587ad27ad0 <col:42> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55587ad27b28 <col:54> 'T' lvalue ParmVar 0x55587acf3bb8 'x' 'T &'
|-FunctionTemplateDecl 0x55587acf4128 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55587acf3d90 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587acf4088 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55587acf3e40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf3ec0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55587acf3f68 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55587ad27cd0 <col:54, line:388:5>
|     |-CallExpr 0x55587ad27c58 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad27ba8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55587ad27be8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55587ad27bf8 <col:30> 'const char *' lvalue ParmVar 0x55587acf3e40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55587ad27c18 <col:39> 'int' lvalue ParmVar 0x55587acf3ec0 'flags' 'int'
|     | `-DeclRefExpr 0x55587ad27c38 <col:46> 'T' lvalue ParmVar 0x55587acf3f68 'x' 'T &'
|     `-ReturnStmt 0x55587ad27cc0 <line:387:9, col:17>
|       `-UnaryOperator 0x55587ad27ca8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad27c98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587acf45d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55587acf4198 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55587acf4218 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55587acf4538 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55587acf42d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf4378 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55587acf4418 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55587ad27e40 <col:74, line:403:5>
|     `-ReturnStmt 0x55587ad27e30 <line:402:9, col:56>
|       `-CallExpr 0x55587ad27df0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad27d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad27d70 <col:28> 'const char *' lvalue ParmVar 0x55587acf42d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad27d90 <col:37> 'int' 0
|         |-DeclRefExpr 0x55587ad27db0 <col:40> 'T' lvalue ParmVar 0x55587acf4378 'x' 'T &'
|         `-DeclRefExpr 0x55587ad27dd0 <col:43> 'const V' lvalue ParmVar 0x55587acf4418 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55587acf4a48 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55587acf4648 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55587acf46c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55587acf49a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55587acf4788 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf4828 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55587acf48c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55587ad27fa8 <col:76, line:407:5>
|     `-ReturnStmt 0x55587ad27f98 <line:406:9, col:65>
|       `-CallExpr 0x55587ad27f58 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad27e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad27ed8 <col:28> 'const char *' lvalue ParmVar 0x55587acf4788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad27ef8 <col:37> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int'
|         |-DeclRefExpr 0x55587ad27f18 <col:49> 'T' lvalue ParmVar 0x55587acf4828 'x' 'T &'
|         `-DeclRefExpr 0x55587ad27f38 <col:52> 'const V' lvalue ParmVar 0x55587acf48c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55587acf4f98 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55587acf4ab8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55587acf4b38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55587acf4ef8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55587acf4bf8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf4c78 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55587acf4d18 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55587acf4db8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55587ad28110 <col:85, line:412:5>
|     |-CallExpr 0x55587ad28090 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad27fc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55587ad28000 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55587ad28010 <col:37> 'const char *' lvalue ParmVar 0x55587acf4bf8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55587ad28030 <col:46> 'int' lvalue ParmVar 0x55587acf4c78 'flags' 'int'
|     | |-DeclRefExpr 0x55587ad28050 <col:53> 'T' lvalue ParmVar 0x55587acf4d18 'x' 'T &'
|     | `-DeclRefExpr 0x55587ad28070 <col:56> 'const V' lvalue ParmVar 0x55587acf4db8 'default_value' 'const V &'
|     `-ReturnStmt 0x55587ad28100 <line:411:9, col:17>
|       `-UnaryOperator 0x55587ad280e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad280d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587acf5428 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55587acf5010 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acf5088 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acf5388 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acf5148 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf51c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55587acf5268 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55587ad28290 <col:53, line:425:5>
|     `-ReturnStmt 0x55587ad28280 <line:424:9, col:42>
|       `-CallExpr 0x55587ad28240 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad28140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad281c0 <col:21> 'const char *' lvalue ParmVar 0x55587acf5148 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad281e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55587ad28200 <col:33> 'P' lvalue ParmVar 0x55587acf51c0 'parser' 'P'
|         `-DeclRefExpr 0x55587ad28220 <col:41> 'T' lvalue ParmVar 0x55587acf5268 'x' 'T &'
|-FunctionTemplateDecl 0x55587acf5878 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55587acf5498 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acf5518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acf57d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acf55d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf5650 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55587acf56f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55587ad28408 <col:55, line:429:5>
|     `-ReturnStmt 0x55587ad283f8 <line:428:9, col:50>
|       `-CallExpr 0x55587ad283b8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad282b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad28338 <col:21> 'const char *' lvalue ParmVar 0x55587acf55d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad28358 <col:30> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55587ad28378 <col:41> 'P' lvalue ParmVar 0x55587acf5650 'parser' 'P'
|         `-DeclRefExpr 0x55587ad28398 <col:49> 'T' lvalue ParmVar 0x55587acf56f8 'x' 'T &'
|-FunctionTemplateDecl 0x55587acf5cc8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55587acf58e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acf5968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acf5c28 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acf5a28 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf5aa0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55587acf5b48 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55587ad28580 <col:55, line:433:5>
|     `-ReturnStmt 0x55587ad28570 <line:432:9, col:51>
|       `-CallExpr 0x55587ad28530 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad28430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad284b0 <col:21> 'const char *' lvalue ParmVar 0x55587acf5a28 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad284d0 <col:30> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int'
|         |-DeclRefExpr 0x55587ad284f0 <col:42> 'P' lvalue ParmVar 0x55587acf5aa0 'parser' 'P'
|         `-DeclRefExpr 0x55587ad28510 <col:50> 'T' lvalue ParmVar 0x55587acf5b48 'x' 'T &'
|-FunctionTemplateDecl 0x55587acf6118 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55587acf5d38 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acf5db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55587acf6078 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55587acf5e78 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55587acf5ef0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55587acf5f98 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55587ad287a8 <col:56, line:437:5>
| |   `-ReturnStmt 0x55587ad28798 <line:436:9, col:63>
| |     `-CallExpr 0x55587ad28758 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55587ad285a8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55587ad28628 <col:21> 'const char *' lvalue ParmVar 0x55587acf5e78 'keyword' 'const char *'
| |       |-BinaryOperator 0x55587ad286f8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55587ad286a8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55587ad28688 <col:30> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55587ad286e0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55587ad286c0 <col:42> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55587ad28718 <col:54> 'P' lvalue ParmVar 0x55587acf5ef0 'parser' 'P'
| |       `-DeclRefExpr 0x55587ad28738 <col:62> 'T' lvalue ParmVar 0x55587acf5f98 'x' 'T &'
| |-CXXMethodDecl 0x55587ad87fe8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, NamedIntArg, int &)'
| | |-TemplateArgument type 'NamedIntArg'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55587ad87d50 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x55587ad87df8 <col:40, col:42> col:42 parser 'NamedIntArg':'NamedIntArg'
| | `-ParmVarDecl 0x55587ad87ec8 <col:50, col:53> col:53 x 'int &'
| `-CXXMethodDecl 0x55587ad88c18 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55587ad88980 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55587ad88a28 <col:40, col:42> col:42 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x55587ad88af8 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x55587acf6648 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55587acf6188 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acf6208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acf65a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55587acf62c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf6348 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55587acf63c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55587acf6468 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55587ad28910 <col:64, line:442:5>
|     |-CallExpr 0x55587ad28890 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad287c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55587ad28800 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55587ad28810 <col:30> 'const char *' lvalue ParmVar 0x55587acf62c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55587ad28830 <col:39> 'int' lvalue ParmVar 0x55587acf6348 'flags' 'int'
|     | |-DeclRefExpr 0x55587ad28850 <col:46> 'P' lvalue ParmVar 0x55587acf63c0 'parser' 'P'
|     | `-DeclRefExpr 0x55587ad28870 <col:54> 'T' lvalue ParmVar 0x55587acf6468 'x' 'T &'
|     `-ReturnStmt 0x55587ad28900 <line:441:9, col:17>
|       `-UnaryOperator 0x55587ad288e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad288d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587acfa0e8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55587acf66c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acf6738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55587acf67b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55587acfa048 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55587acf6880 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acf68f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55587acf6998 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55587acf9f08 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55587ad28aa8 <col:84, line:458:5>
|     `-ReturnStmt 0x55587ad28a98 <line:457:9, col:64>
|       `-CallExpr 0x55587ad28a50 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad28940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad289b0 <col:28> 'const char *' lvalue ParmVar 0x55587acf6880 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad289d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55587ad289f0 <col:40> 'P' lvalue ParmVar 0x55587acf68f8 'parser' 'P'
|         |-DeclRefExpr 0x55587ad28a10 <col:48> 'T' lvalue ParmVar 0x55587acf6998 'x' 'T &'
|         `-DeclRefExpr 0x55587ad28a30 <col:51> 'const V' lvalue ParmVar 0x55587acf9f08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55587acfa668 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55587acfa160 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfa1d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55587acfa258 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55587acfa5c8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55587acfa320 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfa398 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfa438 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55587acfa4d8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55587ad28c38 <col:86, line:462:5>
|     `-ReturnStmt 0x55587ad28c28 <line:461:9, col:73>
|       `-CallExpr 0x55587ad28be0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad28ad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad28b40 <col:28> 'const char *' lvalue ParmVar 0x55587acfa320 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad28b60 <col:37> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int'
|         |-DeclRefExpr 0x55587ad28b80 <col:49> 'P' lvalue ParmVar 0x55587acfa398 'parser' 'P'
|         |-DeclRefExpr 0x55587ad28ba0 <col:57> 'T' lvalue ParmVar 0x55587acfa438 'x' 'T &'
|         `-DeclRefExpr 0x55587ad28bc0 <col:60> 'const V' lvalue ParmVar 0x55587acfa4d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55587acfacc8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55587acfa6e0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfa758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55587acfa7d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55587acfac28 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55587acfa8a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfa920 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55587acfa998 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfaa38 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55587acfaad8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55587ad28dc8 <col:95, line:467:5>
|     |-CallExpr 0x55587ad28d40 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad28c50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55587ad28c90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55587ad28ca0 <col:37> 'const char *' lvalue ParmVar 0x55587acfa8a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55587ad28cc0 <col:46> 'int' lvalue ParmVar 0x55587acfa920 'flags' 'int'
|     | |-DeclRefExpr 0x55587ad28ce0 <col:53> 'P' lvalue ParmVar 0x55587acfa998 'parser' 'P'
|     | |-DeclRefExpr 0x55587ad28d00 <col:61> 'T' lvalue ParmVar 0x55587acfaa38 'x' 'T &'
|     | `-DeclRefExpr 0x55587ad28d20 <col:64> 'const V' lvalue ParmVar 0x55587acfaad8 'default_value' 'const V &'
|     `-ReturnStmt 0x55587ad28db8 <line:466:9, col:17>
|       `-UnaryOperator 0x55587ad28da0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad28d90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587acfb2a8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55587acfad48 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfadc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55587acfae48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55587acfb208 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55587acfaf10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfaf88 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfb028 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55587acfb0c8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55587ad28f70 <col:63, line:481:5>
|     `-ReturnStmt 0x55587ad28f60 <line:480:9, col:47>
|       `-CallExpr 0x55587ad28f18 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad28df8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad28e78 <col:21> 'const char *' lvalue ParmVar 0x55587acfaf10 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad28e98 <col:30> 'int' 0
|         |-DeclRefExpr 0x55587ad28eb8 <col:33> 'P' lvalue ParmVar 0x55587acfaf88 'parser' 'P'
|         |-DeclRefExpr 0x55587ad28ed8 <col:41> 'T1' lvalue ParmVar 0x55587acfb028 'x1' 'T1 &'
|         `-DeclRefExpr 0x55587ad28ef8 <col:45> 'T2' lvalue ParmVar 0x55587acfb0c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55587acfb828 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55587acfb320 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfb398 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55587acfb418 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55587acfb788 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55587acfb4e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfb558 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfb5f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55587acfb698 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55587ad29110 <col:65, line:485:5>
|     `-ReturnStmt 0x55587ad29100 <line:484:9, col:55>
|       `-CallExpr 0x55587ad290b8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad28f98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad29018 <col:21> 'const char *' lvalue ParmVar 0x55587acfb4e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad29038 <col:30> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55587ad29058 <col:41> 'P' lvalue ParmVar 0x55587acfb558 'parser' 'P'
|         |-DeclRefExpr 0x55587ad29078 <col:49> 'T1' lvalue ParmVar 0x55587acfb5f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55587ad29098 <col:53> 'T2' lvalue ParmVar 0x55587acfb698 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55587acfbda8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55587acfb8a0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfb918 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55587acfb998 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55587acfbd08 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55587acfba60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfbad8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfbb78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55587acfbc18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55587ad292b0 <col:65, line:489:5>
|     `-ReturnStmt 0x55587ad292a0 <line:488:9, col:56>
|       `-CallExpr 0x55587ad29258 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad29138 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad291b8 <col:21> 'const char *' lvalue ParmVar 0x55587acfba60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad291d8 <col:30> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int'
|         |-DeclRefExpr 0x55587ad291f8 <col:42> 'P' lvalue ParmVar 0x55587acfbad8 'parser' 'P'
|         |-DeclRefExpr 0x55587ad29218 <col:50> 'T1' lvalue ParmVar 0x55587acfbb78 'x1' 'T1 &'
|         `-DeclRefExpr 0x55587ad29238 <col:54> 'T2' lvalue ParmVar 0x55587acfbc18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55587acfc328 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55587acfbe20 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfbe98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55587acfbf18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55587acfc288 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55587acfbfe0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfc058 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfc0f8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55587acfc198 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55587ad29500 <col:66, line:493:5>
|     `-ReturnStmt 0x55587ad294f0 <line:492:9, col:68>
|       `-CallExpr 0x55587ad294a8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad292d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad29358 <col:21> 'const char *' lvalue ParmVar 0x55587acfbfe0 'keyword' 'const char *'
|         |-BinaryOperator 0x55587ad29428 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55587ad293d8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55587ad293b8 <col:30> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55587ad29410 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55587ad293f0 <col:42> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55587ad29448 <col:54> 'P' lvalue ParmVar 0x55587acfc058 'parser' 'P'
|         |-DeclRefExpr 0x55587ad29468 <col:62> 'T1' lvalue ParmVar 0x55587acfc0f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55587ad29488 <col:66> 'T2' lvalue ParmVar 0x55587acfc198 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55587acfc988 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55587acfc3a0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfc418 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55587acfc498 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55587acfc8e8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55587acfc560 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfc5e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55587acfc658 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfc6f8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55587acfc798 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55587ad29690 <col:74, line:498:5>
|     |-CallExpr 0x55587ad29608 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad29518 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55587ad29558 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55587ad29568 <col:30> 'const char *' lvalue ParmVar 0x55587acfc560 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55587ad29588 <col:39> 'int' lvalue ParmVar 0x55587acfc5e0 'flags' 'int'
|     | |-DeclRefExpr 0x55587ad295a8 <col:46> 'P' lvalue ParmVar 0x55587acfc658 'parser' 'P'
|     | |-DeclRefExpr 0x55587ad295c8 <col:54> 'T1' lvalue ParmVar 0x55587acfc6f8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55587ad295e8 <col:58> 'T2' lvalue ParmVar 0x55587acfc798 'x2' 'T2 &'
|     `-ReturnStmt 0x55587ad29680 <line:497:9, col:17>
|       `-UnaryOperator 0x55587ad29668 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad29658 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587acfcce8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55587acfca08 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587acfcc48 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55587acfcac0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfcb38 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55587ad297d8 <col:52, line:509:5>
|     `-ReturnStmt 0x55587ad297c8 <line:508:9, col:44>
|       `-CallExpr 0x55587ad29790 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad296c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad29730 <col:26> 'const char *' lvalue ParmVar 0x55587acfcac0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad29750 <col:35> 'int' 0
|         `-DeclRefExpr 0x55587ad29770 <col:38> 'P' lvalue ParmVar 0x55587acfcb38 'parser' 'P'
|-FunctionTemplateDecl 0x55587acfcfe8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55587acfcd50 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587acfcf48 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55587acfce00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfce78 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55587ad29918 <col:54, line:513:5>
|     `-ReturnStmt 0x55587ad29908 <line:512:9, col:52>
|       `-CallExpr 0x55587ad298d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad29800 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad29870 <col:26> 'const char *' lvalue ParmVar 0x55587acfce00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad29890 <col:35> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55587ad298b0 <col:46> 'P' lvalue ParmVar 0x55587acfce78 'parser' 'P'
|-FunctionTemplateDecl 0x55587acfd2e8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55587acfd050 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587acfd248 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55587acfd100 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfd178 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55587ad29a58 <col:54, line:517:5>
|     `-ReturnStmt 0x55587ad29a48 <line:516:9, col:53>
|       `-CallExpr 0x55587ad29a10 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad29940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad299b0 <col:26> 'const char *' lvalue ParmVar 0x55587acfd100 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad299d0 <col:35> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int'
|         `-DeclRefExpr 0x55587ad299f0 <col:47> 'P' lvalue ParmVar 0x55587acfd178 'parser' 'P'
|-FunctionTemplateDecl 0x55587acfd5e8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55587acfd350 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587acfd548 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55587acfd400 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfd478 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55587ad29c48 <col:55, line:521:5>
|     `-ReturnStmt 0x55587ad29c38 <line:520:9, col:65>
|       `-CallExpr 0x55587ad29c00 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad29a80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad29af0 <col:26> 'const char *' lvalue ParmVar 0x55587acfd400 'keyword' 'const char *'
|         |-BinaryOperator 0x55587ad29bc0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55587ad29b70 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55587ad29b50 <col:35> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55587ad29ba8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55587ad29b88 <col:47> 'const int' lvalue Var 0x55587acf2dc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55587ad29be0 <col:59> 'P' lvalue ParmVar 0x55587acfd478 'parser' 'P'
|-FunctionTemplateDecl 0x55587acfd9b8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55587acfd650 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587acfd918 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55587acfd700 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfd780 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55587acfd7f8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55587ad29d88 <col:63, line:526:5>
|     |-CallExpr 0x55587ad29d10 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad29c60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55587ad29ca0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55587ad29cb0 <col:35> 'const char *' lvalue ParmVar 0x55587acfd700 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55587ad29cd0 <col:44> 'int' lvalue ParmVar 0x55587acfd780 'flags' 'int'
|     | `-DeclRefExpr 0x55587ad29cf0 <col:51> 'P' lvalue ParmVar 0x55587acfd7f8 'parser' 'P'
|     `-ReturnStmt 0x55587ad29d78 <line:525:9, col:17>
|       `-UnaryOperator 0x55587ad29d60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad29d50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587acfde08 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55587acfda28 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfdaa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acfdd68 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acfdb68 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfdbe0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfdc88 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55587ad29ee0 <col:58, line:541:5>
|     `-ReturnStmt 0x55587ad29ed0 <line:540:9, col:39>
|       `-CallExpr 0x55587ad29e98 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad29db8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad29e38 <col:21> 'const char *' lvalue ParmVar 0x55587acfdb68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad29e58 <col:30> 'P' lvalue ParmVar 0x55587acfdbe0 'parser' 'P'
|         `-DeclRefExpr 0x55587ad29e78 <col:38> 'T' lvalue ParmVar 0x55587acfdc88 'x' 'T &'
|-FunctionTemplateDecl 0x55587acfe258 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55587acfde78 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfdef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acfe1b8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acfdfb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfe030 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfe0d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2a018 <col:60, line:545:5>
|     `-ReturnStmt 0x55587ad2a008 <line:544:9, col:41>
|       `-CallExpr 0x55587ad29fd0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad29f08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad29f70 <col:23> 'const char *' lvalue ParmVar 0x55587acfdfb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad29f90 <col:32> 'P' lvalue ParmVar 0x55587acfe030 'parser' 'P'
|         `-DeclRefExpr 0x55587ad29fb0 <col:40> 'T' lvalue ParmVar 0x55587acfe0d8 'x' 'T &'
|-FunctionTemplateDecl 0x55587acfe6a8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55587acfe2c8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfe348 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acfe608 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acfe408 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfe480 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfe528 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2a150 <col:60, line:549:5>
|     `-ReturnStmt 0x55587ad2a140 <line:548:9, col:41>
|       `-CallExpr 0x55587ad2a108 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2a040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2a0a8 <col:23> 'const char *' lvalue ParmVar 0x55587acfe408 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad2a0c8 <col:32> 'P' lvalue ParmVar 0x55587acfe480 'parser' 'P'
|         `-DeclRefExpr 0x55587ad2a0e8 <col:40> 'T' lvalue ParmVar 0x55587acfe528 'x' 'T &'
|-FunctionTemplateDecl 0x55587acfeaf8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55587acfe718 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfe798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acfea58 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acfe858 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfe8d0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfe978 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2a288 <col:61, line:553:5>
|     `-ReturnStmt 0x55587ad2a278 <line:552:9, col:42>
|       `-CallExpr 0x55587ad2a240 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2a178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2a1e0 <col:24> 'const char *' lvalue ParmVar 0x55587acfe858 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad2a200 <col:33> 'P' lvalue ParmVar 0x55587acfe8d0 'parser' 'P'
|         `-DeclRefExpr 0x55587ad2a220 <col:41> 'T' lvalue ParmVar 0x55587acfe978 'x' 'T &'
|-FunctionTemplateDecl 0x55587acfefd8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55587acfeb68 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acfebe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acfef38 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55587acfeca8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acfed28 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55587acfeda0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55587acfee48 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2a400 <col:69, line:557:5>
|     `-ReturnStmt 0x55587ad2a3f0 <line:556:9, col:46>
|       `-CallExpr 0x55587ad2a3b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2a2b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2a330 <col:21> 'const char *' lvalue ParmVar 0x55587acfeca8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad2a350 <col:30> 'int' lvalue ParmVar 0x55587acfed28 'flags' 'int'
|         |-DeclRefExpr 0x55587ad2a370 <col:37> 'P' lvalue ParmVar 0x55587acfeda0 'parser' 'P'
|         `-DeclRefExpr 0x55587ad2a390 <col:45> 'T' lvalue ParmVar 0x55587acfee48 'x' 'T &'
|-FunctionTemplateDecl 0x55587acff2e8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55587acff050 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587acff248 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55587acff100 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acff178 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55587ad2a540 <col:56, line:571:5>
|     `-ReturnStmt 0x55587ad2a530 <line:570:9, col:48>
|       `-CallExpr 0x55587ad2a4f8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2a428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2a498 <col:30> 'const char *' lvalue ParmVar 0x55587acff100 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad2a4b8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55587ad2a4d8 <col:42> 'P' lvalue ParmVar 0x55587acff178 'parser' 'P'
|-FunctionTemplateDecl 0x55587acff678 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55587acff350 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587acff5d8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55587acff400 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acff480 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55587acff4f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55587ad2a710 <col:67, line:576:5>
|     |-CallExpr 0x55587ad2a698 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad2a558 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55587ad2a598 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55587ad2a5a8 <col:39> 'const char *' lvalue ParmVar 0x55587acff400 'keyword' 'const char *'
|     | |-BinaryOperator 0x55587ad2a658 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55587ad2a608 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55587ad2a5c8 <col:48> 'int' lvalue ParmVar 0x55587acff480 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55587ad2a640 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55587ad2a620 <col:56> 'const int' lvalue Var 0x55587acf2fb0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55587ad2a678 <col:68> 'P' lvalue ParmVar 0x55587acff4f8 'parser' 'P'
|     `-ReturnStmt 0x55587ad2a700 <line:575:9, col:17>
|       `-UnaryOperator 0x55587ad2a6e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad2a6d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587acffac8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55587acff6e8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acff768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acffa28 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55587acff828 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acff8a0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55587acff948 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2a880 <col:62, line:592:5>
|     `-ReturnStmt 0x55587ad2a870 <line:591:9, col:51>
|       `-CallExpr 0x55587ad2a830 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2a740 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2a7b0 <col:30> 'const char *' lvalue ParmVar 0x55587acff828 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad2a7d0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55587ad2a7f0 <col:42> 'P' lvalue ParmVar 0x55587acff8a0 'parser' 'P'
|         `-DeclRefExpr 0x55587ad2a810 <col:50> 'T' lvalue ParmVar 0x55587acff948 'x' 'T &'
|-FunctionTemplateDecl 0x55587acfffa8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55587acffb38 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587acffbb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587acfff08 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55587acffc78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587acffcf8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55587acffd70 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55587acffe18 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2aa78 <col:73, line:597:5>
|     |-CallExpr 0x55587ad2a9f8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad2a898 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55587ad2a8d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55587ad2a8e8 <col:39> 'const char *' lvalue ParmVar 0x55587acffc78 'keyword' 'const char *'
|     | |-BinaryOperator 0x55587ad2a998 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55587ad2a948 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55587ad2a908 <col:48> 'int' lvalue ParmVar 0x55587acffcf8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55587ad2a980 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55587ad2a960 <col:56> 'const int' lvalue Var 0x55587acf2fb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55587ad2a9b8 <col:68> 'P' lvalue ParmVar 0x55587acffd70 'parser' 'P'
|     | `-DeclRefExpr 0x55587ad2a9d8 <col:76> 'T' lvalue ParmVar 0x55587acffe18 'x' 'T &'
|     `-ReturnStmt 0x55587ad2aa68 <line:596:9, col:17>
|       `-UnaryOperator 0x55587ad2aa50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad2aa40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587ad00558 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55587ad00020 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587ad00098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587ad004b8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55587ad00158 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad001d0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55587ad00390 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55587ad2abe8 <col:65, line:614:5>
|     `-ReturnStmt 0x55587ad2abd8 <line:613:9, col:46>
|       `-CallExpr 0x55587ad2ab98 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2aaa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2ab18 <col:25> 'const char *' lvalue ParmVar 0x55587ad00158 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad2ab38 <col:34> 'int' 0
|         |-DeclRefExpr 0x55587ad2ab58 <col:37> 'P' lvalue ParmVar 0x55587ad001d0 'parser' 'P'
|         `-DeclRefExpr 0x55587ad2ab78 <col:45> 'Vector<T>' lvalue ParmVar 0x55587ad00390 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55587ad00988 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55587ad005c8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587ad008e8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55587ad00680 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad007d0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55587ad2ae00 <col:55, line:618:5>
|     `-ReturnStmt 0x55587ad2adf0 <line:617:9, col:55>
|       `-CallExpr 0x55587ad2adb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2ac10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2ac80 <col:25> 'const char *' lvalue ParmVar 0x55587ad00680 'keyword' 'const char *'
|         |-IntegerLiteral 0x55587ad2aca0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55587ad2ad70 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55587ad2ad90 <col:54> 'Vector<T>' lvalue ParmVar 0x55587ad007d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55587ad00f58 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55587ad009f0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587ad00a68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587ad00eb8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55587ad00b28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad00ba8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad00c20 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55587ad00d70 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55587ad2aff8 <col:76, line:623:5>
|     |-CallExpr 0x55587ad2af78 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55587ad2ae18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55587ad2ae58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55587ad2ae68 <col:34> 'const char *' lvalue ParmVar 0x55587ad00b28 'keyword' 'const char *'
|     | |-BinaryOperator 0x55587ad2af18 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55587ad2aec8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55587ad2ae88 <col:43> 'int' lvalue ParmVar 0x55587ad00ba8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55587ad2af00 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55587ad2aee0 <col:51> 'const int' lvalue Var 0x55587acf2fb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55587ad2af38 <col:63> 'P' lvalue ParmVar 0x55587ad00c20 'parser' 'P'
|     | `-DeclRefExpr 0x55587ad2af58 <col:71> 'Vector<T>' lvalue ParmVar 0x55587ad00d70 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55587ad2afe8 <line:622:9, col:17>
|       `-UnaryOperator 0x55587ad2afd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad2afc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587ad01498 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55587ad00fd0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587ad01048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587ad013f8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55587ad01108 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad01188 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad012d0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55587ad2b260 <col:66, line:627:5>
|     `-ReturnStmt 0x55587ad2b250 <line:626:9, col:59>
|       `-CallExpr 0x55587ad2b210 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55587ad2b028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55587ad2b098 <col:25> 'const char *' lvalue ParmVar 0x55587ad01108 'keyword' 'const char *'
|         |-DeclRefExpr 0x55587ad2b0b8 <col:34> 'int' lvalue ParmVar 0x55587ad01188 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55587ad2b1d0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55587ad2b1f0 <col:58> 'Vector<T>' lvalue ParmVar 0x55587ad012d0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55587ad01528 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55587ad2b2e0 <col:25, line:633:5>
|   `-ReturnStmt 0x55587ad2b2d0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55587ad2b2b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55587ad2b288 <col:16> 'const bool' lvalue ->_status 0x55587ad0cce8
|         `-CXXThisExpr 0x55587ad2b278 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55587ad016a8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55587ad015e0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55587ad2b3c8 <col:27, line:639:5>
|   |-BinaryOperator 0x55587ad2b370 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55587ad2b2f8 <col:9> 'bool' lvalue ParmVar 0x55587ad015e0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55587ad2b358 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55587ad2b328 <col:13> 'bool' lvalue ->_status 0x55587ad0cce8
|   |     `-CXXThisExpr 0x55587ad2b318 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55587ad2b3b8 <line:638:9, col:17>
|     `-UnaryOperator 0x55587ad2b3a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587ad2b390 <col:17> 'Args *' this
|-CXXMethodDecl 0x55587ad01828 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55587ad01768 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55587ad2b4b8 <col:39, line:644:5>
|   |-BinaryOperator 0x55587ad2b460 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55587ad2b3e8 <col:9> 'bool' lvalue ParmVar 0x55587ad01768 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55587ad2b448 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55587ad2b418 <col:13> 'const bool' lvalue ->_status 0x55587ad0cce8
|   |     `-CXXThisExpr 0x55587ad2b408 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55587ad2b4a8 <line:643:9, col:17>
|     `-UnaryOperator 0x55587ad2b490 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587ad2b480 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55587ad018f0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55587ad2b560 <col:30, line:651:5>
|   `-ReturnStmt 0x55587ad2b550 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55587ad2b538 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55587ad2b508 <col:16> 'bool' lvalue ->_read_status 0x55587aceafc0
|         `-ImplicitCastExpr 0x55587ad2b4e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55587ad2b4d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55587ad01a38 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55587ad019a8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55587ad2b668 <col:32, line:658:5>
|   |-BinaryOperator 0x55587ad2b610 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55587ad2b578 <col:9> 'bool' lvalue ParmVar 0x55587ad019a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55587ad2b5f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55587ad2b5c8 <col:13> 'bool' lvalue ->_read_status 0x55587aceafc0
|   |     `-ImplicitCastExpr 0x55587ad2b5a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55587ad2b598 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55587ad2b658 <line:657:9, col:17>
|     `-UnaryOperator 0x55587ad2b640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587ad2b630 <col:17> 'Args *' this
|-CXXMethodDecl 0x55587ad01b88 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55587ad01af8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55587ad2b778 <col:44, line:663:5>
|   |-BinaryOperator 0x55587ad2b720 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55587ad2b688 <col:9> 'bool' lvalue ParmVar 0x55587ad01af8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55587ad2b708 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55587ad2b6d8 <col:13> 'bool' lvalue ->_read_status 0x55587aceafc0
|   |     `-ImplicitCastExpr 0x55587ad2b6b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55587ad2b6a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55587ad2b768 <line:662:9, col:17>
|     `-UnaryOperator 0x55587ad2b750 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587ad2b740 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55587ad01c50 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55587ad01d18 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55587ad01de0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55587ad07828 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55587ad07b38 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55587ad078c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587ad07a98 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55587ad079a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2bb30 <col:19, line:706:5>
|     `-IfStmt 0x55587ad2bb08 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55587ad2b878 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55587ad2ba38 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55587ad2ba08 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55587ad2b9c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55587ad2b8d0 <col:42> '<bound member function type>' ->simple_slot 0x55587ad265c0
|       |     | `-CXXThisExpr 0x55587ad2b8c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55587ad2b968 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55587ad2b920 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55587aa76548
|       |     | `-DeclRefExpr 0x55587ad2b900 <col:55> 'T' lvalue ParmVar 0x55587ad079a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55587ad2b9a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55587ad2baf8 <line:705:13, col:34>
|         `-CallExpr 0x55587ad2bad0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55587ad2ba58 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55587ad2bab0 <col:33> 'T' lvalue ParmVar 0x55587ad079a8 'x' 'T &'
|-FunctionTemplateDecl 0x55587ad07e08 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55587ad07b98 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587ad07d68 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55587ad07c78 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55587ad2bf10 <col:31, line:717:5>
|     |-DeclStmt 0x55587ad2bc70 <line:713:9, col:23>
|     | `-VarDecl 0x55587ad2bb58 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55587ad2bc48 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55587ad2bbd0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55587ad2bc28 <col:21> 'T' lvalue ParmVar 0x55587ad07c78 'x' 'T &'
|     |-IfStmt 0x55587ad2bec0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55587ad2bd68 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55587ad2bea0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55587ad2be40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55587ad2bdd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|     |   | `-DeclRefExpr 0x55587ad2bdb0 <col:14> 'T *' lvalue Var 0x55587ad2bb58 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55587ad2be80 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55587ad2bef8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55587ad2bed8 <col:16> 'T *' lvalue Var 0x55587ad2bb58 's' 'T *'
|-FunctionTemplateDecl 0x55587ad08218 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55587ad07e68 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55587ad07ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55587ad08178 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55587ad07fc8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55587ad08068 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55587ad2c220 <col:37, line:726:5>
|     |-IfStmt 0x55587ad2c1b0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55587ad2c1d0 <line:723:13, col:26>
|     | | `-VarDecl 0x55587ad2bf78 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55587ad2c068 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55587ad2bff0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55587ad2c048 <col:25> 'T' lvalue ParmVar 0x55587ad07fc8 'x' 'T &'
|     | |-DeclRefExpr 0x55587ad2c090 <col:16> 'T *' lvalue Var 0x55587ad2bf78 's' 'T *'
|     | `-BinaryOperator 0x55587ad2c190 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55587ad2c140 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55587ad2c0d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|     |   | `-DeclRefExpr 0x55587ad2c0b0 <col:14> 'T *' lvalue Var 0x55587ad2bf78 's' 'T *'
|     |   `-DeclRefExpr 0x55587ad2c170 <col:18> 'const V' lvalue ParmVar 0x55587ad08068 'value' 'const V &'
|     `-ReturnStmt 0x55587ad2c210 <line:725:9, col:17>
|       `-UnaryOperator 0x55587ad2c1f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55587ad2c1e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55587ad08618 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55587ad08280 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55587ad08578 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55587ad08330 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad083b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad08458 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55587ad2f928 <col:65, line:737:5>
|     |-DeclStmt 0x55587ad2c2b8 <line:732:9, col:26>
|     | `-VarDecl 0x55587ad2c250 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55587ad2f8f0 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55587ad2f910 <line:733:13, col:58>
|       | `-VarDecl 0x55587ad2c2e0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55587ad2c4c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55587ad2c490 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55587ad2c478 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55587ad2c458 <col:26, col:58> 'String' (CXXTemporary 0x55587ad2c458)
|       |           `-CXXMemberCallExpr 0x55587ad2c3e8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55587ad2c358 <col:26> '<bound member function type>' ->find 0x55587ad25bd8
|       |             | `-CXXThisExpr 0x55587ad2c348 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55587ad2c420 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad2c388 <col:31> 'const char *' lvalue ParmVar 0x55587ad08330 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55587ad2c438 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad2c3a8 <col:40> 'int' lvalue ParmVar 0x55587ad083b0 'flags' 'int'
|       |             `-DeclRefExpr 0x55587ad2c3c8 <col:47> 'Args::Slot *' lvalue Var 0x55587ad2c250 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55587ad2c578 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55587ad2c560 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55587ad2c540 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55587ad2c510 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|       |       `-ImplicitCastExpr 0x55587ad2c4f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55587ad2c4d8 <col:20> 'String' lvalue Var 0x55587ad2c2e0 'str' 'String'
|       `-CompoundStmt 0x55587ad2f8d0 <col:61, line:736:9>
|         |-DeclStmt 0x55587ad2ca30 <line:734:13, col:76>
|         | `-VarDecl 0x55587ad2c5c8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55587ad2ca00 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55587ad2c970 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55587ad2c9b8 <col:60> 'T' lvalue ParmVar 0x55587ad08458 'variable' 'T &'
|         |     `-UnaryOperator 0x55587ad2c9e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55587ad2c9d8 <col:71> 'Args *' this
|         `-CallExpr 0x55587ad2f8a0 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55587ad2ca58 <col:13> '<bound member function type>' ->postparse 0x55587ad25de8
|           | `-CXXThisExpr 0x55587ad2ca48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55587ad2cf78 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55587ad2ca88 <col:23> 'T *' lvalue Var 0x55587ad2c5c8 's' 'T *'
|           | `-CallExpr 0x55587ad2cf38 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55587ad2cd10 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55587ad2ce10 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55587ad2ce30 <col:86> 'String' lvalue Var 0x55587ad2c2e0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55587ad2cee0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55587ad2ce70 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|           |   | `-DeclRefExpr 0x55587ad2ce50 <col:92> 'T *' lvalue Var 0x55587ad2c5c8 's' 'T *'
|           |   `-UnaryOperator 0x55587ad2cf20 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55587ad2cf10 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55587ad2f880 <col:103> 'Args::Slot *' lvalue Var 0x55587ad2c250 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55587ad08b68 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55587ad08688 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55587ad08708 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55587ad08ac8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55587ad087c8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad08848 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad088e8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55587ad08988 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55587ad307d0 <col:88, line:745:5>
|     |-DeclStmt 0x55587ad2f9c0 <line:741:9, col:26>
|     | `-VarDecl 0x55587ad2f958 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55587ad2fbe0 <line:742:9, col:55>
|     | `-VarDecl 0x55587ad2f9e8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55587ad2fbc8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55587ad2fb98 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55587ad2fb80 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55587ad2fb60 <col:22, col:54> 'String' (CXXTemporary 0x55587ad2fb60)
|     |           `-CXXMemberCallExpr 0x55587ad2faf0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55587ad2fa60 <col:22> '<bound member function type>' ->find 0x55587ad25bd8
|     |             | `-CXXThisExpr 0x55587ad2fa50 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55587ad2fb28 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55587ad2fa90 <col:27> 'const char *' lvalue ParmVar 0x55587ad087c8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55587ad2fb40 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55587ad2fab0 <col:36> 'int' lvalue ParmVar 0x55587ad08848 'flags' 'int'
|     |             `-DeclRefExpr 0x55587ad2fad0 <col:43> 'Args::Slot *' lvalue Var 0x55587ad2f958 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55587ad2ffc0 <line:743:9, col:72>
|     | `-VarDecl 0x55587ad2fc38 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55587ad2ff90 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55587ad2ff00 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55587ad2ff48 <col:56> 'T' lvalue ParmVar 0x55587ad088e8 'variable' 'T &'
|     |     `-UnaryOperator 0x55587ad2ff78 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55587ad2ff68 <col:67> 'Args *' this
|     `-CallExpr 0x55587ad307a0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55587ad2ffe8 <col:9> '<bound member function type>' ->postparse 0x55587ad25de8
|       | `-CXXThisExpr 0x55587ad2ffd8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55587ad30760 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55587ad30018 <col:19> 'T *' lvalue Var 0x55587ad2fc38 's' 'T *'
|       | `-ParenExpr 0x55587ad30740 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55587ad30710 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55587ad306f8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55587ad306e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55587ad306c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55587ad30690 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|       |     |       `-ImplicitCastExpr 0x55587ad30678 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55587ad30038 <col:25> 'String' lvalue Var 0x55587ad2f9e8 'str' 'String'
|       |     |-CallExpr 0x55587ad304e8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55587ad302c0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55587ad303c0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55587ad303e0 <col:89> 'String' lvalue Var 0x55587ad2f9e8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55587ad30490 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55587ad30420 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|       |     | | `-DeclRefExpr 0x55587ad30400 <col:95> 'T *' lvalue Var 0x55587ad2fc38 's' 'T *'
|       |     | `-UnaryOperator 0x55587ad304d0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55587ad304c0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55587ad30658 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55587ad30638 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55587ad30608 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55587ad305b8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55587ad30548 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|       |         | | `-DeclRefExpr 0x55587ad30528 <col:109> 'T *' lvalue Var 0x55587ad2fc38 's' 'T *'
|       |         | `-DeclRefExpr 0x55587ad305e8 <col:113> 'const V' lvalue ParmVar 0x55587ad08988 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55587ad30628 <col:120> 'bool' true
|       `-DeclRefExpr 0x55587ad30780 <col:128> 'Args::Slot *' lvalue Var 0x55587ad2f958 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55587ad09098 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55587ad08be0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587ad08c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587ad08ff8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55587ad08d18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad08d98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad08e10 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55587ad08eb8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55587ad313c8 <col:75, line:754:5>
|     |-DeclStmt 0x55587ad30878 <line:749:9, col:26>
|     | `-VarDecl 0x55587ad30810 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55587ad31390 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55587ad313b0 <line:750:13, col:58>
|       | `-VarDecl 0x55587ad308a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55587ad30a80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55587ad30a50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55587ad30a38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55587ad30a18 <col:26, col:58> 'String' (CXXTemporary 0x55587ad30a18)
|       |           `-CXXMemberCallExpr 0x55587ad309a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55587ad30918 <col:26> '<bound member function type>' ->find 0x55587ad25bd8
|       |             | `-CXXThisExpr 0x55587ad30908 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55587ad309e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad30948 <col:31> 'const char *' lvalue ParmVar 0x55587ad08d18 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55587ad309f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad30968 <col:40> 'int' lvalue ParmVar 0x55587ad08d98 'flags' 'int'
|       |             `-DeclRefExpr 0x55587ad30988 <col:47> 'Args::Slot *' lvalue Var 0x55587ad30810 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55587ad30b38 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55587ad30b20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55587ad30b00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55587ad30ad0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|       |       `-ImplicitCastExpr 0x55587ad30ab8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55587ad30a98 <col:20> 'String' lvalue Var 0x55587ad308a0 'str' 'String'
|       `-CompoundStmt 0x55587ad31370 <col:61, line:753:9>
|         |-DeclStmt 0x55587ad30f10 <line:751:13, col:63>
|         | `-VarDecl 0x55587ad30b88 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55587ad30ee0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55587ad30e50 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55587ad30e98 <col:47> 'T' lvalue ParmVar 0x55587ad08eb8 'variable' 'T &'
|         |     `-UnaryOperator 0x55587ad30ec8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55587ad30eb8 <col:58> 'Args *' this
|         `-CallExpr 0x55587ad31340 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55587ad30f38 <col:13> '<bound member function type>' ->postparse 0x55587ad25de8
|           | `-CXXThisExpr 0x55587ad30f28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55587ad31300 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55587ad30f68 <col:23> 'T *' lvalue Var 0x55587ad30b88 's' 'T *'
|           | `-CallExpr 0x55587ad312c0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55587ad31150 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55587ad31198 <col:56> 'P' lvalue ParmVar 0x55587ad08e10 'parser' 'P'
|           |   |-DeclRefExpr 0x55587ad311b8 <col:64> 'String' lvalue Var 0x55587ad308a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55587ad31268 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55587ad311f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|           |   | `-DeclRefExpr 0x55587ad311d8 <col:70> 'T *' lvalue Var 0x55587ad30b88 's' 'T *'
|           |   `-UnaryOperator 0x55587ad312a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55587ad31298 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55587ad31320 <col:81> 'Args::Slot *' lvalue Var 0x55587ad30810 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55587ad096f8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55587ad09110 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55587ad09188 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55587ad09208 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55587ad09658 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55587ad092d0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad09350 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad093c8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55587ad09468 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55587ad09508 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55587ad32158 <col:98, line:762:5>
|     |-DeclStmt 0x55587ad31460 <line:758:9, col:26>
|     | `-VarDecl 0x55587ad313f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55587ad31680 <line:759:9, col:55>
|     | `-VarDecl 0x55587ad31488 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55587ad31668 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55587ad31638 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55587ad31620 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55587ad31600 <col:22, col:54> 'String' (CXXTemporary 0x55587ad31600)
|     |           `-CXXMemberCallExpr 0x55587ad31590 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55587ad31500 <col:22> '<bound member function type>' ->find 0x55587ad25bd8
|     |             | `-CXXThisExpr 0x55587ad314f0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55587ad315c8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55587ad31530 <col:27> 'const char *' lvalue ParmVar 0x55587ad092d0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55587ad315e0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55587ad31550 <col:36> 'int' lvalue ParmVar 0x55587ad09350 'flags' 'int'
|     |             `-DeclRefExpr 0x55587ad31570 <col:43> 'Args::Slot *' lvalue Var 0x55587ad313f8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55587ad31aa0 <line:760:9, col:59>
|     | `-VarDecl 0x55587ad316d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55587ad31a70 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55587ad319e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55587ad31a28 <col:43> 'T' lvalue ParmVar 0x55587ad09468 'variable' 'T &'
|     |     `-UnaryOperator 0x55587ad31a58 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55587ad31a48 <col:54> 'Args *' this
|     `-CallExpr 0x55587ad32128 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55587ad31ac8 <col:9> '<bound member function type>' ->postparse 0x55587ad25de8
|       | `-CXXThisExpr 0x55587ad31ab8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55587ad320e8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55587ad31af8 <col:19> 'T *' lvalue Var 0x55587ad316d8 's' 'T *'
|       | `-ParenExpr 0x55587ad320c8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55587ad32098 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55587ad32080 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55587ad32068 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55587ad32048 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55587ad32018 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|       |     |       `-ImplicitCastExpr 0x55587ad32000 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55587ad31b18 <col:25> 'String' lvalue Var 0x55587ad31488 'str' 'String'
|       |     |-CallExpr 0x55587ad31e70 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55587ad31d00 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55587ad31d48 <col:59> 'P' lvalue ParmVar 0x55587ad093c8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55587ad31d68 <col:67> 'String' lvalue Var 0x55587ad31488 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55587ad31e18 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55587ad31da8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|       |     | | `-DeclRefExpr 0x55587ad31d88 <col:73> 'T *' lvalue Var 0x55587ad316d8 's' 'T *'
|       |     | `-UnaryOperator 0x55587ad31e58 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55587ad31e48 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55587ad31fe0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55587ad31fc0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55587ad31f90 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55587ad31f40 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55587ad31ed0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|       |         | | `-DeclRefExpr 0x55587ad31eb0 <col:87> 'T *' lvalue Var 0x55587ad316d8 's' 'T *'
|       |         | `-DeclRefExpr 0x55587ad31f70 <col:91> 'const V' lvalue ParmVar 0x55587ad09508 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55587ad31fb0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55587ad32108 <col:106> 'Args::Slot *' lvalue Var 0x55587ad313f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55587ad09d68 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55587ad09778 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587ad097f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55587ad09878 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55587ad09cc8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55587ad09940 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad099c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad09a38 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55587ad09ad8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55587ad09b78 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55587ad33138 <col:60, line:773:5>
|     |-DeclStmt 0x55587ad32200 <line:767:9, col:26>
|     | `-VarDecl 0x55587ad32198 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55587ad33100 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55587ad33120 <line:768:13, col:58>
|       | `-VarDecl 0x55587ad32228 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55587ad32408 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55587ad323d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55587ad323c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55587ad323a0 <col:26, col:58> 'String' (CXXTemporary 0x55587ad323a0)
|       |           `-CXXMemberCallExpr 0x55587ad32330 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55587ad322a0 <col:26> '<bound member function type>' ->find 0x55587ad25bd8
|       |             | `-CXXThisExpr 0x55587ad32290 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55587ad32368 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad322d0 <col:31> 'const char *' lvalue ParmVar 0x55587ad09940 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55587ad32380 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad322f0 <col:40> 'int' lvalue ParmVar 0x55587ad099c0 'flags' 'int'
|       |             `-DeclRefExpr 0x55587ad32310 <col:47> 'Args::Slot *' lvalue Var 0x55587ad32198 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55587ad324c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55587ad324a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55587ad32488 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55587ad32458 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|       |       `-ImplicitCastExpr 0x55587ad32440 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55587ad32420 <col:20> 'String' lvalue Var 0x55587ad32228 'str' 'String'
|       `-CompoundStmt 0x55587ad330d8 <col:61, line:772:9>
|         |-DeclStmt 0x55587ad32800 <line:769:13, col:66>
|         | `-VarDecl 0x55587ad32518 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55587ad327d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55587ad32740 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55587ad32788 <col:49> 'T1' lvalue ParmVar 0x55587ad09ad8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55587ad327b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55587ad327a8 <col:61> 'Args *' this
|         |-DeclStmt 0x55587ad32b70 <line:770:13, col:66>
|         | `-VarDecl 0x55587ad32888 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55587ad32b40 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55587ad32ab0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55587ad32af8 <col:49> 'T2' lvalue ParmVar 0x55587ad09b78 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55587ad32b28 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55587ad32b18 <col:61> 'Args *' this
|         `-CallExpr 0x55587ad330a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55587ad32b98 <col:13> '<bound member function type>' ->postparse 0x55587ad25de8
|           | `-CXXThisExpr 0x55587ad32b88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55587ad33068 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55587ad32c08 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55587ad32bc8 <col:23> 'T1 *' lvalue Var 0x55587ad32518 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55587ad32be8 <col:29> 'T2 *' lvalue Var 0x55587ad32888 's2' 'T2 *'
|           | `-CallExpr 0x55587ad33020 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55587ad32df0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55587ad32e38 <col:63> 'P' lvalue ParmVar 0x55587ad09a38 'parser' 'P'
|           |   |-DeclRefExpr 0x55587ad32e58 <col:71> 'String' lvalue Var 0x55587ad32228 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55587ad32f08 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55587ad32e98 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|           |   | `-DeclRefExpr 0x55587ad32e78 <col:77> 'T1 *' lvalue Var 0x55587ad32518 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55587ad32fc8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55587ad32f58 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|           |   | `-DeclRefExpr 0x55587ad32f38 <col:82> 'T2 *' lvalue Var 0x55587ad32888 's2' 'T2 *'
|           |   `-UnaryOperator 0x55587ad33008 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55587ad32ff8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55587ad33088 <col:94> 'Args::Slot *' lvalue Var 0x55587ad32198 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55587ad0a158 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55587ad09de8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587ad0a0b8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55587ad09ea0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad09f20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad09f98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55587ad33650 <col:67, line:780:5>
|     |-DeclStmt 0x55587ad331d0 <line:777:9, col:26>
|     | `-VarDecl 0x55587ad33168 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55587ad33618 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55587ad33638 <line:778:13, col:58>
|       | `-VarDecl 0x55587ad331f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55587ad333d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55587ad333a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55587ad33390 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55587ad33370 <col:26, col:58> 'String' (CXXTemporary 0x55587ad33370)
|       |           `-CXXMemberCallExpr 0x55587ad33300 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55587ad33270 <col:26> '<bound member function type>' ->find 0x55587ad25bd8
|       |             | `-CXXThisExpr 0x55587ad33260 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55587ad33338 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad332a0 <col:31> 'const char *' lvalue ParmVar 0x55587ad09ea0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55587ad33350 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55587ad332c0 <col:40> 'int' lvalue ParmVar 0x55587ad09f20 'flags' 'int'
|       |             `-DeclRefExpr 0x55587ad332e0 <col:47> 'Args::Slot *' lvalue Var 0x55587ad33168 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55587ad33490 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55587ad33478 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55587ad33458 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55587ad33428 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|       |       `-ImplicitCastExpr 0x55587ad33410 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55587ad333f0 <col:20> 'String' lvalue Var 0x55587ad331f8 'str' 'String'
|       `-CallExpr 0x55587ad335e8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55587ad334b8 <col:13> '<bound member function type>' ->postparse 0x55587ad25de8
|         | `-CXXThisExpr 0x55587ad334a8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55587ad33598 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55587ad33508 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55587ad334e8 <col:23> 'P' lvalue ParmVar 0x55587ad09f98 'parser' 'P'
|         | |-DeclRefExpr 0x55587ad33550 <col:36> 'String' lvalue Var 0x55587ad331f8 'str' 'String'
|         | `-UnaryOperator 0x55587ad33580 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55587ad33570 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55587ad335c8 <col:49> 'Args::Slot *' lvalue Var 0x55587ad33168 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55587ad0a4f8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55587ad0a1c8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55587ad0a458 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55587ad0a280 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad0a300 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad0a378 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55587ad33fc0 <col:71, line:792:5>
|     |-DeclStmt 0x55587ad336e8 <line:784:9, col:26>
|     | `-VarDecl 0x55587ad33680 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55587ad337b8 <line:785:9, col:29>
|     | `-VarDecl 0x55587ad33718 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55587ad337a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55587ad33780 <col:28> 'int' 1
|     |-WhileStmt 0x55587ad33e70 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55587ad33e90 <line:786:16, col:61>
|     | | `-VarDecl 0x55587ad337e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55587ad339c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55587ad33990 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55587ad33978 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55587ad33958 <col:29, col:61> 'String' (CXXTemporary 0x55587ad33958)
|     | |           `-CXXMemberCallExpr 0x55587ad338e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55587ad33858 <col:29> '<bound member function type>' ->find 0x55587ad25bd8
|     | |             | `-CXXThisExpr 0x55587ad33848 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55587ad33920 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55587ad33888 <col:34> 'const char *' lvalue ParmVar 0x55587ad0a280 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55587ad33938 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55587ad338a8 <col:43> 'int' lvalue ParmVar 0x55587ad0a300 'flags' 'int'
|     | |             `-DeclRefExpr 0x55587ad338c8 <col:50> 'Args::Slot *' lvalue Var 0x55587ad33680 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55587ad33a78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55587ad33a60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55587ad33a40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55587ad33a10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|     | |       `-ImplicitCastExpr 0x55587ad339f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55587ad339d8 <col:23> 'String' lvalue Var 0x55587ad337e0 'str' 'String'
|     | `-CompoundStmt 0x55587ad33e48 <col:64, line:790:9>
|     |   |-CallExpr 0x55587ad33bd0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55587ad33aa0 <col:13> '<bound member function type>' ->postparse 0x55587ad25de8
|     |   | | `-CXXThisExpr 0x55587ad33a90 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55587ad33b80 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55587ad33af0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55587ad33ad0 <col:23> 'P' lvalue ParmVar 0x55587ad0a378 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55587ad33b38 <col:36> 'String' lvalue Var 0x55587ad337e0 'str' 'String'
|     |   | | `-UnaryOperator 0x55587ad33b68 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55587ad33b58 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55587ad33bb0 <col:49> 'Args::Slot *' lvalue Var 0x55587ad33680 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55587ad33d68 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55587ad33c00 <col:13> 'int' lvalue Var 0x55587ad33718 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55587ad33d50 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55587ad33d30 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55587ad33c98 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55587ad33c78 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55587ad33c60 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55587ad33c20 <col:28> 'int' lvalue Var 0x55587ad33718 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55587ad33c40 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55587ad33d18 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55587ad33ce8 <col:49> 'bool' lvalue ->_read_status 0x55587aceafc0
|     |   |         `-ImplicitCastExpr 0x55587ad33cc8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55587ad33cb8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55587ad33e18 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55587ad33d88 <col:13> 'int' lvalue ParmVar 0x55587ad0a300 'flags' 'int'
|     |     `-UnaryOperator 0x55587ad33e00 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55587ad33de8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55587ad33dc8 <col:23> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55587ad33fa0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55587ad33ed8 <col:9> 'bool' lvalue ->_read_status 0x55587aceafc0
|       | `-ImplicitCastExpr 0x55587ad33eb8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55587ad33ea8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55587ad33f80 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55587ad33f60 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55587ad33f48 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55587ad33f08 <col:25> 'int' lvalue Var 0x55587ad33718 'read_status' 'int'
|           `-IntegerLiteral 0x55587ad33f28 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55587ad0a9d8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55587ad0a568 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587ad0a5e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587ad0a938 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55587ad0a6a8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad0a728 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad0a7a0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55587ad0a848 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55587ad34f50 <col:84, line:805:5>
|     |-DeclStmt 0x55587ad34068 <line:796:9, col:26>
|     | `-VarDecl 0x55587ad34000 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55587ad34138 <line:797:9, col:29>
|     | `-VarDecl 0x55587ad34098 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55587ad34120 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55587ad34100 <col:28> 'int' 1
|     |-DeclStmt 0x55587ad34470 <line:798:9, col:71>
|     | `-VarDecl 0x55587ad34188 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55587ad34440 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55587ad343b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55587ad343f8 <col:55> 'T' lvalue ParmVar 0x55587ad0a848 'variable' 'T &'
|     |     `-UnaryOperator 0x55587ad34428 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55587ad34418 <col:66> 'Args *' this
|     |-WhileStmt 0x55587ad34e00 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55587ad34e20 <line:799:16, col:61>
|     | | `-VarDecl 0x55587ad34498 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55587ad34678 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55587ad34648 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55587ad34630 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55587ad34610 <col:29, col:61> 'String' (CXXTemporary 0x55587ad34610)
|     | |           `-CXXMemberCallExpr 0x55587ad345a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55587ad34510 <col:29> '<bound member function type>' ->find 0x55587ad25bd8
|     | |             | `-CXXThisExpr 0x55587ad34500 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55587ad345d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55587ad34540 <col:34> 'const char *' lvalue ParmVar 0x55587ad0a6a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55587ad345f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55587ad34560 <col:43> 'int' lvalue ParmVar 0x55587ad0a728 'flags' 'int'
|     | |             `-DeclRefExpr 0x55587ad34580 <col:50> 'Args::Slot *' lvalue Var 0x55587ad34000 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55587ad34730 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55587ad34718 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55587ad346f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55587ad346c8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|     | |       `-ImplicitCastExpr 0x55587ad346b0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55587ad34690 <col:23> 'String' lvalue Var 0x55587ad34498 'str' 'String'
|     | `-CompoundStmt 0x55587ad34dd8 <col:64, line:803:9>
|     |   |-CallExpr 0x55587ad34b60 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55587ad34758 <col:13> '<bound member function type>' ->postparse 0x55587ad25de8
|     |   | | `-CXXThisExpr 0x55587ad34748 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55587ad34b20 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55587ad34788 <col:23> 'T *' lvalue Var 0x55587ad34188 's' 'T *'
|     |   | | `-CallExpr 0x55587ad34ae0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55587ad34970 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55587ad349b8 <col:56> 'P' lvalue ParmVar 0x55587ad0a7a0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55587ad349d8 <col:64> 'String' lvalue Var 0x55587ad34498 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55587ad34a88 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55587ad34a18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|     |   | |   | `-DeclRefExpr 0x55587ad349f8 <col:70> 'T *' lvalue Var 0x55587ad34188 's' 'T *'
|     |   | |   `-UnaryOperator 0x55587ad34ac8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55587ad34ab8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55587ad34b40 <col:81> 'Args::Slot *' lvalue Var 0x55587ad34000 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55587ad34cf8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55587ad34b90 <col:13> 'int' lvalue Var 0x55587ad34098 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55587ad34ce0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55587ad34cc0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55587ad34c28 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55587ad34c08 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55587ad34bf0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55587ad34bb0 <col:28> 'int' lvalue Var 0x55587ad34098 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55587ad34bd0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55587ad34ca8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55587ad34c78 <col:49> 'bool' lvalue ->_read_status 0x55587aceafc0
|     |   |         `-ImplicitCastExpr 0x55587ad34c58 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55587ad34c48 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55587ad34da8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55587ad34d18 <col:13> 'int' lvalue ParmVar 0x55587ad0a728 'flags' 'int'
|     |     `-UnaryOperator 0x55587ad34d90 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55587ad34d78 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55587ad34d58 <col:23> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55587ad34f30 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55587ad34e68 <col:9> 'bool' lvalue ->_read_status 0x55587aceafc0
|       | `-ImplicitCastExpr 0x55587ad34e48 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55587ad34e38 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55587ad34f10 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55587ad34ef0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55587ad34ed8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55587ad34e98 <col:25> 'int' lvalue Var 0x55587ad34098 'read_status' 'int'
|           `-IntegerLiteral 0x55587ad34eb8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55587ad0afb8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55587ad0aa50 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55587ad0aac8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55587ad0af18 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55587ad0ab88 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55587ad0ac08 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55587ad0ac80 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55587ad0add0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55587ad35d58 <col:87, line:821:5>
|     |-DeclStmt 0x55587ad35000 <line:809:9, col:26>
|     | `-VarDecl 0x55587ad34f98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55587ad350d0 <line:810:9, col:29>
|     | `-VarDecl 0x55587ad35030 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55587ad350b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55587ad35098 <col:28> 'int' 1
|     |-DeclStmt 0x55587ad35318 <line:811:9, col:38>
|     | `-VarDecl 0x55587ad35200 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55587ad352f0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55587ad35278 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55587ad352d0 <col:29> 'Vector<T>' lvalue ParmVar 0x55587ad0add0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55587ad35c08 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55587ad35c28 <line:812:16, col:61>
|     | | `-VarDecl 0x55587ad35340 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55587ad35520 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55587ad354f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55587ad354d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55587ad354b8 <col:29, col:61> 'String' (CXXTemporary 0x55587ad354b8)
|     | |           `-CXXMemberCallExpr 0x55587ad35448 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55587ad353b8 <col:29> '<bound member function type>' ->find 0x55587ad25bd8
|     | |             | `-CXXThisExpr 0x55587ad353a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55587ad35480 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55587ad353e8 <col:34> 'const char *' lvalue ParmVar 0x55587ad0ab88 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55587ad35498 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55587ad35408 <col:43> 'int' lvalue ParmVar 0x55587ad0ac08 'flags' 'int'
|     | |             `-DeclRefExpr 0x55587ad35428 <col:50> 'Args::Slot *' lvalue Var 0x55587ad34f98 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55587ad355d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55587ad355c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55587ad355a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55587ad35570 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55587aa38508
|     | |       `-ImplicitCastExpr 0x55587ad35558 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55587ad35538 <col:23> 'String' lvalue Var 0x55587ad35340 'str' 'String'
|     | `-CompoundStmt 0x55587ad35bd0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55587ad35698 <line:813:13, col:23>
|     |   | `-VarDecl 0x55587ad35600 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55587ad35678 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55587ad35818 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55587ad356c0 <col:13> '<bound member function type>' ->postparse 0x55587ad25de8
|     |   | | `-CXXThisExpr 0x55587ad356b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55587ad357c0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55587ad35710 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55587ad356f0 <col:23> 'P' lvalue ParmVar 0x55587ad0ac80 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55587ad35758 <col:36> 'String' lvalue Var 0x55587ad35340 'str' 'String'
|     |   | | |-DeclRefExpr 0x55587ad35778 <col:41> 'T' lvalue Var 0x55587ad35600 'sx' 'T'
|     |   | | `-UnaryOperator 0x55587ad357a8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55587ad35798 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55587ad357f8 <col:53> 'Args::Slot *' lvalue Var 0x55587ad34f98 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55587ad35970 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55587ad358a8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55587ad35878 <col:17> 'bool' lvalue ->_read_status 0x55587aceafc0
|     |   | |   `-ImplicitCastExpr 0x55587ad35858 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55587ad35848 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55587ad35948 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55587ad358e0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55587ad358c0 <col:17> 'Vector<T> *' lvalue Var 0x55587ad35200 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55587ad35928 <col:30> 'T' lvalue Var 0x55587ad35600 'sx' 'T'
|     |   |-BinaryOperator 0x55587ad35af0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55587ad35988 <col:13> 'int' lvalue Var 0x55587ad35030 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55587ad35ad8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55587ad35ab8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55587ad35a20 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55587ad35a00 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55587ad359e8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55587ad359a8 <col:28> 'int' lvalue Var 0x55587ad35030 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55587ad359c8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55587ad35aa0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55587ad35a70 <col:49> 'bool' lvalue ->_read_status 0x55587aceafc0
|     |   |         `-ImplicitCastExpr 0x55587ad35a50 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55587ad35a40 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55587ad35ba0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55587ad35b10 <col:13> 'int' lvalue ParmVar 0x55587ad0ac08 'flags' 'int'
|     |     `-UnaryOperator 0x55587ad35b88 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55587ad35b70 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55587ad35b50 <col:23> 'const int' lvalue Var 0x55587acf2cc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55587ad35d38 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55587ad35c70 <col:9> 'bool' lvalue ->_read_status 0x55587aceafc0
|       | `-ImplicitCastExpr 0x55587ad35c50 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55587ad35c40 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55587ad35d18 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55587ad35cf8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55587ad35ce0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55587ad35ca0 <col:25> 'int' lvalue Var 0x55587ad35030 'read_status' 'int'
|           `-IntegerLiteral 0x55587ad35cc0 <col:40> 'int' 1
|-AccessSpecDecl 0x55587ad0b030 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55587ad0b058 prev 0x55587acf0fc8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55587ad0b150 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55587ad0b240 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55587ad35d90 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55587ad0b330 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55587ad35da0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55587ad0b430 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55587ad0b4e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55587ad0b588 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55587ad0b588
| | `-ParmVarDecl 0x55587ad0b698 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55587ad0be58 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55587ad0be58
|   `-ParmVarDecl 0x55587ad0bf68 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55587ad0b708 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55587ad0b868 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55587ad0ba60 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55587ad0b910 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55587ad0b988 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55587ad35f80 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55587ad0bd18 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55587ad35df0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55587ad35db0 <col:20> 'void *' lvalue ParmVar 0x55587ad0b910 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55587ad0bd80 '_slot' 'char *'
| | | `-CXXNewExpr 0x55587ad35e78 <col:32, col:45> 'char *' array Function 0x55587a85c1a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55587ad35e60 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55587ad35e30 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55587ad0b988 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55587ad0bde0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55587ad35f40 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55587ad35f00 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55587ad0b988 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55587ad36000 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55587ad0bb60 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55587ad0b330 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55587ad36088 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55587ad36068 <line:840:13, col:22> 'void' array Function 0x55587a85c508 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55587ad36050 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55587ad36020 <col:22> 'char *' lvalue ->_slot 0x55587ad0bd80
| |         `-CXXThisExpr 0x55587ad36010 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55587ad0bc60 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55587ad0b430 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55587ad36278 <col:22, line:844:9>
| |   `-CallExpr 0x55587ad361e0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55587ad361c8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55587ad361a8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55587a967f68 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55587ad36218 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55587ad360f8 <col:20> 'void *' lvalue ->_ptr 0x55587ad0bd18
| |     |   `-CXXThisExpr 0x55587ad360e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55587ad36248 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55587ad36230 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55587ad36138 <col:26> 'char *' lvalue ->_slot 0x55587ad0bd80
| |     |     `-CXXThisExpr 0x55587ad36128 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55587ad36260 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55587ad36178 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55587ad0bde0
| |         `-CXXThisExpr 0x55587ad36168 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55587ad0bd18 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55587ad0bd80 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55587ad0bde0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55587ad0bfd8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55587ad0bfd8
| | `-ParmVarDecl 0x55587ad0c0e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55587ad0c188 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55587ad0c188
|   `-ParmVarDecl 0x55587ad0c298 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55587ad0c438 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55587ad0c308 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55587ad0c3a8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55587ad0c6d0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55587ad0c8c8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55587ad0c798 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55587ad0ca48 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55587ad362b0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55587ad36290 <col:20> 'T *' lvalue ParmVar 0x55587ad0c798 'ptr' 'T *'
|   | `-CompoundStmt 0x55587ad36300 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55587ad0c998 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55587ad0b430 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55587ad364b0 <col:22, line:857:9>
|   |   `-CallExpr 0x55587ad36480 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55587ad36310 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55587aa20698 0x55587a9ca9c8
|   |     |-CXXOperatorCallExpr 0x55587ad36410 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55587ad363a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55587ac2d648 0x55587ac2d268 0x55587ac2ce98 0x55587ac2cab8 0x55587ac2c6d8 0x55587ac2c308
|   |     | `-MemberExpr 0x55587ad36370 <col:29> 'T *' lvalue ->_ptr 0x55587ad0ca48
|   |     |   `-CXXThisExpr 0x55587ad36360 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55587ad36450 <col:35> 'T' lvalue ->_slot 0x55587ad0caa8
|   |       `-CXXThisExpr 0x55587ad36440 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55587ad0ca48 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55587ad0caa8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55587ad0cb10 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55587ad0cc10 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55587ad0cc60 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ad0cbf0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55587ad0cbd0 <col:31> 'int' 48
|-FieldDecl 0x55587ad0cc88 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55587ad0cce8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55587ad0cd48 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55587ad0ce80 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55587ad25480 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55587ad254e0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55587ad25590 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55587ad257b8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55587ad256c0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55587ad25908 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55587ad25878 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55587ad25bd8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55587ad259c8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55587ad25a48 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55587ad25af0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55587ad25de8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55587ad25ca0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55587ad25d18 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55587ad25eb8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55587ad26008 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55587ad25f70 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55587ad26398 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55587ad260c8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55587ad26148 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55587ad261f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55587ad262a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55587ad265c0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55587ad26470 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55587ad264e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55587ad268d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55587ad26670 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55587ad26838 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55587ad26748 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NamedIntArg
         0 |   int _type
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ad85598 <../dummy_inc/click/nameinfo.hh:515:1, line:525:1> line:515:8 referenced struct NamedIntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587ad856b8 <col:1, col:8> col:8 implicit referenced struct NamedIntArg
|-CXXConstructorDecl 0x55587ad85828 <line:516:5, line:518:5> line:516:5 used NamedIntArg 'void (uint32_t)'
| |-ParmVarDecl 0x55587ad85758 <col:17, col:26> col:26 used type 'uint32_t':'unsigned int'
| |-CXXCtorInitializer Field 0x55587ad85b50 '_type' 'int'
| | `-ImplicitCastExpr 0x55587ad85c10 <line:517:10> 'int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55587ad85bf8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x55587ad85bb8 <col:10> 'uint32_t':'unsigned int' lvalue ParmVar 0x55587ad85758 'type' 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55587ad85c58 <col:16, line:518:5>
|-CXXMethodDecl 0x55587ad85a80 <line:519:5, line:523:5> line:519:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55587ad858e8 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x55587ad85968 <col:35, col:40> col:40 used value 'int &'
| |-ParmVarDecl 0x55587ad859e0 <col:47, col:65> col:65 used args 'const ArgContext &'
| `-CompoundStmt 0x55587ad86620 <col:71, line:523:5>
|   `-ReturnStmt 0x55587ad86610 <line:520:2, line:522:40>
|     `-ExprWithCleanups 0x55587ad865f8 <line:520:9, line:522:40> 'bool'
|       `-BinaryOperator 0x55587ad865d8 <line:520:9, line:522:40> 'bool' '||'
|         |-CallExpr 0x55587ad85eb0 <line:520:9, line:521:32> 'bool'
|         | |-ImplicitCastExpr 0x55587ad85e98 <line:520:9, col:19> 'bool (*)(uint32_t, const Element *, const String &, void *, size_t)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55587ad85ca0 <col:9, col:19> 'bool (uint32_t, const Element *, const String &, void *, size_t)' lvalue CXXMethod 0x55587ad71028 'query' 'bool (uint32_t, const Element *, const String &, void *, size_t)'
|         | |-ImplicitCastExpr 0x55587ad85f10 <col:25> 'uint32_t':'unsigned int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55587ad85ef8 <col:25> 'int' <LValueToRValue>
|         | |   `-MemberExpr 0x55587ad85ce0 <col:25> 'int' lvalue ->_type 0x55587ad85b50
|         | |     `-CXXThisExpr 0x55587ad85cd0 <col:25> 'NamedIntArg *' implicit this
|         | |-CXXMemberCallExpr 0x55587ad85d60 <col:32, col:45> 'const Element *'
|         | | `-MemberExpr 0x55587ad85d30 <col:32, col:37> '<bound member function type>' .context 0x55587acea2e8
|         | |   `-DeclRefExpr 0x55587ad85d10 <col:32> 'const ArgContext' lvalue ParmVar 0x55587ad859e0 'args' 'const ArgContext &'
|         | |-DeclRefExpr 0x55587ad85d80 <col:48> 'const String' lvalue ParmVar 0x55587ad858e8 'str' 'const String &'
|         | |-ImplicitCastExpr 0x55587ad85f28 <line:521:11, col:12> 'void *' <BitCast>
|         | | `-UnaryOperator 0x55587ad85dc0 <col:11, col:12> 'int *' prefix '&' cannot overflow
|         | |   `-DeclRefExpr 0x55587ad85da0 <col:12> 'int' lvalue ParmVar 0x55587ad85968 'value' 'int &'
|         | `-UnaryExprOrTypeTraitExpr 0x55587ad85e18 <col:19, col:31> 'unsigned long' sizeof
|         |   `-ParenExpr 0x55587ad85df8 <col:25, col:31> 'int' lvalue
|         |     `-DeclRefExpr 0x55587ad85dd8 <col:26> 'int' lvalue ParmVar 0x55587ad85968 'value' 'int &' non_odr_use_unevaluated
|         `-CXXMemberCallExpr 0x55587ad865a0 <line:522:9, col:40> 'bool'
|           |-MemberExpr 0x55587ad86558 <col:9, col:18> '<bound member function type>' .parse 0x55587ad86448
|           | `-MaterializeTemporaryExpr 0x55587ad86090 <col:9, col:16> 'IntArg' xvalue
|           |   `-CXXTemporaryObjectExpr 0x55587ad85f70 <col:9, col:16> 'IntArg' 'void (int)'
|           |     `-CXXDefaultArgExpr 0x55587ad85f50 <<invalid sloc>> 'int'
|           |-DeclRefExpr 0x55587ad86108 <col:24> 'const String' lvalue ParmVar 0x55587ad858e8 'str' 'const String &'
|           |-DeclRefExpr 0x55587ad86128 <col:29> 'int' lvalue ParmVar 0x55587ad85968 'value' 'int &'
|           `-DeclRefExpr 0x55587ad86148 <col:36> 'const ArgContext' lvalue ParmVar 0x55587ad859e0 'args' 'const ArgContext &'
|-FieldDecl 0x55587ad85b50 <line:524:5, col:9> col:9 referenced _type 'int'
|-CXXConstructorDecl 0x55587ad877a8 <line:515:8> col:8 implicit constexpr NamedIntArg 'void (const NamedIntArg &)' inline default trivial noexcept-unevaluated 0x55587ad877a8
| `-ParmVarDecl 0x55587ad878b8 <col:8> col:8 'const NamedIntArg &'
|-CXXConstructorDecl 0x55587ad87958 <col:8> col:8 implicit used constexpr NamedIntArg 'void (NamedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55587ad87a68 <col:8> col:8 used 'NamedIntArg &&'
| |-CXXCtorInitializer Field 0x55587ad85b50 '_type' 'int'
| | `-ImplicitCastExpr 0x55587ad88280 <col:8> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55587ad88250 <col:8> 'int' xvalue ._type 0x55587ad85b50
| |     `-CXXStaticCastExpr 0x55587ad88220 <col:8> 'NamedIntArg' xvalue static_cast<struct NamedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55587ad881f0 <col:8> 'NamedIntArg' lvalue ParmVar 0x55587ad87a68 '' 'NamedIntArg &&'
| `-CompoundStmt 0x55587ad882c8 <col:8>
`-CXXDestructorDecl 0x55587ad87b20 <col:8> col:8 implicit referenced ~NamedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.NamedIntArg = type { i32 }
  NonVirtualBaseLLVMType:%struct.NamedIntArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ad53c28 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587ad53d48 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x55587ad53dd8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55587ad53fd0 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55587ad53e10 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55587ad53e88 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55587ad53f00 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55587ad540a0 <col:79> 'const ArgContext' lvalue Var 0x55587ad364d8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55587ad54218 <col:91, line:1372:5>
|   `-ReturnStmt 0x55587ad54208 <line:1371:9, col:39>
|     `-CallExpr 0x55587ad541b8 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x55587ad541a0 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55587ad54180 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55587ad53b70 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55587ad54108 <col:24> 'const String' lvalue ParmVar 0x55587ad53e10 'str' 'const String &'
|       |-UnaryOperator 0x55587ad54148 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55587ad54128 <col:30> 'String' lvalue ParmVar 0x55587ad53e88 'result' 'String &'
|       `-ImplicitCastExpr 0x55587ad541f0 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55587ad54160 <col:38> 'int' 0
|-CXXConstructorDecl 0x55587ad883b8 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55587ad884b8 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x55587ad884b8
| `-ParmVarDecl 0x55587ad885c8 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x55587ad88668 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55587ad88778 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x55587ad88e20 <col:7>
`-CXXDestructorDecl 0x55587ad88818 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587aa293c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587aa294d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55587aa29568 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55587aa29638 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55587aa29720 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55587aa29938 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55587aa297e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa29ae8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55587aa299f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55587aa29c30 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55587aa29ba0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55587aa29d78 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55587aa29ce8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa29ec0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55587aa29e30 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa29f88 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55587aa2a0d0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55587aa2a040 <col:28> col:31 'int'
|-CXXMethodDecl 0x55587aa2a198 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55587aa2a2e0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55587aa2a250 <col:28> col:31 'int'
|-CXXMethodDecl 0x55587aa2a458 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55587aa2a398 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa2a5a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55587aa2a510 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa2a668 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55587aa2a828 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55587aa2a718 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55587aa2a790 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa2aa78 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55587aa2a8e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55587aa2a960 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55587aa2ab28 <col:86> "" ""
|-CXXMethodDecl 0x55587aa2ad98 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55587aa2ac08 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55587aa2ac80 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa2af48 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55587aa2ae58 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55587aa2b0f8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55587aa2b000 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55587aa2b3c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55587aa2b1b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55587aa2b228 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55587aa2b2a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa2b6a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55587aa2b490 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55587aa2b508 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55587aa2b580 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55587aa2b760 <col:115> "" ""
|-AccessSpecDecl 0x55587aa2b7d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55587aa2b808 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587aa2bd10 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55587aa2bd10
| `-ParmVarDecl 0x55587aa2be18 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55587aa2beb8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55587aa2beb8
| `-ParmVarDecl 0x55587aa2bfc8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55587aa615f8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55587ac54400 <col:7>
|-CXXConstructorDecl 0x55587aa616d0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55587aa616d0
| `-ParmVarDecl 0x55587aa617e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55587aa61858 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55587aa61858
| `-ParmVarDecl 0x55587aa61968 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55587ac56e00 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac42fa8 prev 0x55587ac381b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587ac430a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55587ac43190 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55587ac432b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55587ac43438 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55587ac435b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55587ac43738 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55587ac54568 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55587ac54dd8 <col:11>
|-CXXDestructorDecl 0x55587ac54640 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55587ac54778 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55587ac54778
| `-ParmVarDecl 0x55587ac54888 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55587ac54928 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55587ac54928
| `-ParmVarDecl 0x55587ac54a38 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55587ac577f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55587ac57908 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55587ac57b88 <col:11>
|   `-ReturnStmt 0x55587ac57b78 <col:11>
|     `-UnaryOperator 0x55587ac57b60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55587ac57b50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55587ac57978 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55587ac57978
  `-ParmVarDecl 0x55587ac57a88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac437a0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587ac438b8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55587ac43958 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55587ac439c0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55587ac43a28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55587ac43a90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55587ac43af0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55587ac43bb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55587ac43c10 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55587ac43c70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55587ac54478 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55587ac43958 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55587ac54de8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55587ac54e40 <col:12>
|-CXXConstructorDecl 0x55587ac54aa8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55587ac54aa8
| `-ParmVarDecl 0x55587ac54bb8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55587ac54c58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55587ac54c58
| `-ParmVarDecl 0x55587ac54d68 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55587ac56ee0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac318c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55587ac319d8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55587ac31a68 <col:16, col:22> col:16 public
|-EnumDecl 0x55587ac31a90 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55587ac31b90 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55587ac31c70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac31b70 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55587ac31b50 <col:21> 'int' 28
| `-EnumConstantDecl 0x55587ac31c20 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55587ac31c88 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac31c00 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55587ac31be0 <col:22> 'int' 64
|-CXXMethodDecl 0x55587ac31fc8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55587ac31cb0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55587ac31d30 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55587ac31da8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55587ac31e20 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55587ac32088 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55587ac32288 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55587ac32100 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55587ac32178 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55587ac32338 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55587ac32498 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55587ac323a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55587ac32540 <col:72> warn_unused_result ""
|-TypedefDecl 0x55587ac328a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55587ac32830 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55587ac327d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55587ac32790 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55587a7084e0 'void'
|       |-PointerType 0x55587a9b1c60 'unsigned char *'
|       | `-BuiltinType 0x55587a7085e0 'unsigned char'
|       |-TypedefType 0x55587a7ae250 'size_t' sugar
|       | |-Typedef 0x55587a778be0 'size_t'
|       | `-BuiltinType 0x55587a708640 'unsigned long'
|       `-PointerType 0x55587a708ce0 'void *'
|         `-BuiltinType 0x55587a7084e0 'void'
|-CXXMethodDecl 0x55587ac32d18 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55587ac32910 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55587ac32988 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55587ac32a20 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55587ac32aa0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55587ac4d410 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55587ac4d3f8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55587ac4d3c0 <col:58> 'int' 0
| |-ParmVarDecl 0x55587ac32b20 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55587ac4d438 <col:76> 'int' 0
| |-ParmVarDecl 0x55587ac32ba0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55587ac4d458 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55587ac32de8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55587ac32e68 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55587ac32f28 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55587ac32fc8 <col:20>
| `-OptimizeNoneAttr 0x55587ac33020 <col:30>
|-CXXMethodDecl 0x55587ac33098 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55587ac33138 <col:20>
| `-OptimizeNoneAttr 0x55587ac33190 <col:30>
|-CXXMethodDecl 0x55587ac33208 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55587ac332a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55587ac33358 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55587ac333f8 <col:20>
| |-OptimizeNoneAttr 0x55587ac33450 <col:30>
| `-WarnUnusedResultAttr 0x55587ac33478 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55587ac334d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55587ac33570 <col:20>
| `-OptimizeNoneAttr 0x55587ac335c8 <col:30>
|-CXXMethodDecl 0x55587ac33618 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55587ac336b8 <col:20>
| `-OptimizeNoneAttr 0x55587ac33710 <col:30>
|-CXXMethodDecl 0x55587ac33758 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55587ac337f8 <col:20>
| `-OptimizeNoneAttr 0x55587ac33850 <col:30>
|-CXXMethodDecl 0x55587ac33898 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55587ac33958 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55587ac33a20 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55587ac33ae8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55587ac33ba8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55587ac33cc8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55587ac4d520 <col:54, line:99:5>
|   `-ReturnStmt 0x55587ac4d510 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55587ac4d4f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55587ac4d4c8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55587ac43fa8
|         `-CXXThisExpr 0x55587ac4d4b8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55587ac33e68 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55587ac33d78 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55587ac4d5d0 <col:67, line:103:5>
|   `-BinaryOperator 0x55587ac4d5b0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55587ac4d548 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55587ac43fa8
|     | `-CXXThisExpr 0x55587ac4d538 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55587ac4d598 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac4d578 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55587ac33d78 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55587ac33f60 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55587ac4d650 <col:33, line:107:5>
|   `-ReturnStmt 0x55587ac4d640 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55587ac4d628 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55587ac4d5f8 <col:16> 'void *' lvalue ->_destructor_argument 0x55587ac44010
|         `-CXXThisExpr 0x55587ac4d5e8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55587ac34020 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55587ac4dc80 <col:25, line:113:5>
|   |-ParenExpr 0x55587ac4d9c8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55587ac4d998 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac4d708 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55587ac4d6e0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55587ac4d6a8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55587ac4d678 <col:24> '<bound member function type>' ->shared 0x55587ac33098
|   |   |       `-ImplicitCastExpr 0x55587ac4d6c8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55587ac4d668 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55587ac4d768 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac4d748 <col:42> 'int' 0
|   |   `-CallExpr 0x55587ac4d8f8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55587ac4d8e0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac4d8c0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac4d938 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4d7d8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55587ac4d950 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4d800 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac4d968 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac4d838 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55587ac4d980 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac4d8a8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac4d890 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac4d858 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55587ac4dbc8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55587ac4d9f8 <col:2> 'unsigned char *' lvalue ->_head 0x55587ac43db0
|   | | `-CXXThisExpr 0x55587ac4d9e8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55587ac4dbb0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55587ac4db90 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55587ac4da38 <col:10> 'unsigned char *' lvalue ->_data 0x55587ac43e18
|   |     | `-CXXThisExpr 0x55587ac4da28 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55587ac4db78 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55587ac4db58 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55587ac4da78 <col:18> 'unsigned char *' lvalue ->_tail 0x55587ac43e80
|   |         | `-CXXThisExpr 0x55587ac4da68 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55587ac4db40 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55587ac4db20 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55587ac4dab8 <col:26> 'unsigned char *' lvalue ->_end 0x55587ac43ee8
|   |             | `-CXXThisExpr 0x55587ac4daa8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55587ac4db08 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55587ac4dae8 <col:33> 'int' 0
|   `-BinaryOperator 0x55587ac4dc60 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55587ac4dbf8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55587ac43fa8
|     | `-CXXThisExpr 0x55587ac4dbe8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55587ac4dc48 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55587ac4dc28 <col:16> 'int' 0
|-CXXMethodDecl 0x55587ac34160 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55587ac340d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55587ac34208 <col:20>
| |-OptimizeNoneAttr 0x55587ac34260 <col:30>
| `-WarnUnusedResultAttr 0x55587ac34288 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55587ac34358 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55587ac342c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55587ac34400 <col:20>
| |-OptimizeNoneAttr 0x55587ac34458 <col:30>
| `-WarnUnusedResultAttr 0x55587ac34480 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55587ac345b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55587ac344c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55587ac34660 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55587ac34760 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55587ac346d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55587ac34808 <col:20>
| `-OptimizeNoneAttr 0x55587ac34860 <col:30>
|-CXXMethodDecl 0x55587ac34928 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55587ac34898 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55587ac349d0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55587ac34ad0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55587ac34a40 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55587ac34b78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55587ac34c78 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55587ac34be8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55587ac34d20 <col:20>
| `-OptimizeNoneAttr 0x55587ac34d78 <col:30>
|-CXXMethodDecl 0x55587ac34f08 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55587ac34db8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55587ac34e30 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55587ac4d478 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55587ac34fb8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55587ac351b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55587ac35030 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55587ac350a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac353c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55587ac35278 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55587ac352f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac355d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55587ac35488 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55587ac35508 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55587ac4d488 <col:39> 'int' 0
|-CXXMethodDecl 0x55587ac356a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55587ac35770 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55587ac35838 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55587ac358f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55587ac359c0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55587ac35b08 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55587ac35a78 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55587ac35cd8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55587ac35bc8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55587ac35c40 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac35da8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55587ac35e68 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55587ac35f08 <col:20>
| `-OptimizeNoneAttr 0x55587ac35f60 <col:30>
|-CXXMethodDecl 0x55587ac35fb0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55587ac36050 <col:20>
| `-OptimizeNoneAttr 0x55587ac360a8 <col:30>
|-CXXMethodDecl 0x55587ac360f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55587ac361b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55587ac36280 <line:292:5, col:61> col:44 used network_length 'int () const'
| |-NoInlineAttr 0x55587ac36320 <col:20>
| `-OptimizeNoneAttr 0x55587ac36378 <col:30>
|-CXXMethodDecl 0x55587ac364c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55587ac363b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55587ac36430 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac36618 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55587ac36588 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac366f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55587ac367b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55587ac36850 <col:20>
| `-OptimizeNoneAttr 0x55587ac368a8 <col:30>
|-CXXMethodDecl 0x55587ac368f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55587ac36998 <col:20>
| `-OptimizeNoneAttr 0x55587ac369f0 <col:30>
|-CXXMethodDecl 0x55587ac36a40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55587ac36b08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55587ac36ba8 <col:20>
| `-OptimizeNoneAttr 0x55587ac36c00 <col:30>
|-CXXMethodDecl 0x55587ac36c48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55587ac36d68 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55587ac36ed8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55587ac36e18 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55587ac36fc8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55587ac37068 <col:20>
| `-OptimizeNoneAttr 0x55587ac370c0 <col:30>
|-CXXMethodDecl 0x55587ac37110 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55587ac371d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55587ac37408 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55587ac37280 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55587ac372f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55587ac374b8 <col:20>
| `-OptimizeNoneAttr 0x55587ac37510 <col:30>
|-CXXMethodDecl 0x55587ac375b8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55587ac37658 <col:20>
| `-OptimizeNoneAttr 0x55587ac376b0 <col:30>
|-CXXMethodDecl 0x55587ac37700 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55587ac377a0 <col:20>
| `-OptimizeNoneAttr 0x55587ac377f8 <col:30>
|-CXXMethodDecl 0x55587ac37840 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55587ac378e0 <col:20>
| `-OptimizeNoneAttr 0x55587ac37938 <col:30>
|-CXXMethodDecl 0x55587ac37a38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55587ac37970 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55587ac37ae0 <col:20>
| `-OptimizeNoneAttr 0x55587ac37b38 <col:30>
|-CXXMethodDecl 0x55587ac37cf8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55587ac37b70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55587ac37be8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55587ac37da8 <col:20>
| `-OptimizeNoneAttr 0x55587ac37e00 <col:30>
|-CXXMethodDecl 0x55587ac37ea8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55587ac37fc8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55587ac380e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55587ac38188 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55587ac381b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55587ac382d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55587ac38378 <col:20>
| `-OptimizeNoneAttr 0x55587ac383d0 <col:30>
|-CXXMethodDecl 0x55587ac38478 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55587ac38518 <col:20>
| `-OptimizeNoneAttr 0x55587ac38570 <col:30>
|-AccessSpecDecl 0x55587ac38598 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55587ac385c0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55587ac386c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55587ac38710 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac386a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55587ac38680 <col:14> 'int' 48
|-CXXMethodDecl 0x55587ac38778 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55587ac38818 <col:20>
| `-OptimizeNoneAttr 0x55587ac38870 <col:30>
|-CXXMethodDecl 0x55587ac388e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55587ac38988 <col:20>
| `-OptimizeNoneAttr 0x55587ac389e0 <col:30>
|-CXXMethodDecl 0x55587ac38aa8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55587ac38a18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55587ac38c48 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55587ac38de8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55587ac38cf8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55587ac38e90 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55587ac38f90 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55587ac39340 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac38f70 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55587ac38f50 <col:9> 'int' 0
| |-EnumConstantDecl 0x55587ac39020 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55587ac39358 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac39000 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55587ac38fe0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55587ac390b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55587ac39370 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac39090 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55587ac39070 <col:14> 'int' 2
| |-EnumConstantDecl 0x55587ac39140 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55587ac39388 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac39120 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55587ac39100 <col:14> 'int' 3
| |-EnumConstantDecl 0x55587ac391d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55587ac393a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac391b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55587ac39190 <col:13> 'int' 4
| |-EnumConstantDecl 0x55587ac39260 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55587ac393b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac39240 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55587ac39220 <col:13> 'int' 5
| `-EnumConstantDecl 0x55587ac392f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55587ac393d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac392d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55587ac392b0 <col:14> 'int' 6
|-CXXMethodDecl 0x55587ac39438 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55587ac394d8 <col:20>
| `-OptimizeNoneAttr 0x55587ac39530 <col:30>
|-CXXMethodDecl 0x55587ac39628 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55587ac39568 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55587ac396d0 <col:20>
| `-OptimizeNoneAttr 0x55587ac39728 <col:30>
|-CXXMethodDecl 0x55587ac39798 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55587ac398c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55587ac39a38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55587ac39970 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55587ac39b00 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55587ac39bc8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55587ac39d08 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55587ac39c78 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55587ac39db0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55587ac39eb0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55587ac3a0b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac39e90 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55587ac39e70 <col:23> 'int' 0
| |-EnumConstantDecl 0x55587ac39f40 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55587ac3a0c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac39f20 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55587ac39f00 <col:45> 'int' 4
| |-EnumConstantDecl 0x55587ac39fd0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55587ac3a0e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac39fb0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55587ac39f90 <col:24> 'int' 0
| `-EnumConstantDecl 0x55587ac3a060 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55587ac3a0f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac3a040 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55587ac3a020 <col:47> 'int' 16
|-CXXMethodDecl 0x55587ac3a158 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55587ac3a2c8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55587ac3a208 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55587ac3a370 <col:20>
| `-OptimizeNoneAttr 0x55587ac3a3c8 <col:30>
|-CXXMethodDecl 0x55587ac3a418 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55587ac4dda0 <col:18, col:36>
|   `-ReturnStmt 0x55587ac4dd90 <col:20, col:33>
|     `-ImplicitCastExpr 0x55587ac4dd78 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55587ac4dd58 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55587ac4dd28 <col:27> '<bound member function type>' ->xanno 0x55587ac38478
|           `-CXXThisExpr 0x55587ac4dd18 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55587ac3a510 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55587ac4deb0 <col:30, col:48>
|   `-ReturnStmt 0x55587ac4dea0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55587ac4de88 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55587ac4de68 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55587ac4de38 <col:39> '<bound member function type>' ->xanno 0x55587ac382d8
|           `-CXXThisExpr 0x55587ac4de28 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55587ac3a5f8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55587ac4e048 <col:24, col:50>
|   `-ReturnStmt 0x55587ac4e038 <col:26, col:47>
|     `-UnaryOperator 0x55587ac4e020 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55587ac4e000 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55587ac4dfe8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55587ac4df98 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55587ac432b8
|         |   `-CXXMemberCallExpr 0x55587ac4df78 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55587ac4df48 <col:34> '<bound member function type>' ->xanno 0x55587ac38478
|         |       `-CXXThisExpr 0x55587ac4df38 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55587ac4dfc8 <col:46> 'int' 0
|-CXXMethodDecl 0x55587ac3a700 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55587ac4e218 <col:36, col:62>
|   `-ReturnStmt 0x55587ac4e208 <col:38, col:59>
|     `-UnaryOperator 0x55587ac4e1f0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55587ac4e1d0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55587ac4e1b8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55587ac4e130 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55587ac432b8
|         |   `-CXXMemberCallExpr 0x55587ac4e110 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55587ac4e0e0 <col:46> '<bound member function type>' ->xanno 0x55587ac382d8
|         |       `-CXXThisExpr 0x55587ac4e0d0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55587ac4e160 <col:58> 'int' 0
|-CXXMethodDecl 0x55587ac3a818 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55587ac4e3b0 <col:26, col:53>
|   `-ReturnStmt 0x55587ac4e3a0 <col:28, col:50>
|     `-UnaryOperator 0x55587ac4e388 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55587ac4e368 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55587ac4e350 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55587ac4e300 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55587ac435b8
|         |   `-CXXMemberCallExpr 0x55587ac4e2e0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55587ac4e2b0 <col:36> '<bound member function type>' ->xanno 0x55587ac38478
|         |       `-CXXThisExpr 0x55587ac4e2a0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55587ac4e330 <col:49> 'int' 0
|-CXXMethodDecl 0x55587ac3a938 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55587ac4e588 <col:38, col:65>
|   `-ReturnStmt 0x55587ac4e578 <col:40, col:62>
|     `-UnaryOperator 0x55587ac4e560 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55587ac4e540 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55587ac4e528 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55587ac4e498 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55587ac435b8
|         |   `-CXXMemberCallExpr 0x55587ac4e478 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55587ac4e448 <col:48> '<bound member function type>' ->xanno 0x55587ac382d8
|         |       `-CXXThisExpr 0x55587ac4e438 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55587ac4e4c8 <col:61> 'int' 0
|-CXXMethodDecl 0x55587ac3aae8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55587ac3a9f0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55587ac4ec58 <col:34, line:463:5>
|   |-ParenExpr 0x55587ac4eaa0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55587ac4ea70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac4e6d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac4e6a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac4e5f8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac4e5e0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac4e5a0 <col:23> 'int' lvalue ParmVar 0x55587ac3a9f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac4e5c0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac4e688 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac4e658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac4e618 <col:33> 'int' lvalue ParmVar 0x55587ac3a9f0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55587ac4e670 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55587ac4e638 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55587ac4e738 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac4e718 <col:56> 'int' 0
|   |   `-CallExpr 0x55587ac4e9d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55587ac4e9b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac4e998 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac4ea10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4e828 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55587ac4ea28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4e858 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac4ea40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac4e890 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55587ac4ea58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac4e980 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac4e968 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac4e928 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55587ac4ec48 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55587ac4ec30 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55587ac4ec10 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55587ac4ebe0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55587ac4eb90 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55587ac432b8
|         |   `-CXXMemberCallExpr 0x55587ac4eb70 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55587ac4eb40 <col:9> '<bound member function type>' ->xanno 0x55587ac382d8
|         |       `-CXXThisExpr 0x55587ac4eb30 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55587ac4ebf8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55587ac4ebc0 <col:21> 'int' lvalue ParmVar 0x55587ac3a9f0 'i' 'int'
|-CXXMethodDecl 0x55587ac3ad38 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55587ac3aba8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55587ac3ac20 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55587ac4f2e8 <col:40, line:472:5>
|   |-ParenExpr 0x55587ac4f100 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55587ac4f0d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac4edb0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac4ed80 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac4ecd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac4ecb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac4ec78 <col:23> 'int' lvalue ParmVar 0x55587ac3aba8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac4ec98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac4ed60 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac4ed30 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac4ecf0 <col:33> 'int' lvalue ParmVar 0x55587ac3aba8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55587ac4ed48 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55587ac4ed10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55587ac4ee10 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac4edf0 <col:56> 'int' 0
|   |   `-CallExpr 0x55587ac4f030 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55587ac4f018 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac4eff8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac4f070 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4ee80 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55587ac4f088 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4eeb0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac4f0a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac4eee8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55587ac4f0b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac4efe0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac4efc8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac4ef88 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55587ac4f2c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55587ac4f270 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55587ac4f240 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55587ac4f1f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55587ac432b8
|     | |   `-CXXMemberCallExpr 0x55587ac4f1d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55587ac4f1a0 <col:2> '<bound member function type>' ->xanno 0x55587ac38478
|     | |       `-CXXThisExpr 0x55587ac4f190 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55587ac4f258 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55587ac4f220 <col:14> 'int' lvalue ParmVar 0x55587ac3aba8 'i' 'int'
|     `-ImplicitCastExpr 0x55587ac4f2b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac4f290 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55587ac3ac20 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55587ac3aef8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55587ac3ae00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55587ac4fa68 <col:36, line:485:5>
|   |-ParenExpr 0x55587ac4f7d0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac4f7a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac4f480 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac4f450 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac4f360 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac4f348 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac4f308 <col:23> 'int' lvalue ParmVar 0x55587ac3ae00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac4f328 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac4f430 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac4f418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac4f380 <col:33> 'int' lvalue ParmVar 0x55587ac3ae00 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac4f3f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac4f3e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac4f3a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac4f3c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55587ac4f4e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac4f4c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac4f700 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac4f6e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac4f6c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac4f740 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4f550 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55587ac4f758 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4f588 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac4f770 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac4f5c0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55587ac4f788 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac4f6b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac4f698 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac4f658 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55587ac4fa58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55587ac4fa40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55587ac4fa28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55587ac4f9f8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55587ac4f998 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55587ac4f968 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55587ac4f8e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55587ac43190
|             |   `-CXXMemberCallExpr 0x55587ac4f8c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55587ac4f890 <col:61> '<bound member function type>' ->xanno 0x55587ac382d8
|             |       `-CXXThisExpr 0x55587ac4f880 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55587ac4f980 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55587ac4f910 <col:74> 'int' lvalue ParmVar 0x55587ac3ae00 'i' 'int'
|-CXXMethodDecl 0x55587ac3b148 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55587ac3afb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55587ac3b030 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55587ac501b8 <col:42, line:500:5>
|   |-ParenExpr 0x55587ac4ff50 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac4ff20 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac4fc00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac4fbd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac4fae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac4fac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac4fa88 <col:23> 'int' lvalue ParmVar 0x55587ac3afb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac4faa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac4fbb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac4fb98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac4fb00 <col:33> 'int' lvalue ParmVar 0x55587ac3afb8 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac4fb78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac4fb60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac4fb20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac4fb40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55587ac4fc60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac4fc40 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac4fe80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac4fe68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac4fe48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac4fec0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4fcd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55587ac4fed8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac4fd08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac4fef0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac4fd40 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55587ac4ff08 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac4fe30 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac4fe18 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac4fdd8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55587ac50198 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55587ac50148 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55587ac50118 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55587ac500c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55587ac50090 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55587ac50040 <col:48, col:57> 'char [48]' lvalue ->c 0x55587ac43190
|     |     |   `-CXXMemberCallExpr 0x55587ac50020 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55587ac4fff0 <col:48> '<bound member function type>' ->xanno 0x55587ac38478
|     |     |       `-CXXThisExpr 0x55587ac4ffe0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55587ac500a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55587ac50070 <col:61> 'int' lvalue ParmVar 0x55587ac3afb8 'i' 'int'
|     `-ImplicitCastExpr 0x55587ac50180 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac50160 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55587ac3b030 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55587ac3b308 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55587ac3b210 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55587ac50918 <col:35, line:513:5>
|   |-ParenExpr 0x55587ac50628 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac505f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac50350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac50320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac50230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac50218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac501d8 <col:23> 'int' lvalue ParmVar 0x55587ac3b210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac501f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac50300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac502e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac50250 <col:33> 'int' lvalue ParmVar 0x55587ac3b210 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac502c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac502b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac50270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac50290 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55587ac503b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac50390 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac50558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac50540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac50520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac50598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac50420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55587ac505b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac50458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac505c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac50490 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55587ac505e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac50508 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac504f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac504b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55587ac50908 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55587ac508f0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55587ac508d8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55587ac508a8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55587ac50820 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55587ac507f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55587ac507a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55587ac43190
|             |   `-CXXMemberCallExpr 0x55587ac50780 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55587ac50750 <col:60> '<bound member function type>' ->xanno 0x55587ac382d8
|             |       `-CXXThisExpr 0x55587ac50740 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55587ac50808 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55587ac507d0 <col:73> 'int' lvalue ParmVar 0x55587ac3b210 'i' 'int'
|-CXXMethodDecl 0x55587ac3b558 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55587ac3b3c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55587ac3b440 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55587ac51038 <col:41, line:528:5>
|   |-ParenExpr 0x55587ac50dc0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac50d90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac50ab0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac50a80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac50990 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac50978 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac50938 <col:23> 'int' lvalue ParmVar 0x55587ac3b3c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac50958 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac50a60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac50a48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac509b0 <col:33> 'int' lvalue ParmVar 0x55587ac3b3c8 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac50a28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac50a10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac509d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac509f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55587ac50b10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac50af0 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac50cf0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac50cd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac50cb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac50d30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac50b80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55587ac50d48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac50bb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac50d60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac50bf0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55587ac50d78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac50ca0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac50c88 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac50c48 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55587ac51018 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55587ac50fc8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55587ac50f98 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55587ac50f40 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55587ac50f00 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55587ac50eb0 <col:47, col:56> 'char [48]' lvalue ->c 0x55587ac43190
|     |     |   `-CXXMemberCallExpr 0x55587ac50e90 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55587ac50e60 <col:47> '<bound member function type>' ->xanno 0x55587ac38478
|     |     |       `-CXXThisExpr 0x55587ac50e50 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55587ac50f18 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55587ac50ee0 <col:60> 'int' lvalue ParmVar 0x55587ac3b3c8 'i' 'int'
|     `-ImplicitCastExpr 0x55587ac51000 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac50fe0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55587ac3b440 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55587ac3b718 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55587ac3b620 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55587ac51708 <col:36, line:541:5>
|   |-ParenExpr 0x55587ac514a8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac51478 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac511d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac511a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac510b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac51098 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac51058 <col:23> 'int' lvalue ParmVar 0x55587ac3b620 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac51078 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac51180 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac51168 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac510d0 <col:33> 'int' lvalue ParmVar 0x55587ac3b620 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac51148 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac51130 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac510f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac51110 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55587ac51230 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac51210 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac513d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac513c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac513a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac51418 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac512a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55587ac51430 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac512d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac51448 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac51310 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55587ac51460 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac51388 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac51370 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac51330 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55587ac516f8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55587ac516e0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55587ac516c8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55587ac51698 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55587ac51640 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55587ac51610 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55587ac515c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55587ac43190
|             |   `-CXXMemberCallExpr 0x55587ac515a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55587ac51570 <col:61> '<bound member function type>' ->xanno 0x55587ac382d8
|             |       `-CXXThisExpr 0x55587ac51560 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55587ac51628 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55587ac515f0 <col:74> 'int' lvalue ParmVar 0x55587ac3b620 'i' 'int'
|-CXXMethodDecl 0x55587ac3b8e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55587ac3b7d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55587ac3b850 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55587ac3b998 <col:20>
| `-OptimizeNoneAttr 0x55587ac3b9f0 <col:30>
|-CXXMethodDecl 0x55587ac3bb28 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55587ac3ba30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55587ac51dd8 <col:35, line:562:5>
|   |-ParenExpr 0x55587ac51b78 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac51b48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac518a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac51870 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac51780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac51768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac51728 <col:23> 'int' lvalue ParmVar 0x55587ac3ba30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac51748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac51850 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac51838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac517a0 <col:33> 'int' lvalue ParmVar 0x55587ac3ba30 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac51818 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac51800 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac517c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac517e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55587ac51900 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac518e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac51aa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac51a90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac51a70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac51ae8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac51970 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55587ac51b00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac519a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac51b18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac519e0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55587ac51b30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac51a58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac51a40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac51a00 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55587ac51dc8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55587ac51db0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55587ac51d98 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55587ac51d68 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55587ac51d10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55587ac51ce0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55587ac51c90 <col:60, col:69> 'char const[48]' lvalue ->c 0x55587ac43190
|             |   `-CXXMemberCallExpr 0x55587ac51c70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55587ac51c40 <col:60> '<bound member function type>' ->xanno 0x55587ac382d8
|             |       `-CXXThisExpr 0x55587ac51c30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55587ac51cf8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55587ac51cc0 <col:73> 'int' lvalue ParmVar 0x55587ac3ba30 'i' 'int'
|-CXXMethodDecl 0x55587ac3bd38 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55587ac3bbe8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55587ac3bc60 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55587ac524b8 <col:41, line:577:5>
|   |-ParenExpr 0x55587ac52248 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac52218 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac51f70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac51f40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac51e50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac51e38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac51df8 <col:23> 'int' lvalue ParmVar 0x55587ac3bbe8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac51e18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac51f20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac51f08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac51e70 <col:33> 'int' lvalue ParmVar 0x55587ac3bbe8 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac51ee8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac51ed0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac51e90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac51eb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55587ac51fd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac51fb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac52178 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac52160 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac52140 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac521b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac52040 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55587ac521d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac52078 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac521e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac520b0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55587ac52200 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac52128 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac52110 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac520d0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55587ac52498 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55587ac52448 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55587ac52418 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55587ac523b8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55587ac52388 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55587ac52338 <col:47, col:56> 'char [48]' lvalue ->c 0x55587ac43190
|     |     |   `-CXXMemberCallExpr 0x55587ac52318 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55587ac522e8 <col:47> '<bound member function type>' ->xanno 0x55587ac38478
|     |     |       `-CXXThisExpr 0x55587ac522d8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55587ac523a0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55587ac52368 <col:60> 'int' lvalue ParmVar 0x55587ac3bbe8 'i' 'int'
|     `-ImplicitCastExpr 0x55587ac52480 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac52460 <col:65> 'int32_t':'int' lvalue ParmVar 0x55587ac3bc60 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55587ac3bef8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55587ac3be00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55587ac52be8 <col:36, line:591:5>
|   |-ParenExpr 0x55587ac52928 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac528f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac52650 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac52620 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac52530 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac52518 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac524d8 <col:23> 'int' lvalue ParmVar 0x55587ac3be00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac524f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac52600 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac525e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac52550 <col:33> 'int' lvalue ParmVar 0x55587ac3be00 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac525c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac525b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac52570 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac52590 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55587ac526b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac52690 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac52858 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac52840 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac52820 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac52898 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac52720 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55587ac528b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac52758 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac528c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac52790 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55587ac528e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac52808 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac527f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac527b0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55587ac52bd8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55587ac52bc0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55587ac52ba8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55587ac52b78 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55587ac52af0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55587ac52ac0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55587ac52a70 <col:61, col:70> 'char const[48]' lvalue ->c 0x55587ac43190
|             |   `-CXXMemberCallExpr 0x55587ac52a50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55587ac52a20 <col:61> '<bound member function type>' ->xanno 0x55587ac382d8
|             |       `-CXXThisExpr 0x55587ac52a10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55587ac52ad8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55587ac52aa0 <col:74> 'int' lvalue ParmVar 0x55587ac3be00 'i' 'int'
|-CXXMethodDecl 0x55587ac3c148 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55587ac3bfb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55587ac3c030 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55587ac532c8 <col:42, line:606:5>
|   |-ParenExpr 0x55587ac53058 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55587ac53028 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac52d80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac52d50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac52c60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac52c48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac52c08 <col:23> 'int' lvalue ParmVar 0x55587ac3bfb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac52c28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac52d30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55587ac52d18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac52c80 <col:33> 'int' lvalue ParmVar 0x55587ac3bfb8 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac52cf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac52ce0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac52ca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55587ac52cc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55587ac52de0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac52dc0 <col:60> 'int' 0
|   |   `-CallExpr 0x55587ac52f88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55587ac52f70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac52f50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac52fc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac52e50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55587ac52fe0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac52e88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac52ff8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac52ec0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55587ac53010 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac52f38 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac52f20 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac52ee0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55587ac532a8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55587ac53258 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55587ac53228 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55587ac531c8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55587ac53198 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55587ac53148 <col:48, col:57> 'char [48]' lvalue ->c 0x55587ac43190
|     |     |   `-CXXMemberCallExpr 0x55587ac53128 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55587ac530f8 <col:48> '<bound member function type>' ->xanno 0x55587ac38478
|     |     |       `-CXXThisExpr 0x55587ac530e8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55587ac531b0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55587ac53178 <col:61> 'int' lvalue ParmVar 0x55587ac3bfb8 'i' 'int'
|     `-ImplicitCastExpr 0x55587ac53290 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55587ac53270 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55587ac3c030 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55587ac3c2e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55587ac3c210 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55587ac53b38 <col:33, line:620:5>
|   |-ParenExpr 0x55587ac538b0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55587ac53880 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac534d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac534a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac53340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac53328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac532e8 <col:23> 'int' lvalue ParmVar 0x55587ac3c210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac53308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac53480 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55587ac53468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac53360 <col:33> 'int' lvalue ParmVar 0x55587ac3c210 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac53448 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac53430 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac53380 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55587ac53408 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55587ac533f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55587ac533b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55587ac53530 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac53510 <col:79> 'int' 0
|   |   `-CallExpr 0x55587ac537e0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55587ac537c8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac537a8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac53820 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac53618 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55587ac53838 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac53660 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac53850 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac53698 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55587ac53868 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac53790 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac53778 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac53738 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55587ac53b28 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55587ac53b10 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55587ac53af8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55587ac53ac8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55587ac53a40 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55587ac53a10 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55587ac539c0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55587ac43190
|             |   `-CXXMemberCallExpr 0x55587ac539a0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55587ac53970 <col:67> '<bound member function type>' ->xanno 0x55587ac382d8
|             |       `-CXXThisExpr 0x55587ac53960 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55587ac53a28 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55587ac539f0 <col:80> 'int' lvalue ParmVar 0x55587ac3c210 'i' 'int'
|-CXXMethodDecl 0x55587ac3c4f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55587ac3c3a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55587ac3c420 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55587ac54360 <col:45, line:635:5>
|   |-ParenExpr 0x55587ac540a8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55587ac54078 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55587ac53d40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55587ac53d10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55587ac53bb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55587ac53b98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55587ac53b58 <col:23> 'int' lvalue ParmVar 0x55587ac3c3a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55587ac53b78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55587ac53cf0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55587ac53cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55587ac53bd0 <col:33> 'int' lvalue ParmVar 0x55587ac3c3a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55587ac53cb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55587ac53ca0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55587ac53bf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55587ac386c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55587ac53c78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55587ac53c60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55587ac53c28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55587ac53da0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55587ac53d80 <col:79> 'int' 0
|   |   `-CallExpr 0x55587ac53fd8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55587ac53fc0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55587ac53fa0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55587a7a4fb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55587ac54018 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac53e10 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55587ac54030 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55587ac53e58 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55587ac54048 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55587ac53e90 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55587ac54060 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55587ac53f88 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55587ac53f70 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55587ac53f28 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55587ac54340 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55587ac542a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55587ac54278 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55587ac54218 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55587ac541e8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55587ac54198 <col:54, col:63> 'char [48]' lvalue ->c 0x55587ac43190
|     |     |   `-CXXMemberCallExpr 0x55587ac54178 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55587ac54148 <col:54> '<bound member function type>' ->xanno 0x55587ac38478
|     |     |       `-CXXThisExpr 0x55587ac54138 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55587ac54200 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55587ac541c8 <col:67> 'int' lvalue ParmVar 0x55587ac3c3a0 'i' 'int'
|     `-CXXConstCastExpr 0x55587ac54310 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55587ac542f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55587ac542c0 <col:91> 'const void *' lvalue ParmVar 0x55587ac3c420 'x' 'const void *'
|-CXXMethodDecl 0x55587ac3c5c8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55587ac543e8 <col:34, line:640:5>
|   `-ReturnStmt 0x55587ac543d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55587ac543c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55587ac54390 <col:16> 'Packet *' lvalue ->_data_packet 0x55587ac43d48
|         `-CXXThisExpr 0x55587ac54380 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55587ac3c708 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55587ac3c678 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55587ac4d4a8 <col:46> 'bool' true
|-CXXMethodDecl 0x55587ac3c888 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55587ac3c7c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55587ac3c930 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55587ac3d0e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55587ac3ca30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d150 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3ca10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55587ac3c9f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55587ac31b90 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55587ac3cac0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d168 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3caa0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55587ac3ca80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55587ac31c20 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55587ac3cb50 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d180 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3cb30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55587ac3cb10 <col:21> 'int' 0
| |-EnumConstantDecl 0x55587ac3cbe0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d198 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3cbc0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55587ac3cba0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55587ac3cc70 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d1b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3cc50 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55587ac3cc30 <col:21> 'int' 16
| |-EnumConstantDecl 0x55587ac3cd00 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d1c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3cce0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55587ac3ccc0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55587ac3cd90 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d1e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3cd70 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55587ac3cd50 <col:19> 'int' EnumConstant 0x55587ac3cbe0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55587ac3ce20 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d1f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3ce00 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55587ac3cde0 <col:19> 'int' EnumConstant 0x55587ac3cd00 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55587ac3cef0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d210 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3ced0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55587ac3ceb0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55587ac3ce70 <col:23> 'int' EnumConstant 0x55587ac3ce20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55587ac3ce90 <col:40> 'int' 2
| |-EnumConstantDecl 0x55587ac3cfc0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55587ac3d228 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ac3cfa0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55587ac3cf80 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55587ac3cf40 <col:23> 'int' EnumConstant 0x55587ac3ce20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55587ac3cf60 <col:40> 'int' 4
| `-EnumConstantDecl 0x55587ac3d090 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55587ac3d240 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55587ac3d070 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55587ac3d050 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55587ac3d010 <col:23> 'int' EnumConstant 0x55587ac3ce20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55587ac3d030 <col:40> 'int' 8
|-CXXMethodDecl 0x55587ac3d280 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55587ac3d320 <col:68> "" ""
|-CXXMethodDecl 0x55587ac3d3b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55587ac3d458 <col:45> "" ""
|-CXXMethodDecl 0x55587ac3d4f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55587ac3d590 <col:57> "" ""
|-CXXMethodDecl 0x55587ac3d628 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55587ac3d6c8 <col:45> "" ""
|-CXXMethodDecl 0x55587ac3d760 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55587ac3d800 <col:57> "" ""
|-CXXMethodDecl 0x55587ac3d890 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55587ac3d930 <col:51> "" ""
|-CXXMethodDecl 0x55587ac3d9c0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55587ac3da60 <col:63> "" ""
|-CXXMethodDecl 0x55587ac3daf0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55587ac3db90 <col:53> "" ""
|-CXXMethodDecl 0x55587ac3dc20 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55587ac3dcc0 <col:65> "" ""
|-CXXMethodDecl 0x55587ac3ddd8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55587ac3dd48 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55587ac3de80 <col:61> "" ""
|-CXXMethodDecl 0x55587ac3e018 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55587ac3df08 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55587ac3df80 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55587ac3e0c8 <col:67> "" ""
|-CXXMethodDecl 0x55587ac3e1e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55587ac3e150 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55587ac3e288 <col:63> "" ""
|-CXXMethodDecl 0x55587ac3e420 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55587ac3e310 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55587ac3e388 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55587ac3e4d0 <col:69> "" ""
|-CXXMethodDecl 0x55587ac3e5e8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55587ac3e558 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55587ac3e690 <col:63> "" ""
|-CXXMethodDecl 0x55587ac40d68 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55587ac40c58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55587ac40cd0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55587ac40e18 <col:69> "" ""
|-CXXMethodDecl 0x55587ac40f30 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55587ac40ea0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55587ac40fd8 <col:62> "" ""
|-CXXMethodDecl 0x55587ac41170 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55587ac41060 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55587ac410d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55587ac41220 <col:68> "" ""
|-CXXMethodDecl 0x55587ac41338 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55587ac412a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55587ac413e0 <col:63> "" ""
|-CXXMethodDecl 0x55587ac41578 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55587ac41468 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55587ac414e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55587ac41628 <col:69> "" ""
|-CXXMethodDecl 0x55587ac416b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55587ac41758 <col:64> "" ""
|-CXXMethodDecl 0x55587ac417e8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55587ac41888 <col:52> "" ""
|-CXXMethodDecl 0x55587ac41918 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55587ac419b8 <col:67> "" ""
|-CXXMethodDecl 0x55587ac41a48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55587ac41ae8 <col:55> "" ""
|-CXXMethodDecl 0x55587ac41c00 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55587ac41b70 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55587ac41ca8 <col:58> "" ""
|-CXXMethodDecl 0x55587ac41e40 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55587ac41d30 <col:33> col:36 'int'
| |-ParmVarDecl 0x55587ac41da8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55587ac41ef0 <col:62> "" ""
|-CXXMethodDecl 0x55587ac42008 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55587ac41f78 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55587ac420b0 <col:58> "" ""
|-CXXMethodDecl 0x55587ac42248 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55587ac42138 <col:33> col:36 'int'
| |-ParmVarDecl 0x55587ac421b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55587ac422f8 <col:62> "" ""
|-CXXMethodDecl 0x55587ac42410 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55587ac42380 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55587ac424b8 <col:60> "" ""
|-CXXMethodDecl 0x55587ac42650 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55587ac42540 <col:34> col:37 'int'
| |-ParmVarDecl 0x55587ac425b8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55587ac42700 <col:64> "" ""
|-CXXMethodDecl 0x55587ac42818 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55587ac42788 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55587ac428c0 <col:58> "" ""
|-CXXMethodDecl 0x55587ac42a58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55587ac42948 <col:33> col:36 'int'
| |-ParmVarDecl 0x55587ac429c0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55587ac42b08 <col:62> "" ""
|-CXXMethodDecl 0x55587ac42c20 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55587ac42b90 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55587ac42cc8 <col:59> "" ""
|-CXXMethodDecl 0x55587ac42e60 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55587ac42d50 <col:33> col:36 'int'
| |-ParmVarDecl 0x55587ac42dc8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55587ac42f10 <col:63> "" ""
|-AccessSpecDecl 0x55587ac42f80 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55587ac42fa8 prev 0x55587ac381b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55587ac430a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55587ac43190 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55587ac432b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55587ac43438 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55587ac435b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55587ac43738 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55587ac54568 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55587ac54dd8 <col:11>
| |-CXXDestructorDecl 0x55587ac54640 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55587ac54778 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55587ac54778
| | `-ParmVarDecl 0x55587ac54888 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55587ac54928 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55587ac54928
| | `-ParmVarDecl 0x55587ac54a38 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55587ac577f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55587ac57908 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55587ac57b88 <col:11>
| |   `-ReturnStmt 0x55587ac57b78 <col:11>
| |     `-UnaryOperator 0x55587ac57b60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55587ac57b50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55587ac57978 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55587ac57978
|   `-ParmVarDecl 0x55587ac57a88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55587ac437a0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55587ac438b8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55587ac43958 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55587ac439c0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55587ac43a28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55587ac43a90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55587ac43af0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55587ac43bb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55587ac43c10 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55587ac43c70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55587ac54478 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55587ac43958 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55587ac54de8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55587ac54e40 <col:12>
| |-CXXConstructorDecl 0x55587ac54aa8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55587ac54aa8
| | `-ParmVarDecl 0x55587ac54bb8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55587ac54c58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55587ac54c58
| | `-ParmVarDecl 0x55587ac54d68 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55587ac56ee0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55587ac43ce8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55587ac43d48 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55587ac43db0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55587ac43e18 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55587ac43e80 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55587ac43ee8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55587ac43f48 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55587ac43fa8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55587ac44010 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55587ac44098 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55587ac43ce8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55587ac54410 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55587ac43f48 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55587ac54e50 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55587ac54eb0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55587ac44238 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55587ac44178 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55587ac44330 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55587ac44518 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55587ac44420 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55587ac447e8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55587ac445d0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55587ac44648 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55587ac446c0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac44a08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55587ac448b8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55587ac44930 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55587ac4cfe8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55587ac44ac8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55587ac44b40 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55587ac44bb8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55587ac4d140 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55587ac4d0b0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac4d288 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55587ac4d1f8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55587ac4d380 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ac54f50 prev 0x55587ac31810 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55587ac55088 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55587ac55118 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55587ac551c0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55587ac55260 <col:20>
| `-OptimizeNoneAttr 0x55587ac552b8 <col:30>
|-CXXMethodDecl 0x55587ac55308 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55587ac553a8 <col:20>
| `-OptimizeNoneAttr 0x55587ac55400 <col:30>
|-CXXMethodDecl 0x55587ac55450 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55587ac55518 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55587ac555e0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55587ac556f8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55587ac557c0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55587ac55860 <col:20>
| `-OptimizeNoneAttr 0x55587ac558b8 <col:30>
|-CXXMethodDecl 0x55587ac55928 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55587ac559c8 <col:20>
| `-OptimizeNoneAttr 0x55587ac55a20 <col:30>
|-CXXMethodDecl 0x55587ac55ac8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55587ac55b68 <col:20>
| `-OptimizeNoneAttr 0x55587ac55bc0 <col:30>
|-CXXMethodDecl 0x55587ac55c10 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55587ac55d28 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55587ac55e48 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55587ac55f68 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55587ac56030 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55587ac560d0 <col:62> "" ""
|-AccessSpecDecl 0x55587ac56140 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55587ac561a0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55587ac56d98 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55587ac56fc0 <col:29, col:31>
|-CXXMethodDecl 0x55587ac56268 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55587ac563a8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55587ac56318 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55587ac564a0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55587ac56fd0 <col:23, col:25>
|-CXXMethodDecl 0x55587ac56658 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55587ac56590 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55587ac56928 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55587ac56710 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55587ac56788 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55587ac56800 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55587ac56ab8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55587ac569f0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55587ac56bb0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55587ac56c18 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55587ac56c18
  `-ParmVarDecl 0x55587ac56d28 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587a99f4e8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587a99f608 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55587a99f6d0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55587aa6fca0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55587aa74fb8 <col:8>
|-CXXConstructorDecl 0x55587aa6fda8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55587aa6fda8
| `-ParmVarDecl 0x55587aa6feb8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55587aa6ff58 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55587aa70068 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55587a99f6d0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55587aa751d0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55587aa751a0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55587a99f6d0
| |     `-CXXStaticCastExpr 0x55587aa75170 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55587aa75140 <col:8> 'in_addr' lvalue ParmVar 0x55587aa70068 '' 'in_addr &&'
| `-CompoundStmt 0x55587aa75218 <col:8>
`-CXXDestructorDecl 0x55587aa75450 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587aa67988 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55587aa67aa8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55587aa67b90 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55587aa67b70 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55587aa67b38 <col:22> 'int' 4
|-FieldDecl 0x55587aa67c38 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55587aa67c18 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55587aa67be0 <col:21> 'int' 4
|-FieldDecl 0x55587aa67c98 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55587aa67cf8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55587aa67d58 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55587aa67db8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55587aa67e18 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55587aa67e78 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55587aa67ed8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55587aa67f48 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55587aa67fb8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587abec9b8 prev 0x55587ac314a0 <../dummy_inc/clicknet/icmp.h:17:1, line:23:1> line:17:8 referenced struct click_icmp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55587abecab0 <col:1, col:8> col:8 implicit struct click_icmp
|-FieldDecl 0x55587abecb50 <line:18:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55587abecbb0 <line:19:5, col:13> col:13 referenced icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55587abecc10 <line:20:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55587abecc70 <line:21:5, col:14> col:14 padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ad40b30 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55587ad40c48 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55587ad40cd8 <col:16, col:22> col:16 public
|-EnumDecl 0x55587ad40d00 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55587ad40e00 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55587ad41050 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ad40de0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55587ad40dc0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55587ad40e90 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55587ad41068 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ad40e70 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55587ad40e50 <col:24> 'int' 22
| |-EnumConstantDecl 0x55587ad40f20 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55587ad41080 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ad40f00 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55587ad40ee0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55587ad40fb0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55587ad41098 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55587ad40f90 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55587ad40f70 <col:25> 'int' 95
| `-EnumConstantDecl 0x55587ad41000 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55587ad42a60 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55587ad42e98 <col:7>
|-CXXConstructorDecl 0x55587ad42b68 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55587ad42b68
| `-ParmVarDecl 0x55587ad42c78 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55587ad42d18 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55587ad42d18
| `-ParmVarDecl 0x55587ad42e28 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55587ad44f98 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55587ad410c8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55587ad41228 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55587ad412b8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55587ad412f0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55587a85e500 'uint32_t' sugar
|   |-Typedef 0x55587a7714c8 'uint32_t'
|   `-TypedefType 0x55587a74a5a0 '__uint32_t' sugar
|     |-Typedef 0x55587a74a198 '__uint32_t'
|     `-BuiltinType 0x55587a708620 'unsigned int'
|-CXXConstructorDecl 0x55587ad41438 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55587ad41360 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55587ad42968 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55587ad42ea8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55587ad42220 'base' 'int'
| | `-ImplicitCastExpr 0x55587ad42a08 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55587ad429c8 <col:16> 'int' lvalue ParmVar 0x55587ad41360 'b' 'int'
| `-CompoundStmt 0x55587ad42f18 <col:19, line:1046:5>
|-CXXMethodDecl 0x55587ad41980 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55587ad41500 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55587ad41580 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55587ad415f8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55587ad41678 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55587ad41780 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55587ad41800 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55587ad41dd8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55587ad41a50 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55587ad41d38 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55587ad41af8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55587ad41b98 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55587ad41c10 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55587ad42988 <col:82> 'const ArgContext' lvalue Var 0x55587ad364d8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55587ad43e48 <col:94, line:1067:5>
| |   |-DeclStmt 0x55587ad430a8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55587ad42f38 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55587ad43060 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55587ad432c8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55587ad430d8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55587ad432a0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55587ad43280 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55587ad43230 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55587ad43210 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55587ad431b8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55587ad43168 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55587ad43198 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55587ad431f8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55587ad431d8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55587ad43260 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55587ad43428 <line:1056:9, col:27>
| |   | `-VarDecl 0x55587ad433c0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55587ad43870 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55587ad437a0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55587ad43720 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55587ac284c8 0x55587aa71aa8 0x55587aa71780 0x55587aa61f50 0x55587aa61c00 0x55587aa614f0 0x55587aa33e60 0x55587a9c1330
| |   | | |-CallExpr 0x55587ad43660 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55587ad43450 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55587ad43500 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55587ad434d0 <col:19, col:23> '<bound member function type>' .begin 0x55587aa51158
| |   | | | |   `-DeclRefExpr 0x55587ad434b0 <col:19> 'const String' lvalue ParmVar 0x55587ad41af8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55587ad43570 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55587ad43540 <col:32, col:36> '<bound member function type>' .end 0x55587aa51370
| |   | | | |   `-DeclRefExpr 0x55587ad43520 <col:32> 'const String' lvalue ParmVar 0x55587ad41af8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55587ad43590 <col:43> 'const bool' lvalue Var 0x55587ad42f38 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55587ad435f8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55587ad435d8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55587ad43620 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55587ad433c0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55587ad43640 <col:73> 'const int' lvalue Var 0x55587ad430d8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55587ad43700 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55587ad436d0 <col:16, col:20> '<bound member function type>' .end 0x55587aa51370
| |   | |     `-DeclRefExpr 0x55587ad436b0 <col:16> 'const String' lvalue ParmVar 0x55587ad41af8 'str' 'const String &'
| |   | `-BinaryOperator 0x55587ad43850 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55587ad437e8 <col:13> 'int' lvalue ->status 0x55587ad42288
| |   |   | `-CXXThisExpr 0x55587ad437d8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55587ad43838 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55587ad43818 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40e90 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55587ad43ac0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55587ad439a8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55587ad43990 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55587ad43978 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55587ad43898 <col:13> 'int' lvalue ->status 0x55587ad42288
| |   | | |     `-CXXThisExpr 0x55587ad43888 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55587ad43958 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55587ad43928 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55587ad438d8 <col:23> 'int' lvalue ->status 0x55587ad42288
| |   | |   |   `-CXXThisExpr 0x55587ad438c8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55587ad43940 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55587ad43908 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40f20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55587ad43aa0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55587ad43a40 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55587ad439e8 <col:13, col:18> '<bound member function type>' .error 0x55587acea620
| |   |   | | `-DeclRefExpr 0x55587ad439c8 <col:13> 'const ArgContext' lvalue ParmVar 0x55587ad41c10 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55587ad43a68 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55587ad43a18 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55587ad43a90 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55587ad43a80 <col:20> 'bool' false
| |   |-DeclStmt 0x55587ad43c98 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55587ad43c40 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55587ad43bd0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55587ad43df8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55587ad43cb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55587a9f52f8
| |   | |-DeclRefExpr 0x55587ad43cf8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55587ad433c0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55587ad43dc8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55587ad43d40 <col:64> 'V' lvalue ParmVar 0x55587ad41b98 'result' 'V &'
| |   `-ReturnStmt 0x55587ad43e38 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55587ad43e28 <col:16> 'bool' true
| `-CXXMethodDecl 0x55587adceb78 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55587adce950 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55587adcea28 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55587adcea90 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55587add0910 <col:94, line:1067:5>
|     |-DeclStmt 0x55587adcf388 <line:1054:9, col:64>
|     | `-VarDecl 0x55587adcf1a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55587adcf318 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55587adcf2e8 <col:36, col:55> 'const bool' lvalue Var 0x55587a9e5268 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55587adcf568 <line:1055:9, col:91>
|     | `-VarDecl 0x55587adcf3a0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55587adcf4e8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55587adcf4d0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55587adcf4b0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55587adcf490 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55587adcf470 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55587adcf438 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55587adcf418 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55587ad43198 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55587adcf458 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55587ad431d8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55587ad43260 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55587adcf700 <line:1056:9, col:27>
|     | `-VarDecl 0x55587adcf698 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55587adcfb88 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55587adcfb30 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55587adcf9e8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55587adcf9b8 <col:13> '<bound member function type>' ->parse 0x55587ad41980
|     | | | | `-CXXThisExpr 0x55587adcf9a8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55587adcf848 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55587adcf818 <col:19, col:23> '<bound member function type>' .begin 0x55587aa51158
|     | | | |   `-DeclRefExpr 0x55587adcf7f8 <col:19> 'const String' lvalue ParmVar 0x55587adce950 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55587adcf8b8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55587adcf888 <col:32, col:36> '<bound member function type>' .end 0x55587aa51370
|     | | | |   `-DeclRefExpr 0x55587adcf868 <col:32> 'const String' lvalue ParmVar 0x55587adce950 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55587adcfa58 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55587adcfa38 <col:43> 'const bool' lvalue Var 0x55587adcf1a8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55587adcf940 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55587adcf928 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55587adcf908 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55587adcfa70 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55587adcf968 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55587adcf698 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55587adcfaa8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55587adcfa88 <col:73> 'const int' lvalue Var 0x55587adcf3a0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55587adcfb10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55587adcfae0 <col:16, col:20> '<bound member function type>' .end 0x55587aa51370
|     | |     `-DeclRefExpr 0x55587adcfac0 <col:16> 'const String' lvalue ParmVar 0x55587adce950 'str' 'const String &'
|     | `-BinaryOperator 0x55587adcfb68 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55587ad437e8 <col:13> 'int' lvalue ->status 0x55587ad42288
|     |   | `-CXXThisExpr 0x55587ad437d8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55587adcfb50 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55587ad43818 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40e90 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55587adcfd00 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55587adcfc20 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55587adcfc08 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55587adcfbf0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55587ad43898 <col:13> 'int' lvalue ->status 0x55587ad42288
|     | | |     `-CXXThisExpr 0x55587ad43888 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55587adcfbd0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55587adcfba0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55587ad438d8 <col:23> 'int' lvalue ->status 0x55587ad42288
|     | |   |   `-CXXThisExpr 0x55587ad438c8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55587adcfbb8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55587ad43908 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40f20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55587adcfce0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55587adcfc90 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55587adcfc60 <col:13, col:18> '<bound member function type>' .error 0x55587acea620
|     |   | | `-DeclRefExpr 0x55587adcfc40 <col:13> 'const ArgContext' lvalue ParmVar 0x55587adcea90 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55587adcfcb8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55587ad43a18 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55587adcfcd0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55587ad43a80 <col:20> 'bool' false
|     |-DeclStmt 0x55587add0248 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55587add01f0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55587add01a0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55587add0180 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55587add0110 'type'
|     |       `-ElaboratedType 0x55587add00c0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55587add00a0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55587a9e53c0 'unsigned_type'
|     |           `-BuiltinType 0x55587a708620 'unsigned int'
|     |-CallExpr 0x55587add08a0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55587add0888 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55587add0808 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55587add06e8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55587a9f52f8 'extract_integer')
|     | |-ImplicitCastExpr 0x55587add08e8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55587add08d0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55587add02a8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55587adcf698 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55587add0378 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55587add0328 <col:64> 'int':'int' lvalue ParmVar 0x55587adcea28 'result' 'int &'
|     `-ReturnStmt 0x55587add0900 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55587ad43e28 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55587ad42198 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55587ad41e48 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55587ad420f8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55587ad41ef8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55587ad41f98 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55587ad42010 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55587ad429a8 <col:71> 'const ArgContext' lvalue Var 0x55587ad364d8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55587ad445b8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55587ad43f10 <line:1071:9, col:12>
| |   | `-VarDecl 0x55587ad43ea8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55587ad44590 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55587ad441a0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55587ad44028 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55587ad43ff0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55587ad43f38 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55587ad43f90 <col:31> 'const String' lvalue ParmVar 0x55587ad41ef8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55587ad43fb0 <col:36> 'V' lvalue Var 0x55587ad43ea8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55587ad43fd0 <col:39> 'const ArgContext' lvalue ParmVar 0x55587ad42010 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55587ad44180 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55587ad44160 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55587ad44148 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55587ad44130 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55587ad44050 <col:17> 'int' lvalue ->status 0x55587ad42288
| |     |     |     `-CXXThisExpr 0x55587ad44040 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55587ad44110 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55587ad440e0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55587ad44090 <col:27> 'int' lvalue ->status 0x55587ad42288
| |     |       |   `-CXXThisExpr 0x55587ad44080 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55587ad440f8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55587ad440c0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40f20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55587ad441d0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55587ad441c0 <col:20> 'bool' false
| |     `-IfStmt 0x55587ad44568 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55587ad44270 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55587ad44240 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55587ad441f0 <col:18> 'int' lvalue ->status 0x55587ad42288
| |       | |   `-CXXThisExpr 0x55587ad441e0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55587ad44258 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55587ad44220 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40f20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55587ad444a8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55587ad44450 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55587ad442a0 <line:1076:13> '<bound member function type>' ->range_error 0x55587ad42898
| |       | | | `-CXXThisExpr 0x55587ad44290 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55587ad442d0 <col:25> 'const ArgContext' lvalue ParmVar 0x55587ad42010 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55587ad443b0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55587ad44428 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55587ad44408 <col:43> 'V' lvalue Var 0x55587ad43ea8 'x' 'V'
| |       | `-ReturnStmt 0x55587ad44498 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55587ad44488 <col:20> 'bool' false
| |       `-CompoundStmt 0x55587ad44548 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55587ad44508 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55587ad444c8 <col:13> 'V' lvalue ParmVar 0x55587ad41f98 'result' 'V &'
| |         | `-DeclRefExpr 0x55587ad444e8 <col:22> 'V' lvalue Var 0x55587ad43ea8 'x' 'V'
| |         `-ReturnStmt 0x55587ad44538 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55587ad44528 <col:20> 'bool' true
| `-CXXMethodDecl 0x55587ad86448 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55587ad86228 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55587ad862f8 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55587ad86360 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55587adcf188 <col:83, line:1083:5>
|     |-DeclStmt 0x55587adce7c0 <line:1071:9, col:12>
|     | `-VarDecl 0x55587adce758 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55587adcf160 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55587adcedf0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55587adced18 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55587adcece0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55587adcec98 <col:14> '<bound member function type>' ->parse_saturating 0x55587adceb78
|       | |   | `-CXXThisExpr 0x55587adcec88 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55587adce830 <col:31> 'const String' lvalue ParmVar 0x55587ad86228 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55587adce850 <col:36> 'int':'int' lvalue Var 0x55587adce758 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55587adce870 <col:39> 'const ArgContext' lvalue ParmVar 0x55587ad86360 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55587adcedd0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55587adcedb0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55587adced98 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55587adced80 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55587ad44050 <col:17> 'int' lvalue ->status 0x55587ad42288
|       |     |     `-CXXThisExpr 0x55587ad44040 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55587adced60 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55587adced30 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55587ad44090 <col:27> 'int' lvalue ->status 0x55587ad42288
|       |       |   `-CXXThisExpr 0x55587ad44080 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55587adced48 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55587ad440c0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40f20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55587adcee10 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55587ad441c0 <col:20> 'bool' false
|       `-IfStmt 0x55587adcf138 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55587adcee50 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55587adcee20 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55587ad441f0 <col:18> 'int' lvalue ->status 0x55587ad42288
|         | |   `-CXXThisExpr 0x55587ad441e0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55587adcee38 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55587ad44220 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55587ad40f20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55587adcf070 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55587adcefe0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55587ad442a0 <line:1076:13> '<bound member function type>' ->range_error 0x55587ad42898
|         | | | `-CXXThisExpr 0x55587ad44290 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55587adcee70 <col:25> 'const ArgContext' lvalue ParmVar 0x55587ad86360 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55587adcf048 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55587adcf018 <col:31, col:50> 'const bool' lvalue Var 0x55587a9e5268 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55587adcefb8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55587adcefa0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55587adcef88 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55587adcef68 <col:43> 'int':'int' lvalue Var 0x55587adce758 'x' 'int':'int'
|         | `-ReturnStmt 0x55587adcf060 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55587ad44488 <col:20> 'bool' false
|         `-CompoundStmt 0x55587adcf118 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55587adcf0e8 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55587adcf090 <col:13> 'int':'int' lvalue ParmVar 0x55587ad862f8 'result' 'int &'
|           | `-ImplicitCastExpr 0x55587adcf0d0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55587adcf0b0 <col:22> 'int':'int' lvalue Var 0x55587adce758 'x' 'int':'int'
|           `-ReturnStmt 0x55587adcf108 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55587ad44528 <col:20> 'bool' true
|-FieldDecl 0x55587ad42220 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55587ad42288 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55587ad422d8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55587ad42590 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55587ad42318 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55587ad42398 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55587ad42410 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55587ad42490 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55587ad42898 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55587ad42660 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55587ad426d8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55587ad42770 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55587ad44e18 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55587ad44e18
| `-ParmVarDecl 0x55587ad44f28 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55587ad450a8 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55587ad450a8
| `-ParmVarDecl 0x55587ad451b8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55587ad85fa8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55587adf2a28 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55587adf2e28 prev 0x55587adf2a28 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55587adf3020 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55587adf2f28 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55587adf3f68 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55587adf31a0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55587adf3f28 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55587adf3ee8 <col:20> 'String *' lvalue ParmVar 0x55587adf2f28 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55587adf3200 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55587adf3fc8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55587ad36300 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55587adf30e0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55587ad0b430 Slot::store 'void ()' ]
| `-CompoundStmt 0x55587adf4688 <col:22, line:857:9>
|   `-CallExpr 0x55587adf4640 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55587adf4628 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55587adf45a8 <col:13> 'void (String &, const String &)' lvalue Function 0x55587adf4488 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55587a9ca9c8 'assign_consume')
|     |-UnaryOperator 0x55587adf4158 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55587adf4140 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55587adf4110 <col:29> 'String *' lvalue ->_ptr 0x55587adf31a0
|     |     `-CXXThisExpr 0x55587adf4100 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55587adf4670 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55587adf4180 <col:35> 'String':'String' lvalue ->_slot 0x55587adf3200
|         `-CXXThisExpr 0x55587adf4170 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55587adf31a0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55587adf3200 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55587adf3278 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55587adf3278
| `-ParmVarDecl 0x55587adf3388 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55587adf3428 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55587adf3428
| `-ParmVarDecl 0x55587adf3538 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55587adf35d8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55587adf35d8
| `-ParmVarDecl 0x55587adf36e8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55587adf3758 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55587adf3758
| `-ParmVarDecl 0x55587adf3868 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55587adf38f0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55587ad0b330 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55587adf4030 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
