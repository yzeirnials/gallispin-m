
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b152578 prev 0x55860b149dc8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860b152670 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55860b152700 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55860b152778 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55860b152838 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55860b152900 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55860b152a78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55860b1529b0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55860b152b20 <col:24>
| `-OptimizeNoneAttr 0x55860b152b78 <col:34>
|-CXXMethodDecl 0x55860b152bc0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55860b152e78 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55860b152c70 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55860b152ce8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55860b152d68 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55860b152f30 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55860b152f68 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55860b152fd0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55860b153058 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55860b153378 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55860b153110 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55860b153188 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55860b153200 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55860b153280 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55860b153490 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55860b159d88 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55860b159d88
| `-ParmVarDecl 0x55860b159e98 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55860b159f38 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55860b159f38
| `-ParmVarDecl 0x55860b15a048 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55860b168f08 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b145810 prev 0x55860b1455b0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860b145908 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55860b145998 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55860b1459f8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55860b145ae8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55860b145be8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55860b145db8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55860b145c68 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55860b145ce0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55860b145f48 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55860b145e80 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55860b145ff0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55860b146128 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55860b146060 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55860b1462c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55860b146208 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55860b146468 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55860b1463a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55860b146510 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55860b146610 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55860b1466f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b1465f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55860b1465d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55860b1466a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55860b146708 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b146680 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55860b146660 <col:44> 'int' 2
|-CXXMethodDecl 0x55860b146850 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55860b146738 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55860b1467b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55860b1469a8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55860b146918 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55860b146bb8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55860b146a68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55860b146ae0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55860b146c68 <col:20>
| `-OptimizeNoneAttr 0x55860b146cc0 <col:30>
|-CXXMethodDecl 0x55860b146dc8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55860b146d00 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55860b146e70 <col:20>
| `-OptimizeNoneAttr 0x55860b146ec8 <col:30>
|-CXXMethodDecl 0x55860b146f18 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55860b146fe0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55860b1470c8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55860b147150 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55860b1471d8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55860b147260 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55860b1472e8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55860b147378 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55860b147438 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55860b1474c0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55860b147548 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55860b1475d0 <line:65:5, col:36> col:23 used PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55860b147658 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55860b1476e0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55860b147770 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55860b147830 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55860b1478c0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55860b147a10 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55860b147978 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55860b147ba0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55860b147ad0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55860b147e40 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55860b147c58 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55860b147cd8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55860b147d58 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55860b147ef8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55860b148000 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860b148290 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b147fe0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55860b147fc0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55860b148090 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860b1482a8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b148070 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55860b148050 <col:32> 'int' 20
| |-EnumConstantDecl 0x55860b148120 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860b1482c0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b148100 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55860b1480e0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55860b1481b0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55860b1482d8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b148190 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55860b148170 <col:35> 'int' 100
| `-EnumConstantDecl 0x55860b148240 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55860b1482f0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b148220 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55860b148200 <col:32> 'int' 2000
|-CXXMethodDecl 0x55860b148330 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55860b148640 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55860b1484b0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55860b148528 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860b148710 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55860b148890 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55860b1487c0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860b148a98 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55860b148948 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55860b1489c0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860b148b98 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55860b148c38 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55860b148d00 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860b148d90 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55860b148fc0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b148d70 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55860b148d50 <col:36> 'int' EnumConstant 0x55860b148d00 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860b148de0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860b148e30 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860b148e80 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860b148ed0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55860b148f20 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55860b148f70 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55860b1490a8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55860b148fe8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55860b149170 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55860b149230 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55860b1492f0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55860b1493b0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55860b149498 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55860b149560 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55860b1496e0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55860b149610 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55860b149808 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55860b149a08 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55860b1498b8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55860b149938 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55860b156258 <col:54, line:127:5>
|   |-ParenExpr 0x55860b156108 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55860b1560d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55860b155dc0 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55860b155d98 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55860b155d80 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55860b155d68 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55860b155d38 <col:31> 'Router *' lvalue ->_router 0x55860b153c50
|   |   |         `-CXXThisExpr 0x55860b155d28 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55860b155e20 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b155e00 <col:48> 'int' 0
|   |   `-CallExpr 0x55860b156038 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55860b156020 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b156000 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b156078 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b155e90 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55860b156090 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b155eb0 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55860b1560a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b155ee8 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55860b1560c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b155fe8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b155fd0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b155f88 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55860b1561a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55860b156138 <col:9> 'Router *' lvalue ->_router 0x55860b153c50
|   | | `-CXXThisExpr 0x55860b156128 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55860b156188 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55860b156168 <col:19> 'Router *' lvalue ParmVar 0x55860b1498b8 'r' 'Router *'
|   `-BinaryOperator 0x55860b156238 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55860b1561d0 <col:9> 'int' lvalue ->_eindex 0x55860b153cb8
|     | `-CXXThisExpr 0x55860b1561c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55860b156220 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55860b156200 <col:19> 'int' lvalue ParmVar 0x55860b149938 'eindex' 'int'
|-CXXMethodDecl 0x55860b149b90 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55860b149ac8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55860b149c60 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55860b149d28 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55860b149dc8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55860b14a018 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55860b149e90 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55860b149f10 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55860b14a0c8 <col:20>
| `-OptimizeNoneAttr 0x55860b14a120 <col:30>
|-CXXMethodDecl 0x55860b14a228 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55860b14a160 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55860b14a2d0 <col:20>
| `-OptimizeNoneAttr 0x55860b14a328 <col:30>
|-CXXMethodDecl 0x55860b14a3f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55860b14a368 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55860b14a4a0 <col:20>
| `-OptimizeNoneAttr 0x55860b14a4f8 <col:30>
|-CXXMethodDecl 0x55860b14a688 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55860b14a530 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55860b14a5b0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55860b14a818 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55860b14a750 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55860b14a968 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55860b14a8d8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55860b14aab8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55860b14aa28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55860b14ac08 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55860b14ab78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55860b14aec8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55860b14acc0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55860b14ad40 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55860b14ade8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55860b14afa0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55860b14b060 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55860b14b330 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55860b14b1e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55860b14b258 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55860b14b458 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55860b14b630 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55860b14b510 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55860b14b590 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55860b14b818 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55860b14b6f8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55860b14b778 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55860b14bbd8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55860b14b920 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55860b14b998 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55860b14ba18 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55860b155838 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55860b155818 <col:106> 'int' 0
| `-ParmVarDecl 0x55860b14ba90 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860b155870 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860b155850 <col:126> 'int' 0
|-CXXMethodDecl 0x55860b14bf58 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860b14bca8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55860b14bd20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55860b14bda0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55860b14be18 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860b1558a8 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860b155888 <col:114> 'int' 0
|-CXXMethodDecl 0x55860b14c2e8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860b14c030 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55860b14c0a8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55860b14c128 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55860b1558c0 <col:96> 'int' 0
| `-ParmVarDecl 0x55860b14c1a0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860b155900 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860b1558e0 <col:116> 'int' 0
|-CXXMethodDecl 0x55860b14c668 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55860b14c3b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55860b14c430 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b14c4b0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55860b155938 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55860b155918 <col:109> 'int' 0
| `-ParmVarDecl 0x55860b14c528 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860b155970 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860b155950 <col:129> 'int' 0
|-CXXMethodDecl 0x55860b14c9e8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860b14c738 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55860b14c7b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b14c830 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55860b14c8a8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860b1559a8 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860b155988 <col:117> 'int' 0
|-CXXMethodDecl 0x55860b14cd78 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55860b14cac0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14cb38 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b14cbb8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55860b1559c0 <col:99> 'int' 0
| `-ParmVarDecl 0x55860b14cc30 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55860b155a00 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55860b1559e0 <col:119> 'int' 0
|-CXXMethodDecl 0x55860b14d198 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55860b14ce48 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55860b14cec8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55860b14cf40 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b14cfc0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55860b155a38 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55860b155a18 <col:108> 'int' 0
| `-ParmVarDecl 0x55860b14d040 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55860b155a70 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55860b155a50 <col:141> 'int' 0
|-CXXMethodDecl 0x55860b14d5b8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55860b14d270 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55860b14d2f0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55860b14d368 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b14d3e8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55860b14d468 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55860b155a88 <col:121> 'int' 0
|-CXXMethodDecl 0x55860b14d9e8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55860b14d698 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55860b14d718 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55860b14d790 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b14d810 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55860b155aa8 <col:98> 'int' 0
| `-ParmVarDecl 0x55860b14d890 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55860b155ac8 <col:123> 'int' 0
|-CXXMethodDecl 0x55860b14dcb0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55860b14dac0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55860b14db40 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55860b14dbc0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55860b155ae8 <col:80> 'int' 0
|-EnumDecl 0x55860b14dd68 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55860b14de70 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860b14e100 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b14de50 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55860b14de30 <col:42> 'int' 1
| |-EnumConstantDecl 0x55860b14df00 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860b14e118 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b14dee0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55860b14dec0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55860b14df90 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860b14e130 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b14df70 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55860b14df50 <col:44> 'int' 4
| |-EnumConstantDecl 0x55860b14e020 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55860b14e148 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b14e000 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55860b14dfe0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55860b14e0b0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55860b14e160 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b14e090 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55860b14e070 <col:34> 'int' 6
|-CXXMethodDecl 0x55860b14e418 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55860b14e188 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55860b14e228 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55860b14e2a8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55860b14e320 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55860b155ba0 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55860b155b88 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55860b155b70 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55860b155b50 <col:98, col:105> 'String' (CXXTemporary 0x55860b155b50)
|           `-CXXTemporaryObjectExpr 0x55860b155b18 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55860b14e6b8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55860b14e4e8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55860b14e560 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55860b14e5d8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55860b155c50 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55860b155c38 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55860b155c20 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55860b155c00 <col:94, col:101> 'String' (CXXTemporary 0x55860b155c00)
| |         `-CXXTemporaryObjectExpr 0x55860b155bc8 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55860b156440 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55860b1563b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55860b156388 <col:9> '<bound member function type>' ->add_task_handlers 0x55860b14e418
|     | `-CXXThisExpr 0x55860b156378 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55860b1563f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860b1562f8 <col:27> 'Task *' lvalue ParmVar 0x55860b14e4e8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55860b156410 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860b156318 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55860b14e560 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55860b156428 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55860b156338 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55860b14e0b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55860b156358 <col:62> 'const String' lvalue ParmVar 0x55860b14e5d8 'prefix' 'const String &'
|-CXXMethodDecl 0x55860b14e8c8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55860b14e780 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55860b14e7f8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55860b155d00 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55860b155ce8 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55860b155cd0 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55860b155cb0 <col:70, col:77> 'String' (CXXTemporary 0x55860b155cb0)
| |         `-CXXTemporaryObjectExpr 0x55860b155c78 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55860b156618 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55860b156590 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55860b156560 <col:9> '<bound member function type>' ->add_task_handlers 0x55860b14e418
|     | `-CXXThisExpr 0x55860b156550 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55860b1565d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860b1564d0 <col:27> 'Task *' lvalue ParmVar 0x55860b14e780 'task' 'Task *'
|     |-ImplicitCastExpr 0x55860b1565e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55860b1564f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55860b156600 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55860b156510 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55860b14e0b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55860b156530 <col:57> 'const String' lvalue ParmVar 0x55860b14e7f8 'prefix' 'const String &'
|-CXXMethodDecl 0x55860b14eba8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55860b14e990 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14ea10 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14ea88 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55860b14ee58 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55860b14ec78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14ecf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14ed78 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55860b14f148 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55860b14ef28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14efa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14f020 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55860b14f3f8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55860b14f218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14f298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14f318 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55860b14f6a8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55860b14f4c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14f548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14f5c8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55860b14f958 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55860b14f778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14f7f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14f870 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55860b14fc08 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55860b14fa28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14faa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14fb28 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55860b14feb8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55860b14fcd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b14fd58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b14fdd8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55860b150168 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55860b14ff88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b150008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b150088 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55860b150418 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55860b150238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b1502b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b150338 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55860b150680 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55860b1504e8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55860b150568 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55860b1505e0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55860b150928 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55860b150750 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55860b1507d0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55860b150848 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55860b150bd8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55860b1509f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b150a78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b150af8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55860b150e88 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55860b150ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b150d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b150da0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55860b151138 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55860b150f58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b150fd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b151050 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55860b1513e8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55860b151208 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b151288 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55860b151300 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55860b151718 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55860b1514b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55860b151538 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55860b1515b0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55860b151628 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860b155d18 <col:93> 'bool' false
|-CXXMethodDecl 0x55860b151900 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55860b1517e8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55860b151868 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55860b151ad8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55860b1519c0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55860b151a40 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55860b151db8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55860b151b98 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55860b151c10 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55860b151c90 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55860b151d08 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55860b1520a8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55860b151e88 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55860b151f00 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55860b151f80 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55860b151ff8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55860b1522e0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55860b152180 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55860b152200 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55860b1524c8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55860b1523a8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55860b152428 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55860b152578 prev 0x55860b149dc8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860b152670 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55860b152700 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55860b152778 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55860b152838 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55860b152900 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55860b152a78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55860b1529b0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55860b152b20 <col:24>
| | `-OptimizeNoneAttr 0x55860b152b78 <col:34>
| |-CXXMethodDecl 0x55860b152bc0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55860b152e78 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55860b152c70 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55860b152ce8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55860b152d68 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55860b152f30 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55860b152f68 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55860b152fd0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55860b153058 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55860b153378 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55860b153110 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55860b153188 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55860b153200 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55860b153280 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55860b153490 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55860b159d88 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55860b159d88
| | `-ParmVarDecl 0x55860b159e98 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55860b159f38 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55860b159f38
| | `-ParmVarDecl 0x55860b15a048 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55860b168f08 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55860b153508 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55860b1535a8 <col:38> "" ""
|-CXXMethodDecl 0x55860b153638 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55860b1536d8 <col:44> "" ""
|-AccessSpecDecl 0x55860b153748 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55860b153770 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55860b153870 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55860b1538c0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b153850 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55860b153830 <col:27> 'int' 4
|-FieldDecl 0x55860b153988 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55860b153b38 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55860b153bf0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55860b153c50 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55860b153cb8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55860b153e08 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55860b153d48 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55860b153fb8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55860b153ec8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55860b154198 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55860b154078 <col:20> col:23 'int'
| `-ParmVarDecl 0x55860b1540f8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55860b154440 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55860b154260 <col:23> col:26 'int'
| |-ParmVarDecl 0x55860b1542e0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55860b154358 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55860b1544f8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55860b1545c0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55860b154610 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55860b154660 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55860b154840 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55860b1546f0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55860b154768 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860b154ae8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55860b154908 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55860b154988 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55860b154a00 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55860b154d08 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55860b154bb8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55860b154c38 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55860b155040 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55860b154dc8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55860b154e48 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55860b154ec0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55860b154f40 <col:57> col:60 'int'
|-CXXMethodDecl 0x55860b155228 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55860b155110 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55860b155190 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55860b155378 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55860b1552e8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55860b1556f8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55860b155438 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55860b1554b8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55860b155530 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55860b1555b0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55860b1557d8 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class TCPBuffer
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class TCPBuffer::TCPBufferElt * _chain
       120 |   unsigned int _initial_seq
       124 |   unsigned int _first_seq
       128 |   _Bool _start_push
       129 |   _Bool _start_pull
       130 |   _Bool _skip
           | [sizeof=136, dsize=131, align=8,
           |  nvsize=131, nvalign=8]

*** Dumping AST Record Layout
         0 | class TCPBuffer::TCPBufferElt
         0 |   class Packet * _packet
         8 |   class TCPBuffer::TCPBufferElt ** _chain_ptr
        16 |   class TCPBuffer::TCPBufferElt * _next
        24 |   class TCPBuffer::TCPBufferElt * _prev
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ae531e0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860ae532f8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55860ae53388 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55860ae53458 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55860ae53540 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55860ae53758 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55860ae53600 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae53908 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55860ae53810 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55860ae53a50 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55860ae539c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55860ae53b98 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55860ae53b08 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae53ce0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55860ae53c50 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae53da8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55860ae53ef0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55860ae53e60 <col:28> col:31 'int'
|-CXXMethodDecl 0x55860ae53fb8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55860ae54100 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55860ae54070 <col:28> col:31 'int'
|-CXXMethodDecl 0x55860ae54278 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55860ae541b8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae543c0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55860ae54330 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae54488 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55860ae54648 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55860ae54538 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860ae545b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae54898 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55860ae54708 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860ae54780 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860ae54948 <col:86> "" ""
|-CXXMethodDecl 0x55860ae54bb8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55860ae54a28 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55860ae54aa0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae54d68 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55860ae54c78 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55860ae54f18 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55860ae54e20 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55860ae551e8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55860ae54fd0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55860ae55048 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860ae550c0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae554c8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55860ae552b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55860ae55328 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860ae553a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860ae55580 <col:115> "" ""
|-AccessSpecDecl 0x55860ae555f0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55860ae55628 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860ae55ad8 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55860ae55ad8
| `-ParmVarDecl 0x55860ae55be8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55860ae55c88 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55860ae55c88
| `-ParmVarDecl 0x55860ae55d98 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55860ae8ca88 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860b116bd0 <col:7>
|-CXXConstructorDecl 0x55860ae8cb60 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55860ae8cb60
| `-ParmVarDecl 0x55860ae8cc78 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55860ae8cce8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55860ae8cce8
| `-ParmVarDecl 0x55860ae8cdf8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55860b1195d0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b0ff8d8 prev 0x55860b0f6fe0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860b0ff9d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55860b0ffac0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55860b0ffb70 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55860b0ffcf8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55860b0ffe78 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55860b0ffff8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55860b116d38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860b117638 <col:11>
|-CXXDestructorDecl 0x55860b116ea0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55860b116fd8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55860b116fd8
| `-ParmVarDecl 0x55860b1170e8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55860b117188 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860b117188
| `-ParmVarDecl 0x55860b117298 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55860b119fc8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55860b11a0d8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55860b11a358 <col:11>
|   `-ReturnStmt 0x55860b11a348 <col:11>
|     `-UnaryOperator 0x55860b11a330 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860b11a320 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55860b11a148 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860b11a148
  `-ParmVarDecl 0x55860b11a258 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b100060 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860b100178 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55860b100218 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55860b100280 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55860b1002e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55860b100350 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55860b1003b0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55860b100470 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55860b1004d0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55860b100530 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55860b116c48 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55860b100218 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55860b117648 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55860b1176a0 <col:12>
|-CXXConstructorDecl 0x55860b117308 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55860b117308
| `-ParmVarDecl 0x55860b117418 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55860b1174b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55860b1174b8
| `-ParmVarDecl 0x55860b1175c8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55860b1196b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b0f06d0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860b0f07e8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55860b0f0878 <col:16, col:22> col:16 public
|-EnumDecl 0x55860b0f08a0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55860b0f09a0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55860b0f0a80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f0980 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55860b0f0960 <col:21> 'int' 28
| `-EnumConstantDecl 0x55860b0f0a30 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55860b0f0a98 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b0f0a10 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55860b0f09f0 <col:22> 'int' 64
|-CXXMethodDecl 0x55860b0f0e38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55860b0f0ac0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860b0f0b40 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55860b0f0c20 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860b0f0c98 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860b0f0ef8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f10f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55860b0f0f70 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55860b0f0fe8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860b0f11a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f1308 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55860b0f1218 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860b0f13b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55860b0f16e0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55860b0f1670 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55860b0f1610 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55860b0f15d0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55860ab334e0 'void'
|       |-PointerType 0x55860ae073a0 'unsigned char *'
|       | `-BuiltinType 0x55860ab335e0 'unsigned char'
|       |-TypedefType 0x55860abd80b0 'size_t' sugar
|       | |-Typedef 0x55860aba3be0 'size_t'
|       | `-BuiltinType 0x55860ab33640 'unsigned long'
|       `-PointerType 0x55860ab33ce0 'void *'
|         `-BuiltinType 0x55860ab334e0 'void'
|-CXXMethodDecl 0x55860b0f1b58 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55860b0f1750 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55860b0f17c8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860b0f1860 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55860b0f18e0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55860b10fc60 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55860b10fc48 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55860b10fc10 <col:58> 'int' 0
| |-ParmVarDecl 0x55860b0f1960 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55860b10fc88 <col:76> 'int' 0
| |-ParmVarDecl 0x55860b0f19e0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55860b10fca8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55860b0f1c28 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f1ca8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55860b0f1d68 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55860b0f1e08 <col:20>
| `-OptimizeNoneAttr 0x55860b0f1e60 <col:30>
|-CXXMethodDecl 0x55860b0f1ed8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55860b0f1f78 <col:20>
| `-OptimizeNoneAttr 0x55860b0f1fd0 <col:30>
|-CXXMethodDecl 0x55860b0f2048 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55860b0f20e8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f2198 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55860b0f2238 <col:20>
| |-OptimizeNoneAttr 0x55860b0f2290 <col:30>
| `-WarnUnusedResultAttr 0x55860b0f22b8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f2310 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55860b0f23b0 <col:20>
| `-OptimizeNoneAttr 0x55860b0f2408 <col:30>
|-CXXMethodDecl 0x55860b0f2458 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55860b0f24f8 <col:20>
| `-OptimizeNoneAttr 0x55860b0f2550 <col:30>
|-CXXMethodDecl 0x55860b0f2598 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55860b0f2638 <col:20>
| `-OptimizeNoneAttr 0x55860b0f2690 <col:30>
|-CXXMethodDecl 0x55860b0f26d8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55860b0f2798 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55860b0f2860 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55860b0f2928 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55860b0f29e8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860b0f2b08 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55860b10fd70 <col:54, line:99:5>
|   `-ReturnStmt 0x55860b10fd60 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55860b10fd48 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55860b10fd18 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55860b100868
|         `-CXXThisExpr 0x55860b10fd08 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55860b0f2ca8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55860b0f2bb8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55860b10fe20 <col:67, line:103:5>
|   `-BinaryOperator 0x55860b10fe00 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55860b10fd98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55860b100868
|     | `-CXXThisExpr 0x55860b10fd88 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55860b10fde8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55860b10fdc8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55860b0f2bb8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55860b0f2da0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55860b10fea0 <col:33, line:107:5>
|   `-ReturnStmt 0x55860b10fe90 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55860b10fe78 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55860b10fe48 <col:16> 'void *' lvalue ->_destructor_argument 0x55860b1008d0
|         `-CXXThisExpr 0x55860b10fe38 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55860b0f2e60 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55860b1104d0 <col:25, line:113:5>
|   |-ParenExpr 0x55860b110218 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55860b1101e8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55860b10ff58 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55860b10ff30 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55860b10fef8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55860b10fec8 <col:24> '<bound member function type>' ->shared 0x55860b0f1ed8
|   |   |       `-ImplicitCastExpr 0x55860b10ff18 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55860b10feb8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55860b10ffb8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b10ff98 <col:42> 'int' 0
|   |   `-CallExpr 0x55860b110148 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55860b110130 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b110110 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b110188 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b110028 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55860b1101a0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b110050 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b1101b8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b110088 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55860b1101d0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b1100f8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b1100e0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b1100a8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55860b110418 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55860b110248 <col:2> 'unsigned char *' lvalue ->_head 0x55860b100670
|   | | `-CXXThisExpr 0x55860b110238 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55860b110400 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55860b1103e0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55860b110288 <col:10> 'unsigned char *' lvalue ->_data 0x55860b1006d8
|   |     | `-CXXThisExpr 0x55860b110278 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55860b1103c8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55860b1103a8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55860b1102c8 <col:18> 'unsigned char *' lvalue ->_tail 0x55860b100740
|   |         | `-CXXThisExpr 0x55860b1102b8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55860b110390 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55860b110370 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55860b110308 <col:26> 'unsigned char *' lvalue ->_end 0x55860b1007a8
|   |             | `-CXXThisExpr 0x55860b1102f8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55860b110358 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55860b110338 <col:33> 'int' 0
|   `-BinaryOperator 0x55860b1104b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55860b110448 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55860b100868
|     | `-CXXThisExpr 0x55860b110438 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55860b110498 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55860b110478 <col:16> 'int' 0
|-CXXMethodDecl 0x55860b0f2fa0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55860b0f2f10 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860b0f3048 <col:20>
| |-OptimizeNoneAttr 0x55860b0f30a0 <col:30>
| `-WarnUnusedResultAttr 0x55860b0f30c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f3198 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55860b0f3108 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860b0f3240 <col:20>
| |-OptimizeNoneAttr 0x55860b0f3298 <col:30>
| `-WarnUnusedResultAttr 0x55860b0f32c0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f33f8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55860b0f3300 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860b0f34a0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f35a0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55860b0f3510 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860b0f3648 <col:20>
| `-OptimizeNoneAttr 0x55860b0f36a0 <col:30>
|-CXXMethodDecl 0x55860b0f3768 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55860b0f36d8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860b0f3810 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f3910 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55860b0f3880 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55860b0f39b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f3ab8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55860b0f3a28 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860b0f3b60 <col:20>
| `-OptimizeNoneAttr 0x55860b0f3bb8 <col:30>
|-CXXMethodDecl 0x55860b0f3d48 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55860b0f3bf8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55860b0f3c70 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55860b10fcc8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55860b0f3df8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55860b0f3ff8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55860b0f3e70 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55860b0f3ee8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860b0f4208 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55860b0f40b8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860b0f4130 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860b0f4418 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55860b0f42c8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55860b0f4348 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55860b10fcd8 <col:39> 'int' 0
|-CXXMethodDecl 0x55860b0f44e8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55860b0f45b0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55860b0f4678 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860b0f4738 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860b0f4800 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55860b0f4948 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55860b0f48b8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55860b0f4b18 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55860b0f4a08 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55860b0f4a80 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860b0f4be8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55860b0f4ca8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55860b0f4d48 <col:20>
| `-OptimizeNoneAttr 0x55860b0f4da0 <col:30>
|-CXXMethodDecl 0x55860b0f4df0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55860b0f4e90 <col:20>
| `-OptimizeNoneAttr 0x55860b0f4ee8 <col:30>
|-CXXMethodDecl 0x55860b0f4f38 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860b0f4ff8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860b0f50c0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55860b0f5160 <col:20>
| `-OptimizeNoneAttr 0x55860b0f51b8 <col:30>
|-CXXMethodDecl 0x55860b0f5308 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55860b0f51f8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55860b0f5270 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860b0f5458 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55860b0f53c8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860b0f5520 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55860b0f55e0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55860b0f5680 <col:20>
| `-OptimizeNoneAttr 0x55860b0f56d8 <col:30>
|-CXXMethodDecl 0x55860b0f5728 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55860b0f57c8 <col:20>
| `-OptimizeNoneAttr 0x55860b0f5820 <col:30>
|-CXXMethodDecl 0x55860b0f5870 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860b0f5938 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55860b0f59d8 <col:20>
| `-OptimizeNoneAttr 0x55860b0f5a30 <col:30>
|-CXXMethodDecl 0x55860b0f5a78 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55860b0f5b98 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55860b0f5d08 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55860b0f5c48 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55860b0f5df8 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55860b0f5e98 <col:20>
| `-OptimizeNoneAttr 0x55860b0f5ef0 <col:30>
|-CXXMethodDecl 0x55860b0f5f40 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55860b0f6000 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55860b0f6238 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55860b0f60b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55860b0f6128 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860b0f62e8 <col:20>
| `-OptimizeNoneAttr 0x55860b0f6340 <col:30>
|-CXXMethodDecl 0x55860b0f63e8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55860b0f6488 <col:20>
| `-OptimizeNoneAttr 0x55860b0f64e0 <col:30>
|-CXXMethodDecl 0x55860b0f6530 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55860b0f65d0 <col:20>
| `-OptimizeNoneAttr 0x55860b0f6628 <col:30>
|-CXXMethodDecl 0x55860b0f6670 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55860b0f6710 <col:20>
| `-OptimizeNoneAttr 0x55860b0f6768 <col:30>
|-CXXMethodDecl 0x55860b0f6868 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55860b0f67a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55860b0f6910 <col:20>
| `-OptimizeNoneAttr 0x55860b0f6968 <col:30>
|-CXXMethodDecl 0x55860b0f6b28 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55860b0f69a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55860b0f6a18 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860b0f6bd8 <col:20>
| `-OptimizeNoneAttr 0x55860b0f6c30 <col:30>
|-CXXMethodDecl 0x55860b0f6cd8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55860b0f6df8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55860b0f6f18 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55860b0f6fb8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55860b0f6fe0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55860b0f7108 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55860b0f71a8 <col:20>
| `-OptimizeNoneAttr 0x55860b0f7200 <col:30>
|-CXXMethodDecl 0x55860b0f72a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55860b0f7348 <col:20>
| `-OptimizeNoneAttr 0x55860b0f73a0 <col:30>
|-AccessSpecDecl 0x55860b0f73c8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55860b0f73f0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55860b0f74f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55860b0f7540 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b0f74d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55860b0f74b0 <col:14> 'int' 48
|-CXXMethodDecl 0x55860b0f75a8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55860b0f7648 <col:20>
| `-OptimizeNoneAttr 0x55860b0f76a0 <col:30>
|-CXXMethodDecl 0x55860b0f7718 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55860b0f77b8 <col:20>
| `-OptimizeNoneAttr 0x55860b0f7810 <col:30>
|-CXXMethodDecl 0x55860b0f78d8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55860b0f7848 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55860b0f7a78 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55860b0f7c18 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55860b0f7b28 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55860b0f7cc0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55860b0f7dc0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860b0f8170 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f7da0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55860b0f7d80 <col:9> 'int' 0
| |-EnumConstantDecl 0x55860b0f7e50 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860b0f8188 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f7e30 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55860b0f7e10 <col:14> 'int' 1
| |-EnumConstantDecl 0x55860b0f7ee0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860b0f81a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f7ec0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55860b0f7ea0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55860b0f7f70 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860b0f81b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f7f50 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55860b0f7f30 <col:14> 'int' 3
| |-EnumConstantDecl 0x55860b0f8000 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860b0f81d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f7fe0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55860b0f7fc0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55860b0f8090 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55860b0f81e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f8070 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55860b0f8050 <col:13> 'int' 5
| `-EnumConstantDecl 0x55860b0f8120 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55860b0f8200 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b0f8100 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55860b0f80e0 <col:14> 'int' 6
|-CXXMethodDecl 0x55860b0f8268 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55860b0f8308 <col:20>
| `-OptimizeNoneAttr 0x55860b0f8360 <col:30>
|-CXXMethodDecl 0x55860b0f8458 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55860b0f8398 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55860b0f8500 <col:20>
| `-OptimizeNoneAttr 0x55860b0f8558 <col:30>
|-CXXMethodDecl 0x55860b0f85c8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55860b0f86f0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55860b0f8868 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55860b0f87a0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55860b0f8930 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55860b0f89f8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55860b0f8b38 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55860b0f8aa8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55860b0f8c30 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55860b0f8d30 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55860b0f8f30 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f8d10 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55860b0f8cf0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55860b0f8dc0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55860b0f8f48 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f8da0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55860b0f8d80 <col:45> 'int' 4
| |-EnumConstantDecl 0x55860b0f8e50 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55860b0f8f60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0f8e30 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55860b0f8e10 <col:24> 'int' 0
| `-EnumConstantDecl 0x55860b0f8ee0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55860b0f8f78 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b0f8ec0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55860b0f8ea0 <col:47> 'int' 16
|-CXXMethodDecl 0x55860b0f8fd8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55860b0f9148 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55860b0f9088 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55860b0f91f0 <col:20>
| `-OptimizeNoneAttr 0x55860b0f9248 <col:30>
|-CXXMethodDecl 0x55860b0f9298 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55860b1105f0 <col:18, col:36>
|   `-ReturnStmt 0x55860b1105e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55860b1105c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55860b1105a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55860b110578 <col:27> '<bound member function type>' ->xanno 0x55860b0f72a8
|           `-CXXThisExpr 0x55860b110568 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55860b0f9390 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55860b110700 <col:30, col:48>
|   `-ReturnStmt 0x55860b1106f0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55860b1106d8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55860b1106b8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55860b110688 <col:39> '<bound member function type>' ->xanno 0x55860b0f7108
|           `-CXXThisExpr 0x55860b110678 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55860b0f9478 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55860b110898 <col:24, col:50>
|   `-ReturnStmt 0x55860b110888 <col:26, col:47>
|     `-UnaryOperator 0x55860b110870 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860b110850 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55860b110838 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860b1107e8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55860b0ffb70
|         |   `-CXXMemberCallExpr 0x55860b1107c8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55860b110798 <col:34> '<bound member function type>' ->xanno 0x55860b0f72a8
|         |       `-CXXThisExpr 0x55860b110788 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55860b110818 <col:46> 'int' 0
|-CXXMethodDecl 0x55860b0f9568 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55860b110a30 <col:36, col:62>
|   `-ReturnStmt 0x55860b110a20 <col:38, col:59>
|     `-UnaryOperator 0x55860b110a08 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860b1109e8 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55860b1109d0 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860b110980 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55860b0ffb70
|         |   `-CXXMemberCallExpr 0x55860b110960 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55860b110930 <col:46> '<bound member function type>' ->xanno 0x55860b0f7108
|         |       `-CXXThisExpr 0x55860b110920 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55860b1109b0 <col:58> 'int' 0
|-CXXMethodDecl 0x55860b0f9688 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55860b110bc8 <col:26, col:53>
|   `-ReturnStmt 0x55860b110bb8 <col:28, col:50>
|     `-UnaryOperator 0x55860b110ba0 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860b110b80 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55860b110b68 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860b110b18 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55860b0ffe78
|         |   `-CXXMemberCallExpr 0x55860b110af8 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55860b110ac8 <col:36> '<bound member function type>' ->xanno 0x55860b0f72a8
|         |       `-CXXThisExpr 0x55860b110ab8 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55860b110b48 <col:49> 'int' 0
|-CXXMethodDecl 0x55860b0f97a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55860b110d98 <col:38, col:65>
|   `-ReturnStmt 0x55860b110d88 <col:40, col:62>
|     `-UnaryOperator 0x55860b110d70 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55860b110d50 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55860b110d38 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860b110cb0 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55860b0ffe78
|         |   `-CXXMemberCallExpr 0x55860b110c90 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55860b110c60 <col:48> '<bound member function type>' ->xanno 0x55860b0f7108
|         |       `-CXXThisExpr 0x55860b110c50 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55860b110ce0 <col:61> 'int' 0
|-CXXMethodDecl 0x55860b0f9958 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55860b0f9860 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55860b111468 <col:34, line:463:5>
|   |-ParenExpr 0x55860b1112b0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55860b111280 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55860b110ee8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b110eb8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b110e08 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b110df0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b110db0 <col:23> 'int' lvalue ParmVar 0x55860b0f9860 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b110dd0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b110e98 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b110e68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b110e28 <col:33> 'int' lvalue ParmVar 0x55860b0f9860 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55860b110e80 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55860b110e48 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55860b110f48 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b110f28 <col:56> 'int' 0
|   |   `-CallExpr 0x55860b1111e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55860b1111c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b1111a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b111220 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b111038 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55860b111238 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b111068 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b111250 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b1110a0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55860b111268 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b111190 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b111178 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b111138 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55860b111458 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55860b111440 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55860b111420 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55860b1113f0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55860b1113a0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55860b0ffb70
|         |   `-CXXMemberCallExpr 0x55860b111380 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55860b111350 <col:9> '<bound member function type>' ->xanno 0x55860b0f7108
|         |       `-CXXThisExpr 0x55860b111340 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55860b111408 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55860b1113d0 <col:21> 'int' lvalue ParmVar 0x55860b0f9860 'i' 'int'
|-CXXMethodDecl 0x55860b0f9ba8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55860b0f9a18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55860b0f9a90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55860b111af8 <col:40, line:472:5>
|   |-ParenExpr 0x55860b111910 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55860b1118e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55860b1115c0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b111590 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b1114e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b1114c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b111488 <col:23> 'int' lvalue ParmVar 0x55860b0f9a18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b1114a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b111570 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b111540 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b111500 <col:33> 'int' lvalue ParmVar 0x55860b0f9a18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55860b111558 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55860b111520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55860b111620 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b111600 <col:56> 'int' 0
|   |   `-CallExpr 0x55860b111840 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55860b111828 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b111808 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b111880 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b111690 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55860b111898 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b1116c0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b1118b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b1116f8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55860b1118c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b1117f0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b1117d8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b111798 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55860b111ad8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55860b111a80 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55860b111a50 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55860b111a00 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55860b0ffb70
|     | |   `-CXXMemberCallExpr 0x55860b1119e0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55860b1119b0 <col:2> '<bound member function type>' ->xanno 0x55860b0f72a8
|     | |       `-CXXThisExpr 0x55860b1119a0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55860b111a68 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55860b111a30 <col:14> 'int' lvalue ParmVar 0x55860b0f9a18 'i' 'int'
|     `-ImplicitCastExpr 0x55860b111ac0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55860b111aa0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55860b0f9a90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55860b0f9d68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55860b0f9c70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55860b112278 <col:36, line:485:5>
|   |-ParenExpr 0x55860b111fe0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b111fb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b111c90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b111c60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b111b70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b111b58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b111b18 <col:23> 'int' lvalue ParmVar 0x55860b0f9c70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b111b38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b111c40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b111c28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b111b90 <col:33> 'int' lvalue ParmVar 0x55860b0f9c70 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b111c08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b111bf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b111bb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b111bd0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860b111cf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b111cd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b111f10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b111ef8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b111ed8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b111f50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b111d60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860b111f68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b111d98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b111f80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b111dd0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55860b111f98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b111ec0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b111ea8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b111e68 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55860b112268 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55860b112250 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55860b112238 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860b112208 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55860b1121a8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860b112178 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860b1120f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55860b0ffac0
|             |   `-CXXMemberCallExpr 0x55860b1120d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860b1120a0 <col:61> '<bound member function type>' ->xanno 0x55860b0f7108
|             |       `-CXXThisExpr 0x55860b112090 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860b112190 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860b112120 <col:74> 'int' lvalue ParmVar 0x55860b0f9c70 'i' 'int'
|-CXXMethodDecl 0x55860b0f9fb8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55860b0f9e28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860b0f9ea0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55860b1129c8 <col:42, line:500:5>
|   |-ParenExpr 0x55860b112760 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b112730 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b112410 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b1123e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b1122f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b1122d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b112298 <col:23> 'int' lvalue ParmVar 0x55860b0f9e28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b1122b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b1123c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b1123a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b112310 <col:33> 'int' lvalue ParmVar 0x55860b0f9e28 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b112388 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b112370 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b112330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b112350 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860b112470 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b112450 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b112690 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b112678 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b112658 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b1126d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b1124e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860b1126e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b112518 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b112700 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b112550 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55860b112718 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b112640 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b112628 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b1125e8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55860b1129a8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55860b112958 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860b112928 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55860b1128d0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860b1128a0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860b112850 <col:48, col:57> 'char [48]' lvalue ->c 0x55860b0ffac0
|     |     |   `-CXXMemberCallExpr 0x55860b112830 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860b112800 <col:48> '<bound member function type>' ->xanno 0x55860b0f72a8
|     |     |       `-CXXThisExpr 0x55860b1127f0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860b1128b8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860b112880 <col:61> 'int' lvalue ParmVar 0x55860b0f9e28 'i' 'int'
|     `-ImplicitCastExpr 0x55860b112990 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55860b112970 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55860b0f9ea0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55860b0fa178 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55860b0fa080 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55860b113128 <col:35, line:513:5>
|   |-ParenExpr 0x55860b112e38 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b112e08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b112b60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b112b30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b112a40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b112a28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b1129e8 <col:23> 'int' lvalue ParmVar 0x55860b0fa080 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b112a08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b112b10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b112af8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b112a60 <col:33> 'int' lvalue ParmVar 0x55860b0fa080 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b112ad8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b112ac0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b112a80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b112aa0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860b112bc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b112ba0 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b112d68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b112d50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b112d30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b112da8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b112c30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860b112dc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b112c68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b112dd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b112ca0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55860b112df0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b112d18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b112d00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b112cc0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55860b113118 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55860b113100 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55860b1130e8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860b1130b8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55860b113030 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860b113000 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860b112fb0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55860b0ffac0
|             |   `-CXXMemberCallExpr 0x55860b112f90 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860b112f60 <col:60> '<bound member function type>' ->xanno 0x55860b0f7108
|             |       `-CXXThisExpr 0x55860b112f50 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860b113018 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860b112fe0 <col:73> 'int' lvalue ParmVar 0x55860b0fa080 'i' 'int'
|-CXXMethodDecl 0x55860b0fa3c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55860b0fa238 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860b0fa2b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55860b113808 <col:41, line:528:5>
|   |-ParenExpr 0x55860b113598 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b113568 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b1132c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b113290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b1131a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b113188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b113148 <col:23> 'int' lvalue ParmVar 0x55860b0fa238 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b113168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b113270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b113258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b1131c0 <col:33> 'int' lvalue ParmVar 0x55860b0fa238 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b113238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b113220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b1131e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b113200 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55860b113320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b113300 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b1134c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b1134b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b113490 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b113508 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b113390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55860b113520 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b1133c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b113538 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b113400 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55860b113550 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b113478 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b113460 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b113420 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55860b1137e8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55860b113798 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860b113768 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55860b113708 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860b1136d8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860b113688 <col:47, col:56> 'char [48]' lvalue ->c 0x55860b0ffac0
|     |     |   `-CXXMemberCallExpr 0x55860b113668 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860b113638 <col:47> '<bound member function type>' ->xanno 0x55860b0f72a8
|     |     |       `-CXXThisExpr 0x55860b113628 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860b1136f0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860b1136b8 <col:60> 'int' lvalue ParmVar 0x55860b0fa238 'i' 'int'
|     `-ImplicitCastExpr 0x55860b1137d0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55860b1137b0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55860b0fa2b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55860b0fa588 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55860b0fa490 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55860b113ed8 <col:36, line:541:5>
|   |-ParenExpr 0x55860b113c78 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b113c48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b1139a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b113970 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b113880 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b113868 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b113828 <col:23> 'int' lvalue ParmVar 0x55860b0fa490 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b113848 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b113950 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b113938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b1138a0 <col:33> 'int' lvalue ParmVar 0x55860b0fa490 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b113918 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b113900 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b1138c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b1138e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55860b113a00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b1139e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b113ba8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b113b90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b113b70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b113be8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b113a70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55860b113c00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b113aa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b113c18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b113ae0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55860b113c30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b113b58 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b113b40 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b113b00 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55860b113ec8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55860b113eb0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55860b113e98 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860b113e68 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55860b113e10 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860b113de0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860b113d90 <col:61, col:70> 'char const[48]' lvalue ->c 0x55860b0ffac0
|             |   `-CXXMemberCallExpr 0x55860b113d70 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860b113d40 <col:61> '<bound member function type>' ->xanno 0x55860b0f7108
|             |       `-CXXThisExpr 0x55860b113d30 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860b113df8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860b113dc0 <col:74> 'int' lvalue ParmVar 0x55860b0fa490 'i' 'int'
|-CXXMethodDecl 0x55860b0fa758 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55860b0fa648 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55860b0fa6c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55860b0fa808 <col:20>
| `-OptimizeNoneAttr 0x55860b0fa860 <col:30>
|-CXXMethodDecl 0x55860b0fa998 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55860b0fa8a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55860b1145a8 <col:35, line:562:5>
|   |-ParenExpr 0x55860b114348 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b114318 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b114070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b114040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b113f50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b113f38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b113ef8 <col:23> 'int' lvalue ParmVar 0x55860b0fa8a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b113f18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b114020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b114008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b113f70 <col:33> 'int' lvalue ParmVar 0x55860b0fa8a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b113fe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b113fd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b113f90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b113fb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55860b1140d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b1140b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b114278 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b114260 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b114240 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b1142b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b114140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55860b1142d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b114178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b1142e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b1141b0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55860b114300 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b114228 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b114210 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b1141d0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55860b114598 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55860b114580 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55860b114568 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860b114538 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55860b1144e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860b1144b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860b114460 <col:60, col:69> 'char const[48]' lvalue ->c 0x55860b0ffac0
|             |   `-CXXMemberCallExpr 0x55860b114440 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860b114410 <col:60> '<bound member function type>' ->xanno 0x55860b0f7108
|             |       `-CXXThisExpr 0x55860b114400 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860b1144c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860b114490 <col:73> 'int' lvalue ParmVar 0x55860b0fa8a0 'i' 'int'
|-CXXMethodDecl 0x55860b0faba8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55860b0faa58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860b0faad0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55860b114c88 <col:41, line:577:5>
|   |-ParenExpr 0x55860b114a18 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b1149e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b114740 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b114710 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b114620 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b114608 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b1145c8 <col:23> 'int' lvalue ParmVar 0x55860b0faa58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b1145e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b1146f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b1146d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b114640 <col:33> 'int' lvalue ParmVar 0x55860b0faa58 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b1146b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b1146a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b114660 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b114680 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55860b1147a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b114780 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b114948 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b114930 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b114910 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b114988 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b114810 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55860b1149a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b114848 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b1149b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b114880 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55860b1149d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b1148f8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b1148e0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b1148a0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55860b114c68 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55860b114c18 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860b114be8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55860b114b88 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860b114b58 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860b114b08 <col:47, col:56> 'char [48]' lvalue ->c 0x55860b0ffac0
|     |     |   `-CXXMemberCallExpr 0x55860b114ae8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860b114ab8 <col:47> '<bound member function type>' ->xanno 0x55860b0f72a8
|     |     |       `-CXXThisExpr 0x55860b114aa8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860b114b70 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860b114b38 <col:60> 'int' lvalue ParmVar 0x55860b0faa58 'i' 'int'
|     `-ImplicitCastExpr 0x55860b114c50 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55860b114c30 <col:65> 'int32_t':'int' lvalue ParmVar 0x55860b0faad0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55860b0fad68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55860b0fac70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55860b1153b8 <col:36, line:591:5>
|   |-ParenExpr 0x55860b1150f8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b1150c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b114e20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b114df0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b114d00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b114ce8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b114ca8 <col:23> 'int' lvalue ParmVar 0x55860b0fac70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b114cc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b114dd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b114db8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b114d20 <col:33> 'int' lvalue ParmVar 0x55860b0fac70 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b114d98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b114d80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b114d40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b114d60 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55860b114e80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b114e60 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b115028 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b115010 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b114ff0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b115068 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b114ef0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55860b115080 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b114f28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b115098 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b114f60 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55860b1150b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b114fd8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b114fc0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b114f80 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55860b1153a8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55860b115390 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55860b115378 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860b115348 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55860b1152c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860b115290 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860b115240 <col:61, col:70> 'char const[48]' lvalue ->c 0x55860b0ffac0
|             |   `-CXXMemberCallExpr 0x55860b115220 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860b1151f0 <col:61> '<bound member function type>' ->xanno 0x55860b0f7108
|             |       `-CXXThisExpr 0x55860b1151e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860b1152a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860b115270 <col:74> 'int' lvalue ParmVar 0x55860b0fac70 'i' 'int'
|-CXXMethodDecl 0x55860b0fafb8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55860b0fae28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860b0faea0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55860b115a98 <col:42, line:606:5>
|   |-ParenExpr 0x55860b115828 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55860b1157f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55860b115550 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b115520 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b115430 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b115418 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b1153d8 <col:23> 'int' lvalue ParmVar 0x55860b0fae28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b1153f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b115500 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55860b1154e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b115450 <col:33> 'int' lvalue ParmVar 0x55860b0fae28 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b1154c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b1154b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b115470 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55860b115490 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55860b1155b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b115590 <col:60> 'int' 0
|   |   `-CallExpr 0x55860b115758 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55860b115740 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b115720 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b115798 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b115620 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55860b1157b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b115658 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b1157c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b115690 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55860b1157e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b115708 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b1156f0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b1156b0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55860b115a78 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55860b115a28 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860b1159f8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55860b115998 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860b115968 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860b115918 <col:48, col:57> 'char [48]' lvalue ->c 0x55860b0ffac0
|     |     |   `-CXXMemberCallExpr 0x55860b1158f8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860b1158c8 <col:48> '<bound member function type>' ->xanno 0x55860b0f72a8
|     |     |       `-CXXThisExpr 0x55860b1158b8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860b115980 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860b115948 <col:61> 'int' lvalue ParmVar 0x55860b0fae28 'i' 'int'
|     `-ImplicitCastExpr 0x55860b115a60 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55860b115a40 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55860b0faea0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55860b0fb150 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55860b0fb080 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55860b116308 <col:33, line:620:5>
|   |-ParenExpr 0x55860b116080 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55860b116050 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55860b115ca0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b115c70 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b115b10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b115af8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b115ab8 <col:23> 'int' lvalue ParmVar 0x55860b0fb080 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b115ad8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b115c50 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55860b115c38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b115b30 <col:33> 'int' lvalue ParmVar 0x55860b0fb080 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b115c18 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b115c00 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b115b50 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55860b115bd8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55860b115bc0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55860b115b88 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55860b115d00 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b115ce0 <col:79> 'int' 0
|   |   `-CallExpr 0x55860b115fb0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55860b115f98 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b115f78 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b115ff0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b115de8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55860b116008 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b115e30 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b116020 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b115e68 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55860b116038 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b115f60 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b115f48 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b115f08 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55860b1162f8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55860b1162e0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55860b1162c8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55860b116298 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55860b116210 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55860b1161e0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55860b116190 <col:67, col:76> 'char const[48]' lvalue ->c 0x55860b0ffac0
|             |   `-CXXMemberCallExpr 0x55860b116170 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55860b116140 <col:67> '<bound member function type>' ->xanno 0x55860b0f7108
|             |       `-CXXThisExpr 0x55860b116130 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55860b1161f8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55860b1161c0 <col:80> 'int' lvalue ParmVar 0x55860b0fb080 'i' 'int'
|-CXXMethodDecl 0x55860b0fb368 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55860b0fb210 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55860b0fb290 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55860b116b30 <col:45, line:635:5>
|   |-ParenExpr 0x55860b116878 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55860b116848 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55860b116510 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55860b1164e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55860b116380 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55860b116368 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55860b116328 <col:23> 'int' lvalue ParmVar 0x55860b0fb210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55860b116348 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55860b1164c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55860b1164a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55860b1163a0 <col:33> 'int' lvalue ParmVar 0x55860b0fb210 'i' 'int'
|   |   |     `-BinaryOperator 0x55860b116488 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55860b116470 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55860b1163c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55860b0f74f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55860b116448 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55860b116430 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55860b1163f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55860b116570 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55860b116550 <col:79> 'int' 0
|   |   `-CallExpr 0x55860b1167a8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55860b116790 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55860b116770 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55860b1167e8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b1165e0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55860b116800 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55860b116628 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55860b116818 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55860b116660 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55860b116830 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55860b116758 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55860b116740 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55860b1166f8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55860b116b10 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55860b116a78 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55860b116a48 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55860b1169e8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55860b1169b8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55860b116968 <col:54, col:63> 'char [48]' lvalue ->c 0x55860b0ffac0
|     |     |   `-CXXMemberCallExpr 0x55860b116948 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55860b116918 <col:54> '<bound member function type>' ->xanno 0x55860b0f72a8
|     |     |       `-CXXThisExpr 0x55860b116908 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55860b1169d0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55860b116998 <col:67> 'int' lvalue ParmVar 0x55860b0fb210 'i' 'int'
|     `-CXXConstCastExpr 0x55860b116ae0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55860b116ac8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55860b116a90 <col:91> 'const void *' lvalue ParmVar 0x55860b0fb290 'x' 'const void *'
|-CXXMethodDecl 0x55860b0fb438 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55860b116bb8 <col:34, line:640:5>
|   `-ReturnStmt 0x55860b116ba8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55860b116b90 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55860b116b60 <col:16> 'Packet *' lvalue ->_data_packet 0x55860b100608
|         `-CXXThisExpr 0x55860b116b50 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55860b0fb578 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55860b0fb4e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860b10fcf8 <col:46> 'bool' true
|-CXXMethodDecl 0x55860b0fb6f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55860b0fb630 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55860b0fb7a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55860b0fbf50 <line:660:22> "" ""
| |-EnumConstantDecl 0x55860b0fb8a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fbfc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fb880 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55860b0fb860 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55860b0f09a0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55860b0fb930 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fbfd8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fb910 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55860b0fb8f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55860b0f0a30 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55860b0fb9c0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fbff0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fb9a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55860b0fb980 <col:21> 'int' 0
| |-EnumConstantDecl 0x55860b0fba50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fc008 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fba30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55860b0fba10 <col:19> 'int' 16
| |-EnumConstantDecl 0x55860b0fbae0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fc020 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fbac0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55860b0fbaa0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55860b0fbb70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fc038 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fbb50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55860b0fbb30 <col:19> 'int' 32
| |-EnumConstantDecl 0x55860b0fbc00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fc050 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fbbe0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55860b0fbbc0 <col:19> 'int' EnumConstant 0x55860b0fba50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55860b0fbc90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fc068 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fbc70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55860b0fbc50 <col:19> 'int' EnumConstant 0x55860b0fbb70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55860b0fbd60 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fc080 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fbd40 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55860b0fbd20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55860b0fbce0 <col:23> 'int' EnumConstant 0x55860b0fbc90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55860b0fbd00 <col:40> 'int' 2
| |-EnumConstantDecl 0x55860b0fbe30 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55860b0fc098 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55860b0fbe10 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55860b0fbdf0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55860b0fbdb0 <col:23> 'int' EnumConstant 0x55860b0fbc90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55860b0fbdd0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55860b0fbf00 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55860b0fc0b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b0fbee0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55860b0fbec0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55860b0fbe80 <col:23> 'int' EnumConstant 0x55860b0fbc90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55860b0fbea0 <col:40> 'int' 8
|-CXXMethodDecl 0x55860b0fc0f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55860b0fc190 <col:68> "" ""
|-CXXMethodDecl 0x55860b0fc228 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55860b0fc2c8 <col:45> "" ""
|-CXXMethodDecl 0x55860b0fc360 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55860b0fc400 <col:57> "" ""
|-CXXMethodDecl 0x55860b0fc498 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55860b0fc538 <col:45> "" ""
|-CXXMethodDecl 0x55860b0fc5d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55860b0fc670 <col:57> "" ""
|-CXXMethodDecl 0x55860b0fc700 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55860b0fc7a0 <col:51> "" ""
|-CXXMethodDecl 0x55860b0fc830 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55860b0fc8d0 <col:63> "" ""
|-CXXMethodDecl 0x55860b0fc960 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55860b0fca00 <col:53> "" ""
|-CXXMethodDecl 0x55860b0fca90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55860b0fcb30 <col:65> "" ""
|-CXXMethodDecl 0x55860b0fcc48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55860b0fcbb8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55860b0fccf0 <col:61> "" ""
|-CXXMethodDecl 0x55860b0fce88 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55860b0fcd78 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55860b0fcdf0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55860b0fcf38 <col:67> "" ""
|-CXXMethodDecl 0x55860b0fd050 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55860b0fcfc0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55860b0fd0f8 <col:63> "" ""
|-CXXMethodDecl 0x55860b0fd290 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55860b0fd180 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860b0fd1f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55860b0fd340 <col:69> "" ""
|-CXXMethodDecl 0x55860b0fd458 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55860b0fd3c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55860b0fd500 <col:63> "" ""
|-CXXMethodDecl 0x55860b0fd698 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55860b0fd588 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860b0fd600 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860b0fd748 <col:69> "" ""
|-CXXMethodDecl 0x55860b0fd860 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55860b0fd7d0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55860b0fd908 <col:62> "" ""
|-CXXMethodDecl 0x55860b0fdaa0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55860b0fd990 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860b0fda08 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55860b0fdb50 <col:68> "" ""
|-CXXMethodDecl 0x55860b0fdc68 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55860b0fdbd8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55860b0fdd10 <col:63> "" ""
|-CXXMethodDecl 0x55860b0fdea8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55860b0fdd98 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55860b0fde10 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55860b0fdf58 <col:69> "" ""
|-CXXMethodDecl 0x55860b0fdfe8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55860b0fe088 <col:64> "" ""
|-CXXMethodDecl 0x55860b0fe118 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55860b0fe1b8 <col:52> "" ""
|-CXXMethodDecl 0x55860b0fe248 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55860b0fe2e8 <col:67> "" ""
|-CXXMethodDecl 0x55860b0fe378 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55860b0fe418 <col:55> "" ""
|-CXXMethodDecl 0x55860b0fe530 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55860b0fe4a0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55860b0fe5d8 <col:58> "" ""
|-CXXMethodDecl 0x55860b0fe770 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55860b0fe660 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860b0fe6d8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55860b0fe820 <col:62> "" ""
|-CXXMethodDecl 0x55860b0fe938 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55860b0fe8a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55860b0fe9e0 <col:58> "" ""
|-CXXMethodDecl 0x55860b0feb78 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55860b0fea68 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860b0feae0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55860b0fec28 <col:62> "" ""
|-CXXMethodDecl 0x55860b0fed40 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55860b0fecb0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55860b0fede8 <col:60> "" ""
|-CXXMethodDecl 0x55860b0fef80 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55860b0fee70 <col:34> col:37 'int'
| |-ParmVarDecl 0x55860b0feee8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55860b0ff030 <col:64> "" ""
|-CXXMethodDecl 0x55860b0ff148 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55860b0ff0b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55860b0ff1f0 <col:58> "" ""
|-CXXMethodDecl 0x55860b0ff388 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55860b0ff278 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860b0ff2f0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55860b0ff438 <col:62> "" ""
|-CXXMethodDecl 0x55860b0ff550 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55860b0ff4c0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55860b0ff5f8 <col:59> "" ""
|-CXXMethodDecl 0x55860b0ff790 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55860b0ff680 <col:33> col:36 'int'
| |-ParmVarDecl 0x55860b0ff6f8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55860b0ff840 <col:63> "" ""
|-AccessSpecDecl 0x55860b0ff8b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55860b0ff8d8 prev 0x55860b0f6fe0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860b0ff9d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55860b0ffac0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55860b0ffb70 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55860b0ffcf8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55860b0ffe78 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55860b0ffff8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55860b116d38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55860b117638 <col:11>
| |-CXXDestructorDecl 0x55860b116ea0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55860b116fd8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55860b116fd8
| | `-ParmVarDecl 0x55860b1170e8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55860b117188 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860b117188
| | `-ParmVarDecl 0x55860b117298 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55860b119fc8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55860b11a0d8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55860b11a358 <col:11>
| |   `-ReturnStmt 0x55860b11a348 <col:11>
| |     `-UnaryOperator 0x55860b11a330 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55860b11a320 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55860b11a148 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55860b11a148
|   `-ParmVarDecl 0x55860b11a258 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55860b100060 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860b100178 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55860b100218 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55860b100280 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55860b1002e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55860b100350 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55860b1003b0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55860b100470 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55860b1004d0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55860b100530 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55860b116c48 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55860b100218 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55860b117648 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55860b1176a0 <col:12>
| |-CXXConstructorDecl 0x55860b117308 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55860b117308
| | `-ParmVarDecl 0x55860b117418 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55860b1174b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55860b1174b8
| | `-ParmVarDecl 0x55860b1175c8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55860b1196b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55860b1005a8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55860b100608 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55860b100670 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55860b1006d8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55860b100740 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55860b1007a8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55860b100808 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55860b100868 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55860b1008d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55860b100958 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55860b1005a8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55860b116be0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55860b100808 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55860b1176b0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55860b117710 <col:21, line:755:5>
|-CXXConstructorDecl 0x55860b100af8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55860b100a38 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55860b10ee90 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55860b10f078 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55860b10ef80 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55860b10f348 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55860b10f130 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55860b10f1a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55860b10f220 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860b10f568 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55860b10f418 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55860b10f490 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55860b10f838 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55860b10f628 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55860b10f6a0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55860b10f718 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55860b10f990 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55860b10f900 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55860b10fad8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55860b10fa48 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55860b10fbd0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b15d238 <../elements/local/tcpbuffer.hh:43:3, line:58:3> line:43:9 referenced class TCPBufferElt definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860b15d358 <col:3, col:9> col:9 implicit referenced class TCPBufferElt
|-AccessSpecDecl 0x55860b15d3e8 <line:44:3, col:10> col:3 private
|-FieldDecl 0x55860b15d420 <line:45:5, col:13> col:13 referenced _packet 'Packet *'
|-FieldDecl 0x55860b15d4e0 <line:46:5, col:20> col:20 referenced _chain_ptr 'TCPBuffer::TCPBufferElt **'
|-FieldDecl 0x55860b15d540 <line:47:5, col:19> col:19 referenced _next 'TCPBuffer::TCPBufferElt *'
|-FieldDecl 0x55860b15d5a0 <line:48:5, col:19> col:19 referenced _prev 'TCPBuffer::TCPBufferElt *'
|-AccessSpecDecl 0x55860b15d5f0 <line:50:3, col:9> col:3 public
|-CXXConstructorDecl 0x55860b15d798 <line:51:5, col:49> col:5 TCPBufferElt 'void (TCPBuffer::TCPBufferElt **, Packet *)'
| |-ParmVarDecl 0x55860b15d630 <col:18, col:33> col:33 chain 'TCPBuffer::TCPBufferElt **'
| `-ParmVarDecl 0x55860b15d6a8 <col:40, col:48> col:48 p 'Packet *'
|-CXXMethodDecl 0x55860b15d8c8 <line:53:5, col:48> col:19 used next 'TCPBuffer::TCPBufferElt *() const'
| `-CompoundStmt 0x55860b15f690 <col:32, col:48>
|   `-ReturnStmt 0x55860b15f680 <col:34, col:41>
|     `-ImplicitCastExpr 0x55860b15f668 <col:41> 'TCPBuffer::TCPBufferElt *' <LValueToRValue>
|       `-MemberExpr 0x55860b15f638 <col:41> 'TCPBuffer::TCPBufferElt *const' lvalue ->_next 0x55860b15d540
|         `-CXXThisExpr 0x55860b15f628 <col:41> 'const TCPBuffer::TCPBufferElt *' implicit this
|-CXXMethodDecl 0x55860b15d988 <line:54:5, col:48> col:19 prev 'TCPBuffer::TCPBufferElt *() const'
| `-CompoundStmt 0x55860b15f710 <col:32, col:48>
|   `-ReturnStmt 0x55860b15f700 <col:34, col:41>
|     `-ImplicitCastExpr 0x55860b15f6e8 <col:41> 'TCPBuffer::TCPBufferElt *' <LValueToRValue>
|       `-MemberExpr 0x55860b15f6b8 <col:41> 'TCPBuffer::TCPBufferElt *const' lvalue ->_prev 0x55860b15d5a0
|         `-CXXThisExpr 0x55860b15f6a8 <col:41> 'const TCPBuffer::TCPBufferElt *' implicit this
|-CXXMethodDecl 0x55860b15da48 <line:55:5, col:46> col:13 used packet 'Packet *() const'
| `-CompoundStmt 0x55860b15f790 <col:28, col:46>
|   `-ReturnStmt 0x55860b15f780 <col:30, col:37>
|     `-ImplicitCastExpr 0x55860b15f768 <col:37> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55860b15f738 <col:37> 'Packet *const' lvalue ->_packet 0x55860b15d420
|         `-CXXThisExpr 0x55860b15f728 <col:37> 'const TCPBuffer::TCPBufferElt *' implicit this
|-CXXMethodDecl 0x55860b15db08 <line:57:5, col:22> col:13 kill_elt 'Packet *()'
|-CXXConstructorDecl 0x55860b15fa88 <line:43:9> col:9 implicit constexpr TCPBufferElt 'void (const TCPBuffer::TCPBufferElt &)' inline default trivial noexcept-unevaluated 0x55860b15fa88
| `-ParmVarDecl 0x55860b15fb98 <col:9> col:9 'const TCPBuffer::TCPBufferElt &'
|-CXXConstructorDecl 0x55860b15fc38 <col:9> col:9 implicit constexpr TCPBufferElt 'void (TCPBuffer::TCPBufferElt &&)' inline default trivial noexcept-unevaluated 0x55860b15fc38
| `-ParmVarDecl 0x55860b15fd48 <col:9> col:9 'TCPBuffer::TCPBufferElt &&'
`-CXXDestructorDecl 0x55860b160fa0 <col:9> col:9 implicit ~TCPBufferElt 'void ()' inline default trivial noexcept-unevaluated 0x55860b160fa0

Layout: <CGRecordLayout
  LLVMType:%"class.TCPBuffer::TCPBufferElt" = type { %class.Packet*, %"class.TCPBuffer::TCPBufferElt"**, %"class.TCPBuffer::TCPBufferElt"*, %"class.TCPBuffer::TCPBufferElt"* }
  NonVirtualBaseLLVMType:%"class.TCPBuffer::TCPBufferElt" = type { %class.Packet*, %"class.TCPBuffer::TCPBufferElt"**, %"class.TCPBuffer::TCPBufferElt"*, %"class.TCPBuffer::TCPBufferElt"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b15cf28 <../elements/local/tcpbuffer.hh:39:1, line:97:1> line:39:7 class TCPBuffer definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55860b15d088 <col:1, col:7> col:7 implicit referenced class TCPBuffer
|-AccessSpecDecl 0x55860b15d118 <line:40:1, col:8> col:1 private
|-VarDecl 0x55860b15d158 <line:41:3, col:32> col:20 _capacity 'const int' static cinit
| `-IntegerLiteral 0x55860b15d1c0 <col:32> 'int' 128
|-CXXRecordDecl 0x55860b15d238 <line:43:3, line:58:3> line:43:9 referenced class TCPBufferElt definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860b15d358 <col:3, col:9> col:9 implicit referenced class TCPBufferElt
| |-AccessSpecDecl 0x55860b15d3e8 <line:44:3, col:10> col:3 private
| |-FieldDecl 0x55860b15d420 <line:45:5, col:13> col:13 referenced _packet 'Packet *'
| |-FieldDecl 0x55860b15d4e0 <line:46:5, col:20> col:20 referenced _chain_ptr 'TCPBuffer::TCPBufferElt **'
| |-FieldDecl 0x55860b15d540 <line:47:5, col:19> col:19 referenced _next 'TCPBuffer::TCPBufferElt *'
| |-FieldDecl 0x55860b15d5a0 <line:48:5, col:19> col:19 referenced _prev 'TCPBuffer::TCPBufferElt *'
| |-AccessSpecDecl 0x55860b15d5f0 <line:50:3, col:9> col:3 public
| |-CXXConstructorDecl 0x55860b15d798 <line:51:5, col:49> col:5 TCPBufferElt 'void (TCPBuffer::TCPBufferElt **, Packet *)'
| | |-ParmVarDecl 0x55860b15d630 <col:18, col:33> col:33 chain 'TCPBuffer::TCPBufferElt **'
| | `-ParmVarDecl 0x55860b15d6a8 <col:40, col:48> col:48 p 'Packet *'
| |-CXXMethodDecl 0x55860b15d8c8 <line:53:5, col:48> col:19 used next 'TCPBuffer::TCPBufferElt *() const'
| | `-CompoundStmt 0x55860b15f690 <col:32, col:48>
| |   `-ReturnStmt 0x55860b15f680 <col:34, col:41>
| |     `-ImplicitCastExpr 0x55860b15f668 <col:41> 'TCPBuffer::TCPBufferElt *' <LValueToRValue>
| |       `-MemberExpr 0x55860b15f638 <col:41> 'TCPBuffer::TCPBufferElt *const' lvalue ->_next 0x55860b15d540
| |         `-CXXThisExpr 0x55860b15f628 <col:41> 'const TCPBuffer::TCPBufferElt *' implicit this
| |-CXXMethodDecl 0x55860b15d988 <line:54:5, col:48> col:19 prev 'TCPBuffer::TCPBufferElt *() const'
| | `-CompoundStmt 0x55860b15f710 <col:32, col:48>
| |   `-ReturnStmt 0x55860b15f700 <col:34, col:41>
| |     `-ImplicitCastExpr 0x55860b15f6e8 <col:41> 'TCPBuffer::TCPBufferElt *' <LValueToRValue>
| |       `-MemberExpr 0x55860b15f6b8 <col:41> 'TCPBuffer::TCPBufferElt *const' lvalue ->_prev 0x55860b15d5a0
| |         `-CXXThisExpr 0x55860b15f6a8 <col:41> 'const TCPBuffer::TCPBufferElt *' implicit this
| |-CXXMethodDecl 0x55860b15da48 <line:55:5, col:46> col:13 used packet 'Packet *() const'
| | `-CompoundStmt 0x55860b15f790 <col:28, col:46>
| |   `-ReturnStmt 0x55860b15f780 <col:30, col:37>
| |     `-ImplicitCastExpr 0x55860b15f768 <col:37> 'Packet *' <LValueToRValue>
| |       `-MemberExpr 0x55860b15f738 <col:37> 'Packet *const' lvalue ->_packet 0x55860b15d420
| |         `-CXXThisExpr 0x55860b15f728 <col:37> 'const TCPBuffer::TCPBufferElt *' implicit this
| |-CXXMethodDecl 0x55860b15db08 <line:57:5, col:22> col:13 kill_elt 'Packet *()'
| |-CXXConstructorDecl 0x55860b15fa88 <line:43:9> col:9 implicit constexpr TCPBufferElt 'void (const TCPBuffer::TCPBufferElt &)' inline default trivial noexcept-unevaluated 0x55860b15fa88
| | `-ParmVarDecl 0x55860b15fb98 <col:9> col:9 'const TCPBuffer::TCPBufferElt &'
| |-CXXConstructorDecl 0x55860b15fc38 <col:9> col:9 implicit constexpr TCPBufferElt 'void (TCPBuffer::TCPBufferElt &&)' inline default trivial noexcept-unevaluated 0x55860b15fc38
| | `-ParmVarDecl 0x55860b15fd48 <col:9> col:9 'TCPBuffer::TCPBufferElt &&'
| `-CXXDestructorDecl 0x55860b160fa0 <col:9> col:9 implicit ~TCPBufferElt 'void ()' inline default trivial noexcept-unevaluated 0x55860b160fa0
|-FieldDecl 0x55860b15dbd0 <line:60:3, col:17> col:17 referenced _chain 'TCPBuffer::TCPBufferElt *'
|-FieldDecl 0x55860b15dc38 <line:61:3, col:12> col:12 _initial_seq 'unsigned int'
|-FieldDecl 0x55860b15dca0 <line:62:3, col:12> col:12 referenced _first_seq 'unsigned int'
|-FieldDecl 0x55860b15dd00 <line:63:3, col:8> col:8 _start_push 'bool'
|-FieldDecl 0x55860b15dd60 <line:64:3, col:8> col:8 referenced _start_pull 'bool'
|-FieldDecl 0x55860b15ddc0 <line:66:3, col:8> col:8 _skip 'bool'
|-CXXMethodDecl 0x55860b15de58 <line:67:3, col:13> col:8 dump 'void ()'
|-AccessSpecDecl 0x55860b15def8 <line:69:1, col:7> col:1 public
|-CXXConstructorDecl 0x55860b15df58 <line:71:3, col:13> col:3 TCPBuffer 'void ()'
|-CXXDestructorDecl 0x55860b15e048 <line:72:3, col:14> col:3 ~TCPBuffer 'void ()' noexcept-unevaluated 0x55860b15e048
| `-Overrides: [ 0x55860b145ae8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55860b15e180 <line:74:3, col:56> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55860b146f18 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55860b15f7f8 <col:34, col:56>
|   `-ReturnStmt 0x55860b15f7e8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55860b15f7d0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55860b15f7a8 <col:43> 'const char [10]' lvalue "TCPBuffer"
|-CXXMethodDecl 0x55860b15e248 <line:75:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55860b146fe0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55860b15f858 <col:34, col:54>
|   `-ReturnStmt 0x55860b15f848 <col:36, col:43>
|     `-ImplicitCastExpr 0x55860b15f830 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55860b15f810 <col:43> 'const char []' lvalue Var 0x55860b147260 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55860b15e310 <line:76:3, col:57> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55860b147378 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55860b15f8b8 <col:34, col:57>
|   `-ReturnStmt 0x55860b15f8a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55860b15f890 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55860b15f870 <col:43> 'const char []' lvalue Var 0x55860b1475d0 'PUSH_TO_PULL' 'const char []'
|-CXXMethodDecl 0x55860b15e458 <line:78:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55860b148890 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55860b15e3c0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55860b15e5a0 <line:79:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55860b1490a8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55860b15e510 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x55860b15e880 <line:80:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55860b148640 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55860b15e730 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x55860b15e7a8 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55860b15ea58 <line:82:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55860b145db8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55860b15e948 <col:13> col:16 'int'
| `-ParmVarDecl 0x55860b15e9c0 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x55860b15ebb0 <line:83:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x55860b145f48 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55860b15eb20 <col:16> col:19 'int'
|-CXXMethodDecl 0x55860b15ed38 <line:88:3, col:44> col:8 first_missing_seq_no 'bool (unsigned int &)'
| `-ParmVarDecl 0x55860b15ec70 <col:29, col:39> col:39 seqno 'unsigned int &'
|-CXXMethodDecl 0x55860b15ef48 <line:93:3, col:57> col:8 used next_missing_seq_no 'bool (unsigned int, unsigned int &)'
| |-ParmVarDecl 0x55860b15edf8 <col:28, col:37> col:37 pos 'unsigned int'
| `-ParmVarDecl 0x55860b15ee78 <col:42, col:52> col:52 seqno 'unsigned int &'
|-CXXMethodDecl 0x55860b15f0d0 <line:95:3, col:34> col:19 used seqlen 'unsigned int (Packet *)' static
| `-ParmVarDecl 0x55860b15f008 <col:26, col:33> col:34 'Packet *'
|-CXXMethodDecl 0x55860b15f220 <line:96:3, col:33> col:19 used seqno 'unsigned int (Packet *)' static
| `-ParmVarDecl 0x55860b15f188 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x55860b15f2f8 <line:39:7> col:7 implicit TCPBuffer 'void (const TCPBuffer &)' inline default_delete noexcept-unevaluated 0x55860b15f2f8
| `-ParmVarDecl 0x55860b15f408 <col:7> col:7 'const TCPBuffer &'
`-CXXMethodDecl 0x55860b15f4a8 <col:7> col:7 implicit operator= 'TCPBuffer &(const TCPBuffer &)' inline default_delete noexcept-unevaluated 0x55860b15f4a8
  `-ParmVarDecl 0x55860b15f5b8 <col:7> col:7 'const TCPBuffer &'

Layout: <CGRecordLayout
  LLVMType:%class.TCPBuffer = type <{ %class.Element.base, [4 x i8], %"class.TCPBuffer::TCPBufferElt"*, i32, i32, i8, i8, i8, [5 x i8] }>
  NonVirtualBaseLLVMType:%class.TCPBuffer.base = type <{ %class.Element.base, [4 x i8], %"class.TCPBuffer::TCPBufferElt"*, i32, i32, i8, i8, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ae675d0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55860ae676e8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55860ae67788 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55860ae677e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55860ae67848 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55860ae678f8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ae67c00 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860ae67d18 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55860ae67dc0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55860ae67e28 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55860ae67eb8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55860ae6ddb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860ae6e1e8 <col:12>
|-CXXConstructorDecl 0x55860ae6deb8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55860ae6dfc8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55860ae67dc0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55860ae70770 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55860ae70740 <col:12> 'const char *const' lvalue .data 0x55860ae67dc0
| |     `-DeclRefExpr 0x55860ae70720 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae6dfc8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55860ae67e28 'length' 'int'
| | `-ImplicitCastExpr 0x55860ae70800 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55860ae707d0 <col:12> 'const int' lvalue .length 0x55860ae67e28
| |     `-DeclRefExpr 0x55860ae707b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae6dfc8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55860ae67eb8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55860ae70890 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55860ae70860 <col:12> 'String::memo_t *const' lvalue .memo 0x55860ae67eb8
| |     `-DeclRefExpr 0x55860ae70840 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae6dfc8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55860ae708e8 <col:12>
|-CXXConstructorDecl 0x55860ae6e068 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860ae6e068
| `-ParmVarDecl 0x55860ae6e178 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55860ae73660 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55860ae7f098 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55860ae7f1a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55860ae7f6c0 <col:12>
|   |-BinaryOperator 0x55860ae7f4d8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55860ae7f490 <col:12> 'const char *' lvalue ->data 0x55860ae67dc0
|   | | `-CXXThisExpr 0x55860ae7f480 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55860ae7f4c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55860ae7f450 <col:12> 'const char *const' lvalue .data 0x55860ae67dc0
|   |     `-DeclRefExpr 0x55860ae7f430 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae7f1a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55860ae7f5a0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55860ae7f558 <col:12> 'int' lvalue ->length 0x55860ae67e28
|   | | `-CXXThisExpr 0x55860ae7f548 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55860ae7f588 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55860ae7f518 <col:12> 'const int' lvalue .length 0x55860ae67e28
|   |     `-DeclRefExpr 0x55860ae7f4f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae7f1a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55860ae7f668 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55860ae7f620 <col:12> 'String::memo_t *' lvalue ->memo 0x55860ae67eb8
|   | | `-CXXThisExpr 0x55860ae7f610 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55860ae7f650 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55860ae7f5e0 <col:12> 'String::memo_t *const' lvalue .memo 0x55860ae67eb8
|   |     `-DeclRefExpr 0x55860ae7f5c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae7f1a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55860ae7f6b0 <col:12>
|     `-UnaryOperator 0x55860ae7f698 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860ae7f688 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55860ae7f218 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860ae7f218
  `-ParmVarDecl 0x55860ae7f328 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860ae5eab0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860ae5ebc8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55860ae5ec58 <col:16, col:22> col:16 public
|-TypedefDecl 0x55860ae5ec98 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55860ab33fd0 'const char *'
|   `-QualType 0x55860ab33521 'const char' const
|     `-BuiltinType 0x55860ab33520 'char'
|-TypedefDecl 0x55860ae5ed20 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55860ae5ecf0 'String::const_iterator' sugar
|   |-Typedef 0x55860ae5ec98 'const_iterator'
|   `-PointerType 0x55860ab33fd0 'const char *'
|     `-QualType 0x55860ab33521 'const char' const
|       `-BuiltinType 0x55860ab33520 'char'
|-TypedefDecl 0x55860ae5ee90 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55860ae5ee00 'int (String::*)() const'
|   |-RecordType 0x55860ae5eb40 'String'
|   | `-CXXRecord 0x55860ae5eab0 'String'
|   `-ParenType 0x55860ae5eda0 'int () const' sugar
|     `-FunctionProtoType 0x55860ae33980 'int () const' const cdecl
|       `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860ae5eef8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55860ac88600 'int64_t' sugar
|   |-Typedef 0x55860ab9c390 'int64_t'
|   `-TypedefType 0x55860ab75630 '__int64_t' sugar
|     |-Typedef 0x55860ab75208 '__int64_t'
|     `-BuiltinType 0x55860ab335a0 'long'
|-TypedefDecl 0x55860ae5ef60 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55860ac88520 'uint64_t' sugar
|   |-Typedef 0x55860ab9c530 'uint64_t'
|   `-TypedefType 0x55860ab756c0 '__uint64_t' sugar
|     |-Typedef 0x55860ab75278 '__uint64_t'
|     `-BuiltinType 0x55860ab33640 'unsigned long'
|-TypedefDecl 0x55860ae5eff0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55860ae5efc0 'String::intmax_t' sugar
|   |-Typedef 0x55860ae5eef8 'intmax_t'
|   `-TypedefType 0x55860ac88600 'int64_t' sugar
|     |-Typedef 0x55860ab9c390 'int64_t'
|     `-TypedefType 0x55860ab75630 '__int64_t' sugar
|       |-Typedef 0x55860ab75208 '__int64_t'
|       `-BuiltinType 0x55860ab335a0 'long'
|-TypedefDecl 0x55860ae5f080 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55860ae5f050 'String::uintmax_t' sugar
|   |-Typedef 0x55860ae5ef60 'uintmax_t'
|   `-TypedefType 0x55860ac88520 'uint64_t' sugar
|     |-Typedef 0x55860ab9c530 'uint64_t'
|     `-TypedefType 0x55860ab756c0 '__uint64_t' sugar
|       |-Typedef 0x55860ab75278 '__uint64_t'
|       `-BuiltinType 0x55860ab33640 'unsigned long'
|-CXXConstructorDecl 0x55860ae5f140 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55860ae5f2e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55860ae5f228 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55860ae5f498 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55860ae5f3d8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55860ae5f5f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55860ae5f560 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55860ae5f808 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55860ae5f6b8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55860ae5f738 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55860ae5fa28 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55860ae5f8d8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55860ae5f958 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55860ae5fc48 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55860ae5faf8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55860ae5fb78 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55860ae5fe68 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55860ae5fd18 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55860ae5fd98 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55860ae5fff8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55860ae5ff30 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55860ae60178 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55860ae600b8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55860ae60308 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55860ae60240 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55860ae60460 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55860ae603d0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55860ae605b8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55860ae60528 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55860ae60710 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55860ae60680 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55860ae60898 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55860ae607d8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55860ae60a28 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55860ae60960 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55860ae60bb8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55860ae60af0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55860ae60d48 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55860ae60c80 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55860ae60e40 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55860ae60f68 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55860ae610e8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55860ae61020 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55860ae61238 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55860ae611a8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55860ae612e0 <col:63> "" ""
|-CXXMethodDecl 0x55860ae61428 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55860ae61368 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55860ae61638 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55860ae614e8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55860ae61568 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55860ae618a8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55860ae61700 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55860ae617d0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55860ae61b88 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55860ae61968 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55860ae619e8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55860ae6d880 <col:55> 'int' 10
| `-ParmVarDecl 0x55860ae61a60 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860ae6d8a0 <col:76> 'bool' true
|-CXXMethodDecl 0x55860ae61e68 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55860ae61c50 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55860ae61cd0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55860ae6d8b0 <col:56> 'int' 10
| `-ParmVarDecl 0x55860ae61d48 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55860ae6d8d0 <col:77> 'bool' true
|-CXXMethodDecl 0x55860ae61f70 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55860ae62038 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55860ae62100 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55860ae621a0 <col:20>
| `-OptimizeNoneAttr 0x55860ae621f8 <col:30>
|-CXXConversionDecl 0x55860ae622e8 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55860ae623b8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55860ae62478 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55860ae62568 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55860ae62628 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55860ae627a8 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55860ae626e0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55860ae628f8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55860ae62868 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55860ae629e8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55860ae62aa8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55860ae62cf8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55860ae62b60 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55860ae62be0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55860ae62f58 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55860ae62dc0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55860ae62e40 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55860ae63028 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55860ae63238 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55860ae630e0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55860ae63160 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55860ae63458 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55860ae63300 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55860ae63380 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55860ae635e8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55860ae63520 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55860ae636d8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55860ae63848 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55860ae63788 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55860ae63a58 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55860ae63908 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55860ae63988 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55860ae63c70 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55860ae63b18 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55860ae63b90 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55860ae63e00 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55860ae63d30 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55860ae64020 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55860ae63ec0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55860ae63f40 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55860ae64170 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55860ae640e0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55860ae64348 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55860ae64230 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55860ae642b0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55860ae64498 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55860ae64408 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55860ae646b0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55860ae64550 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55860ae645d0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55860ae6d8e0 <col:39> 'int' 0
|-CXXMethodDecl 0x55860ae648d0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55860ae64770 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55860ae647f0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55860ae6d900 <col:48> 'int' 0
|-CXXMethodDecl 0x55860ae64ab0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55860ae64990 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55860ae64a10 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55860ae6d920 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55860ae64b80 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55860ae64c40 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55860ae64d00 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55860ae64dc0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55860ae64e80 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55860ae65028 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55860ae64f30 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55860ae651a8 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55860ae650e0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55860ae65328 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55860ae65268 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55860ae654a8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55860ae653e0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55860ae655f0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55860ae65560 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55860ae657e0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55860ae656b0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55860ae659b8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55860ae658a0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55860ae65920 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55860ae65b98 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55860ae65a80 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55860ae65b00 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55860ae65ce8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55860ae65c58 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55860ae65ef8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55860ae65da8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55860ae65e28 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55860ae66058 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55860ae65fc0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55860ae661b0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55860ae66118 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55860ae66258 <col:57> "" ""
|-CXXMethodDecl 0x55860ae66368 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55860ae662d8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55860ae664b8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55860ae66428 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55860ae66638 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55860ae66570 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55860ae66700 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55860ae667c0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55860ae66880 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55860ae66920 <col:49> "" ""
|-CXXMethodDecl 0x55860ae669b0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55860ae66a70 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55860ae66b60 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55860ae66c28 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55860ae66ce8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55860ae66da8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55860ae66ea0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55860ae66f68 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55860ae67030 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55860ae67208 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55860ae670e8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55860ae67168 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55860ae67430 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55860ae672d0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55860ae67350 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55860ae67540 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55860ae675a8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55860ae675d0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55860ae676e8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55860ae67788 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55860ae677e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55860ae67848 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55860ae678f8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55860ae67960 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55860ae67b98 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55860ae67be8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860ae67b78 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55860ae67a88 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55860ae67a30 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55860ae67a70 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55860ae67a50 <col:32> 'int' 8
|-CXXRecordDecl 0x55860ae67c00 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55860ae67d18 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55860ae67dc0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55860ae67e28 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55860ae67eb8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55860ae6ddb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55860ae6e1e8 <col:12>
| |-CXXConstructorDecl 0x55860ae6deb8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55860ae6dfc8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55860ae67dc0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55860ae70770 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55860ae70740 <col:12> 'const char *const' lvalue .data 0x55860ae67dc0
| | |     `-DeclRefExpr 0x55860ae70720 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae6dfc8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55860ae67e28 'length' 'int'
| | | `-ImplicitCastExpr 0x55860ae70800 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55860ae707d0 <col:12> 'const int' lvalue .length 0x55860ae67e28
| | |     `-DeclRefExpr 0x55860ae707b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae6dfc8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55860ae67eb8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55860ae70890 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55860ae70860 <col:12> 'String::memo_t *const' lvalue .memo 0x55860ae67eb8
| | |     `-DeclRefExpr 0x55860ae70840 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae6dfc8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55860ae708e8 <col:12>
| |-CXXConstructorDecl 0x55860ae6e068 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860ae6e068
| | `-ParmVarDecl 0x55860ae6e178 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55860ae73660 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55860ae7f098 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55860ae7f1a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55860ae7f6c0 <col:12>
| |   |-BinaryOperator 0x55860ae7f4d8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55860ae7f490 <col:12> 'const char *' lvalue ->data 0x55860ae67dc0
| |   | | `-CXXThisExpr 0x55860ae7f480 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55860ae7f4c0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55860ae7f450 <col:12> 'const char *const' lvalue .data 0x55860ae67dc0
| |   |     `-DeclRefExpr 0x55860ae7f430 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae7f1a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55860ae7f5a0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55860ae7f558 <col:12> 'int' lvalue ->length 0x55860ae67e28
| |   | | `-CXXThisExpr 0x55860ae7f548 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55860ae7f588 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55860ae7f518 <col:12> 'const int' lvalue .length 0x55860ae67e28
| |   |     `-DeclRefExpr 0x55860ae7f4f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae7f1a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55860ae7f668 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55860ae7f620 <col:12> 'String::memo_t *' lvalue ->memo 0x55860ae67eb8
| |   | | `-CXXThisExpr 0x55860ae7f610 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55860ae7f650 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55860ae7f5e0 <col:12> 'String::memo_t *const' lvalue .memo 0x55860ae67eb8
| |   |     `-DeclRefExpr 0x55860ae7f5c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55860ae7f1a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55860ae7f6b0 <col:12>
| |     `-UnaryOperator 0x55860ae7f698 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55860ae7f688 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55860ae7f218 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55860ae7f218
|   `-ParmVarDecl 0x55860ae7f328 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55860ae67f30 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55860ae68178 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55860ae67f98 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55860ae68018 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55860ae68090 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55860ae6dd70 <col:79, line:261:5>
|   |-BinaryOperator 0x55860ae6d9e8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55860ae6d980 <col:2, col:5> 'const char *' lvalue .data 0x55860ae67dc0
|   | | `-MemberExpr 0x55860ae6d950 <col:2> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|   | |   `-CXXThisExpr 0x55860ae6d940 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55860ae6d9d0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55860ae6d9b0 <col:12> 'const char *' lvalue ParmVar 0x55860ae67f98 'data' 'const char *'
|   |-BinaryOperator 0x55860ae6dab0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55860ae6da48 <col:2, col:5> 'int' lvalue .length 0x55860ae67e28
|   | | `-MemberExpr 0x55860ae6da18 <col:2> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|   | |   `-CXXThisExpr 0x55860ae6da08 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55860ae6da98 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55860ae6da78 <col:14> 'int' lvalue ParmVar 0x55860ae68018 'length' 'int'
|   `-IfStmt 0x55860ae6dd58 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55860ae6dbd0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55860ae6dbb8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55860ae6db98 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55860ae6db78 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55860ae6db10 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55860ae67eb8
|     |       | `-MemberExpr 0x55860ae6dae0 <col:7> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|     |       |   `-CXXThisExpr 0x55860ae6dad0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55860ae6db60 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860ae6db40 <col:17> 'String::memo_t *' lvalue ParmVar 0x55860ae68090 'memo' 'String::memo_t *'
|     `-CallExpr 0x55860ae6dd30 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55860ae6dd18 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55860ae6dc20 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55860ae58b70 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55860ae6dc88 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55860ae67788
|         `-ImplicitCastExpr 0x55860ae6dc70 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55860ae6dc50 <col:27> 'String::memo_t *' lvalue ParmVar 0x55860ae68090 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55860ae68428 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55860ae68248 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55860ae682c8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55860ae68340 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55860ae67f30 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55860ae6e1f8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55860ae6e388 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55860ae6e2f0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55860ae6e260 <col:2> '<bound member function type>' ->assign_memo 0x55860ae68178
|     | `-ImplicitCastExpr 0x55860ae6e328 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55860ae6e250 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55860ae6e340 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55860ae6e290 <col:14> 'const char *' lvalue ParmVar 0x55860ae68248 'data' 'const char *'
|     |-ImplicitCastExpr 0x55860ae6e358 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55860ae6e2b0 <col:20> 'int' lvalue ParmVar 0x55860ae682c8 'length' 'int'
|     `-ImplicitCastExpr 0x55860ae6e370 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55860ae6e2d0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55860ae68340 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55860ae685b8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55860ae684f8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55860ae6e5e0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55860ae6e560 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55860ae6e3b0 <col:2> '<bound member function type>' ->assign_memo 0x55860ae68178
|     | `-CXXThisExpr 0x55860ae6e3a0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55860ae6e598 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55860ae6e430 <col:14, col:19> 'const char *' lvalue .data 0x55860ae67dc0
|     |   `-MemberExpr 0x55860ae6e400 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55860ae67f30
|     |     `-DeclRefExpr 0x55860ae6e3e0 <col:14> 'const String' lvalue ParmVar 0x55860ae684f8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55860ae6e5b0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55860ae6e4b0 <col:25, col:30> 'int' lvalue .length 0x55860ae67e28
|     |   `-MemberExpr 0x55860ae6e480 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55860ae67f30
|     |     `-DeclRefExpr 0x55860ae6e460 <col:25> 'const String' lvalue ParmVar 0x55860ae684f8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55860ae6e5c8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55860ae6e530 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55860ae67eb8
|         `-MemberExpr 0x55860ae6e500 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55860ae67f30
|           `-DeclRefExpr 0x55860ae6e4e0 <col:38> 'const String' lvalue ParmVar 0x55860ae684f8 'x' 'const String &'
|-CXXMethodDecl 0x55860ae68680 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55860ae6efa0 <col:31, line:278:5>
|   `-IfStmt 0x55860ae6ef88 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55860ae6e680 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55860ae6e668 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55860ae6e638 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55860ae67eb8
|     |     `-MemberExpr 0x55860ae6e608 <col:6> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|     |       `-CXXThisExpr 0x55860ae6e5f8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55860ae6ef60 <col:15, line:277:2>
|       |-ParenExpr 0x55860ae6eb30 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55860ae6eb00 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55860ae6e790 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55860ae6e778 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55860ae6e760 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55860ae6e720 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55860ae67788
|       |   |       `-ImplicitCastExpr 0x55860ae6e708 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55860ae6e6d8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55860ae67eb8
|       |   |           `-MemberExpr 0x55860ae6e6a8 <col:27> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|       |   |             `-CXXThisExpr 0x55860ae6e698 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55860ae6e7f0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55860ae6e7d0 <col:54> 'int' 0
|       |   `-CallExpr 0x55860ae6ea60 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55860ae6ea48 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55860ae6e9c8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55860abcee10 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55860ae6eaa0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55860ae6e8d8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55860ae6eab8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55860ae6e908 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55860ae6ead0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55860ae6e940 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55860ae6eae8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55860ae6e9b0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55860ae6e998 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55860ae6e960 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55860ae6ee80 <line:274:6, line:275:22>
|       | |-CallExpr 0x55860ae6ed40 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55860ae6ed28 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55860ae6eca0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55860ae59fb0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55860ae6ec70 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55860ae67788
|       | |   `-ImplicitCastExpr 0x55860ae6ec58 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55860ae6ec28 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55860ae67eb8
|       | |       `-MemberExpr 0x55860ae6ebf8 <col:40> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|       | |         `-CXXThisExpr 0x55860ae6ebe8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55860ae6ee40 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55860ae6ee28 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55860ae6ed68 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55860ae69358 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55860ae6ee68 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55860ae6edc8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55860ae67eb8
|       |       `-MemberExpr 0x55860ae6ed98 <col:15> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|       |         `-CXXThisExpr 0x55860ae6ed88 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55860ae6ef40 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55860ae6eed8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55860ae67eb8
|         | `-MemberExpr 0x55860ae6eea8 <col:6> 'String::rep_t' lvalue ->_r 0x55860ae67f30
|         |   `-CXXThisExpr 0x55860ae6ee98 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55860ae6ef28 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55860ae6ef08 <col:16> 'int' 0
|-CXXMethodDecl 0x55860ae68918 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55860ae68738 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55860ae687b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55860ae68830 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55860ae689f0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55860ae68c40 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55860ae68aa8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55860ae68b28 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55860ae68ba0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55860ae68e28 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55860ae68d10 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55860ae68d90 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55860ae68f28 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55860ae6f078 <col:41, line:286:5>
|   `-ReturnStmt 0x55860ae6f068 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55860ae6f038 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55860ae6f000 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55860ae6efe8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55860ae6efc8 <col:46> 'int' 1
|-CXXMethodDecl 0x55860ae691c8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55860ae68fe0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55860ae69060 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55860ae690e0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55860ae69358 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55860ae69290 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55860ae69428 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55860ae695f8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55860ae694e0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55860ae69560 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55860ae696b8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55860ae6d0e0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55860ae6d1e8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55860ae6d260 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55860ae6d2d8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55860ae6d340 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55860ae6d440 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55860ae6d490 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860ae6d420 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55860ae6d400 <col:22> 'int' 14
|-CXXMethodDecl 0x55860ae6d6a8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55860ae6d4c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55860ae6d540 <col:38> col:41 'int'
| `-ParmVarDecl 0x55860ae6d5c0 <col:43> col:46 'int'
|-FriendDecl 0x55860ae6d7b0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55860ae6d840 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860aeb1080 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55860aeb1258 prev 0x55860aeb1080 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55860aeb12e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55860aeb1310 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860aeb3410 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55860aeb33c0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55860aeb33a0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55860aeb1528 'type'
|     `-SubstTemplateTypeParmType 0x55860aeb14f0 'String' sugar
|       |-TemplateTypeParmType 0x55860ae23630 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae235e0 'T'
|       `-RecordType 0x55860ae5eb40 'String'
|         `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb34c8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55860aeb3490 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55860aeb3470 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55860aeb3410 'type'
|     `-ElaboratedType 0x55860aeb33c0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55860aeb33a0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55860aeb1528 'type'
|         `-SubstTemplateTypeParmType 0x55860aeb14f0 'String' sugar
|           |-TemplateTypeParmType 0x55860ae23630 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55860ae235e0 'T'
|           `-RecordType 0x55860ae5eb40 'String'
|             `-CXXRecord 0x55860ae5eab0 'String'
|-CXXMethodDecl 0x55860aeb3648 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55860aeb3558 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55860aeb3738 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55860aeb3818 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55860aeb3818
|-CXXMethodDecl 0x55860aeb3ae8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55860aeb39f0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55860aeb3d28 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860aeb3ba0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860aeb3c18 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860aeb3ef8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860aeb3de8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860aeb3e60 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860aeb4058 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55860aeb4128 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55860aeb4378 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860aeb41e8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55860aeb4260 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860aeb45d8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55860aeb4448 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55860aeb44c0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860aeb4798 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55860aeb46a8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860aeb4958 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55860aeb4860 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860aeb4a10 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860aeb4ac0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55860aeb4cf8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55860aeb4b70 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860aeb4be8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55860aeb4f98 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55860aeb4ea0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55860aeb5060 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55860aeb50b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55860aeb5100 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860ae92ee0 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55860aeafae8 prev 0x55860ae92ee0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55860aeb0ff0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55860aeb0fa0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55860aeb0f80 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55860aeb0e30 'type'
|     `-SubstTemplateTypeParmType 0x55860aeb0cc0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55860ad4cea0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55860ad4ce48 'F'
|       `-RecordType 0x55860aeb0920 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55860aeb0840 'typed_array_memory'
|-FieldDecl 0x55860aeb5150 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55860aeb51a0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55860aeb51d8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|   |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55860ae30308 'T'
|   `-RecordType 0x55860ae5eb40 'String'
|     `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb5268 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55860aeb5230 'String &'
|   `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|     |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860ae30308 'T'
|     `-RecordType 0x55860ae5eb40 'String'
|       `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb52f8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55860aeb52c0 'const String &'
|   `-QualType 0x55860aeafb81 'const String' const
|     `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-RecordType 0x55860ae5eb40 'String'
|         `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb5388 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55860aeb5350 'String *'
|   `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|     |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860ae30308 'T'
|     `-RecordType 0x55860ae5eb40 'String'
|       `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb5418 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55860aeb53e0 'const String *'
|   `-QualType 0x55860aeafb81 'const String' const
|     `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-RecordType 0x55860ae5eb40 'String'
|         `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb6070 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55860aeb6020 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55860aeb6000 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55860aeb5f38 'type'
|     `-LValueReferenceType 0x55860aeb5f00 'const String &'
|       `-QualType 0x55860aeb5ca1 'const String' const
|         `-SubstTemplateTypeParmType 0x55860aeb5ca0 'String' sugar
|           |-TemplateTypeParmType 0x55860ad55190 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55860ad55138 'T'
|           `-RecordType 0x55860ae5eb40 'String'
|             `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb60d8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55860aeb52c0 'const String &'
|   `-QualType 0x55860aeafb81 'const String' const
|     `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-RecordType 0x55860ae5eb40 'String'
|         `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb6130 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860aeb6198 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55860aeb5350 'String *'
|   `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|     |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860ae30308 'T'
|     `-RecordType 0x55860ae5eb40 'String'
|       `-CXXRecord 0x55860ae5eab0 'String'
|-TypedefDecl 0x55860aeb6200 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55860aeb53e0 'const String *'
|   `-QualType 0x55860aeafb81 'const String' const
|     `-SubstTemplateTypeParmType 0x55860aeafb80 'String' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-RecordType 0x55860ae5eb40 'String'
|         `-CXXRecord 0x55860ae5eab0 'String'
|-EnumDecl 0x55860aeb6258 <line:134:5> col:5
| `-EnumConstantDecl 0x55860aeb6350 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55860aeb6330 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55860ae31d48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55860ae31d20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55860ae31d00 <col:40> 'int' 1
|-CXXConstructorDecl 0x55860aeb63d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55860aeb6668 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860aeb6490 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860aeb6530 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55860aeb68f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55860aeb67e0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55860aeb6bb8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55860aeb6aa0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55860aeb78a0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55860aeb7780 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55860aeb7bb0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55860aeb7a90 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55860aeb7ea0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860aeb7ce8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860aeb7d60 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860aeb7fc8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55860aeb8078 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860aeb80d0 <col:30> Inherited
|-CXXMethodDecl 0x55860aeb8118 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55860aeb81c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860aeb8220 <col:30> Inherited
|-CXXMethodDecl 0x55860aeb82e8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860aeb8398 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860aeb83f0 <col:30> Inherited
|-CXXMethodDecl 0x55860aeb8438 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860aeb84e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860aeb8540 <col:30> Inherited
|-CXXMethodDecl 0x55860aeb8588 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860aeb8638 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860aeb8690 <col:30> Inherited
|-CXXMethodDecl 0x55860aeb86d8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55860aeb8788 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860aeb87e0 <col:30> Inherited
|-CXXMethodDecl 0x55860aeb8808 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860aeb88b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860aeb8968 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55860aeb8b28 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860aeb8a18 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860aeb8a90 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860aeb8c78 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55860aeb8be8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860aeb8e28 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55860aeb8d30 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860aeb8ee0 <col:20>
| `-OptimizeNoneAttr 0x55860aeb8f38 <col:30>
|-CXXMethodDecl 0x55860aeb9058 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55860aeb8f60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860aeb9110 <col:20>
| `-OptimizeNoneAttr 0x55860aeb9168 <col:30>
|-CXXMethodDecl 0x55860aeb9220 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860aeb9190 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860aeb9368 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860aeb92d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860aeb9498 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55860aeb95c8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55860aeb9698 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55860aeb9768 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55860aeb98a8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860aeb9818 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860aeb99f0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860aeb9960 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860aeb9b38 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55860aeb9aa8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860aeb9bf0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55860aeb9cf0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55860aeb9c60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860aeb9da8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55860aeb9e68 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55860aeb9f68 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55860aeba0e8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55860aeba028 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55860aeba8a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55860aeba1a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55860aeba808 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55860aeba708 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55860aeba988 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860aebaad8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55860aebaa48 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860aebab90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55860aebadd8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55860aebac50 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55860aebacc8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55860aebaf68 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55860aebaea8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55860aebb178 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55860aebb030 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55860aebb0a8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55860aebb238 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55860aebb498 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55860aebb3a0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55860aebb568 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55860aebb568

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b07c6e0 prev 0x55860b07b248 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860b07c7d8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55860b07c868 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55860b07c9a8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55860b07c8a0 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55860b07ddf0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55860b07ddd0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55860b07d970 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55860b07de80 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55860b07de40 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55860b07c8a0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55860b07d9d8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55860b07df00 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55860b07dec0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55860b07da38 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55860b07df40 <col:54> 'bool' false
| `-CompoundStmt 0x55860b07e048 <col:61, line:38:5>
|   `-BinaryOperator 0x55860b07e028 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55860b07dfc0 <col:9> 'const Element *' lvalue ->_context 0x55860b07d910
|     | `-CXXThisExpr 0x55860b07dfb0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55860b07e010 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55860b07dff0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55860b07cbb8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b07ca68 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55860b07cae0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55860b07de28 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55860b07de08 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55860b07d910 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55860b07e0a0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55860b07e060 <col:20> 'const Element *' lvalue ParmVar 0x55860b07ca68 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55860b07d970 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55860b07e120 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55860b07e0e0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55860b07cae0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55860b07d9d8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55860b07e1a0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55860b07e160 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55860b07da38 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55860b07e1e0 <col:73> 'bool' false
| `-CompoundStmt 0x55860b07e258 <col:80, line:46:5>
|-CXXMethodDecl 0x55860b07cce8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55860b07e2d0 <col:36, line:51:5>
|   `-ReturnStmt 0x55860b07e2c0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55860b07e2a8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55860b07e278 <col:16> 'const Element *const' lvalue ->_context 0x55860b07d910
|         `-CXXThisExpr 0x55860b07e268 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55860b07cdd8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55860b07e350 <col:32, line:57:5>
|   `-ReturnStmt 0x55860b07e340 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55860b07e328 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55860b07e2f8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55860b07d970
|         `-CXXThisExpr 0x55860b07e2e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55860b07ce98 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55860b07d020 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55860b07cf50 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55860b07d170 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55860b07d0e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55860b07d2c0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55860b07d230 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55860b07d4c8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55860b07d378 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55860b07d3f0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55860b07d820 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55860b07d588 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55860b07d608 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55860b07d6d0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55860b07d8d8 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55860b07d910 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55860b07d970 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55860b07d9d8 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55860b07da38 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55860b07da88 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55860b07da88
| `-ParmVarDecl 0x55860b07db98 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55860b07dc38 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55860b07dc38
| `-ParmVarDecl 0x55860b07dd48 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55860b169e58 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860b09d970 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55860b09db48 prev 0x55860b09d970 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55860b09dbd8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55860b09dc00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b09f7d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55860b09f780 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55860b09e0b0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55860b09dfb0 'type'
|     `-TemplateSpecializationType 0x55860b09df40 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55860b09de20 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55860b09de00 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55860b09dde0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55860b09df20 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55860b09de40 'char_array'
|-TypedefDecl 0x55860b0a24c8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55860b0a2490 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55860b0a2470 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55860b09f7d0 'type'
|     `-ElaboratedType 0x55860b09f780 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55860b09e0b0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55860b09dfb0 'type'
|         `-TemplateSpecializationType 0x55860b09df40 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55860b09de20 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55860b09de00 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55860b09dde0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55860b09df20 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55860b09de40 'char_array'
|-CXXMethodDecl 0x55860b0a2648 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55860b0a2558 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55860b0a2738 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55860b0a2818 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55860b0a2ae8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55860b0a29f0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55860b0a2d28 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860b0a2ba0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860b0a2c18 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860b0a2ef8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860b0a2de8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860b0a2e60 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860b0a3058 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55860b0a3128 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55860b0a3378 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860b0a31e8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55860b0a3260 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860b0a35d8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55860b0a3448 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55860b0a34c0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860b0a3798 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55860b0a36a8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860b0a3958 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55860b0a3860 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860b0a3a10 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860b0a3ac0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55860b0a3cf8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55860b0a3b70 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55860b0a3be8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55860b0a3f98 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55860b0a3ea0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55860b0a4060 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55860b0a40b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55860b0a4100 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860b09c378 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55860b09c588 prev 0x55860b09c378 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55860b09d8e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55860b09d890 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55860b09d870 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55860b09d720 'type'
|     `-SubstTemplateTypeParmType 0x55860b09d540 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55860ad4c720 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ad4c6c8 'T'
|       `-RecordType 0x55860b09d090 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55860b09cfa8 'sized_array_memory'
|-FieldDecl 0x55860b0a4150 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55860b0a41a0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55860b0a41d8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|   |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55860ae30308 'T'
|   `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a4268 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55860b0a4230 'int &'
|   `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|     |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860ae30308 'T'
|     `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a4328 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55860b0a42f0 'const int &'
|   `-QualType 0x55860b09c621 'const int' const
|     `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a43b8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55860b0a4380 'int *'
|   `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|     |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860ae30308 'T'
|     `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a4448 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55860b0a4410 'const int *'
|   `-QualType 0x55860b09c621 'const int' const
|     `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a5030 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55860b0a4fe0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55860b0a4fc0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55860b0a4f50 'type'
|     `-SubstTemplateTypeParmType 0x55860b0a4d10 'int' sugar
|       |-TemplateTypeParmType 0x55860ad56ad0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ad56a80 'T'
|       `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a5098 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55860b0a42f0 'const int &'
|   `-QualType 0x55860b09c621 'const int' const
|     `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a50f0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a5158 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55860b0a4380 'int *'
|   `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|     |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55860ae30308 'T'
|     `-BuiltinType 0x55860ab33580 'int'
|-TypedefDecl 0x55860b0a51c0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55860b0a4410 'const int *'
|   `-QualType 0x55860b09c621 'const int' const
|     `-SubstTemplateTypeParmType 0x55860b09c620 'int' sugar
|       |-TemplateTypeParmType 0x55860ae30360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55860ae30308 'T'
|       `-BuiltinType 0x55860ab33580 'int'
|-EnumDecl 0x55860b0a5218 <line:134:5> col:5
| `-EnumConstantDecl 0x55860b0a5310 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55860b0a52f0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55860ae31d48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55860ae31d20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55860ae31d00 <col:40> 'int' 1
|-CXXConstructorDecl 0x55860b0a5398 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55860b0a55e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860b0a5450 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860b0a54f0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55860b0a58a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55860b0a5790 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55860b0a5b68 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55860b0a5a50 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55860b0a5eb0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55860b0a5d90 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55860b0a61c0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55860b0a60a0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55860b0a6f38 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860b0a62f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860b0a6370 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860b0a7068 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55860b0a7148 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860b0a71a0 <col:30> Inherited
|-CXXMethodDecl 0x55860b0a71e8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55860b0a7298 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860b0a72f0 <col:30> Inherited
|-CXXMethodDecl 0x55860b0a73b8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860b0a7468 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860b0a74c0 <col:30> Inherited
|-CXXMethodDecl 0x55860b0a7508 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860b0a75b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860b0a7610 <col:30> Inherited
|-CXXMethodDecl 0x55860b0a7658 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860b0a7708 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860b0a7760 <col:30> Inherited
|-CXXMethodDecl 0x55860b0a77a8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55860b0a7858 <col:20> Inherited
| `-OptimizeNoneAttr 0x55860b0a78b0 <col:30> Inherited
|-CXXMethodDecl 0x55860b0a78d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860b0a7988 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55860b0a7a38 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55860b0a7bf8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860b0a7ae8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55860b0a7b60 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860b0a7d48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55860b0a7cb8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860b0a7ef8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55860b0a7e00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860b0a7fb0 <col:20>
| `-OptimizeNoneAttr 0x55860b0a8008 <col:30>
|-CXXMethodDecl 0x55860b0a8128 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55860b0a8030 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55860b0a81e0 <col:20>
| `-OptimizeNoneAttr 0x55860b0a8238 <col:30>
|-CXXMethodDecl 0x55860b0a82f0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860b0a8260 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860b0a8438 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860b0a83a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860b0a8568 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55860b0a8698 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55860b0a8768 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55860b0a8838 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55860b0a8978 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55860b0a88e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860b0a8ac0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55860b0a8a30 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55860b0a8c08 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55860b0a8b78 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860b0a8cc0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55860b0a8dc0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55860b0a8d30 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55860b0a8e78 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55860b0a8f38 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55860b0a9038 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55860b0a91b8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55860b0a90f8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55860b0a9978 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55860b0a9270 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55860b0a98d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55860b0a97d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55860b0a9a58 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55860b0a9ba8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55860b0a9b18 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860b0a9c60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55860b0a9ea8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55860b0a9d20 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55860b0a9d98 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55860b0aa068 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55860b0a9f78 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55860b0aa2b8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55860b0aa130 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55860b0aa1a8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55860b0aa378 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55860b0aa5d8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55860b0aa4e0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55860b0aa6a8 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b094518 prev 0x55860b0831c8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55860b094610 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55860b094700 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55860b0be590 <col:16, line:828:9>
|-CXXDestructorDecl 0x55860b0947f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55860b0be5a0 <col:25, line:830:9>
|-CXXMethodDecl 0x55860b0948f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55860b0949a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55860b094a48 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55860b094a48
| `-ParmVarDecl 0x55860b094b58 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55860b095318 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55860b095318
  `-ParmVarDecl 0x55860b095428 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b082fd8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55860b083138 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55860b0831c8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55860b083280 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55860b083388 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55860b0832b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860b0ac2d8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860b0ac2b8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55860b0836a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55860b083520 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55860b083598 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860b0ac310 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860b0ac2f0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55860b083880 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b083770 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55860b0837e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860b0ac348 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860b0ac328 <col:55> 'int' 0
|-CXXConstructorDecl 0x55860b083c38 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55860b083a20 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55860b083a98 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55860b083b10 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55860b0ac380 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55860b0ac360 <col:31> 'int' 0
|-CXXConstructorDecl 0x55860b083df8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55860b083d38 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55860b083ef0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55860b0840d8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55860b083fe0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55860b0841c8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55860b0ac770 <col:24, line:291:5>
|   `-ReturnStmt 0x55860b0ac760 <line:290:9, col:79>
|     `-BinaryOperator 0x55860b0ac740 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55860b0ac5d8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55860b0ac530 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55860b0ac510 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55860b0ac408 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55860b0ac3f0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55860b0ac3d8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55860b0ac3a8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55860b09c310
|       | |   |       `-CXXThisExpr 0x55860b0ac398 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55860b0ac4f8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55860b0ac4e0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55860b0ac4a8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55860b0ac478 <col:28, col:35> '<bound member function type>' ->size 0x55860aeb8808
|       | |           `-ImplicitCastExpr 0x55860b0ac4c8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55860b0ac460 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55860b0ac430 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55860b09c310
|       | |                 `-CXXThisExpr 0x55860b0ac420 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55860b0ac5c0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55860b0ac5a8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55860b0ac590 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55860b0ac560 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55860b0aa7f0
|       |         `-CXXThisExpr 0x55860b0ac550 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55860b0ac720 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55860b0ac708 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55860b0ac6f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55860b0ac6b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55860b0ac698 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55860b0ac608 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55860b0aa918
|         |     |   `-CXXThisExpr 0x55860b0ac5f8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55860b0ac638 <col:73> 'int' 0
|         `-IntegerLiteral 0x55860b0ac6d0 <col:79> 'int' 0
|-CXXMethodDecl 0x55860b084288 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55860b0ac948 <col:32, line:296:5>
|   `-ReturnStmt 0x55860b0ac938 <line:295:9, col:49>
|     `-BinaryOperator 0x55860b0ac918 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55860b0ac7f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55860b0ac7e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55860b0ac7c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55860b0ac798 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55860b0aa7f0
|       |       `-CXXThisExpr 0x55860b0ac788 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55860b0ac8f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55860b0ac8e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55860b0ac8c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55860b0ac888 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55860b0ac870 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55860b0ac820 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55860b0aa918
|         |     |   `-CXXThisExpr 0x55860b0ac810 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55860b0ac850 <col:43> 'int' 0
|         `-IntegerLiteral 0x55860b0ac8a8 <col:49> 'int' 0
|-CXXMethodDecl 0x55860b084378 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55860b0acb58 <col:19, line:306:5>
|   |-IfStmt 0x55860b0aca78 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55860b0ac9b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55860b0ac9a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55860b0ac970 <col:13> 'Vector<String> *' lvalue ->_conf 0x55860b09c310
|   | |     `-CXXThisExpr 0x55860b0ac960 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55860b0aca58 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55860b0aca28 <col:13, col:20> '<bound member function type>' ->clear 0x55860aebb238
|   |     `-ImplicitCastExpr 0x55860b0aca10 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55860b0ac9e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55860b09c310
|   |         `-CXXThisExpr 0x55860b0ac9d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55860b0acb00 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55860b0acad0 <col:9, col:16> '<bound member function type>' .clear 0x55860b0aa378
|   |   `-MemberExpr 0x55860b0acaa0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55860b0aa790
|   |     `-CXXThisExpr 0x55860b0aca90 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55860b0acb48 <line:305:9, col:17>
|     `-UnaryOperator 0x55860b0acb30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860b0acb20 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860b0845f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55860b084500 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55860b084778 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55860b0846b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55860b084af8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55860b084820 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55860b084a58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55860b0848c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55860b084940 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55860b0ace68 <col:67, line:327:5>
|     |-WhileStmt 0x55860b0ace18 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55860b0acc30 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55860b0acbc0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55860aecf2f0 0x55860ae8d3e0 0x55860ae8d090 0x55860ae8c980 0x55860ae5dc00 0x55860ae19f00
|     | | |-DeclRefExpr 0x55860b0acb80 <col:16> 'Iter' lvalue ParmVar 0x55860b0848c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55860b0acba0 <col:25> 'Iter' lvalue ParmVar 0x55860b084940 'end' 'Iter'
|     | `-CompoundStmt 0x55860b0acdf8 <col:30, line:325:9>
|     |   |-CallExpr 0x55860b0acd98 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55860b0acc78 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55860b0acd68 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55860b0accf8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|     |   |   `-DeclRefExpr 0x55860b0accd8 <col:24> 'Iter' lvalue ParmVar 0x55860b0848c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55860b0acde0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55860b0acdc0 <col:15> 'Iter' lvalue ParmVar 0x55860b0848c8 'begin' 'Iter'
|     `-ReturnStmt 0x55860b0ace58 <line:326:9, col:17>
|       `-UnaryOperator 0x55860b0ace40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0ace30 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860b084c00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55860b084b70 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55860b084d48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55860b084cb8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55860b084e10 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55860b0acf48 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55860b0acee8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55860b0ace98 <col:9> '<bound member function type>' ->reset_from 0x55860b0aac98
|   | | `-CXXThisExpr 0x55860b0ace88 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55860b0acec8 <col:20> 'int' 0
|   `-ReturnStmt 0x55860b0acf38 <line:352:9, col:17>
|     `-UnaryOperator 0x55860b0acf20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860b0acf10 <col:17> 'Args *' this
|-VarDecl 0x55860b084ec8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860b084f30 <col:38> 'int' 1
|-VarDecl 0x55860b084fc0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860b085028 <col:39> 'int' 2
|-VarDecl 0x55860b0850b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860b085120 <col:39> 'int' 4
|-VarDecl 0x55860b0851b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55860b085218 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55860b085598 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55860b085290 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b0854f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55860b085340 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b0853e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55860b0ad0a0 <col:43, line:371:5>
|     `-ReturnStmt 0x55860b0ad090 <line:370:9, col:34>
|       `-CallExpr 0x55860b0ad058 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0acf78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0acff8 <col:21> 'const char *' lvalue ParmVar 0x55860b085340 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0ad018 <col:30> 'int' 0
|         `-DeclRefExpr 0x55860b0ad038 <col:33> 'T' lvalue ParmVar 0x55860b0853e8 'x' 'T &'
|-FunctionTemplateDecl 0x55860b0858e0 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55860b085600 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b085840 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55860b0856b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b085758 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55860b0ad1f0 <col:45, line:375:5>
|     `-ReturnStmt 0x55860b0ad1e0 <line:374:9, col:42>
|       `-CallExpr 0x55860b0ad1a8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ad0c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ad148 <col:21> 'const char *' lvalue ParmVar 0x55860b0856b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0ad168 <col:30> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55860b0ad188 <col:41> 'T' lvalue ParmVar 0x55860b085758 'x' 'T &'
|-FunctionTemplateDecl 0x55860b085c18 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55860b085948 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55860b085b78 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55860b085a00 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55860b085aa8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55860b0ad340 <col:45, line:379:5>
| |   `-ReturnStmt 0x55860b0ad330 <line:378:9, col:43>
| |     `-CallExpr 0x55860b0ad2f8 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55860b0ad218 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55860b0ad298 <col:21> 'const char *' lvalue ParmVar 0x55860b085a00 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55860b0ad2b8 <col:30> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int'
| |       `-DeclRefExpr 0x55860b0ad2d8 <col:42> 'T' lvalue ParmVar 0x55860b085aa8 'x' 'T &'
| `-CXXMethodDecl 0x55860b16a368 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55860b16a180 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55860b16a258 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x55860b085f48 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55860b085c80 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b085ea8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55860b085d30 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b085dd8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55860b0ad540 <col:46, line:383:5>
|     `-ReturnStmt 0x55860b0ad530 <line:382:9, col:55>
|       `-CallExpr 0x55860b0ad4f8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ad368 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ad3e8 <col:21> 'const char *' lvalue ParmVar 0x55860b085d30 'keyword' 'const char *'
|         |-BinaryOperator 0x55860b0ad4b8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55860b0ad468 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55860b0ad448 <col:30> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55860b0ad4a0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55860b0ad480 <col:42> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55860b0ad4d8 <col:54> 'T' lvalue ParmVar 0x55860b085dd8 'x' 'T &'
|-FunctionTemplateDecl 0x55860b086348 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55860b085fb0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b0862a8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55860b086060 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b0860e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55860b086188 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55860b0ad680 <col:54, line:388:5>
|     |-CallExpr 0x55860b0ad608 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0ad558 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55860b0ad598 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55860b0ad5a8 <col:30> 'const char *' lvalue ParmVar 0x55860b086060 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860b0ad5c8 <col:39> 'int' lvalue ParmVar 0x55860b0860e0 'flags' 'int'
|     | `-DeclRefExpr 0x55860b0ad5e8 <col:46> 'T' lvalue ParmVar 0x55860b086188 'x' 'T &'
|     `-ReturnStmt 0x55860b0ad670 <line:387:9, col:17>
|       `-UnaryOperator 0x55860b0ad658 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0ad648 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b0867f8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55860b0863b8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860b086438 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860b086758 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55860b0864f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b086598 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55860b086638 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860b0ad7f0 <col:74, line:403:5>
|     `-ReturnStmt 0x55860b0ad7e0 <line:402:9, col:56>
|       `-CallExpr 0x55860b0ad7a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ad6b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ad720 <col:28> 'const char *' lvalue ParmVar 0x55860b0864f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0ad740 <col:37> 'int' 0
|         |-DeclRefExpr 0x55860b0ad760 <col:40> 'T' lvalue ParmVar 0x55860b086598 'x' 'T &'
|         `-DeclRefExpr 0x55860b0ad780 <col:43> 'const V' lvalue ParmVar 0x55860b086638 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860b086c68 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55860b086868 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860b0868e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860b086bc8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55860b0869a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b086a48 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55860b086ae8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860b0ad958 <col:76, line:407:5>
|     `-ReturnStmt 0x55860b0ad948 <line:406:9, col:65>
|       `-CallExpr 0x55860b0ad908 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ad818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ad888 <col:28> 'const char *' lvalue ParmVar 0x55860b0869a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0ad8a8 <col:37> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int'
|         |-DeclRefExpr 0x55860b0ad8c8 <col:49> 'T' lvalue ParmVar 0x55860b086a48 'x' 'T &'
|         `-DeclRefExpr 0x55860b0ad8e8 <col:52> 'const V' lvalue ParmVar 0x55860b086ae8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860b0871b8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55860b086cd8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860b086d58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860b087118 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55860b086e18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b086e98 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55860b086f38 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55860b086fd8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860b0adac0 <col:85, line:412:5>
|     |-CallExpr 0x55860b0ada40 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0ad970 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55860b0ad9b0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55860b0ad9c0 <col:37> 'const char *' lvalue ParmVar 0x55860b086e18 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860b0ad9e0 <col:46> 'int' lvalue ParmVar 0x55860b086e98 'flags' 'int'
|     | |-DeclRefExpr 0x55860b0ada00 <col:53> 'T' lvalue ParmVar 0x55860b086f38 'x' 'T &'
|     | `-DeclRefExpr 0x55860b0ada20 <col:56> 'const V' lvalue ParmVar 0x55860b086fd8 'default_value' 'const V &'
|     `-ReturnStmt 0x55860b0adab0 <line:411:9, col:17>
|       `-UnaryOperator 0x55860b0ada98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0ada88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b087648 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55860b087230 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b0872a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b0875a8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b087368 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b0873e0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55860b087488 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55860b0adc40 <col:53, line:425:5>
|     `-ReturnStmt 0x55860b0adc30 <line:424:9, col:42>
|       `-CallExpr 0x55860b0adbf0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0adaf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0adb70 <col:21> 'const char *' lvalue ParmVar 0x55860b087368 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0adb90 <col:30> 'int' 0
|         |-DeclRefExpr 0x55860b0adbb0 <col:33> 'P' lvalue ParmVar 0x55860b0873e0 'parser' 'P'
|         `-DeclRefExpr 0x55860b0adbd0 <col:41> 'T' lvalue ParmVar 0x55860b087488 'x' 'T &'
|-FunctionTemplateDecl 0x55860b087a98 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55860b0876b8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b087738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b0879f8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b0877f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b087870 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860b087918 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55860b0addb8 <col:55, line:429:5>
|     `-ReturnStmt 0x55860b0adda8 <line:428:9, col:50>
|       `-CallExpr 0x55860b0add68 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0adc68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0adce8 <col:21> 'const char *' lvalue ParmVar 0x55860b0877f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0add08 <col:30> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55860b0add28 <col:41> 'P' lvalue ParmVar 0x55860b087870 'parser' 'P'
|         `-DeclRefExpr 0x55860b0add48 <col:49> 'T' lvalue ParmVar 0x55860b087918 'x' 'T &'
|-FunctionTemplateDecl 0x55860b087ee8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55860b087b08 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b087b88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b087e48 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b087c48 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b087cc0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860b087d68 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55860b0adf30 <col:55, line:433:5>
|     `-ReturnStmt 0x55860b0adf20 <line:432:9, col:51>
|       `-CallExpr 0x55860b0adee0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0adde0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ade60 <col:21> 'const char *' lvalue ParmVar 0x55860b087c48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0ade80 <col:30> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int'
|         |-DeclRefExpr 0x55860b0adea0 <col:42> 'P' lvalue ParmVar 0x55860b087cc0 'parser' 'P'
|         `-DeclRefExpr 0x55860b0adec0 <col:50> 'T' lvalue ParmVar 0x55860b087d68 'x' 'T &'
|-FunctionTemplateDecl 0x55860b088338 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55860b087f58 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b087fd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b088298 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b088098 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b088110 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55860b0881b8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55860b0ae158 <col:56, line:437:5>
|     `-ReturnStmt 0x55860b0ae148 <line:436:9, col:63>
|       `-CallExpr 0x55860b0ae108 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0adf58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0adfd8 <col:21> 'const char *' lvalue ParmVar 0x55860b088098 'keyword' 'const char *'
|         |-BinaryOperator 0x55860b0ae0a8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55860b0ae058 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55860b0ae038 <col:30> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55860b0ae090 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55860b0ae070 <col:42> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55860b0ae0c8 <col:54> 'P' lvalue ParmVar 0x55860b088110 'parser' 'P'
|         `-DeclRefExpr 0x55860b0ae0e8 <col:62> 'T' lvalue ParmVar 0x55860b0881b8 'x' 'T &'
|-FunctionTemplateDecl 0x55860b088868 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55860b0883a8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b088428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b0887c8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860b0884e8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b088568 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55860b0885e0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55860b088688 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55860b0ae2c0 <col:64, line:442:5>
|     |-CallExpr 0x55860b0ae240 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0ae170 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55860b0ae1b0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55860b0ae1c0 <col:30> 'const char *' lvalue ParmVar 0x55860b0884e8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860b0ae1e0 <col:39> 'int' lvalue ParmVar 0x55860b088568 'flags' 'int'
|     | |-DeclRefExpr 0x55860b0ae200 <col:46> 'P' lvalue ParmVar 0x55860b0885e0 'parser' 'P'
|     | `-DeclRefExpr 0x55860b0ae220 <col:54> 'T' lvalue ParmVar 0x55860b088688 'x' 'T &'
|     `-ReturnStmt 0x55860b0ae2b0 <line:441:9, col:17>
|       `-UnaryOperator 0x55860b0ae298 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0ae288 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b088e68 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55860b0888e0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b088958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55860b0889d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860b088dc8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55860b088aa0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b088b18 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55860b088bb8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55860b088c88 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860b0ae458 <col:84, line:458:5>
|     `-ReturnStmt 0x55860b0ae448 <line:457:9, col:64>
|       `-CallExpr 0x55860b0ae400 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ae2f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ae360 <col:28> 'const char *' lvalue ParmVar 0x55860b088aa0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0ae380 <col:37> 'int' 0
|         |-DeclRefExpr 0x55860b0ae3a0 <col:40> 'P' lvalue ParmVar 0x55860b088b18 'parser' 'P'
|         |-DeclRefExpr 0x55860b0ae3c0 <col:48> 'T' lvalue ParmVar 0x55860b088bb8 'x' 'T &'
|         `-DeclRefExpr 0x55860b0ae3e0 <col:51> 'const V' lvalue ParmVar 0x55860b088c88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860b0893e8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55860b088ee0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b088f58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55860b088fd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860b089348 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55860b0890a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b089118 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55860b0891b8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55860b089258 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860b0ae5e8 <col:86, line:462:5>
|     `-ReturnStmt 0x55860b0ae5d8 <line:461:9, col:73>
|       `-CallExpr 0x55860b0ae590 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ae480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ae4f0 <col:28> 'const char *' lvalue ParmVar 0x55860b0890a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0ae510 <col:37> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int'
|         |-DeclRefExpr 0x55860b0ae530 <col:49> 'P' lvalue ParmVar 0x55860b089118 'parser' 'P'
|         |-DeclRefExpr 0x55860b0ae550 <col:57> 'T' lvalue ParmVar 0x55860b0891b8 'x' 'T &'
|         `-DeclRefExpr 0x55860b0ae570 <col:60> 'const V' lvalue ParmVar 0x55860b089258 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55860b089a78 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55860b089460 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b0894d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55860b089558 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860b0899d8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55860b089620 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b0896a0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55860b089718 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55860b0897b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55860b089888 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55860b0ae778 <col:95, line:467:5>
|     |-CallExpr 0x55860b0ae6f0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0ae600 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55860b0ae640 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55860b0ae650 <col:37> 'const char *' lvalue ParmVar 0x55860b089620 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860b0ae670 <col:46> 'int' lvalue ParmVar 0x55860b0896a0 'flags' 'int'
|     | |-DeclRefExpr 0x55860b0ae690 <col:53> 'P' lvalue ParmVar 0x55860b089718 'parser' 'P'
|     | |-DeclRefExpr 0x55860b0ae6b0 <col:61> 'T' lvalue ParmVar 0x55860b0897b8 'x' 'T &'
|     | `-DeclRefExpr 0x55860b0ae6d0 <col:64> 'const V' lvalue ParmVar 0x55860b089888 'default_value' 'const V &'
|     `-ReturnStmt 0x55860b0ae768 <line:466:9, col:17>
|       `-UnaryOperator 0x55860b0ae750 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0ae740 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b08a058 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55860b089af8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b089b78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860b089bf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860b089fb8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860b089cc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b089d38 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55860b089dd8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860b089e78 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860b0ae920 <col:63, line:481:5>
|     `-ReturnStmt 0x55860b0ae910 <line:480:9, col:47>
|       `-CallExpr 0x55860b0ae8c8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ae7a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ae828 <col:21> 'const char *' lvalue ParmVar 0x55860b089cc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0ae848 <col:30> 'int' 0
|         |-DeclRefExpr 0x55860b0ae868 <col:33> 'P' lvalue ParmVar 0x55860b089d38 'parser' 'P'
|         |-DeclRefExpr 0x55860b0ae888 <col:41> 'T1' lvalue ParmVar 0x55860b089dd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860b0ae8a8 <col:45> 'T2' lvalue ParmVar 0x55860b089e78 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860b08a5d8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55860b08a0d0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08a148 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860b08a1c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860b08a538 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860b08a290 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08a308 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08a3a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860b08a448 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860b0aeac0 <col:65, line:485:5>
|     `-ReturnStmt 0x55860b0aeab0 <line:484:9, col:55>
|       `-CallExpr 0x55860b0aea68 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0ae948 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0ae9c8 <col:21> 'const char *' lvalue ParmVar 0x55860b08a290 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0ae9e8 <col:30> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55860b0aea08 <col:41> 'P' lvalue ParmVar 0x55860b08a308 'parser' 'P'
|         |-DeclRefExpr 0x55860b0aea28 <col:49> 'T1' lvalue ParmVar 0x55860b08a3a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860b0aea48 <col:53> 'T2' lvalue ParmVar 0x55860b08a448 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860b08ab58 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55860b08a650 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08a6c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860b08a748 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860b08aab8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860b08a810 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08a888 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08a928 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860b08a9c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860b0aec60 <col:65, line:489:5>
|     `-ReturnStmt 0x55860b0aec50 <line:488:9, col:56>
|       `-CallExpr 0x55860b0aec08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0aeae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0aeb68 <col:21> 'const char *' lvalue ParmVar 0x55860b08a810 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0aeb88 <col:30> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int'
|         |-DeclRefExpr 0x55860b0aeba8 <col:42> 'P' lvalue ParmVar 0x55860b08a888 'parser' 'P'
|         |-DeclRefExpr 0x55860b0aebc8 <col:50> 'T1' lvalue ParmVar 0x55860b08a928 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860b0aebe8 <col:54> 'T2' lvalue ParmVar 0x55860b08a9c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860b08b0d8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55860b08abd0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08ac48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860b08acc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860b08b038 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860b08ad90 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08ae08 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08aea8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860b08af48 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860b0aeeb0 <col:66, line:493:5>
|     `-ReturnStmt 0x55860b0aeea0 <line:492:9, col:68>
|       `-CallExpr 0x55860b0aee58 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0aec88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0aed08 <col:21> 'const char *' lvalue ParmVar 0x55860b08ad90 'keyword' 'const char *'
|         |-BinaryOperator 0x55860b0aedd8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55860b0aed88 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55860b0aed68 <col:30> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55860b0aedc0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55860b0aeda0 <col:42> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55860b0aedf8 <col:54> 'P' lvalue ParmVar 0x55860b08ae08 'parser' 'P'
|         |-DeclRefExpr 0x55860b0aee18 <col:62> 'T1' lvalue ParmVar 0x55860b08aea8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55860b0aee38 <col:66> 'T2' lvalue ParmVar 0x55860b08af48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55860b08b738 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55860b08b150 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08b1c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860b08b248 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860b08b698 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860b08b310 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08b390 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55860b08b408 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08b4a8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55860b08b548 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55860b0af040 <col:74, line:498:5>
|     |-CallExpr 0x55860b0aefb8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0aeec8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55860b0aef08 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55860b0aef18 <col:30> 'const char *' lvalue ParmVar 0x55860b08b310 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860b0aef38 <col:39> 'int' lvalue ParmVar 0x55860b08b390 'flags' 'int'
|     | |-DeclRefExpr 0x55860b0aef58 <col:46> 'P' lvalue ParmVar 0x55860b08b408 'parser' 'P'
|     | |-DeclRefExpr 0x55860b0aef78 <col:54> 'T1' lvalue ParmVar 0x55860b08b4a8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55860b0aef98 <col:58> 'T2' lvalue ParmVar 0x55860b08b548 'x2' 'T2 &'
|     `-ReturnStmt 0x55860b0af030 <line:497:9, col:17>
|       `-UnaryOperator 0x55860b0af018 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0af008 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b08ba98 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55860b08b7b8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b08b9f8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860b08b870 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08b8e8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55860b0af188 <col:52, line:509:5>
|     `-ReturnStmt 0x55860b0af178 <line:508:9, col:44>
|       `-CallExpr 0x55860b0af140 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0af070 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0af0e0 <col:26> 'const char *' lvalue ParmVar 0x55860b08b870 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0af100 <col:35> 'int' 0
|         `-DeclRefExpr 0x55860b0af120 <col:38> 'P' lvalue ParmVar 0x55860b08b8e8 'parser' 'P'
|-FunctionTemplateDecl 0x55860b08bd98 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55860b08bb00 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b08bcf8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860b08bbb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08bc28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55860b0af2c8 <col:54, line:513:5>
|     `-ReturnStmt 0x55860b0af2b8 <line:512:9, col:52>
|       `-CallExpr 0x55860b0af280 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0af1b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0af220 <col:26> 'const char *' lvalue ParmVar 0x55860b08bbb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0af240 <col:35> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55860b0af260 <col:46> 'P' lvalue ParmVar 0x55860b08bc28 'parser' 'P'
|-FunctionTemplateDecl 0x55860b08c098 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55860b08be00 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b08bff8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860b08beb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08bf28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55860b0af408 <col:54, line:517:5>
|     `-ReturnStmt 0x55860b0af3f8 <line:516:9, col:53>
|       `-CallExpr 0x55860b0af3c0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0af2f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0af360 <col:26> 'const char *' lvalue ParmVar 0x55860b08beb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0af380 <col:35> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int'
|         `-DeclRefExpr 0x55860b0af3a0 <col:47> 'P' lvalue ParmVar 0x55860b08bf28 'parser' 'P'
|-FunctionTemplateDecl 0x55860b08c398 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55860b08c100 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b08c2f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860b08c1b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08c228 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55860b0b0cf8 <col:55, line:521:5>
|     `-ReturnStmt 0x55860b0b0ce8 <line:520:9, col:65>
|       `-CallExpr 0x55860b0b0cb0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b0b30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b0ba0 <col:26> 'const char *' lvalue ParmVar 0x55860b08c1b0 'keyword' 'const char *'
|         |-BinaryOperator 0x55860b0b0c70 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55860b0b0c20 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55860b0b0c00 <col:35> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55860b0b0c58 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55860b0b0c38 <col:47> 'const int' lvalue Var 0x55860b084fc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55860b0b0c90 <col:59> 'P' lvalue ParmVar 0x55860b08c228 'parser' 'P'
|-FunctionTemplateDecl 0x55860b08c768 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55860b08c400 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b08c6c8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55860b08c4b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08c530 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55860b08c5a8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55860b0b0e38 <col:63, line:526:5>
|     |-CallExpr 0x55860b0b0dc0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0b0d10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55860b0b0d50 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55860b0b0d60 <col:35> 'const char *' lvalue ParmVar 0x55860b08c4b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55860b0b0d80 <col:44> 'int' lvalue ParmVar 0x55860b08c530 'flags' 'int'
|     | `-DeclRefExpr 0x55860b0b0da0 <col:51> 'P' lvalue ParmVar 0x55860b08c5a8 'parser' 'P'
|     `-ReturnStmt 0x55860b0b0e28 <line:525:9, col:17>
|       `-UnaryOperator 0x55860b0b0e10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0b0e00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b08cbb8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55860b08c7d8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08c858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08cb18 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b08c918 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08c990 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08ca38 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b0f90 <col:58, line:541:5>
|     `-ReturnStmt 0x55860b0b0f80 <line:540:9, col:39>
|       `-CallExpr 0x55860b0b0f48 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b0e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b0ee8 <col:21> 'const char *' lvalue ParmVar 0x55860b08c918 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0b0f08 <col:30> 'P' lvalue ParmVar 0x55860b08c990 'parser' 'P'
|         `-DeclRefExpr 0x55860b0b0f28 <col:38> 'T' lvalue ParmVar 0x55860b08ca38 'x' 'T &'
|-FunctionTemplateDecl 0x55860b08d008 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55860b08cc28 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08cca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08cf68 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b08cd68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08cde0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08ce88 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b10c8 <col:60, line:545:5>
|     `-ReturnStmt 0x55860b0b10b8 <line:544:9, col:41>
|       `-CallExpr 0x55860b0b1080 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b0fb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b1020 <col:23> 'const char *' lvalue ParmVar 0x55860b08cd68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0b1040 <col:32> 'P' lvalue ParmVar 0x55860b08cde0 'parser' 'P'
|         `-DeclRefExpr 0x55860b0b1060 <col:40> 'T' lvalue ParmVar 0x55860b08ce88 'x' 'T &'
|-FunctionTemplateDecl 0x55860b08d458 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55860b08d078 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08d0f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08d3b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b08d1b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08d230 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08d2d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b1200 <col:60, line:549:5>
|     `-ReturnStmt 0x55860b0b11f0 <line:548:9, col:41>
|       `-CallExpr 0x55860b0b11b8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b10f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b1158 <col:23> 'const char *' lvalue ParmVar 0x55860b08d1b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0b1178 <col:32> 'P' lvalue ParmVar 0x55860b08d230 'parser' 'P'
|         `-DeclRefExpr 0x55860b0b1198 <col:40> 'T' lvalue ParmVar 0x55860b08d2d8 'x' 'T &'
|-FunctionTemplateDecl 0x55860b08d900 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55860b08d4c8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08d548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08d860 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b08d608 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08d680 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08d728 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b1338 <col:61, line:553:5>
|     `-ReturnStmt 0x55860b0b1328 <line:552:9, col:42>
|       `-CallExpr 0x55860b0b12f0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b1228 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b1290 <col:24> 'const char *' lvalue ParmVar 0x55860b08d608 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0b12b0 <col:33> 'P' lvalue ParmVar 0x55860b08d680 'parser' 'P'
|         `-DeclRefExpr 0x55860b0b12d0 <col:41> 'T' lvalue ParmVar 0x55860b08d728 'x' 'T &'
|-FunctionTemplateDecl 0x55860b08ddd8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55860b08d970 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08d9e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08dd38 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860b08daa8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08db28 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55860b08dba0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08dc48 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b14b0 <col:69, line:557:5>
|     `-ReturnStmt 0x55860b0b14a0 <line:556:9, col:46>
|       `-CallExpr 0x55860b0b1460 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b1360 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b13e0 <col:21> 'const char *' lvalue ParmVar 0x55860b08daa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0b1400 <col:30> 'int' lvalue ParmVar 0x55860b08db28 'flags' 'int'
|         |-DeclRefExpr 0x55860b0b1420 <col:37> 'P' lvalue ParmVar 0x55860b08dba0 'parser' 'P'
|         `-DeclRefExpr 0x55860b0b1440 <col:45> 'T' lvalue ParmVar 0x55860b08dc48 'x' 'T &'
|-FunctionTemplateDecl 0x55860b08e0e8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55860b08de50 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b08e048 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55860b08df00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08df78 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55860b0b15f0 <col:56, line:571:5>
|     `-ReturnStmt 0x55860b0b15e0 <line:570:9, col:48>
|       `-CallExpr 0x55860b0b15a8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b14d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b1548 <col:30> 'const char *' lvalue ParmVar 0x55860b08df00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0b1568 <col:39> 'int' 0
|         `-DeclRefExpr 0x55860b0b1588 <col:42> 'P' lvalue ParmVar 0x55860b08df78 'parser' 'P'
|-FunctionTemplateDecl 0x55860b08e478 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55860b08e150 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b08e3d8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55860b08e200 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08e280 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55860b08e2f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55860b0b17c0 <col:67, line:576:5>
|     |-CallExpr 0x55860b0b1748 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0b1608 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55860b0b1648 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55860b0b1658 <col:39> 'const char *' lvalue ParmVar 0x55860b08e200 'keyword' 'const char *'
|     | |-BinaryOperator 0x55860b0b1708 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55860b0b16b8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55860b0b1678 <col:48> 'int' lvalue ParmVar 0x55860b08e280 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55860b0b16f0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55860b0b16d0 <col:56> 'const int' lvalue Var 0x55860b0851b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55860b0b1728 <col:68> 'P' lvalue ParmVar 0x55860b08e2f8 'parser' 'P'
|     `-ReturnStmt 0x55860b0b17b0 <line:575:9, col:17>
|       `-UnaryOperator 0x55860b0b1798 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0b1788 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b08e8c8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55860b08e4e8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08e568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08e828 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55860b08e628 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08e6a0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08e748 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b1930 <col:62, line:592:5>
|     `-ReturnStmt 0x55860b0b1920 <line:591:9, col:51>
|       `-CallExpr 0x55860b0b18e0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b17f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b1860 <col:30> 'const char *' lvalue ParmVar 0x55860b08e628 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0b1880 <col:39> 'int' 0
|         |-DeclRefExpr 0x55860b0b18a0 <col:42> 'P' lvalue ParmVar 0x55860b08e6a0 'parser' 'P'
|         `-DeclRefExpr 0x55860b0b18c0 <col:50> 'T' lvalue ParmVar 0x55860b08e748 'x' 'T &'
|-FunctionTemplateDecl 0x55860b08eda8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55860b08e938 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08e9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08ed08 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860b08ea78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08eaf8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55860b08eb70 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08ec18 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b1b28 <col:73, line:597:5>
|     |-CallExpr 0x55860b0b1aa8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0b1948 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55860b0b1988 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55860b0b1998 <col:39> 'const char *' lvalue ParmVar 0x55860b08ea78 'keyword' 'const char *'
|     | |-BinaryOperator 0x55860b0b1a48 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55860b0b19f8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55860b0b19b8 <col:48> 'int' lvalue ParmVar 0x55860b08eaf8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55860b0b1a30 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55860b0b1a10 <col:56> 'const int' lvalue Var 0x55860b0851b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55860b0b1a68 <col:68> 'P' lvalue ParmVar 0x55860b08eb70 'parser' 'P'
|     | `-DeclRefExpr 0x55860b0b1a88 <col:76> 'T' lvalue ParmVar 0x55860b08ec18 'x' 'T &'
|     `-ReturnStmt 0x55860b0b1b18 <line:596:9, col:17>
|       `-UnaryOperator 0x55860b0b1b00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0b1af0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b08f358 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55860b08ee20 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08ee98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08f2b8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55860b08ef58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08efd0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08f190 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860b0b1c98 <col:65, line:614:5>
|     `-ReturnStmt 0x55860b0b1c88 <line:613:9, col:46>
|       `-CallExpr 0x55860b0b1c48 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b1b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b1bc8 <col:25> 'const char *' lvalue ParmVar 0x55860b08ef58 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0b1be8 <col:34> 'int' 0
|         |-DeclRefExpr 0x55860b0b1c08 <col:37> 'P' lvalue ParmVar 0x55860b08efd0 'parser' 'P'
|         `-DeclRefExpr 0x55860b0b1c28 <col:45> 'Vector<T>' lvalue ParmVar 0x55860b08f190 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55860b08f788 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55860b08f3c8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b08f6e8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55860b08f480 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08f5d0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860b0b1eb0 <col:55, line:618:5>
|     `-ReturnStmt 0x55860b0b1ea0 <line:617:9, col:55>
|       `-CallExpr 0x55860b0b1e60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b1cc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b1d30 <col:25> 'const char *' lvalue ParmVar 0x55860b08f480 'keyword' 'const char *'
|         |-IntegerLiteral 0x55860b0b1d50 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55860b0b1e20 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55860b0b1e40 <col:54> 'Vector<T>' lvalue ParmVar 0x55860b08f5d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55860b08fd58 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55860b08f7f0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08f868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b08fcb8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55860b08f928 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08f9a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860b08fa20 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55860b08fb70 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860b0b20a8 <col:76, line:623:5>
|     |-CallExpr 0x55860b0b2028 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55860b0b1ec8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55860b0b1f08 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55860b0b1f18 <col:34> 'const char *' lvalue ParmVar 0x55860b08f928 'keyword' 'const char *'
|     | |-BinaryOperator 0x55860b0b1fc8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55860b0b1f78 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55860b0b1f38 <col:43> 'int' lvalue ParmVar 0x55860b08f9a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55860b0b1fb0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55860b0b1f90 <col:51> 'const int' lvalue Var 0x55860b0851b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55860b0b1fe8 <col:63> 'P' lvalue ParmVar 0x55860b08fa20 'parser' 'P'
|     | `-DeclRefExpr 0x55860b0b2008 <col:71> 'Vector<T>' lvalue ParmVar 0x55860b08fb70 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55860b0b2098 <line:622:9, col:17>
|       `-UnaryOperator 0x55860b0b2080 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0b2070 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b090298 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55860b08fdd0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b08fe48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b0901f8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55860b08ff08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b08ff88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860b0900d0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55860b0b2310 <col:66, line:627:5>
|     `-ReturnStmt 0x55860b0b2300 <line:626:9, col:59>
|       `-CallExpr 0x55860b0b22c0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55860b0b20d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55860b0b2148 <col:25> 'const char *' lvalue ParmVar 0x55860b08ff08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55860b0b2168 <col:34> 'int' lvalue ParmVar 0x55860b08ff88 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55860b0b2280 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55860b0b22a0 <col:58> 'Vector<T>' lvalue ParmVar 0x55860b0900d0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55860b090328 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55860b0b2390 <col:25, line:633:5>
|   `-ReturnStmt 0x55860b0b2380 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55860b0b2368 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55860b0b2338 <col:16> 'const bool' lvalue ->_status 0x55860b09c178
|         `-CXXThisExpr 0x55860b0b2328 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55860b0904d8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55860b090410 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55860b0b2478 <col:27, line:639:5>
|   |-BinaryOperator 0x55860b0b2420 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860b0b23a8 <col:9> 'bool' lvalue ParmVar 0x55860b090410 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860b0b2408 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860b0b23d8 <col:13> 'bool' lvalue ->_status 0x55860b09c178
|   |     `-CXXThisExpr 0x55860b0b23c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55860b0b2468 <line:638:9, col:17>
|     `-UnaryOperator 0x55860b0b2450 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860b0b2440 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860b090658 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55860b090598 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55860b0b2568 <col:39, line:644:5>
|   |-BinaryOperator 0x55860b0b2510 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860b0b2498 <col:9> 'bool' lvalue ParmVar 0x55860b090598 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860b0b24f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860b0b24c8 <col:13> 'const bool' lvalue ->_status 0x55860b09c178
|   |     `-CXXThisExpr 0x55860b0b24b8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55860b0b2558 <line:643:9, col:17>
|     `-UnaryOperator 0x55860b0b2540 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860b0b2530 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55860b090720 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55860b0b2610 <col:30, line:651:5>
|   `-ReturnStmt 0x55860b0b2600 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55860b0b25e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55860b0b25b8 <col:16> 'bool' lvalue ->_read_status 0x55860b07da38
|         `-ImplicitCastExpr 0x55860b0b2598 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55860b0b2588 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55860b090868 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55860b0907d8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55860b0b2718 <col:32, line:658:5>
|   |-BinaryOperator 0x55860b0b26c0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860b0b2628 <col:9> 'bool' lvalue ParmVar 0x55860b0907d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860b0b26a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860b0b2678 <col:13> 'bool' lvalue ->_read_status 0x55860b07da38
|   |     `-ImplicitCastExpr 0x55860b0b2658 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55860b0b2648 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55860b0b2708 <line:657:9, col:17>
|     `-UnaryOperator 0x55860b0b26f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860b0b26e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55860b0909b8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55860b090928 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55860b0b2828 <col:44, line:663:5>
|   |-BinaryOperator 0x55860b0b27d0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55860b0b2738 <col:9> 'bool' lvalue ParmVar 0x55860b090928 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55860b0b27b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55860b0b2788 <col:13> 'bool' lvalue ->_read_status 0x55860b07da38
|   |     `-ImplicitCastExpr 0x55860b0b2768 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55860b0b2758 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55860b0b2818 <line:662:9, col:17>
|     `-UnaryOperator 0x55860b0b2800 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55860b0b27f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55860b090a80 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55860b090b48 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55860b090c10 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55860b090cd8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55860b090fe8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55860b090d78 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b090f48 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55860b090e58 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b2b80 <col:19, line:706:5>
|     `-IfStmt 0x55860b0b2b58 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55860b0b2928 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55860b0b2a88 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55860b0b2a58 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55860b0b2a18 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55860b0b2980 <col:42> '<bound member function type>' ->simple_slot 0x55860b0abf40
|       |     | `-CXXThisExpr 0x55860b0b2970 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x55860b0b29d0 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x55860b0b29b0 <col:55> 'T' lvalue ParmVar 0x55860b090e58 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55860b0b29f8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55860b0b2b48 <line:705:13, col:34>
|         `-CallExpr 0x55860b0b2b20 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55860b0b2aa8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55860b0b2b00 <col:33> 'T' lvalue ParmVar 0x55860b090e58 'x' 'T &'
|-FunctionTemplateDecl 0x55860b0912b8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55860b091048 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b091218 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55860b091128 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55860b0b2f60 <col:31, line:717:5>
|     |-DeclStmt 0x55860b0b2cc0 <line:713:9, col:23>
|     | `-VarDecl 0x55860b0b2ba8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55860b0b2c98 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55860b0b2c20 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55860b0b2c78 <col:21> 'T' lvalue ParmVar 0x55860b091128 'x' 'T &'
|     |-IfStmt 0x55860b0b2f10 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55860b0b2db8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55860b0b2ef0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55860b0b2e90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55860b0b2e20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|     |   | `-DeclRefExpr 0x55860b0b2e00 <col:14> 'T *' lvalue Var 0x55860b0b2ba8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55860b0b2ed0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55860b0b2f48 <line:716:9, col:16>
|       `-DeclRefExpr 0x55860b0b2f28 <col:16> 'T *' lvalue Var 0x55860b0b2ba8 's' 'T *'
|-FunctionTemplateDecl 0x55860b0916c8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55860b091318 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860b091398 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860b091628 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55860b091478 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55860b091518 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55860b0b3270 <col:37, line:726:5>
|     |-IfStmt 0x55860b0b3200 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55860b0b3220 <line:723:13, col:26>
|     | | `-VarDecl 0x55860b0b2fc8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55860b0b30b8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55860b0b3040 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55860b0b3098 <col:25> 'T' lvalue ParmVar 0x55860b091478 'x' 'T &'
|     | |-DeclRefExpr 0x55860b0b30e0 <col:16> 'T *' lvalue Var 0x55860b0b2fc8 's' 'T *'
|     | `-BinaryOperator 0x55860b0b31e0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55860b0b3190 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55860b0b3120 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|     |   | `-DeclRefExpr 0x55860b0b3100 <col:14> 'T *' lvalue Var 0x55860b0b2fc8 's' 'T *'
|     |   `-DeclRefExpr 0x55860b0b31c0 <col:18> 'const V' lvalue ParmVar 0x55860b091518 'value' 'const V &'
|     `-ReturnStmt 0x55860b0b3260 <line:725:9, col:17>
|       `-UnaryOperator 0x55860b0b3248 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55860b0b3238 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55860b091ad8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55860b091730 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55860b091a38 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55860b0917e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b091870 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860b091918 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55860b0b4090 <col:65, line:737:5>
|     |-DeclStmt 0x55860b0b3308 <line:732:9, col:26>
|     | `-VarDecl 0x55860b0b32a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860b0b4058 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55860b0b4078 <line:733:13, col:58>
|       | `-VarDecl 0x55860b0b3330 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860b0b3510 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860b0b34e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860b0b34c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860b0b34a8 <col:26, col:58> 'String' (CXXTemporary 0x55860b0b34a8)
|       |           `-CXXMemberCallExpr 0x55860b0b3438 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860b0b33a8 <col:26> '<bound member function type>' ->find 0x55860b0ab558
|       |             | `-CXXThisExpr 0x55860b0b3398 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860b0b3470 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b33d8 <col:31> 'const char *' lvalue ParmVar 0x55860b0917e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860b0b3488 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b33f8 <col:40> 'int' lvalue ParmVar 0x55860b091870 'flags' 'int'
|       |             `-DeclRefExpr 0x55860b0b3418 <col:47> 'Args::Slot *' lvalue Var 0x55860b0b32a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860b0b35c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860b0b35b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860b0b3590 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860b0b3560 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|       |       `-ImplicitCastExpr 0x55860b0b3548 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860b0b3528 <col:20> 'String' lvalue Var 0x55860b0b3330 'str' 'String'
|       `-CompoundStmt 0x55860b0b4038 <col:61, line:736:9>
|         |-DeclStmt 0x55860b0b3a80 <line:734:13, col:76>
|         | `-VarDecl 0x55860b0b3618 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55860b0b3a50 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860b0b39c0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860b0b3a08 <col:60> 'T' lvalue ParmVar 0x55860b091918 'variable' 'T &'
|         |     `-UnaryOperator 0x55860b0b3a38 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860b0b3a28 <col:71> 'Args *' this
|         `-CallExpr 0x55860b0b4008 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55860b0b3aa8 <col:13> '<bound member function type>' ->postparse 0x55860b0ab768
|           | `-CXXThisExpr 0x55860b0b3a98 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55860b0b3fc8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55860b0b3ad8 <col:23> 'T *' lvalue Var 0x55860b0b3618 's' 'T *'
|           | `-CallExpr 0x55860b0b3f88 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55860b0b3d60 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55860b0b3e60 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55860b0b3e80 <col:86> 'String' lvalue Var 0x55860b0b3330 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55860b0b3f30 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860b0b3ec0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|           |   | `-DeclRefExpr 0x55860b0b3ea0 <col:92> 'T *' lvalue Var 0x55860b0b3618 's' 'T *'
|           |   `-UnaryOperator 0x55860b0b3f70 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55860b0b3f60 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55860b0b3fe8 <col:103> 'Args::Slot *' lvalue Var 0x55860b0b32a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860b092028 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55860b091b48 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860b091bc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55860b091f88 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55860b091c88 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b091d08 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55860b091da8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55860b091e48 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55860b0b7350 <col:88, line:745:5>
|     |-DeclStmt 0x55860b0b4128 <line:741:9, col:26>
|     | `-VarDecl 0x55860b0b40c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860b0b4348 <line:742:9, col:55>
|     | `-VarDecl 0x55860b0b4150 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55860b0b4330 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55860b0b4300 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55860b0b42e8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55860b0b42c8 <col:22, col:54> 'String' (CXXTemporary 0x55860b0b42c8)
|     |           `-CXXMemberCallExpr 0x55860b0b4258 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55860b0b41c8 <col:22> '<bound member function type>' ->find 0x55860b0ab558
|     |             | `-CXXThisExpr 0x55860b0b41b8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55860b0b4290 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860b0b41f8 <col:27> 'const char *' lvalue ParmVar 0x55860b091c88 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55860b0b42a8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860b0b4218 <col:36> 'int' lvalue ParmVar 0x55860b091d08 'flags' 'int'
|     |             `-DeclRefExpr 0x55860b0b4238 <col:43> 'Args::Slot *' lvalue Var 0x55860b0b40c0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55860b0b4720 <line:743:9, col:72>
|     | `-VarDecl 0x55860b0b4398 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55860b0b46f0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55860b0b4660 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55860b0b46a8 <col:56> 'T' lvalue ParmVar 0x55860b091da8 'variable' 'T &'
|     |     `-UnaryOperator 0x55860b0b46d8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55860b0b46c8 <col:67> 'Args *' this
|     `-CallExpr 0x55860b0b7320 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55860b0b4748 <col:9> '<bound member function type>' ->postparse 0x55860b0ab768
|       | `-CXXThisExpr 0x55860b0b4738 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55860b0b72e0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55860b0b4778 <col:19> 'T *' lvalue Var 0x55860b0b4398 's' 'T *'
|       | `-ParenExpr 0x55860b0b72c0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55860b0b7290 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55860b0b7278 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55860b0b7260 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55860b0b7240 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55860b0b7210 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|       |     |       `-ImplicitCastExpr 0x55860b0b71f8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55860b0b4798 <col:25> 'String' lvalue Var 0x55860b0b4150 'str' 'String'
|       |     |-CallExpr 0x55860b0b7068 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55860b0b4a20 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55860b0b6f40 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55860b0b6f60 <col:89> 'String' lvalue Var 0x55860b0b4150 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55860b0b7010 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55860b0b6fa0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|       |     | | `-DeclRefExpr 0x55860b0b6f80 <col:95> 'T *' lvalue Var 0x55860b0b4398 's' 'T *'
|       |     | `-UnaryOperator 0x55860b0b7050 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55860b0b7040 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55860b0b71d8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55860b0b71b8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55860b0b7188 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55860b0b7138 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55860b0b70c8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|       |         | | `-DeclRefExpr 0x55860b0b70a8 <col:109> 'T *' lvalue Var 0x55860b0b4398 's' 'T *'
|       |         | `-DeclRefExpr 0x55860b0b7168 <col:113> 'const V' lvalue ParmVar 0x55860b091e48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55860b0b71a8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55860b0b7300 <col:128> 'Args::Slot *' lvalue Var 0x55860b0b40c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860b092558 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55860b0920a0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b092118 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b0924b8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860b0921d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b092258 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860b0922d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55860b092378 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55860b0b7f48 <col:75, line:754:5>
|     |-DeclStmt 0x55860b0b73f8 <line:749:9, col:26>
|     | `-VarDecl 0x55860b0b7390 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860b0b7f10 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55860b0b7f30 <line:750:13, col:58>
|       | `-VarDecl 0x55860b0b7420 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860b0b7600 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860b0b75d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860b0b75b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860b0b7598 <col:26, col:58> 'String' (CXXTemporary 0x55860b0b7598)
|       |           `-CXXMemberCallExpr 0x55860b0b7528 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860b0b7498 <col:26> '<bound member function type>' ->find 0x55860b0ab558
|       |             | `-CXXThisExpr 0x55860b0b7488 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860b0b7560 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b74c8 <col:31> 'const char *' lvalue ParmVar 0x55860b0921d8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860b0b7578 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b74e8 <col:40> 'int' lvalue ParmVar 0x55860b092258 'flags' 'int'
|       |             `-DeclRefExpr 0x55860b0b7508 <col:47> 'Args::Slot *' lvalue Var 0x55860b0b7390 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860b0b76b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860b0b76a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860b0b7680 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860b0b7650 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|       |       `-ImplicitCastExpr 0x55860b0b7638 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860b0b7618 <col:20> 'String' lvalue Var 0x55860b0b7420 'str' 'String'
|       `-CompoundStmt 0x55860b0b7ef0 <col:61, line:753:9>
|         |-DeclStmt 0x55860b0b7a90 <line:751:13, col:63>
|         | `-VarDecl 0x55860b0b7708 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55860b0b7a60 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860b0b79d0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860b0b7a18 <col:47> 'T' lvalue ParmVar 0x55860b092378 'variable' 'T &'
|         |     `-UnaryOperator 0x55860b0b7a48 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860b0b7a38 <col:58> 'Args *' this
|         `-CallExpr 0x55860b0b7ec0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55860b0b7ab8 <col:13> '<bound member function type>' ->postparse 0x55860b0ab768
|           | `-CXXThisExpr 0x55860b0b7aa8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55860b0b7e80 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55860b0b7ae8 <col:23> 'T *' lvalue Var 0x55860b0b7708 's' 'T *'
|           | `-CallExpr 0x55860b0b7e40 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55860b0b7cd0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55860b0b7d18 <col:56> 'P' lvalue ParmVar 0x55860b0922d0 'parser' 'P'
|           |   |-DeclRefExpr 0x55860b0b7d38 <col:64> 'String' lvalue Var 0x55860b0b7420 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55860b0b7de8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860b0b7d78 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|           |   | `-DeclRefExpr 0x55860b0b7d58 <col:70> 'T *' lvalue Var 0x55860b0b7708 's' 'T *'
|           |   `-UnaryOperator 0x55860b0b7e28 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55860b0b7e18 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55860b0b7ea0 <col:81> 'Args::Slot *' lvalue Var 0x55860b0b7390 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860b092bb8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55860b0925d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55860b092648 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55860b0926c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55860b092b18 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55860b092790 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b092810 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55860b092888 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55860b092928 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55860b0929c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55860b0b8cd8 <col:98, line:762:5>
|     |-DeclStmt 0x55860b0b7fe0 <line:758:9, col:26>
|     | `-VarDecl 0x55860b0b7f78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860b0b8200 <line:759:9, col:55>
|     | `-VarDecl 0x55860b0b8008 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55860b0b81e8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55860b0b81b8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55860b0b81a0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55860b0b8180 <col:22, col:54> 'String' (CXXTemporary 0x55860b0b8180)
|     |           `-CXXMemberCallExpr 0x55860b0b8110 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55860b0b8080 <col:22> '<bound member function type>' ->find 0x55860b0ab558
|     |             | `-CXXThisExpr 0x55860b0b8070 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55860b0b8148 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860b0b80b0 <col:27> 'const char *' lvalue ParmVar 0x55860b092790 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55860b0b8160 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55860b0b80d0 <col:36> 'int' lvalue ParmVar 0x55860b092810 'flags' 'int'
|     |             `-DeclRefExpr 0x55860b0b80f0 <col:43> 'Args::Slot *' lvalue Var 0x55860b0b7f78 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55860b0b8620 <line:760:9, col:59>
|     | `-VarDecl 0x55860b0b8258 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55860b0b85f0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55860b0b8560 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55860b0b85a8 <col:43> 'T' lvalue ParmVar 0x55860b092928 'variable' 'T &'
|     |     `-UnaryOperator 0x55860b0b85d8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55860b0b85c8 <col:54> 'Args *' this
|     `-CallExpr 0x55860b0b8ca8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55860b0b8648 <col:9> '<bound member function type>' ->postparse 0x55860b0ab768
|       | `-CXXThisExpr 0x55860b0b8638 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55860b0b8c68 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55860b0b8678 <col:19> 'T *' lvalue Var 0x55860b0b8258 's' 'T *'
|       | `-ParenExpr 0x55860b0b8c48 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55860b0b8c18 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55860b0b8c00 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55860b0b8be8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55860b0b8bc8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55860b0b8b98 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|       |     |       `-ImplicitCastExpr 0x55860b0b8b80 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55860b0b8698 <col:25> 'String' lvalue Var 0x55860b0b8008 'str' 'String'
|       |     |-CallExpr 0x55860b0b89f0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55860b0b8880 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55860b0b88c8 <col:59> 'P' lvalue ParmVar 0x55860b092888 'parser' 'P'
|       |     | |-DeclRefExpr 0x55860b0b88e8 <col:67> 'String' lvalue Var 0x55860b0b8008 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55860b0b8998 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55860b0b8928 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|       |     | | `-DeclRefExpr 0x55860b0b8908 <col:73> 'T *' lvalue Var 0x55860b0b8258 's' 'T *'
|       |     | `-UnaryOperator 0x55860b0b89d8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55860b0b89c8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55860b0b8b60 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55860b0b8b40 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55860b0b8b10 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55860b0b8ac0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55860b0b8a50 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|       |         | | `-DeclRefExpr 0x55860b0b8a30 <col:87> 'T *' lvalue Var 0x55860b0b8258 's' 'T *'
|       |         | `-DeclRefExpr 0x55860b0b8af0 <col:91> 'const V' lvalue ParmVar 0x55860b0929c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55860b0b8b30 <col:98> 'bool' true
|       `-DeclRefExpr 0x55860b0b8c88 <col:106> 'Args::Slot *' lvalue Var 0x55860b0b7f78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860b093228 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55860b092c38 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b092cb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55860b092d38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55860b093188 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55860b092e00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b092e80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55860b092ef8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55860b092f98 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55860b093038 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55860b0b9cb8 <col:60, line:773:5>
|     |-DeclStmt 0x55860b0b8d80 <line:767:9, col:26>
|     | `-VarDecl 0x55860b0b8d18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860b0b9c80 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55860b0b9ca0 <line:768:13, col:58>
|       | `-VarDecl 0x55860b0b8da8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860b0b8f88 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860b0b8f58 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860b0b8f40 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860b0b8f20 <col:26, col:58> 'String' (CXXTemporary 0x55860b0b8f20)
|       |           `-CXXMemberCallExpr 0x55860b0b8eb0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860b0b8e20 <col:26> '<bound member function type>' ->find 0x55860b0ab558
|       |             | `-CXXThisExpr 0x55860b0b8e10 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860b0b8ee8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b8e50 <col:31> 'const char *' lvalue ParmVar 0x55860b092e00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860b0b8f00 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b8e70 <col:40> 'int' lvalue ParmVar 0x55860b092e80 'flags' 'int'
|       |             `-DeclRefExpr 0x55860b0b8e90 <col:47> 'Args::Slot *' lvalue Var 0x55860b0b8d18 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860b0b9040 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860b0b9028 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860b0b9008 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860b0b8fd8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|       |       `-ImplicitCastExpr 0x55860b0b8fc0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860b0b8fa0 <col:20> 'String' lvalue Var 0x55860b0b8da8 'str' 'String'
|       `-CompoundStmt 0x55860b0b9c58 <col:61, line:772:9>
|         |-DeclStmt 0x55860b0b9380 <line:769:13, col:66>
|         | `-VarDecl 0x55860b0b9098 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55860b0b9350 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860b0b92c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860b0b9308 <col:49> 'T1' lvalue ParmVar 0x55860b092f98 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55860b0b9338 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860b0b9328 <col:61> 'Args *' this
|         |-DeclStmt 0x55860b0b96f0 <line:770:13, col:66>
|         | `-VarDecl 0x55860b0b9408 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55860b0b96c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55860b0b9630 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55860b0b9678 <col:49> 'T2' lvalue ParmVar 0x55860b093038 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55860b0b96a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55860b0b9698 <col:61> 'Args *' this
|         `-CallExpr 0x55860b0b9c28 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55860b0b9718 <col:13> '<bound member function type>' ->postparse 0x55860b0ab768
|           | `-CXXThisExpr 0x55860b0b9708 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55860b0b9be8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55860b0b9788 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55860b0b9748 <col:23> 'T1 *' lvalue Var 0x55860b0b9098 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55860b0b9768 <col:29> 'T2 *' lvalue Var 0x55860b0b9408 's2' 'T2 *'
|           | `-CallExpr 0x55860b0b9ba0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55860b0b9970 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55860b0b99b8 <col:63> 'P' lvalue ParmVar 0x55860b092ef8 'parser' 'P'
|           |   |-DeclRefExpr 0x55860b0b99d8 <col:71> 'String' lvalue Var 0x55860b0b8da8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55860b0b9a88 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860b0b9a18 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|           |   | `-DeclRefExpr 0x55860b0b99f8 <col:77> 'T1 *' lvalue Var 0x55860b0b9098 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55860b0b9b48 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55860b0b9ad8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|           |   | `-DeclRefExpr 0x55860b0b9ab8 <col:82> 'T2 *' lvalue Var 0x55860b0b9408 's2' 'T2 *'
|           |   `-UnaryOperator 0x55860b0b9b88 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55860b0b9b78 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55860b0b9c08 <col:94> 'Args::Slot *' lvalue Var 0x55860b0b8d18 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860b093618 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55860b0932a8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b093578 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55860b093360 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b0933e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55860b093458 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55860b0ba1d0 <col:67, line:780:5>
|     |-DeclStmt 0x55860b0b9d50 <line:777:9, col:26>
|     | `-VarDecl 0x55860b0b9ce8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55860b0ba198 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55860b0ba1b8 <line:778:13, col:58>
|       | `-VarDecl 0x55860b0b9d78 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55860b0b9f58 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55860b0b9f28 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55860b0b9f10 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55860b0b9ef0 <col:26, col:58> 'String' (CXXTemporary 0x55860b0b9ef0)
|       |           `-CXXMemberCallExpr 0x55860b0b9e80 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55860b0b9df0 <col:26> '<bound member function type>' ->find 0x55860b0ab558
|       |             | `-CXXThisExpr 0x55860b0b9de0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55860b0b9eb8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b9e20 <col:31> 'const char *' lvalue ParmVar 0x55860b093360 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55860b0b9ed0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55860b0b9e40 <col:40> 'int' lvalue ParmVar 0x55860b0933e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55860b0b9e60 <col:47> 'Args::Slot *' lvalue Var 0x55860b0b9ce8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55860b0ba010 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55860b0b9ff8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55860b0b9fd8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55860b0b9fa8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|       |       `-ImplicitCastExpr 0x55860b0b9f90 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55860b0b9f70 <col:20> 'String' lvalue Var 0x55860b0b9d78 'str' 'String'
|       `-CallExpr 0x55860b0ba168 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55860b0ba038 <col:13> '<bound member function type>' ->postparse 0x55860b0ab768
|         | `-CXXThisExpr 0x55860b0ba028 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55860b0ba118 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55860b0ba088 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55860b0ba068 <col:23> 'P' lvalue ParmVar 0x55860b093458 'parser' 'P'
|         | |-DeclRefExpr 0x55860b0ba0d0 <col:36> 'String' lvalue Var 0x55860b0b9d78 'str' 'String'
|         | `-UnaryOperator 0x55860b0ba100 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55860b0ba0f0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55860b0ba148 <col:49> 'Args::Slot *' lvalue Var 0x55860b0b9ce8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55860b0939b8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55860b093688 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55860b093918 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55860b093740 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b0937c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55860b093838 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55860b0bab40 <col:71, line:792:5>
|     |-DeclStmt 0x55860b0ba268 <line:784:9, col:26>
|     | `-VarDecl 0x55860b0ba200 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860b0ba338 <line:785:9, col:29>
|     | `-VarDecl 0x55860b0ba298 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55860b0ba320 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55860b0ba300 <col:28> 'int' 1
|     |-WhileStmt 0x55860b0ba9f0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55860b0baa10 <line:786:16, col:61>
|     | | `-VarDecl 0x55860b0ba360 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55860b0ba540 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55860b0ba510 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55860b0ba4f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55860b0ba4d8 <col:29, col:61> 'String' (CXXTemporary 0x55860b0ba4d8)
|     | |           `-CXXMemberCallExpr 0x55860b0ba468 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55860b0ba3d8 <col:29> '<bound member function type>' ->find 0x55860b0ab558
|     | |             | `-CXXThisExpr 0x55860b0ba3c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55860b0ba4a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860b0ba408 <col:34> 'const char *' lvalue ParmVar 0x55860b093740 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55860b0ba4b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860b0ba428 <col:43> 'int' lvalue ParmVar 0x55860b0937c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55860b0ba448 <col:50> 'Args::Slot *' lvalue Var 0x55860b0ba200 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55860b0ba5f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55860b0ba5e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55860b0ba5c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55860b0ba590 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|     | |       `-ImplicitCastExpr 0x55860b0ba578 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55860b0ba558 <col:23> 'String' lvalue Var 0x55860b0ba360 'str' 'String'
|     | `-CompoundStmt 0x55860b0ba9c8 <col:64, line:790:9>
|     |   |-CallExpr 0x55860b0ba750 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55860b0ba620 <col:13> '<bound member function type>' ->postparse 0x55860b0ab768
|     |   | | `-CXXThisExpr 0x55860b0ba610 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55860b0ba700 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55860b0ba670 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55860b0ba650 <col:23> 'P' lvalue ParmVar 0x55860b093838 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55860b0ba6b8 <col:36> 'String' lvalue Var 0x55860b0ba360 'str' 'String'
|     |   | | `-UnaryOperator 0x55860b0ba6e8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55860b0ba6d8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55860b0ba730 <col:49> 'Args::Slot *' lvalue Var 0x55860b0ba200 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55860b0ba8e8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55860b0ba780 <col:13> 'int' lvalue Var 0x55860b0ba298 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55860b0ba8d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55860b0ba8b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55860b0ba818 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55860b0ba7f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55860b0ba7e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55860b0ba7a0 <col:28> 'int' lvalue Var 0x55860b0ba298 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55860b0ba7c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55860b0ba898 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55860b0ba868 <col:49> 'bool' lvalue ->_read_status 0x55860b07da38
|     |   |         `-ImplicitCastExpr 0x55860b0ba848 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55860b0ba838 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55860b0ba998 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55860b0ba908 <col:13> 'int' lvalue ParmVar 0x55860b0937c0 'flags' 'int'
|     |     `-UnaryOperator 0x55860b0ba980 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55860b0ba968 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860b0ba948 <col:23> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55860b0bab20 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55860b0baa58 <col:9> 'bool' lvalue ->_read_status 0x55860b07da38
|       | `-ImplicitCastExpr 0x55860b0baa38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55860b0baa28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55860b0bab00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55860b0baae0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55860b0baac8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55860b0baa88 <col:25> 'int' lvalue Var 0x55860b0ba298 'read_status' 'int'
|           `-IntegerLiteral 0x55860b0baaa8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55860b093e98 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55860b093a28 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b093aa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b093df8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55860b093b68 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b093be8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55860b093c60 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55860b093d08 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55860b0bd750 <col:84, line:805:5>
|     |-DeclStmt 0x55860b0babe8 <line:796:9, col:26>
|     | `-VarDecl 0x55860b0bab80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860b0bacb8 <line:797:9, col:29>
|     | `-VarDecl 0x55860b0bac18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55860b0baca0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55860b0bac80 <col:28> 'int' 1
|     |-DeclStmt 0x55860b0bcc70 <line:798:9, col:71>
|     | `-VarDecl 0x55860b0bad08 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55860b0bcc40 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55860b0bcbb0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55860b0bcbf8 <col:55> 'T' lvalue ParmVar 0x55860b093d08 'variable' 'T &'
|     |     `-UnaryOperator 0x55860b0bcc28 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55860b0bcc18 <col:66> 'Args *' this
|     |-WhileStmt 0x55860b0bd600 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55860b0bd620 <line:799:16, col:61>
|     | | `-VarDecl 0x55860b0bcc98 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55860b0bce78 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55860b0bce48 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55860b0bce30 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55860b0bce10 <col:29, col:61> 'String' (CXXTemporary 0x55860b0bce10)
|     | |           `-CXXMemberCallExpr 0x55860b0bcda0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55860b0bcd10 <col:29> '<bound member function type>' ->find 0x55860b0ab558
|     | |             | `-CXXThisExpr 0x55860b0bcd00 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55860b0bcdd8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860b0bcd40 <col:34> 'const char *' lvalue ParmVar 0x55860b093b68 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55860b0bcdf0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860b0bcd60 <col:43> 'int' lvalue ParmVar 0x55860b093be8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55860b0bcd80 <col:50> 'Args::Slot *' lvalue Var 0x55860b0bab80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55860b0bcf30 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55860b0bcf18 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55860b0bcef8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55860b0bcec8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|     | |       `-ImplicitCastExpr 0x55860b0bceb0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55860b0bce90 <col:23> 'String' lvalue Var 0x55860b0bcc98 'str' 'String'
|     | `-CompoundStmt 0x55860b0bd5d8 <col:64, line:803:9>
|     |   |-CallExpr 0x55860b0bd360 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55860b0bcf58 <col:13> '<bound member function type>' ->postparse 0x55860b0ab768
|     |   | | `-CXXThisExpr 0x55860b0bcf48 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55860b0bd320 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55860b0bcf88 <col:23> 'T *' lvalue Var 0x55860b0bad08 's' 'T *'
|     |   | | `-CallExpr 0x55860b0bd2e0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55860b0bd170 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55860b0bd1b8 <col:56> 'P' lvalue ParmVar 0x55860b093c60 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55860b0bd1d8 <col:64> 'String' lvalue Var 0x55860b0bcc98 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55860b0bd288 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55860b0bd218 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|     |   | |   | `-DeclRefExpr 0x55860b0bd1f8 <col:70> 'T *' lvalue Var 0x55860b0bad08 's' 'T *'
|     |   | |   `-UnaryOperator 0x55860b0bd2c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55860b0bd2b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55860b0bd340 <col:81> 'Args::Slot *' lvalue Var 0x55860b0bab80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55860b0bd4f8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55860b0bd390 <col:13> 'int' lvalue Var 0x55860b0bac18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55860b0bd4e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55860b0bd4c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55860b0bd428 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55860b0bd408 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55860b0bd3f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55860b0bd3b0 <col:28> 'int' lvalue Var 0x55860b0bac18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55860b0bd3d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55860b0bd4a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55860b0bd478 <col:49> 'bool' lvalue ->_read_status 0x55860b07da38
|     |   |         `-ImplicitCastExpr 0x55860b0bd458 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55860b0bd448 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55860b0bd5a8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55860b0bd518 <col:13> 'int' lvalue ParmVar 0x55860b093be8 'flags' 'int'
|     |     `-UnaryOperator 0x55860b0bd590 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55860b0bd578 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860b0bd558 <col:23> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55860b0bd730 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55860b0bd668 <col:9> 'bool' lvalue ->_read_status 0x55860b07da38
|       | `-ImplicitCastExpr 0x55860b0bd648 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55860b0bd638 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55860b0bd710 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55860b0bd6f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55860b0bd6d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55860b0bd698 <col:25> 'int' lvalue Var 0x55860b0bac18 'read_status' 'int'
|           `-IntegerLiteral 0x55860b0bd6b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55860b094478 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55860b093f10 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55860b093f88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55860b0943d8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55860b094048 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55860b0940c8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55860b094140 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55860b094290 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55860b0be558 <col:87, line:821:5>
|     |-DeclStmt 0x55860b0bd800 <line:809:9, col:26>
|     | `-VarDecl 0x55860b0bd798 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55860b0bd8d0 <line:810:9, col:29>
|     | `-VarDecl 0x55860b0bd830 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55860b0bd8b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55860b0bd898 <col:28> 'int' 1
|     |-DeclStmt 0x55860b0bdb18 <line:811:9, col:38>
|     | `-VarDecl 0x55860b0bda00 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55860b0bdaf0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55860b0bda78 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55860b0bdad0 <col:29> 'Vector<T>' lvalue ParmVar 0x55860b094290 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55860b0be408 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55860b0be428 <line:812:16, col:61>
|     | | `-VarDecl 0x55860b0bdb40 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55860b0bdd20 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55860b0bdcf0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55860b0bdcd8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55860b0bdcb8 <col:29, col:61> 'String' (CXXTemporary 0x55860b0bdcb8)
|     | |           `-CXXMemberCallExpr 0x55860b0bdc48 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55860b0bdbb8 <col:29> '<bound member function type>' ->find 0x55860b0ab558
|     | |             | `-CXXThisExpr 0x55860b0bdba8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55860b0bdc80 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860b0bdbe8 <col:34> 'const char *' lvalue ParmVar 0x55860b094048 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55860b0bdc98 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55860b0bdc08 <col:43> 'int' lvalue ParmVar 0x55860b0940c8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55860b0bdc28 <col:50> 'Args::Slot *' lvalue Var 0x55860b0bd798 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55860b0bddd8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55860b0bddc0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55860b0bdda0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55860b0bdd70 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55860ae622e8
|     | |       `-ImplicitCastExpr 0x55860b0bdd58 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55860b0bdd38 <col:23> 'String' lvalue Var 0x55860b0bdb40 'str' 'String'
|     | `-CompoundStmt 0x55860b0be3d0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55860b0bde98 <line:813:13, col:23>
|     |   | `-VarDecl 0x55860b0bde00 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55860b0bde78 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55860b0be018 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55860b0bdec0 <col:13> '<bound member function type>' ->postparse 0x55860b0ab768
|     |   | | `-CXXThisExpr 0x55860b0bdeb0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55860b0bdfc0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55860b0bdf10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55860b0bdef0 <col:23> 'P' lvalue ParmVar 0x55860b094140 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55860b0bdf58 <col:36> 'String' lvalue Var 0x55860b0bdb40 'str' 'String'
|     |   | | |-DeclRefExpr 0x55860b0bdf78 <col:41> 'T' lvalue Var 0x55860b0bde00 'sx' 'T'
|     |   | | `-UnaryOperator 0x55860b0bdfa8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55860b0bdf98 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55860b0bdff8 <col:53> 'Args::Slot *' lvalue Var 0x55860b0bd798 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55860b0be170 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55860b0be0a8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55860b0be078 <col:17> 'bool' lvalue ->_read_status 0x55860b07da38
|     |   | |   `-ImplicitCastExpr 0x55860b0be058 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55860b0be048 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55860b0be148 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55860b0be0e0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55860b0be0c0 <col:17> 'Vector<T> *' lvalue Var 0x55860b0bda00 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55860b0be128 <col:30> 'T' lvalue Var 0x55860b0bde00 'sx' 'T'
|     |   |-BinaryOperator 0x55860b0be2f0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55860b0be188 <col:13> 'int' lvalue Var 0x55860b0bd830 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55860b0be2d8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55860b0be2b8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55860b0be220 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55860b0be200 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55860b0be1e8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55860b0be1a8 <col:28> 'int' lvalue Var 0x55860b0bd830 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55860b0be1c8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55860b0be2a0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55860b0be270 <col:49> 'bool' lvalue ->_read_status 0x55860b07da38
|     |   |         `-ImplicitCastExpr 0x55860b0be250 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55860b0be240 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55860b0be3a0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55860b0be310 <col:13> 'int' lvalue ParmVar 0x55860b0940c8 'flags' 'int'
|     |     `-UnaryOperator 0x55860b0be388 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55860b0be370 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55860b0be350 <col:23> 'const int' lvalue Var 0x55860b084ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55860b0be538 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55860b0be470 <col:9> 'bool' lvalue ->_read_status 0x55860b07da38
|       | `-ImplicitCastExpr 0x55860b0be450 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55860b0be440 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55860b0be518 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55860b0be4f8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55860b0be4e0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55860b0be4a0 <col:25> 'int' lvalue Var 0x55860b0bd830 'read_status' 'int'
|           `-IntegerLiteral 0x55860b0be4c0 <col:40> 'int' 1
|-AccessSpecDecl 0x55860b0944f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55860b094518 prev 0x55860b0831c8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55860b094610 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55860b094700 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55860b0be590 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55860b0947f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55860b0be5a0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55860b0948f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55860b0949a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55860b094a48 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55860b094a48
| | `-ParmVarDecl 0x55860b094b58 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55860b095318 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55860b095318
|   `-ParmVarDecl 0x55860b095428 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55860b094bc8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55860b094d28 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55860b094f20 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55860b094dd0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55860b094e48 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55860b0be7b0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55860b0951d8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55860b0be5f0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55860b0be5b0 <col:20> 'void *' lvalue ParmVar 0x55860b094dd0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55860b095240 '_slot' 'char *'
| | | `-CXXNewExpr 0x55860b0be6a8 <col:32, col:45> 'char *' array Function 0x55860ac86008 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55860b0be660 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55860b0be630 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55860b094e48 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55860b0952a0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55860b0be770 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55860b0be730 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55860b094e48 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55860b0be830 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55860b095020 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55860b0947f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55860b0be8b8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55860b0be898 <line:840:13, col:22> 'void' array Function 0x55860ac86368 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55860b0be880 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55860b0be850 <col:22> 'char *' lvalue ->_slot 0x55860b095240
| |         `-CXXThisExpr 0x55860b0be840 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55860b095120 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55860b0948f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55860b0beaa8 <col:22, line:844:9>
| |   `-CallExpr 0x55860b0bea10 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55860b0be9f8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55860b0be9d8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55860adbe2a8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55860b0bea48 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55860b0be928 <col:20> 'void *' lvalue ->_ptr 0x55860b0951d8
| |     |   `-CXXThisExpr 0x55860b0be918 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55860b0bea78 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55860b0bea60 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55860b0be968 <col:26> 'char *' lvalue ->_slot 0x55860b095240
| |     |     `-CXXThisExpr 0x55860b0be958 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55860b0bea90 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55860b0be9a8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55860b0952a0
| |         `-CXXThisExpr 0x55860b0be998 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55860b0951d8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55860b095240 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55860b0952a0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55860b095498 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55860b095498
| | `-ParmVarDecl 0x55860b0955a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55860b095648 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55860b095648
|   `-ParmVarDecl 0x55860b095758 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55860b09b8d0 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55860b0957c8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55860b09b840 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55860b09bb60 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55860b09bd58 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55860b09bc28 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55860b09bed8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55860b0beae0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55860b0beac0 <col:20> 'T *' lvalue ParmVar 0x55860b09bc28 'ptr' 'T *'
|   | `-CompoundStmt 0x55860b0beb30 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55860b09be28 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55860b0948f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55860b0bece0 <col:22, line:857:9>
|   |   `-CallExpr 0x55860b0becb0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55860b0beb40 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55860ae4a4d8 0x55860ad73a08
|   |     |-CXXOperatorCallExpr 0x55860b0bec40 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55860b0bebd0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55860af36498 0x55860af360b8 0x55860af35ce8 0x55860af35908 0x55860af35528 0x55860af35158
|   |     | `-MemberExpr 0x55860b0beba0 <col:29> 'T *' lvalue ->_ptr 0x55860b09bed8
|   |     |   `-CXXThisExpr 0x55860b0beb90 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55860b0bec80 <col:35> 'T' lvalue ->_slot 0x55860b09bf38
|   |       `-CXXThisExpr 0x55860b0bec70 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55860b09bed8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55860b09bf38 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55860b09bfa0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55860b09c0a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55860b09c0f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55860b09c080 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55860b09c060 <col:31> 'int' 48
|-FieldDecl 0x55860b09c118 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55860b09c178 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55860b09c1d8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55860b09c310 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55860b0aa790 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55860b0aa7f0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55860b0aa918 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55860b0aab48 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55860b0aaa50 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55860b0aac98 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55860b0aac08 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55860b0ab558 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55860b0aad58 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55860b0aadd8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55860b0ab470 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55860b0ab768 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55860b0ab620 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55860b0ab698 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55860b0ab838 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55860b0ab988 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55860b0ab8f0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55860b0abd18 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55860b0aba48 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55860b0abac8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55860b0abb70 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55860b0abc28 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55860b0abf40 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55860b0abdf0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55860b0abe68 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55860b0ac258 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55860b0abff0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55860b0ac1b8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55860b0ac0c8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b0e37c8 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55860b0e38e8 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x55860b0e3988 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55860b0e39e8 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55860b0e3a70 <line:27:5, col:15> col:15 referenced th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55860b0e3ad0 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55860b0e3b78 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x55860b0e3b58 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x55860b0e3b20 <col:26> 'int' 4
|-FieldDecl 0x55860b0e3c20 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x55860b0e3c00 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x55860b0e3bc8 <col:23> 'int' 4
|-FieldDecl 0x55860b0e3c80 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x55860b0e3ce0 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x55860b0e3d40 <line:49:5, col:14> col:14 th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x55860b0e3da0 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860adfb0f8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860adfb218 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55860adfb2e0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55860b0e7530 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55860b0e96b8 <col:8>
|-CXXConstructorDecl 0x55860b0e7638 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55860b0e7638
| `-ParmVarDecl 0x55860b0e7748 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55860b0e77e8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55860b0e78f8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55860adfb2e0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55860b0e98d0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55860b0e98a0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55860adfb2e0
| |     `-CXXStaticCastExpr 0x55860b0e9870 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55860b0e9840 <col:8> 'in_addr' lvalue ParmVar 0x55860b0e78f8 '' 'in_addr &&'
| `-CompoundStmt 0x55860b0e9918 <col:8>
`-CXXDestructorDecl 0x55860b0e9b50 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b0e0c50 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55860b0e0d68 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55860b0e0e50 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55860b0e0e30 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55860b0e0df8 <col:22> 'int' 4
|-FieldDecl 0x55860b0e0ef8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55860b0e0ed8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55860b0e0ea0 <col:21> 'int' 4
|-FieldDecl 0x55860b0e0f58 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55860b0e0fb8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55860b0e1018 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55860b0e1078 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55860b0e10d8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55860b0e1138 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55860b0e1198 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55860b0e1208 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55860b0e1278 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55860b0d90f0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55860b0d9208 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55860b0d9298 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55860b0d94d8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55860b0d92d0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55860b0d9350 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55860b0d93c8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55860b0d96f0 <col:81> 'const ArgContext' lvalue Var 0x55860b0bed08 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55860b0d9630 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55860b0d95a0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55860b0d9848 <col:35, line:1261:5>
|   `-ReturnStmt 0x55860b0d9838 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55860b0d9820 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55860b0d97f0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55860b0d97d8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55860b0d97b0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55860b0d9790 <col:16, col:24> 'String' (CXXTemporary 0x55860b0d9790)
|               `-CXXConstructExpr 0x55860b0d9758 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55860b0d9740 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55860b0d9720 <col:23> 'bool' lvalue ParmVar 0x55860b0d95a0 'x' 'bool'
|-CXXConstructorDecl 0x55860b1ae538 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55860b1ae610 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55860b1ae748 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55860b1ae748
| `-ParmVarDecl 0x55860b1ae858 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55860b1ae8f8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55860b1aea08 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55860b1af660 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55860b0d9888 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55860b0d9ae8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55860b1ae448 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55860b1aea78 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55860b1aea78
| `-ParmVarDecl 0x55860b1aeb88 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55860b1aec28 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55860b1aed38 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55860b1af670 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55860b1af640 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55860b1af610 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55860b1af5e0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55860b1aed38 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55860b1af6e0 <col:19>
`-CXXDestructorDecl 0x55860b1aedd8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
