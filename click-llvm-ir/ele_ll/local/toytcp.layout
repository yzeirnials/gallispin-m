
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b58768 prev 0x564c61b4ff08 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c61b58860 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x564c61b588f0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x564c61b58968 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x564c61b58a28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x564c61b58af0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x564c61b58c68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x564c61b58ba0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x564c61b58d10 <col:24>
| `-OptimizeNoneAttr 0x564c61b58d68 <col:34>
|-CXXMethodDecl 0x564c61b58db0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x564c61b59068 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x564c61b58e60 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x564c61b58ed8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x564c61b58f58 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x564c61b59120 <line:229:7, col:14> col:7 private
|-FieldDecl 0x564c61b59158 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x564c61b591c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x564c61b59248 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x564c61b59568 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x564c61b59300 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x564c61b59378 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x564c61b593f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x564c61b59470 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x564c61b59680 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x564c61b60ff8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x564c61b60ff8
| `-ParmVarDecl 0x564c61b61108 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x564c61b611a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x564c61b611a8
| `-ParmVarDecl 0x564c61b612b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x564c61c4afb0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b4b780 prev 0x564c61b4b500 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564c61b4b878 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x564c61b4b908 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x564c61b4b968 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x564c61b4ba58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x564c61b4bb58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x564c61b4bd28 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x564c61b4bbd8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x564c61b4bc50 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x564c61b4beb8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x564c61b4bdf0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x564c61b4bf60 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x564c61b4c098 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x564c61b4bfd0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x564c61b4c238 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x564c61b4c178 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x564c61b4c3d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x564c61b4c318 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x564c61b4c480 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x564c61b4c580 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x564c61b4c660 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b4c560 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x564c61b4c540 <col:26> 'int' 1
| `-EnumConstantDecl 0x564c61b4c610 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x564c61b4c678 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b4c5f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x564c61b4c5d0 <col:44> 'int' 2
|-CXXMethodDecl 0x564c61b4c7c0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x564c61b4c6a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x564c61b4c728 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x564c61b4c918 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x564c61b4c888 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x564c61b4cb58 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x564c61b4c9d8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x564c61b4ca50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x564c61b4cc08 <col:20>
| `-OptimizeNoneAttr 0x564c61b4cc60 <col:30>
|-CXXMethodDecl 0x564c61b4cd68 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x564c61b4cca0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x564c61b4ce10 <col:20>
| `-OptimizeNoneAttr 0x564c61b4ce68 <col:30>
|-CXXMethodDecl 0x564c61b4ceb8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x564c61b4cf80 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x564c61b4d098 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x564c61b4d120 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x564c61b4d1a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x564c61b4d230 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x564c61b4d2b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x564c61b4d348 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x564c61b4d408 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x564c61b4d490 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x564c61b4d518 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x564c61b4d5a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x564c61b4d628 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x564c61b4d6b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x564c61b4d740 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x564c61b4d800 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x564c61b4d890 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x564c61b4d9e0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x564c61b4d948 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x564c61b4db70 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x564c61b4daa0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x564c61b4de20 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x564c61b4dc28 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x564c61b4dca8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x564c61b4dd28 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x564c61b4ded8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x564c61b4dfe0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564c61b4e270 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b4dfc0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x564c61b4dfa0 <col:33> 'int' 0
| |-EnumConstantDecl 0x564c61b4e070 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564c61b4e288 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b4e050 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x564c61b4e030 <col:32> 'int' 20
| |-EnumConstantDecl 0x564c61b4e100 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564c61b4e2a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b4e0e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x564c61b4e0c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x564c61b4e190 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x564c61b4e2b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b4e170 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x564c61b4e150 <col:35> 'int' 100
| `-EnumConstantDecl 0x564c61b4e220 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x564c61b4e2d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b4e200 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x564c61b4e1e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x564c61b4e310 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x564c61b4e750 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564c61b4e5c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x564c61b4e638 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b4e820 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x564c61b4e9a0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x564c61b4e8d0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b4eba8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564c61b4ea58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x564c61b4ead0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b4eca8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x564c61b4ed48 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x564c61b4ee10 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x564c61b4eea0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x564c61b4f0d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b4ee80 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x564c61b4ee60 <col:36> 'int' EnumConstant 0x564c61b4ee10 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x564c61b4eef0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564c61b4ef40 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564c61b4ef90 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564c61b4efe0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x564c61b4f030 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x564c61b4f080 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x564c61b4f1b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x564c61b4f0f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x564c61b4f280 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x564c61b4f340 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x564c61b4f400 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x564c61b4f4c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x564c61b4f5d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x564c61b4f6a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x564c61b4f820 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x564c61b4f750 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x564c61b4f948 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x564c61b4fb48 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x564c61b4f9f8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x564c61b4fa78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x564c61b5d498 <col:54, line:127:5>
|   |-ParenExpr 0x564c61b5d348 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x564c61b5d318 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b5d008 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x564c61b5cfe0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x564c61b5cfc8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x564c61b5cfb0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x564c61b5cf80 <col:31> 'Router *' lvalue ->_router 0x564c61b5ae60
|   |   |         `-CXXThisExpr 0x564c61b5cf70 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x564c61b5d068 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b5d048 <col:48> 'int' 0
|   |   `-CallExpr 0x564c61b5d278 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x564c61b5d260 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b5d240 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b5d2b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b5d0d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x564c61b5d2d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b5d0f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x564c61b5d2e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b5d130 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x564c61b5d300 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b5d228 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b5d210 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b5d1c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x564c61b5d3e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x564c61b5d378 <col:9> 'Router *' lvalue ->_router 0x564c61b5ae60
|   | | `-CXXThisExpr 0x564c61b5d368 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x564c61b5d3c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x564c61b5d3a8 <col:19> 'Router *' lvalue ParmVar 0x564c61b4f9f8 'r' 'Router *'
|   `-BinaryOperator 0x564c61b5d478 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x564c61b5d410 <col:9> 'int' lvalue ->_eindex 0x564c61b5aec8
|     | `-CXXThisExpr 0x564c61b5d400 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x564c61b5d460 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b5d440 <col:19> 'int' lvalue ParmVar 0x564c61b4fa78 'eindex' 'int'
|-CXXMethodDecl 0x564c61b4fcd0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x564c61b4fc08 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x564c61b4fda0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x564c61b4fe68 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x564c61b4ff08 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x564c61b50158 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x564c61b4ffd0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x564c61b50050 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x564c61b50208 <col:20>
| `-OptimizeNoneAttr 0x564c61b50260 <col:30>
|-CXXMethodDecl 0x564c61b50368 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x564c61b502a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x564c61b50410 <col:20>
| `-OptimizeNoneAttr 0x564c61b50468 <col:30>
|-CXXMethodDecl 0x564c61b50538 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x564c61b504a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x564c61b505e0 <col:20>
| `-OptimizeNoneAttr 0x564c61b50638 <col:30>
|-CXXMethodDecl 0x564c61b507c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x564c61b50670 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x564c61b506f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x564c61b50958 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x564c61b50890 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x564c61b50aa8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x564c61b50a18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x564c61b50bf8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x564c61b50b68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x564c61b50d48 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x564c61b50cb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x564c61b51008 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x564c61b50e00 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x564c61b50e80 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x564c61b50f28 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x564c61b510e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x564c61b511a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x564c61b51470 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x564c61b51320 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x564c61b51398 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b51598 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x564c61b51770 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x564c61b51650 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x564c61b516d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x564c61b51958 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x564c61b51838 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x564c61b518b8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x564c61b51cc8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x564c61b51a18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564c61b51a90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564c61b51b10 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564c61b5ca80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564c61b5ca60 <col:106> 'int' 0
| `-ParmVarDecl 0x564c61b51b88 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564c61b5cab8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564c61b5ca98 <col:126> 'int' 0
|-CXXMethodDecl 0x564c61b52068 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564c61b51d98 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564c61b51e30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564c61b51eb0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x564c61b51f28 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564c61b5caf0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564c61b5cad0 <col:114> 'int' 0
|-CXXMethodDecl 0x564c61b523f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564c61b52140 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x564c61b521b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x564c61b52238 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x564c61b5cb08 <col:96> 'int' 0
| `-ParmVarDecl 0x564c61b522b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564c61b5cb48 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564c61b5cb28 <col:116> 'int' 0
|-CXXMethodDecl 0x564c61b52778 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x564c61b524c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x564c61b52540 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61b525c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564c61b5cb80 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564c61b5cb60 <col:109> 'int' 0
| `-ParmVarDecl 0x564c61b52638 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564c61b5cbb8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564c61b5cb98 <col:129> 'int' 0
|-CXXMethodDecl 0x564c61b52af8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564c61b52848 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x564c61b528c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61b52940 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x564c61b529b8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564c61b5cbf0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564c61b5cbd0 <col:117> 'int' 0
|-CXXMethodDecl 0x564c61b52e88 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x564c61b52bd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b52c48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61b52cc8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x564c61b5cc08 <col:99> 'int' 0
| `-ParmVarDecl 0x564c61b52d40 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x564c61b5cc48 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x564c61b5cc28 <col:119> 'int' 0
|-CXXMethodDecl 0x564c61b532a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x564c61b52f58 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x564c61b52fd8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x564c61b53050 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61b530d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x564c61b5cc80 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x564c61b5cc60 <col:108> 'int' 0
| `-ParmVarDecl 0x564c61b53150 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x564c61b5ccb8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x564c61b5cc98 <col:141> 'int' 0
|-CXXMethodDecl 0x564c61b536c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x564c61b53380 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x564c61b53400 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x564c61b53478 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61b534f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x564c61b53578 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x564c61b5ccd0 <col:121> 'int' 0
|-CXXMethodDecl 0x564c61b53af8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x564c61b537a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x564c61b53828 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x564c61b538a0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61b53920 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x564c61b5ccf0 <col:98> 'int' 0
| `-ParmVarDecl 0x564c61b539a0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x564c61b5cd10 <col:123> 'int' 0
|-CXXMethodDecl 0x564c61b53dc0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x564c61b53bd0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x564c61b53c50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x564c61b53cd0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x564c61b5cd30 <col:80> 'int' 0
|-EnumDecl 0x564c61b53e78 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x564c61b53f80 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564c61b54210 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b53f60 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x564c61b53f40 <col:42> 'int' 1
| |-EnumConstantDecl 0x564c61b54010 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564c61b54228 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b53ff0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x564c61b53fd0 <col:40> 'int' 2
| |-EnumConstantDecl 0x564c61b540a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564c61b54240 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b54080 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x564c61b54060 <col:44> 'int' 4
| |-EnumConstantDecl 0x564c61b54130 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x564c61b54258 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b54110 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x564c61b540f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x564c61b541c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x564c61b54270 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b541a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x564c61b54180 <col:34> 'int' 6
|-CXXMethodDecl 0x564c61b54528 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x564c61b54298 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x564c61b54338 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x564c61b543b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x564c61b54430 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x564c61b5cde8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x564c61b5cdd0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x564c61b5cdb8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x564c61b5cd98 <col:98, col:105> 'String' (CXXTemporary 0x564c61b5cd98)
|           `-CXXTemporaryObjectExpr 0x564c61b5cd60 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x564c61b547c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x564c61b545f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x564c61b54670 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x564c61b546e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x564c61b5ce98 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x564c61b5ce80 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x564c61b5ce68 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x564c61b5ce48 <col:94, col:101> 'String' (CXXTemporary 0x564c61b5ce48)
| |         `-CXXTemporaryObjectExpr 0x564c61b5ce10 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x564c61b5d680 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x564c61b5d5f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x564c61b5d5c8 <col:9> '<bound member function type>' ->add_task_handlers 0x564c61b54528
|     | `-CXXThisExpr 0x564c61b5d5b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x564c61b5d638 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61b5d538 <col:27> 'Task *' lvalue ParmVar 0x564c61b545f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x564c61b5d650 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61b5d558 <col:33> 'NotifierSignal *' lvalue ParmVar 0x564c61b54670 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x564c61b5d668 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x564c61b5d578 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x564c61b541c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x564c61b5d598 <col:62> 'const String' lvalue ParmVar 0x564c61b546e8 'prefix' 'const String &'
|-CXXMethodDecl 0x564c61b549d8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x564c61b54890 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x564c61b54908 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x564c61b5cf48 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x564c61b5cf30 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x564c61b5cf18 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x564c61b5cef8 <col:70, col:77> 'String' (CXXTemporary 0x564c61b5cef8)
| |         `-CXXTemporaryObjectExpr 0x564c61b5cec0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x564c61b5d858 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x564c61b5d7d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x564c61b5d7a0 <col:9> '<bound member function type>' ->add_task_handlers 0x564c61b54528
|     | `-CXXThisExpr 0x564c61b5d790 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x564c61b5d810 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61b5d710 <col:27> 'Task *' lvalue ParmVar 0x564c61b54890 'task' 'Task *'
|     |-ImplicitCastExpr 0x564c61b5d828 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x564c61b5d730 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x564c61b5d840 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x564c61b5d750 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x564c61b541c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x564c61b5d770 <col:57> 'const String' lvalue ParmVar 0x564c61b54908 'prefix' 'const String &'
|-CXXMethodDecl 0x564c61b54cb8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x564c61b54aa0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b54b20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b54b98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x564c61b54f68 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x564c61b54d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b54e08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b54e88 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x564c61b55258 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x564c61b55038 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b550b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b55130 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x564c61b55508 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x564c61b55328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b553a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b55428 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x564c61b557b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x564c61b555d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b55658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b556d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x564c61b55a68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x564c61b55888 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b55908 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b55980 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x564c61b55d18 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x564c61b55b38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b55bb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b55c38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x564c61b56028 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x564c61b55e40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b55ec0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b55f40 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x564c61b56308 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x564c61b560f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b56178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b56220 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x564c61b565e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x564c61b563d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b56458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b56500 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x564c61b56850 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x564c61b566b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x564c61b56738 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x564c61b567b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x564c61b56af8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x564c61b56920 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x564c61b569a0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x564c61b56a18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x564c61b56da8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x564c61b56bc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b56c48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b56cc8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x564c61b57058 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x564c61b56e78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b56ef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b56f70 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x564c61b57308 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x564c61b57128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b571a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b57220 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x564c61b575d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x564c61b573d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b57458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x564c61b574f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x564c61b57908 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x564c61b576a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x564c61b57728 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x564c61b577a0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x564c61b57818 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564c61b5cf60 <col:93> 'bool' false
|-CXXMethodDecl 0x564c61b57af0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564c61b579d8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x564c61b57a58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x564c61b57cc8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564c61b57bb0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x564c61b57c30 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x564c61b57fa8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x564c61b57d88 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x564c61b57e00 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x564c61b57e80 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x564c61b57ef8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b58298 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x564c61b58078 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x564c61b580f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x564c61b58170 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x564c61b581e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b584d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x564c61b58370 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x564c61b583f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x564c61b586b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x564c61b58598 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x564c61b58618 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x564c61b58768 prev 0x564c61b4ff08 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564c61b58860 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x564c61b588f0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x564c61b58968 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x564c61b58a28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x564c61b58af0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x564c61b58c68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x564c61b58ba0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x564c61b58d10 <col:24>
| | `-OptimizeNoneAttr 0x564c61b58d68 <col:34>
| |-CXXMethodDecl 0x564c61b58db0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x564c61b59068 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x564c61b58e60 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x564c61b58ed8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x564c61b58f58 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x564c61b59120 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x564c61b59158 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x564c61b591c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x564c61b59248 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x564c61b59568 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x564c61b59300 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x564c61b59378 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x564c61b593f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x564c61b59470 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x564c61b59680 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x564c61b60ff8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x564c61b60ff8
| | `-ParmVarDecl 0x564c61b61108 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x564c61b611a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x564c61b611a8
| | `-ParmVarDecl 0x564c61b612b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x564c61c4afb0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564c61b596f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x564c61b59798 <col:38> "" ""
|-CXXMethodDecl 0x564c61b59828 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x564c61b598c8 <col:44> "" ""
|-AccessSpecDecl 0x564c61b59938 <line:260:3, col:10> col:3 private
|-EnumDecl 0x564c61b59960 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x564c61b59a60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x564c61b59ab0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b59a40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x564c61b59a20 <col:27> 'int' 4
|-FieldDecl 0x564c61b59b68 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x564c61b59d18 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x564c61b59dd0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x564c61b5ae60 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x564c61b5aec8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x564c61b5b018 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x564c61b5af58 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x564c61b5b1c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x564c61b5b0d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x564c61b5b3a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x564c61b5b288 <col:20> col:23 'int'
| `-ParmVarDecl 0x564c61b5b308 <col:25> col:28 'int'
|-CXXMethodDecl 0x564c61b5b650 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x564c61b5b470 <col:23> col:26 'int'
| |-ParmVarDecl 0x564c61b5b4f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x564c61b5b568 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x564c61b5b708 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x564c61b5b7d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x564c61b5b820 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x564c61b5b870 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x564c61b5ba50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x564c61b5b900 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x564c61b5b978 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b5bcf8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x564c61b5bb18 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x564c61b5bb98 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x564c61b5bc10 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b5bf18 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x564c61b5bdc8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x564c61b5be48 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x564c61b5c250 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x564c61b5bfd8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x564c61b5c058 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x564c61b5c0d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x564c61b5c150 <col:57> col:60 'int'
|-CXXMethodDecl 0x564c61b5c438 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x564c61b5c320 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x564c61b5c3a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x564c61b5c588 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x564c61b5c4f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x564c61b5c908 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x564c61b5c648 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x564c61b5c6c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x564c61b5c740 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x564c61b5c7c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x564c61b5ca20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class ToyTCP
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Timer _timer
       112 |     int _schedpos1
       120 |     class Timestamp _expiry_s
       120 |       union Timestamp::rep_t _t
       120 |         int64_t x
       128 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       128 |       TimerCallback callback
       136 |     void * _thunk
       144 |     class Element * _owner
       152 |     class RouterThread * _thread
       160 |   unsigned short _sport
       162 |   unsigned short _dport
       164 |   unsigned int _iss
       168 |   unsigned int _snd_nxt
       172 |   unsigned int _irs
       176 |   unsigned int _rcv_nxt
       180 |   int _state
       184 |   int _grow
       188 |   int _wc
       192 |   int _reset
       196 |   int _ingood
       200 |   int _inbad
       204 |   int _out
           | [sizeof=208, dsize=208, align=8,
           |  nvsize=208, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61ae40b0 prev 0x564c61adaef0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c61ae41a8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x564c61ae4248 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x564c61aeb010 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564c61aeb3f8 <col:11>
|-CXXConstructorDecl 0x564c61aeb0f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564c61aeb1d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x564c61aebb40 <col:11>
|-CXXConstructorDecl 0x564c61aeb278 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564c61aeb388 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x564c61aed398 <col:11>
|-CXXDestructorDecl 0x564c61aec6a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564c617f3258 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564c617f3368 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x564c617f3c30 <col:11>
|   `-ReturnStmt 0x564c617f3c20 <col:11>
|     `-UnaryOperator 0x564c617f3c08 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c617f3bf8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x564c617f33d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x564c617f34e8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x564c61b816d0 <col:11>
    `-ReturnStmt 0x564c61b816c0 <col:11>
      `-UnaryOperator 0x564c61b816a8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x564c61b81698 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61ada0a8 prev 0x564c61ad9db8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c61ada1a0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x564c61ada230 <col:19, col:25> col:19 public
|-TypedefDecl 0x564c61ada268 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x564c6173f430 'int32_t' sugar
|   |-Typedef 0x564c61652328 'int32_t'
|   `-TypedefType 0x564c6162b510 '__int32_t' sugar
|     |-Typedef 0x564c6162b128 '__int32_t'
|     `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61ada2d0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x564c6173f5f0 'int64_t' sugar
|   |-Typedef 0x564c61652390 'int64_t'
|   `-TypedefType 0x564c6162b630 '__int64_t' sugar
|     |-Typedef 0x564c6162b208 '__int64_t'
|     `-BuiltinType 0x564c615e95a0 'long'
|-EnumDecl 0x564c61ada328 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x564c61ada4a0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x564c61ada480 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x564c61ada458 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x564c61ada440 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x564c61ada410 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x564c61ada598 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x564c61ada578 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x564c61ada550 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x564c61ada538 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x564c61ada510 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x564c61ada4f0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x564c61ada5e8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x564c61ada6f0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adac40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ada6d0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x564c61ada6b0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x564c61ada780 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adac58 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ada760 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x564c61ada740 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x564c61ada810 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adac70 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ada7f0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x564c61ada7d0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x564c61ada8a0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adac88 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ada880 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x564c61ada860 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x564c61ada930 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adaca0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ada910 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x564c61ada8f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x564c61ada9c0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adacb8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ada9a0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x564c61ada980 <col:24> 'int' 1000
| |-EnumConstantDecl 0x564c61adaa50 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adacd0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61adaa30 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x564c61adaa10 <col:26> 'int' EnumConstant 0x564c61ada6f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x564c61adab20 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564c61adace8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61adab00 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x564c61adaae0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x564c61adaaa0 <col:27> 'int' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x564c61adaac0 <col:44> 'int' EnumConstant 0x564c61ada9c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x564c61adabf0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x564c61adad00 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61adabd0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x564c61adabb0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x564c61adab70 <col:27> 'int' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x564c61adab90 <col:44> 'int' EnumConstant 0x564c61ada8a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x564c61adad18 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x564c61adae20 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x564c61adae70 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61adae00 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x564c61adade0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x564c61adae98 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x564c6173f060 'uninitialized_type'
|   `-CXXRecord 0x564c6173efc8 'uninitialized_type'
|-CXXRecordDecl 0x564c61adaef0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x564c61adb000 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aeb408 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564c61aeb528 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x564c61aeb4e0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x564c61aeb470 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61aeb460 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x564c61aeb4a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x564c61aeb510 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x564c61aeb4c0 <col:19> 'int' 0
|-CXXConstructorDecl 0x564c61adb248 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x564c61adb0c0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x564c61adb138 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564c61ae6d40 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564c61ae6d20 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aeb540 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564c61aeb690 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x564c61aeb618 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x564c61aeb5a8 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61aeb598 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564c61aeb660 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x564c61aeb648 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x564c61aeb5d8 <col:16> 'long' lvalue ParmVar 0x564c61adb0c0 'sec' 'long'
|     `-ImplicitCastExpr 0x564c61aeb678 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x564c61aeb5f8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adb138 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x564c61adb4a8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564c61adb318 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x564c61adb390 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564c61ae6d78 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564c61ae6d58 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aeb6a8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564c61aeb7e0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x564c61aeb780 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x564c61aeb710 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61aeb700 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564c61aeb7b0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61aeb740 <col:16> 'int' lvalue ParmVar 0x564c61adb318 'sec' 'int'
|     `-ImplicitCastExpr 0x564c61aeb7c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x564c61aeb760 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adb390 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x564c61adb708 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x564c61adb578 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x564c61adb5f0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564c61ae6db0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564c61ae6d90 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aeb7f8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564c61aeb948 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x564c61aeb8d0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x564c61aeb860 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61aeb850 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564c61aeb918 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x564c61aeb900 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x564c61aeb890 <col:16> 'unsigned long' lvalue ParmVar 0x564c61adb578 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x564c61aeb930 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x564c61aeb8b0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adb5f0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x564c61adc8a0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x564c61adb7d8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x564c61adb850 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564c61ae6de8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564c61ae6dc8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aeb960 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564c61aebab0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x564c61aeba38 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x564c61aeb9c8 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61aeb9b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564c61aeba80 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x564c61aeba68 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x564c61aeb9f8 <col:16> 'unsigned int' lvalue ParmVar 0x564c61adb7d8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x564c61aeba98 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x564c61aeba18 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adb850 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x564c61adca00 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x564c61adc970 <col:31> col:37 'double'
|-CXXConstructorDecl 0x564c61adcb98 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x564c61adcad8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x564c61adcdc8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x564c61adccd0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x564c61adcf78 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x564c61adceb8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aebb50 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x564c61aebac8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x564c61adceb8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x564c61aebbb0 <col:19, line:214:5>
|-CXXConstructorDecl 0x564c61add148 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x564c61add088 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aebbc0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564c61aebc70 <col:53, line:219:5>
|   `-CStyleCastExpr 0x564c61aebc48 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x564c61aebc18 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x564c61add088 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x564c61add338 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x564c61add2b0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x564c61ad9e50 'Timestamp'
|   | `-CXXRecord 0x564c61ada0a8 'Timestamp'
|   `-ParenType 0x564c61add250 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x564c61add220 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x564c61ada3f0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x564c61ada268 'seconds_type'
|         `-TypedefType 0x564c6173f430 'int32_t' sugar
|           |-Typedef 0x564c61652328 'int32_t'
|           `-TypedefType 0x564c6162b510 '__int32_t' sugar
|             |-Typedef 0x564c6162b128 '__int32_t'
|             `-BuiltinType 0x564c615e9580 'int'
|-CXXConversionDecl 0x564c61add478 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x564c61add548 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x564c61aebd78 <col:37, line:231:5>
|   `-ReturnStmt 0x564c61aebd68 <line:227:9, col:23>
|     `-BinaryOperator 0x564c61aebd48 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x564c61aebd18 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x564c61aebcc8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x564c61ae4248
|       |   `-MemberExpr 0x564c61aebc98 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x564c61ae51f8
|       |     `-CXXThisExpr 0x564c61aebc88 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x564c61aebd30 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x564c61aebcf8 <col:23> 'int' 0
|-CXXMethodDecl 0x564c61add608 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x564c61add6c8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61add788 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61add848 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61add908 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61adda78 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x564c61add9b8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x564c61addbc0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x564c61addb30 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61addc88 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x564c61addd28 <col:54> "" ""
|-CXXMethodDecl 0x564c61adddb8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x564c61adde58 <col:54> "" ""
|-CXXMethodDecl 0x564c61addee8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x564c61addf88 <col:54> "" ""
|-CXXMethodDecl 0x564c61ade088 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x564c61ade158 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x564c61ade288 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x564c61ade380 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x564c61ade4b8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x564c61aebf90 <col:39, line:271:5>
|   `-ReturnStmt 0x564c61aebf80 <line:267:9, col:61>
|     `-CallExpr 0x564c61aebf20 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x564c61aebf08 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564c61aebd90 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x564c61ae5528 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x564c61aebf50 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x564c61aebdf0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x564c61ae4248
|       |   `-MemberExpr 0x564c61aebdc0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x564c61ae51f8
|       |     `-CXXThisExpr 0x564c61aebdb0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x564c61aebf68 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x564c61aebe90 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x564c61aebe60 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x564c61aebe20 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x564c61aebe78 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x564c61aebe40 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada9c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ade578 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x564c61aec150 <col:39, line:279:5>
|   `-ReturnStmt 0x564c61aec140 <line:275:9, col:61>
|     `-CallExpr 0x564c61aec0e0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x564c61aec0c8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564c61aebfa8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x564c61ae5528 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x564c61aec110 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x564c61aec008 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x564c61ae4248
|       |   `-MemberExpr 0x564c61aebfd8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x564c61ae51f8
|       |     `-CXXThisExpr 0x564c61aebfc8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x564c61aec128 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x564c61aec0a8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x564c61aec078 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x564c61aec038 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x564c61aec090 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x564c61aec058 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada8a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ade638 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x564c61aec2e8 <col:39, line:287:5>
|   `-ReturnStmt 0x564c61aec2d8 <line:283:9, col:53>
|     `-BinaryOperator 0x564c61aec2b8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x564c61aec288 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x564c61aec1a8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x564c61ae4248
|       |   `-MemberExpr 0x564c61aec178 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x564c61ae51f8
|       |     `-CXXThisExpr 0x564c61aec168 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x564c61aec2a0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x564c61aec268 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564c61aec248 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x564c61aec218 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564c61aec1d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada6f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564c61aec230 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564c61aec1f8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ade728 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x564c61aed580 <col:40, line:293:5>
|   |-DeclStmt 0x564c61aec430 <line:291:9, col:48>
|   | `-VarDecl 0x564c61aec310 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x564c61aec410 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x564c61aec3b8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x564c61aec388 <col:22> '<bound member function type>' ->subsec 0x564c61add6c8
|   |     |   `-CXXThisExpr 0x564c61aec378 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x564c61aec3f8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x564c61aec3d8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adab20 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564c61aed570 <line:292:9, col:70>
|     `-ExprWithCleanups 0x564c61aed558 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x564c61aed528 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61aed510 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x564c61aed4f0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x564c61aed4c0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x564c61aed258 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x564c61aed240 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x564c61aec448 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x564c61aec310 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x564c61aed460 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x564c61aed448 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x564c61aed418 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x564c61aed270 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x564c61aed1e0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x564c61aed1c8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x564c61aed178 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564c61ad9ff8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x564c61aed118 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x564c61aec478 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x564c61aec468 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x564c61aed160 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x564c61aed148 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x564c61aec938 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x564c61aec4a0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x564c61aec530 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x564c61aec500 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x564c61aec4c0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adab20 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x564c61aec518 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x564c61aec4e0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x564c61aec310 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x564c61aed490 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x564c61aed228 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x564c61aed218 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x564c61ade7e8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x564c61aedad8 <col:40, line:302:5>
|   |-DeclStmt 0x564c61aed6d0 <line:297:9, col:48>
|   | `-VarDecl 0x564c61aed5b0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x564c61aed6b0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x564c61aed658 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x564c61aed628 <col:22> '<bound member function type>' ->subsec 0x564c61add6c8
|   |     |   `-CXXThisExpr 0x564c61aed618 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x564c61aed698 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x564c61aed678 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adabf0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564c61aedac8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x564c61aedab0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x564c61aeda80 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61aeda68 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x564c61aeda48 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x564c61aeda18 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x564c61aed940 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x564c61aed928 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x564c61aed6e8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x564c61aed5b0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x564c61aed9b8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x564c61aed9a0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x564c61aed970 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x564c61aed958 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x564c61aed8c8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x564c61aed8b0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x564c61aed890 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564c61ad9ff8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x564c61aed830 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x564c61aed718 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x564c61aed708 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x564c61aed878 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x564c61aed860 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x564c61aed7f0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x564c61aed740 <col:39> 'int' 0
|               |               `-BinaryOperator 0x564c61aed7d0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x564c61aed7a0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x564c61aed760 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adabf0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x564c61aed7b8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x564c61aed780 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x564c61aed5b0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x564c61aed9e8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x564c61aed910 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x564c61aed900 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x564c61ade8a8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x564c61aedb60 <col:40, line:306:5>
|   `-ReturnStmt 0x564c61aedb50 <line:305:9, col:17>
|     `-CXXConstructExpr 0x564c61aedb20 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x564c61aedb08 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61aedaf8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x564c61adea48 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x564c61ade958 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x564c61adec18 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x564c61adeb20 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x564c61aded08 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x564c61adee78 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x564c61adedb8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x564c61aedca8 <col:56, line:320:5>
|   `-ReturnStmt 0x564c61aedc98 <line:319:9, col:32>
|     `-ExprWithCleanups 0x564c61aedc80 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x564c61aedc50 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61aedc38 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x564c61aedbf8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x564c61aedbc8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564c61aedb88 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564c61adedb8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x564c61aedbe0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x564c61aedba8 <col:31> 'int' 0
|-CXXMethodDecl 0x564c61adf0b8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x564c61adef30 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61adefa8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61aede78 <col:72, line:326:5>
|   `-ReturnStmt 0x564c61aede68 <line:325:9, col:51>
|     `-ExprWithCleanups 0x564c61aede50 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x564c61aede20 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61aede08 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x564c61aeddc8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x564c61aeddb0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564c61aedcd0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564c61adef30 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x564c61aedd70 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x564c61aedd58 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564c61aedcf0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x564c61ae39a0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x564c61aedd98 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x564c61aedd10 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adefa8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61adf268 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x564c61adf178 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x564c61aee540 <col:56, line:337:5>
|   |-DeclStmt 0x564c61aee178 <line:329:9, col:51>
|   | `-VarDecl 0x564c61aedea0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x564c61aee160 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x564c61aee130 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x564c61aee118 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x564c61aee100 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x564c61aee0d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x564c61aee0b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x564c61aee0a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x564c61aedf90 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x564c61aee330 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x564c61aee1e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x564c61ae4248
|   | | `-MemberExpr 0x564c61aee1b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x564c61ae51f8
|   | |   `-DeclRefExpr 0x564c61aee190 <col:9> 'Timestamp' lvalue Var 0x564c61aedea0 't' 'Timestamp'
|   | `-BinaryOperator 0x564c61aee310 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x564c61aee2e0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x564c61aee210 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x564c61adf178 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x564c61aee2f8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x564c61aee2c0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x564c61aee2a0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x564c61aee270 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x564c61aee230 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x564c61aee288 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x564c61aee250 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada9c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564c61aee528 <line:336:9, col:16>
|     `-CXXConstructExpr 0x564c61aee4f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x564c61aee4e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x564c61aee4c0 <col:16> 'Timestamp' lvalue Var 0x564c61aedea0 't' 'Timestamp'
|-CXXMethodDecl 0x564c61adf430 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x564c61adf320 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61adf398 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61aee6f8 <col:72, line:343:5>
|   `-ReturnStmt 0x564c61aee6e8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x564c61aee6d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x564c61aee6a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61aee688 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x564c61aee648 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x564c61aee630 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564c61aee578 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564c61adf320 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x564c61aee5f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x564c61aee5d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564c61aee598 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x564c61ae3ae8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x564c61aee618 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x564c61aee5b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adf398 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61adf580 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x564c61adf4f0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x564c61aeeb40 <col:56, line:354:5>
|   |-DeclStmt 0x564c61aee8e8 <line:346:9, col:51>
|   | `-VarDecl 0x564c61aee720 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x564c61aee8d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x564c61aee8a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x564c61aee888 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x564c61aee870 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x564c61aee840 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x564c61aee828 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x564c61aee810 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x564c61aee7e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x564c61aeeaa0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x564c61aee950 <col:9, col:14> 'int64_t':'long' lvalue .x 0x564c61ae4248
|   | | `-MemberExpr 0x564c61aee920 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x564c61ae51f8
|   | |   `-DeclRefExpr 0x564c61aee900 <col:9> 'Timestamp' lvalue Var 0x564c61aee720 't' 'Timestamp'
|   | `-BinaryOperator 0x564c61aeea80 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x564c61aeea50 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x564c61aee980 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x564c61adf4f0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x564c61aeea68 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x564c61aeea30 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x564c61aeea10 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x564c61aee9e0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x564c61aee9a0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x564c61aee9f8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x564c61aee9c0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada8a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564c61aeeb28 <line:353:9, col:16>
|     `-CXXConstructExpr 0x564c61aeeaf8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x564c61aeeae0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x564c61aeeac0 <col:16> 'Timestamp' lvalue Var 0x564c61aee720 't' 'Timestamp'
|-CXXMethodDecl 0x564c61adf748 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x564c61adf638 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61adf6b0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61aeecf8 <col:72, line:360:5>
|   `-ReturnStmt 0x564c61aeece8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x564c61aeecd0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x564c61aeeca0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61aeec88 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x564c61aeec48 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x564c61aeec30 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564c61aeeb78 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564c61adf638 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x564c61aeebf0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x564c61aeebd8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564c61aeeb98 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x564c61ae3c30 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x564c61aeec18 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x564c61aeebb8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adf6b0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61adf898 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x564c61adf808 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x564c61afb668 <col:56, line:371:5>
|   |-DeclStmt 0x564c61aeeee8 <line:363:9, col:51>
|   | `-VarDecl 0x564c61aeed20 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x564c61aeeed0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x564c61aeeea0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x564c61aeee88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x564c61aeee70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x564c61aeee40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x564c61aeee28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x564c61aeee10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x564c61aeede0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x564c61afb5c8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x564c61aeef50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x564c61ae4248
|   | | `-MemberExpr 0x564c61aeef20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x564c61ae51f8
|   | |   `-DeclRefExpr 0x564c61aeef00 <col:9> 'Timestamp' lvalue Var 0x564c61aeed20 't' 'Timestamp'
|   | `-CallExpr 0x564c61afb568 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x564c61afb550 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x564c61aeef80 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x564c61ae5528 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x564c61afb598 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x564c61aeefa0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x564c61adf808 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x564c61afb5b0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x564c61afb530 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x564c61afb500 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x564c61aeefc0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada6f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x564c61afb518 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x564c61aeefe0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564c61afb650 <line:370:9, col:16>
|     `-CXXConstructExpr 0x564c61afb620 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x564c61afb608 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x564c61afb5e8 <col:16> 'Timestamp' lvalue Var 0x564c61aeed20 't' 'Timestamp'
|-CXXMethodDecl 0x564c61adf988 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x564c61afb7a8 <col:39, line:377:5>
|   `-ReturnStmt 0x564c61afb798 <line:376:9, col:30>
|     `-ExprWithCleanups 0x564c61afb780 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x564c61afb750 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61afb738 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x564c61afb6f8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x564c61afb6a0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x564c61afb6e0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x564c61afb6c0 <col:29> 'int' 1
|-CXXMethodDecl 0x564c61adfa48 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x564c61afb888 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x564c61afb840 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x564c61afb7d0 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61afb7c0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x564c61afb800 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x564c61afb870 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x564c61afb820 <col:19> 'int' 0
|-CXXMethodDecl 0x564c61adfc48 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x564c61adfaf8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61adfb70 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564c61ae6e20 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564c61ae6e00 <col:60> 'int' 0
| `-CompoundStmt 0x564c61afba80 <col:63, line:395:5>
|   `-BinaryOperator 0x564c61afba60 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x564c61afb8e0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x564c61ae4248
|     | `-MemberExpr 0x564c61afb8b0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x564c61ae51f8
|     |   `-CXXThisExpr 0x564c61afb8a0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x564c61afba40 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x564c61afb9d0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x564c61afb970 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x564c61afb958 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x564c61afb940 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x564c61afb910 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564c61adfaf8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x564c61afb9b8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x564c61afb998 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x564c61afba28 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x564c61afba10 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x564c61afb9f0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adfb70 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61adfe18 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x564c61adfd08 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61adfd80 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afbbd8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x564c61afbb90 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x564c61afbaa8 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61afba98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564c61afbbc0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61afbad8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564c61adfd08 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x564c61afbb50 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x564c61afbb38 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564c61afbaf8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x564c61ae3ae8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x564c61afbb78 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x564c61afbb18 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adfd80 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61adffe8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x564c61adfed8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61adff50 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afbd30 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x564c61afbce8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x564c61afbc00 <col:9> '<bound member function type>' ->assign 0x564c61adfc48
|     | `-CXXThisExpr 0x564c61afbbf0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564c61afbd18 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61afbc30 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564c61adfed8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x564c61afbca8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x564c61afbc90 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564c61afbc50 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x564c61ae3c30 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x564c61afbcd0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x564c61afbc70 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61adff50 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61ae01b8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x564c61ae00a8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61ae0120 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564c61ae6e58 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564c61ae6e38 <col:57> 'int' 0
| `-DeprecatedAttr 0x564c61ae0268 <col:75> "" ""
|-CXXMethodDecl 0x564c61ae03f8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x564c61ae02e8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61ae0360 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61ae04a8 <col:74> "" ""
|-CXXMethodDecl 0x564c61ae0638 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x564c61ae0528 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564c61ae05a0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61ae06e8 <col:74> "" ""
|-CXXMethodDecl 0x564c61ae0778 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x564c61ae0818 <col:42> "" ""
|-CXXMethodDecl 0x564c61ae3050 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x564c61ae2f30 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x564c61ae2fb0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x564c61ae3120 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x564c61ae31e0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x564c61ae3280 <col:20>
| `-OptimizeNoneAttr 0x564c61ae32d8 <col:30>
|-CXXMethodDecl 0x564c61ae3320 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x564c61ae33e0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x564c61ae34a0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x564c61ae3560 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x564c61ae3620 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x564c61ae36e0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x564c61ae37a0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x564c61ae3860 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x564c61ae39a0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae3910 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afbe78 <col:58, line:512:5>
|   `-ReturnStmt 0x564c61afbe68 <line:511:9, col:53>
|     `-BinaryOperator 0x564c61afbe48 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x564c61afbe18 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564c61afbd48 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae3910 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564c61afbe30 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564c61afbdf8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564c61afbdd8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x564c61afbda8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564c61afbd68 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564c61afbdc0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564c61afbd88 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada9c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ae3ae8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae3a58 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afbfc0 <col:58, line:516:5>
|   `-ReturnStmt 0x564c61afbfb0 <line:515:9, col:53>
|     `-BinaryOperator 0x564c61afbf90 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x564c61afbf60 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564c61afbe90 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae3a58 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564c61afbf78 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564c61afbf40 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564c61afbf20 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x564c61afbef0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564c61afbeb0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564c61afbf08 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564c61afbed0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada8a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ae3c30 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae3ba0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afc108 <col:58, line:520:5>
|   `-ReturnStmt 0x564c61afc0f8 <line:519:9, col:53>
|     `-BinaryOperator 0x564c61afc0d8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x564c61afc0a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564c61afbfd8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae3ba0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564c61afc0c0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564c61afc088 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564c61afc068 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x564c61afc038 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564c61afbff8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada6f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564c61afc050 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564c61afc018 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ae3d78 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae3ce8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afc250 <col:60, line:524:5>
|   `-ReturnStmt 0x564c61afc240 <line:523:9, col:55>
|     `-BinaryOperator 0x564c61afc220 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x564c61afc1f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564c61afc120 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae3ce8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564c61afc208 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564c61afc1d0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x564c61afc1b0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x564c61afc180 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564c61afc140 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564c61afc198 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564c61afc160 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada9c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ae3ec0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae3e30 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afc398 <col:60, line:528:5>
|   `-ReturnStmt 0x564c61afc388 <line:527:9, col:55>
|     `-BinaryOperator 0x564c61afc368 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x564c61afc338 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564c61afc268 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae3e30 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564c61afc350 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564c61afc318 <col:25, col:55> 'int'
|           `-BinaryOperator 0x564c61afc2f8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x564c61afc2c8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564c61afc288 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564c61afc2e0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564c61afc2a8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada8a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564c61ae4008 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae3f78 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afc4e0 <col:60, line:532:5>
|   `-ReturnStmt 0x564c61afc4d0 <line:531:9, col:55>
|     `-BinaryOperator 0x564c61afc4b0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x564c61afc480 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564c61afc3b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae3f78 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564c61afc498 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564c61afc460 <col:25, col:55> 'int'
|           `-BinaryOperator 0x564c61afc440 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x564c61afc410 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564c61afc3d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61ada6f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564c61afc428 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564c61afc3f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564c61adaa50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x564c61ae40b0 prev 0x564c61adaef0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564c61ae41a8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x564c61ae4248 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x564c61aeb010 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564c61aeb3f8 <col:11>
| |-CXXConstructorDecl 0x564c61aeb0f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564c61aeb1d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x564c61aebb40 <col:11>
| |-CXXConstructorDecl 0x564c61aeb278 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x564c61aeb388 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x564c61aed398 <col:11>
| |-CXXDestructorDecl 0x564c61aec6a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x564c617f3258 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564c617f3368 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x564c617f3c30 <col:11>
| |   `-ReturnStmt 0x564c617f3c20 <col:11>
| |     `-UnaryOperator 0x564c617f3c08 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564c617f3bf8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x564c617f33d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x564c617f34e8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x564c61b816d0 <col:11>
|     `-ReturnStmt 0x564c61b816c0 <col:11>
|       `-UnaryOperator 0x564c61b816a8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61b81698 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x564c61ae42b0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x564c61ae43b0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x564c61ae45b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ae4390 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x564c61ae4370 <col:21> 'int' 0
| |-EnumConstantDecl 0x564c61ae4440 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x564c61ae45c8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ae4420 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x564c61ae4400 <col:23> 'int' 1
| |-EnumConstantDecl 0x564c61ae44d0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x564c61ae45e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61ae44b0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x564c61ae4490 <col:23> 'int' 2
| `-EnumConstantDecl 0x564c61ae4560 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x564c61ae45f8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61ae4540 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x564c61ae4520 <col:27> 'int' 3
|-CXXMethodDecl 0x564c61ae4638 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x564c61ae4700 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x564c61ae4908 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x564c61ae47b0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x564c61ae4830 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x564c61ae6e70 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x564c61ae4b18 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x564c61ae49c8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x564c61ae4a40 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x564c61ae4be8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x564c61ae4ca8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x564c61ae4e18 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x564c61ae4d58 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x564c61ae4ee0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x564c61ae4fa0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x564c61ae5060 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x564c61ae5120 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x564c61ae51c0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x564c61ae51f8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x564c61ae5268 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x564c61afc4f8 <col:27, line:684:5>
|-CXXMethodDecl 0x564c61ae5328 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x564c61afc508 <col:27, line:696:5>
|-CXXMethodDecl 0x564c61ae5528 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae53d8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x564c61ae5450 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afc690 <col:66, line:700:5>
|   `-ReturnStmt 0x564c61afc680 <line:699:9, col:31>
|     `-CallExpr 0x564c61afc620 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x564c61afc608 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564c61afc5b8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x564c619678d8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x564c61afc650 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x564c61afc578 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x564c61ae53d8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x564c61afc668 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x564c61afc598 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae5450 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61ae5898 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x564c61ae55e8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x564c61ae5660 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x564c61ae56d8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x564c61ae5750 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61afc9e0 <col:64, line:707:5>
|   |-DeclStmt 0x564c61afc720 <line:704:9, col:24>
|   | `-VarDecl 0x564c61afc6b8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x564c61afc930 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x564c61afc738 <col:9> 'int32_t':'int' lvalue ParmVar 0x564c61ae5660 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x564c61afc918 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x564c61afc8b0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x564c61afc898 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61afc818 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x564c6196cba8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x564c61afc8e8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x564c61afc7b8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x564c61ae56d8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x564c61afc900 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x564c61afc7d8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61ae5750 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x564c61afc7f8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x564c61afc6b8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x564c61afc9c0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x564c61afc950 <col:9> 'int32_t':'int' lvalue ParmVar 0x564c61ae55e8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x564c61afc9a8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x564c61afc990 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x564c61afc970 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x564c61afc6b8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x564c61ae5b38 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x564c61ae5968 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x564c61ae59e0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x564c61ae5a58 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x564c61ae5dd8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x564c61ae5c00 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x564c61ae5c78 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x564c61ae5cf0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x564c61ae5f68 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x564c61ae5ea0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x564c61ae6168 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x564c61ae6020 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x564c61ae6098 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x564c61ae6438 <line:717:5, col:73> col:24
| `-FunctionDecl 0x564c61ae6378 parent 0x564c615e9488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x564c61ae6228 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x564c61ae62a0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x564c61ae6658 <line:718:5, col:72> col:24
| `-FunctionDecl 0x564c61ae6598 parent 0x564c615e9488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x564c61ae6488 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x564c61ae6500 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x564c61ae6820 <line:719:5, col:57> col:29
| `-FunctionDecl 0x564c61ae6768 parent 0x564c615e9488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x564c61ae66a8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x564c61ae6aa8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x564c61ae69e8 parent 0x564c615e9488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x564c61ae6898 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x564c61ae6910 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x564c61ae6cc8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x564c61ae6c08 parent 0x564c615e9488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x564c61ae6af8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x564c61ae6b70 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x564c61aec550 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x564c61aec638 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aed0a8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x564c61aed060 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x564c61ae51f8
| |     `-DeclRefExpr 0x564c61aed040 <col:7> 'const Timestamp' lvalue ParmVar 0x564c61aec638 '' 'const Timestamp &'
| `-CompoundStmt 0x564c61aed108 <col:7>
|-CXXConstructorDecl 0x564c61aec7b8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564c61aec8c8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x564c61ae51f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564c61aed3a8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x564c61aed350 <col:7> 'Timestamp::rep_t' xvalue ._t 0x564c61ae51f8
| |     `-CXXStaticCastExpr 0x564c61aed320 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x564c61aed2f0 <col:7> 'Timestamp' lvalue ParmVar 0x564c61aec8c8 '' 'Timestamp &&'
| `-CompoundStmt 0x564c61aed408 <col:7>
|-CXXDestructorDecl 0x564c61aec978 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564c617f30a8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x564c617f31b8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x564c617f3ca8 <col:7>
|   |-CXXMemberCallExpr 0x564c617f3c48 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x564c617f3b88 <col:7> '<bound member function type>' .operator= 0x564c617f3258
|   | | `-MemberExpr 0x564c617f3a98 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x564c61ae51f8
|   | |   `-CXXThisExpr 0x564c617f3a88 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x564c617f3b58 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x564c61ae51f8
|   |   `-DeclRefExpr 0x564c617f3b38 <col:7> 'const Timestamp' lvalue ParmVar 0x564c617f31b8 '' 'const Timestamp &'
|   `-ReturnStmt 0x564c617f3c98 <col:7>
|     `-UnaryOperator 0x564c617f3c80 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c617f3c70 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x564c617f3558 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x564c617f3668 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x564c61b81748 <col:7>
    |-CXXMemberCallExpr 0x564c61b816e8 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x564c61b81650 <col:7> '<bound member function type>' .operator= 0x564c617f33d8
    | | `-MemberExpr 0x564c61b81520 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x564c61ae51f8
    | |   `-CXXThisExpr 0x564c61b81510 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x564c61b81620 <col:7> 'Timestamp::rep_t' xvalue ._t 0x564c61ae51f8
    |   `-CXXStaticCastExpr 0x564c61b815f0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x564c61b815c0 <col:7> 'Timestamp' lvalue ParmVar 0x564c617f3668 '' 'Timestamp &&'
    `-ReturnStmt 0x564c61b81738 <col:7>
      `-UnaryOperator 0x564c61b81720 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x564c61b81710 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b7e728 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x564c61b7e858 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x564c61b7f348 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b68f58 prev 0x564c61b4b3a0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564c61b69050 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x564c61b690e0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x564c61b69140 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x564c61b691e8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x564c61b69308 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x564c61c4aae0 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x564c61c4aae0
| |-CXXConstructorDecl 0x564c61c4abc0 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x564c61c4abc0
| | `-ParmVarDecl 0x564c61c4aca8 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x564c61c4ad48 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x564c61c4ad48
|   `-ParmVarDecl 0x564c61c4ae58 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x564c61b694a8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x564c61b693e8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x564c61b696f8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x564c61b69568 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x564c61b695e8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x564c61b69888 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x564c61b697c0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x564c61b69a08 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x564c61b69948 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x564c61b69bb8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x564c61b69af8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x564c61b69cb0 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x564c61b7f520 <col:21, line:58:5>
|   `-IfStmt 0x564c61b7f508 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x564c61b7f470 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x564c61b7f440 <col:6> '<bound member function type>' ->scheduled 0x564c61b6a508
|     |   `-ImplicitCastExpr 0x564c61b7f490 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x564c61b7f430 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x564c61b7f4e8 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x564c61b7f4b8 <col:6> '<bound member function type>' ->unschedule 0x564c61b7dbd0
|         `-CXXThisExpr 0x564c61b7f4a8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x564c61b69db0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x564c61b7f6c0 <col:26, line:65:5>
|   |-BinaryOperator 0x564c61b7f5e0 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x564c61b7f578 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x564c61b7e858
|   | | `-MemberExpr 0x564c61b7f548 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x564c61b7e918
|   | |   `-CXXThisExpr 0x564c61b7f538 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x564c61b7f5c8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x564c61b7f5a8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x564c61b7ed78 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x564c61b7f6a0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x564c61b7f610 <col:2> 'void *' lvalue ->_thunk 0x564c61b7e998
|     | `-CXXThisExpr 0x564c61b7f600 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x564c61b7f678 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x564c61b7f640 <col:20> 'int' 1
|-CXXMethodDecl 0x564c61b69ef0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x564c61b69e60 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x564c61b7f820 <col:52, line:71:5>
|   |-CStyleCastExpr 0x564c61b7f710 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x564c61b7f6e0 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x564c61b69e60 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x564c61b7f800 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x564c61b7f7d0 <col:2> '<bound member function type>' ->assign 0x564c61b69db0
|       `-CXXThisExpr 0x564c61b7f7c0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x564c61b6a0c0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x564c61b69fa8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x564c61b6a028 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x564c61b7f9a0 <col:58, line:79:5>
|   |-BinaryOperator 0x564c61b7f8e8 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x564c61b7f880 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x564c61b7e858
|   | | `-MemberExpr 0x564c61b7f850 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x564c61b7e918
|   | |   `-CXXThisExpr 0x564c61b7f840 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x564c61b7f8d0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x564c61b7f8b0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x564c61b69fa8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x564c61b7f980 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x564c61b7f918 <col:2> 'void *' lvalue ->_thunk 0x564c61b7e998
|     | `-CXXThisExpr 0x564c61b7f908 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x564c61b7f968 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b7f948 <col:11> 'void *' lvalue ParmVar 0x564c61b6a028 'user_data' 'void *'
|-CXXMethodDecl 0x564c61b6a210 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x564c61b6a180 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x564c61b7fb38 <col:35, line:87:5>
|   |-BinaryOperator 0x564c61b7fa68 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x564c61b7fa00 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x564c61b7e858
|   | | `-MemberExpr 0x564c61b7f9d0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x564c61b7e918
|   | |   `-CXXThisExpr 0x564c61b7f9c0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x564c61b7fa50 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x564c61b7fa30 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x564c61b7ef50 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x564c61b7fb18 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x564c61b7fa98 <col:2> 'void *' lvalue ->_thunk 0x564c61b7e998
|     | `-CXXThisExpr 0x564c61b7fa88 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x564c61b7fb00 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x564c61b7fae8 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x564c61b7fac8 <col:11> 'Element *' lvalue ParmVar 0x564c61b6a180 'element' 'Element *'
|-CXXMethodDecl 0x564c61b6a358 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x564c61b6a2c8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x564c61b7fcd0 <col:29, line:94:5>
|   |-BinaryOperator 0x564c61b7fc00 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x564c61b7fb98 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x564c61b7e858
|   | | `-MemberExpr 0x564c61b7fb68 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x564c61b7e918
|   | |   `-CXXThisExpr 0x564c61b7fb58 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x564c61b7fbe8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x564c61b7fbc8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x564c61b7f128 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x564c61b7fcb0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x564c61b7fc30 <col:2> 'void *' lvalue ->_thunk 0x564c61b7e998
|     | `-CXXThisExpr 0x564c61b7fc20 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x564c61b7fc98 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x564c61b7fc80 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x564c61b7fc60 <col:11> 'Task *' lvalue ParmVar 0x564c61b6a2c8 'task' 'Task *'
|-CXXMethodDecl 0x564c61b6a448 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x564c61b7fdb0 <col:37, line:100:5>
|   `-ReturnStmt 0x564c61b7fda0 <line:99:2, col:19>
|     `-BinaryOperator 0x564c61b7fd80 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x564c61b7fd50 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x564c61b7fd00 <col:9> 'Element *const' lvalue ->_owner 0x564c61b7e9f8
|       |   `-CXXThisExpr 0x564c61b7fcf0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x564c61b7fd68 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x564c61b7fd30 <col:19> 'int' 0
|-CXXMethodDecl 0x564c61b6a508 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x564c61b7fe70 <col:35, line:105:5>
|   `-ReturnStmt 0x564c61b7fe60 <line:104:2, col:23>
|     `-BinaryOperator 0x564c61b7fe40 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x564c61b7fe28 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x564c61b7fdd8 <col:9> 'const int' lvalue ->_schedpos1 0x564c61b7e678
|       |   `-CXXThisExpr 0x564c61b7fdc8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x564c61b7fe08 <col:23> 'int' 0
|-CXXMethodDecl 0x564c61b6a5c8 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x564c61b7fed8 <col:51, line:118:5>
|   `-ReturnStmt 0x564c61b7fec8 <line:117:2, col:9>
|     `-MemberExpr 0x564c61b7fe98 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|       `-CXXThisExpr 0x564c61b7fe88 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x564c61b6a688 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x564c61b80430 <col:37, line:136:5>
|   `-IfStmt 0x564c61b80408 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x564c61b7ff98 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x564c61b7ff80 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x564c61b7ff60 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x564c61b7ff30 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x564c61add478
|     |       `-MemberExpr 0x564c61b7ff00 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|     |         `-CXXThisExpr 0x564c61b7fef0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x564c61b80378 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x564c61b80360 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x564c61b80330 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x564c61b80318 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x564c61b802e0 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x564c61b802c8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x564c61b802a8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564c61b0bc50 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x564c61b80248 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x564c61b80230 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x564c61b80158 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x564c61b80140 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x564c61b80120 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564c61b0b910 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x564c61b800c0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x564c61b7ffc0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|     |         |     |   `-CXXThisExpr 0x564c61b7ffb0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x564c61b80108 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x564c61b800f0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x564c61b800a0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x564c61b80088 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x564c61b80028 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x564c61afef70 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x564c61b80290 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x564c61b80278 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x564c61b80210 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x564c61b801f8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x564c61b801c8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x564c6195a4c0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x564c61b803f8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x564c61b803c8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x564c61b80398 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|           `-CXXThisExpr 0x564c61b80388 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x564c61b6a748 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x564c61b80518 <col:35, line:141:5>
|   `-ReturnStmt 0x564c61b80508 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x564c61b804d0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x564c61b804a0 <col:9, col:17> '<bound member function type>' ->router 0x564c61b5db00
|         `-ImplicitCastExpr 0x564c61b804f0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x564c61b80488 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x564c61b80458 <col:9> 'Element *const' lvalue ->_owner 0x564c61b7e9f8
|               `-CXXThisExpr 0x564c61b80448 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x564c61b6a808 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x564c61b80598 <col:37, line:146:5>
|   `-ReturnStmt 0x564c61b80588 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x564c61b80570 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x564c61b80540 <col:9> 'Element *const' lvalue ->_owner 0x564c61b7e9f8
|         `-CXXThisExpr 0x564c61b80530 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x564c61b6a8c8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x564c61b80618 <col:41, line:151:5>
|   `-ReturnStmt 0x564c61b80608 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x564c61b805f0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x564c61b805c0 <col:9> 'RouterThread *const' lvalue ->_thread 0x564c61b7ea58
|         `-CXXThisExpr 0x564c61b805b0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x564c61b6a990 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x564c61b6ab88 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x564c61b6aa40 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x564c61b6aab8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564c61b7f338 <col:50> 'bool' false
|-CXXMethodDecl 0x564c61b6ad08 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x564c61b6ac48 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x564c61b7cec0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x564c61b6adc0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x564c61b7d008 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x564c61b7cf78 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x564c61b7d150 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x564c61b7d0c0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x564c61b7d298 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x564c61b7d208 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x564c61b7d360 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x564c61b80780 <col:32, line:223:5>
|   `-ExprWithCleanups 0x564c61b80768 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x564c61b80710 <col:2, col:47> 'void'
|       |-MemberExpr 0x564c61b80640 <col:2> '<bound member function type>' ->schedule_at_steady 0x564c61b7cec0
|       | `-CXXThisExpr 0x564c61b80630 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x564c61b80750 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x564c61b80738 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x564c61b806f0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x564c61b806d8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x564c61b806a8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x564c6195a4c0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x564c61b7d4a0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x564c61b7d410 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x564c61b7d5e8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7d558 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61b80908 <col:56, line:241:5>
|   `-ExprWithCleanups 0x564c61b808f0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x564c61b80898 <col:2, col:40> 'void'
|       |-MemberExpr 0x564c61b807a8 <col:2> '<bound member function type>' ->schedule_after 0x564c61b7d4a0
|       | `-CXXThisExpr 0x564c61b80798 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x564c61b808d8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x564c61b808c0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x564c61b80858 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x564c61b80828 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x564c61b807e8 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61b7d558 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x564c61b80840 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x564c61b80808 <col:38> 'int' 0
|-CXXMethodDecl 0x564c61b7d730 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7d6a0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61b80b78 <col:58, line:249:5>
|   `-ExprWithCleanups 0x564c61b80b60 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x564c61b80b08 <col:2, col:49> 'void'
|       |-MemberExpr 0x564c61b80930 <col:2> '<bound member function type>' ->schedule_after 0x564c61b7d4a0
|       | `-CXXThisExpr 0x564c61b80920 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x564c61b80b48 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x564c61b80b30 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x564c61b80ab0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x564c61b80a98 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x564c61b80a08 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x564c61adf268 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x564c61b80af0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x564c61b80ad8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x564c61b809e8 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61b7d6a0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b7d878 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x564c61b7d7e8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x564c61b80d58 <col:58, line:261:5>
|   `-ExprWithCleanups 0x564c61b80d40 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x564c61b80ce8 <col:2, col:38> 'void'
|       |-MemberExpr 0x564c61b80ba0 <col:2> '<bound member function type>' ->schedule_at_steady 0x564c61b7cec0
|       | `-CXXThisExpr 0x564c61b80b90 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x564c61b80d28 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x564c61b80d10 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x564c61b80cb0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x564c61b80c98 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x564c61b80c78 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564c61b0b910 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x564c61b80c48 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x564c61b80c30 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x564c61b80be0 <col:21> 'Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|             |     `-CXXThisExpr 0x564c61b80bd0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x564c61b80c10 <col:33> 'const Timestamp' lvalue ParmVar 0x564c61b7d7e8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x564c61b7d9c0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7d930 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61b81030 <col:58, line:270:5>
|   `-ExprWithCleanups 0x564c61b81018 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x564c61b80fc0 <col:2, col:79> 'void'
|       |-MemberExpr 0x564c61b80d80 <col:2> '<bound member function type>' ->schedule_at_steady 0x564c61b7cec0
|       | `-CXXThisExpr 0x564c61b80d70 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x564c61b81000 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x564c61b80fe8 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x564c61b80f80 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x564c61b80eb8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x564c61b80ea0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x564c61b80e30 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x564c61b80e00 <col:31, col:41> '<bound member function type>' .sec 0x564c6195bfb8
|             | |     `-ImplicitCastExpr 0x564c61b80e50 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x564c61b80dd0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|             | |         `-CXXThisExpr 0x564c61b80dc0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x564c61b80e88 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x564c61b80e68 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61b7d930 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x564c61b80f48 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x564c61b80f18 <col:60, col:70> '<bound member function type>' .subsec 0x564c6195c6b0
|                 `-ImplicitCastExpr 0x564c61b80f68 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x564c61b80ee8 <col:60> 'Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|                     `-CXXThisExpr 0x564c61b80ed8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x564c61b7db08 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7da78 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564c61b81368 <col:60, line:279:5>
|   `-ExprWithCleanups 0x564c61b81350 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x564c61b812f8 <col:2, col:65> 'void'
|       |-MemberExpr 0x564c61b81058 <col:2> '<bound member function type>' ->schedule_at_steady 0x564c61b7cec0
|       | `-CXXThisExpr 0x564c61b81048 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x564c61b81338 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x564c61b81320 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x564c61b812c0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x564c61b812a8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x564c61b81288 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564c61b0b910 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x564c61b81228 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x564c61b81210 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x564c61b81098 <col:21> 'Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|             |     `-CXXThisExpr 0x564c61b81088 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x564c61b81270 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x564c61b81258 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x564c61b811b8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x564c61b811a0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x564c61b81170 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x564c61adf268 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x564c61b811f8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x564c61b811e0 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x564c61b81150 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x564c61b7da78 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b7dbd0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x564c61b7dc90 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x564c61b81830 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x564c61b813c0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x564c61b81390 <col:2> '<bound member function type>' ->unschedule 0x564c61b7dbd0
|   |   `-CXXThisExpr 0x564c61b81380 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x564c61b81818 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x564c61b817e0 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x564c61b817c8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564c61b81478 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x564c617f3558 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x564c61b813f0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x564c61b7e6d8
|       | `-CXXThisExpr 0x564c61b813e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x564c61b81460 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x564c61b81430 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x564c61b7dd50 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x564c61b81b88 <col:42, line:310:5>
|   |-IfStmt 0x564c61b819d0 <line:306:2, line:307:23>
|   | |-CallExpr 0x564c61b81900 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x564c61b818e8 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x564c61b81888 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x564c61afd3e0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x564c61b819c0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x564c61b819a8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x564c61b81978 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x564c61b81960 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x564c61b81930 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x564c61b81b78 <line:309:2, col:33>
|     `-ExprWithCleanups 0x564c61b81b60 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x564c61b81b30 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564c61b81b18 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x564c61b81ad8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x564c61b81ac0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x564c61b81a90 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x564c61adf580 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x564c61b81b00 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x564c61b81a70 <col:30> 'int' 500
|-CXXMethodDecl 0x564c61b7de90 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7de00 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61b7df38 <col:69> "" ""
|-CXXMethodDecl 0x564c61b7e048 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7dfb8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61b7e0f0 <col:70> "" ""
|-CXXMethodDecl 0x564c61b7e200 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7e170 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61b7e2a8 <col:71> "" ""
|-CXXMethodDecl 0x564c61b7e3b8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x564c61b7e328 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61b7e460 <col:72> "" ""
|-EnumDecl 0x564c61b7e4d0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x564c61b7e5d0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x564c61b7e620 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b7e5b0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x564c61b7e590 <col:25> 'int' 1
|-AccessSpecDecl 0x564c61b7e638 <line:339:3, col:10> col:3 private
|-FieldDecl 0x564c61b7e678 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x564c61b7e6d8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x564c61b7e728 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x564c61b7e858 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x564c61b7f348 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x564c61b7e918 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x564c61b7e998 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x564c61b7e9f8 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x564c61b7ea58 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x564c61b7eba8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x564c61b7eab8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x564c61b7ed78 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x564c61b7ec60 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x564c61b7ece0 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x564c61b7ef50 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x564c61b7ee38 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x564c61b7eeb8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x564c61b7f128 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x564c61b7f010 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x564c61b7f090 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x564c61b7f2f8 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b82ea0 <../elements/local/toytcp.hh:24:1, line:62:1> line:24:7 class ToyTCP definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x564c61b82ff8 <col:1, col:7> col:7 implicit referenced class ToyTCP
|-AccessSpecDecl 0x564c61b83088 <line:25:2, col:8> col:2 public
|-CXXConstructorDecl 0x564c61b83110 <line:27:3, col:10> col:3 ToyTCP 'void ()'
|-CXXDestructorDecl 0x564c61b83200 <line:28:3, col:11> col:3 ~ToyTCP 'void ()' noexcept-unevaluated 0x564c61b83200
| `-Overrides: [ 0x564c61b4ba58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x564c61b83330 <line:30:3, col:53> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x564c61b4ceb8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x564c61b848e0 <col:34, col:53>
|   `-ReturnStmt 0x564c61b848d0 <col:36, col:43>
|     `-ImplicitCastExpr 0x564c61b848b8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x564c61b84898 <col:43> 'const char [7]' lvalue "ToyTCP"
|-CXXMethodDecl 0x564c61b833f8 <line:31:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x564c61b4cf80 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x564c61b84940 <col:34, col:54>
|   `-ReturnStmt 0x564c61b84930 <col:36, col:43>
|     `-ImplicitCastExpr 0x564c61b84918 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x564c61b848f8 <col:43> 'const char []' lvalue Var 0x564c61b4d230 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x564c61b834c0 <line:32:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x564c61b4d348 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x564c61b849a0 <col:34, col:49>
|   `-ReturnStmt 0x564c61b84990 <col:36, col:43>
|     `-ImplicitCastExpr 0x564c61b84978 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x564c61b84958 <col:43> 'const char []' lvalue Var 0x564c61b4d490 'PUSH' 'const char []'
|-CXXMethodDecl 0x564c61b83790 <line:33:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x564c61b4e750 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x564c61b83640 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x564c61b836b8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b838e8 <line:34:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x564c61b4e9a0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x564c61b83850 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x564c61b83a30 <line:36:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x564c61b4c098 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x564c61b839a0 <col:25, col:32> col:33 'Packet *'
|-CXXMethodDecl 0x564c61b83b78 <line:37:3, col:25> col:8 run_timer 'void (Timer *)'
| |-Overrides: [ 0x564c61b4c3d8 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x564c61b83ae8 <col:18, col:24> col:25 'Timer *'
|-AccessSpecDecl 0x564c61b83c20 <line:39:1, col:8> col:1 private
|-FieldDecl 0x564c61b83c58 <line:40:3, col:9> col:9 _timer 'Timer'
|-FieldDecl 0x564c61b83cc0 <line:42:3, col:18> col:18 _sport 'unsigned short'
|-FieldDecl 0x564c61b83d28 <line:43:3, col:18> col:18 referenced _dport 'unsigned short'
|-FieldDecl 0x564c61b83d90 <line:45:3, col:12> col:12 _iss 'unsigned int'
|-FieldDecl 0x564c61b83df8 <line:46:3, col:12> col:12 _snd_nxt 'unsigned int'
|-FieldDecl 0x564c61b83e60 <line:47:3, col:12> col:12 _irs 'unsigned int'
|-FieldDecl 0x564c61b83ec8 <line:48:3, col:12> col:12 _rcv_nxt 'unsigned int'
|-FieldDecl 0x564c61b83f30 <line:50:3, col:7> col:7 _state 'int'
|-FieldDecl 0x564c61b83f98 <line:51:3, col:7> col:7 _grow 'int'
|-FieldDecl 0x564c61b84000 <line:52:3, col:7> col:7 _wc 'int'
|-FieldDecl 0x564c61b84068 <line:53:3, col:7> col:7 _reset 'int'
|-FieldDecl 0x564c61b840d0 <line:55:3, col:7> col:7 referenced _ingood 'int'
|-FieldDecl 0x564c61b84138 <line:56:3, col:7> col:7 referenced _inbad 'int'
|-FieldDecl 0x564c61b841a0 <line:57:3, col:7> col:7 referenced _out 'int'
|-CXXMethodDecl 0x564c61b84290 <line:59:3, col:27> col:8 tcp_output 'void (Packet *)'
| `-ParmVarDecl 0x564c61b84200 <col:19, col:26> col:27 'Packet *'
|-CXXMethodDecl 0x564c61b843d8 <line:60:3, col:26> col:8 tcp_input 'void (Packet *)'
| `-ParmVarDecl 0x564c61b84348 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x564c61b844a0 <line:61:3, col:16> col:8 used restart 'void ()'
|-CXXConstructorDecl 0x564c61b84568 <line:24:7> col:7 implicit ToyTCP 'void (const ToyTCP &)' inline default_delete noexcept-unevaluated 0x564c61b84568
| `-ParmVarDecl 0x564c61b84678 <col:7> col:7 'const ToyTCP &'
`-CXXMethodDecl 0x564c61b84718 <col:7> col:7 implicit operator= 'ToyTCP &(const ToyTCP &)' inline default_delete noexcept-unevaluated 0x564c61b84718
  `-ParmVarDecl 0x564c61b84828 <col:7> col:7 'const ToyTCP &'

Layout: <CGRecordLayout
  LLVMType:%class.ToyTCP = type { %class.Element.base, %class.Timer, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.ToyTCP = type { %class.Element.base, %class.Timer, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c6191e610 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x564c6191e728 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x564c6191e7c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x564c6191e828 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x564c6191e888 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x564c6191e938 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c6191ec40 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c6191ed58 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x564c6191ee00 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x564c6191ee68 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x564c6191eef8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x564c61924f90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564c619253c8 <col:12>
|-CXXConstructorDecl 0x564c61925098 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564c619251a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564c6191ee00 'data' 'const char *'
| | `-ImplicitCastExpr 0x564c61927950 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x564c61927920 <col:12> 'const char *const' lvalue .data 0x564c6191ee00
| |     `-DeclRefExpr 0x564c61927900 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619251a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564c6191ee68 'length' 'int'
| | `-ImplicitCastExpr 0x564c619279e0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564c619279b0 <col:12> 'const int' lvalue .length 0x564c6191ee68
| |     `-DeclRefExpr 0x564c61927990 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619251a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564c6191eef8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x564c61927a70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x564c61927a40 <col:12> 'String::memo_t *const' lvalue .memo 0x564c6191eef8
| |     `-DeclRefExpr 0x564c61927a20 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619251a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x564c61927ac8 <col:12>
|-CXXConstructorDecl 0x564c61925248 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564c61925248
| `-ParmVarDecl 0x564c61925358 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x564c6192a8b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564c619362c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564c619363d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x564c619368f0 <col:12>
|   |-BinaryOperator 0x564c61936708 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x564c619366c0 <col:12> 'const char *' lvalue ->data 0x564c6191ee00
|   | | `-CXXThisExpr 0x564c619366b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564c619366f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x564c61936680 <col:12> 'const char *const' lvalue .data 0x564c6191ee00
|   |     `-DeclRefExpr 0x564c61936660 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619363d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564c619367d0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x564c61936788 <col:12> 'int' lvalue ->length 0x564c6191ee68
|   | | `-CXXThisExpr 0x564c61936778 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564c619367b8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x564c61936748 <col:12> 'const int' lvalue .length 0x564c6191ee68
|   |     `-DeclRefExpr 0x564c61936728 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619363d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564c61936898 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x564c61936850 <col:12> 'String::memo_t *' lvalue ->memo 0x564c6191eef8
|   | | `-CXXThisExpr 0x564c61936840 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564c61936880 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x564c61936810 <col:12> 'String::memo_t *const' lvalue .memo 0x564c6191eef8
|   |     `-DeclRefExpr 0x564c619367f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619363d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x564c619368e0 <col:12>
|     `-UnaryOperator 0x564c619368c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c619368b8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x564c61936448 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564c61936448
  `-ParmVarDecl 0x564c61936558 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61915b80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564c61915c98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x564c61915d28 <col:16, col:22> col:16 public
|-TypedefDecl 0x564c61915d68 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x564c615e9fd0 'const char *'
|   `-QualType 0x564c615e9521 'const char' const
|     `-BuiltinType 0x564c615e9520 'char'
|-TypedefDecl 0x564c61915df0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x564c61915dc0 'String::const_iterator' sugar
|   |-Typedef 0x564c61915d68 'const_iterator'
|   `-PointerType 0x564c615e9fd0 'const char *'
|     `-QualType 0x564c615e9521 'const char' const
|       `-BuiltinType 0x564c615e9520 'char'
|-TypedefDecl 0x564c61915f60 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x564c61915ed0 'int (String::*)() const'
|   |-RecordType 0x564c61915c10 'String'
|   | `-CXXRecord 0x564c61915b80 'String'
|   `-ParenType 0x564c61915e70 'int () const' sugar
|     `-FunctionProtoType 0x564c618eaa10 'int () const' const cdecl
|       `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61915fc8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x564c6173f5f0 'int64_t' sugar
|   |-Typedef 0x564c61652390 'int64_t'
|   `-TypedefType 0x564c6162b630 '__int64_t' sugar
|     |-Typedef 0x564c6162b208 '__int64_t'
|     `-BuiltinType 0x564c615e95a0 'long'
|-TypedefDecl 0x564c61916030 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x564c6173f510 'uint64_t' sugar
|   |-Typedef 0x564c61652530 'uint64_t'
|   `-TypedefType 0x564c6162b6c0 '__uint64_t' sugar
|     |-Typedef 0x564c6162b278 '__uint64_t'
|     `-BuiltinType 0x564c615e9640 'unsigned long'
|-TypedefDecl 0x564c619160c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x564c61916090 'String::intmax_t' sugar
|   |-Typedef 0x564c61915fc8 'intmax_t'
|   `-TypedefType 0x564c6173f5f0 'int64_t' sugar
|     |-Typedef 0x564c61652390 'int64_t'
|     `-TypedefType 0x564c6162b630 '__int64_t' sugar
|       |-Typedef 0x564c6162b208 '__int64_t'
|       `-BuiltinType 0x564c615e95a0 'long'
|-TypedefDecl 0x564c61916150 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x564c61916120 'String::uintmax_t' sugar
|   |-Typedef 0x564c61916030 'uintmax_t'
|   `-TypedefType 0x564c6173f510 'uint64_t' sugar
|     |-Typedef 0x564c61652530 'uint64_t'
|     `-TypedefType 0x564c6162b6c0 '__uint64_t' sugar
|       |-Typedef 0x564c6162b278 '__uint64_t'
|       `-BuiltinType 0x564c615e9640 'unsigned long'
|-CXXConstructorDecl 0x564c61916210 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x564c619163b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x564c619162f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x564c61916568 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x564c619164a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x564c619166c0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x564c61916630 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x564c619168d8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x564c61916788 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x564c61916808 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x564c61916af8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x564c619169a8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x564c61916a28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x564c61916d18 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564c61916bc8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x564c61916c48 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x564c61916f38 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x564c61916de8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x564c61916e68 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x564c619170c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x564c61917000 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x564c61917248 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x564c61917188 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x564c619173d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x564c61917310 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x564c61917530 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x564c619174a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x564c61917688 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x564c619175f8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x564c619177e0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x564c61917750 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x564c61917968 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x564c619178a8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x564c61917af8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x564c61917a30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x564c61917c88 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x564c61917bc0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x564c61917e18 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x564c61917d50 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x564c61917f10 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x564c61918038 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x564c619181b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x564c619180f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x564c61918308 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x564c61918278 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x564c619183c0 <col:63> "" ""
|-CXXMethodDecl 0x564c61918508 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x564c61918448 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x564c61918718 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x564c619185c8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x564c61918648 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x564c61918938 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x564c619187e0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x564c61918860 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x564c61918c18 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x564c619189f8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x564c61918a78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x564c61924a60 <col:55> 'int' 10
| `-ParmVarDecl 0x564c61918af0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564c61924a80 <col:76> 'bool' true
|-CXXMethodDecl 0x564c61918ef8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x564c61918ce0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x564c61918d60 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x564c61924a90 <col:56> 'int' 10
| `-ParmVarDecl 0x564c61918dd8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564c61924ab0 <col:77> 'bool' true
|-CXXMethodDecl 0x564c61919000 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x564c619190c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x564c61919190 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x564c61919230 <col:20>
| `-OptimizeNoneAttr 0x564c61919288 <col:30>
|-CXXConversionDecl 0x564c61919378 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x564c61919448 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x564c61919508 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x564c619195f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x564c619196b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x564c61919838 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x564c61919770 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x564c61919988 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x564c619198f8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x564c61919a78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x564c61919b38 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x564c61919d88 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x564c61919bf0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x564c61919c70 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x564c61919fe8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x564c61919e50 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x564c61919ed0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x564c6191a0b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x564c6191a2c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x564c6191a170 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x564c6191a1f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x564c6191a4e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x564c6191a390 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x564c6191a410 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x564c6191a678 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x564c6191a5b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x564c6191a768 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x564c6191a8d8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x564c6191a818 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564c6191aae8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x564c6191a998 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x564c6191aa18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x564c6191ad00 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x564c6191aba8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x564c6191ac20 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x564c6191ae90 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x564c6191adc0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564c6191b0b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x564c6191af50 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x564c6191afd0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564c6191b200 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x564c6191b170 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x564c6191b3d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x564c6191b2c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x564c6191b340 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x564c6191b528 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x564c6191b498 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x564c6191b740 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x564c6191b5e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x564c6191b660 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x564c61924ac0 <col:39> 'int' 0
|-CXXMethodDecl 0x564c6191b960 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x564c6191b800 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x564c6191b880 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x564c61924ae0 <col:48> 'int' 0
|-CXXMethodDecl 0x564c6191bb40 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x564c6191ba20 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x564c6191baa0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x564c61924b00 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x564c6191bc10 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x564c6191bcd0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x564c6191bd90 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x564c6191be50 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x564c6191bf10 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x564c6191c0b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x564c6191bfc0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x564c6191c238 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x564c6191c170 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x564c6191c410 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x564c6191c2f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x564c6191c588 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x564c6191c4c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x564c6191c6d0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x564c6191c640 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564c6191c820 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x564c6191c790 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x564c6191c9f8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x564c6191c8e0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x564c6191c960 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x564c6191cbd8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564c6191cac0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x564c6191cb40 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x564c6191cd28 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x564c6191cc98 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x564c6191cf38 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x564c6191cde8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x564c6191ce68 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x564c6191d098 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x564c6191d000 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564c6191d1f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x564c6191d158 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x564c6191d298 <col:57> "" ""
|-CXXMethodDecl 0x564c6191d3a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x564c6191d318 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x564c6191d4f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x564c6191d468 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x564c6191d678 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x564c6191d5b0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x564c6191d740 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x564c6191d800 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x564c6191d8c0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x564c6191d960 <col:49> "" ""
|-CXXMethodDecl 0x564c6191d9f0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x564c6191dab0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x564c6191dba0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x564c6191dc68 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x564c6191dd28 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x564c6191dde8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x564c6191dee0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x564c6191dfa8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x564c6191e070 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x564c6191e248 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x564c6191e128 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x564c6191e1a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x564c6191e470 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x564c6191e310 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x564c6191e390 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x564c6191e580 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x564c6191e5e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x564c6191e610 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x564c6191e728 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x564c6191e7c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x564c6191e828 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x564c6191e888 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x564c6191e938 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x564c6191e9a0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x564c6191ebd8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x564c6191ec28 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c6191ebb8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x564c6191eac8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x564c6191ea70 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x564c6191eab0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x564c6191ea90 <col:32> 'int' 8
|-CXXRecordDecl 0x564c6191ec40 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564c6191ed58 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x564c6191ee00 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x564c6191ee68 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x564c6191eef8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x564c61924f90 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564c619253c8 <col:12>
| |-CXXConstructorDecl 0x564c61925098 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564c619251a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564c6191ee00 'data' 'const char *'
| | | `-ImplicitCastExpr 0x564c61927950 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x564c61927920 <col:12> 'const char *const' lvalue .data 0x564c6191ee00
| | |     `-DeclRefExpr 0x564c61927900 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619251a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564c6191ee68 'length' 'int'
| | | `-ImplicitCastExpr 0x564c619279e0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x564c619279b0 <col:12> 'const int' lvalue .length 0x564c6191ee68
| | |     `-DeclRefExpr 0x564c61927990 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619251a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564c6191eef8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x564c61927a70 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x564c61927a40 <col:12> 'String::memo_t *const' lvalue .memo 0x564c6191eef8
| | |     `-DeclRefExpr 0x564c61927a20 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619251a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x564c61927ac8 <col:12>
| |-CXXConstructorDecl 0x564c61925248 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564c61925248
| | `-ParmVarDecl 0x564c61925358 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x564c6192a8b0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x564c619362c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564c619363d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x564c619368f0 <col:12>
| |   |-BinaryOperator 0x564c61936708 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x564c619366c0 <col:12> 'const char *' lvalue ->data 0x564c6191ee00
| |   | | `-CXXThisExpr 0x564c619366b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564c619366f0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x564c61936680 <col:12> 'const char *const' lvalue .data 0x564c6191ee00
| |   |     `-DeclRefExpr 0x564c61936660 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619363d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564c619367d0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x564c61936788 <col:12> 'int' lvalue ->length 0x564c6191ee68
| |   | | `-CXXThisExpr 0x564c61936778 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564c619367b8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x564c61936748 <col:12> 'const int' lvalue .length 0x564c6191ee68
| |   |     `-DeclRefExpr 0x564c61936728 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619363d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564c61936898 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x564c61936850 <col:12> 'String::memo_t *' lvalue ->memo 0x564c6191eef8
| |   | | `-CXXThisExpr 0x564c61936840 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564c61936880 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x564c61936810 <col:12> 'String::memo_t *const' lvalue .memo 0x564c6191eef8
| |   |     `-DeclRefExpr 0x564c619367f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564c619363d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x564c619368e0 <col:12>
| |     `-UnaryOperator 0x564c619368c8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564c619368b8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x564c61936448 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564c61936448
|   `-ParmVarDecl 0x564c61936558 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x564c6191ef70 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x564c6191f1b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x564c6191efd8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x564c6191f058 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x564c6191f0d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x564c61924f50 <col:79, line:261:5>
|   |-BinaryOperator 0x564c61924bc8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x564c61924b60 <col:2, col:5> 'const char *' lvalue .data 0x564c6191ee00
|   | | `-MemberExpr 0x564c61924b30 <col:2> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|   | |   `-CXXThisExpr 0x564c61924b20 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x564c61924bb0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x564c61924b90 <col:12> 'const char *' lvalue ParmVar 0x564c6191efd8 'data' 'const char *'
|   |-BinaryOperator 0x564c61924c90 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x564c61924c28 <col:2, col:5> 'int' lvalue .length 0x564c6191ee68
|   | | `-MemberExpr 0x564c61924bf8 <col:2> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|   | |   `-CXXThisExpr 0x564c61924be8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x564c61924c78 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x564c61924c58 <col:14> 'int' lvalue ParmVar 0x564c6191f058 'length' 'int'
|   `-IfStmt 0x564c61924f38 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x564c61924db0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x564c61924d98 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x564c61924d78 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x564c61924d58 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x564c61924cf0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x564c6191eef8
|     |       | `-MemberExpr 0x564c61924cc0 <col:7> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|     |       |   `-CXXThisExpr 0x564c61924cb0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x564c61924d40 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x564c61924d20 <col:17> 'String::memo_t *' lvalue ParmVar 0x564c6191f0d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x564c61924f10 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x564c61924ef8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564c61924e00 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x564c6190dbe8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x564c61924e68 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564c6191e7c8
|         `-ImplicitCastExpr 0x564c61924e50 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x564c61924e30 <col:27> 'String::memo_t *' lvalue ParmVar 0x564c6191f0d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x564c6191f468 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x564c6191f288 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x564c6191f308 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x564c6191f380 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x564c6191ef70 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x564c619253d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564c61925568 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x564c619254d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x564c61925440 <col:2> '<bound member function type>' ->assign_memo 0x564c6191f1b8
|     | `-ImplicitCastExpr 0x564c61925508 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x564c61925430 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x564c61925520 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61925470 <col:14> 'const char *' lvalue ParmVar 0x564c6191f288 'data' 'const char *'
|     |-ImplicitCastExpr 0x564c61925538 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564c61925490 <col:20> 'int' lvalue ParmVar 0x564c6191f308 'length' 'int'
|     `-ImplicitCastExpr 0x564c61925550 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x564c619254b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x564c6191f380 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x564c6191f5f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x564c6191f538 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x564c619257c0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x564c61925740 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x564c61925590 <col:2> '<bound member function type>' ->assign_memo 0x564c6191f1b8
|     | `-CXXThisExpr 0x564c61925580 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x564c61925778 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x564c61925610 <col:14, col:19> 'const char *' lvalue .data 0x564c6191ee00
|     |   `-MemberExpr 0x564c619255e0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x564c6191ef70
|     |     `-DeclRefExpr 0x564c619255c0 <col:14> 'const String' lvalue ParmVar 0x564c6191f538 'x' 'const String &'
|     |-ImplicitCastExpr 0x564c61925790 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x564c61925690 <col:25, col:30> 'int' lvalue .length 0x564c6191ee68
|     |   `-MemberExpr 0x564c61925660 <col:25, col:27> 'String::rep_t' lvalue ._r 0x564c6191ef70
|     |     `-DeclRefExpr 0x564c61925640 <col:25> 'const String' lvalue ParmVar 0x564c6191f538 'x' 'const String &'
|     `-ImplicitCastExpr 0x564c619257a8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x564c61925710 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x564c6191eef8
|         `-MemberExpr 0x564c619256e0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x564c6191ef70
|           `-DeclRefExpr 0x564c619256c0 <col:38> 'const String' lvalue ParmVar 0x564c6191f538 'x' 'const String &'
|-CXXMethodDecl 0x564c6191f6c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x564c61926180 <col:31, line:278:5>
|   `-IfStmt 0x564c61926168 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x564c61925860 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x564c61925848 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x564c61925818 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564c6191eef8
|     |     `-MemberExpr 0x564c619257e8 <col:6> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|     |       `-CXXThisExpr 0x564c619257d8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x564c61926140 <col:15, line:277:2>
|       |-ParenExpr 0x564c61925d10 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x564c61925ce0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x564c61925970 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x564c61925958 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x564c61925940 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x564c61925900 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564c6191e7c8
|       |   |       `-ImplicitCastExpr 0x564c619258e8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x564c619258b8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x564c6191eef8
|       |   |           `-MemberExpr 0x564c61925888 <col:27> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|       |   |             `-CXXThisExpr 0x564c61925878 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x564c619259d0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x564c619259b0 <col:54> 'int' 0
|       |   `-CallExpr 0x564c61925c40 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x564c61925c28 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x564c61925ba8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x564c61925c80 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564c61925ab8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x564c61925c98 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564c61925ae8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x564c61925cb0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x564c61925b20 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x564c61925cc8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x564c61925b90 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x564c61925b78 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x564c61925b40 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x564c61926060 <line:274:6, line:275:22>
|       | |-CallExpr 0x564c61925f20 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x564c61925f08 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x564c61925e80 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x564c6190f030 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x564c61925e50 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564c6191e7c8
|       | |   `-ImplicitCastExpr 0x564c61925e38 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x564c61925e08 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x564c6191eef8
|       | |       `-MemberExpr 0x564c61925dd8 <col:40> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|       | |         `-CXXThisExpr 0x564c61925dc8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x564c61926020 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x564c61926008 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x564c61925f48 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x564c61923ea0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x564c61926048 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x564c61925fa8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x564c6191eef8
|       |       `-MemberExpr 0x564c61925f78 <col:15> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|       |         `-CXXThisExpr 0x564c61925f68 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x564c61926120 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x564c619260b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564c6191eef8
|         | `-MemberExpr 0x564c61926088 <col:6> 'String::rep_t' lvalue ->_r 0x564c6191ef70
|         |   `-CXXThisExpr 0x564c61926078 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x564c61926108 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x564c619260e8 <col:16> 'int' 0
|-CXXMethodDecl 0x564c6191f958 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x564c6191f778 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x564c6191f7f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x564c6191f870 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x564c6191fa30 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x564c6191fc80 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x564c6191fae8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x564c6191fb68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x564c6191fbe0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x564c6191fe68 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x564c6191fd50 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x564c6191fdd0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x564c6191ff68 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x564c61926258 <col:41, line:286:5>
|   `-ReturnStmt 0x564c61926248 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x564c61926218 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x564c619261e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x564c619261c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x564c619261a8 <col:46> 'int' 1
|-CXXMethodDecl 0x564c61920208 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x564c61920020 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x564c619200a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x564c61920120 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x564c61923ea0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x564c619202d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x564c61923f70 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x564c61924140 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x564c61924028 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x564c619240a8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x564c61924200 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x564c619242c8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x564c619243c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x564c61924440 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x564c619244b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x564c61924520 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x564c61924620 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x564c61924670 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61924600 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x564c619245e0 <col:22> 'int' 14
|-CXXMethodDecl 0x564c61924888 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x564c619246a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x564c61924720 <col:38> col:41 'int'
| `-ParmVarDecl 0x564c619247a0 <col:43> col:46 'int'
|-FriendDecl 0x564c61924990 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x564c61924a20 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564c61bb1200 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x564c61bb13d8 prev 0x564c61bb1200 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x564c61bb1468 <col:46, col:52> col:46 public
|-TypedefDecl 0x564c61bb1490 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bb2df0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x564c61bb2da0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x564c61bb2d80 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x564c61bb16a8 'type'
|     `-SubstTemplateTypeParmType 0x564c61bb1670 'String' sugar
|       |-TemplateTypeParmType 0x564c618da430 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618da3e0 'T'
|       `-RecordType 0x564c61915c10 'String'
|         `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb2ea8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x564c61bb2e70 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x564c61bb2e50 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x564c61bb2df0 'type'
|     `-ElaboratedType 0x564c61bb2da0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x564c61bb2d80 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x564c61bb16a8 'type'
|         `-SubstTemplateTypeParmType 0x564c61bb1670 'String' sugar
|           |-TemplateTypeParmType 0x564c618da430 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564c618da3e0 'T'
|           `-RecordType 0x564c61915c10 'String'
|             `-CXXRecord 0x564c61915b80 'String'
|-CXXMethodDecl 0x564c61bb3028 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x564c61bb2f38 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x564c61bb3118 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x564c61bb31f8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x564c61bb31f8
|-CXXMethodDecl 0x564c61bb34c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x564c61bb33d0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x564c61bb3708 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564c61bb3580 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564c61bb35f8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564c61bb38d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564c61bb37c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564c61bb3840 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564c61bb3a38 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x564c61bb3b08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x564c61bb3d58 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564c61bb3bc8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x564c61bb3c40 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564c61bb3fb8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x564c61bb3e28 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x564c61bb3ea0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564c61bb4178 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x564c61bb4088 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564c61bb4338 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x564c61bb4240 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564c61bb43f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564c61bb44a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564c61bb46d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x564c61bb4550 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564c61bb45c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x564c61bb4978 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x564c61bb4880 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x564c61bb4a40 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x564c61bb4a90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x564c61bb4ae0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564c61b4e3c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x564c61bafc68 prev 0x564c61b4e3c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x564c61bb1170 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x564c61bb1120 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x564c61bb1100 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x564c61bb0fb0 'type'
|     `-SubstTemplateTypeParmType 0x564c61bb0e40 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x564c618b01e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x564c618b0188 'F'
|       `-RecordType 0x564c61bb0aa0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x564c61bb09c0 'typed_array_memory'
|-FieldDecl 0x564c61bb4b30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x564c61bb4b80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x564c61bb4bb8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|   |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x564c618e76f8 'T'
|   `-RecordType 0x564c61915c10 'String'
|     `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb4c48 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x564c61bb4c10 'String &'
|   `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|     |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564c618e76f8 'T'
|     `-RecordType 0x564c61915c10 'String'
|       `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb4cd8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x564c61bb4ca0 'const String &'
|   `-QualType 0x564c61bafd01 'const String' const
|     `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-RecordType 0x564c61915c10 'String'
|         `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb4d68 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x564c61bb4d30 'String *'
|   `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|     |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564c618e76f8 'T'
|     `-RecordType 0x564c61915c10 'String'
|       `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb4df8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x564c61bb4dc0 'const String *'
|   `-QualType 0x564c61bafd01 'const String' const
|     `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-RecordType 0x564c61915c10 'String'
|         `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb5a50 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x564c61bb5a00 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x564c61bb59e0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x564c61bb5918 'type'
|     `-LValueReferenceType 0x564c61bb58e0 'const String &'
|       `-QualType 0x564c61bb5681 'const String' const
|         `-SubstTemplateTypeParmType 0x564c61bb5680 'String' sugar
|           |-TemplateTypeParmType 0x564c618ba130 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564c618ba0d8 'T'
|           `-RecordType 0x564c61915c10 'String'
|             `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb5ab8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x564c61bb4ca0 'const String &'
|   `-QualType 0x564c61bafd01 'const String' const
|     `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-RecordType 0x564c61915c10 'String'
|         `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb5b10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bb5b78 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x564c61bb4d30 'String *'
|   `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|     |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564c618e76f8 'T'
|     `-RecordType 0x564c61915c10 'String'
|       `-CXXRecord 0x564c61915b80 'String'
|-TypedefDecl 0x564c61bb5be0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x564c61bb4dc0 'const String *'
|   `-QualType 0x564c61bafd01 'const String' const
|     `-SubstTemplateTypeParmType 0x564c61bafd00 'String' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-RecordType 0x564c61915c10 'String'
|         `-CXXRecord 0x564c61915b80 'String'
|-EnumDecl 0x564c61bb5c38 <line:134:5> col:5
| `-EnumConstantDecl 0x564c61bb5d30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x564c61bb5d10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564c618e8dd8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564c618e8db0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564c618e8d90 <col:40> 'int' 1
|-CXXConstructorDecl 0x564c61bb5db8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x564c61bb6068 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bb5e70 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564c61bb5f30 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x564c61bb62f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x564c61bb61e0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x564c61bb65b8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x564c61bb64a0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x564c61bb68d0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x564c61bb67b0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x564c61bb6be0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x564c61bb6ac0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x564c61bb6ed0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bb6d18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564c61bb6d90 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564c61bb6ff8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x564c61bb70a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bb7100 <col:30> Inherited
|-CXXMethodDecl 0x564c61bb7148 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x564c61bb71f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bb7250 <col:30> Inherited
|-CXXMethodDecl 0x564c61bb7318 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564c61bb73c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bb7420 <col:30> Inherited
|-CXXMethodDecl 0x564c61bb7468 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564c61bb7518 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bb7570 <col:30> Inherited
|-CXXMethodDecl 0x564c61bb75b8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564c61bb7668 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bb76c0 <col:30> Inherited
|-CXXMethodDecl 0x564c61bb7708 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x564c61bb77b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bb7810 <col:30> Inherited
|-CXXMethodDecl 0x564c61bb7838 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564c61bb78e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564c61bb7998 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564c61bb7b58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bb7a48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564c61bb7ac0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564c61bb7ca8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x564c61bb7c18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bb7e58 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x564c61bb7d60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564c61bb7f10 <col:20>
| `-OptimizeNoneAttr 0x564c61bb7f68 <col:30>
|-CXXMethodDecl 0x564c61bb8088 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x564c61bb7f90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564c61bb8140 <col:20>
| `-OptimizeNoneAttr 0x564c61bb8198 <col:30>
|-CXXMethodDecl 0x564c61bb8250 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x564c61bb81c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bb8398 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564c61bb8308 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bb84c8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x564c61bb85c8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x564c61bb8698 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x564c61bb8768 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x564c61bb88a8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x564c61bb8818 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bb89f0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564c61bb8960 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bb8b38 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x564c61bb8aa8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564c61bb8bf0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564c61bb8cf0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x564c61bb8c60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564c61bb8da8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x564c61bb8e68 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x564c61bb8f68 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x564c61bb90e8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x564c61bb9028 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x564c61bb98a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564c61bb91a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x564c61bb9808 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x564c61bb9708 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x564c61bb9988 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564c61bb9ad8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x564c61bb9a48 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564c61bb9b90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x564c61bb9dd8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bb9c50 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x564c61bb9cc8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x564c61bb9f68 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x564c61bb9ea8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x564c61bba178 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x564c61bba030 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x564c61bba0a8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x564c61bba238 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x564c61bba498 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x564c61bba3a0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x564c61bba568 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x564c61bba568

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61c300a8 prev 0x564c61bc8b48 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564c61c301a0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x564c61c30230 <col:22, col:28> col:22 public
|-EnumDecl 0x564c61c30258 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x564c61c30378 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c30358 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x564c61c30340 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x564c61c30320 <col:14> 'int' 999
| |-EnumConstantDecl 0x564c61c30420 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c30400 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x564c61c303e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x564c61c303c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x564c61c304b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c30490 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x564c61c30470 <col:17> 'int' 0
| |-EnumConstantDecl 0x564c61c30540 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c30520 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x564c61c30500 <col:13> 'int' 1
| |-EnumConstantDecl 0x564c61c305d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c305b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x564c61c30590 <col:16> 'int' 2
| |-EnumConstantDecl 0x564c61c30660 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c30640 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x564c61c30620 <col:13> 'int' 3
| |-EnumConstantDecl 0x564c61c306f0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c306d0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x564c61c306b0 <col:15> 'int' 4
| |-EnumConstantDecl 0x564c61c30780 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c30760 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x564c61c30740 <col:14> 'int' 5
| |-EnumConstantDecl 0x564c61c30810 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x564c61c307f0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x564c61c307d0 <col:12> 'int' 6
| `-EnumConstantDecl 0x564c61c308a0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x564c61c30880 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x564c61c30860 <col:13> 'int' 7
|-VarDecl 0x564c61c30910 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x564c61c30998 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x564c61c30a20 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x564c61c30aa8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x564c61c30b30 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x564c61c30bb8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x564c61c30c40 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x564c61c30cc8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x564c61c30d50 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x564c61c30dd8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x564c61c30e60 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x564c61c30f60 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x564c61c36248 '_nerrors' 'int'
| | `-IntegerLiteral 0x564c61c369d8 <line:128:13> 'int' 0
| `-CompoundStmt 0x564c61c36a48 <col:16, line:129:5>
|-CXXDestructorDecl 0x564c61c31050 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x564c61c36a58 <col:29, line:132:5>
|-CXXMethodDecl 0x564c61c31208 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x564c61c31140 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564c61c312d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x564c61c313b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x564c61c36ab0 <col:44, line:161:5>
|   `-ReturnStmt 0x564c61c36aa0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x564c61c36a88 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x564c61c36a68 <col:9> 'ErrorHandler *' lvalue Var 0x564c61c362a8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x564c61c314f8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x564c61c31468 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x564c61c315c0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x564c61c36b10 <col:43, line:173:5>
|   `-ReturnStmt 0x564c61c36b00 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x564c61c36ae8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x564c61c36ac8 <col:9> 'ErrorHandler *' lvalue Var 0x564c61c36320 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x564c61c31678 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x564c61c316f8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x564c61c31808 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x564c61c31778 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x564c61c31958 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x564c61c318c8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564c61c31ab0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x564c61c31a18 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x564c61c31c08 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x564c61c31b70 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x564c61c31d60 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x564c61c31cc8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x564c61c31f70 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x564c61c31e18 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x564c61c31e98 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x564c61c32148 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x564c61c32030 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x564c61c320b0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x564c61c32368 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564c61c32208 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x564c61c32288 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x564c61c32548 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564c61c32428 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564c61c324a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x564c61c32728 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564c61c32608 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564c61c32688 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x564c61c328b0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x564c61c327e8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x564c61c32a80 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x564c61c32968 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564c61c329e0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x564c61c36d68 <col:57, line:234:5>
|   `-ReturnStmt 0x564c61c36d58 <line:233:2, col:41>
|     `-ExprWithCleanups 0x564c61c36d40 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x564c61c36ce8 <col:9, col:41> 'int'
|         |-MemberExpr 0x564c61c36cb8 <col:9> '<bound member function type>' ->xmessage 0x564c61c328b0
|         | `-CXXThisExpr 0x564c61c36ca8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x564c61c36d28 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x564c61c36d10 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564c61c36c88 <col:18, col:40> 'String' (CXXTemporary 0x564c61c36c88)
|               `-CallExpr 0x564c61c36c50 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x564c61c36c38 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x564c61c36bb0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x564c61c34a78 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x564c61c36bd0 <col:31> 'const String' lvalue ParmVar 0x564c61c329e0 'str' 'const String &'
|                 `-DeclRefExpr 0x564c61c36bf0 <col:36> 'const String' lvalue ParmVar 0x564c61c32968 'anno' 'const String &'
|-CXXMethodDecl 0x564c61c32d60 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x564c61c32b40 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564c61c32bc0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x564c61c32c38 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564c61c36ff8 <col:68, line:243:5>
|   `-ReturnStmt 0x564c61c36fe8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x564c61c36fd0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x564c61c36f70 <col:9, col:41> 'int'
|         |-MemberExpr 0x564c61c36f40 <col:9> '<bound member function type>' ->xmessage 0x564c61c32a80
|         | `-CXXThisExpr 0x564c61c36f30 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x564c61c36e08 <col:18> 'const String' lvalue ParmVar 0x564c61c32b40 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x564c61c36fb8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x564c61c36fa0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564c61c36f10 <col:24, col:40> 'String' (CXXTemporary 0x564c61c36f10)
|               `-CXXMemberCallExpr 0x564c61c36ea8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x564c61c36e38 <col:24> '<bound member function type>' ->vformat 0x564c61c33f40
|                 | `-CXXThisExpr 0x564c61c36e28 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x564c61c36ed8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x564c61c36e68 <col:32> 'const char *' lvalue ParmVar 0x564c61c32bc0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x564c61c36ef0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x564c61c36e88 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564c61c32c38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564c61c33000 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x564c61c32e28 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x564c61c32ea0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564c61c32f18 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x564c61c37338 <col:23, line:254:5>
|   `-ReturnStmt 0x564c61c37328 <line:253:2, col:71>
|     `-ExprWithCleanups 0x564c61c37310 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x564c61c372b0 <col:9, col:71> 'int'
|         |-MemberExpr 0x564c61c37280 <col:9> '<bound member function type>' ->xmessage 0x564c61c32a80
|         | `-CXXThisExpr 0x564c61c37270 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x564c61c372f8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x564c61c372e0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x564c61c37230 <col:18, col:65> 'String' (CXXTemporary 0x564c61c37230)
|         |     `-CallExpr 0x564c61c371c8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x564c61c371b0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x564c61c37098 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x564c61c34a78 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x564c61c370b8 <col:31> 'const String' lvalue ParmVar 0x564c61c32ea0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x564c61c37210 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x564c61c371f8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x564c61c37190 <col:37, col:64> 'String' (CXXTemporary 0x564c61c37190)
|         |             `-CallExpr 0x564c61c37160 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x564c61c37148 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x564c61c370d8 <col:37> 'String (const String &)' lvalue CXXMethod 0x564c61c350c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x564c61c370f8 <col:56> 'const String' lvalue ParmVar 0x564c61c32e28 'landmark' 'const String &'
|         `-DeclRefExpr 0x564c61c37250 <col:68> 'const String' lvalue ParmVar 0x564c61c32f18 'str' 'const String &'
|-CXXMethodDecl 0x564c61c33380 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x564c61c330c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x564c61c33140 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564c61c331c0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x564c61c33238 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564c61c375f0 <col:34, line:267:5>
|   `-ReturnStmt 0x564c61c375e0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x564c61c375c8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x564c61c37560 <col:9, col:51> 'int'
|         |-MemberExpr 0x564c61c37530 <col:9> '<bound member function type>' ->xmessage 0x564c61c33000
|         | `-CXXThisExpr 0x564c61c37520 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x564c61c373d8 <col:18> 'const String' lvalue ParmVar 0x564c61c330c8 'landmark' 'const String &'
|         |-DeclRefExpr 0x564c61c373f8 <col:28> 'const String' lvalue ParmVar 0x564c61c33140 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x564c61c375b0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x564c61c37598 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x564c61c37500 <col:34, col:50> 'String' (CXXTemporary 0x564c61c37500)
|               `-CXXMemberCallExpr 0x564c61c37498 <col:34, col:50> 'String'
|                 |-MemberExpr 0x564c61c37428 <col:34> '<bound member function type>' ->vformat 0x564c61c33f40
|                 | `-CXXThisExpr 0x564c61c37418 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x564c61c374c8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x564c61c37458 <col:42> 'const char *' lvalue ParmVar 0x564c61c331c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x564c61c374e0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x564c61c37478 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564c61c33238 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564c61c33490 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x564c61c37670 <col:25, line:288:5>
|   `-ReturnStmt 0x564c61c37660 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x564c61c37648 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x564c61c37618 <col:9> 'const int' lvalue ->_nerrors 0x564c61c36248
|         `-CXXThisExpr 0x564c61c37608 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x564c61c336a0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x564c61c33548 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x564c61c335c8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x564c61c33988 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x564c61c33768 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x564c61c337e8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x564c61c33860 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564c61c33b20 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x564c61c33a58 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x564c61c33d68 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x564c61c33be0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x564c61c33c58 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x564c61c378d0 <col:58, line:357:5>
|   `-ReturnStmt 0x564c61c378c0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x564c61c378a8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x564c61c37878 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x564c61c37860 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x564c61c37840 <col:9, col:29> 'String' (CXXTemporary 0x564c61c37840)
|             `-CallExpr 0x564c61c377d0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x564c61c377b8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564c61c37738 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x564c61c33988 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x564c61c376d8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x564c61c37808 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x564c61c376f8 <col:21> 'const char *' lvalue ParmVar 0x564c61c33be0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x564c61c37820 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x564c61c37718 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564c61c33c58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564c61c33f40 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x564c61c33e30 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x564c61c33ea8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564c61c34098 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x564c61c34008 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x564c61c341e0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x564c61c34150 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x564c61c34480 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x564c61c34298 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x564c61c34318 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x564c61c34390 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x564c61c345e0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x564c61c34550 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x564c61c379e8 <col:37, line:441:5>
|   `-IfStmt 0x564c61c379d0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x564c61c37958 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x564c61c37928 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x564c61c378e8 <col:6> 'int' lvalue ParmVar 0x564c61c34550 'level' 'int'
|     | `-ImplicitCastExpr 0x564c61c37940 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x564c61c37908 <col:15> 'ErrorHandler::Level' EnumConstant 0x564c61c30660 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x564c61c379b8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x564c61c37988 <col:8> 'int' lvalue ->_nerrors 0x564c61c36248
|         `-CXXThisExpr 0x564c61c37978 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x564c61c346a8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x564c61c37a80 <col:26, line:448:5>
|   `-BinaryOperator 0x564c61c37a60 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x564c61c37a10 <col:2> 'int' lvalue ->_nerrors 0x564c61c36248
|     | `-CXXThisExpr 0x564c61c37a00 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x564c61c37a40 <col:13> 'int' 0
|-CXXMethodDecl 0x564c61c34870 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x564c61c34760 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x564c61c347d8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x564c61c34a78 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x564c61c34930 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x564c61c349a8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x564c61c34d28 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x564c61c34b38 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x564c61c34bb8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x564c61c34c38 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x564c61c34de0 <col:59> 0 0
|-CXXMethodDecl 0x564c61c34f78 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x564c61c34e58 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x564c61c34ed8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x564c61c38120 <col:70, line:534:5>
|   |-DeclStmt 0x564c61c37bf0 <line:528:2, col:20>
|   | |-VarDecl 0x564c61c37aa8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x564c61c37b10 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x564c61c37b48 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x564c61c37bb0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x564c61c37cc0 <line:529:2, col:23>
|   | `-VarDecl 0x564c61c37c20 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x564c61c37ca8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x564c61c37c88 <col:18> 'const char *' lvalue ParmVar 0x564c61c34e58 'begin' 'const char *'
|   |-DoStmt 0x564c61c380b8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x564c61c37fe8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x564c61c37fd0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x564c61c37fb0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x564c61c37cd8 <col:6> 'const char *' lvalue Var 0x564c61c37c20 'x' 'const char *'
|   | |     `-CallExpr 0x564c61c37f00 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x564c61c37ee8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x564c61c37e98 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x564c61c36720 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x564c61c37f68 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x564c61c37f50 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x564c61c37db8 <col:20, col:27> 'String' (CXXTemporary 0x564c61c37db8)
|   | |       |     `-CXXTemporaryObjectExpr 0x564c61c37d80 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x564c61c37f80 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x564c61c37dd8 <col:30> 'const char *' lvalue Var 0x564c61c37c20 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x564c61c37f98 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x564c61c37df8 <col:33> 'const char *' lvalue ParmVar 0x564c61c34ed8 'end' 'const char *'
|   | |       |-UnaryOperator 0x564c61c37e38 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x564c61c37e18 <col:39> 'String' lvalue Var 0x564c61c37aa8 'name' 'String'
|   | |       |-UnaryOperator 0x564c61c37e70 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x564c61c37e50 <col:46> 'String' lvalue Var 0x564c61c37b48 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x564c61c37e88 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x564c61c380a0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x564c61c38088 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x564c61c38068 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x564c61c38038 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|   |         `-ImplicitCastExpr 0x564c61c38020 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x564c61c38000 <col:11> 'String' lvalue Var 0x564c61c37aa8 'name' 'String'
|   `-ReturnStmt 0x564c61c38110 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x564c61c380f8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x564c61c380d8 <col:9> 'const char *' lvalue Var 0x564c61c37c20 'x' 'const char *'
|-CXXMethodDecl 0x564c61c350c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x564c61c35038 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x564c61c38728 <col:55, line:550:5>
|   `-IfStmt 0x564c61c38700 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x564c61c38360 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x564c61c38348 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564c61c38330 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564c61c38310 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564c61c382e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|     | |       `-DeclRefExpr 0x564c61c38180 <col:6> 'const String' lvalue ParmVar 0x564c61c35038 'x' 'const String &'
|     | `-BinaryOperator 0x564c61c382c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x564c61c38290 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x564c61c38240 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x564c61c38228 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x564c61c381e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x564c61932bb0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x564c61c381a0 <col:11> 'const String' lvalue ParmVar 0x564c61c35038 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x564c61c381c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x564c61c382a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x564c61c38278 <col:19> 'char' 123
|     |-ReturnStmt 0x564c61c383d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x564c61c383a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x564c61c38380 <col:13> 'const String' lvalue ParmVar 0x564c61c35038 'x' 'const String &'
|     `-IfStmt 0x564c61c386d8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x564c61c38468 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564c61c38450 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564c61c38430 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564c61c38400 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|       |       `-DeclRefExpr 0x564c61c383e0 <col:11> 'const String' lvalue ParmVar 0x564c61c35038 'x' 'const String &'
|       |-ReturnStmt 0x564c61c385f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x564c61c385d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x564c61c385a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x564c61c38590 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x564c61c38570 <col:13, col:29> 'String' (CXXTemporary 0x564c61c38570)
|       |         `-CallExpr 0x564c61c38520 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x564c61c38508 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x564c61c38480 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x564c61c34870 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x564c61c38550 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x564c61c384a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x564c61c384c0 <col:28> 'const String' lvalue ParmVar 0x564c61c35038 'x' 'const String &'
|       `-ReturnStmt 0x564c61c386c8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x564c61c386b0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x564c61c38680 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x564c61c38668 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x564c61c38648 <col:13, col:20> 'String' (CXXTemporary 0x564c61c38648)
|                 `-CXXTemporaryObjectExpr 0x564c61c38610 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x564c61c35290 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x564c61c35180 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x564c61c351f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564c61c369c8 <col:71> 'bool' false
|-CXXRecordDecl 0x564c61c35340 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x564c61c35638 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x564c61c355d0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x564c61c35570 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x564c61c35530 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x564c61915c10 'String'
|       | `-CXXRecord 0x564c61915b80 'String'
|       |-BuiltinType 0x564c615e9580 'int'
|       `-DecayedType 0x564c61bc9bb0 '__va_list_tag *' sugar
|         |-TypedefType 0x564c61bc9b80 'va_list' sugar
|         | |-Typedef 0x564c61807cd0 'va_list'
|         | `-TypedefType 0x564c61807c80 '__gnuc_va_list' sugar
|         |   |-Typedef 0x564c6173f8a8 '__gnuc_va_list'
|         |   `-TypedefType 0x564c6173f810 '__builtin_va_list' sugar
|         |     |-Typedef 0x564c6162ad38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x564c6162ace0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x564c615ea2d0 '__va_list_tag'
|         |         `-CXXRecord 0x564c615ea238 '__va_list_tag'
|         `-PointerType 0x564c6180d570 '__va_list_tag *'
|           `-RecordType 0x564c615ea2d0 '__va_list_tag'
|             `-CXXRecord 0x564c615ea238 '__va_list_tag'
|-EnumDecl 0x564c61c35690 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x564c61c35790 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35cf0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35770 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x564c61c35750 <col:16> 'int' 1
| |-EnumConstantDecl 0x564c61c35820 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35d08 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35800 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x564c61c357e0 <col:21> 'int' 2
| |-EnumConstantDecl 0x564c61c358b0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35d20 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35890 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x564c61c35870 <col:22> 'int' 4
| |-EnumConstantDecl 0x564c61c35940 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35d38 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35920 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x564c61c35900 <col:17> 'int' 8
| |-EnumConstantDecl 0x564c61c359d0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35d50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c359b0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x564c61c35990 <col:22> 'int' 16
| |-EnumConstantDecl 0x564c61c35a60 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35d68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35a40 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x564c61c35a20 <col:19> 'int' 32
| |-EnumConstantDecl 0x564c61c35af0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35d80 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35ad0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x564c61c35ab0 <col:17> 'int' 64
| |-EnumConstantDecl 0x564c61c35b80 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35d98 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35b60 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x564c61c35b40 <col:14> 'int' 128
| |-EnumConstantDecl 0x564c61c35c10 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x564c61c35db0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61c35bf0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x564c61c35bd0 <col:16> 'int' 256
| `-EnumConstantDecl 0x564c61c35ca0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x564c61c35dc8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61c35c80 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x564c61c35c60 <col:12> 'int' 1024
|-CXXMethodDecl 0x564c61c35fd8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x564c61c35df0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x564c61c35e90 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x564c61c36160 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x564c61c36098 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x564c61c36208 <line:580:3, col:10> col:3 private
|-FieldDecl 0x564c61c36248 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x564c61c362a8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x564c61c36320 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x564c61c36720 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x564c61c36398 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x564c61c36418 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x564c61c36498 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x564c61c36510 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x564c61c36588 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x564c61c36600 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x564c61c36848 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x564c61c36848
| `-ParmVarDecl 0x564c61c36958 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x564c61c38a88 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x564c61c38a88
  `-ParmVarDecl 0x564c61c38b98 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61bc8bd8 prev 0x564c61b10e68 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c61bc8cd0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x564c61bc8d60 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x564c61bc8e98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x564c61bc8d98 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x564c61bca2e0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x564c61bca2c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x564c61bc9e58 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x564c61bca370 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x564c61bca330 <col:17> 'ErrorHandler *' lvalue ParmVar 0x564c61bc8d98 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x564c61bc9ec0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x564c61bca3f0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x564c61bca3b0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x564c61bc9f20 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x564c61bca430 <col:54> 'bool' false
| `-CompoundStmt 0x564c61bca538 <col:61, line:38:5>
|   `-BinaryOperator 0x564c61bca518 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x564c61bca4b0 <col:9> 'const Element *' lvalue ->_context 0x564c61bc9df8
|     | `-CXXThisExpr 0x564c61bca4a0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x564c61bca500 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x564c61bca4e0 <col:20> 'int' 0
|-CXXConstructorDecl 0x564c61bc90a8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61bc8f58 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x564c61bc8fd0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x564c61bca318 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x564c61bca2f8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x564c61bc9df8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x564c61bca590 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x564c61bca550 <col:20> 'const Element *' lvalue ParmVar 0x564c61bc8f58 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x564c61bc9e58 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x564c61bca610 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x564c61bca5d0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x564c61bc8fd0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x564c61bc9ec0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x564c61bca690 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x564c61bca650 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x564c61bc9f20 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x564c61bca6d0 <col:73> 'bool' false
| `-CompoundStmt 0x564c61bca748 <col:80, line:46:5>
|-CXXMethodDecl 0x564c61bc91d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x564c61bca7c0 <col:36, line:51:5>
|   `-ReturnStmt 0x564c61bca7b0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x564c61bca798 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x564c61bca768 <col:16> 'const Element *const' lvalue ->_context 0x564c61bc9df8
|         `-CXXThisExpr 0x564c61bca758 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x564c61bc92c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x564c61bca840 <col:32, line:57:5>
|   `-ReturnStmt 0x564c61bca830 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x564c61bca818 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x564c61bca7e8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x564c61bc9e58
|         `-CXXThisExpr 0x564c61bca7d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x564c61bc9388 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x564c61bc9510 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x564c61bc9440 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x564c61bc9660 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x564c61bc95d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564c61bc97b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x564c61bc9720 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x564c61bc99d8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x564c61bc9868 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x564c61bc98e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x564c61bc9d08 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x564c61bc9a98 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x564c61bc9b18 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x564c61bc9be0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x564c61bc9dc0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x564c61bc9df8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x564c61bc9e58 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x564c61bc9ec0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x564c61bc9f20 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x564c61bc9f70 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x564c61bc9f70
| `-ParmVarDecl 0x564c61bca088 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x564c61bca128 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x564c61bca128
| `-ParmVarDecl 0x564c61bca238 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x564c61c4ca80 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564c61bf1610 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x564c61bf17e8 prev 0x564c61bf1610 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x564c61bf1878 <col:46, col:52> col:46 public
|-TypedefDecl 0x564c61bf18a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf3470 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x564c61bf3420 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x564c61bf1d50 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x564c61bf1c50 'type'
|     `-TemplateSpecializationType 0x564c61bf1be0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x564c61bf1ac0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x564c61bf1aa0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x564c61bf1a80 <col:24> 'unsigned long' 4
|       `-RecordType 0x564c61bf1bc0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x564c61bf1ae0 'char_array'
|-TypedefDecl 0x564c61bf3528 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x564c61bf34f0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x564c61bf34d0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x564c61bf3470 'type'
|     `-ElaboratedType 0x564c61bf3420 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x564c61bf1d50 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x564c61bf1c50 'type'
|         `-TemplateSpecializationType 0x564c61bf1be0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x564c61bf1ac0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x564c61bf1aa0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x564c61bf1a80 <col:24> 'unsigned long' 4
|           `-RecordType 0x564c61bf1bc0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x564c61bf1ae0 'char_array'
|-CXXMethodDecl 0x564c61bf36a8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x564c61bf35b8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x564c61bf3798 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x564c61bf3878 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x564c61bf3b48 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x564c61bf3a50 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x564c61bf3d88 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564c61bf3c00 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564c61bf3c78 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564c61bf3f58 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564c61bf3e48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564c61bf3ec0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564c61bf40b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x564c61bf4188 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x564c61bf43d8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564c61bf4248 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564c61bf42c0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564c61bf4638 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x564c61bf44a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564c61bf4520 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564c61bf47f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564c61bf4708 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564c61bf49b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564c61bf48c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564c61bf4a70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564c61bf4b20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564c61bf4d58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564c61bf4bd0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564c61bf4c48 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564c61bf4ff8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x564c61bf4f00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x564c61bf50c0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x564c61bf5110 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x564c61bf5160 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564c61bf0018 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x564c61bf0228 prev 0x564c61bf0018 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x564c61bf1580 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x564c61bf1530 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x564c61bf1510 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x564c61bf13c0 'type'
|     `-SubstTemplateTypeParmType 0x564c61bf11e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x564c618afa60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618afa08 'T'
|       `-RecordType 0x564c61bf0d30 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x564c61bf0c48 'sized_array_memory'
|-FieldDecl 0x564c61bf51b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x564c61bf5200 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x564c61bf5238 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|   |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x564c618e76f8 'T'
|   `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf52c8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x564c61bf5290 'int &'
|   `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|     |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564c618e76f8 'T'
|     `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf5388 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x564c61bf5350 'const int &'
|   `-QualType 0x564c61bf02c1 'const int' const
|     `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf5418 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x564c61bf53e0 'int *'
|   `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|     |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564c618e76f8 'T'
|     `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf54a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x564c61bf5470 'const int *'
|   `-QualType 0x564c61bf02c1 'const int' const
|     `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf6090 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x564c61bf6040 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x564c61bf6020 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x564c61bf5fb0 'type'
|     `-SubstTemplateTypeParmType 0x564c61bf5d70 'int' sugar
|       |-TemplateTypeParmType 0x564c618ba860 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618ba810 'T'
|       `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf60f8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x564c61bf5350 'const int &'
|   `-QualType 0x564c61bf02c1 'const int' const
|     `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf6150 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf61b8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x564c61bf53e0 'int *'
|   `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|     |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x564c618e76f8 'T'
|     `-BuiltinType 0x564c615e9580 'int'
|-TypedefDecl 0x564c61bf6220 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x564c61bf5470 'const int *'
|   `-QualType 0x564c61bf02c1 'const int' const
|     `-SubstTemplateTypeParmType 0x564c61bf02c0 'int' sugar
|       |-TemplateTypeParmType 0x564c618e7750 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564c618e76f8 'T'
|       `-BuiltinType 0x564c615e9580 'int'
|-EnumDecl 0x564c61bf6278 <line:134:5> col:5
| `-EnumConstantDecl 0x564c61bf6370 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x564c61bf6350 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564c618e8dd8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564c618e8db0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564c618e8d90 <col:40> 'int' 1
|-CXXConstructorDecl 0x564c61bf63f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x564c61bf6648 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bf64b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564c61bf6550 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x564c61bf6908 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x564c61bf67f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x564c61bf6bc8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x564c61bf6ab0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x564c61bf6f10 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x564c61bf6df0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x564c61bfa210 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x564c61bfa0f0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x564c61bfa500 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bfa348 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564c61bfa3c0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564c61bfa628 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x564c61bfa708 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bfa760 <col:30> Inherited
|-CXXMethodDecl 0x564c61bfa7a8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x564c61bfa858 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bfa8b0 <col:30> Inherited
|-CXXMethodDecl 0x564c61bfa978 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564c61bfaa28 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bfaa80 <col:30> Inherited
|-CXXMethodDecl 0x564c61bfaac8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564c61bfab78 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bfabd0 <col:30> Inherited
|-CXXMethodDecl 0x564c61bfac18 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564c61bfacc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bfad20 <col:30> Inherited
|-CXXMethodDecl 0x564c61bfad68 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564c61bfae18 <col:20> Inherited
| `-OptimizeNoneAttr 0x564c61bfae70 <col:30> Inherited
|-CXXMethodDecl 0x564c61bfae98 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564c61bfaf48 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564c61bfaff8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564c61bfb1b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bfb0a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564c61bfb120 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564c61bfb308 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x564c61bfb278 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bfb4b8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x564c61bfb3c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564c61bfb570 <col:20>
| `-OptimizeNoneAttr 0x564c61bfb5c8 <col:30>
|-CXXMethodDecl 0x564c61bfb6e8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x564c61bfb5f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564c61bfb7a0 <col:20>
| `-OptimizeNoneAttr 0x564c61bfb7f8 <col:30>
|-CXXMethodDecl 0x564c61bfb8b0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x564c61bfb820 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bfb9f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564c61bfb968 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bfbb28 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x564c61bfbc58 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x564c61bfbd28 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x564c61bfbdf8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x564c61bfbf38 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x564c61bfbea8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bfc080 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564c61bfbff0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564c61bfc1c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x564c61bfc138 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564c61bfc280 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564c61bfc380 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x564c61bfc2f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564c61bfc438 <col:60> Inherited "" ""
|-CXXMethodDecl 0x564c61bfc4f8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x564c61bfc5f8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x564c61bfc778 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x564c61bfc6b8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x564c61bfcf38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564c61bfc830 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x564c61bfce98 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x564c61bfcd98 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x564c61bfd018 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564c61bfd168 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x564c61bfd0d8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564c61bfd220 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x564c61bfd468 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564c61bfd2e0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x564c61bfd358 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564c61bfd628 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x564c61bfd538 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x564c61bfd878 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x564c61bfd6f0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x564c61bfd768 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x564c61bfd938 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x564c61bfdb98 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x564c61bfdaa0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x564c61bfdc68 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61be3018 prev 0x564c61bcf758 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564c61be3110 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x564c61be3200 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x564c61c11a60 <col:16, line:828:9>
|-CXXDestructorDecl 0x564c61be32f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x564c61c11a70 <col:25, line:830:9>
|-CXXMethodDecl 0x564c61be33f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x564c61be34a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x564c61be3548 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x564c61be3548
| `-ParmVarDecl 0x564c61be3658 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x564c61be3e18 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x564c61be3e18
  `-ParmVarDecl 0x564c61bef090 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61bcf568 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x564c61bcf6c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x564c61bcf758 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x564c61bcf810 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x564c61bcf918 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x564c61bcf848 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564c61bff228 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564c61bff208 <col:31> 'int' 0
|-CXXConstructorDecl 0x564c61bcfc38 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x564c61bcfab0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x564c61bcfb28 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564c61bff260 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564c61bff240 <col:59> 'int' 0
|-CXXConstructorDecl 0x564c61bcfe10 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61bcfd00 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x564c61bcfd78 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564c61bff298 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564c61bff278 <col:55> 'int' 0
|-CXXConstructorDecl 0x564c61bd01c8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x564c61bcffb0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x564c61bd0028 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x564c61bd00a0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x564c61bff2d0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x564c61bff2b0 <col:31> 'int' 0
|-CXXConstructorDecl 0x564c61bd0388 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x564c61bd02c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x564c61bd0480 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x564c61bd0668 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x564c61bd0570 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x564c61bd0758 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x564c61bff680 <col:24, line:291:5>
|   `-ReturnStmt 0x564c61bff670 <line:290:9, col:79>
|     `-BinaryOperator 0x564c61bff650 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x564c61bff528 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x564c61bff480 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x564c61bff460 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x564c61bff358 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x564c61bff340 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x564c61bff328 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x564c61bff2f8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x564c61beffb0
|       | |   |       `-CXXThisExpr 0x564c61bff2e8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x564c61bff448 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x564c61bff430 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x564c61bff3f8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x564c61bff3c8 <col:28, col:35> '<bound member function type>' ->size 0x564c61bb7838
|       | |           `-ImplicitCastExpr 0x564c61bff418 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x564c61bff3b0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x564c61bff380 <col:28> 'Vector<String> *const' lvalue ->_conf 0x564c61beffb0
|       | |                 `-CXXThisExpr 0x564c61bff370 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x564c61bff510 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x564c61bff4f8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x564c61bff4e0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x564c61bff4b0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x564c61bfddb0
|       |         `-CXXThisExpr 0x564c61bff4a0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x564c61bff630 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x564c61bff618 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x564c61bff600 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x564c61bff5c0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x564c61bff5a8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x564c61bff558 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x564c61bfde60
|         |     |   `-CXXThisExpr 0x564c61bff548 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x564c61bff588 <col:73> 'int' 0
|         `-IntegerLiteral 0x564c61bff5e0 <col:79> 'int' 0
|-CXXMethodDecl 0x564c61bd0818 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x564c61bff858 <col:32, line:296:5>
|   `-ReturnStmt 0x564c61bff848 <line:295:9, col:49>
|     `-BinaryOperator 0x564c61bff828 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x564c61bff708 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x564c61bff6f0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x564c61bff6d8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x564c61bff6a8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x564c61bfddb0
|       |       `-CXXThisExpr 0x564c61bff698 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x564c61bff808 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x564c61bff7f0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x564c61bff7d8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x564c61bff798 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x564c61bff780 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x564c61bff730 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x564c61bfde60
|         |     |   `-CXXThisExpr 0x564c61bff720 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x564c61bff760 <col:43> 'int' 0
|         `-IntegerLiteral 0x564c61bff7b8 <col:49> 'int' 0
|-CXXMethodDecl 0x564c61bd0908 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x564c61bffa68 <col:19, line:306:5>
|   |-IfStmt 0x564c61bff988 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x564c61bff8c8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x564c61bff8b0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x564c61bff880 <col:13> 'Vector<String> *' lvalue ->_conf 0x564c61beffb0
|   | |     `-CXXThisExpr 0x564c61bff870 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x564c61bff968 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x564c61bff938 <col:13, col:20> '<bound member function type>' ->clear 0x564c61bba238
|   |     `-ImplicitCastExpr 0x564c61bff920 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x564c61bff8f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x564c61beffb0
|   |         `-CXXThisExpr 0x564c61bff8e0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x564c61bffa10 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x564c61bff9e0 <col:9, col:16> '<bound member function type>' .clear 0x564c61bfd938
|   |   `-MemberExpr 0x564c61bff9b0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x564c61bfdd50
|   |     `-CXXThisExpr 0x564c61bff9a0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x564c61bffa58 <line:305:9, col:17>
|     `-UnaryOperator 0x564c61bffa40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c61bffa30 <col:17> 'Args *' this
|-CXXMethodDecl 0x564c61bd0b88 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x564c61bd0a90 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x564c61bd0d08 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x564c61bd0c40 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x564c61bd1088 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x564c61bd0db0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x564c61bd0fe8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x564c61bd0e58 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x564c61bd0ed0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x564c61bffd88 <col:67, line:327:5>
|     |-WhileStmt 0x564c61bffd38 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x564c61bffb50 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x564c61bffad0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x564c61b09338 0x564c61952918 0x564c619525f0 0x564c61942dc0 0x564c61942a70 0x564c61942360 0x564c61914cd0 0x564c618a21a0
|     | | |-DeclRefExpr 0x564c61bffa90 <col:16> 'Iter' lvalue ParmVar 0x564c61bd0e58 'begin' 'Iter'
|     | | `-DeclRefExpr 0x564c61bffab0 <col:25> 'Iter' lvalue ParmVar 0x564c61bd0ed0 'end' 'Iter'
|     | `-CompoundStmt 0x564c61bffd18 <col:30, line:325:9>
|     |   |-CallExpr 0x564c61bffcb8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x564c61bffb98 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x564c61bffc88 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x564c61bffc18 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|     |   |   `-DeclRefExpr 0x564c61bffbf8 <col:24> 'Iter' lvalue ParmVar 0x564c61bd0e58 'begin' 'Iter'
|     |   `-UnaryOperator 0x564c61bffd00 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x564c61bffce0 <col:15> 'Iter' lvalue ParmVar 0x564c61bd0e58 'begin' 'Iter'
|     `-ReturnStmt 0x564c61bffd78 <line:326:9, col:17>
|       `-UnaryOperator 0x564c61bffd60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61bffd50 <col:17> 'Args *' this
|-CXXMethodDecl 0x564c61bd1190 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x564c61bd1100 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x564c61bd12d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x564c61bd1248 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x564c61bd13a0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x564c61bffe68 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x564c61bffe08 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x564c61bffdb8 <col:9> '<bound member function type>' ->reset_from 0x564c61bfe1d8
|   | | `-CXXThisExpr 0x564c61bffda8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x564c61bffde8 <col:20> 'int' 0
|   `-ReturnStmt 0x564c61bffe58 <line:352:9, col:17>
|     `-UnaryOperator 0x564c61bffe40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c61bffe30 <col:17> 'Args *' this
|-VarDecl 0x564c61bd1458 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x564c61bd14c0 <col:38> 'int' 1
|-VarDecl 0x564c61bd1550 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x564c61bd15b8 <col:39> 'int' 2
|-VarDecl 0x564c61bd1648 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x564c61bd16b0 <col:39> 'int' 4
|-VarDecl 0x564c61bd1740 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x564c61bd17a8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x564c61bd1b48 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x564c61bd1820 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bd1aa8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564c61bd18d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd1990 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x564c61bfffc0 <col:43, line:371:5>
|     `-ReturnStmt 0x564c61bfffb0 <line:370:9, col:34>
|       `-CallExpr 0x564c61bfff78 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61bffe98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61bfff18 <col:21> 'const char *' lvalue ParmVar 0x564c61bd18d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61bfff38 <col:30> 'int' 0
|         `-DeclRefExpr 0x564c61bfff58 <col:33> 'T' lvalue ParmVar 0x564c61bd1990 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd1e78 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x564c61bd1bb0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bd1dd8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564c61bd1c60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd1d08 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x564c61c00110 <col:45, line:375:5>
|     `-ReturnStmt 0x564c61c00100 <line:374:9, col:42>
|       `-CallExpr 0x564c61c000c8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61bfffe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c00068 <col:21> 'const char *' lvalue ParmVar 0x564c61bd1c60 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c00088 <col:30> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int'
|         `-DeclRefExpr 0x564c61c000a8 <col:41> 'T' lvalue ParmVar 0x564c61bd1d08 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd21a8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x564c61bd1ee0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bd2108 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564c61bd1f90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd2038 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x564c61c00260 <col:45, line:379:5>
|     `-ReturnStmt 0x564c61c00250 <line:378:9, col:43>
|       `-CallExpr 0x564c61c00218 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c00138 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c001b8 <col:21> 'const char *' lvalue ParmVar 0x564c61bd1f90 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c001d8 <col:30> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int'
|         `-DeclRefExpr 0x564c61c001f8 <col:42> 'T' lvalue ParmVar 0x564c61bd2038 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd24d8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x564c61bd2210 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bd2438 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x564c61bd22c0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd2368 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x564c61c00460 <col:46, line:383:5>
|     `-ReturnStmt 0x564c61c00450 <line:382:9, col:55>
|       `-CallExpr 0x564c61c00418 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c00288 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c00308 <col:21> 'const char *' lvalue ParmVar 0x564c61bd22c0 'keyword' 'const char *'
|         |-BinaryOperator 0x564c61c003d8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x564c61c00388 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564c61c00368 <col:30> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564c61c003c0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564c61c003a0 <col:42> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x564c61c003f8 <col:54> 'T' lvalue ParmVar 0x564c61bd2368 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd28d8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x564c61bd2540 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bd2838 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x564c61bd25f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd2670 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bd2718 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x564c61c005a0 <col:54, line:388:5>
|     |-CallExpr 0x564c61c00528 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c00478 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564c61c004b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564c61c004c8 <col:30> 'const char *' lvalue ParmVar 0x564c61bd25f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564c61c004e8 <col:39> 'int' lvalue ParmVar 0x564c61bd2670 'flags' 'int'
|     | `-DeclRefExpr 0x564c61c00508 <col:46> 'T' lvalue ParmVar 0x564c61bd2718 'x' 'T &'
|     `-ReturnStmt 0x564c61c00590 <line:387:9, col:17>
|       `-UnaryOperator 0x564c61c00578 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c00568 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bd2d88 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x564c61bd2948 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564c61bd29c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564c61bd2ce8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x564c61bd2a88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd2b28 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x564c61bd2bc8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x564c61c00710 <col:74, line:403:5>
|     `-ReturnStmt 0x564c61c00700 <line:402:9, col:56>
|       `-CallExpr 0x564c61c006c0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c005d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c00640 <col:28> 'const char *' lvalue ParmVar 0x564c61bd2a88 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c00660 <col:37> 'int' 0
|         |-DeclRefExpr 0x564c61c00680 <col:40> 'T' lvalue ParmVar 0x564c61bd2b28 'x' 'T &'
|         `-DeclRefExpr 0x564c61c006a0 <col:43> 'const V' lvalue ParmVar 0x564c61bd2bc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564c61bd31f8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x564c61bd2df8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564c61bd2e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564c61bd3158 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x564c61bd2f38 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd2fd8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x564c61bd3078 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x564c61c00878 <col:76, line:407:5>
|     `-ReturnStmt 0x564c61c00868 <line:406:9, col:65>
|       `-CallExpr 0x564c61c00828 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c00738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c007a8 <col:28> 'const char *' lvalue ParmVar 0x564c61bd2f38 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c007c8 <col:37> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int'
|         |-DeclRefExpr 0x564c61c007e8 <col:49> 'T' lvalue ParmVar 0x564c61bd2fd8 'x' 'T &'
|         `-DeclRefExpr 0x564c61c00808 <col:52> 'const V' lvalue ParmVar 0x564c61bd3078 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564c61bd3748 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x564c61bd3268 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564c61bd32e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564c61bd36a8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x564c61bd33a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd3428 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bd34c8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x564c61bd3568 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x564c61c009e0 <col:85, line:412:5>
|     |-CallExpr 0x564c61c00960 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c00890 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x564c61c008d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x564c61c008e0 <col:37> 'const char *' lvalue ParmVar 0x564c61bd33a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564c61c00900 <col:46> 'int' lvalue ParmVar 0x564c61bd3428 'flags' 'int'
|     | |-DeclRefExpr 0x564c61c00920 <col:53> 'T' lvalue ParmVar 0x564c61bd34c8 'x' 'T &'
|     | `-DeclRefExpr 0x564c61c00940 <col:56> 'const V' lvalue ParmVar 0x564c61bd3568 'default_value' 'const V &'
|     `-ReturnStmt 0x564c61c009d0 <line:411:9, col:17>
|       `-UnaryOperator 0x564c61c009b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c009a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bd3bd8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x564c61bd37c0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd3838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bd3b38 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bd38f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd3970 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd3a18 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x564c61c00b60 <col:53, line:425:5>
|     `-ReturnStmt 0x564c61c00b50 <line:424:9, col:42>
|       `-CallExpr 0x564c61c00b10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c00a10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c00a90 <col:21> 'const char *' lvalue ParmVar 0x564c61bd38f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c00ab0 <col:30> 'int' 0
|         |-DeclRefExpr 0x564c61c00ad0 <col:33> 'P' lvalue ParmVar 0x564c61bd3970 'parser' 'P'
|         `-DeclRefExpr 0x564c61c00af0 <col:41> 'T' lvalue ParmVar 0x564c61bd3a18 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd4028 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x564c61bd3c48 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd3cc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bd3f88 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bd3d88 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd3e00 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd3ea8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x564c61c00cd8 <col:55, line:429:5>
|     `-ReturnStmt 0x564c61c00cc8 <line:428:9, col:50>
|       `-CallExpr 0x564c61c00c88 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c00b88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c00c08 <col:21> 'const char *' lvalue ParmVar 0x564c61bd3d88 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c00c28 <col:30> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int'
|         |-DeclRefExpr 0x564c61c00c48 <col:41> 'P' lvalue ParmVar 0x564c61bd3e00 'parser' 'P'
|         `-DeclRefExpr 0x564c61c00c68 <col:49> 'T' lvalue ParmVar 0x564c61bd3ea8 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd4478 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x564c61bd4098 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd4118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bd43d8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bd41d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd4250 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd42f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x564c61c00e50 <col:55, line:433:5>
|     `-ReturnStmt 0x564c61c00e40 <line:432:9, col:51>
|       `-CallExpr 0x564c61c00e00 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c00d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c00d80 <col:21> 'const char *' lvalue ParmVar 0x564c61bd41d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c00da0 <col:30> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int'
|         |-DeclRefExpr 0x564c61c00dc0 <col:42> 'P' lvalue ParmVar 0x564c61bd4250 'parser' 'P'
|         `-DeclRefExpr 0x564c61c00de0 <col:50> 'T' lvalue ParmVar 0x564c61bd42f8 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd48c8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x564c61bd44e8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd4568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x564c61bd4828 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x564c61bd4628 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x564c61bd46a0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x564c61bd4748 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x564c61c01078 <col:56, line:437:5>
| |   `-ReturnStmt 0x564c61c01068 <line:436:9, col:63>
| |     `-CallExpr 0x564c61c01028 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x564c61c00e78 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x564c61c00ef8 <col:21> 'const char *' lvalue ParmVar 0x564c61bd4628 'keyword' 'const char *'
| |       |-BinaryOperator 0x564c61c00fc8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x564c61c00f78 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x564c61c00f58 <col:30> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x564c61c00fb0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x564c61c00f90 <col:42> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x564c61c00fe8 <col:54> 'P' lvalue ParmVar 0x564c61bd46a0 'parser' 'P'
| |       `-DeclRefExpr 0x564c61c01008 <col:62> 'T' lvalue ParmVar 0x564c61bd4748 'x' 'T &'
| `-CXXMethodDecl 0x564c61c4d498 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x564c61c4d200 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x564c61c4d2a8 <col:40, col:42> col:42 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x564c61c4d378 <col:50, col:53> col:53 x 'unsigned short &'
|-FunctionTemplateDecl 0x564c61bd4df8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x564c61bd4938 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd49b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bd4d58 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564c61bd4a78 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd4af8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bd4b70 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd4c18 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x564c61c011e0 <col:64, line:442:5>
|     |-CallExpr 0x564c61c01160 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c01090 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564c61c010d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564c61c010e0 <col:30> 'const char *' lvalue ParmVar 0x564c61bd4a78 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564c61c01100 <col:39> 'int' lvalue ParmVar 0x564c61bd4af8 'flags' 'int'
|     | |-DeclRefExpr 0x564c61c01120 <col:46> 'P' lvalue ParmVar 0x564c61bd4b70 'parser' 'P'
|     | `-DeclRefExpr 0x564c61c01140 <col:54> 'T' lvalue ParmVar 0x564c61bd4c18 'x' 'T &'
|     `-ReturnStmt 0x564c61c011d0 <line:441:9, col:17>
|       `-UnaryOperator 0x564c61c011b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c011a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bd53f8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x564c61bd4e70 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd4ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564c61bd4f68 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564c61bd5358 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x564c61bd5030 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd50a8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd5148 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x564c61bd5218 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x564c61c01378 <col:84, line:458:5>
|     `-ReturnStmt 0x564c61c01368 <line:457:9, col:64>
|       `-CallExpr 0x564c61c01320 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c01210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c01280 <col:28> 'const char *' lvalue ParmVar 0x564c61bd5030 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c012a0 <col:37> 'int' 0
|         |-DeclRefExpr 0x564c61c012c0 <col:40> 'P' lvalue ParmVar 0x564c61bd50a8 'parser' 'P'
|         |-DeclRefExpr 0x564c61c012e0 <col:48> 'T' lvalue ParmVar 0x564c61bd5148 'x' 'T &'
|         `-DeclRefExpr 0x564c61c01300 <col:51> 'const V' lvalue ParmVar 0x564c61bd5218 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564c61bd5978 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x564c61bd5470 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd54e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564c61bd5568 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564c61bd58d8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x564c61bd5630 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd56a8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd5748 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x564c61bd57e8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x564c61c01508 <col:86, line:462:5>
|     `-ReturnStmt 0x564c61c014f8 <line:461:9, col:73>
|       `-CallExpr 0x564c61c014b0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c013a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c01410 <col:28> 'const char *' lvalue ParmVar 0x564c61bd5630 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c01430 <col:37> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int'
|         |-DeclRefExpr 0x564c61c01450 <col:49> 'P' lvalue ParmVar 0x564c61bd56a8 'parser' 'P'
|         |-DeclRefExpr 0x564c61c01470 <col:57> 'T' lvalue ParmVar 0x564c61bd5748 'x' 'T &'
|         `-DeclRefExpr 0x564c61c01490 <col:60> 'const V' lvalue ParmVar 0x564c61bd57e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x564c61bd5fd8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x564c61bd59f0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd5a68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x564c61bd5ae8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564c61bd5f38 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x564c61bd5bb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd5c30 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bd5ca8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd5d48 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x564c61bd5de8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x564c61c01698 <col:95, line:467:5>
|     |-CallExpr 0x564c61c01610 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c01520 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x564c61c01560 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x564c61c01570 <col:37> 'const char *' lvalue ParmVar 0x564c61bd5bb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564c61c01590 <col:46> 'int' lvalue ParmVar 0x564c61bd5c30 'flags' 'int'
|     | |-DeclRefExpr 0x564c61c015b0 <col:53> 'P' lvalue ParmVar 0x564c61bd5ca8 'parser' 'P'
|     | |-DeclRefExpr 0x564c61c015d0 <col:61> 'T' lvalue ParmVar 0x564c61bd5d48 'x' 'T &'
|     | `-DeclRefExpr 0x564c61c015f0 <col:64> 'const V' lvalue ParmVar 0x564c61bd5de8 'default_value' 'const V &'
|     `-ReturnStmt 0x564c61c01688 <line:466:9, col:17>
|       `-UnaryOperator 0x564c61c01670 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c01660 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bd65b8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x564c61bd6058 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd60d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564c61bd6158 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564c61bd6518 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564c61bd6220 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd6298 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd6338 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564c61bd63d8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x564c61c01840 <col:63, line:481:5>
|     `-ReturnStmt 0x564c61c01830 <line:480:9, col:47>
|       `-CallExpr 0x564c61c017e8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c016c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c01748 <col:21> 'const char *' lvalue ParmVar 0x564c61bd6220 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c01768 <col:30> 'int' 0
|         |-DeclRefExpr 0x564c61c01788 <col:33> 'P' lvalue ParmVar 0x564c61bd6298 'parser' 'P'
|         |-DeclRefExpr 0x564c61c017a8 <col:41> 'T1' lvalue ParmVar 0x564c61bd6338 'x1' 'T1 &'
|         `-DeclRefExpr 0x564c61c017c8 <col:45> 'T2' lvalue ParmVar 0x564c61bd63d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564c61bd6b38 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x564c61bd6630 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd66a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564c61bd6728 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564c61bd6a98 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564c61bd67f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd6868 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd6908 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564c61bd69a8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x564c61c019e0 <col:65, line:485:5>
|     `-ReturnStmt 0x564c61c019d0 <line:484:9, col:55>
|       `-CallExpr 0x564c61c01988 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c01868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c018e8 <col:21> 'const char *' lvalue ParmVar 0x564c61bd67f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c01908 <col:30> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int'
|         |-DeclRefExpr 0x564c61c01928 <col:41> 'P' lvalue ParmVar 0x564c61bd6868 'parser' 'P'
|         |-DeclRefExpr 0x564c61c01948 <col:49> 'T1' lvalue ParmVar 0x564c61bd6908 'x1' 'T1 &'
|         `-DeclRefExpr 0x564c61c01968 <col:53> 'T2' lvalue ParmVar 0x564c61bd69a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564c61bd70b8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x564c61bd6bb0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd6c28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564c61bd6ca8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564c61bd7018 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564c61bd6d70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd6de8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd6e88 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564c61bd6f28 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x564c61c01b80 <col:65, line:489:5>
|     `-ReturnStmt 0x564c61c01b70 <line:488:9, col:56>
|       `-CallExpr 0x564c61c01b28 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c01a08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c01a88 <col:21> 'const char *' lvalue ParmVar 0x564c61bd6d70 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c01aa8 <col:30> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int'
|         |-DeclRefExpr 0x564c61c01ac8 <col:42> 'P' lvalue ParmVar 0x564c61bd6de8 'parser' 'P'
|         |-DeclRefExpr 0x564c61c01ae8 <col:50> 'T1' lvalue ParmVar 0x564c61bd6e88 'x1' 'T1 &'
|         `-DeclRefExpr 0x564c61c01b08 <col:54> 'T2' lvalue ParmVar 0x564c61bd6f28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564c61bd7638 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x564c61bd7130 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd71a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564c61bd7228 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564c61bd7598 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564c61bd72f0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd7368 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd7408 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564c61bd74a8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x564c61c01dd0 <col:66, line:493:5>
|     `-ReturnStmt 0x564c61c01dc0 <line:492:9, col:68>
|       `-CallExpr 0x564c61c01d78 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c01ba8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c01c28 <col:21> 'const char *' lvalue ParmVar 0x564c61bd72f0 'keyword' 'const char *'
|         |-BinaryOperator 0x564c61c01cf8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x564c61c01ca8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564c61c01c88 <col:30> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564c61c01ce0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564c61c01cc0 <col:42> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x564c61c01d18 <col:54> 'P' lvalue ParmVar 0x564c61bd7368 'parser' 'P'
|         |-DeclRefExpr 0x564c61c01d38 <col:62> 'T1' lvalue ParmVar 0x564c61bd7408 'x1' 'T1 &'
|         `-DeclRefExpr 0x564c61c01d58 <col:66> 'T2' lvalue ParmVar 0x564c61bd74a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x564c61bd7c98 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x564c61bd76b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd7728 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564c61bd77a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564c61bd7bf8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564c61bd7870 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd78f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bd7968 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd7a08 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x564c61bd7aa8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x564c61c01f60 <col:74, line:498:5>
|     |-CallExpr 0x564c61c01ed8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c01de8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564c61c01e28 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564c61c01e38 <col:30> 'const char *' lvalue ParmVar 0x564c61bd7870 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564c61c01e58 <col:39> 'int' lvalue ParmVar 0x564c61bd78f0 'flags' 'int'
|     | |-DeclRefExpr 0x564c61c01e78 <col:46> 'P' lvalue ParmVar 0x564c61bd7968 'parser' 'P'
|     | |-DeclRefExpr 0x564c61c01e98 <col:54> 'T1' lvalue ParmVar 0x564c61bd7a08 'x1' 'T1 &'
|     | `-DeclRefExpr 0x564c61c01eb8 <col:58> 'T2' lvalue ParmVar 0x564c61bd7aa8 'x2' 'T2 &'
|     `-ReturnStmt 0x564c61c01f50 <line:497:9, col:17>
|       `-UnaryOperator 0x564c61c01f38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c01f28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bd7ff8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x564c61bd7d18 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61bd7f58 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564c61bd7dd0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd7e48 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x564c61c03c78 <col:52, line:509:5>
|     `-ReturnStmt 0x564c61c03c68 <line:508:9, col:44>
|       `-CallExpr 0x564c61c03c30 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c01f90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c02000 <col:26> 'const char *' lvalue ParmVar 0x564c61bd7dd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c02020 <col:35> 'int' 0
|         `-DeclRefExpr 0x564c61c03c10 <col:38> 'P' lvalue ParmVar 0x564c61bd7e48 'parser' 'P'
|-FunctionTemplateDecl 0x564c61bd82f8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x564c61bd8060 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61bd8258 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564c61bd8110 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd8188 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564c61c03db8 <col:54, line:513:5>
|     `-ReturnStmt 0x564c61c03da8 <line:512:9, col:52>
|       `-CallExpr 0x564c61c03d70 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c03ca0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c03d10 <col:26> 'const char *' lvalue ParmVar 0x564c61bd8110 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c03d30 <col:35> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int'
|         `-DeclRefExpr 0x564c61c03d50 <col:46> 'P' lvalue ParmVar 0x564c61bd8188 'parser' 'P'
|-FunctionTemplateDecl 0x564c61bd85f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x564c61bd8360 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61bd8558 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564c61bd8410 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd8488 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564c61c03ef8 <col:54, line:517:5>
|     `-ReturnStmt 0x564c61c03ee8 <line:516:9, col:53>
|       `-CallExpr 0x564c61c03eb0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c03de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c03e50 <col:26> 'const char *' lvalue ParmVar 0x564c61bd8410 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c03e70 <col:35> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int'
|         `-DeclRefExpr 0x564c61c03e90 <col:47> 'P' lvalue ParmVar 0x564c61bd8488 'parser' 'P'
|-FunctionTemplateDecl 0x564c61bd88f8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x564c61bd8660 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61bd8858 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564c61bd8710 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd8788 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x564c61c040e8 <col:55, line:521:5>
|     `-ReturnStmt 0x564c61c040d8 <line:520:9, col:65>
|       `-CallExpr 0x564c61c040a0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c03f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c03f90 <col:26> 'const char *' lvalue ParmVar 0x564c61bd8710 'keyword' 'const char *'
|         |-BinaryOperator 0x564c61c04060 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x564c61c04010 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564c61c03ff0 <col:35> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564c61c04048 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564c61c04028 <col:47> 'const int' lvalue Var 0x564c61bd1550 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x564c61c04080 <col:59> 'P' lvalue ParmVar 0x564c61bd8788 'parser' 'P'
|-FunctionTemplateDecl 0x564c61bd8cc8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x564c61bd8960 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61bd8c28 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x564c61bd8a10 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd8a90 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bd8b08 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x564c61c04228 <col:63, line:526:5>
|     |-CallExpr 0x564c61c041b0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c04100 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x564c61c04140 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x564c61c04150 <col:35> 'const char *' lvalue ParmVar 0x564c61bd8a10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564c61c04170 <col:44> 'int' lvalue ParmVar 0x564c61bd8a90 'flags' 'int'
|     | `-DeclRefExpr 0x564c61c04190 <col:51> 'P' lvalue ParmVar 0x564c61bd8b08 'parser' 'P'
|     `-ReturnStmt 0x564c61c04218 <line:525:9, col:17>
|       `-UnaryOperator 0x564c61c04200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c041f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bd9118 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x564c61bd8d38 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd8db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bd9078 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bd8e78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd8ef0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd8f98 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x564c61c04380 <col:58, line:541:5>
|     `-ReturnStmt 0x564c61c04370 <line:540:9, col:39>
|       `-CallExpr 0x564c61c04338 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c04258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c042d8 <col:21> 'const char *' lvalue ParmVar 0x564c61bd8e78 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c042f8 <col:30> 'P' lvalue ParmVar 0x564c61bd8ef0 'parser' 'P'
|         `-DeclRefExpr 0x564c61c04318 <col:38> 'T' lvalue ParmVar 0x564c61bd8f98 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bd9568 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x564c61bd9188 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd9208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bd94c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bd92c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd9340 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd93e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564c61c044b8 <col:60, line:545:5>
|     `-ReturnStmt 0x564c61c044a8 <line:544:9, col:41>
|       `-CallExpr 0x564c61c04470 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c043a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c04410 <col:23> 'const char *' lvalue ParmVar 0x564c61bd92c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c04430 <col:32> 'P' lvalue ParmVar 0x564c61bd9340 'parser' 'P'
|         `-DeclRefExpr 0x564c61c04450 <col:40> 'T' lvalue ParmVar 0x564c61bd93e8 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bdbff0 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x564c61bd95d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bd9658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bdbf50 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bd9718 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bd9790 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bd9838 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564c61c045f0 <col:60, line:549:5>
|     `-ReturnStmt 0x564c61c045e0 <line:548:9, col:41>
|       `-CallExpr 0x564c61c045a8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c044e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c04548 <col:23> 'const char *' lvalue ParmVar 0x564c61bd9718 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c04568 <col:32> 'P' lvalue ParmVar 0x564c61bd9790 'parser' 'P'
|         `-DeclRefExpr 0x564c61c04588 <col:40> 'T' lvalue ParmVar 0x564c61bd9838 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bdc438 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x564c61bdc060 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bdc0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bdc398 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bdc198 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bdc210 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bdc2b8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x564c61c04728 <col:61, line:553:5>
|     `-ReturnStmt 0x564c61c04718 <line:552:9, col:42>
|       `-CallExpr 0x564c61c046e0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c04618 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c04680 <col:24> 'const char *' lvalue ParmVar 0x564c61bdc198 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c046a0 <col:33> 'P' lvalue ParmVar 0x564c61bdc210 'parser' 'P'
|         `-DeclRefExpr 0x564c61c046c0 <col:41> 'T' lvalue ParmVar 0x564c61bdc2b8 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bdc918 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x564c61bdc4a8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bdc528 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bdc878 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564c61bdc5e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bdc668 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bdc6e0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bdc788 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x564c61c048a0 <col:69, line:557:5>
|     `-ReturnStmt 0x564c61c04890 <line:556:9, col:46>
|       `-CallExpr 0x564c61c04850 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c04750 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c047d0 <col:21> 'const char *' lvalue ParmVar 0x564c61bdc5e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c047f0 <col:30> 'int' lvalue ParmVar 0x564c61bdc668 'flags' 'int'
|         |-DeclRefExpr 0x564c61c04810 <col:37> 'P' lvalue ParmVar 0x564c61bdc6e0 'parser' 'P'
|         `-DeclRefExpr 0x564c61c04830 <col:45> 'T' lvalue ParmVar 0x564c61bdc788 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bdcc28 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x564c61bdc990 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61bdcb88 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x564c61bdca40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bdcab8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x564c61c049e0 <col:56, line:571:5>
|     `-ReturnStmt 0x564c61c049d0 <line:570:9, col:48>
|       `-CallExpr 0x564c61c04998 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c048c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c04938 <col:30> 'const char *' lvalue ParmVar 0x564c61bdca40 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c04958 <col:39> 'int' 0
|         `-DeclRefExpr 0x564c61c04978 <col:42> 'P' lvalue ParmVar 0x564c61bdcab8 'parser' 'P'
|-FunctionTemplateDecl 0x564c61bdcfb8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x564c61bdcc90 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61bdcf18 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x564c61bdcd40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bdcdc0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bdce38 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564c61c04bb0 <col:67, line:576:5>
|     |-CallExpr 0x564c61c04b38 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c049f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x564c61c04a38 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x564c61c04a48 <col:39> 'const char *' lvalue ParmVar 0x564c61bdcd40 'keyword' 'const char *'
|     | |-BinaryOperator 0x564c61c04af8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564c61c04aa8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564c61c04a68 <col:48> 'int' lvalue ParmVar 0x564c61bdcdc0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564c61c04ae0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564c61c04ac0 <col:56> 'const int' lvalue Var 0x564c61bd1740 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x564c61c04b18 <col:68> 'P' lvalue ParmVar 0x564c61bdce38 'parser' 'P'
|     `-ReturnStmt 0x564c61c04ba0 <line:575:9, col:17>
|       `-UnaryOperator 0x564c61c04b88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c04b78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bdd408 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x564c61bdd028 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bdd0a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bdd368 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x564c61bdd168 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bdd1e0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bdd288 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x564c61c04d20 <col:62, line:592:5>
|     `-ReturnStmt 0x564c61c04d10 <line:591:9, col:51>
|       `-CallExpr 0x564c61c04cd0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c04be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c04c50 <col:30> 'const char *' lvalue ParmVar 0x564c61bdd168 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c04c70 <col:39> 'int' 0
|         |-DeclRefExpr 0x564c61c04c90 <col:42> 'P' lvalue ParmVar 0x564c61bdd1e0 'parser' 'P'
|         `-DeclRefExpr 0x564c61c04cb0 <col:50> 'T' lvalue ParmVar 0x564c61bdd288 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bdd8e8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x564c61bdd478 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bdd4f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bdd848 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x564c61bdd5b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bdd638 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bdd6b0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bdd758 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x564c61c04f18 <col:73, line:597:5>
|     |-CallExpr 0x564c61c04e98 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c04d38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x564c61c04d78 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x564c61c04d88 <col:39> 'const char *' lvalue ParmVar 0x564c61bdd5b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x564c61c04e38 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564c61c04de8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564c61c04da8 <col:48> 'int' lvalue ParmVar 0x564c61bdd638 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564c61c04e20 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564c61c04e00 <col:56> 'const int' lvalue Var 0x564c61bd1740 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x564c61c04e58 <col:68> 'P' lvalue ParmVar 0x564c61bdd6b0 'parser' 'P'
|     | `-DeclRefExpr 0x564c61c04e78 <col:76> 'T' lvalue ParmVar 0x564c61bdd758 'x' 'T &'
|     `-ReturnStmt 0x564c61c04f08 <line:596:9, col:17>
|       `-UnaryOperator 0x564c61c04ef0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c04ee0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bdde98 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x564c61bdd960 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bdd9d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bdddf8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x564c61bdda98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bddb10 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bddcd0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564c61c05088 <col:65, line:614:5>
|     `-ReturnStmt 0x564c61c05078 <line:613:9, col:46>
|       `-CallExpr 0x564c61c05038 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c04f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c04fb8 <col:25> 'const char *' lvalue ParmVar 0x564c61bdda98 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c04fd8 <col:34> 'int' 0
|         |-DeclRefExpr 0x564c61c04ff8 <col:37> 'P' lvalue ParmVar 0x564c61bddb10 'parser' 'P'
|         `-DeclRefExpr 0x564c61c05018 <col:45> 'Vector<T>' lvalue ParmVar 0x564c61bddcd0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x564c61bde2c8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x564c61bddf08 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bde228 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x564c61bddfc0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bde110 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564c61c052a0 <col:55, line:618:5>
|     `-ReturnStmt 0x564c61c05290 <line:617:9, col:55>
|       `-CallExpr 0x564c61c05250 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c050b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c05120 <col:25> 'const char *' lvalue ParmVar 0x564c61bddfc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x564c61c05140 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x564c61c05210 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564c61c05230 <col:54> 'Vector<T>' lvalue ParmVar 0x564c61bde110 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x564c61bde898 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x564c61bde330 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bde3a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bde7f8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x564c61bde468 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bde4e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bde560 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x564c61bde6b0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564c61c05498 <col:76, line:623:5>
|     |-CallExpr 0x564c61c05418 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564c61c052b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x564c61c052f8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x564c61c05308 <col:34> 'const char *' lvalue ParmVar 0x564c61bde468 'keyword' 'const char *'
|     | |-BinaryOperator 0x564c61c053b8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x564c61c05368 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564c61c05328 <col:43> 'int' lvalue ParmVar 0x564c61bde4e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564c61c053a0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564c61c05380 <col:51> 'const int' lvalue Var 0x564c61bd1740 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x564c61c053d8 <col:63> 'P' lvalue ParmVar 0x564c61bde560 'parser' 'P'
|     | `-DeclRefExpr 0x564c61c053f8 <col:71> 'Vector<T>' lvalue ParmVar 0x564c61bde6b0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x564c61c05488 <line:622:9, col:17>
|       `-UnaryOperator 0x564c61c05470 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c05460 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61bdedd8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x564c61bde910 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61bde988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61bded38 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x564c61bdea48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61bdeac8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564c61bdec10 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564c61c05700 <col:66, line:627:5>
|     `-ReturnStmt 0x564c61c056f0 <line:626:9, col:59>
|       `-CallExpr 0x564c61c056b0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564c61c054c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564c61c05538 <col:25> 'const char *' lvalue ParmVar 0x564c61bdea48 'keyword' 'const char *'
|         |-DeclRefExpr 0x564c61c05558 <col:34> 'int' lvalue ParmVar 0x564c61bdeac8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x564c61c05670 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564c61c05690 <col:58> 'Vector<T>' lvalue ParmVar 0x564c61bdec10 'x' 'Vector<T> &'
|-CXXMethodDecl 0x564c61bdee68 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x564c61c05780 <col:25, line:633:5>
|   `-ReturnStmt 0x564c61c05770 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x564c61c05758 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564c61c05728 <col:16> 'const bool' lvalue ->_status 0x564c61befe18
|         `-CXXThisExpr 0x564c61c05718 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x564c61bdefe8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x564c61bdef20 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x564c61c05868 <col:27, line:639:5>
|   |-BinaryOperator 0x564c61c05810 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564c61c05798 <col:9> 'bool' lvalue ParmVar 0x564c61bdef20 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564c61c057f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564c61c057c8 <col:13> 'bool' lvalue ->_status 0x564c61befe18
|   |     `-CXXThisExpr 0x564c61c057b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x564c61c05858 <line:638:9, col:17>
|     `-UnaryOperator 0x564c61c05840 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c61c05830 <col:17> 'Args *' this
|-CXXMethodDecl 0x564c61bdf168 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x564c61bdf0a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x564c61c05958 <col:39, line:644:5>
|   |-BinaryOperator 0x564c61c05900 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564c61c05888 <col:9> 'bool' lvalue ParmVar 0x564c61bdf0a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564c61c058e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564c61c058b8 <col:13> 'const bool' lvalue ->_status 0x564c61befe18
|   |     `-CXXThisExpr 0x564c61c058a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x564c61c05948 <line:643:9, col:17>
|     `-UnaryOperator 0x564c61c05930 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c61c05920 <col:17> 'const Args *' this
|-CXXMethodDecl 0x564c61bdf230 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x564c61c05a00 <col:30, line:651:5>
|   `-ReturnStmt 0x564c61c059f0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x564c61c059d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564c61c059a8 <col:16> 'bool' lvalue ->_read_status 0x564c61bc9f20
|         `-ImplicitCastExpr 0x564c61c05988 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x564c61c05978 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x564c61bdf378 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x564c61bdf2e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x564c61c05b08 <col:32, line:658:5>
|   |-BinaryOperator 0x564c61c05ab0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564c61c05a18 <col:9> 'bool' lvalue ParmVar 0x564c61bdf2e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564c61c05a98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564c61c05a68 <col:13> 'bool' lvalue ->_read_status 0x564c61bc9f20
|   |     `-ImplicitCastExpr 0x564c61c05a48 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x564c61c05a38 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x564c61c05af8 <line:657:9, col:17>
|     `-UnaryOperator 0x564c61c05ae0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c61c05ad0 <col:17> 'Args *' this
|-CXXMethodDecl 0x564c61bdf4c8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x564c61bdf438 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x564c61c05c18 <col:44, line:663:5>
|   |-BinaryOperator 0x564c61c05bc0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564c61c05b28 <col:9> 'bool' lvalue ParmVar 0x564c61bdf438 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564c61c05ba8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564c61c05b78 <col:13> 'bool' lvalue ->_read_status 0x564c61bc9f20
|   |     `-ImplicitCastExpr 0x564c61c05b58 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x564c61c05b48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x564c61c05c08 <line:662:9, col:17>
|     `-UnaryOperator 0x564c61c05bf0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c61c05be0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x564c61bdf590 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x564c61bdf658 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x564c61bdf720 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x564c61bdf7e8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x564c61bdfaf8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x564c61bdf888 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bdfa58 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x564c61bdf968 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x564c61c05fd0 <col:19, line:706:5>
|     `-IfStmt 0x564c61c05fa8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x564c61c05d18 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x564c61c05ed8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x564c61c05ea8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x564c61c05e68 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x564c61c05d70 <col:42> '<bound member function type>' ->simple_slot 0x564c61bfee90
|       |     | `-CXXThisExpr 0x564c61c05d60 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x564c61c05e08 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x564c61c05dc0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x564c619573b8
|       |     | `-DeclRefExpr 0x564c61c05da0 <col:55> 'T' lvalue ParmVar 0x564c61bdf968 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x564c61c05e48 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x564c61c05f98 <line:705:13, col:34>
|         `-CallExpr 0x564c61c05f70 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x564c61c05ef8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x564c61c05f50 <col:33> 'T' lvalue ParmVar 0x564c61bdf968 'x' 'T &'
|-FunctionTemplateDecl 0x564c61bdfdc8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x564c61bdfb58 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61bdfd28 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x564c61bdfc38 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x564c61c063b0 <col:31, line:717:5>
|     |-DeclStmt 0x564c61c06110 <line:713:9, col:23>
|     | `-VarDecl 0x564c61c05ff8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x564c61c060e8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x564c61c06070 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x564c61c060c8 <col:21> 'T' lvalue ParmVar 0x564c61bdfc38 'x' 'T &'
|     |-IfStmt 0x564c61c06360 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x564c61c06208 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x564c61c06340 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564c61c062e0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564c61c06270 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|     |   | `-DeclRefExpr 0x564c61c06250 <col:14> 'T *' lvalue Var 0x564c61c05ff8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x564c61c06320 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x564c61c06398 <line:716:9, col:16>
|       `-DeclRefExpr 0x564c61c06378 <col:16> 'T *' lvalue Var 0x564c61c05ff8 's' 'T *'
|-FunctionTemplateDecl 0x564c61be01d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x564c61bdfe28 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564c61bdfea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564c61be0138 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x564c61bdff88 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x564c61be0028 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x564c61c066c0 <col:37, line:726:5>
|     |-IfStmt 0x564c61c06650 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x564c61c06670 <line:723:13, col:26>
|     | | `-VarDecl 0x564c61c06418 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x564c61c06508 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x564c61c06490 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x564c61c064e8 <col:25> 'T' lvalue ParmVar 0x564c61bdff88 'x' 'T &'
|     | |-DeclRefExpr 0x564c61c06530 <col:16> 'T *' lvalue Var 0x564c61c06418 's' 'T *'
|     | `-BinaryOperator 0x564c61c06630 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564c61c065e0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564c61c06570 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|     |   | `-DeclRefExpr 0x564c61c06550 <col:14> 'T *' lvalue Var 0x564c61c06418 's' 'T *'
|     |   `-DeclRefExpr 0x564c61c06610 <col:18> 'const V' lvalue ParmVar 0x564c61be0028 'value' 'const V &'
|     `-ReturnStmt 0x564c61c066b0 <line:725:9, col:17>
|       `-UnaryOperator 0x564c61c06698 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564c61c06688 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x564c61be05d8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x564c61be0240 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x564c61be0538 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x564c61be02f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be0370 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be0418 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x564c61c074e0 <col:65, line:737:5>
|     |-DeclStmt 0x564c61c06758 <line:732:9, col:26>
|     | `-VarDecl 0x564c61c066f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564c61c074a8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x564c61c074c8 <line:733:13, col:58>
|       | `-VarDecl 0x564c61c06780 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564c61c06960 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564c61c06930 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564c61c06918 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564c61c068f8 <col:26, col:58> 'String' (CXXTemporary 0x564c61c068f8)
|       |           `-CXXMemberCallExpr 0x564c61c06888 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564c61c067f8 <col:26> '<bound member function type>' ->find 0x564c61bfe4a8
|       |             | `-CXXThisExpr 0x564c61c067e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564c61c068c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c06828 <col:31> 'const char *' lvalue ParmVar 0x564c61be02f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564c61c068d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c06848 <col:40> 'int' lvalue ParmVar 0x564c61be0370 'flags' 'int'
|       |             `-DeclRefExpr 0x564c61c06868 <col:47> 'Args::Slot *' lvalue Var 0x564c61c066f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564c61c06a18 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564c61c06a00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564c61c069e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564c61c069b0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|       |       `-ImplicitCastExpr 0x564c61c06998 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564c61c06978 <col:20> 'String' lvalue Var 0x564c61c06780 'str' 'String'
|       `-CompoundStmt 0x564c61c07488 <col:61, line:736:9>
|         |-DeclStmt 0x564c61c06ed0 <line:734:13, col:76>
|         | `-VarDecl 0x564c61c06a68 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x564c61c06ea0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564c61c06e10 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564c61c06e58 <col:60> 'T' lvalue ParmVar 0x564c61be0418 'variable' 'T &'
|         |     `-UnaryOperator 0x564c61c06e88 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564c61c06e78 <col:71> 'Args *' this
|         `-CallExpr 0x564c61c07458 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x564c61c06ef8 <col:13> '<bound member function type>' ->postparse 0x564c61bfe6b8
|           | `-CXXThisExpr 0x564c61c06ee8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564c61c07418 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564c61c06f28 <col:23> 'T *' lvalue Var 0x564c61c06a68 's' 'T *'
|           | `-CallExpr 0x564c61c073d8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564c61c071b0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x564c61c072b0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x564c61c072d0 <col:86> 'String' lvalue Var 0x564c61c06780 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564c61c07380 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564c61c07310 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|           |   | `-DeclRefExpr 0x564c61c072f0 <col:92> 'T *' lvalue Var 0x564c61c06a68 's' 'T *'
|           |   `-UnaryOperator 0x564c61c073c0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564c61c073b0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x564c61c07438 <col:103> 'Args::Slot *' lvalue Var 0x564c61c066f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564c61be0b28 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x564c61be0648 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564c61be06c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x564c61be0a88 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x564c61be0788 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be0808 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be08a8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x564c61be0948 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x564c61c08380 <col:88, line:745:5>
|     |-DeclStmt 0x564c61c07578 <line:741:9, col:26>
|     | `-VarDecl 0x564c61c07510 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564c61c07798 <line:742:9, col:55>
|     | `-VarDecl 0x564c61c075a0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x564c61c07780 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564c61c07750 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564c61c07738 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564c61c07718 <col:22, col:54> 'String' (CXXTemporary 0x564c61c07718)
|     |           `-CXXMemberCallExpr 0x564c61c076a8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564c61c07618 <col:22> '<bound member function type>' ->find 0x564c61bfe4a8
|     |             | `-CXXThisExpr 0x564c61c07608 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564c61c076e0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564c61c07648 <col:27> 'const char *' lvalue ParmVar 0x564c61be0788 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564c61c076f8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564c61c07668 <col:36> 'int' lvalue ParmVar 0x564c61be0808 'flags' 'int'
|     |             `-DeclRefExpr 0x564c61c07688 <col:43> 'Args::Slot *' lvalue Var 0x564c61c07510 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564c61c07b70 <line:743:9, col:72>
|     | `-VarDecl 0x564c61c077e8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564c61c07b40 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564c61c07ab0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564c61c07af8 <col:56> 'T' lvalue ParmVar 0x564c61be08a8 'variable' 'T &'
|     |     `-UnaryOperator 0x564c61c07b28 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564c61c07b18 <col:67> 'Args *' this
|     `-CallExpr 0x564c61c08350 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x564c61c07b98 <col:9> '<bound member function type>' ->postparse 0x564c61bfe6b8
|       | `-CXXThisExpr 0x564c61c07b88 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x564c61c08310 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x564c61c07bc8 <col:19> 'T *' lvalue Var 0x564c61c077e8 's' 'T *'
|       | `-ParenExpr 0x564c61c082f0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x564c61c082c0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564c61c082a8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564c61c08290 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564c61c08270 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x564c61c08240 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|       |     |       `-ImplicitCastExpr 0x564c61c08228 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x564c61c07be8 <col:25> 'String' lvalue Var 0x564c61c075a0 'str' 'String'
|       |     |-CallExpr 0x564c61c08098 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x564c61c07e70 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x564c61c07f70 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x564c61c07f90 <col:89> 'String' lvalue Var 0x564c61c075a0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x564c61c08040 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x564c61c07fd0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|       |     | | `-DeclRefExpr 0x564c61c07fb0 <col:95> 'T *' lvalue Var 0x564c61c077e8 's' 'T *'
|       |     | `-UnaryOperator 0x564c61c08080 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564c61c08070 <col:99> 'Args *' this
|       |     `-ParenExpr 0x564c61c08208 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x564c61c081e8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x564c61c081b8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564c61c08168 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x564c61c080f8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|       |         | | `-DeclRefExpr 0x564c61c080d8 <col:109> 'T *' lvalue Var 0x564c61c077e8 's' 'T *'
|       |         | `-DeclRefExpr 0x564c61c08198 <col:113> 'const V' lvalue ParmVar 0x564c61be0948 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564c61c081d8 <col:120> 'bool' true
|       `-DeclRefExpr 0x564c61c08330 <col:128> 'Args::Slot *' lvalue Var 0x564c61c07510 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564c61be1058 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x564c61be0ba0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61be0c18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61be0fb8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x564c61be0cd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be0d58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be0dd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x564c61be0e78 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x564c61c08f78 <col:75, line:754:5>
|     |-DeclStmt 0x564c61c08428 <line:749:9, col:26>
|     | `-VarDecl 0x564c61c083c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564c61c08f40 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x564c61c08f60 <line:750:13, col:58>
|       | `-VarDecl 0x564c61c08450 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564c61c08630 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564c61c08600 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564c61c085e8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564c61c085c8 <col:26, col:58> 'String' (CXXTemporary 0x564c61c085c8)
|       |           `-CXXMemberCallExpr 0x564c61c08558 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564c61c084c8 <col:26> '<bound member function type>' ->find 0x564c61bfe4a8
|       |             | `-CXXThisExpr 0x564c61c084b8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564c61c08590 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c084f8 <col:31> 'const char *' lvalue ParmVar 0x564c61be0cd8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564c61c085a8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c08518 <col:40> 'int' lvalue ParmVar 0x564c61be0d58 'flags' 'int'
|       |             `-DeclRefExpr 0x564c61c08538 <col:47> 'Args::Slot *' lvalue Var 0x564c61c083c0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564c61c086e8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564c61c086d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564c61c086b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564c61c08680 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|       |       `-ImplicitCastExpr 0x564c61c08668 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564c61c08648 <col:20> 'String' lvalue Var 0x564c61c08450 'str' 'String'
|       `-CompoundStmt 0x564c61c08f20 <col:61, line:753:9>
|         |-DeclStmt 0x564c61c08ac0 <line:751:13, col:63>
|         | `-VarDecl 0x564c61c08738 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x564c61c08a90 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564c61c08a00 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564c61c08a48 <col:47> 'T' lvalue ParmVar 0x564c61be0e78 'variable' 'T &'
|         |     `-UnaryOperator 0x564c61c08a78 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564c61c08a68 <col:58> 'Args *' this
|         `-CallExpr 0x564c61c08ef0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x564c61c08ae8 <col:13> '<bound member function type>' ->postparse 0x564c61bfe6b8
|           | `-CXXThisExpr 0x564c61c08ad8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564c61c08eb0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564c61c08b18 <col:23> 'T *' lvalue Var 0x564c61c08738 's' 'T *'
|           | `-CallExpr 0x564c61c08e70 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564c61c08d00 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564c61c08d48 <col:56> 'P' lvalue ParmVar 0x564c61be0dd0 'parser' 'P'
|           |   |-DeclRefExpr 0x564c61c08d68 <col:64> 'String' lvalue Var 0x564c61c08450 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564c61c08e18 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564c61c08da8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|           |   | `-DeclRefExpr 0x564c61c08d88 <col:70> 'T *' lvalue Var 0x564c61c08738 's' 'T *'
|           |   `-UnaryOperator 0x564c61c08e58 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564c61c08e48 <col:74> 'Args *' this
|           `-DeclRefExpr 0x564c61c08ed0 <col:81> 'Args::Slot *' lvalue Var 0x564c61c083c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564c61be16b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x564c61be10d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x564c61be1148 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x564c61be11c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x564c61be1618 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x564c61be1290 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be1310 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be1388 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x564c61be1428 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x564c61be14c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x564c61c09d08 <col:98, line:762:5>
|     |-DeclStmt 0x564c61c09010 <line:758:9, col:26>
|     | `-VarDecl 0x564c61c08fa8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564c61c09230 <line:759:9, col:55>
|     | `-VarDecl 0x564c61c09038 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x564c61c09218 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564c61c091e8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564c61c091d0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564c61c091b0 <col:22, col:54> 'String' (CXXTemporary 0x564c61c091b0)
|     |           `-CXXMemberCallExpr 0x564c61c09140 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564c61c090b0 <col:22> '<bound member function type>' ->find 0x564c61bfe4a8
|     |             | `-CXXThisExpr 0x564c61c090a0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564c61c09178 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564c61c090e0 <col:27> 'const char *' lvalue ParmVar 0x564c61be1290 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564c61c09190 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564c61c09100 <col:36> 'int' lvalue ParmVar 0x564c61be1310 'flags' 'int'
|     |             `-DeclRefExpr 0x564c61c09120 <col:43> 'Args::Slot *' lvalue Var 0x564c61c08fa8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564c61c09650 <line:760:9, col:59>
|     | `-VarDecl 0x564c61c09288 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564c61c09620 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564c61c09590 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564c61c095d8 <col:43> 'T' lvalue ParmVar 0x564c61be1428 'variable' 'T &'
|     |     `-UnaryOperator 0x564c61c09608 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564c61c095f8 <col:54> 'Args *' this
|     `-CallExpr 0x564c61c09cd8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x564c61c09678 <col:9> '<bound member function type>' ->postparse 0x564c61bfe6b8
|       | `-CXXThisExpr 0x564c61c09668 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x564c61c09c98 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x564c61c096a8 <col:19> 'T *' lvalue Var 0x564c61c09288 's' 'T *'
|       | `-ParenExpr 0x564c61c09c78 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x564c61c09c48 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564c61c09c30 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564c61c09c18 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564c61c09bf8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x564c61c09bc8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|       |     |       `-ImplicitCastExpr 0x564c61c09bb0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x564c61c096c8 <col:25> 'String' lvalue Var 0x564c61c09038 'str' 'String'
|       |     |-CallExpr 0x564c61c09a20 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x564c61c098b0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x564c61c098f8 <col:59> 'P' lvalue ParmVar 0x564c61be1388 'parser' 'P'
|       |     | |-DeclRefExpr 0x564c61c09918 <col:67> 'String' lvalue Var 0x564c61c09038 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x564c61c099c8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x564c61c09958 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|       |     | | `-DeclRefExpr 0x564c61c09938 <col:73> 'T *' lvalue Var 0x564c61c09288 's' 'T *'
|       |     | `-UnaryOperator 0x564c61c09a08 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564c61c099f8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x564c61c09b90 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x564c61c09b70 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x564c61c09b40 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564c61c09af0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x564c61c09a80 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|       |         | | `-DeclRefExpr 0x564c61c09a60 <col:87> 'T *' lvalue Var 0x564c61c09288 's' 'T *'
|       |         | `-DeclRefExpr 0x564c61c09b20 <col:91> 'const V' lvalue ParmVar 0x564c61be14c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564c61c09b60 <col:98> 'bool' true
|       `-DeclRefExpr 0x564c61c09cb8 <col:106> 'Args::Slot *' lvalue Var 0x564c61c08fa8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564c61be1d28 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x564c61be1738 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61be17b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x564c61be1838 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x564c61be1c88 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x564c61be1900 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be1980 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be19f8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x564c61be1a98 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x564c61be1b38 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x564c61c0ace8 <col:60, line:773:5>
|     |-DeclStmt 0x564c61c09db0 <line:767:9, col:26>
|     | `-VarDecl 0x564c61c09d48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564c61c0acb0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x564c61c0acd0 <line:768:13, col:58>
|       | `-VarDecl 0x564c61c09dd8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564c61c09fb8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564c61c09f88 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564c61c09f70 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564c61c09f50 <col:26, col:58> 'String' (CXXTemporary 0x564c61c09f50)
|       |           `-CXXMemberCallExpr 0x564c61c09ee0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564c61c09e50 <col:26> '<bound member function type>' ->find 0x564c61bfe4a8
|       |             | `-CXXThisExpr 0x564c61c09e40 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564c61c09f18 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c09e80 <col:31> 'const char *' lvalue ParmVar 0x564c61be1900 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564c61c09f30 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c09ea0 <col:40> 'int' lvalue ParmVar 0x564c61be1980 'flags' 'int'
|       |             `-DeclRefExpr 0x564c61c09ec0 <col:47> 'Args::Slot *' lvalue Var 0x564c61c09d48 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564c61c0a070 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564c61c0a058 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564c61c0a038 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564c61c0a008 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|       |       `-ImplicitCastExpr 0x564c61c09ff0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564c61c09fd0 <col:20> 'String' lvalue Var 0x564c61c09dd8 'str' 'String'
|       `-CompoundStmt 0x564c61c0ac88 <col:61, line:772:9>
|         |-DeclStmt 0x564c61c0a3b0 <line:769:13, col:66>
|         | `-VarDecl 0x564c61c0a0c8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x564c61c0a380 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564c61c0a2f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564c61c0a338 <col:49> 'T1' lvalue ParmVar 0x564c61be1a98 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x564c61c0a368 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564c61c0a358 <col:61> 'Args *' this
|         |-DeclStmt 0x564c61c0a720 <line:770:13, col:66>
|         | `-VarDecl 0x564c61c0a438 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x564c61c0a6f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564c61c0a660 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564c61c0a6a8 <col:49> 'T2' lvalue ParmVar 0x564c61be1b38 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x564c61c0a6d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564c61c0a6c8 <col:61> 'Args *' this
|         `-CallExpr 0x564c61c0ac58 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x564c61c0a748 <col:13> '<bound member function type>' ->postparse 0x564c61bfe6b8
|           | `-CXXThisExpr 0x564c61c0a738 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564c61c0ac18 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x564c61c0a7b8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x564c61c0a778 <col:23> 'T1 *' lvalue Var 0x564c61c0a0c8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x564c61c0a798 <col:29> 'T2 *' lvalue Var 0x564c61c0a438 's2' 'T2 *'
|           | `-CallExpr 0x564c61c0abd0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564c61c0a9a0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564c61c0a9e8 <col:63> 'P' lvalue ParmVar 0x564c61be19f8 'parser' 'P'
|           |   |-DeclRefExpr 0x564c61c0aa08 <col:71> 'String' lvalue Var 0x564c61c09dd8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564c61c0aab8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564c61c0aa48 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|           |   | `-DeclRefExpr 0x564c61c0aa28 <col:77> 'T1 *' lvalue Var 0x564c61c0a0c8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x564c61c0ab78 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564c61c0ab08 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|           |   | `-DeclRefExpr 0x564c61c0aae8 <col:82> 'T2 *' lvalue Var 0x564c61c0a438 's2' 'T2 *'
|           |   `-UnaryOperator 0x564c61c0abb8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564c61c0aba8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x564c61c0ac38 <col:94> 'Args::Slot *' lvalue Var 0x564c61c09d48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564c61be2118 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x564c61be1da8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61be2078 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x564c61be1e60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be1ee0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be1f58 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564c61c0b200 <col:67, line:780:5>
|     |-DeclStmt 0x564c61c0ad80 <line:777:9, col:26>
|     | `-VarDecl 0x564c61c0ad18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564c61c0b1c8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x564c61c0b1e8 <line:778:13, col:58>
|       | `-VarDecl 0x564c61c0ada8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564c61c0af88 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564c61c0af58 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564c61c0af40 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564c61c0af20 <col:26, col:58> 'String' (CXXTemporary 0x564c61c0af20)
|       |           `-CXXMemberCallExpr 0x564c61c0aeb0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564c61c0ae20 <col:26> '<bound member function type>' ->find 0x564c61bfe4a8
|       |             | `-CXXThisExpr 0x564c61c0ae10 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564c61c0aee8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c0ae50 <col:31> 'const char *' lvalue ParmVar 0x564c61be1e60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564c61c0af00 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564c61c0ae70 <col:40> 'int' lvalue ParmVar 0x564c61be1ee0 'flags' 'int'
|       |             `-DeclRefExpr 0x564c61c0ae90 <col:47> 'Args::Slot *' lvalue Var 0x564c61c0ad18 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564c61c0b040 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564c61c0b028 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564c61c0b008 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564c61c0afd8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|       |       `-ImplicitCastExpr 0x564c61c0afc0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564c61c0afa0 <col:20> 'String' lvalue Var 0x564c61c0ada8 'str' 'String'
|       `-CallExpr 0x564c61c0b198 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x564c61c0b068 <col:13> '<bound member function type>' ->postparse 0x564c61bfe6b8
|         | `-CXXThisExpr 0x564c61c0b058 <col:13> 'Args *' implicit this
|         |-CallExpr 0x564c61c0b148 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x564c61c0b0b8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x564c61c0b098 <col:23> 'P' lvalue ParmVar 0x564c61be1f58 'parser' 'P'
|         | |-DeclRefExpr 0x564c61c0b100 <col:36> 'String' lvalue Var 0x564c61c0ada8 'str' 'String'
|         | `-UnaryOperator 0x564c61c0b130 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x564c61c0b120 <col:42> 'Args *' this
|         `-DeclRefExpr 0x564c61c0b178 <col:49> 'Args::Slot *' lvalue Var 0x564c61c0ad18 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x564c61be24b8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x564c61be2188 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x564c61be2418 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x564c61be2240 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be22c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be2338 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x564c61c0bb70 <col:71, line:792:5>
|     |-DeclStmt 0x564c61c0b298 <line:784:9, col:26>
|     | `-VarDecl 0x564c61c0b230 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564c61c0b368 <line:785:9, col:29>
|     | `-VarDecl 0x564c61c0b2c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564c61c0b350 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564c61c0b330 <col:28> 'int' 1
|     |-WhileStmt 0x564c61c0ba20 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x564c61c0ba40 <line:786:16, col:61>
|     | | `-VarDecl 0x564c61c0b390 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564c61c0b570 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564c61c0b540 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564c61c0b528 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564c61c0b508 <col:29, col:61> 'String' (CXXTemporary 0x564c61c0b508)
|     | |           `-CXXMemberCallExpr 0x564c61c0b498 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564c61c0b408 <col:29> '<bound member function type>' ->find 0x564c61bfe4a8
|     | |             | `-CXXThisExpr 0x564c61c0b3f8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564c61c0b4d0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564c61c0b438 <col:34> 'const char *' lvalue ParmVar 0x564c61be2240 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564c61c0b4e8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564c61c0b458 <col:43> 'int' lvalue ParmVar 0x564c61be22c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x564c61c0b478 <col:50> 'Args::Slot *' lvalue Var 0x564c61c0b230 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564c61c0b628 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564c61c0b610 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564c61c0b5f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564c61c0b5c0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|     | |       `-ImplicitCastExpr 0x564c61c0b5a8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564c61c0b588 <col:23> 'String' lvalue Var 0x564c61c0b390 'str' 'String'
|     | `-CompoundStmt 0x564c61c0b9f8 <col:64, line:790:9>
|     |   |-CallExpr 0x564c61c0b780 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x564c61c0b650 <col:13> '<bound member function type>' ->postparse 0x564c61bfe6b8
|     |   | | `-CXXThisExpr 0x564c61c0b640 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x564c61c0b730 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x564c61c0b6a0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x564c61c0b680 <col:23> 'P' lvalue ParmVar 0x564c61be2338 'parser' 'P'
|     |   | | |-DeclRefExpr 0x564c61c0b6e8 <col:36> 'String' lvalue Var 0x564c61c0b390 'str' 'String'
|     |   | | `-UnaryOperator 0x564c61c0b718 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x564c61c0b708 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x564c61c0b760 <col:49> 'Args::Slot *' lvalue Var 0x564c61c0b230 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x564c61c0b918 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564c61c0b7b0 <col:13> 'int' lvalue Var 0x564c61c0b2c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564c61c0b900 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564c61c0b8e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564c61c0b848 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564c61c0b828 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564c61c0b810 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564c61c0b7d0 <col:28> 'int' lvalue Var 0x564c61c0b2c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564c61c0b7f0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564c61c0b8c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564c61c0b898 <col:49> 'bool' lvalue ->_read_status 0x564c61bc9f20
|     |   |         `-ImplicitCastExpr 0x564c61c0b878 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564c61c0b868 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564c61c0b9c8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564c61c0b938 <col:13> 'int' lvalue ParmVar 0x564c61be22c0 'flags' 'int'
|     |     `-UnaryOperator 0x564c61c0b9b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564c61c0b998 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564c61c0b978 <col:23> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564c61c0bb50 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564c61c0ba88 <col:9> 'bool' lvalue ->_read_status 0x564c61bc9f20
|       | `-ImplicitCastExpr 0x564c61c0ba68 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564c61c0ba58 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564c61c0bb30 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564c61c0bb10 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564c61c0baf8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564c61c0bab8 <col:25> 'int' lvalue Var 0x564c61c0b2c8 'read_status' 'int'
|           `-IntegerLiteral 0x564c61c0bad8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x564c61be2998 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x564c61be2528 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61be25a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61be28f8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x564c61be2668 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be26e8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be2760 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x564c61be2808 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x564c61c10c20 <col:84, line:805:5>
|     |-DeclStmt 0x564c61c0fd38 <line:796:9, col:26>
|     | `-VarDecl 0x564c61c0fcd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564c61c0fe08 <line:797:9, col:29>
|     | `-VarDecl 0x564c61c0fd68 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564c61c0fdf0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564c61c0fdd0 <col:28> 'int' 1
|     |-DeclStmt 0x564c61c10140 <line:798:9, col:71>
|     | `-VarDecl 0x564c61c0fe58 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564c61c10110 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564c61c10080 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x564c61c100c8 <col:55> 'T' lvalue ParmVar 0x564c61be2808 'variable' 'T &'
|     |     `-UnaryOperator 0x564c61c100f8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564c61c100e8 <col:66> 'Args *' this
|     |-WhileStmt 0x564c61c10ad0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x564c61c10af0 <line:799:16, col:61>
|     | | `-VarDecl 0x564c61c10168 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564c61c10348 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564c61c10318 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564c61c10300 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564c61c102e0 <col:29, col:61> 'String' (CXXTemporary 0x564c61c102e0)
|     | |           `-CXXMemberCallExpr 0x564c61c10270 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564c61c101e0 <col:29> '<bound member function type>' ->find 0x564c61bfe4a8
|     | |             | `-CXXThisExpr 0x564c61c101d0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564c61c102a8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564c61c10210 <col:34> 'const char *' lvalue ParmVar 0x564c61be2668 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564c61c102c0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564c61c10230 <col:43> 'int' lvalue ParmVar 0x564c61be26e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x564c61c10250 <col:50> 'Args::Slot *' lvalue Var 0x564c61c0fcd0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564c61c10400 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564c61c103e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564c61c103c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564c61c10398 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|     | |       `-ImplicitCastExpr 0x564c61c10380 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564c61c10360 <col:23> 'String' lvalue Var 0x564c61c10168 'str' 'String'
|     | `-CompoundStmt 0x564c61c10aa8 <col:64, line:803:9>
|     |   |-CallExpr 0x564c61c10830 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x564c61c10428 <col:13> '<bound member function type>' ->postparse 0x564c61bfe6b8
|     |   | | `-CXXThisExpr 0x564c61c10418 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x564c61c107f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x564c61c10458 <col:23> 'T *' lvalue Var 0x564c61c0fe58 's' 'T *'
|     |   | | `-CallExpr 0x564c61c107b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x564c61c10640 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x564c61c10688 <col:56> 'P' lvalue ParmVar 0x564c61be2760 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x564c61c106a8 <col:64> 'String' lvalue Var 0x564c61c10168 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x564c61c10758 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x564c61c106e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|     |   | |   | `-DeclRefExpr 0x564c61c106c8 <col:70> 'T *' lvalue Var 0x564c61c0fe58 's' 'T *'
|     |   | |   `-UnaryOperator 0x564c61c10798 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x564c61c10788 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x564c61c10810 <col:81> 'Args::Slot *' lvalue Var 0x564c61c0fcd0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x564c61c109c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564c61c10860 <col:13> 'int' lvalue Var 0x564c61c0fd68 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564c61c109b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564c61c10990 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564c61c108f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564c61c108d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564c61c108c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564c61c10880 <col:28> 'int' lvalue Var 0x564c61c0fd68 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564c61c108a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564c61c10978 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564c61c10948 <col:49> 'bool' lvalue ->_read_status 0x564c61bc9f20
|     |   |         `-ImplicitCastExpr 0x564c61c10928 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564c61c10918 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564c61c10a78 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564c61c109e8 <col:13> 'int' lvalue ParmVar 0x564c61be26e8 'flags' 'int'
|     |     `-UnaryOperator 0x564c61c10a60 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564c61c10a48 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564c61c10a28 <col:23> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564c61c10c00 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564c61c10b38 <col:9> 'bool' lvalue ->_read_status 0x564c61bc9f20
|       | `-ImplicitCastExpr 0x564c61c10b18 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564c61c10b08 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564c61c10be0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564c61c10bc0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564c61c10ba8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564c61c10b68 <col:25> 'int' lvalue Var 0x564c61c0fd68 'read_status' 'int'
|           `-IntegerLiteral 0x564c61c10b88 <col:40> 'int' 1
|-FunctionTemplateDecl 0x564c61be2f78 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x564c61be2a10 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x564c61be2a88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x564c61be2ed8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x564c61be2b48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x564c61be2bc8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x564c61be2c40 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x564c61be2d90 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x564c61c11a28 <col:87, line:821:5>
|     |-DeclStmt 0x564c61c10cd0 <line:809:9, col:26>
|     | `-VarDecl 0x564c61c10c68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564c61c10da0 <line:810:9, col:29>
|     | `-VarDecl 0x564c61c10d00 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564c61c10d88 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564c61c10d68 <col:28> 'int' 1
|     |-DeclStmt 0x564c61c10fe8 <line:811:9, col:38>
|     | `-VarDecl 0x564c61c10ed0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x564c61c10fc0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x564c61c10f48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x564c61c10fa0 <col:29> 'Vector<T>' lvalue ParmVar 0x564c61be2d90 'variable' 'Vector<T> &'
|     |-WhileStmt 0x564c61c118d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x564c61c118f8 <line:812:16, col:61>
|     | | `-VarDecl 0x564c61c11010 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564c61c111f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564c61c111c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564c61c111a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564c61c11188 <col:29, col:61> 'String' (CXXTemporary 0x564c61c11188)
|     | |           `-CXXMemberCallExpr 0x564c61c11118 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564c61c11088 <col:29> '<bound member function type>' ->find 0x564c61bfe4a8
|     | |             | `-CXXThisExpr 0x564c61c11078 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564c61c11150 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564c61c110b8 <col:34> 'const char *' lvalue ParmVar 0x564c61be2b48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564c61c11168 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564c61c110d8 <col:43> 'int' lvalue ParmVar 0x564c61be2bc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x564c61c110f8 <col:50> 'Args::Slot *' lvalue Var 0x564c61c10c68 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x564c61c112a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x564c61c11290 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x564c61c11270 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564c61c11240 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564c61919378
|     | |       `-ImplicitCastExpr 0x564c61c11228 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564c61c11208 <col:23> 'String' lvalue Var 0x564c61c11010 'str' 'String'
|     | `-CompoundStmt 0x564c61c118a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x564c61c11368 <line:813:13, col:23>
|     |   | `-VarDecl 0x564c61c112d0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x564c61c11348 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x564c61c114e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x564c61c11390 <col:13> '<bound member function type>' ->postparse 0x564c61bfe6b8
|     |   | | `-CXXThisExpr 0x564c61c11380 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x564c61c11490 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x564c61c113e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x564c61c113c0 <col:23> 'P' lvalue ParmVar 0x564c61be2c40 'parser' 'P'
|     |   | | |-DeclRefExpr 0x564c61c11428 <col:36> 'String' lvalue Var 0x564c61c11010 'str' 'String'
|     |   | | |-DeclRefExpr 0x564c61c11448 <col:41> 'T' lvalue Var 0x564c61c112d0 'sx' 'T'
|     |   | | `-UnaryOperator 0x564c61c11478 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x564c61c11468 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x564c61c114c8 <col:53> 'Args::Slot *' lvalue Var 0x564c61c10c68 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x564c61c11640 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x564c61c11578 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x564c61c11548 <col:17> 'bool' lvalue ->_read_status 0x564c61bc9f20
|     |   | |   `-ImplicitCastExpr 0x564c61c11528 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x564c61c11518 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x564c61c11618 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x564c61c115b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x564c61c11590 <col:17> 'Vector<T> *' lvalue Var 0x564c61c10ed0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x564c61c115f8 <col:30> 'T' lvalue Var 0x564c61c112d0 'sx' 'T'
|     |   |-BinaryOperator 0x564c61c117c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x564c61c11658 <col:13> 'int' lvalue Var 0x564c61c10d00 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x564c61c117a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x564c61c11788 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x564c61c116f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x564c61c116d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x564c61c116b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x564c61c11678 <col:28> 'int' lvalue Var 0x564c61c10d00 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x564c61c11698 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x564c61c11770 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x564c61c11740 <col:49> 'bool' lvalue ->_read_status 0x564c61bc9f20
|     |   |         `-ImplicitCastExpr 0x564c61c11720 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x564c61c11710 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x564c61c11870 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x564c61c117e0 <col:13> 'int' lvalue ParmVar 0x564c61be2bc8 'flags' 'int'
|     |     `-UnaryOperator 0x564c61c11858 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x564c61c11840 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x564c61c11820 <col:23> 'const int' lvalue Var 0x564c61bd1458 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x564c61c11a08 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x564c61c11940 <col:9> 'bool' lvalue ->_read_status 0x564c61bc9f20
|       | `-ImplicitCastExpr 0x564c61c11920 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x564c61c11910 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x564c61c119e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x564c61c119c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x564c61c119b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x564c61c11970 <col:25> 'int' lvalue Var 0x564c61c10d00 'read_status' 'int'
|           `-IntegerLiteral 0x564c61c11990 <col:40> 'int' 1
|-AccessSpecDecl 0x564c61be2ff0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x564c61be3018 prev 0x564c61bcf758 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x564c61be3110 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x564c61be3200 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x564c61c11a60 <col:16, line:828:9>
| |-CXXDestructorDecl 0x564c61be32f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x564c61c11a70 <col:25, line:830:9>
| |-CXXMethodDecl 0x564c61be33f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x564c61be34a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x564c61be3548 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x564c61be3548
| | `-ParmVarDecl 0x564c61be3658 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x564c61be3e18 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x564c61be3e18
|   `-ParmVarDecl 0x564c61bef090 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x564c61be36c8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x564c61be3828 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x564c61be3a20 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x564c61be38d0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x564c61be3948 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x564c61c11c50 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x564c61be3cd8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x564c61c11ac0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x564c61c11a80 <col:20> 'void *' lvalue ParmVar 0x564c61be38d0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x564c61be3d40 '_slot' 'char *'
| | | `-CXXNewExpr 0x564c61c11b48 <col:32, col:45> 'char *' array Function 0x564c6173cff8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x564c61c11b30 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x564c61c11b00 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x564c61be3948 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x564c61be3da0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x564c61c11c10 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x564c61c11bd0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x564c61be3948 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x564c61c11cd0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x564c61be3b20 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x564c61be32f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x564c61c11d58 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x564c61c11d38 <line:840:13, col:22> 'void' array Function 0x564c6173d358 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x564c61c11d20 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x564c61c11cf0 <col:22> 'char *' lvalue ->_slot 0x564c61be3d40
| |         `-CXXThisExpr 0x564c61c11ce0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x564c61be3c20 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x564c61be33f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x564c61c11f48 <col:22, line:844:9>
| |   `-CallExpr 0x564c61c11eb0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x564c61c11e98 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x564c61c11e78 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x564c61848dd8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x564c61c11ee8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x564c61c11dc8 <col:20> 'void *' lvalue ->_ptr 0x564c61be3cd8
| |     |   `-CXXThisExpr 0x564c61c11db8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x564c61c11f18 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x564c61c11f00 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x564c61c11e08 <col:26> 'char *' lvalue ->_slot 0x564c61be3d40
| |     |     `-CXXThisExpr 0x564c61c11df8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x564c61c11f30 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x564c61c11e48 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x564c61be3da0
| |         `-CXXThisExpr 0x564c61c11e38 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x564c61be3cd8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x564c61be3d40 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x564c61be3da0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x564c61bef100 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x564c61bef100
| | `-ParmVarDecl 0x564c61bef218 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x564c61bef2b8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x564c61bef2b8
|   `-ParmVarDecl 0x564c61bef3c8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x564c61bef568 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x564c61bef438 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x564c61bef4d8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x564c61bef800 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x564c61bef9f8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x564c61bef8c8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x564c61befb78 '_ptr' 'T *'
|   | | `-ParenListExpr 0x564c61c11f80 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x564c61c11f60 <col:20> 'T *' lvalue ParmVar 0x564c61bef8c8 'ptr' 'T *'
|   | `-CompoundStmt 0x564c61c11fd0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x564c61befac8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x564c61be33f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x564c61c12180 <col:22, line:857:9>
|   |   `-CallExpr 0x564c61c12150 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x564c61c11fe0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x564c61901508 0x564c618ab838
|   |     |-CXXOperatorCallExpr 0x564c61c120e0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x564c61c12070 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564c61b0e4b8 0x564c61b0e0d8 0x564c61b0dd08 0x564c61b0d928 0x564c61b0d548 0x564c61b0d178
|   |     | `-MemberExpr 0x564c61c12040 <col:29> 'T *' lvalue ->_ptr 0x564c61befb78
|   |     |   `-CXXThisExpr 0x564c61c12030 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x564c61c12120 <col:35> 'T' lvalue ->_slot 0x564c61befbd8
|   |       `-CXXThisExpr 0x564c61c12110 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x564c61befb78 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x564c61befbd8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x564c61befc40 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x564c61befd40 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x564c61befd90 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61befd20 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x564c61befd00 <col:31> 'int' 48
|-FieldDecl 0x564c61befdb8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x564c61befe18 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x564c61befe78 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x564c61beffb0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x564c61bfdd50 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x564c61bfddb0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x564c61bfde60 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x564c61bfe088 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x564c61bfdf90 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x564c61bfe1d8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x564c61bfe148 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x564c61bfe4a8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x564c61bfe298 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x564c61bfe318 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x564c61bfe3c0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x564c61bfe6b8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x564c61bfe570 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x564c61bfe5e8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x564c61bfe788 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x564c61bfe8d8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x564c61bfe840 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x564c61bfec68 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x564c61bfe998 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x564c61bfea18 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x564c61bfeac0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x564c61bfeb78 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x564c61bfee90 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x564c61bfed40 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x564c61bfedb8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x564c61bff1a8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x564c61bfef40 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x564c61bff108 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x564c61bff018 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c6195fd80 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c6195fe98 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x564c6195ff28 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x564c61960038 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x564c6195ff68 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x564c61960468 'ip_p' 'int'
| | `-ImplicitCastExpr 0x564c61960530 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x564c619604f0 <col:9> 'int' lvalue ParmVar 0x564c6195ff68 'p' 'int'
| `-CompoundStmt 0x564c61960af8 <col:12, line:412:5>
|   `-ParenExpr 0x564c61960ad8 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x564c61960aa8 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x564c619606d8 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x564c619606a8 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x564c619605f0 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x564c619605d8 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x564c61960588 <col:23> 'int' lvalue ->ip_p 0x564c61960468
|       |   | |   `-CXXThisExpr 0x564c61960578 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x564c619605b8 <col:30> 'int' 0
|       |   `-BinaryOperator 0x564c61960688 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x564c61960670 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x564c61960620 <col:35> 'int' lvalue ->ip_p 0x564c61960468
|       |     |   `-CXXThisExpr 0x564c61960610 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x564c61960650 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x564c61960738 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x564c61960718 <col:55> 'int' 0
|       `-CallExpr 0x564c61960a08 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x564c619609f0 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564c619609d0 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x564c61960a48 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x564c61960828 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x564c61960a60 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x564c61960898 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x564c61960a78 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x564c619608d0 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x564c61960a90 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x564c619609b8 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x564c619609a0 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x564c61960968 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x564c61960398 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x564c619600f8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x564c619601c8 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x564c61960240 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x564c619604d0 <col:34> 'const ArgContext' lvalue Var 0x564c6194b4a0 'blank_args' 'const ArgContext'
|-FieldDecl 0x564c61960468 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x564c61c4cc88 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x564c61c4cc88
| `-ParmVarDecl 0x564c61c4cd98 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x564c61c4ce38 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564c61c4cf48 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x564c61960468 'ip_p' 'int'
| | `-ImplicitCastExpr 0x564c61c4d730 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564c61c4d700 <col:7> 'int' xvalue .ip_p 0x564c61960468
| |     `-CXXStaticCastExpr 0x564c61c4d6d0 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x564c61c4d6a0 <col:7> 'IPPortArg' lvalue ParmVar 0x564c61c4cf48 '' 'IPPortArg &&'
| `-CompoundStmt 0x564c61c4d778 <col:7>
`-CXXDestructorDecl 0x564c61c4cfe8 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c6190a230 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c6190a348 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x564c6190a3d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x564c6190a4a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x564c6190a590 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x564c6190a7a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564c6190a650 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190a958 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x564c6190a860 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564c6190aaa0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x564c6190aa10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564c6190abe8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564c6190ab58 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190ad30 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564c6190aca0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190adf8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x564c6190af40 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x564c6190aeb0 <col:28> col:31 'int'
|-CXXMethodDecl 0x564c6190b008 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x564c6190b150 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x564c6190b0c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x564c6190b2c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564c6190b208 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190b410 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564c6190b380 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190b4d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x564c6190b698 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564c6190b588 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564c6190b600 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190b8e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564c6190b758 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564c6190b7d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c6190b998 <col:86> "" ""
|-CXXMethodDecl 0x564c6190bc08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x564c6190ba78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x564c6190baf0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190bdb8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564c6190bcc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564c6190bf68 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564c6190be70 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564c6190c238 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564c6190c020 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564c6190c098 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564c6190c110 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190c518 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564c6190c300 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564c6190c378 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564c6190c3f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c6190c5d0 <col:115> "" ""
|-AccessSpecDecl 0x564c6190c640 <line:84:3, col:10> col:3 private
|-FieldDecl 0x564c6190c678 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c6190cb80 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x564c6190cb80
| `-ParmVarDecl 0x564c6190cc88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x564c6190cd28 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x564c6190cd28
| `-ParmVarDecl 0x564c6190ce38 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x564c61942468 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564c61b35270 <col:7>
|-CXXConstructorDecl 0x564c61942540 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x564c61942540
| `-ParmVarDecl 0x564c61942658 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x564c619426c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x564c619426c8
| `-ParmVarDecl 0x564c619427d8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x564c61b37c70 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b23e18 prev 0x564c61b19020 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c61b23f10 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x564c61b24000 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x564c61b24128 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x564c61b242a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x564c61b24428 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x564c61b245a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x564c61b353d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564c61b35c48 <col:11>
|-CXXDestructorDecl 0x564c61b354b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564c61b355e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564c61b355e8
| `-ParmVarDecl 0x564c61b356f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x564c61b35798 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564c61b35798
| `-ParmVarDecl 0x564c61b358a8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x564c61b38668 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x564c61b38778 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x564c61b389f8 <col:11>
|   `-ReturnStmt 0x564c61b389e8 <col:11>
|     `-UnaryOperator 0x564c61b389d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564c61b389c0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x564c61b387e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564c61b387e8
  `-ParmVarDecl 0x564c61b388f8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b24610 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c61b24728 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x564c61b247c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x564c61b24830 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x564c61b24898 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x564c61b24900 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x564c61b24960 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x564c61b24a20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x564c61b24a80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x564c61b24ae0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x564c61b352e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x564c61b247c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x564c61b35c58 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x564c61b35cb0 <col:12>
|-CXXConstructorDecl 0x564c61b35918 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x564c61b35918
| `-ParmVarDecl 0x564c61b35a28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x564c61b35ac8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564c61b35ac8
| `-ParmVarDecl 0x564c61b35bd8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x564c61b37d50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b12730 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564c61b12848 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x564c61b128d8 <col:16, col:22> col:16 public
|-EnumDecl 0x564c61b12900 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x564c61b12a00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x564c61b12ae0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b129e0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x564c61b129c0 <col:21> 'int' 28
| `-EnumConstantDecl 0x564c61b12a90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x564c61b12af8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b12a70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x564c61b12a50 <col:22> 'int' 64
|-CXXMethodDecl 0x564c61b12e38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x564c61b12b20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564c61b12ba0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x564c61b12c18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564c61b12c90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564c61b12ef8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x564c61b130f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x564c61b12f70 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x564c61b12fe8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564c61b131a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x564c61b13308 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x564c61b13218 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564c61b133b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x564c61b13710 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x564c61b136a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x564c61b13640 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x564c61b13600 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x564c615e94e0 'void'
|       |-PointerType 0x564c61892ad0 'unsigned char *'
|       | `-BuiltinType 0x564c615e95e0 'unsigned char'
|       |-TypedefType 0x564c6168f0a0 'size_t' sugar
|       | |-Typedef 0x564c61659be0 'size_t'
|       | `-BuiltinType 0x564c615e9640 'unsigned long'
|       `-PointerType 0x564c615e9ce0 'void *'
|         `-BuiltinType 0x564c615e94e0 'void'
|-CXXMethodDecl 0x564c61b13b88 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x564c61b13780 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x564c61b137f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564c61b13890 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x564c61b13910 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x564c61b2e280 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x564c61b2e268 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x564c61b2e230 <col:58> 'int' 0
| |-ParmVarDecl 0x564c61b13990 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x564c61b2e2a8 <col:76> 'int' 0
| |-ParmVarDecl 0x564c61b13a10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x564c61b2e2c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x564c61b13c58 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x564c61b13cd8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x564c61b13d98 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x564c61b13e38 <col:20>
| `-OptimizeNoneAttr 0x564c61b13e90 <col:30>
|-CXXMethodDecl 0x564c61b13f08 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x564c61b13fa8 <col:20>
| `-OptimizeNoneAttr 0x564c61b14000 <col:30>
|-CXXMethodDecl 0x564c61b14078 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x564c61b14118 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x564c61b141c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x564c61b14268 <col:20>
| |-OptimizeNoneAttr 0x564c61b142c0 <col:30>
| `-WarnUnusedResultAttr 0x564c61b142e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x564c61b14340 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x564c61b143e0 <col:20>
| `-OptimizeNoneAttr 0x564c61b14438 <col:30>
|-CXXMethodDecl 0x564c61b14488 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x564c61b14528 <col:20>
| `-OptimizeNoneAttr 0x564c61b14580 <col:30>
|-CXXMethodDecl 0x564c61b145c8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x564c61b14668 <col:20>
| `-OptimizeNoneAttr 0x564c61b146c0 <col:30>
|-CXXMethodDecl 0x564c61b14708 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61b147c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61b14890 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564c61b14958 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564c61b14a18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61b14b38 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x564c61b2e390 <col:54, line:99:5>
|   `-ReturnStmt 0x564c61b2e380 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x564c61b2e368 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x564c61b2e338 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564c61b24e18
|         `-CXXThisExpr 0x564c61b2e328 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x564c61b14cd8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x564c61b14be8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x564c61b2e440 <col:67, line:103:5>
|   `-BinaryOperator 0x564c61b2e420 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564c61b2e3b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564c61b24e18
|     | `-CXXThisExpr 0x564c61b2e3a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564c61b2e408 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b2e3e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x564c61b14be8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x564c61b14dd0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x564c61b2e4c0 <col:33, line:107:5>
|   `-ReturnStmt 0x564c61b2e4b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x564c61b2e498 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x564c61b2e468 <col:16> 'void *' lvalue ->_destructor_argument 0x564c61b24e80
|         `-CXXThisExpr 0x564c61b2e458 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x564c61b14e90 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x564c61b2eaf0 <col:25, line:113:5>
|   |-ParenExpr 0x564c61b2e838 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x564c61b2e808 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b2e578 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x564c61b2e550 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x564c61b2e518 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x564c61b2e4e8 <col:24> '<bound member function type>' ->shared 0x564c61b13f08
|   |   |       `-ImplicitCastExpr 0x564c61b2e538 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x564c61b2e4d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x564c61b2e5d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b2e5b8 <col:42> 'int' 0
|   |   `-CallExpr 0x564c61b2e768 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x564c61b2e750 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b2e730 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b2e7a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b2e648 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x564c61b2e7c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b2e670 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b2e7d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b2e6a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x564c61b2e7f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b2e718 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b2e700 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b2e6c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x564c61b2ea38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x564c61b2e868 <col:2> 'unsigned char *' lvalue ->_head 0x564c61b24c20
|   | | `-CXXThisExpr 0x564c61b2e858 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x564c61b2ea20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x564c61b2ea00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x564c61b2e8a8 <col:10> 'unsigned char *' lvalue ->_data 0x564c61b24c88
|   |     | `-CXXThisExpr 0x564c61b2e898 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x564c61b2e9e8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x564c61b2e9c8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x564c61b2e8e8 <col:18> 'unsigned char *' lvalue ->_tail 0x564c61b24cf0
|   |         | `-CXXThisExpr 0x564c61b2e8d8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x564c61b2e9b0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x564c61b2e990 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x564c61b2e928 <col:26> 'unsigned char *' lvalue ->_end 0x564c61b24d58
|   |             | `-CXXThisExpr 0x564c61b2e918 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x564c61b2e978 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x564c61b2e958 <col:33> 'int' 0
|   `-BinaryOperator 0x564c61b2ead0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564c61b2ea68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x564c61b24e18
|     | `-CXXThisExpr 0x564c61b2ea58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564c61b2eab8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x564c61b2ea98 <col:16> 'int' 0
|-CXXMethodDecl 0x564c61b14fd0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564c61b14f40 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564c61b15078 <col:20>
| |-OptimizeNoneAttr 0x564c61b150d0 <col:30>
| `-WarnUnusedResultAttr 0x564c61b150f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x564c61b151c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564c61b15138 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564c61b15270 <col:20>
| |-OptimizeNoneAttr 0x564c61b152c8 <col:30>
| `-WarnUnusedResultAttr 0x564c61b152f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x564c61b15428 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x564c61b15330 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564c61b154d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x564c61b155d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x564c61b15540 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564c61b15678 <col:20>
| `-OptimizeNoneAttr 0x564c61b156d0 <col:30>
|-CXXMethodDecl 0x564c61b15798 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x564c61b15708 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564c61b15840 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x564c61b15940 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x564c61b158b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564c61b159e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x564c61b15ae8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x564c61b15a58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564c61b15b90 <col:20>
| `-OptimizeNoneAttr 0x564c61b15be8 <col:30>
|-CXXMethodDecl 0x564c61b15d78 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x564c61b15c28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x564c61b15ca0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x564c61b2e2e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x564c61b15e28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x564c61b16028 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564c61b15ea0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x564c61b15f18 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b16238 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564c61b160e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564c61b16160 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b16448 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x564c61b162f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x564c61b16378 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x564c61b2e2f8 <col:39> 'int' 0
|-CXXMethodDecl 0x564c61b16518 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x564c61b165e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564c61b166a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x564c61b16768 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61b16830 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x564c61b16978 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x564c61b168e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x564c61b16b48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564c61b16a38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x564c61b16ab0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b16c18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x564c61b16cd8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x564c61b16d78 <col:20>
| `-OptimizeNoneAttr 0x564c61b16dd0 <col:30>
|-CXXMethodDecl 0x564c61b16e20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x564c61b16ec0 <col:20>
| `-OptimizeNoneAttr 0x564c61b16f18 <col:30>
|-CXXMethodDecl 0x564c61b16f68 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x564c61b17028 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61b170f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x564c61b17190 <col:20>
| `-OptimizeNoneAttr 0x564c61b171e8 <col:30>
|-CXXMethodDecl 0x564c61b17338 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564c61b17228 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x564c61b172a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b17488 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x564c61b173f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b17560 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x564c61b17620 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x564c61b176c0 <col:20>
| `-OptimizeNoneAttr 0x564c61b17718 <col:30>
|-CXXMethodDecl 0x564c61b17768 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x564c61b17808 <col:20>
| `-OptimizeNoneAttr 0x564c61b17860 <col:30>
|-CXXMethodDecl 0x564c61b178b0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x564c61b17978 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x564c61b17a18 <col:20>
| `-OptimizeNoneAttr 0x564c61b17a70 <col:30>
|-CXXMethodDecl 0x564c61b17ab8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x564c61b17bd8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x564c61b17d48 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x564c61b17c88 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x564c61b17e38 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x564c61b17ed8 <col:20>
| `-OptimizeNoneAttr 0x564c61b17f30 <col:30>
|-CXXMethodDecl 0x564c61b17f80 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x564c61b18040 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564c61b18278 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x564c61b180f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x564c61b18168 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564c61b18328 <col:20>
| `-OptimizeNoneAttr 0x564c61b18380 <col:30>
|-CXXMethodDecl 0x564c61b18428 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x564c61b184c8 <col:20>
| `-OptimizeNoneAttr 0x564c61b18520 <col:30>
|-CXXMethodDecl 0x564c61b18570 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x564c61b18610 <col:20>
| `-OptimizeNoneAttr 0x564c61b18668 <col:30>
|-CXXMethodDecl 0x564c61b186b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x564c61b18750 <col:20>
| `-OptimizeNoneAttr 0x564c61b187a8 <col:30>
|-CXXMethodDecl 0x564c61b188a8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x564c61b187e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x564c61b18950 <col:20>
| `-OptimizeNoneAttr 0x564c61b189a8 <col:30>
|-CXXMethodDecl 0x564c61b18b68 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x564c61b189e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x564c61b18a58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564c61b18c18 <col:20>
| `-OptimizeNoneAttr 0x564c61b18c70 <col:30>
|-CXXMethodDecl 0x564c61b18d18 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x564c61b18e38 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x564c61b18f58 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x564c61b18ff8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x564c61b19020 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x564c61b19148 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x564c61b191e8 <col:20>
| `-OptimizeNoneAttr 0x564c61b19240 <col:30>
|-CXXMethodDecl 0x564c61b192e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x564c61b19388 <col:20>
| `-OptimizeNoneAttr 0x564c61b193e0 <col:30>
|-AccessSpecDecl 0x564c61b19408 <line:344:3, col:9> col:3 public
|-EnumDecl 0x564c61b19430 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x564c61b19530 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x564c61b19580 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b19510 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x564c61b194f0 <col:14> 'int' 48
|-CXXMethodDecl 0x564c61b195e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x564c61b19688 <col:20>
| `-OptimizeNoneAttr 0x564c61b196e0 <col:30>
|-CXXMethodDecl 0x564c61b19758 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x564c61b197f8 <col:20>
| `-OptimizeNoneAttr 0x564c61b19850 <col:30>
|-CXXMethodDecl 0x564c61b19918 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x564c61b19888 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x564c61b19ab8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x564c61b19c58 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x564c61b19b68 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x564c61b19d00 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x564c61b19e00 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564c61b1a1b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b19de0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x564c61b19dc0 <col:9> 'int' 0
| |-EnumConstantDecl 0x564c61b19e90 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564c61b1a1c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b19e70 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x564c61b19e50 <col:14> 'int' 1
| |-EnumConstantDecl 0x564c61b19f20 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564c61b1a1e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b19f00 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x564c61b19ee0 <col:14> 'int' 2
| |-EnumConstantDecl 0x564c61b19fb0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564c61b1a1f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b19f90 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x564c61b19f70 <col:14> 'int' 3
| |-EnumConstantDecl 0x564c61b1a040 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564c61b1a210 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1a020 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x564c61b1a000 <col:13> 'int' 4
| |-EnumConstantDecl 0x564c61b1a0d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564c61b1a228 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1a0b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x564c61b1a090 <col:13> 'int' 5
| `-EnumConstantDecl 0x564c61b1a160 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x564c61b1a240 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b1a140 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x564c61b1a120 <col:14> 'int' 6
|-CXXMethodDecl 0x564c61b1a2a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x564c61b1a348 <col:20>
| `-OptimizeNoneAttr 0x564c61b1a3a0 <col:30>
|-CXXMethodDecl 0x564c61b1a498 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x564c61b1a3d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x564c61b1a540 <col:20>
| `-OptimizeNoneAttr 0x564c61b1a598 <col:30>
|-CXXMethodDecl 0x564c61b1a608 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x564c61b1a730 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x564c61b1a8a8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x564c61b1a7e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x564c61b1a970 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x564c61b1aa38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x564c61b1ab78 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x564c61b1aae8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x564c61b1ac20 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x564c61b1ad20 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564c61b1af20 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1ad00 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x564c61b1ace0 <col:23> 'int' 0
| |-EnumConstantDecl 0x564c61b1adb0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564c61b1af38 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1ad90 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x564c61b1ad70 <col:45> 'int' 4
| |-EnumConstantDecl 0x564c61b1ae40 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564c61b1af50 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1ae20 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x564c61b1ae00 <col:24> 'int' 0
| `-EnumConstantDecl 0x564c61b1aed0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x564c61b1af68 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b1aeb0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x564c61b1ae90 <col:47> 'int' 16
|-CXXMethodDecl 0x564c61b1afc8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x564c61b1b138 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x564c61b1b078 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x564c61b1b1e0 <col:20>
| `-OptimizeNoneAttr 0x564c61b1b238 <col:30>
|-CXXMethodDecl 0x564c61b1b288 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x564c61b2ec10 <col:18, col:36>
|   `-ReturnStmt 0x564c61b2ec00 <col:20, col:33>
|     `-ImplicitCastExpr 0x564c61b2ebe8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x564c61b2ebc8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x564c61b2eb98 <col:27> '<bound member function type>' ->xanno 0x564c61b192e8
|           `-CXXThisExpr 0x564c61b2eb88 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x564c61b1b380 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x564c61b2ed20 <col:30, col:48>
|   `-ReturnStmt 0x564c61b2ed10 <col:32, col:45>
|     `-ImplicitCastExpr 0x564c61b2ecf8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x564c61b2ecd8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x564c61b2eca8 <col:39> '<bound member function type>' ->xanno 0x564c61b19148
|           `-CXXThisExpr 0x564c61b2ec98 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x564c61b1b468 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x564c61b2eeb8 <col:24, col:50>
|   `-ReturnStmt 0x564c61b2eea8 <col:26, col:47>
|     `-UnaryOperator 0x564c61b2ee90 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564c61b2ee70 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x564c61b2ee58 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564c61b2ee08 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x564c61b24128
|         |   `-CXXMemberCallExpr 0x564c61b2ede8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x564c61b2edb8 <col:34> '<bound member function type>' ->xanno 0x564c61b192e8
|         |       `-CXXThisExpr 0x564c61b2eda8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x564c61b2ee38 <col:46> 'int' 0
|-CXXMethodDecl 0x564c61b1b570 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x564c61b2f088 <col:36, col:62>
|   `-ReturnStmt 0x564c61b2f078 <col:38, col:59>
|     `-UnaryOperator 0x564c61b2f060 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564c61b2f040 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x564c61b2f028 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564c61b2efa0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x564c61b24128
|         |   `-CXXMemberCallExpr 0x564c61b2ef80 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564c61b2ef50 <col:46> '<bound member function type>' ->xanno 0x564c61b19148
|         |       `-CXXThisExpr 0x564c61b2ef40 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564c61b2efd0 <col:58> 'int' 0
|-CXXMethodDecl 0x564c61b1b688 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x564c61b2f220 <col:26, col:53>
|   `-ReturnStmt 0x564c61b2f210 <col:28, col:50>
|     `-UnaryOperator 0x564c61b2f1f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564c61b2f1d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x564c61b2f1c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564c61b2f170 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x564c61b24428
|         |   `-CXXMemberCallExpr 0x564c61b2f150 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x564c61b2f120 <col:36> '<bound member function type>' ->xanno 0x564c61b192e8
|         |       `-CXXThisExpr 0x564c61b2f110 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x564c61b2f1a0 <col:49> 'int' 0
|-CXXMethodDecl 0x564c61b1b7a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x564c61b2f3f8 <col:38, col:65>
|   `-ReturnStmt 0x564c61b2f3e8 <col:40, col:62>
|     `-UnaryOperator 0x564c61b2f3d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564c61b2f3b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x564c61b2f398 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564c61b2f308 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x564c61b24428
|         |   `-CXXMemberCallExpr 0x564c61b2f2e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564c61b2f2b8 <col:48> '<bound member function type>' ->xanno 0x564c61b19148
|         |       `-CXXThisExpr 0x564c61b2f2a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564c61b2f338 <col:61> 'int' 0
|-CXXMethodDecl 0x564c61b1b958 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x564c61b1b860 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x564c61b2fac8 <col:34, line:463:5>
|   |-ParenExpr 0x564c61b2f910 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x564c61b2f8e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b2f548 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b2f518 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b2f468 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b2f450 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b2f410 <col:23> 'int' lvalue ParmVar 0x564c61b1b860 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b2f430 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b2f4f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b2f4c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b2f488 <col:33> 'int' lvalue ParmVar 0x564c61b1b860 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x564c61b2f4e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x564c61b2f4a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x564c61b2f5a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b2f588 <col:56> 'int' 0
|   |   `-CallExpr 0x564c61b2f840 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x564c61b2f828 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b2f808 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b2f880 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b2f698 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x564c61b2f898 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b2f6c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b2f8b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b2f700 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x564c61b2f8c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b2f7f0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b2f7d8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b2f798 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x564c61b2fab8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x564c61b2faa0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x564c61b2fa80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x564c61b2fa50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564c61b2fa00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x564c61b24128
|         |   `-CXXMemberCallExpr 0x564c61b2f9e0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564c61b2f9b0 <col:9> '<bound member function type>' ->xanno 0x564c61b19148
|         |       `-CXXThisExpr 0x564c61b2f9a0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x564c61b2fa68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x564c61b2fa30 <col:21> 'int' lvalue ParmVar 0x564c61b1b860 'i' 'int'
|-CXXMethodDecl 0x564c61b1bba8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x564c61b1ba18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x564c61b1ba90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x564c61b30158 <col:40, line:472:5>
|   |-ParenExpr 0x564c61b2ff70 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x564c61b2ff40 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b2fc20 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b2fbf0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b2fb40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b2fb28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b2fae8 <col:23> 'int' lvalue ParmVar 0x564c61b1ba18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b2fb08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b2fbd0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b2fba0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b2fb60 <col:33> 'int' lvalue ParmVar 0x564c61b1ba18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x564c61b2fbb8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x564c61b2fb80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x564c61b2fc80 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b2fc60 <col:56> 'int' 0
|   |   `-CallExpr 0x564c61b2fea0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x564c61b2fe88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b2fe68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b2fee0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b2fcf0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x564c61b2fef8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b2fd20 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b2ff10 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b2fd58 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x564c61b2ff28 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b2fe50 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b2fe38 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b2fdf8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x564c61b30138 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x564c61b300e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x564c61b300b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x564c61b30060 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x564c61b24128
|     | |   `-CXXMemberCallExpr 0x564c61b30040 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x564c61b30010 <col:2> '<bound member function type>' ->xanno 0x564c61b192e8
|     | |       `-CXXThisExpr 0x564c61b30000 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x564c61b300c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x564c61b30090 <col:14> 'int' lvalue ParmVar 0x564c61b1ba18 'i' 'int'
|     `-ImplicitCastExpr 0x564c61b30120 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b30100 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x564c61b1ba90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x564c61b1bd68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x564c61b1bc70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564c61b308d8 <col:36, line:485:5>
|   |-ParenExpr 0x564c61b30640 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b30610 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b302f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b302c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b301d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b301b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b30178 <col:23> 'int' lvalue ParmVar 0x564c61b1bc70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b30198 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b302a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b30288 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b301f0 <col:33> 'int' lvalue ParmVar 0x564c61b1bc70 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b30268 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b30250 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b30210 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b30230 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564c61b30350 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b30330 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b30570 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b30558 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b30538 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b305b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b303c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564c61b305c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b303f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b305e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b30430 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x564c61b305f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b30520 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b30508 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b304c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x564c61b308c8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x564c61b308b0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x564c61b30898 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564c61b30868 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x564c61b30808 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564c61b307d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564c61b30750 <col:61, col:70> 'char const[48]' lvalue ->c 0x564c61b24000
|             |   `-CXXMemberCallExpr 0x564c61b30730 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564c61b30700 <col:61> '<bound member function type>' ->xanno 0x564c61b19148
|             |       `-CXXThisExpr 0x564c61b306f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564c61b307f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564c61b30780 <col:74> 'int' lvalue ParmVar 0x564c61b1bc70 'i' 'int'
|-CXXMethodDecl 0x564c61b1bfb8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x564c61b1be28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564c61b1bea0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x564c61b31028 <col:42, line:500:5>
|   |-ParenExpr 0x564c61b30dc0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b30d90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b30a70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b30a40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b30950 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b30938 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b308f8 <col:23> 'int' lvalue ParmVar 0x564c61b1be28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b30918 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b30a20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b30a08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b30970 <col:33> 'int' lvalue ParmVar 0x564c61b1be28 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b309e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b309d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b30990 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b309b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564c61b30ad0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b30ab0 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b30cf0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b30cd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b30cb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b30d30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b30b40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564c61b30d48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b30b78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b30d60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b30bb0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x564c61b30d78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b30ca0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b30c88 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b30c48 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x564c61b31008 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x564c61b30fb8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564c61b30f88 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x564c61b30f30 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564c61b30f00 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564c61b30eb0 <col:48, col:57> 'char [48]' lvalue ->c 0x564c61b24000
|     |     |   `-CXXMemberCallExpr 0x564c61b30e90 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564c61b30e60 <col:48> '<bound member function type>' ->xanno 0x564c61b192e8
|     |     |       `-CXXThisExpr 0x564c61b30e50 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564c61b30f18 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564c61b30ee0 <col:61> 'int' lvalue ParmVar 0x564c61b1be28 'i' 'int'
|     `-ImplicitCastExpr 0x564c61b30ff0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b30fd0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x564c61b1bea0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x564c61b1c178 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x564c61b1c080 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x564c61b31788 <col:35, line:513:5>
|   |-ParenExpr 0x564c61b31498 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b31468 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b311c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b31190 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b310a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b31088 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b31048 <col:23> 'int' lvalue ParmVar 0x564c61b1c080 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b31068 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b31170 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b31158 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b310c0 <col:33> 'int' lvalue ParmVar 0x564c61b1c080 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b31138 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b31120 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b310e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b31100 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564c61b31220 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b31200 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b313c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b313b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b31390 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b31408 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b31290 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564c61b31420 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b312c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b31438 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b31300 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x564c61b31450 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b31378 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b31360 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b31320 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x564c61b31778 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x564c61b31760 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x564c61b31748 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564c61b31718 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x564c61b31690 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x564c61b31660 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564c61b31610 <col:60, col:69> 'char const[48]' lvalue ->c 0x564c61b24000
|             |   `-CXXMemberCallExpr 0x564c61b315f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564c61b315c0 <col:60> '<bound member function type>' ->xanno 0x564c61b19148
|             |       `-CXXThisExpr 0x564c61b315b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564c61b31678 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564c61b31640 <col:73> 'int' lvalue ParmVar 0x564c61b1c080 'i' 'int'
|-CXXMethodDecl 0x564c61b1c3c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x564c61b1c238 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564c61b1c2b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x564c61b31ea8 <col:41, line:528:5>
|   |-ParenExpr 0x564c61b31c30 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b31c00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b31920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b318f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b31800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b317e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b317a8 <col:23> 'int' lvalue ParmVar 0x564c61b1c238 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b317c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b318d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b318b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b31820 <col:33> 'int' lvalue ParmVar 0x564c61b1c238 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b31898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b31880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b31840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b31860 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x564c61b31980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b31960 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b31b60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b31b48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b31b28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b31ba0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b319f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x564c61b31bb8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b31a28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b31bd0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b31a60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x564c61b31be8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b31b10 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b31af8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b31ab8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x564c61b31e88 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x564c61b31e38 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564c61b31e08 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x564c61b31db0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564c61b31d70 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564c61b31d20 <col:47, col:56> 'char [48]' lvalue ->c 0x564c61b24000
|     |     |   `-CXXMemberCallExpr 0x564c61b31d00 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564c61b31cd0 <col:47> '<bound member function type>' ->xanno 0x564c61b192e8
|     |     |       `-CXXThisExpr 0x564c61b31cc0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564c61b31d88 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564c61b31d50 <col:60> 'int' lvalue ParmVar 0x564c61b1c238 'i' 'int'
|     `-ImplicitCastExpr 0x564c61b31e70 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b31e50 <col:65> 'int16_t':'short' lvalue ParmVar 0x564c61b1c2b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x564c61b1c588 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x564c61b1c490 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564c61b32578 <col:36, line:541:5>
|   |-ParenExpr 0x564c61b32318 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b322e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b32040 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b32010 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b31f20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b31f08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b31ec8 <col:23> 'int' lvalue ParmVar 0x564c61b1c490 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b31ee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b31ff0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b31fd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b31f40 <col:33> 'int' lvalue ParmVar 0x564c61b1c490 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b31fb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b31fa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b31f60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b31f80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564c61b320a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b32080 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b32248 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b32230 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b32210 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b32288 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b32110 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564c61b322a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b32148 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b322b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b32180 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x564c61b322d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b321f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b321e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b321a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x564c61b32568 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x564c61b32550 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x564c61b32538 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564c61b32508 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x564c61b324b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564c61b32480 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564c61b32430 <col:61, col:70> 'char const[48]' lvalue ->c 0x564c61b24000
|             |   `-CXXMemberCallExpr 0x564c61b32410 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564c61b323e0 <col:61> '<bound member function type>' ->xanno 0x564c61b19148
|             |       `-CXXThisExpr 0x564c61b323d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564c61b32498 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564c61b32460 <col:74> 'int' lvalue ParmVar 0x564c61b1c490 'i' 'int'
|-CXXMethodDecl 0x564c61b1c758 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x564c61b1c648 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x564c61b1c6c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564c61b1c808 <col:20>
| `-OptimizeNoneAttr 0x564c61b1c860 <col:30>
|-CXXMethodDecl 0x564c61b1c998 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x564c61b1c8a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x564c61b32c48 <col:35, line:562:5>
|   |-ParenExpr 0x564c61b329e8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b329b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b32710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b326e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b325f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b325d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b32598 <col:23> 'int' lvalue ParmVar 0x564c61b1c8a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b325b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b326c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b326a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b32610 <col:33> 'int' lvalue ParmVar 0x564c61b1c8a0 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b32688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b32670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b32630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b32650 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564c61b32770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b32750 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b32918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b32900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b328e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b32958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b327e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564c61b32970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b32818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b32988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b32850 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x564c61b329a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b328c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b328b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b32870 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x564c61b32c38 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x564c61b32c20 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x564c61b32c08 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564c61b32bd8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x564c61b32b80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x564c61b32b50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564c61b32b00 <col:60, col:69> 'char const[48]' lvalue ->c 0x564c61b24000
|             |   `-CXXMemberCallExpr 0x564c61b32ae0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564c61b32ab0 <col:60> '<bound member function type>' ->xanno 0x564c61b19148
|             |       `-CXXThisExpr 0x564c61b32aa0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564c61b32b68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564c61b32b30 <col:73> 'int' lvalue ParmVar 0x564c61b1c8a0 'i' 'int'
|-CXXMethodDecl 0x564c61b1cba8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x564c61b1ca58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564c61b1cad0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x564c61b33328 <col:41, line:577:5>
|   |-ParenExpr 0x564c61b330b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b33088 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b32de0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b32db0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b32cc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b32ca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b32c68 <col:23> 'int' lvalue ParmVar 0x564c61b1ca58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b32c88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b32d90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b32d78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b32ce0 <col:33> 'int' lvalue ParmVar 0x564c61b1ca58 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b32d58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b32d40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b32d00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b32d20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x564c61b32e40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b32e20 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b32fe8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b32fd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b32fb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b33028 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b32eb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x564c61b33040 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b32ee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b33058 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b32f20 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x564c61b33070 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b32f98 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b32f80 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b32f40 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x564c61b33308 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x564c61b332b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564c61b33288 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x564c61b33228 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564c61b331f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564c61b331a8 <col:47, col:56> 'char [48]' lvalue ->c 0x564c61b24000
|     |     |   `-CXXMemberCallExpr 0x564c61b33188 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564c61b33158 <col:47> '<bound member function type>' ->xanno 0x564c61b192e8
|     |     |       `-CXXThisExpr 0x564c61b33148 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564c61b33210 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564c61b331d8 <col:60> 'int' lvalue ParmVar 0x564c61b1ca58 'i' 'int'
|     `-ImplicitCastExpr 0x564c61b332f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b332d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x564c61b1cad0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x564c61b1cd68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x564c61b1cc70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x564c61b33a58 <col:36, line:591:5>
|   |-ParenExpr 0x564c61b33798 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b33768 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b334c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b33490 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b333a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b33388 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b33348 <col:23> 'int' lvalue ParmVar 0x564c61b1cc70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b33368 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b33470 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b33458 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b333c0 <col:33> 'int' lvalue ParmVar 0x564c61b1cc70 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b33438 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b33420 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b333e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b33400 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x564c61b33520 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b33500 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b336c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b336b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b33690 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b33708 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b33590 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x564c61b33720 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b335c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b33738 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b33600 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x564c61b33750 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b33678 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b33660 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b33620 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x564c61b33a48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x564c61b33a30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x564c61b33a18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564c61b339e8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x564c61b33960 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x564c61b33930 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564c61b338e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x564c61b24000
|             |   `-CXXMemberCallExpr 0x564c61b338c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564c61b33890 <col:61> '<bound member function type>' ->xanno 0x564c61b19148
|             |       `-CXXThisExpr 0x564c61b33880 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564c61b33948 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564c61b33910 <col:74> 'int' lvalue ParmVar 0x564c61b1cc70 'i' 'int'
|-CXXMethodDecl 0x564c61b1cfb8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x564c61b1ce28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564c61b1cea0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x564c61b34138 <col:42, line:606:5>
|   |-ParenExpr 0x564c61b33ec8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x564c61b33e98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b33bf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b33bc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b33ad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b33ab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b33a78 <col:23> 'int' lvalue ParmVar 0x564c61b1ce28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b33a98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b33ba0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x564c61b33b88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b33af0 <col:33> 'int' lvalue ParmVar 0x564c61b1ce28 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b33b68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b33b50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b33b10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x564c61b33b30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x564c61b33c50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b33c30 <col:60> 'int' 0
|   |   `-CallExpr 0x564c61b33df8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x564c61b33de0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b33dc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b33e38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b33cc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x564c61b33e50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b33cf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b33e68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b33d30 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x564c61b33e80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b33da8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b33d90 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b33d50 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x564c61b34118 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x564c61b340c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564c61b34098 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x564c61b34038 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564c61b34008 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564c61b33fb8 <col:48, col:57> 'char [48]' lvalue ->c 0x564c61b24000
|     |     |   `-CXXMemberCallExpr 0x564c61b33f98 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564c61b33f68 <col:48> '<bound member function type>' ->xanno 0x564c61b192e8
|     |     |       `-CXXThisExpr 0x564c61b33f58 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564c61b34020 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564c61b33fe8 <col:61> 'int' lvalue ParmVar 0x564c61b1ce28 'i' 'int'
|     `-ImplicitCastExpr 0x564c61b34100 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x564c61b340e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x564c61b1cea0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x564c61b1d150 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x564c61b1d080 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x564c61b349a8 <col:33, line:620:5>
|   |-ParenExpr 0x564c61b34720 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x564c61b346f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b34340 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b34310 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b341b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b34198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b34158 <col:23> 'int' lvalue ParmVar 0x564c61b1d080 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b34178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b342f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x564c61b342d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b341d0 <col:33> 'int' lvalue ParmVar 0x564c61b1d080 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b342b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b342a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b341f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x564c61b34278 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x564c61b34260 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x564c61b34228 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x564c61b343a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b34380 <col:79> 'int' 0
|   |   `-CallExpr 0x564c61b34650 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x564c61b34638 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b34618 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b34690 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b34488 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x564c61b346a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b344d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b346c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b34508 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x564c61b346d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b34600 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b345e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b345a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x564c61b34998 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x564c61b34980 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x564c61b34968 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x564c61b34938 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x564c61b348b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x564c61b34880 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x564c61b34830 <col:67, col:76> 'char const[48]' lvalue ->c 0x564c61b24000
|             |   `-CXXMemberCallExpr 0x564c61b34810 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x564c61b347e0 <col:67> '<bound member function type>' ->xanno 0x564c61b19148
|             |       `-CXXThisExpr 0x564c61b347d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x564c61b34898 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x564c61b34860 <col:80> 'int' lvalue ParmVar 0x564c61b1d080 'i' 'int'
|-CXXMethodDecl 0x564c61b1d368 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x564c61b1d210 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564c61b1d290 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x564c61b351d0 <col:45, line:635:5>
|   |-ParenExpr 0x564c61b34f18 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x564c61b34ee8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x564c61b34bb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x564c61b34b80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x564c61b34a20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x564c61b34a08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564c61b349c8 <col:23> 'int' lvalue ParmVar 0x564c61b1d210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564c61b349e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x564c61b34b60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x564c61b34b48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x564c61b34a40 <col:33> 'int' lvalue ParmVar 0x564c61b1d210 'i' 'int'
|   |   |     `-BinaryOperator 0x564c61b34b28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x564c61b34b10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x564c61b34a60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x564c61b19530 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x564c61b34ae8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x564c61b34ad0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x564c61b34a98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x564c61b34c10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564c61b34bf0 <col:79> 'int' 0
|   |   `-CallExpr 0x564c61b34e48 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x564c61b34e30 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x564c61b34e10 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564c61685e00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564c61b34e88 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b34c80 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x564c61b34ea0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564c61b34cc8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564c61b34eb8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564c61b34d00 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x564c61b34ed0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x564c61b34df8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x564c61b34de0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564c61b34d98 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x564c61b351b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x564c61b35118 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x564c61b350e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x564c61b35088 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x564c61b35058 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x564c61b35008 <col:54, col:63> 'char [48]' lvalue ->c 0x564c61b24000
|     |     |   `-CXXMemberCallExpr 0x564c61b34fe8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x564c61b34fb8 <col:54> '<bound member function type>' ->xanno 0x564c61b192e8
|     |     |       `-CXXThisExpr 0x564c61b34fa8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x564c61b35070 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x564c61b35038 <col:67> 'int' lvalue ParmVar 0x564c61b1d210 'i' 'int'
|     `-CXXConstCastExpr 0x564c61b35180 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x564c61b35168 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x564c61b35130 <col:91> 'const void *' lvalue ParmVar 0x564c61b1d290 'x' 'const void *'
|-CXXMethodDecl 0x564c61b1d438 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x564c61b35258 <col:34, line:640:5>
|   `-ReturnStmt 0x564c61b35248 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x564c61b35230 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x564c61b35200 <col:16> 'Packet *' lvalue ->_data_packet 0x564c61b24bb8
|         `-CXXThisExpr 0x564c61b351f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x564c61b1d578 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x564c61b1d4e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564c61b2e318 <col:46> 'bool' true
|-CXXMethodDecl 0x564c61b1d6f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x564c61b1d630 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x564c61b1d7a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x564c61b1df50 <line:660:22> "" ""
| |-EnumConstantDecl 0x564c61b1d8a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1dfc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1d880 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x564c61b1d860 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x564c61b12a00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x564c61b1d930 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1dfd8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1d910 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x564c61b1d8f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x564c61b12a90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x564c61b1d9c0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1dff0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1d9a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x564c61b1d980 <col:21> 'int' 0
| |-EnumConstantDecl 0x564c61b1da50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1e008 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1da30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x564c61b1da10 <col:19> 'int' 16
| |-EnumConstantDecl 0x564c61b1dae0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1e020 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1dac0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x564c61b1daa0 <col:21> 'int' 16
| |-EnumConstantDecl 0x564c61b1db70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1e038 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1db50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x564c61b1db30 <col:19> 'int' 32
| |-EnumConstantDecl 0x564c61b1dc00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1e050 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1dbe0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x564c61b1dbc0 <col:19> 'int' EnumConstant 0x564c61b1da50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564c61b1dc90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1e068 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1dc70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x564c61b1dc50 <col:19> 'int' EnumConstant 0x564c61b1db70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564c61b1dd60 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1e080 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1dd40 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x564c61b1dd20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564c61b1dce0 <col:23> 'int' EnumConstant 0x564c61b1dc90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x564c61b1dd00 <col:40> 'int' 2
| |-EnumConstantDecl 0x564c61b1de30 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564c61b1e098 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564c61b1de10 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x564c61b1ddf0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564c61b1ddb0 <col:23> 'int' EnumConstant 0x564c61b1dc90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x564c61b1ddd0 <col:40> 'int' 4
| `-EnumConstantDecl 0x564c61b1df00 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x564c61b1e0b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564c61b1dee0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x564c61b1dec0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x564c61b1de80 <col:23> 'int' EnumConstant 0x564c61b1dc90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x564c61b1dea0 <col:40> 'int' 8
|-CXXMethodDecl 0x564c61b1e0f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x564c61b1e190 <col:68> "" ""
|-CXXMethodDecl 0x564c61b1e228 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x564c61b1e2c8 <col:45> "" ""
|-CXXMethodDecl 0x564c61b1e360 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564c61b1e400 <col:57> "" ""
|-CXXMethodDecl 0x564c61b1e498 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x564c61b1e538 <col:45> "" ""
|-CXXMethodDecl 0x564c61b1e5d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564c61b1e670 <col:57> "" ""
|-CXXMethodDecl 0x564c61b1e700 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x564c61b1e7a0 <col:51> "" ""
|-CXXMethodDecl 0x564c61b1e830 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x564c61b1e8d0 <col:63> "" ""
|-CXXMethodDecl 0x564c61b1e960 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x564c61b1ea00 <col:53> "" ""
|-CXXMethodDecl 0x564c61b1ea90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x564c61b1eb30 <col:65> "" ""
|-CXXMethodDecl 0x564c61b1ec48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x564c61b1ebb8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x564c61b1ecf0 <col:61> "" ""
|-CXXMethodDecl 0x564c61b1ee88 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x564c61b1ed78 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x564c61b1edf0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x564c61b1ef38 <col:67> "" ""
|-CXXMethodDecl 0x564c61b1f050 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x564c61b1efc0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564c61b1f0f8 <col:63> "" ""
|-CXXMethodDecl 0x564c61b1f290 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x564c61b1f180 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564c61b1f1f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x564c61b1f340 <col:69> "" ""
|-CXXMethodDecl 0x564c61b1f458 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x564c61b1f3c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564c61b1f500 <col:63> "" ""
|-CXXMethodDecl 0x564c61b21bd8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564c61b21ac8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564c61b21b40 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61b21c88 <col:69> "" ""
|-CXXMethodDecl 0x564c61b21da0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x564c61b21d10 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x564c61b21e48 <col:62> "" ""
|-CXXMethodDecl 0x564c61b21fe0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x564c61b21ed0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564c61b21f48 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x564c61b22090 <col:68> "" ""
|-CXXMethodDecl 0x564c61b221a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x564c61b22118 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564c61b22250 <col:63> "" ""
|-CXXMethodDecl 0x564c61b223e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x564c61b222d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564c61b22350 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x564c61b22498 <col:69> "" ""
|-CXXMethodDecl 0x564c61b22528 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x564c61b225c8 <col:64> "" ""
|-CXXMethodDecl 0x564c61b22658 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x564c61b226f8 <col:52> "" ""
|-CXXMethodDecl 0x564c61b22788 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x564c61b22828 <col:67> "" ""
|-CXXMethodDecl 0x564c61b228b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x564c61b22958 <col:55> "" ""
|-CXXMethodDecl 0x564c61b22a70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x564c61b229e0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564c61b22b18 <col:58> "" ""
|-CXXMethodDecl 0x564c61b22cb0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x564c61b22ba0 <col:33> col:36 'int'
| |-ParmVarDecl 0x564c61b22c18 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x564c61b22d60 <col:62> "" ""
|-CXXMethodDecl 0x564c61b22e78 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x564c61b22de8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564c61b22f20 <col:58> "" ""
|-CXXMethodDecl 0x564c61b230b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x564c61b22fa8 <col:33> col:36 'int'
| |-ParmVarDecl 0x564c61b23020 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x564c61b23168 <col:62> "" ""
|-CXXMethodDecl 0x564c61b23280 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x564c61b231f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x564c61b23328 <col:60> "" ""
|-CXXMethodDecl 0x564c61b234c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x564c61b233b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x564c61b23428 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x564c61b23570 <col:64> "" ""
|-CXXMethodDecl 0x564c61b23688 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x564c61b235f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x564c61b23730 <col:58> "" ""
|-CXXMethodDecl 0x564c61b238c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x564c61b237b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x564c61b23830 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x564c61b23978 <col:62> "" ""
|-CXXMethodDecl 0x564c61b23a90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x564c61b23a00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x564c61b23b38 <col:59> "" ""
|-CXXMethodDecl 0x564c61b23cd0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564c61b23bc0 <col:33> col:36 'int'
| |-ParmVarDecl 0x564c61b23c38 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564c61b23d80 <col:63> "" ""
|-AccessSpecDecl 0x564c61b23df0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x564c61b23e18 prev 0x564c61b19020 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564c61b23f10 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x564c61b24000 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x564c61b24128 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x564c61b242a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x564c61b24428 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x564c61b245a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x564c61b353d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564c61b35c48 <col:11>
| |-CXXDestructorDecl 0x564c61b354b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x564c61b355e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564c61b355e8
| | `-ParmVarDecl 0x564c61b356f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x564c61b35798 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564c61b35798
| | `-ParmVarDecl 0x564c61b358a8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x564c61b38668 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564c61b38778 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x564c61b389f8 <col:11>
| |   `-ReturnStmt 0x564c61b389e8 <col:11>
| |     `-UnaryOperator 0x564c61b389d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564c61b389c0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x564c61b387e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564c61b387e8
|   `-ParmVarDecl 0x564c61b388f8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x564c61b24610 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564c61b24728 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x564c61b247c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x564c61b24830 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x564c61b24898 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x564c61b24900 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x564c61b24960 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x564c61b24a20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x564c61b24a80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x564c61b24ae0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x564c61b352e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x564c61b247c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x564c61b35c58 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x564c61b35cb0 <col:12>
| |-CXXConstructorDecl 0x564c61b35918 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x564c61b35918
| | `-ParmVarDecl 0x564c61b35a28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x564c61b35ac8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564c61b35ac8
| | `-ParmVarDecl 0x564c61b35bd8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x564c61b37d50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x564c61b24b58 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x564c61b24bb8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x564c61b24c20 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x564c61b24c88 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x564c61b24cf0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x564c61b24d58 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x564c61b24db8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x564c61b24e18 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x564c61b24e80 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x564c61b24f08 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x564c61b24b58 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x564c61b35280 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x564c61b24db8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x564c61b35cc0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x564c61b35d20 <col:21, line:755:5>
|-CXXConstructorDecl 0x564c61b250a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x564c61b24fe8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x564c61b251a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x564c61b25388 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x564c61b25290 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x564c61b25658 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x564c61b25440 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564c61b254b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564c61b25530 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b25878 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x564c61b25728 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x564c61b257a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x564c61b2de58 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x564c61b25938 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x564c61b259b0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x564c61b25a28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x564c61b2dfb0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564c61b2df20 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b2e0f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564c61b2e068 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x564c61b2e1f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b84a20 prev 0x564c61b12470 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x564c61b84b18 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x564c61b84bb8 <line:25:5, col:14> col:14 referenced th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x564c61b84c18 <line:26:5, col:14> col:14 referenced th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x564c61b84ca0 <line:27:5, col:15> col:15 referenced th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x564c61b84d00 <line:28:5, col:15> col:15 referenced th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x564c61b84da8 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x564c61b84d88 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x564c61b84d50 <col:26> 'int' 4
|-FieldDecl 0x564c61b84e50 <line:31:5, col:23> col:14 th_off 'unsigned int'
| `-ConstantExpr 0x564c61b84e30 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x564c61b84df8 <col:23> 'int' 4
|-FieldDecl 0x564c61b84ed0 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x564c61b84f30 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x564c61b84f90 <line:49:5, col:14> col:14 th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x564c61b84ff0 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c61b35dc0 prev 0x564c61b12680 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x564c61b35ef8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x564c61b35f88 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x564c61b36030 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x564c61b360d0 <col:20>
| `-OptimizeNoneAttr 0x564c61b36128 <col:30>
|-CXXMethodDecl 0x564c61b36178 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x564c61b36218 <col:20>
| `-OptimizeNoneAttr 0x564c61b36270 <col:30>
|-CXXMethodDecl 0x564c61b362c0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x564c61b36388 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x564c61b36450 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x564c61b36568 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x564c61b36630 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x564c61b366d0 <col:20>
| `-OptimizeNoneAttr 0x564c61b36728 <col:30>
|-CXXMethodDecl 0x564c61b36798 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x564c61b36838 <col:20>
| `-OptimizeNoneAttr 0x564c61b36890 <col:30>
|-CXXMethodDecl 0x564c61b36938 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x564c61b369d8 <col:20>
| `-OptimizeNoneAttr 0x564c61b36a30 <col:30>
|-CXXMethodDecl 0x564c61b36a80 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x564c61b36b98 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x564c61b36cb8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x564c61b36dd8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x564c61b36ea0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x564c61b36f40 <col:62> "" ""
|-AccessSpecDecl 0x564c61b36fb0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x564c61b37010 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x564c61b37c08 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x564c61b37e30 <col:29, col:31>
|-CXXMethodDecl 0x564c61b370d8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x564c61b37218 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x564c61b37188 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x564c61b37310 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x564c61b37e40 <col:23, col:25>
|-CXXMethodDecl 0x564c61b374c8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x564c61b37400 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x564c61b37798 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x564c61b37580 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564c61b375f8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564c61b37670 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564c61b37928 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x564c61b37860 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x564c61b37a20 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x564c61b37a88 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x564c61b37a88
  `-ParmVarDecl 0x564c61b37b98 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564c6173efc8 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564c6173f0e8 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x564c61950f60 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564c61951040 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x564c61951040
| `-ParmVarDecl 0x564c61951128 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x564c619511c8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x564c619511c8
| `-ParmVarDecl 0x564c619512d8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x564c61aedfc0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
