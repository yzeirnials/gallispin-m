
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45dab8d98 prev 0x55e45dab0538 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45dab8e90 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55e45dab8f20 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55e45dab8f98 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55e45dab9058 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55e45dab9120 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55e45dab9298 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55e45dab91d0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55e45dab9340 <col:24>
| `-OptimizeNoneAttr 0x55e45dab9398 <col:34>
|-CXXMethodDecl 0x55e45dab93e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55e45dab9698 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55e45dab9490 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e45dab9508 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55e45dab9588 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55e45dab9750 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55e45dab9788 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55e45dab97f0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55e45dab9878 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55e45dab9b98 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55e45dab9930 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e45dab99a8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55e45dab9a20 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55e45dab9aa0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55e45dab9cb0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55e45dac1628 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e45dac1628
| `-ParmVarDecl 0x55e45dac1738 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55e45dac17d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e45dac17d8
| `-ParmVarDecl 0x55e45dac18e8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55e45db94960 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45daabdb0 prev 0x55e45daabb30 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e45daabea8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55e45daabf38 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55e45daabf98 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55e45daac088 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55e45daac188 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55e45daac358 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55e45daac208 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55e45daac280 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55e45daac4e8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55e45daac420 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55e45daac590 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55e45daac6c8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55e45daac600 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55e45daac868 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55e45daac7a8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55e45daaca08 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55e45daac948 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55e45daacab0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55e45daacbb0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55e45daacc90 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45daacb90 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55e45daacb70 <col:26> 'int' 1
| `-EnumConstantDecl 0x55e45daacc40 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55e45daacca8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45daacc20 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55e45daacc00 <col:44> 'int' 2
|-CXXMethodDecl 0x55e45daacdf0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55e45daaccd8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55e45daacd58 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55e45daacf48 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55e45daaceb8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55e45daad188 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55e45daad008 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55e45daad080 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55e45daad238 <col:20>
| `-OptimizeNoneAttr 0x55e45daad290 <col:30>
|-CXXMethodDecl 0x55e45daad398 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55e45daad2d0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55e45daad440 <col:20>
| `-OptimizeNoneAttr 0x55e45daad498 <col:30>
|-CXXMethodDecl 0x55e45daad4e8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55e45daad5b0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55e45daad6c8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55e45daad750 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55e45daad7d8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55e45daad860 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55e45daad8e8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55e45daad978 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55e45daada38 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55e45daadac0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55e45daadb48 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55e45daadbd0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55e45daadc58 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55e45daadce0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55e45daadd70 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55e45daade30 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55e45daadec0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55e45daae010 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55e45daadf78 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55e45daae1a0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55e45daae0d0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55e45daae450 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55e45daae258 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55e45daae2d8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55e45daae358 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55e45daae508 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55e45daae610 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e45daae8a0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45daae5f0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55e45daae5d0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55e45daae6a0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e45daae8b8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45daae680 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55e45daae660 <col:32> 'int' 20
| |-EnumConstantDecl 0x55e45daae730 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e45daae8d0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45daae710 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55e45daae6f0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55e45daae7c0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e45daae8e8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45daae7a0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55e45daae780 <col:35> 'int' 100
| `-EnumConstantDecl 0x55e45daae850 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55e45daae900 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45daae830 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55e45daae810 <col:32> 'int' 2000
|-CXXMethodDecl 0x55e45daae940 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55e45daaed80 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e45daaebf0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e45daaec68 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e45daaee50 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55e45daaefd0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55e45daaef00 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e45daaf1d8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e45daaf088 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55e45daaf100 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e45daaf2d8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55e45daaf378 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55e45daaf440 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e45daaf4d0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55e45daaf700 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45daaf4b0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55e45daaf490 <col:36> 'int' EnumConstant 0x55e45daaf440 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e45daaf520 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e45daaf570 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e45daaf5c0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e45daaf610 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e45daaf660 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55e45daaf6b0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55e45daaf7e8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55e45daaf728 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55e45daaf8b0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55e45daaf970 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55e45daafa30 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55e45daafaf0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55e45daafc08 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55e45daafcd0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55e45daafe50 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55e45daafd80 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55e45daaff78 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55e45dab0178 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55e45dab0028 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55e45dab00a8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55e45dabdac8 <col:54, line:127:5>
|   |-ParenExpr 0x55e45dabd978 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55e45dabd948 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55e45dabd638 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e45dabd610 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55e45dabd5f8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55e45dabd5e0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55e45dabd5b0 <col:31> 'Router *' lvalue ->_router 0x55e45dabb490
|   |   |         `-CXXThisExpr 0x55e45dabd5a0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e45dabd698 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45dabd678 <col:48> 'int' 0
|   |   `-CallExpr 0x55e45dabd8a8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55e45dabd890 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45dabd870 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45dabd8e8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45dabd708 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55e45dabd900 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45dabd728 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55e45dabd918 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45dabd760 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55e45dabd930 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45dabd858 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45dabd840 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45dabd7f8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55e45dabda10 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55e45dabd9a8 <col:9> 'Router *' lvalue ->_router 0x55e45dabb490
|   | | `-CXXThisExpr 0x55e45dabd998 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55e45dabd9f8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e45dabd9d8 <col:19> 'Router *' lvalue ParmVar 0x55e45dab0028 'r' 'Router *'
|   `-BinaryOperator 0x55e45dabdaa8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55e45dabda40 <col:9> 'int' lvalue ->_eindex 0x55e45dabb4f8
|     | `-CXXThisExpr 0x55e45dabda30 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55e45dabda90 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e45dabda70 <col:19> 'int' lvalue ParmVar 0x55e45dab00a8 'eindex' 'int'
|-CXXMethodDecl 0x55e45dab0300 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55e45dab0238 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55e45dab03d0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55e45dab0498 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55e45dab0538 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55e45dab0788 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55e45dab0600 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55e45dab0680 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55e45dab0838 <col:20>
| `-OptimizeNoneAttr 0x55e45dab0890 <col:30>
|-CXXMethodDecl 0x55e45dab0998 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e45dab08d0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55e45dab0a40 <col:20>
| `-OptimizeNoneAttr 0x55e45dab0a98 <col:30>
|-CXXMethodDecl 0x55e45dab0b68 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e45dab0ad8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55e45dab0c10 <col:20>
| `-OptimizeNoneAttr 0x55e45dab0c68 <col:30>
|-CXXMethodDecl 0x55e45dab0df8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55e45dab0ca0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55e45dab0d20 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55e45dab0f88 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e45dab0ec0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e45dab10d8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e45dab1048 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e45dab1228 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e45dab1198 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e45dab1378 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e45dab12e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e45dab1638 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55e45dab1430 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55e45dab14b0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55e45dab1558 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55e45dab1710 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55e45dab17d0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55e45dab1aa0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e45dab1950 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55e45dab19c8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dab1bc8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55e45dab1da0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55e45dab1c80 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55e45dab1d00 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55e45dab1f88 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55e45dab1e68 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55e45dab1ee8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55e45dab22f8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e45dab2048 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e45dab20c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e45dab2140 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e45dabd0b0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e45dabd090 <col:106> 'int' 0
| `-ParmVarDecl 0x55e45dab21b8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e45dabd0e8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e45dabd0c8 <col:126> 'int' 0
|-CXXMethodDecl 0x55e45dab2698 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e45dab23c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e45dab2460 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e45dab24e0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55e45dab2558 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e45dabd120 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e45dabd100 <col:114> 'int' 0
|-CXXMethodDecl 0x55e45dab2a28 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e45dab2770 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55e45dab27e8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e45dab2868 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55e45dabd138 <col:96> 'int' 0
| `-ParmVarDecl 0x55e45dab28e0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e45dabd178 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e45dabd158 <col:116> 'int' 0
|-CXXMethodDecl 0x55e45dab2da8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e45dab2af8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e45dab2b70 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45dab2bf0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e45dabd1b0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e45dabd190 <col:109> 'int' 0
| `-ParmVarDecl 0x55e45dab2c68 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e45dabd1e8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e45dabd1c8 <col:129> 'int' 0
|-CXXMethodDecl 0x55e45dab3128 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e45dab2e78 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e45dab2ef0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45dab2f70 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55e45dab2fe8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e45dabd220 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e45dabd200 <col:117> 'int' 0
|-CXXMethodDecl 0x55e45dab34b8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e45dab3200 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab3278 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45dab32f8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55e45dabd238 <col:99> 'int' 0
| `-ParmVarDecl 0x55e45dab3370 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e45dabd278 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e45dabd258 <col:119> 'int' 0
|-CXXMethodDecl 0x55e45dab38d8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55e45dab3588 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e45dab3608 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e45dab3680 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45dab3700 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e45dabd2b0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e45dabd290 <col:108> 'int' 0
| `-ParmVarDecl 0x55e45dab3780 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55e45dabd2e8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55e45dabd2c8 <col:141> 'int' 0
|-CXXMethodDecl 0x55e45dab3cf8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e45dab39b0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e45dab3a30 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e45dab3aa8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45dab3b28 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55e45dab3ba8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e45dabd300 <col:121> 'int' 0
|-CXXMethodDecl 0x55e45dab4128 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e45dab3dd8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55e45dab3e58 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55e45dab3ed0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45dab3f50 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55e45dabd320 <col:98> 'int' 0
| `-ParmVarDecl 0x55e45dab3fd0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e45dabd340 <col:123> 'int' 0
|-CXXMethodDecl 0x55e45dab43f0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55e45dab4200 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e45dab4280 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55e45dab4300 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55e45dabd360 <col:80> 'int' 0
|-EnumDecl 0x55e45dab44a8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55e45dab45b0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e45dab4840 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dab4590 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55e45dab4570 <col:42> 'int' 1
| |-EnumConstantDecl 0x55e45dab4640 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e45dab4858 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dab4620 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55e45dab4600 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e45dab46d0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e45dab4870 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dab46b0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55e45dab4690 <col:44> 'int' 4
| |-EnumConstantDecl 0x55e45dab4760 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e45dab4888 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dab4740 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55e45dab4720 <col:36> 'int' 7
| `-EnumConstantDecl 0x55e45dab47f0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55e45dab48a0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45dab47d0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55e45dab47b0 <col:34> 'int' 6
|-CXXMethodDecl 0x55e45dab4b58 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55e45dab48c8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55e45dab4968 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e45dab49e8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55e45dab4a60 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55e45dabd418 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55e45dabd400 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55e45dabd3e8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55e45dabd3c8 <col:98, col:105> 'String' (CXXTemporary 0x55e45dabd3c8)
|           `-CXXTemporaryObjectExpr 0x55e45dabd390 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55e45dab4df8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55e45dab4c28 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e45dab4ca0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e45dab4d18 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e45dabd4c8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e45dabd4b0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e45dabd498 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e45dabd478 <col:94, col:101> 'String' (CXXTemporary 0x55e45dabd478)
| |         `-CXXTemporaryObjectExpr 0x55e45dabd440 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55e45dabdcb0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55e45dabdc28 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55e45dabdbf8 <col:9> '<bound member function type>' ->add_task_handlers 0x55e45dab4b58
|     | `-CXXThisExpr 0x55e45dabdbe8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e45dabdc68 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e45dabdb68 <col:27> 'Task *' lvalue ParmVar 0x55e45dab4c28 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e45dabdc80 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e45dabdb88 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55e45dab4ca0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55e45dabdc98 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e45dabdba8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e45dab47f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e45dabdbc8 <col:62> 'const String' lvalue ParmVar 0x55e45dab4d18 'prefix' 'const String &'
|-CXXMethodDecl 0x55e45dab5008 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55e45dab4ec0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e45dab4f38 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e45dabd578 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e45dabd560 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e45dabd548 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e45dabd528 <col:70, col:77> 'String' (CXXTemporary 0x55e45dabd528)
| |         `-CXXTemporaryObjectExpr 0x55e45dabd4f0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55e45dabde88 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55e45dabde00 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55e45dabddd0 <col:9> '<bound member function type>' ->add_task_handlers 0x55e45dab4b58
|     | `-CXXThisExpr 0x55e45dabddc0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e45dabde40 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e45dabdd40 <col:27> 'Task *' lvalue ParmVar 0x55e45dab4ec0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e45dabde58 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55e45dabdd60 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55e45dabde70 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e45dabdd80 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e45dab47f0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e45dabdda0 <col:57> 'const String' lvalue ParmVar 0x55e45dab4f38 'prefix' 'const String &'
|-CXXMethodDecl 0x55e45dab52e8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55e45dab50d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab5150 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab51c8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55e45dab5598 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55e45dab53b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab5438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab54b8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55e45dab5888 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e45dab5668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab56e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab5760 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55e45dab5b38 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55e45dab5958 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab59d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab5a58 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55e45dab5de8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55e45dab5c08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab5c88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab5d08 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55e45dab6098 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55e45dab5eb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab5f38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab5fb0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55e45dab6348 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55e45dab6168 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab61e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab6268 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55e45dab6658 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55e45dab6470 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab64f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab6570 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55e45dab6938 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55e45dab6728 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab67a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab6850 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55e45dab6c18 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55e45dab6a08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab6a88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab6b30 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55e45dab6e80 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e45dab6ce8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e45dab6d68 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e45dab6de0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55e45dab7128 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55e45dab6f50 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e45dab6fd0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e45dab7048 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55e45dab73d8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55e45dab71f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab7278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab72f8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55e45dab7688 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55e45dab74a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab7528 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab75a0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55e45dab7938 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55e45dab7758 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab77d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab7850 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55e45dab7c08 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55e45dab7a08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab7a88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e45dab7b28 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55e45dab7f38 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55e45dab7cd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e45dab7d58 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55e45dab7dd0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55e45dab7e48 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e45dabd590 <col:93> 'bool' false
|-CXXMethodDecl 0x55e45dab8120 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e45dab8008 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55e45dab8088 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55e45dab82f8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e45dab81e0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55e45dab8260 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55e45dab85d8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e45dab83b8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55e45dab8430 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55e45dab84b0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55e45dab8528 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dab88c8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e45dab86a8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55e45dab8720 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55e45dab87a0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55e45dab8818 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dab8b00 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55e45dab89a0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55e45dab8a20 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55e45dab8ce8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55e45dab8bc8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55e45dab8c48 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55e45dab8d98 prev 0x55e45dab0538 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e45dab8e90 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55e45dab8f20 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55e45dab8f98 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55e45dab9058 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55e45dab9120 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55e45dab9298 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55e45dab91d0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55e45dab9340 <col:24>
| | `-OptimizeNoneAttr 0x55e45dab9398 <col:34>
| |-CXXMethodDecl 0x55e45dab93e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55e45dab9698 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55e45dab9490 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e45dab9508 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55e45dab9588 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55e45dab9750 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55e45dab9788 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55e45dab97f0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55e45dab9878 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55e45dab9b98 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55e45dab9930 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e45dab99a8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55e45dab9a20 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55e45dab9aa0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55e45dab9cb0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55e45dac1628 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e45dac1628
| | `-ParmVarDecl 0x55e45dac1738 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55e45dac17d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e45dac17d8
| | `-ParmVarDecl 0x55e45dac18e8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55e45db94960 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e45dab9d28 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55e45dab9dc8 <col:38> "" ""
|-CXXMethodDecl 0x55e45dab9e58 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55e45dab9ef8 <col:44> "" ""
|-AccessSpecDecl 0x55e45dab9f68 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55e45dab9f90 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55e45daba090 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55e45daba0e0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45daba070 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55e45daba050 <col:27> 'int' 4
|-FieldDecl 0x55e45daba198 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55e45daba348 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55e45daba400 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55e45dabb490 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55e45dabb4f8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55e45dabb648 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55e45dabb588 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55e45dabb7f8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55e45dabb708 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55e45dabb9d8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55e45dabb8b8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55e45dabb938 <col:25> col:28 'int'
|-CXXMethodDecl 0x55e45dabbc80 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55e45dabbaa0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55e45dabbb20 <col:28> col:31 'int'
| `-ParmVarDecl 0x55e45dabbb98 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55e45dabbd38 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55e45dabbe00 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55e45dabbe50 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55e45dabbea0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55e45dabc080 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55e45dabbf30 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55e45dabbfa8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dabc328 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55e45dabc148 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55e45dabc1c8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55e45dabc240 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dabc548 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55e45dabc3f8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55e45dabc478 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55e45dabc880 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55e45dabc608 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55e45dabc688 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55e45dabc700 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55e45dabc780 <col:57> col:60 'int'
|-CXXMethodDecl 0x55e45dabca68 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e45dabc950 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55e45dabc9d0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55e45dabcbb8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55e45dabcb28 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55e45dabcf38 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55e45dabcc78 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55e45dabccf8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55e45dabcd70 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55e45dabcdf0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55e45dabd050 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ForceTCP
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _count
       112 |   uint16_t _dport
       116 |   int _flags
       120 |   _Bool _random
           | [sizeof=128, dsize=121, align=8,
           |  nvsize=121, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45dac4798 <../elements/local/forcetcp.hh:21:1, line:37:1> line:21:7 class ForceTCP definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55e45dac48f8 <col:1, col:7> col:7 implicit referenced class ForceTCP
|-AccessSpecDecl 0x55e45dac4988 <line:22:1, col:7> col:1 public
|-CXXConstructorDecl 0x55e45dac4a10 <line:23:3, col:12> col:3 ForceTCP 'void ()'
|-CXXDestructorDecl 0x55e45dac4b00 <line:24:3, col:13> col:3 ~ForceTCP 'void ()' noexcept-unevaluated 0x55e45dac4b00
| `-Overrides: [ 0x55e45daac088 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55e45dac4c30 <line:26:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55e45daad4e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55e45dac5720 <col:34, col:55>
|   `-ReturnStmt 0x55e45dac5710 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e45dac56f8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e45dac56d8 <col:43> 'const char [9]' lvalue "ForceTCP"
|-CXXMethodDecl 0x55e45dac4cf8 <line:27:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55e45daad5b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55e45dac5780 <col:34, col:54>
|   `-ReturnStmt 0x55e45dac5770 <col:36, col:43>
|     `-ImplicitCastExpr 0x55e45dac5758 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e45dac5738 <col:43> 'const char []' lvalue Var 0x55e45daad860 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55e45dac4fd0 <line:28:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55e45daaed80 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55e45dac4e80 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e45dac4ef8 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dac5120 <line:30:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55e45daac6c8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55e45dac5090 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55e45dac51c8 <line:32:1, col:8> col:1 private
|-FieldDecl 0x55e45dac5208 <line:33:3, col:7> col:7 referenced _count 'int'
|-FieldDecl 0x55e45dac5268 <line:34:3, col:12> col:12 _dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45dac52d0 <line:35:3, col:7> col:7 referenced _flags 'int'
|-FieldDecl 0x55e45dac5330 <line:36:3, col:8> col:8 referenced _random 'bool'
|-CXXConstructorDecl 0x55e45dac53a8 <line:21:7> col:7 implicit ForceTCP 'void (const ForceTCP &)' inline default_delete noexcept-unevaluated 0x55e45dac53a8
| `-ParmVarDecl 0x55e45dac54b8 <col:7> col:7 'const ForceTCP &'
`-CXXMethodDecl 0x55e45dac5558 <col:7> col:7 implicit operator= 'ForceTCP &(const ForceTCP &)' inline default_delete noexcept-unevaluated 0x55e45dac5558
  `-ParmVarDecl 0x55e45dac5668 <col:7> col:7 'const ForceTCP &'

Layout: <CGRecordLayout
  LLVMType:%class.ForceTCP = type <{ %class.Element.base, i32, i16, [2 x i8], i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ForceTCP.base = type <{ %class.Element.base, i32, i16, [2 x i8], i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45d87ec40 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e45d87ed58 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55e45d87edf8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55e45d87ee58 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55e45d87eeb8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55e45d87ef68 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45d87f270 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45d87f388 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55e45d87f430 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55e45d87f498 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55e45d87f528 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55e45d8855c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e45d8859f8 <col:12>
|-CXXConstructorDecl 0x55e45d8856c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45d8857d8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e45d87f430 'data' 'const char *'
| | `-ImplicitCastExpr 0x55e45d887f80 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55e45d887f50 <col:12> 'const char *const' lvalue .data 0x55e45d87f430
| |     `-DeclRefExpr 0x55e45d887f30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d8857d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e45d87f498 'length' 'int'
| | `-ImplicitCastExpr 0x55e45d888010 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e45d887fe0 <col:12> 'const int' lvalue .length 0x55e45d87f498
| |     `-DeclRefExpr 0x55e45d887fc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d8857d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e45d87f528 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55e45d8880a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55e45d888070 <col:12> 'String::memo_t *const' lvalue .memo 0x55e45d87f528
| |     `-DeclRefExpr 0x55e45d888050 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d8857d8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55e45d8880f8 <col:12>
|-CXXConstructorDecl 0x55e45d885878 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e45d885878
| `-ParmVarDecl 0x55e45d885988 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55e45d88aee0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e45d8968f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45d896a08 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55e45d896f20 <col:12>
|   |-BinaryOperator 0x55e45d896d38 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e45d896cf0 <col:12> 'const char *' lvalue ->data 0x55e45d87f430
|   | | `-CXXThisExpr 0x55e45d896ce0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e45d896d20 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55e45d896cb0 <col:12> 'const char *const' lvalue .data 0x55e45d87f430
|   |     `-DeclRefExpr 0x55e45d896c90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d896a08 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e45d896e00 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55e45d896db8 <col:12> 'int' lvalue ->length 0x55e45d87f498
|   | | `-CXXThisExpr 0x55e45d896da8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e45d896de8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55e45d896d78 <col:12> 'const int' lvalue .length 0x55e45d87f498
|   |     `-DeclRefExpr 0x55e45d896d58 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d896a08 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e45d896ec8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55e45d896e80 <col:12> 'String::memo_t *' lvalue ->memo 0x55e45d87f528
|   | | `-CXXThisExpr 0x55e45d896e70 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e45d896eb0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55e45d896e40 <col:12> 'String::memo_t *const' lvalue .memo 0x55e45d87f528
|   |     `-DeclRefExpr 0x55e45d896e20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d896a08 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55e45d896f10 <col:12>
|     `-UnaryOperator 0x55e45d896ef8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45d896ee8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55e45d896a78 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e45d896a78
  `-ParmVarDecl 0x55e45d896b88 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45d8761b0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e45d8762c8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55e45d876358 <col:16, col:22> col:16 public
|-TypedefDecl 0x55e45d876398 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55e45d54afd0 'const char *'
|   `-QualType 0x55e45d54a521 'const char' const
|     `-BuiltinType 0x55e45d54a520 'char'
|-TypedefDecl 0x55e45d876420 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55e45d8763f0 'String::const_iterator' sugar
|   |-Typedef 0x55e45d876398 'const_iterator'
|   `-PointerType 0x55e45d54afd0 'const char *'
|     `-QualType 0x55e45d54a521 'const char' const
|       `-BuiltinType 0x55e45d54a520 'char'
|-TypedefDecl 0x55e45d876590 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55e45d876500 'int (String::*)() const'
|   |-RecordType 0x55e45d876240 'String'
|   | `-CXXRecord 0x55e45d8761b0 'String'
|   `-ParenType 0x55e45d8764a0 'int () const' sugar
|     `-FunctionProtoType 0x55e45d84b040 'int () const' const cdecl
|       `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45d8765f8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55e45d69fa00 'int64_t' sugar
|   |-Typedef 0x55e45d5b3390 'int64_t'
|   `-TypedefType 0x55e45d58c630 '__int64_t' sugar
|     |-Typedef 0x55e45d58c208 '__int64_t'
|     `-BuiltinType 0x55e45d54a5a0 'long'
|-TypedefDecl 0x55e45d876660 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55e45d69f920 'uint64_t' sugar
|   |-Typedef 0x55e45d5b3530 'uint64_t'
|   `-TypedefType 0x55e45d58c6c0 '__uint64_t' sugar
|     |-Typedef 0x55e45d58c278 '__uint64_t'
|     `-BuiltinType 0x55e45d54a640 'unsigned long'
|-TypedefDecl 0x55e45d8766f0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55e45d8766c0 'String::intmax_t' sugar
|   |-Typedef 0x55e45d8765f8 'intmax_t'
|   `-TypedefType 0x55e45d69fa00 'int64_t' sugar
|     |-Typedef 0x55e45d5b3390 'int64_t'
|     `-TypedefType 0x55e45d58c630 '__int64_t' sugar
|       |-Typedef 0x55e45d58c208 '__int64_t'
|       `-BuiltinType 0x55e45d54a5a0 'long'
|-TypedefDecl 0x55e45d876780 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55e45d876750 'String::uintmax_t' sugar
|   |-Typedef 0x55e45d876660 'uintmax_t'
|   `-TypedefType 0x55e45d69f920 'uint64_t' sugar
|     |-Typedef 0x55e45d5b3530 'uint64_t'
|     `-TypedefType 0x55e45d58c6c0 '__uint64_t' sugar
|       |-Typedef 0x55e45d58c278 '__uint64_t'
|       `-BuiltinType 0x55e45d54a640 'unsigned long'
|-CXXConstructorDecl 0x55e45d876840 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55e45d8769e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55e45d876928 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55e45d876b98 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55e45d876ad8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55e45d876cf0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55e45d876c60 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55e45d876f08 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e45d876db8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55e45d876e38 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55e45d877128 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55e45d876fd8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55e45d877058 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55e45d877348 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e45d8771f8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55e45d877278 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55e45d877568 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55e45d877418 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55e45d877498 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55e45d8776f8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55e45d877630 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55e45d877878 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55e45d8777b8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55e45d877a08 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55e45d877940 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55e45d877b60 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55e45d877ad0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55e45d877cb8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55e45d877c28 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55e45d877e10 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55e45d877d80 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55e45d877f98 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55e45d877ed8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55e45d878128 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55e45d878060 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55e45d8782b8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55e45d8781f0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55e45d878448 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55e45d878380 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55e45d878540 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55e45d878668 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55e45d8787e8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55e45d878720 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55e45d878938 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55e45d8788a8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55e45d8789f0 <col:63> "" ""
|-CXXMethodDecl 0x55e45d878b38 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55e45d878a78 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55e45d878d48 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55e45d878bf8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55e45d878c78 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55e45d878f68 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55e45d878e10 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55e45d878e90 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55e45d879248 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55e45d879028 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55e45d8790a8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55e45d885090 <col:55> 'int' 10
| `-ParmVarDecl 0x55e45d879120 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e45d8850b0 <col:76> 'bool' true
|-CXXMethodDecl 0x55e45d879528 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55e45d879310 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55e45d879390 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55e45d8850c0 <col:56> 'int' 10
| `-ParmVarDecl 0x55e45d879408 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e45d8850e0 <col:77> 'bool' true
|-CXXMethodDecl 0x55e45d879630 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55e45d8796f8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55e45d8797c0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55e45d879860 <col:20>
| `-OptimizeNoneAttr 0x55e45d8798b8 <col:30>
|-CXXConversionDecl 0x55e45d8799a8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55e45d879a78 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55e45d879b38 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55e45d879c28 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e45d879ce8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e45d879e68 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55e45d879da0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55e45d879fb8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55e45d879f28 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55e45d87a0a8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55e45d87a168 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55e45d87a3b8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55e45d87a220 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55e45d87a2a0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55e45d87a618 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55e45d87a480 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55e45d87a500 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55e45d87a6e8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45d87a8f8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55e45d87a7a0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55e45d87a820 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55e45d87ab18 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55e45d87a9c0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55e45d87aa40 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55e45d87aca8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55e45d87abe0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55e45d87ad98 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55e45d87af08 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e45d87ae48 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e45d87b118 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55e45d87afc8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e45d87b048 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e45d87b330 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55e45d87b1d8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55e45d87b250 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55e45d87b4c0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55e45d87b3f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e45d87b6e0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55e45d87b580 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55e45d87b600 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e45d87b830 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e45d87b7a0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55e45d87ba08 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e45d87b8f0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e45d87b970 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55e45d87bb58 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55e45d87bac8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55e45d87bd70 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55e45d87bc10 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55e45d87bc90 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55e45d8850f0 <col:39> 'int' 0
|-CXXMethodDecl 0x55e45d87bf90 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55e45d87be30 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55e45d87beb0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55e45d885110 <col:48> 'int' 0
|-CXXMethodDecl 0x55e45d87c170 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55e45d87c050 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55e45d87c0d0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55e45d885130 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55e45d87c240 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55e45d87c300 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55e45d87c3c0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55e45d87c480 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55e45d87c540 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55e45d87c6e8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e45d87c5f0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55e45d87c868 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55e45d87c7a0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55e45d87ca40 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e45d87c928 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55e45d87cbb8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55e45d87caf8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55e45d87cd00 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55e45d87cc70 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e45d87ce50 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55e45d87cdc0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55e45d87d028 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e45d87cf10 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e45d87cf90 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e45d87d208 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e45d87d0f0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55e45d87d170 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55e45d87d358 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55e45d87d2c8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55e45d87d568 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55e45d87d418 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55e45d87d498 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55e45d87d6c8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55e45d87d630 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e45d87d820 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55e45d87d788 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55e45d87d8c8 <col:57> "" ""
|-CXXMethodDecl 0x55e45d87d9d8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e45d87d948 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55e45d87db28 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e45d87da98 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55e45d87dca8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55e45d87dbe0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55e45d87dd70 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55e45d87de30 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55e45d87def0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55e45d87df90 <col:49> "" ""
|-CXXMethodDecl 0x55e45d87e020 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55e45d87e0e0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55e45d87e1d0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55e45d87e298 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55e45d87e358 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55e45d87e418 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55e45d87e510 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55e45d87e5d8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55e45d87e6a0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55e45d87e878 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55e45d87e758 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55e45d87e7d8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55e45d87eaa0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55e45d87e940 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55e45d87e9c0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55e45d87ebb0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55e45d87ec18 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55e45d87ec40 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e45d87ed58 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55e45d87edf8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55e45d87ee58 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e45d87eeb8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55e45d87ef68 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55e45d87efd0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55e45d87f208 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55e45d87f258 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45d87f1e8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55e45d87f0f8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55e45d87f0a0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55e45d87f0e0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55e45d87f0c0 <col:32> 'int' 8
|-CXXRecordDecl 0x55e45d87f270 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e45d87f388 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55e45d87f430 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55e45d87f498 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55e45d87f528 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55e45d8855c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e45d8859f8 <col:12>
| |-CXXConstructorDecl 0x55e45d8856c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e45d8857d8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e45d87f430 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55e45d887f80 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55e45d887f50 <col:12> 'const char *const' lvalue .data 0x55e45d87f430
| | |     `-DeclRefExpr 0x55e45d887f30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d8857d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e45d87f498 'length' 'int'
| | | `-ImplicitCastExpr 0x55e45d888010 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55e45d887fe0 <col:12> 'const int' lvalue .length 0x55e45d87f498
| | |     `-DeclRefExpr 0x55e45d887fc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d8857d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e45d87f528 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55e45d8880a0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55e45d888070 <col:12> 'String::memo_t *const' lvalue .memo 0x55e45d87f528
| | |     `-DeclRefExpr 0x55e45d888050 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d8857d8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55e45d8880f8 <col:12>
| |-CXXConstructorDecl 0x55e45d885878 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e45d885878
| | `-ParmVarDecl 0x55e45d885988 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55e45d88aee0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55e45d8968f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e45d896a08 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55e45d896f20 <col:12>
| |   |-BinaryOperator 0x55e45d896d38 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55e45d896cf0 <col:12> 'const char *' lvalue ->data 0x55e45d87f430
| |   | | `-CXXThisExpr 0x55e45d896ce0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e45d896d20 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e45d896cb0 <col:12> 'const char *const' lvalue .data 0x55e45d87f430
| |   |     `-DeclRefExpr 0x55e45d896c90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d896a08 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e45d896e00 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55e45d896db8 <col:12> 'int' lvalue ->length 0x55e45d87f498
| |   | | `-CXXThisExpr 0x55e45d896da8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e45d896de8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55e45d896d78 <col:12> 'const int' lvalue .length 0x55e45d87f498
| |   |     `-DeclRefExpr 0x55e45d896d58 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d896a08 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e45d896ec8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55e45d896e80 <col:12> 'String::memo_t *' lvalue ->memo 0x55e45d87f528
| |   | | `-CXXThisExpr 0x55e45d896e70 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e45d896eb0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e45d896e40 <col:12> 'String::memo_t *const' lvalue .memo 0x55e45d87f528
| |   |     `-DeclRefExpr 0x55e45d896e20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e45d896a08 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55e45d896f10 <col:12>
| |     `-UnaryOperator 0x55e45d896ef8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e45d896ee8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55e45d896a78 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e45d896a78
|   `-ParmVarDecl 0x55e45d896b88 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55e45d87f5a0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55e45d87f7e8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55e45d87f608 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55e45d87f688 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55e45d87f700 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55e45d885580 <col:79, line:261:5>
|   |-BinaryOperator 0x55e45d8851f8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e45d885190 <col:2, col:5> 'const char *' lvalue .data 0x55e45d87f430
|   | | `-MemberExpr 0x55e45d885160 <col:2> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|   | |   `-CXXThisExpr 0x55e45d885150 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e45d8851e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e45d8851c0 <col:12> 'const char *' lvalue ParmVar 0x55e45d87f608 'data' 'const char *'
|   |-BinaryOperator 0x55e45d8852c0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55e45d885258 <col:2, col:5> 'int' lvalue .length 0x55e45d87f498
|   | | `-MemberExpr 0x55e45d885228 <col:2> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|   | |   `-CXXThisExpr 0x55e45d885218 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e45d8852a8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e45d885288 <col:14> 'int' lvalue ParmVar 0x55e45d87f688 'length' 'int'
|   `-IfStmt 0x55e45d885568 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55e45d8853e0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e45d8853c8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55e45d8853a8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55e45d885388 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55e45d885320 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55e45d87f528
|     |       | `-MemberExpr 0x55e45d8852f0 <col:7> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|     |       |   `-CXXThisExpr 0x55e45d8852e0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55e45d885370 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e45d885350 <col:17> 'String::memo_t *' lvalue ParmVar 0x55e45d87f700 'memo' 'String::memo_t *'
|     `-CallExpr 0x55e45d885540 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55e45d885528 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e45d885430 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55e45d86e218 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55e45d885498 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e45d87edf8
|         `-ImplicitCastExpr 0x55e45d885480 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55e45d885460 <col:27> 'String::memo_t *' lvalue ParmVar 0x55e45d87f700 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55e45d87fa98 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55e45d87f8b8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55e45d87f938 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55e45d87f9b0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55e45d87f5a0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55e45d885a08 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55e45d885b98 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55e45d885b00 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55e45d885a70 <col:2> '<bound member function type>' ->assign_memo 0x55e45d87f7e8
|     | `-ImplicitCastExpr 0x55e45d885b38 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55e45d885a60 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55e45d885b50 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e45d885aa0 <col:14> 'const char *' lvalue ParmVar 0x55e45d87f8b8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55e45d885b68 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55e45d885ac0 <col:20> 'int' lvalue ParmVar 0x55e45d87f938 'length' 'int'
|     `-ImplicitCastExpr 0x55e45d885b80 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55e45d885ae0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55e45d87f9b0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55e45d87fc28 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55e45d87fb68 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55e45d885df0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55e45d885d70 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55e45d885bc0 <col:2> '<bound member function type>' ->assign_memo 0x55e45d87f7e8
|     | `-CXXThisExpr 0x55e45d885bb0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55e45d885da8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55e45d885c40 <col:14, col:19> 'const char *' lvalue .data 0x55e45d87f430
|     |   `-MemberExpr 0x55e45d885c10 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55e45d87f5a0
|     |     `-DeclRefExpr 0x55e45d885bf0 <col:14> 'const String' lvalue ParmVar 0x55e45d87fb68 'x' 'const String &'
|     |-ImplicitCastExpr 0x55e45d885dc0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55e45d885cc0 <col:25, col:30> 'int' lvalue .length 0x55e45d87f498
|     |   `-MemberExpr 0x55e45d885c90 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55e45d87f5a0
|     |     `-DeclRefExpr 0x55e45d885c70 <col:25> 'const String' lvalue ParmVar 0x55e45d87fb68 'x' 'const String &'
|     `-ImplicitCastExpr 0x55e45d885dd8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55e45d885d40 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55e45d87f528
|         `-MemberExpr 0x55e45d885d10 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55e45d87f5a0
|           `-DeclRefExpr 0x55e45d885cf0 <col:38> 'const String' lvalue ParmVar 0x55e45d87fb68 'x' 'const String &'
|-CXXMethodDecl 0x55e45d87fcf0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55e45d8867b0 <col:31, line:278:5>
|   `-IfStmt 0x55e45d886798 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55e45d885e90 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e45d885e78 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55e45d885e48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e45d87f528
|     |     `-MemberExpr 0x55e45d885e18 <col:6> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|     |       `-CXXThisExpr 0x55e45d885e08 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55e45d886770 <col:15, line:277:2>
|       |-ParenExpr 0x55e45d886340 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55e45d886310 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55e45d885fa0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55e45d885f88 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55e45d885f70 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55e45d885f30 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e45d87edf8
|       |   |       `-ImplicitCastExpr 0x55e45d885f18 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55e45d885ee8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55e45d87f528
|       |   |           `-MemberExpr 0x55e45d885eb8 <col:27> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|       |   |             `-CXXThisExpr 0x55e45d885ea8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55e45d886000 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55e45d885fe0 <col:54> 'int' 0
|       |   `-CallExpr 0x55e45d886270 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55e45d886258 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e45d8861d8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55e45d8862b0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e45d8860e8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55e45d8862c8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e45d886118 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55e45d8862e0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55e45d886150 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55e45d8862f8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55e45d8861c0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55e45d8861a8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55e45d886170 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55e45d886690 <line:274:6, line:275:22>
|       | |-CallExpr 0x55e45d886550 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55e45d886538 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55e45d8864b0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55e45d86f660 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55e45d886480 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e45d87edf8
|       | |   `-ImplicitCastExpr 0x55e45d886468 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55e45d886438 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55e45d87f528
|       | |       `-MemberExpr 0x55e45d886408 <col:40> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|       | |         `-CXXThisExpr 0x55e45d8863f8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55e45d886650 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55e45d886638 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55e45d886578 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55e45d8844d0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55e45d886678 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55e45d8865d8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55e45d87f528
|       |       `-MemberExpr 0x55e45d8865a8 <col:15> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|       |         `-CXXThisExpr 0x55e45d886598 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55e45d886750 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55e45d8866e8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e45d87f528
|         | `-MemberExpr 0x55e45d8866b8 <col:6> 'String::rep_t' lvalue ->_r 0x55e45d87f5a0
|         |   `-CXXThisExpr 0x55e45d8866a8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55e45d886738 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55e45d886718 <col:16> 'int' 0
|-CXXMethodDecl 0x55e45d87ff88 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55e45d87fda8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e45d87fe28 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e45d87fea0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55e45d880060 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55e45d8802b0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55e45d880118 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e45d880198 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e45d880210 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e45d880498 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55e45d880380 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55e45d880400 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55e45d880598 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55e45d886888 <col:41, line:286:5>
|   `-ReturnStmt 0x55e45d886878 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55e45d886848 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55e45d886810 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55e45d8867f8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55e45d8867d8 <col:46> 'int' 1
|-CXXMethodDecl 0x55e45d880838 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55e45d880650 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55e45d8806d0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55e45d880750 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55e45d8844d0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55e45d880900 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e45d8845a0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55e45d884770 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e45d884658 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e45d8846d8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55e45d884830 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55e45d8848f8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55e45d8849f8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55e45d884a70 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55e45d884ae8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55e45d884b50 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55e45d884c50 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55e45d884ca0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45d884c30 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55e45d884c10 <col:22> 'int' 14
|-CXXMethodDecl 0x55e45d884eb8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55e45d884cd0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55e45d884d50 <col:38> col:41 'int'
| `-ParmVarDecl 0x55e45d884dd0 <col:43> col:46 'int'
|-FriendDecl 0x55e45d884fc0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55e45d885050 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e45db15170 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55e45db15348 prev 0x55e45db15170 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e45db153d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e45db15400 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db16dc0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55e45db16d70 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55e45db16d50 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55e45db15618 'type'
|     `-SubstTemplateTypeParmType 0x55e45db155e0 'String' sugar
|       |-TemplateTypeParmType 0x55e45d83aa60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d83aa10 'T'
|       `-RecordType 0x55e45d876240 'String'
|         `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db16e78 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55e45db16e40 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55e45db16e20 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e45db16dc0 'type'
|     `-ElaboratedType 0x55e45db16d70 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55e45db16d50 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55e45db15618 'type'
|         `-SubstTemplateTypeParmType 0x55e45db155e0 'String' sugar
|           |-TemplateTypeParmType 0x55e45d83aa60 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e45d83aa10 'T'
|           `-RecordType 0x55e45d876240 'String'
|             `-CXXRecord 0x55e45d8761b0 'String'
|-CXXMethodDecl 0x55e45db16ff8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55e45db16f08 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55e45db170e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e45db171c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55e45db171c8
|-CXXMethodDecl 0x55e45db17498 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e45db173a0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55e45db176d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e45db17550 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e45db175c8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e45db178a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e45db17798 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e45db17810 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e45db17a08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e45db17ad8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e45db17d28 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e45db17b98 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e45db17c10 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e45db17f88 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55e45db17df8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e45db17e70 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e45db18148 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e45db18058 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e45db18308 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e45db18210 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e45db183c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e45db18470 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e45db186a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e45db18520 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e45db18598 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e45db18948 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e45db18850 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55e45db18a10 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55e45db18a60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e45db18ab0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e45daae9f0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e45db13bd8 prev 0x55e45daae9f0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e45db150e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55e45db15090 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55e45db15070 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e45db14f20 'type'
|     `-SubstTemplateTypeParmType 0x55e45db14db0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55e45d8105f0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55e45d810598 'F'
|       `-RecordType 0x55e45db14a10 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55e45db14930 'typed_array_memory'
|-FieldDecl 0x55e45db18b00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55e45db18b50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e45db18b88 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|   |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e45d847d28 'T'
|   `-RecordType 0x55e45d876240 'String'
|     `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db18c18 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55e45db18be0 'String &'
|   `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|     |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e45d847d28 'T'
|     `-RecordType 0x55e45d876240 'String'
|       `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db18ca8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55e45db18c70 'const String &'
|   `-QualType 0x55e45db13c71 'const String' const
|     `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-RecordType 0x55e45d876240 'String'
|         `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db18d38 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55e45db18d00 'String *'
|   `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|     |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e45d847d28 'T'
|     `-RecordType 0x55e45d876240 'String'
|       `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db18dc8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55e45db18d90 'const String *'
|   `-QualType 0x55e45db13c71 'const String' const
|     `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-RecordType 0x55e45d876240 'String'
|         `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db19a20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55e45db199d0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55e45db199b0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55e45db198e8 'type'
|     `-LValueReferenceType 0x55e45db198b0 'const String &'
|       `-QualType 0x55e45db19651 'const String' const
|         `-SubstTemplateTypeParmType 0x55e45db19650 'String' sugar
|           |-TemplateTypeParmType 0x55e45d81a760 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e45d81a708 'T'
|           `-RecordType 0x55e45d876240 'String'
|             `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db19a88 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55e45db18c70 'const String &'
|   `-QualType 0x55e45db13c71 'const String' const
|     `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-RecordType 0x55e45d876240 'String'
|         `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db19ae0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db19b48 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55e45db18d00 'String *'
|   `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|     |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e45d847d28 'T'
|     `-RecordType 0x55e45d876240 'String'
|       `-CXXRecord 0x55e45d8761b0 'String'
|-TypedefDecl 0x55e45db19bb0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55e45db18d90 'const String *'
|   `-QualType 0x55e45db13c71 'const String' const
|     `-SubstTemplateTypeParmType 0x55e45db13c70 'String' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-RecordType 0x55e45d876240 'String'
|         `-CXXRecord 0x55e45d8761b0 'String'
|-EnumDecl 0x55e45db19c08 <line:134:5> col:5
| `-EnumConstantDecl 0x55e45db19d00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e45db19ce0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e45d849408 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e45d8493e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e45d8493c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e45db19d88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e45db1a018 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db19e40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e45db19ee0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55e45db1a2a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55e45db1a190 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55e45db1a568 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55e45db1a450 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e45db1a880 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55e45db1a760 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55e45db1ab90 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55e45db1aa70 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e45db1ae80 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db1acc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e45db1ad40 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e45db1afa8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e45db1b058 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db1b0b0 <col:30> Inherited
|-CXXMethodDecl 0x55e45db1b0f8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e45db1b1a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db1b200 <col:30> Inherited
|-CXXMethodDecl 0x55e45db1b2c8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e45db1b378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db1b3d0 <col:30> Inherited
|-CXXMethodDecl 0x55e45db1b418 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e45db1b4c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db1b520 <col:30> Inherited
|-CXXMethodDecl 0x55e45db1b568 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e45db1b618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db1b670 <col:30> Inherited
|-CXXMethodDecl 0x55e45db1b6b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e45db1b768 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db1b7c0 <col:30> Inherited
|-CXXMethodDecl 0x55e45db1b7e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e45db1b898 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e45db1b948 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e45db1bb08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db1b9f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e45db1ba70 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e45db1bc58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e45db1bbc8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db1be08 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55e45db1bd10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e45db1bec0 <col:20>
| `-OptimizeNoneAttr 0x55e45db1bf18 <col:30>
|-CXXMethodDecl 0x55e45db1c038 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55e45db1bf40 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e45db1c0f0 <col:20>
| `-OptimizeNoneAttr 0x55e45db1c148 <col:30>
|-CXXMethodDecl 0x55e45db1c200 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e45db1c170 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db1c348 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e45db1c2b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db1c478 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55e45db1c578 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55e45db1c648 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55e45db1c718 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55e45db1c858 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e45db1c7c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db1c9a0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e45db1c910 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db1cae8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e45db1ca58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e45db1cba0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e45db1cca0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e45db1cc10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e45db1cd58 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e45db1ce18 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55e45db1cf18 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55e45db1d098 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e45db1cfd8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55e45db1d858 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e45db1d150 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55e45db1d7b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55e45db1d6b8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55e45db1d938 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e45db1da88 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e45db1d9f8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e45db1db40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e45db1dd88 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db1dc00 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e45db1dc78 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e45db1df18 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55e45db1de58 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e45db1e128 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55e45db1dfe0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e45db1e058 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e45db1e1e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e45db1e448 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55e45db1e350 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55e45db1e518 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55e45db1e518

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45dac5798 prev 0x55e45daabbc0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e45dac5890 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55e45dac5920 <col:22, col:28> col:22 public
|-EnumDecl 0x55e45dac5948 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55e45dac5a68 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5a48 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55e45dac5a30 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55e45dac5a10 <col:14> 'int' 999
| |-EnumConstantDecl 0x55e45dac5b10 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5af0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55e45dac5ad8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55e45dac5ab8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e45dac5ba0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5b80 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55e45dac5b60 <col:17> 'int' 0
| |-EnumConstantDecl 0x55e45dac5c30 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5c10 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55e45dac5bf0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55e45dac5cc0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5ca0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55e45dac5c80 <col:16> 'int' 2
| |-EnumConstantDecl 0x55e45dac5d50 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5d30 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55e45dac5d10 <col:13> 'int' 3
| |-EnumConstantDecl 0x55e45dac5de0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5dc0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55e45dac5da0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55e45dac5e70 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5e50 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55e45dac5e30 <col:14> 'int' 5
| |-EnumConstantDecl 0x55e45dac5f00 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55e45dac5ee0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55e45dac5ec0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55e45dac5f90 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55e45dac5f70 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55e45dac5f50 <col:13> 'int' 7
|-VarDecl 0x55e45dac6000 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55e45dac6088 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55e45dac6110 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55e45dac6198 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55e45dac6220 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55e45dac62a8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55e45dac6330 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55e45dac63b8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55e45dac6440 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55e45dac64c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55e45dac6550 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55e45dac6650 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55e45dacd6d8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55e45dacde68 <line:128:13> 'int' 0
| `-CompoundStmt 0x55e45dacded8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55e45dac6740 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55e45dacdee8 <col:29, line:132:5>
|-CXXMethodDecl 0x55e45dac68f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55e45dac6830 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dac69c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e45dac6aa8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55e45dacdf40 <col:44, line:161:5>
|   `-ReturnStmt 0x55e45dacdf30 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55e45dacdf18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55e45dacdef8 <col:9> 'ErrorHandler *' lvalue Var 0x55e45dacd738 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dac6c18 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55e45dac6b58 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e45dac6ce0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55e45dacdfa0 <col:43, line:173:5>
|   `-ReturnStmt 0x55e45dacdf90 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55e45dacdf78 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55e45dacdf58 <col:9> 'ErrorHandler *' lvalue Var 0x55e45dacd7b0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55e45dac6d98 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55e45dac6e18 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55e45dac6f28 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55e45dac6e98 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7078 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55e45dac6fe8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac71d0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55e45dac7138 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7328 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55e45dac7290 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7480 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55e45dac73e8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7690 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e45dac7538 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55e45dac75b8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7868 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e45dac7750 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55e45dac77d0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7a88 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e45dac7928 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55e45dac79a8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7c68 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e45dac7b48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55e45dac7bc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7e48 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55e45dac7d28 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55e45dac7da8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac7fd0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55e45dac7f08 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55e45dac81a0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55e45dac8088 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55e45dac8100 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55e45dace1f8 <col:57, line:234:5>
|   `-ReturnStmt 0x55e45dace1e8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55e45dace1d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55e45dace178 <col:9, col:41> 'int'
|         |-MemberExpr 0x55e45dace148 <col:9> '<bound member function type>' ->xmessage 0x55e45dac7fd0
|         | `-CXXThisExpr 0x55e45dace138 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55e45dace1b8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e45dace1a0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e45dace118 <col:18, col:40> 'String' (CXXTemporary 0x55e45dace118)
|               `-CallExpr 0x55e45dace0e0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55e45dace0c8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55e45dace040 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55e45daca228 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55e45dace060 <col:31> 'const String' lvalue ParmVar 0x55e45dac8100 'str' 'const String &'
|                 `-DeclRefExpr 0x55e45dace080 <col:36> 'const String' lvalue ParmVar 0x55e45dac8088 'anno' 'const String &'
|-CXXMethodDecl 0x55e45dac84e0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55e45dac8260 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55e45dac82e0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55e45dac83b0 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e45dace488 <col:68, line:243:5>
|   `-ReturnStmt 0x55e45dace478 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55e45dace460 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55e45dace400 <col:9, col:41> 'int'
|         |-MemberExpr 0x55e45dace3d0 <col:9> '<bound member function type>' ->xmessage 0x55e45dac81a0
|         | `-CXXThisExpr 0x55e45dace3c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55e45dace298 <col:18> 'const String' lvalue ParmVar 0x55e45dac8260 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55e45dace448 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e45dace430 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e45dace3a0 <col:24, col:40> 'String' (CXXTemporary 0x55e45dace3a0)
|               `-CXXMemberCallExpr 0x55e45dace338 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55e45dace2c8 <col:24> '<bound member function type>' ->vformat 0x55e45dac96c0
|                 | `-CXXThisExpr 0x55e45dace2b8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55e45dace368 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55e45dace2f8 <col:32> 'const char *' lvalue ParmVar 0x55e45dac82e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55e45dace380 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55e45dace318 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e45dac83b0 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e45dac8780 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55e45dac85a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55e45dac8620 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55e45dac8698 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55e45dace7c8 <col:23, line:254:5>
|   `-ReturnStmt 0x55e45dace7b8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55e45dace7a0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55e45dace740 <col:9, col:71> 'int'
|         |-MemberExpr 0x55e45dace710 <col:9> '<bound member function type>' ->xmessage 0x55e45dac81a0
|         | `-CXXThisExpr 0x55e45dace700 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55e45dace788 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55e45dace770 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55e45dace6c0 <col:18, col:65> 'String' (CXXTemporary 0x55e45dace6c0)
|         |     `-CallExpr 0x55e45dace658 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55e45dace640 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55e45dace528 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55e45daca228 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55e45dace548 <col:31> 'const String' lvalue ParmVar 0x55e45dac8620 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55e45dace6a0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55e45dace688 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55e45dace620 <col:37, col:64> 'String' (CXXTemporary 0x55e45dace620)
|         |             `-CallExpr 0x55e45dace5f0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55e45dace5d8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55e45dace568 <col:37> 'String (const String &)' lvalue CXXMethod 0x55e45daca878 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55e45dace588 <col:56> 'const String' lvalue ParmVar 0x55e45dac85a8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55e45dace6e0 <col:68> 'const String' lvalue ParmVar 0x55e45dac8698 'str' 'const String &'
|-CXXMethodDecl 0x55e45dac8b00 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55e45dac8848 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55e45dac88c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55e45dac8940 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55e45dac89b8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e45dacea80 <col:34, line:267:5>
|   `-ReturnStmt 0x55e45dacea70 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55e45dacea58 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55e45dace9f0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55e45dace9c0 <col:9> '<bound member function type>' ->xmessage 0x55e45dac8780
|         | `-CXXThisExpr 0x55e45dace9b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55e45dace868 <col:18> 'const String' lvalue ParmVar 0x55e45dac8848 'landmark' 'const String &'
|         |-DeclRefExpr 0x55e45dace888 <col:28> 'const String' lvalue ParmVar 0x55e45dac88c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55e45dacea40 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55e45dacea28 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55e45dace990 <col:34, col:50> 'String' (CXXTemporary 0x55e45dace990)
|               `-CXXMemberCallExpr 0x55e45dace928 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55e45dace8b8 <col:34> '<bound member function type>' ->vformat 0x55e45dac96c0
|                 | `-CXXThisExpr 0x55e45dace8a8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55e45dace958 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55e45dace8e8 <col:42> 'const char *' lvalue ParmVar 0x55e45dac8940 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55e45dace970 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55e45dace908 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e45dac89b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e45dac8c10 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55e45daceb00 <col:25, line:288:5>
|   `-ReturnStmt 0x55e45daceaf0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55e45dacead8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55e45daceaa8 <col:9> 'const int' lvalue ->_nerrors 0x55e45dacd6d8
|         `-CXXThisExpr 0x55e45dacea98 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55e45dac8e20 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55e45dac8cc8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55e45dac8d48 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac9108 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55e45dac8ee8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55e45dac8f68 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55e45dac8fe0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e45dac92a0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55e45dac91d8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac94e8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55e45dac9360 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55e45dac93d8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55e45daced60 <col:58, line:357:5>
|   `-ReturnStmt 0x55e45daced50 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55e45daced38 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55e45daced08 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55e45dacecf0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55e45dacecd0 <col:9, col:29> 'String' (CXXTemporary 0x55e45dacecd0)
|             `-CallExpr 0x55e45dacec60 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55e45dacec48 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55e45dacebc8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55e45dac9108 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55e45daceb68 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55e45dacec98 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55e45daceb88 <col:21> 'const char *' lvalue ParmVar 0x55e45dac9360 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55e45dacecb0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55e45daceba8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55e45dac93d8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e45dac96c0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55e45dac95b0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55e45dac9628 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55e45dac9818 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55e45dac9788 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55e45dac9998 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55e45dac98d0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55e45dac9c30 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55e45dac9a50 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55e45dac9ad0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55e45dac9b48 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55e45dac9d90 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55e45dac9d00 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55e45dacee78 <col:37, line:441:5>
|   `-IfStmt 0x55e45dacee60 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55e45dacede8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55e45dacedb8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55e45daced78 <col:6> 'int' lvalue ParmVar 0x55e45dac9d00 'level' 'int'
|     | `-ImplicitCastExpr 0x55e45dacedd0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55e45daced98 <col:15> 'ErrorHandler::Level' EnumConstant 0x55e45dac5d50 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55e45dacee48 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55e45dacee18 <col:8> 'int' lvalue ->_nerrors 0x55e45dacd6d8
|         `-CXXThisExpr 0x55e45dacee08 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55e45dac9e58 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55e45dacef10 <col:26, line:448:5>
|   `-BinaryOperator 0x55e45daceef0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55e45daceea0 <col:2> 'int' lvalue ->_nerrors 0x55e45dacd6d8
|     | `-CXXThisExpr 0x55e45dacee90 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55e45daceed0 <col:13> 'int' 0
|-CXXMethodDecl 0x55e45daca020 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55e45dac9f10 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55e45dac9f88 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55e45daca228 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55e45daca0e0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55e45daca158 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55e45daca4d8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55e45daca2e8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55e45daca368 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55e45daca3e8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55e45daca590 <col:59> 0 0
|-CXXMethodDecl 0x55e45daca728 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55e45daca608 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55e45daca688 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55e45dacf580 <col:70, line:534:5>
|   |-DeclStmt 0x55e45dacf080 <line:528:2, col:20>
|   | |-VarDecl 0x55e45dacef38 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55e45dacefa0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55e45dacefd8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55e45dacf040 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55e45dacf150 <line:529:2, col:23>
|   | `-VarDecl 0x55e45dacf0b0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55e45dacf138 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55e45dacf118 <col:18> 'const char *' lvalue ParmVar 0x55e45daca608 'begin' 'const char *'
|   |-DoStmt 0x55e45dacf518 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55e45dacf448 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55e45dacf430 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55e45dacf410 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55e45dacf168 <col:6> 'const char *' lvalue Var 0x55e45dacf0b0 'x' 'const char *'
|   | |     `-CallExpr 0x55e45dacf360 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55e45dacf348 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55e45dacf300 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55e45dacdbb0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55e45dacf3c8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55e45dacf3b0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55e45dacf220 <col:20, col:27> 'String' (CXXTemporary 0x55e45dacf220)
|   | |       |     `-CXXTemporaryObjectExpr 0x55e45dacf1e8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55e45dacf3e0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55e45dacf240 <col:30> 'const char *' lvalue Var 0x55e45dacf0b0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55e45dacf3f8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55e45dacf260 <col:33> 'const char *' lvalue ParmVar 0x55e45daca688 'end' 'const char *'
|   | |       |-UnaryOperator 0x55e45dacf2a0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55e45dacf280 <col:39> 'String' lvalue Var 0x55e45dacef38 'name' 'String'
|   | |       |-UnaryOperator 0x55e45dacf2d8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55e45dacf2b8 <col:46> 'String' lvalue Var 0x55e45dacefd8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55e45dacf2f0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55e45dacf500 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55e45dacf4e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55e45dacf4c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55e45dacf498 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|   |         `-ImplicitCastExpr 0x55e45dacf480 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55e45dacf460 <col:11> 'String' lvalue Var 0x55e45dacef38 'name' 'String'
|   `-ReturnStmt 0x55e45dacf570 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55e45dacf558 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55e45dacf538 <col:9> 'const char *' lvalue Var 0x55e45dacf0b0 'x' 'const char *'
|-CXXMethodDecl 0x55e45daca878 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55e45daca7e8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55e45dacfb88 <col:55, line:550:5>
|   `-IfStmt 0x55e45dacfb60 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55e45dacf7c0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55e45dacf7a8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e45dacf790 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e45dacf770 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e45dacf740 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|     | |       `-DeclRefExpr 0x55e45dacf5e0 <col:6> 'const String' lvalue ParmVar 0x55e45daca7e8 'x' 'const String &'
|     | `-BinaryOperator 0x55e45dacf720 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55e45dacf6f0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55e45dacf6a0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55e45dacf688 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55e45dacf640 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55e45d8931e0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55e45dacf600 <col:11> 'const String' lvalue ParmVar 0x55e45daca7e8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55e45dacf620 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55e45dacf708 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55e45dacf6d8 <col:19> 'char' 123
|     |-ReturnStmt 0x55e45dacf830 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55e45dacf800 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55e45dacf7e0 <col:13> 'const String' lvalue ParmVar 0x55e45daca7e8 'x' 'const String &'
|     `-IfStmt 0x55e45dacfb38 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55e45dacf8c8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e45dacf8b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e45dacf890 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e45dacf860 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|       |       `-DeclRefExpr 0x55e45dacf840 <col:11> 'const String' lvalue ParmVar 0x55e45daca7e8 'x' 'const String &'
|       |-ReturnStmt 0x55e45dacfa50 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55e45dacfa38 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55e45dacfa08 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55e45dacf9f0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55e45dacf9d0 <col:13, col:29> 'String' (CXXTemporary 0x55e45dacf9d0)
|       |         `-CallExpr 0x55e45dacf980 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55e45dacf968 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55e45dacf8e0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55e45daca020 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55e45dacf9b0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55e45dacf900 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55e45dacf920 <col:28> 'const String' lvalue ParmVar 0x55e45daca7e8 'x' 'const String &'
|       `-ReturnStmt 0x55e45dacfb28 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55e45dacfb10 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55e45dacfae0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55e45dacfac8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55e45dacfaa8 <col:13, col:20> 'String' (CXXTemporary 0x55e45dacfaa8)
|                 `-CXXTemporaryObjectExpr 0x55e45dacfa70 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55e45dacaa78 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55e45daca930 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55e45daca9a8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e45dacde58 <col:71> 'bool' false
|-CXXRecordDecl 0x55e45dacab28 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55e45dacae28 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55e45dacadc0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55e45dacad60 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55e45dacad20 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55e45d876240 'String'
|       | `-CXXRecord 0x55e45d8761b0 'String'
|       |-BuiltinType 0x55e45d54a580 'int'
|       `-DecayedType 0x55e45dac8380 '__va_list_tag *' sugar
|         |-TypedefType 0x55e45dac8350 'va_list' sugar
|         | |-Typedef 0x55e45d7680e0 'va_list'
|         | `-TypedefType 0x55e45d768090 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55e45d69fcb8 '__gnuc_va_list'
|         |   `-TypedefType 0x55e45d69fc20 '__builtin_va_list' sugar
|         |     |-Typedef 0x55e45d58bd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55e45d58bce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55e45d54b2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55e45d54b238 '__va_list_tag'
|         `-PointerType 0x55e45d76d980 '__va_list_tag *'
|           `-RecordType 0x55e45d54b2d0 '__va_list_tag'
|             `-CXXRecord 0x55e45d54b238 '__va_list_tag'
|-EnumDecl 0x55e45dacae80 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55e45dacaf80 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd180 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacaf60 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55e45dacaf40 <col:16> 'int' 1
| |-EnumConstantDecl 0x55e45dacb010 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd198 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacaff0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55e45dacafd0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55e45dacb0a0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd1b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacb080 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55e45dacb060 <col:22> 'int' 4
| |-EnumConstantDecl 0x55e45dacb130 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd1c8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacb110 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55e45dacb0f0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55e45dacb1c0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd1e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacb1a0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55e45dacb180 <col:22> 'int' 16
| |-EnumConstantDecl 0x55e45dacb250 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd1f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacb230 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e45dacb210 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e45dacb2e0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd210 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacb2c0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55e45dacb2a0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55e45dacb370 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd228 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacb350 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55e45dacb330 <col:14> 'int' 128
| |-EnumConstantDecl 0x55e45dacb400 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55e45dacd240 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45dacb3e0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55e45dacb3c0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55e45dacd130 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55e45dacd258 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45dacb470 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55e45dacb450 <col:12> 'int' 1024
|-CXXMethodDecl 0x55e45dacd468 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55e45dacd280 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55e45dacd320 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55e45dacd5f0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55e45dacd528 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55e45dacd698 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55e45dacd6d8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55e45dacd738 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55e45dacd7b0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55e45dacdbb0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55e45dacd828 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55e45dacd8a8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55e45dacd928 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55e45dacd9a0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55e45dacda18 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55e45dacda90 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55e45dacdcd8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55e45dacdcd8
| `-ParmVarDecl 0x55e45dacdde8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55e45dacfee8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55e45dacfee8
  `-ParmVarDecl 0x55e45dacfff8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45db29188 prev 0x55e45da71498 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45db29280 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55e45db29310 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55e45db29418 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55e45db29348 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e45db2a7f0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e45db2a7d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e45db2a368 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e45db2a880 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e45db2a840 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55e45db29348 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e45db2a3d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e45db2a900 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e45db2a8c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e45db2a430 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e45db2a940 <col:54> 'bool' false
| `-CompoundStmt 0x55e45db2aa48 <col:61, line:38:5>
|   `-BinaryOperator 0x55e45db2aa28 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55e45db2a9c0 <col:9> 'const Element *' lvalue ->_context 0x55e45db2a308
|     | `-CXXThisExpr 0x55e45db2a9b0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55e45db2aa10 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55e45db2a9f0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55e45db29628 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45db294d8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55e45db29550 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e45db2a828 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e45db2a808 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55e45db2a308 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55e45db2aaa0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e45db2aa60 <col:20> 'const Element *' lvalue ParmVar 0x55e45db294d8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55e45db2a368 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e45db2ab20 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e45db2aae0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55e45db29550 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e45db2a3d0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e45db2aba0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e45db2ab60 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55e45db2a430 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e45db2abe0 <col:73> 'bool' false
| `-CompoundStmt 0x55e45db2ac58 <col:80, line:46:5>
|-CXXMethodDecl 0x55e45db29758 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55e45db2acd0 <col:36, line:51:5>
|   `-ReturnStmt 0x55e45db2acc0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55e45db2aca8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55e45db2ac78 <col:16> 'const Element *const' lvalue ->_context 0x55e45db2a308
|         `-CXXThisExpr 0x55e45db2ac68 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e45db29848 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55e45db2ad50 <col:32, line:57:5>
|   `-ReturnStmt 0x55e45db2ad40 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55e45db2ad28 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55e45db2acf8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55e45db2a368
|         `-CXXThisExpr 0x55e45db2ace8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e45db29908 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55e45db29a90 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e45db299c0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e45db29be0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e45db29b50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e45db29d30 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e45db29ca0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e45db29f38 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55e45db29de8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55e45db29e60 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55e45db2a218 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55e45db29ff8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55e45db2a078 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55e45db2a0f0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55e45db2a2d0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55e45db2a308 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55e45db2a368 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55e45db2a3d0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55e45db2a430 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55e45db2a480 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e45db2a480
| `-ParmVarDecl 0x55e45db2a598 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55e45db2a638 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e45db2a638
| `-ParmVarDecl 0x55e45db2a748 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55e45db95620 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e45db4e270 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55e45db4e448 prev 0x55e45db4e270 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e45db4e4d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e45db4e500 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db500d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55e45db50080 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55e45db4e9b0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55e45db4e8b0 'type'
|     `-TemplateSpecializationType 0x55e45db4e840 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55e45db4e720 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55e45db4e700 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55e45db4e6e0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55e45db4e820 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55e45db4e740 'char_array'
|-TypedefDecl 0x55e45db50188 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55e45db50150 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55e45db50130 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55e45db500d0 'type'
|     `-ElaboratedType 0x55e45db50080 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55e45db4e9b0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55e45db4e8b0 'type'
|         `-TemplateSpecializationType 0x55e45db4e840 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55e45db4e720 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55e45db4e700 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55e45db4e6e0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55e45db4e820 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55e45db4e740 'char_array'
|-CXXMethodDecl 0x55e45db50308 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55e45db50218 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55e45db503f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e45db504d8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55e45db507a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e45db506b0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55e45db5bdb8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e45db50860 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e45db5bca0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e45db5bf88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e45db5be78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e45db5bef0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e45db5c0e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e45db5c1b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e45db5c408 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e45db5c278 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e45db5c2f0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e45db5c668 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55e45db5c4d8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e45db5c550 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e45db5c828 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e45db5c738 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e45db5c9e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e45db5c8f0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e45db5caa0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e45db5cb50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e45db5cd88 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e45db5cc00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e45db5cc78 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e45db5d028 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e45db5cf30 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55e45db5d0f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55e45db5d140 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e45db5d190 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e45db4cc78 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e45db4ce88 prev 0x55e45db4cc78 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e45db4e1e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55e45db4e190 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55e45db4e170 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55e45db4e020 'type'
|     `-SubstTemplateTypeParmType 0x55e45db4de40 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55e45d80fe70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d80fe18 'T'
|       `-RecordType 0x55e45db4d990 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55e45db4d8a8 'sized_array_memory'
|-FieldDecl 0x55e45db5d1e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55e45db5d230 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e45db5d268 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|   |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e45d847d28 'T'
|   `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5d2f8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55e45db5d2c0 'int &'
|   `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|     |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e45d847d28 'T'
|     `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5d3b8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55e45db5d380 'const int &'
|   `-QualType 0x55e45db4cf21 'const int' const
|     `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5d448 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55e45db5d410 'int *'
|   `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|     |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e45d847d28 'T'
|     `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5d4d8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55e45db5d4a0 'const int *'
|   `-QualType 0x55e45db4cf21 'const int' const
|     `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5e0c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55e45db5e070 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55e45db5e050 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55e45db5dfe0 'type'
|     `-SubstTemplateTypeParmType 0x55e45db5dda0 'int' sugar
|       |-TemplateTypeParmType 0x55e45d81ae90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d81ae40 'T'
|       `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5e128 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55e45db5d380 'const int &'
|   `-QualType 0x55e45db4cf21 'const int' const
|     `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5e180 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5e1e8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55e45db5d410 'int *'
|   `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|     |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e45d847d28 'T'
|     `-BuiltinType 0x55e45d54a580 'int'
|-TypedefDecl 0x55e45db5e250 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55e45db5d4a0 'const int *'
|   `-QualType 0x55e45db4cf21 'const int' const
|     `-SubstTemplateTypeParmType 0x55e45db4cf20 'int' sugar
|       |-TemplateTypeParmType 0x55e45d847d80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e45d847d28 'T'
|       `-BuiltinType 0x55e45d54a580 'int'
|-EnumDecl 0x55e45db5e2a8 <line:134:5> col:5
| `-EnumConstantDecl 0x55e45db5e3a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e45db5e380 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e45d849408 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e45d8493e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e45d8493c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e45db5e428 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e45db5e678 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db5e4e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e45db5e580 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55e45db5e938 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55e45db5e820 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55e45db5ebf8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55e45db5eae0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e45db5ef40 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55e45db5ee20 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55e45db5f250 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55e45db5f130 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e45db5f540 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db5f388 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e45db5f400 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e45db5f668 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e45db5f748 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db5f7a0 <col:30> Inherited
|-CXXMethodDecl 0x55e45db5f7e8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e45db5f898 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db5f8f0 <col:30> Inherited
|-CXXMethodDecl 0x55e45db5f9b8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e45db5fa68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db5fac0 <col:30> Inherited
|-CXXMethodDecl 0x55e45db5fb08 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e45db5fbb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db5fc10 <col:30> Inherited
|-CXXMethodDecl 0x55e45db5fc58 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e45db5fd08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db5fd60 <col:30> Inherited
|-CXXMethodDecl 0x55e45db5fda8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e45db5fe58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e45db5feb0 <col:30> Inherited
|-CXXMethodDecl 0x55e45db5fed8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e45db5ff88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e45db60038 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e45db601f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db600e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e45db60160 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e45db60348 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e45db602b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db604f8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55e45db60400 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e45db605b0 <col:20>
| `-OptimizeNoneAttr 0x55e45db60608 <col:30>
|-CXXMethodDecl 0x55e45db60728 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55e45db60630 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e45db607e0 <col:20>
| `-OptimizeNoneAttr 0x55e45db60838 <col:30>
|-CXXMethodDecl 0x55e45db608f0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e45db60860 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db60a38 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e45db609a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db60b68 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55e45db60c98 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55e45db60d68 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55e45db60e38 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55e45db60f78 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e45db60ee8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db610c0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e45db61030 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e45db61208 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e45db61178 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e45db612c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e45db613c0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e45db61330 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e45db61478 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e45db61538 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55e45db61638 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55e45db617b8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e45db616f8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55e45db61f78 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e45db61870 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55e45db61ed8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55e45db61dd8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55e45db62058 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e45db621a8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e45db62118 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e45db62260 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e45db624a8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e45db62320 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e45db62398 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e45db62668 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55e45db62578 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e45db628b8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55e45db62730 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e45db627a8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e45db62978 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e45db62bd8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55e45db62ae0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55e45db62ca8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45db4ade8 prev 0x55e45db2fd08 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e45db4aee0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55e45db4afd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55e45db748b0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55e45db4b0c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55e45db748c0 <col:25, line:830:9>
|-CXXMethodDecl 0x55e45db4b1c0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55e45db4b270 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55e45db4b318 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e45db4b318
| `-ParmVarDecl 0x55e45db4b428 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55e45db4bbe8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e45db4bbe8
  `-ParmVarDecl 0x55e45db4bcf8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45db2fb18 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55e45db2fc78 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55e45db2fd08 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55e45db2fdc0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55e45db2fec8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55e45db2fdf8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e45db65b98 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e45db65b78 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e45db301e8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55e45db30060 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55e45db300d8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e45db65bd0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e45db65bb0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55e45db303c0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45db302b0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55e45db30328 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e45db65c08 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e45db65be8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55e45db30778 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e45db30560 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55e45db305d8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55e45db30650 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e45db65c40 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e45db65c20 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e45db30938 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55e45db30878 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55e45db30a30 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55e45db30c18 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55e45db30b20 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55e45db30d08 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55e45db65ff0 <col:24, line:291:5>
|   `-ReturnStmt 0x55e45db65fe0 <line:290:9, col:79>
|     `-BinaryOperator 0x55e45db65fc0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55e45db65e98 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55e45db65df0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55e45db65dd0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55e45db65cc8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55e45db65cb0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55e45db65c98 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55e45db65c68 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55e45db4cc10
|       | |   |       `-CXXThisExpr 0x55e45db65c58 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55e45db65db8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55e45db65da0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55e45db65d68 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55e45db65d38 <col:28, col:35> '<bound member function type>' ->size 0x55e45db1b7e8
|       | |           `-ImplicitCastExpr 0x55e45db65d88 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55e45db65d20 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55e45db65cf0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55e45db4cc10
|       | |                 `-CXXThisExpr 0x55e45db65ce0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55e45db65e80 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55e45db65e68 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55e45db65e50 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55e45db65e20 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55e45db62df0
|       |         `-CXXThisExpr 0x55e45db65e10 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55e45db65fa0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55e45db65f88 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e45db65f70 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e45db65f30 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e45db65f18 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e45db65ec8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e45db62ea0
|         |     |   `-CXXThisExpr 0x55e45db65eb8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e45db65ef8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55e45db65f50 <col:79> 'int' 0
|-CXXMethodDecl 0x55e45db30dc8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55e45db661c8 <col:32, line:296:5>
|   `-ReturnStmt 0x55e45db661b8 <line:295:9, col:49>
|     `-BinaryOperator 0x55e45db66198 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55e45db66078 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55e45db66060 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55e45db66048 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55e45db66018 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55e45db62df0
|       |       `-CXXThisExpr 0x55e45db66008 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55e45db66178 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55e45db66160 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e45db66148 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e45db66108 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e45db660f0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e45db660a0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e45db62ea0
|         |     |   `-CXXThisExpr 0x55e45db66090 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e45db660d0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55e45db66128 <col:49> 'int' 0
|-CXXMethodDecl 0x55e45db30eb8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55e45db663d8 <col:19, line:306:5>
|   |-IfStmt 0x55e45db662f8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55e45db66238 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55e45db66220 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55e45db661f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e45db4cc10
|   | |     `-CXXThisExpr 0x55e45db661e0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55e45db662d8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55e45db662a8 <col:13, col:20> '<bound member function type>' ->clear 0x55e45db1e1e8
|   |     `-ImplicitCastExpr 0x55e45db66290 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55e45db66260 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e45db4cc10
|   |         `-CXXThisExpr 0x55e45db66250 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55e45db66380 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55e45db66350 <col:9, col:16> '<bound member function type>' .clear 0x55e45db62978
|   |   `-MemberExpr 0x55e45db66320 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55e45db62d90
|   |     `-CXXThisExpr 0x55e45db66310 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55e45db663c8 <line:305:9, col:17>
|     `-UnaryOperator 0x55e45db663b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45db663a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e45db31138 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55e45db31040 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55e45db312b8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55e45db311f0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55e45db31638 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55e45db31360 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55e45db31598 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55e45db31408 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55e45db31480 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55e45db666f8 <col:67, line:327:5>
|     |-WhileStmt 0x55e45db666a8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55e45db664c0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55e45db66440 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e45da69968 0x55e45d8b2f48 0x55e45d8b2c20 0x55e45d8a33f0 0x55e45d8a30a0 0x55e45d8a2990 0x55e45d875300 0x55e45d8025b0
|     | | |-DeclRefExpr 0x55e45db66400 <col:16> 'Iter' lvalue ParmVar 0x55e45db31408 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55e45db66420 <col:25> 'Iter' lvalue ParmVar 0x55e45db31480 'end' 'Iter'
|     | `-CompoundStmt 0x55e45db66688 <col:30, line:325:9>
|     |   |-CallExpr 0x55e45db66628 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55e45db66508 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55e45db665f8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55e45db66588 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|     |   |   `-DeclRefExpr 0x55e45db66568 <col:24> 'Iter' lvalue ParmVar 0x55e45db31408 'begin' 'Iter'
|     |   `-UnaryOperator 0x55e45db66670 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55e45db66650 <col:15> 'Iter' lvalue ParmVar 0x55e45db31408 'begin' 'Iter'
|     `-ReturnStmt 0x55e45db666e8 <line:326:9, col:17>
|       `-UnaryOperator 0x55e45db666d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db666c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e45db31740 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55e45db316b0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55e45db31888 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55e45db317f8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55e45db31950 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55e45db667d8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55e45db66778 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55e45db66728 <col:9> '<bound member function type>' ->reset_from 0x55e45db63218
|   | | `-CXXThisExpr 0x55e45db66718 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55e45db66758 <col:20> 'int' 0
|   `-ReturnStmt 0x55e45db667c8 <line:352:9, col:17>
|     `-UnaryOperator 0x55e45db667b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45db667a0 <col:17> 'Args *' this
|-VarDecl 0x55e45db31a08 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e45db31a70 <col:38> 'int' 1
|-VarDecl 0x55e45db31b00 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e45db31b68 <col:39> 'int' 2
|-VarDecl 0x55e45db31bf8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e45db31c60 <col:39> 'int' 4
|-VarDecl 0x55e45db31cf0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e45db31d58 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55e45db320d8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55e45db31dd0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db32038 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e45db31e80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db31f28 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55e45db66930 <col:43, line:371:5>
|     `-ReturnStmt 0x55e45db66920 <line:370:9, col:34>
|       `-CallExpr 0x55e45db668e8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db66808 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db66888 <col:21> 'const char *' lvalue ParmVar 0x55e45db31e80 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db668a8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55e45db668c8 <col:33> 'T' lvalue ParmVar 0x55e45db31f28 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db32408 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55e45db32140 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db32368 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e45db321f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db32298 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e45db66a80 <col:45, line:375:5>
|     `-ReturnStmt 0x55e45db66a70 <line:374:9, col:42>
|       `-CallExpr 0x55e45db66a38 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db66958 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db669d8 <col:21> 'const char *' lvalue ParmVar 0x55e45db321f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db669f8 <col:30> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e45db66a18 <col:41> 'T' lvalue ParmVar 0x55e45db32298 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db32738 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55e45db32470 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55e45db32698 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55e45db32520 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e45db325c8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55e45db66bd0 <col:45, line:379:5>
| |   `-ReturnStmt 0x55e45db66bc0 <line:378:9, col:43>
| |     `-CallExpr 0x55e45db66b88 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e45db66aa8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e45db66b28 <col:21> 'const char *' lvalue ParmVar 0x55e45db32520 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55e45db66b48 <col:30> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int'
| |       `-DeclRefExpr 0x55e45db66b68 <col:42> 'T' lvalue ParmVar 0x55e45db325c8 'x' 'T &'
| |-CXXMethodDecl 0x55e45db966e8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x55e45db96500 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x55e45db965d8 <col:39, col:42> col:42 x 'bool &'
| `-CXXMethodDecl 0x55e45db96b68 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e45db96988 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55e45db96a58 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x55e45db32a68 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55e45db327a0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db329c8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e45db32850 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db328f8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55e45db66dd0 <col:46, line:383:5>
|     `-ReturnStmt 0x55e45db66dc0 <line:382:9, col:55>
|       `-CallExpr 0x55e45db66d88 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db66bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db66c78 <col:21> 'const char *' lvalue ParmVar 0x55e45db32850 'keyword' 'const char *'
|         |-BinaryOperator 0x55e45db66d48 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e45db66cf8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e45db66cd8 <col:30> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e45db66d30 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e45db66d10 <col:42> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e45db66d68 <col:54> 'T' lvalue ParmVar 0x55e45db328f8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db32e68 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55e45db32ad0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db32dc8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55e45db32b80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db32c00 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db32ca8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55e45db66f10 <col:54, line:388:5>
|     |-CallExpr 0x55e45db66e98 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db66de8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e45db66e28 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e45db66e38 <col:30> 'const char *' lvalue ParmVar 0x55e45db32b80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e45db66e58 <col:39> 'int' lvalue ParmVar 0x55e45db32c00 'flags' 'int'
|     | `-DeclRefExpr 0x55e45db66e78 <col:46> 'T' lvalue ParmVar 0x55e45db32ca8 'x' 'T &'
|     `-ReturnStmt 0x55e45db66f00 <line:387:9, col:17>
|       `-UnaryOperator 0x55e45db66ee8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db66ed8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db33318 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55e45db32ed8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e45db32f58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e45db33278 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e45db33018 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db330b8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55e45db33158 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e45db67080 <col:74, line:403:5>
|     `-ReturnStmt 0x55e45db67070 <line:402:9, col:56>
|       `-CallExpr 0x55e45db67030 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db66f40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db66fb0 <col:28> 'const char *' lvalue ParmVar 0x55e45db33018 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db66fd0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e45db66ff0 <col:40> 'T' lvalue ParmVar 0x55e45db330b8 'x' 'T &'
|         `-DeclRefExpr 0x55e45db67010 <col:43> 'const V' lvalue ParmVar 0x55e45db33158 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e45db33788 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e45db33388 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e45db33408 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e45db336e8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e45db334c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db33568 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55e45db33608 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e45db671e8 <col:76, line:407:5>
|     `-ReturnStmt 0x55e45db671d8 <line:406:9, col:65>
|       `-CallExpr 0x55e45db67198 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db670a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db67118 <col:28> 'const char *' lvalue ParmVar 0x55e45db334c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db67138 <col:37> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int'
|         |-DeclRefExpr 0x55e45db67158 <col:49> 'T' lvalue ParmVar 0x55e45db33568 'x' 'T &'
|         `-DeclRefExpr 0x55e45db67178 <col:52> 'const V' lvalue ParmVar 0x55e45db33608 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e45db33cd8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55e45db337f8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e45db33878 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e45db33c38 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e45db33938 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db339b8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db33a58 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55e45db33af8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e45db67350 <col:85, line:412:5>
|     |-CallExpr 0x55e45db672d0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db67200 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e45db67240 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e45db67250 <col:37> 'const char *' lvalue ParmVar 0x55e45db33938 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e45db67270 <col:46> 'int' lvalue ParmVar 0x55e45db339b8 'flags' 'int'
|     | |-DeclRefExpr 0x55e45db67290 <col:53> 'T' lvalue ParmVar 0x55e45db33a58 'x' 'T &'
|     | `-DeclRefExpr 0x55e45db672b0 <col:56> 'const V' lvalue ParmVar 0x55e45db33af8 'default_value' 'const V &'
|     `-ReturnStmt 0x55e45db67340 <line:411:9, col:17>
|       `-UnaryOperator 0x55e45db67328 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db67318 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db34168 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55e45db33d50 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db33dc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db340c8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db33e88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db33f00 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db33fa8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55e45db674d0 <col:53, line:425:5>
|     `-ReturnStmt 0x55e45db674c0 <line:424:9, col:42>
|       `-CallExpr 0x55e45db67480 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db67380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db67400 <col:21> 'const char *' lvalue ParmVar 0x55e45db33e88 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db67420 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e45db67440 <col:33> 'P' lvalue ParmVar 0x55e45db33f00 'parser' 'P'
|         `-DeclRefExpr 0x55e45db67460 <col:41> 'T' lvalue ParmVar 0x55e45db33fa8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db345b8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55e45db341d8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db34258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db34518 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db34318 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db34390 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db34438 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e45db67648 <col:55, line:429:5>
|     `-ReturnStmt 0x55e45db67638 <line:428:9, col:50>
|       `-CallExpr 0x55e45db675f8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db674f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db67578 <col:21> 'const char *' lvalue ParmVar 0x55e45db34318 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db67598 <col:30> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e45db675b8 <col:41> 'P' lvalue ParmVar 0x55e45db34390 'parser' 'P'
|         `-DeclRefExpr 0x55e45db675d8 <col:49> 'T' lvalue ParmVar 0x55e45db34438 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db34a08 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55e45db34628 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db346a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55e45db34968 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55e45db34768 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e45db347e0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x55e45db34888 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x55e45db677c0 <col:55, line:433:5>
| |   `-ReturnStmt 0x55e45db677b0 <line:432:9, col:51>
| |     `-CallExpr 0x55e45db67770 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e45db67670 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e45db676f0 <col:21> 'const char *' lvalue ParmVar 0x55e45db34768 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55e45db67710 <col:30> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int'
| |       |-DeclRefExpr 0x55e45db67730 <col:42> 'P' lvalue ParmVar 0x55e45db347e0 'parser' 'P'
| |       `-DeclRefExpr 0x55e45db67750 <col:50> 'T' lvalue ParmVar 0x55e45db34888 'x' 'T &'
| `-CXXMethodDecl 0x55e45db96058 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x55e45db95dc0 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x55e45db95e68 <col:39, col:41> col:41 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x55e45db95f38 <col:49, col:52> col:52 x 'unsigned short &'
|-FunctionTemplateDecl 0x55e45db34e58 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55e45db34a78 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db34af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db34db8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db34bb8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db34c30 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db34cd8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55e45db679e8 <col:56, line:437:5>
|     `-ReturnStmt 0x55e45db679d8 <line:436:9, col:63>
|       `-CallExpr 0x55e45db67998 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db677e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db67868 <col:21> 'const char *' lvalue ParmVar 0x55e45db34bb8 'keyword' 'const char *'
|         |-BinaryOperator 0x55e45db67938 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e45db678e8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e45db678c8 <col:30> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e45db67920 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e45db67900 <col:42> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e45db67958 <col:54> 'P' lvalue ParmVar 0x55e45db34c30 'parser' 'P'
|         `-DeclRefExpr 0x55e45db67978 <col:62> 'T' lvalue ParmVar 0x55e45db34cd8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db35388 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55e45db34ec8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db34f48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db352e8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e45db35008 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db35088 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db35100 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db351a8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55e45db67b50 <col:64, line:442:5>
|     |-CallExpr 0x55e45db67ad0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db67a00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e45db67a40 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e45db67a50 <col:30> 'const char *' lvalue ParmVar 0x55e45db35008 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e45db67a70 <col:39> 'int' lvalue ParmVar 0x55e45db35088 'flags' 'int'
|     | |-DeclRefExpr 0x55e45db67a90 <col:46> 'P' lvalue ParmVar 0x55e45db35100 'parser' 'P'
|     | `-DeclRefExpr 0x55e45db67ab0 <col:54> 'T' lvalue ParmVar 0x55e45db351a8 'x' 'T &'
|     `-ReturnStmt 0x55e45db67b40 <line:441:9, col:17>
|       `-UnaryOperator 0x55e45db67b28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db67b18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db35988 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55e45db35400 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db35478 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e45db354f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e45db358e8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e45db355c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db35638 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db356d8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55e45db357a8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e45db67ce8 <col:84, line:458:5>
|     `-ReturnStmt 0x55e45db67cd8 <line:457:9, col:64>
|       `-CallExpr 0x55e45db67c90 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db67b80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db67bf0 <col:28> 'const char *' lvalue ParmVar 0x55e45db355c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db67c10 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e45db67c30 <col:40> 'P' lvalue ParmVar 0x55e45db35638 'parser' 'P'
|         |-DeclRefExpr 0x55e45db67c50 <col:48> 'T' lvalue ParmVar 0x55e45db356d8 'x' 'T &'
|         `-DeclRefExpr 0x55e45db67c70 <col:51> 'const V' lvalue ParmVar 0x55e45db357a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e45db35f08 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e45db35a00 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db35a78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e45db35af8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e45db35e68 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e45db35bc0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db35c38 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db35cd8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55e45db35d78 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e45db67e78 <col:86, line:462:5>
|     `-ReturnStmt 0x55e45db67e68 <line:461:9, col:73>
|       `-CallExpr 0x55e45db67e20 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db67d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db67d80 <col:28> 'const char *' lvalue ParmVar 0x55e45db35bc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db67da0 <col:37> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int'
|         |-DeclRefExpr 0x55e45db67dc0 <col:49> 'P' lvalue ParmVar 0x55e45db35c38 'parser' 'P'
|         |-DeclRefExpr 0x55e45db67de0 <col:57> 'T' lvalue ParmVar 0x55e45db35cd8 'x' 'T &'
|         `-DeclRefExpr 0x55e45db67e00 <col:60> 'const V' lvalue ParmVar 0x55e45db35d78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e45db36568 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55e45db35f80 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db35ff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e45db36078 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e45db364c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e45db36140 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db361c0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db36238 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db362d8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55e45db36378 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e45db68008 <col:95, line:467:5>
|     |-CallExpr 0x55e45db67f80 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db67e90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e45db67ed0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e45db67ee0 <col:37> 'const char *' lvalue ParmVar 0x55e45db36140 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e45db67f00 <col:46> 'int' lvalue ParmVar 0x55e45db361c0 'flags' 'int'
|     | |-DeclRefExpr 0x55e45db67f20 <col:53> 'P' lvalue ParmVar 0x55e45db36238 'parser' 'P'
|     | |-DeclRefExpr 0x55e45db67f40 <col:61> 'T' lvalue ParmVar 0x55e45db362d8 'x' 'T &'
|     | `-DeclRefExpr 0x55e45db67f60 <col:64> 'const V' lvalue ParmVar 0x55e45db36378 'default_value' 'const V &'
|     `-ReturnStmt 0x55e45db67ff8 <line:466:9, col:17>
|       `-UnaryOperator 0x55e45db67fe0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db67fd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db3a620 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55e45db365e8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db36668 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e45db366e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e45db3a580 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e45db367b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db36828 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db368c8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e45db36968 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e45db681b0 <col:63, line:481:5>
|     `-ReturnStmt 0x55e45db681a0 <line:480:9, col:47>
|       `-CallExpr 0x55e45db68158 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db680b8 <col:21> 'const char *' lvalue ParmVar 0x55e45db367b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db680d8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e45db680f8 <col:33> 'P' lvalue ParmVar 0x55e45db36828 'parser' 'P'
|         |-DeclRefExpr 0x55e45db68118 <col:41> 'T1' lvalue ParmVar 0x55e45db368c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e45db68138 <col:45> 'T2' lvalue ParmVar 0x55e45db36968 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e45db3aba8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55e45db3a698 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3a718 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e45db3a798 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e45db3ab08 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e45db3a860 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3a8d8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3a978 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e45db3aa18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e45db68350 <col:65, line:485:5>
|     `-ReturnStmt 0x55e45db68340 <line:484:9, col:55>
|       `-CallExpr 0x55e45db682f8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db681d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db68258 <col:21> 'const char *' lvalue ParmVar 0x55e45db3a860 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db68278 <col:30> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e45db68298 <col:41> 'P' lvalue ParmVar 0x55e45db3a8d8 'parser' 'P'
|         |-DeclRefExpr 0x55e45db682b8 <col:49> 'T1' lvalue ParmVar 0x55e45db3a978 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e45db682d8 <col:53> 'T2' lvalue ParmVar 0x55e45db3aa18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e45db3b128 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55e45db3ac20 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3ac98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e45db3ad18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e45db3b088 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e45db3ade0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3ae58 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3aef8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e45db3af98 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e45db684f0 <col:65, line:489:5>
|     `-ReturnStmt 0x55e45db684e0 <line:488:9, col:56>
|       `-CallExpr 0x55e45db68498 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db683f8 <col:21> 'const char *' lvalue ParmVar 0x55e45db3ade0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db68418 <col:30> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int'
|         |-DeclRefExpr 0x55e45db68438 <col:42> 'P' lvalue ParmVar 0x55e45db3ae58 'parser' 'P'
|         |-DeclRefExpr 0x55e45db68458 <col:50> 'T1' lvalue ParmVar 0x55e45db3aef8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e45db68478 <col:54> 'T2' lvalue ParmVar 0x55e45db3af98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e45db3b6a8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55e45db3b1a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3b218 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e45db3b298 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e45db3b608 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e45db3b360 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3b3d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3b478 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e45db3b518 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e45db68740 <col:66, line:493:5>
|     `-ReturnStmt 0x55e45db68730 <line:492:9, col:68>
|       `-CallExpr 0x55e45db686e8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db68598 <col:21> 'const char *' lvalue ParmVar 0x55e45db3b360 'keyword' 'const char *'
|         |-BinaryOperator 0x55e45db68668 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e45db68618 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e45db685f8 <col:30> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e45db68650 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e45db68630 <col:42> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e45db68688 <col:54> 'P' lvalue ParmVar 0x55e45db3b3d8 'parser' 'P'
|         |-DeclRefExpr 0x55e45db686a8 <col:62> 'T1' lvalue ParmVar 0x55e45db3b478 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e45db686c8 <col:66> 'T2' lvalue ParmVar 0x55e45db3b518 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e45db3bd08 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55e45db3b720 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3b798 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e45db3b818 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e45db3bc68 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e45db3b8e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3b960 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db3b9d8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3ba78 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e45db3bb18 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e45db688d0 <col:74, line:498:5>
|     |-CallExpr 0x55e45db68848 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db68758 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e45db68798 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e45db687a8 <col:30> 'const char *' lvalue ParmVar 0x55e45db3b8e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e45db687c8 <col:39> 'int' lvalue ParmVar 0x55e45db3b960 'flags' 'int'
|     | |-DeclRefExpr 0x55e45db687e8 <col:46> 'P' lvalue ParmVar 0x55e45db3b9d8 'parser' 'P'
|     | |-DeclRefExpr 0x55e45db68808 <col:54> 'T1' lvalue ParmVar 0x55e45db3ba78 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55e45db68828 <col:58> 'T2' lvalue ParmVar 0x55e45db3bb18 'x2' 'T2 &'
|     `-ReturnStmt 0x55e45db688c0 <line:497:9, col:17>
|       `-UnaryOperator 0x55e45db688a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db68898 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db3c068 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55e45db3bd88 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db3bfc8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e45db3be40 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3beb8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55e45db68a18 <col:52, line:509:5>
|     `-ReturnStmt 0x55e45db68a08 <line:508:9, col:44>
|       `-CallExpr 0x55e45db689d0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db68970 <col:26> 'const char *' lvalue ParmVar 0x55e45db3be40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db68990 <col:35> 'int' 0
|         `-DeclRefExpr 0x55e45db689b0 <col:38> 'P' lvalue ParmVar 0x55e45db3beb8 'parser' 'P'
|-FunctionTemplateDecl 0x55e45db3c368 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55e45db3c0d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db3c2c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e45db3c180 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3c1f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e45db68b58 <col:54, line:513:5>
|     `-ReturnStmt 0x55e45db68b48 <line:512:9, col:52>
|       `-CallExpr 0x55e45db68b10 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68a40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db68ab0 <col:26> 'const char *' lvalue ParmVar 0x55e45db3c180 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db68ad0 <col:35> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e45db68af0 <col:46> 'P' lvalue ParmVar 0x55e45db3c1f8 'parser' 'P'
|-FunctionTemplateDecl 0x55e45db3c668 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55e45db3c3d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db3c5c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e45db3c480 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3c4f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e45db68c98 <col:54, line:517:5>
|     `-ReturnStmt 0x55e45db68c88 <line:516:9, col:53>
|       `-CallExpr 0x55e45db68c50 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68b80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db68bf0 <col:26> 'const char *' lvalue ParmVar 0x55e45db3c480 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db68c10 <col:35> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int'
|         `-DeclRefExpr 0x55e45db68c30 <col:47> 'P' lvalue ParmVar 0x55e45db3c4f8 'parser' 'P'
|-FunctionTemplateDecl 0x55e45db3c968 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e45db3c6d0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db3c8c8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e45db3c780 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3c7f8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55e45db68e88 <col:55, line:521:5>
|     `-ReturnStmt 0x55e45db68e78 <line:520:9, col:65>
|       `-CallExpr 0x55e45db68e40 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68cc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db68d30 <col:26> 'const char *' lvalue ParmVar 0x55e45db3c780 'keyword' 'const char *'
|         |-BinaryOperator 0x55e45db68e00 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55e45db68db0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e45db68d90 <col:35> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e45db68de8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e45db68dc8 <col:47> 'const int' lvalue Var 0x55e45db31b00 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e45db68e20 <col:59> 'P' lvalue ParmVar 0x55e45db3c7f8 'parser' 'P'
|-FunctionTemplateDecl 0x55e45db3cd38 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55e45db3c9d0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db3cc98 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e45db3ca80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3cb00 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db3cb78 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55e45db68fc8 <col:63, line:526:5>
|     |-CallExpr 0x55e45db68f50 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db68ea0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55e45db68ee0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55e45db68ef0 <col:35> 'const char *' lvalue ParmVar 0x55e45db3ca80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e45db68f10 <col:44> 'int' lvalue ParmVar 0x55e45db3cb00 'flags' 'int'
|     | `-DeclRefExpr 0x55e45db68f30 <col:51> 'P' lvalue ParmVar 0x55e45db3cb78 'parser' 'P'
|     `-ReturnStmt 0x55e45db68fb8 <line:525:9, col:17>
|       `-UnaryOperator 0x55e45db68fa0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db68f90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db3d188 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55e45db3cda8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3ce28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3d0e8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db3cee8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3cf60 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3d008 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55e45db69120 <col:58, line:541:5>
|     `-ReturnStmt 0x55e45db69110 <line:540:9, col:39>
|       `-CallExpr 0x55e45db690d8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db68ff8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db69078 <col:21> 'const char *' lvalue ParmVar 0x55e45db3cee8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db69098 <col:30> 'P' lvalue ParmVar 0x55e45db3cf60 'parser' 'P'
|         `-DeclRefExpr 0x55e45db690b8 <col:38> 'T' lvalue ParmVar 0x55e45db3d008 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db3d5d8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55e45db3d1f8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3d278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3d538 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db3d338 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3d3b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3d458 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e45db69258 <col:60, line:545:5>
|     `-ReturnStmt 0x55e45db69248 <line:544:9, col:41>
|       `-CallExpr 0x55e45db69210 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db69148 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db691b0 <col:23> 'const char *' lvalue ParmVar 0x55e45db3d338 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db691d0 <col:32> 'P' lvalue ParmVar 0x55e45db3d3b0 'parser' 'P'
|         `-DeclRefExpr 0x55e45db691f0 <col:40> 'T' lvalue ParmVar 0x55e45db3d458 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db3da28 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55e45db3d648 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3d6c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3d988 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db3d788 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3d800 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3d8a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e45db69390 <col:60, line:549:5>
|     `-ReturnStmt 0x55e45db69380 <line:548:9, col:41>
|       `-CallExpr 0x55e45db69348 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db69280 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db692e8 <col:23> 'const char *' lvalue ParmVar 0x55e45db3d788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db69308 <col:32> 'P' lvalue ParmVar 0x55e45db3d800 'parser' 'P'
|         `-DeclRefExpr 0x55e45db69328 <col:40> 'T' lvalue ParmVar 0x55e45db3d8a8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db3de78 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e45db3da98 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3db18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3ddd8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db3dbd8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3dc50 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3dcf8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55e45db694c8 <col:61, line:553:5>
|     `-ReturnStmt 0x55e45db694b8 <line:552:9, col:42>
|       `-CallExpr 0x55e45db69480 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db693b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db69420 <col:24> 'const char *' lvalue ParmVar 0x55e45db3dbd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db69440 <col:33> 'P' lvalue ParmVar 0x55e45db3dc50 'parser' 'P'
|         `-DeclRefExpr 0x55e45db69460 <col:41> 'T' lvalue ParmVar 0x55e45db3dcf8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db3e358 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55e45db3dee8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3df68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3e2b8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e45db3e028 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3e0a8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db3e120 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3e1c8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55e45db69640 <col:69, line:557:5>
|     `-ReturnStmt 0x55e45db69630 <line:556:9, col:46>
|       `-CallExpr 0x55e45db695f0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db694f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db69570 <col:21> 'const char *' lvalue ParmVar 0x55e45db3e028 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db69590 <col:30> 'int' lvalue ParmVar 0x55e45db3e0a8 'flags' 'int'
|         |-DeclRefExpr 0x55e45db695b0 <col:37> 'P' lvalue ParmVar 0x55e45db3e120 'parser' 'P'
|         `-DeclRefExpr 0x55e45db695d0 <col:45> 'T' lvalue ParmVar 0x55e45db3e1c8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db3e668 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55e45db3e3d0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db3e5c8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e45db3e480 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3e4f8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55e45db69780 <col:56, line:571:5>
|     `-ReturnStmt 0x55e45db69770 <line:570:9, col:48>
|       `-CallExpr 0x55e45db69738 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db69668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db696d8 <col:30> 'const char *' lvalue ParmVar 0x55e45db3e480 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db696f8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55e45db69718 <col:42> 'P' lvalue ParmVar 0x55e45db3e4f8 'parser' 'P'
|-FunctionTemplateDecl 0x55e45db3e9f8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55e45db3e6d0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db3e958 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e45db3e780 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3e800 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db3e878 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e45db69950 <col:67, line:576:5>
|     |-CallExpr 0x55e45db698d8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db69798 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e45db697d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e45db697e8 <col:39> 'const char *' lvalue ParmVar 0x55e45db3e780 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e45db69898 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e45db69848 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e45db69808 <col:48> 'int' lvalue ParmVar 0x55e45db3e800 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e45db69880 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e45db69860 <col:56> 'const int' lvalue Var 0x55e45db31cf0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55e45db698b8 <col:68> 'P' lvalue ParmVar 0x55e45db3e878 'parser' 'P'
|     `-ReturnStmt 0x55e45db69940 <line:575:9, col:17>
|       `-UnaryOperator 0x55e45db69928 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db69918 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db3ee48 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55e45db3ea68 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3eae8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3eda8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e45db3eba8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3ec20 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3ecc8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55e45db69ac0 <col:62, line:592:5>
|     `-ReturnStmt 0x55e45db69ab0 <line:591:9, col:51>
|       `-CallExpr 0x55e45db69a70 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db69980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db699f0 <col:30> 'const char *' lvalue ParmVar 0x55e45db3eba8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db69a10 <col:39> 'int' 0
|         |-DeclRefExpr 0x55e45db69a30 <col:42> 'P' lvalue ParmVar 0x55e45db3ec20 'parser' 'P'
|         `-DeclRefExpr 0x55e45db69a50 <col:50> 'T' lvalue ParmVar 0x55e45db3ecc8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db3f328 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55e45db3eeb8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3ef38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3f288 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e45db3eff8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3f078 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db3f0f0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3f198 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55e45db69cb8 <col:73, line:597:5>
|     |-CallExpr 0x55e45db69c38 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db69ad8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e45db69b18 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e45db69b28 <col:39> 'const char *' lvalue ParmVar 0x55e45db3eff8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e45db69bd8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e45db69b88 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e45db69b48 <col:48> 'int' lvalue ParmVar 0x55e45db3f078 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e45db69bc0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e45db69ba0 <col:56> 'const int' lvalue Var 0x55e45db31cf0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e45db69bf8 <col:68> 'P' lvalue ParmVar 0x55e45db3f0f0 'parser' 'P'
|     | `-DeclRefExpr 0x55e45db69c18 <col:76> 'T' lvalue ParmVar 0x55e45db3f198 'x' 'T &'
|     `-ReturnStmt 0x55e45db69ca8 <line:596:9, col:17>
|       `-UnaryOperator 0x55e45db69c90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db69c80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db3f8d8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55e45db3f3a0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3f418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db3f838 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e45db3f4d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3f550 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db3f710 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e45db69e28 <col:65, line:614:5>
|     `-ReturnStmt 0x55e45db69e18 <line:613:9, col:46>
|       `-CallExpr 0x55e45db69dd8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db69ce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db69d58 <col:25> 'const char *' lvalue ParmVar 0x55e45db3f4d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db69d78 <col:34> 'int' 0
|         |-DeclRefExpr 0x55e45db69d98 <col:37> 'P' lvalue ParmVar 0x55e45db3f550 'parser' 'P'
|         `-DeclRefExpr 0x55e45db69db8 <col:45> 'Vector<T>' lvalue ParmVar 0x55e45db3f710 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e45db3fd08 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55e45db3f948 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db3fc68 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55e45db3fa00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3fb50 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e45db6a040 <col:55, line:618:5>
|     `-ReturnStmt 0x55e45db6a030 <line:617:9, col:55>
|       `-CallExpr 0x55e45db69ff0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db69e50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db69ec0 <col:25> 'const char *' lvalue ParmVar 0x55e45db3fa00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e45db69ee0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55e45db69fb0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e45db69fd0 <col:54> 'Vector<T>' lvalue ParmVar 0x55e45db3fb50 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e45db402d8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55e45db3fd70 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db3fde8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db40238 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e45db3fea8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db3ff28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db3ffa0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db400f0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e45db6a238 <col:76, line:623:5>
|     |-CallExpr 0x55e45db6a1b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e45db6a058 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55e45db6a098 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55e45db6a0a8 <col:34> 'const char *' lvalue ParmVar 0x55e45db3fea8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e45db6a158 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e45db6a108 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e45db6a0c8 <col:43> 'int' lvalue ParmVar 0x55e45db3ff28 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e45db6a140 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e45db6a120 <col:51> 'const int' lvalue Var 0x55e45db31cf0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e45db6a178 <col:63> 'P' lvalue ParmVar 0x55e45db3ffa0 'parser' 'P'
|     | `-DeclRefExpr 0x55e45db6a198 <col:71> 'Vector<T>' lvalue ParmVar 0x55e45db400f0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55e45db6a228 <line:622:9, col:17>
|       `-UnaryOperator 0x55e45db6a210 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db6a200 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db40818 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55e45db40350 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db403c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db40778 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55e45db40488 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db40508 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db40650 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e45db6a4a0 <col:66, line:627:5>
|     `-ReturnStmt 0x55e45db6a490 <line:626:9, col:59>
|       `-CallExpr 0x55e45db6a450 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e45db6a268 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e45db6a2d8 <col:25> 'const char *' lvalue ParmVar 0x55e45db40488 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e45db6a2f8 <col:34> 'int' lvalue ParmVar 0x55e45db40508 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55e45db6a410 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e45db6a430 <col:58> 'Vector<T>' lvalue ParmVar 0x55e45db40650 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55e45db408a8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55e45db6a520 <col:25, line:633:5>
|   `-ReturnStmt 0x55e45db6a510 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55e45db6a4f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e45db6a4c8 <col:16> 'const bool' lvalue ->_status 0x55e45db4ca78
|         `-CXXThisExpr 0x55e45db6a4b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e45db40a28 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55e45db40960 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55e45db6a608 <col:27, line:639:5>
|   |-BinaryOperator 0x55e45db6a5b0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e45db6a538 <col:9> 'bool' lvalue ParmVar 0x55e45db40960 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e45db6a598 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e45db6a568 <col:13> 'bool' lvalue ->_status 0x55e45db4ca78
|   |     `-CXXThisExpr 0x55e45db6a558 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e45db6a5f8 <line:638:9, col:17>
|     `-UnaryOperator 0x55e45db6a5e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45db6a5d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e45db40ba8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e45db40ae8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55e45db6a6f8 <col:39, line:644:5>
|   |-BinaryOperator 0x55e45db6a6a0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e45db6a628 <col:9> 'bool' lvalue ParmVar 0x55e45db40ae8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e45db6a688 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e45db6a658 <col:13> 'const bool' lvalue ->_status 0x55e45db4ca78
|   |     `-CXXThisExpr 0x55e45db6a648 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e45db6a6e8 <line:643:9, col:17>
|     `-UnaryOperator 0x55e45db6a6d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45db6a6c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e45db40c70 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55e45db6a7a0 <col:30, line:651:5>
|   `-ReturnStmt 0x55e45db6a790 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55e45db6a778 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e45db6a748 <col:16> 'bool' lvalue ->_read_status 0x55e45db2a430
|         `-ImplicitCastExpr 0x55e45db6a728 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55e45db6a718 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e45db40db8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55e45db40d28 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55e45db6a8a8 <col:32, line:658:5>
|   |-BinaryOperator 0x55e45db6a850 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e45db6a7b8 <col:9> 'bool' lvalue ParmVar 0x55e45db40d28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e45db6a838 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e45db6a808 <col:13> 'bool' lvalue ->_read_status 0x55e45db2a430
|   |     `-ImplicitCastExpr 0x55e45db6a7e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e45db6a7d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e45db6a898 <line:657:9, col:17>
|     `-UnaryOperator 0x55e45db6a880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45db6a870 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e45db40f08 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e45db40e78 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55e45db6a9b8 <col:44, line:663:5>
|   |-BinaryOperator 0x55e45db6a960 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e45db6a8c8 <col:9> 'bool' lvalue ParmVar 0x55e45db40e78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e45db6a948 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e45db6a918 <col:13> 'bool' lvalue ->_read_status 0x55e45db2a430
|   |     `-ImplicitCastExpr 0x55e45db6a8f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e45db6a8e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e45db6a9a8 <line:662:9, col:17>
|     `-UnaryOperator 0x55e45db6a990 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45db6a980 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e45db40fd0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55e45db41098 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55e45db41160 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55e45db41228 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55e45db41538 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55e45db412c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db41498 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55e45db413a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55e45db6ad70 <col:19, line:706:5>
|     `-IfStmt 0x55e45db6ad48 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55e45db6aab8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55e45db6ac78 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55e45db6ac48 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55e45db6ac08 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55e45db6ab10 <col:42> '<bound member function type>' ->simple_slot 0x55e45db65800
|       |     | `-CXXThisExpr 0x55e45db6ab00 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55e45db6aba8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55e45db6ab60 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55e45d8b79e8
|       |     | `-DeclRefExpr 0x55e45db6ab40 <col:55> 'T' lvalue ParmVar 0x55e45db413a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55e45db6abe8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55e45db6ad38 <line:705:13, col:34>
|         `-CallExpr 0x55e45db6ad10 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55e45db6ac98 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55e45db6acf0 <col:33> 'T' lvalue ParmVar 0x55e45db413a8 'x' 'T &'
|-FunctionTemplateDecl 0x55e45db41808 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55e45db41598 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db41768 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55e45db41678 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55e45db6b150 <col:31, line:717:5>
|     |-DeclStmt 0x55e45db6aeb0 <line:713:9, col:23>
|     | `-VarDecl 0x55e45db6ad98 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55e45db6ae88 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e45db6ae10 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e45db6ae68 <col:21> 'T' lvalue ParmVar 0x55e45db41678 'x' 'T &'
|     |-IfStmt 0x55e45db6b100 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55e45db6afa8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55e45db6b0e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e45db6b080 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e45db6b010 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|     |   | `-DeclRefExpr 0x55e45db6aff0 <col:14> 'T *' lvalue Var 0x55e45db6ad98 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55e45db6b0c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55e45db6b138 <line:716:9, col:16>
|       `-DeclRefExpr 0x55e45db6b118 <col:16> 'T *' lvalue Var 0x55e45db6ad98 's' 'T *'
|-FunctionTemplateDecl 0x55e45db41c18 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55e45db41868 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e45db418e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e45db41b78 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55e45db419c8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55e45db41a68 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55e45db6b460 <col:37, line:726:5>
|     |-IfStmt 0x55e45db6b3f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55e45db6b410 <line:723:13, col:26>
|     | | `-VarDecl 0x55e45db6b1b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55e45db6b2a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55e45db6b230 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55e45db6b288 <col:25> 'T' lvalue ParmVar 0x55e45db419c8 'x' 'T &'
|     | |-DeclRefExpr 0x55e45db6b2d0 <col:16> 'T *' lvalue Var 0x55e45db6b1b8 's' 'T *'
|     | `-BinaryOperator 0x55e45db6b3d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e45db6b380 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e45db6b310 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|     |   | `-DeclRefExpr 0x55e45db6b2f0 <col:14> 'T *' lvalue Var 0x55e45db6b1b8 's' 'T *'
|     |   `-DeclRefExpr 0x55e45db6b3b0 <col:18> 'const V' lvalue ParmVar 0x55e45db41a68 'value' 'const V &'
|     `-ReturnStmt 0x55e45db6b450 <line:725:9, col:17>
|       `-UnaryOperator 0x55e45db6b438 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e45db6b428 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e45db42018 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55e45db41c80 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e45db41f78 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55e45db41d30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db41db0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db41e58 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55e45db6c280 <col:65, line:737:5>
|     |-DeclStmt 0x55e45db6b4f8 <line:732:9, col:26>
|     | `-VarDecl 0x55e45db6b490 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e45db6c248 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55e45db6c268 <line:733:13, col:58>
|       | `-VarDecl 0x55e45db6b520 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e45db6b700 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e45db6b6d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e45db6b6b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e45db6b698 <col:26, col:58> 'String' (CXXTemporary 0x55e45db6b698)
|       |           `-CXXMemberCallExpr 0x55e45db6b628 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e45db6b598 <col:26> '<bound member function type>' ->find 0x55e45db634e8
|       |             | `-CXXThisExpr 0x55e45db6b588 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e45db6b660 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db6b5c8 <col:31> 'const char *' lvalue ParmVar 0x55e45db41d30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e45db6b678 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db6b5e8 <col:40> 'int' lvalue ParmVar 0x55e45db41db0 'flags' 'int'
|       |             `-DeclRefExpr 0x55e45db6b608 <col:47> 'Args::Slot *' lvalue Var 0x55e45db6b490 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e45db6b7b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e45db6b7a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e45db6b780 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e45db6b750 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|       |       `-ImplicitCastExpr 0x55e45db6b738 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e45db6b718 <col:20> 'String' lvalue Var 0x55e45db6b520 'str' 'String'
|       `-CompoundStmt 0x55e45db6c228 <col:61, line:736:9>
|         |-DeclStmt 0x55e45db6bc70 <line:734:13, col:76>
|         | `-VarDecl 0x55e45db6b808 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e45db6bc40 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e45db6bbb0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e45db6bbf8 <col:60> 'T' lvalue ParmVar 0x55e45db41e58 'variable' 'T &'
|         |     `-UnaryOperator 0x55e45db6bc28 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e45db6bc18 <col:71> 'Args *' this
|         `-CallExpr 0x55e45db6c1f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55e45db6bc98 <col:13> '<bound member function type>' ->postparse 0x55e45db636f8
|           | `-CXXThisExpr 0x55e45db6bc88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e45db6c1b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e45db6bcc8 <col:23> 'T *' lvalue Var 0x55e45db6b808 's' 'T *'
|           | `-CallExpr 0x55e45db6c178 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e45db6bf50 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55e45db6c050 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55e45db6c070 <col:86> 'String' lvalue Var 0x55e45db6b520 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e45db6c120 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e45db6c0b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|           |   | `-DeclRefExpr 0x55e45db6c090 <col:92> 'T *' lvalue Var 0x55e45db6b808 's' 'T *'
|           |   `-UnaryOperator 0x55e45db6c160 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e45db6c150 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55e45db6c1d8 <col:103> 'Args::Slot *' lvalue Var 0x55e45db6b490 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e45db488f0 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e45db42088 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e45db42108 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e45db424c8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e45db421c8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db42248 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db422e8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55e45db42388 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55e45db6d120 <col:88, line:745:5>
|     |-DeclStmt 0x55e45db6c318 <line:741:9, col:26>
|     | `-VarDecl 0x55e45db6c2b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e45db6c538 <line:742:9, col:55>
|     | `-VarDecl 0x55e45db6c340 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e45db6c520 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e45db6c4f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e45db6c4d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e45db6c4b8 <col:22, col:54> 'String' (CXXTemporary 0x55e45db6c4b8)
|     |           `-CXXMemberCallExpr 0x55e45db6c448 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e45db6c3b8 <col:22> '<bound member function type>' ->find 0x55e45db634e8
|     |             | `-CXXThisExpr 0x55e45db6c3a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e45db6c480 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e45db6c3e8 <col:27> 'const char *' lvalue ParmVar 0x55e45db421c8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e45db6c498 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e45db6c408 <col:36> 'int' lvalue ParmVar 0x55e45db42248 'flags' 'int'
|     |             `-DeclRefExpr 0x55e45db6c428 <col:43> 'Args::Slot *' lvalue Var 0x55e45db6c2b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e45db6c910 <line:743:9, col:72>
|     | `-VarDecl 0x55e45db6c588 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e45db6c8e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e45db6c850 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e45db6c898 <col:56> 'T' lvalue ParmVar 0x55e45db422e8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e45db6c8c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e45db6c8b8 <col:67> 'Args *' this
|     `-CallExpr 0x55e45db6d0f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55e45db6c938 <col:9> '<bound member function type>' ->postparse 0x55e45db636f8
|       | `-CXXThisExpr 0x55e45db6c928 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e45db6d0b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e45db6c968 <col:19> 'T *' lvalue Var 0x55e45db6c588 's' 'T *'
|       | `-ParenExpr 0x55e45db6d090 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55e45db6d060 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e45db6d048 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e45db6d030 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e45db6d010 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e45db6cfe0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|       |     |       `-ImplicitCastExpr 0x55e45db6cfc8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e45db6c988 <col:25> 'String' lvalue Var 0x55e45db6c340 'str' 'String'
|       |     |-CallExpr 0x55e45db6ce38 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e45db6cc10 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55e45db6cd10 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55e45db6cd30 <col:89> 'String' lvalue Var 0x55e45db6c340 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e45db6cde0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e45db6cd70 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|       |     | | `-DeclRefExpr 0x55e45db6cd50 <col:95> 'T *' lvalue Var 0x55e45db6c588 's' 'T *'
|       |     | `-UnaryOperator 0x55e45db6ce20 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e45db6ce10 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55e45db6cfa8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55e45db6cf88 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e45db6cf58 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e45db6cf08 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e45db6ce98 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|       |         | | `-DeclRefExpr 0x55e45db6ce78 <col:109> 'T *' lvalue Var 0x55e45db6c588 's' 'T *'
|       |         | `-DeclRefExpr 0x55e45db6cf38 <col:113> 'const V' lvalue ParmVar 0x55e45db42388 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e45db6cf78 <col:120> 'bool' true
|       `-DeclRefExpr 0x55e45db6d0d0 <col:128> 'Args::Slot *' lvalue Var 0x55e45db6c2b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e45db48e28 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55e45db48968 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db489e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db48d88 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e45db48aa8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db48b28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db48ba0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db48c48 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55e45db6fee8 <col:75, line:754:5>
|     |-DeclStmt 0x55e45db6d1c8 <line:749:9, col:26>
|     | `-VarDecl 0x55e45db6d160 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e45db6feb0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55e45db6fed0 <line:750:13, col:58>
|       | `-VarDecl 0x55e45db6d1f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e45db6d3d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e45db6d3a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e45db6d388 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e45db6d368 <col:26, col:58> 'String' (CXXTemporary 0x55e45db6d368)
|       |           `-CXXMemberCallExpr 0x55e45db6d2f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e45db6d268 <col:26> '<bound member function type>' ->find 0x55e45db634e8
|       |             | `-CXXThisExpr 0x55e45db6d258 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e45db6d330 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db6d298 <col:31> 'const char *' lvalue ParmVar 0x55e45db48aa8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e45db6d348 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db6d2b8 <col:40> 'int' lvalue ParmVar 0x55e45db48b28 'flags' 'int'
|       |             `-DeclRefExpr 0x55e45db6d2d8 <col:47> 'Args::Slot *' lvalue Var 0x55e45db6d160 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e45db6d488 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e45db6d470 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e45db6d450 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e45db6d420 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|       |       `-ImplicitCastExpr 0x55e45db6d408 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e45db6d3e8 <col:20> 'String' lvalue Var 0x55e45db6d1f0 'str' 'String'
|       `-CompoundStmt 0x55e45db6fe90 <col:61, line:753:9>
|         |-DeclStmt 0x55e45db6fa30 <line:751:13, col:63>
|         | `-VarDecl 0x55e45db6d4d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e45db6fa00 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e45db6f970 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e45db6f9b8 <col:47> 'T' lvalue ParmVar 0x55e45db48c48 'variable' 'T &'
|         |     `-UnaryOperator 0x55e45db6f9e8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e45db6f9d8 <col:58> 'Args *' this
|         `-CallExpr 0x55e45db6fe60 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55e45db6fa58 <col:13> '<bound member function type>' ->postparse 0x55e45db636f8
|           | `-CXXThisExpr 0x55e45db6fa48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e45db6fe20 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e45db6fa88 <col:23> 'T *' lvalue Var 0x55e45db6d4d8 's' 'T *'
|           | `-CallExpr 0x55e45db6fde0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e45db6fc70 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e45db6fcb8 <col:56> 'P' lvalue ParmVar 0x55e45db48ba0 'parser' 'P'
|           |   |-DeclRefExpr 0x55e45db6fcd8 <col:64> 'String' lvalue Var 0x55e45db6d1f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e45db6fd88 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e45db6fd18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|           |   | `-DeclRefExpr 0x55e45db6fcf8 <col:70> 'T *' lvalue Var 0x55e45db6d4d8 's' 'T *'
|           |   `-UnaryOperator 0x55e45db6fdc8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e45db6fdb8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55e45db6fe40 <col:81> 'Args::Slot *' lvalue Var 0x55e45db6d160 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e45db49488 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e45db48ea0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e45db48f18 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55e45db48f98 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e45db493e8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e45db49060 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db490e0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db49158 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db491f8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55e45db49298 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55e45db70c78 <col:98, line:762:5>
|     |-DeclStmt 0x55e45db6ff80 <line:758:9, col:26>
|     | `-VarDecl 0x55e45db6ff18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e45db701a0 <line:759:9, col:55>
|     | `-VarDecl 0x55e45db6ffa8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e45db70188 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e45db70158 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e45db70140 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e45db70120 <col:22, col:54> 'String' (CXXTemporary 0x55e45db70120)
|     |           `-CXXMemberCallExpr 0x55e45db700b0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e45db70020 <col:22> '<bound member function type>' ->find 0x55e45db634e8
|     |             | `-CXXThisExpr 0x55e45db70010 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e45db700e8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e45db70050 <col:27> 'const char *' lvalue ParmVar 0x55e45db49060 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e45db70100 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e45db70070 <col:36> 'int' lvalue ParmVar 0x55e45db490e0 'flags' 'int'
|     |             `-DeclRefExpr 0x55e45db70090 <col:43> 'Args::Slot *' lvalue Var 0x55e45db6ff18 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e45db705c0 <line:760:9, col:59>
|     | `-VarDecl 0x55e45db701f8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e45db70590 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e45db70500 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e45db70548 <col:43> 'T' lvalue ParmVar 0x55e45db491f8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e45db70578 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e45db70568 <col:54> 'Args *' this
|     `-CallExpr 0x55e45db70c48 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55e45db705e8 <col:9> '<bound member function type>' ->postparse 0x55e45db636f8
|       | `-CXXThisExpr 0x55e45db705d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e45db70c08 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e45db70618 <col:19> 'T *' lvalue Var 0x55e45db701f8 's' 'T *'
|       | `-ParenExpr 0x55e45db70be8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55e45db70bb8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e45db70ba0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e45db70b88 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e45db70b68 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e45db70b38 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|       |     |       `-ImplicitCastExpr 0x55e45db70b20 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e45db70638 <col:25> 'String' lvalue Var 0x55e45db6ffa8 'str' 'String'
|       |     |-CallExpr 0x55e45db70990 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e45db70820 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55e45db70868 <col:59> 'P' lvalue ParmVar 0x55e45db49158 'parser' 'P'
|       |     | |-DeclRefExpr 0x55e45db70888 <col:67> 'String' lvalue Var 0x55e45db6ffa8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e45db70938 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e45db708c8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|       |     | | `-DeclRefExpr 0x55e45db708a8 <col:73> 'T *' lvalue Var 0x55e45db701f8 's' 'T *'
|       |     | `-UnaryOperator 0x55e45db70978 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e45db70968 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55e45db70b00 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55e45db70ae0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e45db70ab0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e45db70a60 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e45db709f0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|       |         | | `-DeclRefExpr 0x55e45db709d0 <col:87> 'T *' lvalue Var 0x55e45db701f8 's' 'T *'
|       |         | `-DeclRefExpr 0x55e45db70a90 <col:91> 'const V' lvalue ParmVar 0x55e45db49298 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e45db70ad0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55e45db70c28 <col:106> 'Args::Slot *' lvalue Var 0x55e45db6ff18 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e45db49af8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55e45db49508 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db49588 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e45db49608 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e45db49a58 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e45db496d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db49750 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db497c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db49868 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55e45db49908 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55e45db71c58 <col:60, line:773:5>
|     |-DeclStmt 0x55e45db70d20 <line:767:9, col:26>
|     | `-VarDecl 0x55e45db70cb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e45db71c20 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55e45db71c40 <line:768:13, col:58>
|       | `-VarDecl 0x55e45db70d48 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e45db70f28 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e45db70ef8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e45db70ee0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e45db70ec0 <col:26, col:58> 'String' (CXXTemporary 0x55e45db70ec0)
|       |           `-CXXMemberCallExpr 0x55e45db70e50 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e45db70dc0 <col:26> '<bound member function type>' ->find 0x55e45db634e8
|       |             | `-CXXThisExpr 0x55e45db70db0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e45db70e88 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db70df0 <col:31> 'const char *' lvalue ParmVar 0x55e45db496d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e45db70ea0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db70e10 <col:40> 'int' lvalue ParmVar 0x55e45db49750 'flags' 'int'
|       |             `-DeclRefExpr 0x55e45db70e30 <col:47> 'Args::Slot *' lvalue Var 0x55e45db70cb8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e45db70fe0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e45db70fc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e45db70fa8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e45db70f78 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|       |       `-ImplicitCastExpr 0x55e45db70f60 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e45db70f40 <col:20> 'String' lvalue Var 0x55e45db70d48 'str' 'String'
|       `-CompoundStmt 0x55e45db71bf8 <col:61, line:772:9>
|         |-DeclStmt 0x55e45db71320 <line:769:13, col:66>
|         | `-VarDecl 0x55e45db71038 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55e45db712f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e45db71260 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e45db712a8 <col:49> 'T1' lvalue ParmVar 0x55e45db49868 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55e45db712d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e45db712c8 <col:61> 'Args *' this
|         |-DeclStmt 0x55e45db71690 <line:770:13, col:66>
|         | `-VarDecl 0x55e45db713a8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55e45db71660 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e45db715d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e45db71618 <col:49> 'T2' lvalue ParmVar 0x55e45db49908 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55e45db71648 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e45db71638 <col:61> 'Args *' this
|         `-CallExpr 0x55e45db71bc8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55e45db716b8 <col:13> '<bound member function type>' ->postparse 0x55e45db636f8
|           | `-CXXThisExpr 0x55e45db716a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e45db71b88 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55e45db71728 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55e45db716e8 <col:23> 'T1 *' lvalue Var 0x55e45db71038 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55e45db71708 <col:29> 'T2 *' lvalue Var 0x55e45db713a8 's2' 'T2 *'
|           | `-CallExpr 0x55e45db71b40 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e45db71910 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e45db71958 <col:63> 'P' lvalue ParmVar 0x55e45db497c8 'parser' 'P'
|           |   |-DeclRefExpr 0x55e45db71978 <col:71> 'String' lvalue Var 0x55e45db70d48 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e45db71a28 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e45db719b8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|           |   | `-DeclRefExpr 0x55e45db71998 <col:77> 'T1 *' lvalue Var 0x55e45db71038 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55e45db71ae8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e45db71a78 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|           |   | `-DeclRefExpr 0x55e45db71a58 <col:82> 'T2 *' lvalue Var 0x55e45db713a8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55e45db71b28 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e45db71b18 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55e45db71ba8 <col:94> 'Args::Slot *' lvalue Var 0x55e45db70cb8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e45db49ee8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55e45db49b78 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db49e48 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e45db49c30 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db49cb0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db49d28 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e45db72170 <col:67, line:780:5>
|     |-DeclStmt 0x55e45db71cf0 <line:777:9, col:26>
|     | `-VarDecl 0x55e45db71c88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e45db72138 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55e45db72158 <line:778:13, col:58>
|       | `-VarDecl 0x55e45db71d18 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e45db71ef8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e45db71ec8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e45db71eb0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e45db71e90 <col:26, col:58> 'String' (CXXTemporary 0x55e45db71e90)
|       |           `-CXXMemberCallExpr 0x55e45db71e20 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e45db71d90 <col:26> '<bound member function type>' ->find 0x55e45db634e8
|       |             | `-CXXThisExpr 0x55e45db71d80 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e45db71e58 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db71dc0 <col:31> 'const char *' lvalue ParmVar 0x55e45db49c30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e45db71e70 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e45db71de0 <col:40> 'int' lvalue ParmVar 0x55e45db49cb0 'flags' 'int'
|       |             `-DeclRefExpr 0x55e45db71e00 <col:47> 'Args::Slot *' lvalue Var 0x55e45db71c88 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e45db71fb0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e45db71f98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e45db71f78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e45db71f48 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|       |       `-ImplicitCastExpr 0x55e45db71f30 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e45db71f10 <col:20> 'String' lvalue Var 0x55e45db71d18 'str' 'String'
|       `-CallExpr 0x55e45db72108 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55e45db71fd8 <col:13> '<bound member function type>' ->postparse 0x55e45db636f8
|         | `-CXXThisExpr 0x55e45db71fc8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55e45db720b8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55e45db72028 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55e45db72008 <col:23> 'P' lvalue ParmVar 0x55e45db49d28 'parser' 'P'
|         | |-DeclRefExpr 0x55e45db72070 <col:36> 'String' lvalue Var 0x55e45db71d18 'str' 'String'
|         | `-UnaryOperator 0x55e45db720a0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55e45db72090 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55e45db720e8 <col:49> 'Args::Slot *' lvalue Var 0x55e45db71c88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e45db4a288 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e45db49f58 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e45db4a1e8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e45db4a010 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db4a090 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db4a108 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55e45db72ae0 <col:71, line:792:5>
|     |-DeclStmt 0x55e45db72208 <line:784:9, col:26>
|     | `-VarDecl 0x55e45db721a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e45db722d8 <line:785:9, col:29>
|     | `-VarDecl 0x55e45db72238 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e45db722c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e45db722a0 <col:28> 'int' 1
|     |-WhileStmt 0x55e45db72990 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55e45db729b0 <line:786:16, col:61>
|     | | `-VarDecl 0x55e45db72300 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e45db724e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e45db724b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e45db72498 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e45db72478 <col:29, col:61> 'String' (CXXTemporary 0x55e45db72478)
|     | |           `-CXXMemberCallExpr 0x55e45db72408 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e45db72378 <col:29> '<bound member function type>' ->find 0x55e45db634e8
|     | |             | `-CXXThisExpr 0x55e45db72368 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e45db72440 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e45db723a8 <col:34> 'const char *' lvalue ParmVar 0x55e45db4a010 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e45db72458 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e45db723c8 <col:43> 'int' lvalue ParmVar 0x55e45db4a090 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e45db723e8 <col:50> 'Args::Slot *' lvalue Var 0x55e45db721a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e45db72598 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e45db72580 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e45db72560 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e45db72530 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|     | |       `-ImplicitCastExpr 0x55e45db72518 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e45db724f8 <col:23> 'String' lvalue Var 0x55e45db72300 'str' 'String'
|     | `-CompoundStmt 0x55e45db72968 <col:64, line:790:9>
|     |   |-CallExpr 0x55e45db726f0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55e45db725c0 <col:13> '<bound member function type>' ->postparse 0x55e45db636f8
|     |   | | `-CXXThisExpr 0x55e45db725b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e45db726a0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e45db72610 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e45db725f0 <col:23> 'P' lvalue ParmVar 0x55e45db4a108 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e45db72658 <col:36> 'String' lvalue Var 0x55e45db72300 'str' 'String'
|     |   | | `-UnaryOperator 0x55e45db72688 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e45db72678 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55e45db726d0 <col:49> 'Args::Slot *' lvalue Var 0x55e45db721a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e45db72888 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e45db72720 <col:13> 'int' lvalue Var 0x55e45db72238 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e45db72870 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e45db72850 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e45db727b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e45db72798 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e45db72780 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e45db72740 <col:28> 'int' lvalue Var 0x55e45db72238 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e45db72760 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e45db72838 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e45db72808 <col:49> 'bool' lvalue ->_read_status 0x55e45db2a430
|     |   |         `-ImplicitCastExpr 0x55e45db727e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e45db727d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e45db72938 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e45db728a8 <col:13> 'int' lvalue ParmVar 0x55e45db4a090 'flags' 'int'
|     |     `-UnaryOperator 0x55e45db72920 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e45db72908 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e45db728e8 <col:23> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e45db72ac0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e45db729f8 <col:9> 'bool' lvalue ->_read_status 0x55e45db2a430
|       | `-ImplicitCastExpr 0x55e45db729d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e45db729c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e45db72aa0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e45db72a80 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e45db72a68 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e45db72a28 <col:25> 'int' lvalue Var 0x55e45db72238 'read_status' 'int'
|           `-IntegerLiteral 0x55e45db72a48 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e45db4a768 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e45db4a2f8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db4a378 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db4a6c8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e45db4a438 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db4a4b8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db4a530 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db4a5d8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55e45db73a70 <col:84, line:805:5>
|     |-DeclStmt 0x55e45db72b88 <line:796:9, col:26>
|     | `-VarDecl 0x55e45db72b20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e45db72c58 <line:797:9, col:29>
|     | `-VarDecl 0x55e45db72bb8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e45db72c40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e45db72c20 <col:28> 'int' 1
|     |-DeclStmt 0x55e45db72f90 <line:798:9, col:71>
|     | `-VarDecl 0x55e45db72ca8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e45db72f60 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e45db72ed0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55e45db72f18 <col:55> 'T' lvalue ParmVar 0x55e45db4a5d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e45db72f48 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e45db72f38 <col:66> 'Args *' this
|     |-WhileStmt 0x55e45db73920 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55e45db73940 <line:799:16, col:61>
|     | | `-VarDecl 0x55e45db72fb8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e45db73198 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e45db73168 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e45db73150 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e45db73130 <col:29, col:61> 'String' (CXXTemporary 0x55e45db73130)
|     | |           `-CXXMemberCallExpr 0x55e45db730c0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e45db73030 <col:29> '<bound member function type>' ->find 0x55e45db634e8
|     | |             | `-CXXThisExpr 0x55e45db73020 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e45db730f8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e45db73060 <col:34> 'const char *' lvalue ParmVar 0x55e45db4a438 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e45db73110 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e45db73080 <col:43> 'int' lvalue ParmVar 0x55e45db4a4b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e45db730a0 <col:50> 'Args::Slot *' lvalue Var 0x55e45db72b20 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e45db73250 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e45db73238 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e45db73218 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e45db731e8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|     | |       `-ImplicitCastExpr 0x55e45db731d0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e45db731b0 <col:23> 'String' lvalue Var 0x55e45db72fb8 'str' 'String'
|     | `-CompoundStmt 0x55e45db738f8 <col:64, line:803:9>
|     |   |-CallExpr 0x55e45db73680 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55e45db73278 <col:13> '<bound member function type>' ->postparse 0x55e45db636f8
|     |   | | `-CXXThisExpr 0x55e45db73268 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55e45db73640 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55e45db732a8 <col:23> 'T *' lvalue Var 0x55e45db72ca8 's' 'T *'
|     |   | | `-CallExpr 0x55e45db73600 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55e45db73490 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55e45db734d8 <col:56> 'P' lvalue ParmVar 0x55e45db4a530 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55e45db734f8 <col:64> 'String' lvalue Var 0x55e45db72fb8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55e45db735a8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55e45db73538 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|     |   | |   | `-DeclRefExpr 0x55e45db73518 <col:70> 'T *' lvalue Var 0x55e45db72ca8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55e45db735e8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55e45db735d8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55e45db73660 <col:81> 'Args::Slot *' lvalue Var 0x55e45db72b20 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e45db73818 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e45db736b0 <col:13> 'int' lvalue Var 0x55e45db72bb8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e45db73800 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e45db737e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e45db73748 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e45db73728 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e45db73710 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e45db736d0 <col:28> 'int' lvalue Var 0x55e45db72bb8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e45db736f0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e45db737c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e45db73798 <col:49> 'bool' lvalue ->_read_status 0x55e45db2a430
|     |   |         `-ImplicitCastExpr 0x55e45db73778 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e45db73768 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e45db738c8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e45db73838 <col:13> 'int' lvalue ParmVar 0x55e45db4a4b8 'flags' 'int'
|     |     `-UnaryOperator 0x55e45db738b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e45db73898 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e45db73878 <col:23> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e45db73a50 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e45db73988 <col:9> 'bool' lvalue ->_read_status 0x55e45db2a430
|       | `-ImplicitCastExpr 0x55e45db73968 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e45db73958 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e45db73a30 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e45db73a10 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e45db739f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e45db739b8 <col:25> 'int' lvalue Var 0x55e45db72bb8 'read_status' 'int'
|           `-IntegerLiteral 0x55e45db739d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e45db4ad48 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55e45db4a7e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e45db4a858 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e45db4aca8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e45db4a918 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e45db4a998 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55e45db4aa10 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55e45db4ab60 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55e45db74878 <col:87, line:821:5>
|     |-DeclStmt 0x55e45db73b20 <line:809:9, col:26>
|     | `-VarDecl 0x55e45db73ab8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e45db73bf0 <line:810:9, col:29>
|     | `-VarDecl 0x55e45db73b50 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e45db73bd8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e45db73bb8 <col:28> 'int' 1
|     |-DeclStmt 0x55e45db73e38 <line:811:9, col:38>
|     | `-VarDecl 0x55e45db73d20 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55e45db73e10 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e45db73d98 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e45db73df0 <col:29> 'Vector<T>' lvalue ParmVar 0x55e45db4ab60 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55e45db74728 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55e45db74748 <line:812:16, col:61>
|     | | `-VarDecl 0x55e45db73e60 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e45db74040 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e45db74010 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e45db73ff8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e45db73fd8 <col:29, col:61> 'String' (CXXTemporary 0x55e45db73fd8)
|     | |           `-CXXMemberCallExpr 0x55e45db73f68 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e45db73ed8 <col:29> '<bound member function type>' ->find 0x55e45db634e8
|     | |             | `-CXXThisExpr 0x55e45db73ec8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e45db73fa0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e45db73f08 <col:34> 'const char *' lvalue ParmVar 0x55e45db4a918 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e45db73fb8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e45db73f28 <col:43> 'int' lvalue ParmVar 0x55e45db4a998 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e45db73f48 <col:50> 'Args::Slot *' lvalue Var 0x55e45db73ab8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e45db740f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e45db740e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e45db740c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e45db74090 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e45d8799a8
|     | |       `-ImplicitCastExpr 0x55e45db74078 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e45db74058 <col:23> 'String' lvalue Var 0x55e45db73e60 'str' 'String'
|     | `-CompoundStmt 0x55e45db746f0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55e45db741b8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55e45db74120 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55e45db74198 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55e45db74338 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55e45db741e0 <col:13> '<bound member function type>' ->postparse 0x55e45db636f8
|     |   | | `-CXXThisExpr 0x55e45db741d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e45db742e0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e45db74230 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e45db74210 <col:23> 'P' lvalue ParmVar 0x55e45db4aa10 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e45db74278 <col:36> 'String' lvalue Var 0x55e45db73e60 'str' 'String'
|     |   | | |-DeclRefExpr 0x55e45db74298 <col:41> 'T' lvalue Var 0x55e45db74120 'sx' 'T'
|     |   | | `-UnaryOperator 0x55e45db742c8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e45db742b8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55e45db74318 <col:53> 'Args::Slot *' lvalue Var 0x55e45db73ab8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55e45db74490 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55e45db743c8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55e45db74398 <col:17> 'bool' lvalue ->_read_status 0x55e45db2a430
|     |   | |   `-ImplicitCastExpr 0x55e45db74378 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55e45db74368 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55e45db74468 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55e45db74400 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55e45db743e0 <col:17> 'Vector<T> *' lvalue Var 0x55e45db73d20 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55e45db74448 <col:30> 'T' lvalue Var 0x55e45db74120 'sx' 'T'
|     |   |-BinaryOperator 0x55e45db74610 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e45db744a8 <col:13> 'int' lvalue Var 0x55e45db73b50 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e45db745f8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e45db745d8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e45db74540 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e45db74520 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e45db74508 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e45db744c8 <col:28> 'int' lvalue Var 0x55e45db73b50 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e45db744e8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e45db745c0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e45db74590 <col:49> 'bool' lvalue ->_read_status 0x55e45db2a430
|     |   |         `-ImplicitCastExpr 0x55e45db74570 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e45db74560 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e45db746c0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e45db74630 <col:13> 'int' lvalue ParmVar 0x55e45db4a998 'flags' 'int'
|     |     `-UnaryOperator 0x55e45db746a8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e45db74690 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e45db74670 <col:23> 'const int' lvalue Var 0x55e45db31a08 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e45db74858 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e45db74790 <col:9> 'bool' lvalue ->_read_status 0x55e45db2a430
|       | `-ImplicitCastExpr 0x55e45db74770 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e45db74760 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e45db74838 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e45db74818 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e45db74800 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e45db747c0 <col:25> 'int' lvalue Var 0x55e45db73b50 'read_status' 'int'
|           `-IntegerLiteral 0x55e45db747e0 <col:40> 'int' 1
|-AccessSpecDecl 0x55e45db4adc0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55e45db4ade8 prev 0x55e45db2fd08 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55e45db4aee0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55e45db4afd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55e45db748b0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55e45db4b0c0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55e45db748c0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55e45db4b1c0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55e45db4b270 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55e45db4b318 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e45db4b318
| | `-ParmVarDecl 0x55e45db4b428 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55e45db4bbe8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e45db4bbe8
|   `-ParmVarDecl 0x55e45db4bcf8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55e45db4b498 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55e45db4b5f8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55e45db4b7f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55e45db4b6a0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55e45db4b718 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55e45db74aa0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55e45db4baa8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55e45db74910 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e45db748d0 <col:20> 'void *' lvalue ParmVar 0x55e45db4b6a0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55e45db4bb10 '_slot' 'char *'
| | | `-CXXNewExpr 0x55e45db74998 <col:32, col:45> 'char *' array Function 0x55e45d69d408 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55e45db74980 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55e45db74950 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55e45db4b718 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55e45db4bb70 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55e45db74a60 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e45db74a20 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55e45db4b718 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55e45db74b20 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55e45db4b8f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55e45db4b0c0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55e45db74ba8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55e45db74b88 <line:840:13, col:22> 'void' array Function 0x55e45d69d768 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55e45db74b70 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55e45db74b40 <col:22> 'char *' lvalue ->_slot 0x55e45db4bb10
| |         `-CXXThisExpr 0x55e45db74b30 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55e45db4b9f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55e45db4b1c0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55e45db74d98 <col:22, line:844:9>
| |   `-CallExpr 0x55e45db74d00 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55e45db74ce8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55e45db74cc8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55e45d7a91e8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55e45db74d38 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55e45db74c18 <col:20> 'void *' lvalue ->_ptr 0x55e45db4baa8
| |     |   `-CXXThisExpr 0x55e45db74c08 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55e45db74d68 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55e45db74d50 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55e45db74c58 <col:26> 'char *' lvalue ->_slot 0x55e45db4bb10
| |     |     `-CXXThisExpr 0x55e45db74c48 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55e45db74d80 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55e45db74c98 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55e45db4bb70
| |         `-CXXThisExpr 0x55e45db74c88 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55e45db4baa8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55e45db4bb10 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55e45db4bb70 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55e45db4bd68 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e45db4bd68
| | `-ParmVarDecl 0x55e45db4be78 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55e45db4bf18 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e45db4bf18
|   `-ParmVarDecl 0x55e45db4c028 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55e45db4c1c8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55e45db4c098 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55e45db4c138 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55e45db4c460 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55e45db4c658 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55e45db4c528 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55e45db4c7d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55e45db74dd0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55e45db74db0 <col:20> 'T *' lvalue ParmVar 0x55e45db4c528 'ptr' 'T *'
|   | `-CompoundStmt 0x55e45db74e20 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55e45db4c728 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55e45db4b1c0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55e45db74fd0 <col:22, line:857:9>
|   |   `-CallExpr 0x55e45db74fa0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55e45db74e30 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55e45d861b38 0x55e45d80bc48
|   |     |-CXXOperatorCallExpr 0x55e45db74f30 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55e45db74ec0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e45da6eae8 0x55e45da6e708 0x55e45da6e338 0x55e45da6df58 0x55e45da6db78 0x55e45da6d7a8
|   |     | `-MemberExpr 0x55e45db74e90 <col:29> 'T *' lvalue ->_ptr 0x55e45db4c7d8
|   |     |   `-CXXThisExpr 0x55e45db74e80 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55e45db74f70 <col:35> 'T' lvalue ->_slot 0x55e45db4c838
|   |       `-CXXThisExpr 0x55e45db74f60 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55e45db4c7d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55e45db4c838 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55e45db4c8a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55e45db4c9a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55e45db4c9f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45db4c980 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55e45db4c960 <col:31> 'int' 48
|-FieldDecl 0x55e45db4ca18 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55e45db4ca78 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55e45db4cad8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e45db4cc10 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55e45db62d90 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55e45db62df0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55e45db62ea0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55e45db630c8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55e45db62fd0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55e45db63218 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55e45db63188 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55e45db634e8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55e45db632d8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55e45db63358 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55e45db63400 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55e45db636f8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55e45db635b0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55e45db63628 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55e45db637c8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55e45db63918 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55e45db63880 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55e45db655d0 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55e45db639d8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55e45db63a58 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55e45db63b00 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55e45db63bb8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55e45db65800 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55e45db656a8 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55e45db65720 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55e45db65b18 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55e45db658b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55e45db65a78 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55e45db65988 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45d8c03b0 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45d8c04c8 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x55e45d8c0558 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x55e45d8c0668 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x55e45d8c0598 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x55e45d8c0a98 'ip_p' 'int'
| | `-ImplicitCastExpr 0x55e45d8c0b60 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e45d8c0b20 <col:9> 'int' lvalue ParmVar 0x55e45d8c0598 'p' 'int'
| `-CompoundStmt 0x55e45d8c1128 <col:12, line:412:5>
|   `-ParenExpr 0x55e45d8c1108 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x55e45d8c10d8 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x55e45d8c0d08 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x55e45d8c0cd8 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x55e45d8c0c20 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x55e45d8c0c08 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x55e45d8c0bb8 <col:23> 'int' lvalue ->ip_p 0x55e45d8c0a98
|       |   | |   `-CXXThisExpr 0x55e45d8c0ba8 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x55e45d8c0be8 <col:30> 'int' 0
|       |   `-BinaryOperator 0x55e45d8c0cb8 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x55e45d8c0ca0 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x55e45d8c0c50 <col:35> 'int' lvalue ->ip_p 0x55e45d8c0a98
|       |     |   `-CXXThisExpr 0x55e45d8c0c40 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x55e45d8c0c80 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x55e45d8c0d68 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x55e45d8c0d48 <col:55> 'int' 0
|       `-CallExpr 0x55e45d8c1038 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x55e45d8c1020 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55e45d8c1000 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x55e45d8c1078 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55e45d8c0e58 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x55e45d8c1090 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55e45d8c0ec8 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x55e45d8c10a8 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x55e45d8c0f00 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x55e45d8c10c0 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x55e45d8c0fe8 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x55e45d8c0fd0 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x55e45d8c0f98 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x55e45d8c09c8 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x55e45d8c0728 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55e45d8c07f8 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x55e45d8c0870 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55e45d8c0b00 <col:34> 'const ArgContext' lvalue Var 0x55e45d8abad0 'blank_args' 'const ArgContext'
|-FieldDecl 0x55e45d8c0a98 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x55e45db95828 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x55e45db95828
| `-ParmVarDecl 0x55e45db95938 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x55e45db959d8 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45db95ae8 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x55e45d8c0a98 'ip_p' 'int'
| | `-ImplicitCastExpr 0x55e45db962f0 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e45db962c0 <col:7> 'int' xvalue .ip_p 0x55e45d8c0a98
| |     `-CXXStaticCastExpr 0x55e45db96290 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e45db96260 <col:7> 'IPPortArg' lvalue ParmVar 0x55e45db95ae8 '' 'IPPortArg &&'
| `-CompoundStmt 0x55e45db96338 <col:7>
`-CXXDestructorDecl 0x55e45db95b88 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45d86a860 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45d86a978 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55e45d86aa08 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55e45d86aad8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55e45d86abc0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45d86add8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e45d86ac80 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86af88 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e45d86ae90 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e45d86b0d0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e45d86b040 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e45d86b218 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e45d86b188 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86b360 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e45d86b2d0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86b428 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55e45d86b570 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55e45d86b4e0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e45d86b638 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55e45d86b780 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55e45d86b6f0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e45d86b8f8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e45d86b838 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86ba40 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e45d86b9b0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86bb08 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55e45d86bcc8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e45d86bbb8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e45d86bc30 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86bf18 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e45d86bd88 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e45d86be00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e45d86bfc8 <col:86> "" ""
|-CXXMethodDecl 0x55e45d86c238 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55e45d86c0a8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55e45d86c120 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86c3e8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e45d86c2f8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e45d86c598 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e45d86c4a0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e45d86c868 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e45d86c650 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e45d86c6c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e45d86c740 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86cb48 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e45d86c930 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e45d86c9a8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e45d86ca20 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e45d86cc00 <col:115> "" ""
|-AccessSpecDecl 0x55e45d86cc70 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55e45d86cca8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45d86d1b0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e45d86d1b0
| `-ParmVarDecl 0x55e45d86d2b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55e45d86d358 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e45d86d358
| `-ParmVarDecl 0x55e45d86d468 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55e45d8a2a98 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e45da958a0 <col:7>
|-CXXConstructorDecl 0x55e45d8a2b70 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e45d8a2b70
| `-ParmVarDecl 0x55e45d8a2c88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55e45d8a2cf8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e45d8a2cf8
| `-ParmVarDecl 0x55e45d8a2e08 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55e45da982a0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45da84448 prev 0x55e45da79650 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45da84540 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55e45da84630 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55e45da84758 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55e45da848d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55e45da84a58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55e45da84bd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55e45da95a08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e45da96278 <col:11>
|-CXXDestructorDecl 0x55e45da95ae0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e45da95c18 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e45da95c18
| `-ParmVarDecl 0x55e45da95d28 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55e45da95dc8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e45da95dc8
| `-ParmVarDecl 0x55e45da95ed8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55e45da98c98 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45da98da8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55e45da99028 <col:11>
|   `-ReturnStmt 0x55e45da99018 <col:11>
|     `-UnaryOperator 0x55e45da99000 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e45da98ff0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55e45da98e18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e45da98e18
  `-ParmVarDecl 0x55e45da98f28 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45da84c40 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45da84d58 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55e45da84df8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55e45da84e60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55e45da84ec8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55e45da84f30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55e45da84f90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55e45da85050 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55e45da850b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55e45da85110 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55e45da95918 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55e45da84df8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55e45da96288 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55e45da962e0 <col:12>
|-CXXConstructorDecl 0x55e45da95f48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e45da95f48
| `-ParmVarDecl 0x55e45da96058 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55e45da960f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e45da960f8
| `-ParmVarDecl 0x55e45da96208 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55e45da98380 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45da72d60 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e45da72e78 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55e45da72f08 <col:16, col:22> col:16 public
|-EnumDecl 0x55e45da72f30 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55e45da73030 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55e45da73110 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da73010 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55e45da72ff0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55e45da730c0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55e45da73128 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45da730a0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55e45da73080 <col:22> 'int' 64
|-CXXMethodDecl 0x55e45da73468 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e45da73150 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e45da731d0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55e45da73248 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e45da732c0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e45da73528 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e45da73728 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55e45da735a0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55e45da73618 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e45da737d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e45da73938 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55e45da73848 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e45da739e0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55e45da73d40 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55e45da73cd0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55e45da73c70 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55e45da73c30 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55e45d54a4e0 'void'
|       |-PointerType 0x55e45d7f2ee0 'unsigned char *'
|       | `-BuiltinType 0x55e45d54a5e0 'unsigned char'
|       |-TypedefType 0x55e45d5ef4b0 'size_t' sugar
|       | |-Typedef 0x55e45d5babe0 'size_t'
|       | `-BuiltinType 0x55e45d54a640 'unsigned long'
|       `-PointerType 0x55e45d54ace0 'void *'
|         `-BuiltinType 0x55e45d54a4e0 'void'
|-CXXMethodDecl 0x55e45da741b8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55e45da73db0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55e45da73e28 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e45da73ec0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55e45da73f40 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55e45da8e8b0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55e45da8e898 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55e45da8e860 <col:58> 'int' 0
| |-ParmVarDecl 0x55e45da73fc0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55e45da8e8d8 <col:76> 'int' 0
| |-ParmVarDecl 0x55e45da74040 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55e45da8e8f8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55e45da74288 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55e45da74308 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e45da743c8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55e45da74468 <col:20>
| `-OptimizeNoneAttr 0x55e45da744c0 <col:30>
|-CXXMethodDecl 0x55e45da74538 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55e45da745d8 <col:20>
| `-OptimizeNoneAttr 0x55e45da74630 <col:30>
|-CXXMethodDecl 0x55e45da746a8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55e45da74748 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55e45da747f8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55e45da74898 <col:20>
| |-OptimizeNoneAttr 0x55e45da748f0 <col:30>
| `-WarnUnusedResultAttr 0x55e45da74918 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55e45da74970 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e45da74a10 <col:20>
| `-OptimizeNoneAttr 0x55e45da74a68 <col:30>
|-CXXMethodDecl 0x55e45da74ab8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e45da74b58 <col:20>
| `-OptimizeNoneAttr 0x55e45da74bb0 <col:30>
|-CXXMethodDecl 0x55e45da74bf8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55e45da74c98 <col:20>
| `-OptimizeNoneAttr 0x55e45da74cf0 <col:30>
|-CXXMethodDecl 0x55e45da74d38 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45da74df8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45da74ec0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e45da74f88 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e45da75048 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45da75168 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55e45da8e9c0 <col:54, line:99:5>
|   `-ReturnStmt 0x55e45da8e9b0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55e45da8e998 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55e45da8e968 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e45da85448
|         `-CXXThisExpr 0x55e45da8e958 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e45da75308 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55e45da75218 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55e45da8ea70 <col:67, line:103:5>
|   `-BinaryOperator 0x55e45da8ea50 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e45da8e9e8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e45da85448
|     | `-CXXThisExpr 0x55e45da8e9d8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e45da8ea38 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55e45da8ea18 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55e45da75218 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55e45da75400 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55e45da8eaf0 <col:33, line:107:5>
|   `-ReturnStmt 0x55e45da8eae0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55e45da8eac8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55e45da8ea98 <col:16> 'void *' lvalue ->_destructor_argument 0x55e45da854b0
|         `-CXXThisExpr 0x55e45da8ea88 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e45da754c0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55e45da8f120 <col:25, line:113:5>
|   |-ParenExpr 0x55e45da8ee68 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55e45da8ee38 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da8eba8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e45da8eb80 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55e45da8eb48 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55e45da8eb18 <col:24> '<bound member function type>' ->shared 0x55e45da74538
|   |   |       `-ImplicitCastExpr 0x55e45da8eb68 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55e45da8eb08 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e45da8ec08 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da8ebe8 <col:42> 'int' 0
|   |   `-CallExpr 0x55e45da8ed98 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55e45da8ed80 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da8ed60 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da8edd8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da8ec78 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55e45da8edf0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da8eca0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da8ee08 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da8ecd8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55e45da8ee20 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da8ed48 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da8ed30 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da8ecf8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55e45da8f068 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55e45da8ee98 <col:2> 'unsigned char *' lvalue ->_head 0x55e45da85250
|   | | `-CXXThisExpr 0x55e45da8ee88 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55e45da8f050 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55e45da8f030 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55e45da8eed8 <col:10> 'unsigned char *' lvalue ->_data 0x55e45da852b8
|   |     | `-CXXThisExpr 0x55e45da8eec8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55e45da8f018 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55e45da8eff8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55e45da8ef18 <col:18> 'unsigned char *' lvalue ->_tail 0x55e45da85320
|   |         | `-CXXThisExpr 0x55e45da8ef08 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55e45da8efe0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55e45da8efc0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55e45da8ef58 <col:26> 'unsigned char *' lvalue ->_end 0x55e45da85388
|   |             | `-CXXThisExpr 0x55e45da8ef48 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55e45da8efa8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55e45da8ef88 <col:33> 'int' 0
|   `-BinaryOperator 0x55e45da8f100 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e45da8f098 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e45da85448
|     | `-CXXThisExpr 0x55e45da8f088 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e45da8f0e8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55e45da8f0c8 <col:16> 'int' 0
|-CXXMethodDecl 0x55e45da75600 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e45da75570 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e45da756a8 <col:20>
| |-OptimizeNoneAttr 0x55e45da75700 <col:30>
| `-WarnUnusedResultAttr 0x55e45da75728 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e45da757f8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e45da75768 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e45da758a0 <col:20>
| |-OptimizeNoneAttr 0x55e45da758f8 <col:30>
| `-WarnUnusedResultAttr 0x55e45da75920 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55e45da75a58 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e45da75960 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e45da75b00 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55e45da75c00 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55e45da75b70 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e45da75ca8 <col:20>
| `-OptimizeNoneAttr 0x55e45da75d00 <col:30>
|-CXXMethodDecl 0x55e45da75dc8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e45da75d38 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e45da75e70 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55e45da75f70 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e45da75ee0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e45da76018 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e45da76118 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55e45da76088 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e45da761c0 <col:20>
| `-OptimizeNoneAttr 0x55e45da76218 <col:30>
|-CXXMethodDecl 0x55e45da763a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55e45da76258 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55e45da762d0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e45da8e918 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55e45da76458 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55e45da76658 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e45da764d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55e45da76548 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da76868 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e45da76718 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e45da76790 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da76a78 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55e45da76928 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55e45da769a8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55e45da8e928 <col:39> 'int' 0
|-CXXMethodDecl 0x55e45da76b48 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55e45da76c10 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e45da76cd8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e45da76d98 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45da76e60 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55e45da76fa8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55e45da76f18 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55e45da77178 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e45da77068 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55e45da770e0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da77248 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55e45da77308 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55e45da773a8 <col:20>
| `-OptimizeNoneAttr 0x55e45da77400 <col:30>
|-CXXMethodDecl 0x55e45da77450 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e45da774f0 <col:20>
| `-OptimizeNoneAttr 0x55e45da77548 <col:30>
|-CXXMethodDecl 0x55e45da77598 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e45da77658 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45da77720 <line:292:5, col:61> col:44 used network_length 'int () const'
| |-NoInlineAttr 0x55e45da777c0 <col:20>
| `-OptimizeNoneAttr 0x55e45da77818 <col:30>
|-CXXMethodDecl 0x55e45da77968 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e45da77858 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55e45da778d0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da77ab8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55e45da77a28 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da77b90 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55e45da77c50 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55e45da77cf0 <col:20>
| `-OptimizeNoneAttr 0x55e45da77d48 <col:30>
|-CXXMethodDecl 0x55e45da77d98 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e45da77e38 <col:20>
| `-OptimizeNoneAttr 0x55e45da77e90 <col:30>
|-CXXMethodDecl 0x55e45da77ee0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e45da77fa8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55e45da78048 <col:20>
| `-OptimizeNoneAttr 0x55e45da780a0 <col:30>
|-CXXMethodDecl 0x55e45da780e8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55e45da78208 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55e45da78378 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55e45da782b8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55e45da78468 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55e45da78508 <col:20>
| `-OptimizeNoneAttr 0x55e45da78560 <col:30>
|-CXXMethodDecl 0x55e45da785b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e45da78670 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e45da788a8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55e45da78720 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55e45da78798 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e45da78958 <col:20>
| `-OptimizeNoneAttr 0x55e45da789b0 <col:30>
|-CXXMethodDecl 0x55e45da78a58 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55e45da78af8 <col:20>
| `-OptimizeNoneAttr 0x55e45da78b50 <col:30>
|-CXXMethodDecl 0x55e45da78ba0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55e45da78c40 <col:20>
| `-OptimizeNoneAttr 0x55e45da78c98 <col:30>
|-CXXMethodDecl 0x55e45da78ce0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55e45da78d80 <col:20>
| `-OptimizeNoneAttr 0x55e45da78dd8 <col:30>
|-CXXMethodDecl 0x55e45da78ed8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55e45da78e10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55e45da78f80 <col:20>
| `-OptimizeNoneAttr 0x55e45da78fd8 <col:30>
|-CXXMethodDecl 0x55e45da79198 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55e45da79010 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55e45da79088 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e45da79248 <col:20>
| `-OptimizeNoneAttr 0x55e45da792a0 <col:30>
|-CXXMethodDecl 0x55e45da79348 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55e45da79468 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55e45da79588 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55e45da79628 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55e45da79650 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55e45da79778 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55e45da79818 <col:20>
| `-OptimizeNoneAttr 0x55e45da79870 <col:30>
|-CXXMethodDecl 0x55e45da79918 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55e45da799b8 <col:20>
| `-OptimizeNoneAttr 0x55e45da79a10 <col:30>
|-AccessSpecDecl 0x55e45da79a38 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55e45da79a60 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55e45da79b60 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55e45da79bb0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45da79b40 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55e45da79b20 <col:14> 'int' 48
|-CXXMethodDecl 0x55e45da79c18 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55e45da79cb8 <col:20>
| `-OptimizeNoneAttr 0x55e45da79d10 <col:30>
|-CXXMethodDecl 0x55e45da79d88 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55e45da79e28 <col:20>
| `-OptimizeNoneAttr 0x55e45da79e80 <col:30>
|-CXXMethodDecl 0x55e45da79f48 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55e45da79eb8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55e45da7a0e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55e45da7a288 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55e45da7a198 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55e45da7a330 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55e45da7a430 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e45da7a7e0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7a410 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55e45da7a3f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55e45da7a4c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e45da7a7f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7a4a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55e45da7a480 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e45da7a550 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e45da7a810 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7a530 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55e45da7a510 <col:14> 'int' 2
| |-EnumConstantDecl 0x55e45da7a5e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e45da7a828 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7a5c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55e45da7a5a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55e45da7a670 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e45da7a840 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7a650 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55e45da7a630 <col:13> 'int' 4
| |-EnumConstantDecl 0x55e45da7a700 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e45da7a858 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7a6e0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55e45da7a6c0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55e45da7a790 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55e45da7a870 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45da7a770 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55e45da7a750 <col:14> 'int' 6
|-CXXMethodDecl 0x55e45da7a8d8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55e45da7a978 <col:20>
| `-OptimizeNoneAttr 0x55e45da7a9d0 <col:30>
|-CXXMethodDecl 0x55e45da7aac8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55e45da7aa08 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55e45da7ab70 <col:20>
| `-OptimizeNoneAttr 0x55e45da7abc8 <col:30>
|-CXXMethodDecl 0x55e45da7ac38 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55e45da7ad60 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55e45da7aed8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55e45da7ae10 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55e45da7afa0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55e45da7b068 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55e45da7b1a8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55e45da7b118 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55e45da7b250 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55e45da7b350 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e45da7b550 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7b330 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55e45da7b310 <col:23> 'int' 0
| |-EnumConstantDecl 0x55e45da7b3e0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e45da7b568 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7b3c0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55e45da7b3a0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55e45da7b470 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e45da7b580 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7b450 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55e45da7b430 <col:24> 'int' 0
| `-EnumConstantDecl 0x55e45da7b500 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55e45da7b598 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45da7b4e0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55e45da7b4c0 <col:47> 'int' 16
|-CXXMethodDecl 0x55e45da7b5f8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55e45da7b768 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55e45da7b6a8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55e45da7b810 <col:20>
| `-OptimizeNoneAttr 0x55e45da7b868 <col:30>
|-CXXMethodDecl 0x55e45da7b8b8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55e45da8f240 <col:18, col:36>
|   `-ReturnStmt 0x55e45da8f230 <col:20, col:33>
|     `-ImplicitCastExpr 0x55e45da8f218 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e45da8f1f8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55e45da8f1c8 <col:27> '<bound member function type>' ->xanno 0x55e45da79918
|           `-CXXThisExpr 0x55e45da8f1b8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55e45da7b9b0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55e45da8f350 <col:30, col:48>
|   `-ReturnStmt 0x55e45da8f340 <col:32, col:45>
|     `-ImplicitCastExpr 0x55e45da8f328 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e45da8f308 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55e45da8f2d8 <col:39> '<bound member function type>' ->xanno 0x55e45da79778
|           `-CXXThisExpr 0x55e45da8f2c8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e45da7ba98 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55e45da8f4e8 <col:24, col:50>
|   `-ReturnStmt 0x55e45da8f4d8 <col:26, col:47>
|     `-UnaryOperator 0x55e45da8f4c0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e45da8f4a0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e45da8f488 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e45da8f438 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55e45da84758
|         |   `-CXXMemberCallExpr 0x55e45da8f418 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e45da8f3e8 <col:34> '<bound member function type>' ->xanno 0x55e45da79918
|         |       `-CXXThisExpr 0x55e45da8f3d8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e45da8f468 <col:46> 'int' 0
|-CXXMethodDecl 0x55e45da7bba0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55e45da8f6b8 <col:36, col:62>
|   `-ReturnStmt 0x55e45da8f6a8 <col:38, col:59>
|     `-UnaryOperator 0x55e45da8f690 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e45da8f670 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e45da8f658 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e45da8f5d0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55e45da84758
|         |   `-CXXMemberCallExpr 0x55e45da8f5b0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e45da8f580 <col:46> '<bound member function type>' ->xanno 0x55e45da79778
|         |       `-CXXThisExpr 0x55e45da8f570 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e45da8f600 <col:58> 'int' 0
|-CXXMethodDecl 0x55e45da7bcb8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55e45da8f850 <col:26, col:53>
|   `-ReturnStmt 0x55e45da8f840 <col:28, col:50>
|     `-UnaryOperator 0x55e45da8f828 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e45da8f808 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e45da8f7f0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e45da8f7a0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55e45da84a58
|         |   `-CXXMemberCallExpr 0x55e45da8f780 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e45da8f750 <col:36> '<bound member function type>' ->xanno 0x55e45da79918
|         |       `-CXXThisExpr 0x55e45da8f740 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e45da8f7d0 <col:49> 'int' 0
|-CXXMethodDecl 0x55e45da7bdd8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55e45da8fa28 <col:38, col:65>
|   `-ReturnStmt 0x55e45da8fa18 <col:40, col:62>
|     `-UnaryOperator 0x55e45da8fa00 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e45da8f9e0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e45da8f9c8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e45da8f938 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55e45da84a58
|         |   `-CXXMemberCallExpr 0x55e45da8f918 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e45da8f8e8 <col:48> '<bound member function type>' ->xanno 0x55e45da79778
|         |       `-CXXThisExpr 0x55e45da8f8d8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e45da8f968 <col:61> 'int' 0
|-CXXMethodDecl 0x55e45da7bf88 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55e45da7be90 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55e45da900f8 <col:34, line:463:5>
|   |-ParenExpr 0x55e45da8ff40 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e45da8ff10 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da8fb78 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da8fb48 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da8fa98 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da8fa80 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da8fa40 <col:23> 'int' lvalue ParmVar 0x55e45da7be90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da8fa60 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da8fb28 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da8faf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da8fab8 <col:33> 'int' lvalue ParmVar 0x55e45da7be90 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e45da8fb10 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e45da8fad8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e45da8fbd8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da8fbb8 <col:56> 'int' 0
|   |   `-CallExpr 0x55e45da8fe70 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e45da8fe58 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da8fe38 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da8feb0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da8fcc8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e45da8fec8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da8fcf8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da8fee0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da8fd30 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55e45da8fef8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da8fe20 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da8fe08 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da8fdc8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55e45da900e8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55e45da900d0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55e45da900b0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e45da90080 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e45da90030 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55e45da84758
|         |   `-CXXMemberCallExpr 0x55e45da90010 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e45da8ffe0 <col:9> '<bound member function type>' ->xanno 0x55e45da79778
|         |       `-CXXThisExpr 0x55e45da8ffd0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55e45da90098 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55e45da90060 <col:21> 'int' lvalue ParmVar 0x55e45da7be90 'i' 'int'
|-CXXMethodDecl 0x55e45da7c1d8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55e45da7c048 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55e45da7c0c0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55e45da90788 <col:40, line:472:5>
|   |-ParenExpr 0x55e45da905a0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e45da90570 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da90250 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da90220 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da90170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da90158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da90118 <col:23> 'int' lvalue ParmVar 0x55e45da7c048 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da90138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da90200 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da901d0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da90190 <col:33> 'int' lvalue ParmVar 0x55e45da7c048 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e45da901e8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e45da901b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e45da902b0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da90290 <col:56> 'int' 0
|   |   `-CallExpr 0x55e45da904d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e45da904b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da90498 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da90510 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da90320 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e45da90528 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da90350 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da90540 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da90388 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55e45da90558 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da90480 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da90468 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da90428 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55e45da90768 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55e45da90710 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55e45da906e0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55e45da90690 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55e45da84758
|     | |   `-CXXMemberCallExpr 0x55e45da90670 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55e45da90640 <col:2> '<bound member function type>' ->xanno 0x55e45da79918
|     | |       `-CXXThisExpr 0x55e45da90630 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55e45da906f8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55e45da906c0 <col:14> 'int' lvalue ParmVar 0x55e45da7c048 'i' 'int'
|     `-ImplicitCastExpr 0x55e45da90750 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55e45da90730 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55e45da7c0c0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55e45da7c398 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55e45da7c2a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e45da90f08 <col:36, line:485:5>
|   |-ParenExpr 0x55e45da90c70 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da90c40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da90920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da908f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da90800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da907e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da907a8 <col:23> 'int' lvalue ParmVar 0x55e45da7c2a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da907c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da908d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da908b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da90820 <col:33> 'int' lvalue ParmVar 0x55e45da7c2a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da90898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da90880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da90840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da90860 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e45da90980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da90960 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da90ba0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da90b88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da90b68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da90be0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da909f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e45da90bf8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da90a28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da90c10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da90a60 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55e45da90c28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da90b50 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da90b38 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da90af8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55e45da90ef8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55e45da90ee0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55e45da90ec8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e45da90e98 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55e45da90e38 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e45da90e08 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e45da90d80 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e45da84630
|             |   `-CXXMemberCallExpr 0x55e45da90d60 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e45da90d30 <col:61> '<bound member function type>' ->xanno 0x55e45da79778
|             |       `-CXXThisExpr 0x55e45da90d20 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e45da90e20 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e45da90db0 <col:74> 'int' lvalue ParmVar 0x55e45da7c2a0 'i' 'int'
|-CXXMethodDecl 0x55e45da7c5e8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55e45da7c458 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e45da7c4d0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55e45da91658 <col:42, line:500:5>
|   |-ParenExpr 0x55e45da913f0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da913c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da910a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da91070 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da90f80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da90f68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da90f28 <col:23> 'int' lvalue ParmVar 0x55e45da7c458 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da90f48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da91050 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da91038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da90fa0 <col:33> 'int' lvalue ParmVar 0x55e45da7c458 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da91018 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da91000 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da90fc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da90fe0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e45da91100 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da910e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da91320 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da91308 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da912e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da91360 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da91170 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e45da91378 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da911a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da91390 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da911e0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55e45da913a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da912d0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da912b8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da91278 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55e45da91638 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55e45da915e8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e45da915b8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e45da91560 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e45da91530 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e45da914e0 <col:48, col:57> 'char [48]' lvalue ->c 0x55e45da84630
|     |     |   `-CXXMemberCallExpr 0x55e45da914c0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e45da91490 <col:48> '<bound member function type>' ->xanno 0x55e45da79918
|     |     |       `-CXXThisExpr 0x55e45da91480 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e45da91548 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e45da91510 <col:61> 'int' lvalue ParmVar 0x55e45da7c458 'i' 'int'
|     `-ImplicitCastExpr 0x55e45da91620 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55e45da91600 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55e45da7c4d0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55e45da7c7a8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55e45da7c6b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e45da91db8 <col:35, line:513:5>
|   |-ParenExpr 0x55e45da91ac8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da91a98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da917f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da917c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da916d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da916b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da91678 <col:23> 'int' lvalue ParmVar 0x55e45da7c6b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da91698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da917a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da91788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da916f0 <col:33> 'int' lvalue ParmVar 0x55e45da7c6b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da91768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da91750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da91710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da91730 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e45da91850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da91830 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da919f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da919e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da919c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da91a38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da918c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e45da91a50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da918f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da91a68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da91930 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55e45da91a80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da919a8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da91990 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da91950 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55e45da91da8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55e45da91d90 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55e45da91d78 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e45da91d48 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55e45da91cc0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e45da91c90 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e45da91c40 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e45da84630
|             |   `-CXXMemberCallExpr 0x55e45da91c20 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e45da91bf0 <col:60> '<bound member function type>' ->xanno 0x55e45da79778
|             |       `-CXXThisExpr 0x55e45da91be0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e45da91ca8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e45da91c70 <col:73> 'int' lvalue ParmVar 0x55e45da7c6b0 'i' 'int'
|-CXXMethodDecl 0x55e45da7c9f8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55e45da7c868 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e45da7c8e0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55e45da924d8 <col:41, line:528:5>
|   |-ParenExpr 0x55e45da92260 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da92230 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da91f50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da91f20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da91e30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da91e18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da91dd8 <col:23> 'int' lvalue ParmVar 0x55e45da7c868 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da91df8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da91f00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da91ee8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da91e50 <col:33> 'int' lvalue ParmVar 0x55e45da7c868 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da91ec8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da91eb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da91e70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da91e90 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e45da91fb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da91f90 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da92190 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da92178 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da92158 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da921d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da92020 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e45da921e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da92058 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da92200 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da92090 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55e45da92218 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da92140 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da92128 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da920e8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55e45da924b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55e45da92468 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e45da92438 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e45da923e0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e45da923a0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e45da92350 <col:47, col:56> 'char [48]' lvalue ->c 0x55e45da84630
|     |     |   `-CXXMemberCallExpr 0x55e45da92330 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e45da92300 <col:47> '<bound member function type>' ->xanno 0x55e45da79918
|     |     |       `-CXXThisExpr 0x55e45da922f0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e45da923b8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e45da92380 <col:60> 'int' lvalue ParmVar 0x55e45da7c868 'i' 'int'
|     `-ImplicitCastExpr 0x55e45da924a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55e45da92480 <col:65> 'int16_t':'short' lvalue ParmVar 0x55e45da7c8e0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55e45da7cbb8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55e45da7cac0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e45da92ba8 <col:36, line:541:5>
|   |-ParenExpr 0x55e45da92948 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da92918 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da92670 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da92640 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da92550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da92538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da924f8 <col:23> 'int' lvalue ParmVar 0x55e45da7cac0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da92518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da92620 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da92608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da92570 <col:33> 'int' lvalue ParmVar 0x55e45da7cac0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da925e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da925d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da92590 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da925b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e45da926d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da926b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da92878 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da92860 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da92840 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da928b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da92740 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e45da928d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da92778 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da928e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da927b0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55e45da92900 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da92828 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da92810 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da927d0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55e45da92b98 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55e45da92b80 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e45da92b68 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e45da92b38 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55e45da92ae0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e45da92ab0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e45da92a60 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e45da84630
|             |   `-CXXMemberCallExpr 0x55e45da92a40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e45da92a10 <col:61> '<bound member function type>' ->xanno 0x55e45da79778
|             |       `-CXXThisExpr 0x55e45da92a00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e45da92ac8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e45da92a90 <col:74> 'int' lvalue ParmVar 0x55e45da7cac0 'i' 'int'
|-CXXMethodDecl 0x55e45da7cd88 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55e45da7cc78 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55e45da7ccf0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e45da7ce38 <col:20>
| `-OptimizeNoneAttr 0x55e45da7ce90 <col:30>
|-CXXMethodDecl 0x55e45da7cfc8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55e45da7ced0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e45da93278 <col:35, line:562:5>
|   |-ParenExpr 0x55e45da93018 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da92fe8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da92d40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da92d10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da92c20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da92c08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da92bc8 <col:23> 'int' lvalue ParmVar 0x55e45da7ced0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da92be8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da92cf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da92cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da92c40 <col:33> 'int' lvalue ParmVar 0x55e45da7ced0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da92cb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da92ca0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da92c60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da92c80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e45da92da0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da92d80 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da92f48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da92f30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da92f10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da92f88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da92e10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e45da92fa0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da92e48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da92fb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da92e80 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55e45da92fd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da92ef8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da92ee0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da92ea0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55e45da93268 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55e45da93250 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55e45da93238 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e45da93208 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55e45da931b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e45da93180 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e45da93130 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e45da84630
|             |   `-CXXMemberCallExpr 0x55e45da93110 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e45da930e0 <col:60> '<bound member function type>' ->xanno 0x55e45da79778
|             |       `-CXXThisExpr 0x55e45da930d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e45da93198 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e45da93160 <col:73> 'int' lvalue ParmVar 0x55e45da7ced0 'i' 'int'
|-CXXMethodDecl 0x55e45da7d1d8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55e45da7d088 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e45da7d100 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55e45da93958 <col:41, line:577:5>
|   |-ParenExpr 0x55e45da936e8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da936b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da93410 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da933e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da932f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da932d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da93298 <col:23> 'int' lvalue ParmVar 0x55e45da7d088 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da932b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da933c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da933a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da93310 <col:33> 'int' lvalue ParmVar 0x55e45da7d088 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da93388 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da93370 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da93330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da93350 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e45da93470 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da93450 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da93618 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da93600 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da935e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da93658 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da934e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e45da93670 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da93518 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da93688 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da93550 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55e45da936a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da935c8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da935b0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da93570 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55e45da93938 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55e45da938e8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e45da938b8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55e45da93858 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e45da93828 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e45da937d8 <col:47, col:56> 'char [48]' lvalue ->c 0x55e45da84630
|     |     |   `-CXXMemberCallExpr 0x55e45da937b8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e45da93788 <col:47> '<bound member function type>' ->xanno 0x55e45da79918
|     |     |       `-CXXThisExpr 0x55e45da93778 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e45da93840 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e45da93808 <col:60> 'int' lvalue ParmVar 0x55e45da7d088 'i' 'int'
|     `-ImplicitCastExpr 0x55e45da93920 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e45da93900 <col:65> 'int32_t':'int' lvalue ParmVar 0x55e45da7d100 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55e45da7d398 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55e45da7d2a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e45da94088 <col:36, line:591:5>
|   |-ParenExpr 0x55e45da93dc8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da93d98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da93af0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da93ac0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da939d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da939b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da93978 <col:23> 'int' lvalue ParmVar 0x55e45da7d2a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da93998 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da93aa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da93a88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da939f0 <col:33> 'int' lvalue ParmVar 0x55e45da7d2a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da93a68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da93a50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da93a10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da93a30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e45da93b50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da93b30 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da93cf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da93ce0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da93cc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da93d38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da93bc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e45da93d50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da93bf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da93d68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da93c30 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55e45da93d80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da93ca8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da93c90 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da93c50 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55e45da94078 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55e45da94060 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55e45da94048 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e45da94018 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55e45da93f90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e45da93f60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e45da93f10 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e45da84630
|             |   `-CXXMemberCallExpr 0x55e45da93ef0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e45da93ec0 <col:61> '<bound member function type>' ->xanno 0x55e45da79778
|             |       `-CXXThisExpr 0x55e45da93eb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e45da93f78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e45da93f40 <col:74> 'int' lvalue ParmVar 0x55e45da7d2a0 'i' 'int'
|-CXXMethodDecl 0x55e45da7d5e8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55e45da7d458 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e45da7d4d0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55e45da94768 <col:42, line:606:5>
|   |-ParenExpr 0x55e45da944f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e45da944c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da94220 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da941f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da94100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da940e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da940a8 <col:23> 'int' lvalue ParmVar 0x55e45da7d458 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da940c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da941d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e45da941b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da94120 <col:33> 'int' lvalue ParmVar 0x55e45da7d458 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da94198 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da94180 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da94140 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e45da94160 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e45da94280 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da94260 <col:60> 'int' 0
|   |   `-CallExpr 0x55e45da94428 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e45da94410 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da943f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da94468 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da942f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e45da94480 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da94328 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da94498 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da94360 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55e45da944b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da943d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da943c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da94380 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55e45da94748 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55e45da946f8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e45da946c8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55e45da94668 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e45da94638 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e45da945e8 <col:48, col:57> 'char [48]' lvalue ->c 0x55e45da84630
|     |     |   `-CXXMemberCallExpr 0x55e45da945c8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e45da94598 <col:48> '<bound member function type>' ->xanno 0x55e45da79918
|     |     |       `-CXXThisExpr 0x55e45da94588 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e45da94650 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e45da94618 <col:61> 'int' lvalue ParmVar 0x55e45da7d458 'i' 'int'
|     `-ImplicitCastExpr 0x55e45da94730 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55e45da94710 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55e45da7d4d0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55e45da7d780 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55e45da7d6b0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55e45da94fd8 <col:33, line:620:5>
|   |-ParenExpr 0x55e45da94d50 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e45da94d20 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da94970 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da94940 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da947e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da947c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da94788 <col:23> 'int' lvalue ParmVar 0x55e45da7d6b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da947a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da94920 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e45da94908 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da94800 <col:33> 'int' lvalue ParmVar 0x55e45da7d6b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da948e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da948d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da94820 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e45da948a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e45da94890 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e45da94858 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e45da949d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da949b0 <col:79> 'int' 0
|   |   `-CallExpr 0x55e45da94c80 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e45da94c68 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da94c48 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da94cc0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da94ab8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e45da94cd8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da94b00 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da94cf0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da94b38 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55e45da94d08 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da94c30 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da94c18 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da94bd8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55e45da94fc8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55e45da94fb0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55e45da94f98 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e45da94f68 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55e45da94ee0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e45da94eb0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e45da94e60 <col:67, col:76> 'char const[48]' lvalue ->c 0x55e45da84630
|             |   `-CXXMemberCallExpr 0x55e45da94e40 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e45da94e10 <col:67> '<bound member function type>' ->xanno 0x55e45da79778
|             |       `-CXXThisExpr 0x55e45da94e00 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e45da94ec8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e45da94e90 <col:80> 'int' lvalue ParmVar 0x55e45da7d6b0 'i' 'int'
|-CXXMethodDecl 0x55e45da7d998 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55e45da7d840 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e45da7d8c0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55e45da95800 <col:45, line:635:5>
|   |-ParenExpr 0x55e45da95548 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e45da95518 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e45da951e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e45da951b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e45da95050 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e45da95038 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e45da94ff8 <col:23> 'int' lvalue ParmVar 0x55e45da7d840 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e45da95018 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e45da95190 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e45da95178 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e45da95070 <col:33> 'int' lvalue ParmVar 0x55e45da7d840 'i' 'int'
|   |   |     `-BinaryOperator 0x55e45da95158 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e45da95140 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e45da95090 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e45da79b60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e45da95118 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e45da95100 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e45da950c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e45da95240 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e45da95220 <col:79> 'int' 0
|   |   `-CallExpr 0x55e45da95478 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e45da95460 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e45da95440 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e45d5e6210 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e45da954b8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da952b0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e45da954d0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e45da952f8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e45da954e8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e45da95330 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55e45da95500 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e45da95428 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e45da95410 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e45da953c8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55e45da957e0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55e45da95748 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e45da95718 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55e45da956b8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e45da95688 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e45da95638 <col:54, col:63> 'char [48]' lvalue ->c 0x55e45da84630
|     |     |   `-CXXMemberCallExpr 0x55e45da95618 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e45da955e8 <col:54> '<bound member function type>' ->xanno 0x55e45da79918
|     |     |       `-CXXThisExpr 0x55e45da955d8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e45da956a0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e45da95668 <col:67> 'int' lvalue ParmVar 0x55e45da7d840 'i' 'int'
|     `-CXXConstCastExpr 0x55e45da957b0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55e45da95798 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55e45da95760 <col:91> 'const void *' lvalue ParmVar 0x55e45da7d8c0 'x' 'const void *'
|-CXXMethodDecl 0x55e45da7da68 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55e45da95888 <col:34, line:640:5>
|   `-ReturnStmt 0x55e45da95878 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55e45da95860 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55e45da95830 <col:16> 'Packet *' lvalue ->_data_packet 0x55e45da851e8
|         `-CXXThisExpr 0x55e45da95820 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e45da7dba8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55e45da7db18 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e45da8e948 <col:46> 'bool' true
|-CXXMethodDecl 0x55e45da7dd28 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55e45da7dc60 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55e45da7ddd0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55e45da7e580 <line:660:22> "" ""
| |-EnumConstantDecl 0x55e45da7ded0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e5f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7deb0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55e45da7de90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e45da73030 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e45da7df60 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e608 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7df40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55e45da7df20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e45da730c0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e45da7dff0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e620 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7dfd0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e45da7dfb0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e45da7e080 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e638 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7e060 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55e45da7e040 <col:19> 'int' 16
| |-EnumConstantDecl 0x55e45da7e110 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e650 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7e0f0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55e45da7e0d0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55e45da7e1a0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e668 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7e180 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e45da7e160 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e45da7e230 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e680 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7e210 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55e45da7e1f0 <col:19> 'int' EnumConstant 0x55e45da7e080 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e45da7e2c0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e698 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7e2a0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55e45da7e280 <col:19> 'int' EnumConstant 0x55e45da7e1a0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e45da7e390 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e6b0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7e370 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55e45da7e350 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e45da7e310 <col:23> 'int' EnumConstant 0x55e45da7e2c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e45da7e330 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e45da7e460 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e45da7e6c8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45da7e440 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55e45da7e420 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e45da7e3e0 <col:23> 'int' EnumConstant 0x55e45da7e2c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e45da7e400 <col:40> 'int' 4
| `-EnumConstantDecl 0x55e45da7e530 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55e45da7e6e0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e45da7e510 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55e45da7e4f0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55e45da7e4b0 <col:23> 'int' EnumConstant 0x55e45da7e2c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55e45da7e4d0 <col:40> 'int' 8
|-CXXMethodDecl 0x55e45da7e720 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55e45da7e7c0 <col:68> "" ""
|-CXXMethodDecl 0x55e45da7e858 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55e45da7e8f8 <col:45> "" ""
|-CXXMethodDecl 0x55e45da7e990 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e45da7ea30 <col:57> "" ""
|-CXXMethodDecl 0x55e45da7eac8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55e45da7eb68 <col:45> "" ""
|-CXXMethodDecl 0x55e45da7ec00 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e45da7eca0 <col:57> "" ""
|-CXXMethodDecl 0x55e45da7ed30 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e45da7edd0 <col:51> "" ""
|-CXXMethodDecl 0x55e45da7ee60 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e45da7ef00 <col:63> "" ""
|-CXXMethodDecl 0x55e45da7ef90 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e45da7f030 <col:53> "" ""
|-CXXMethodDecl 0x55e45da7f0c0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e45da7f160 <col:65> "" ""
|-CXXMethodDecl 0x55e45da7f278 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e45da7f1e8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55e45da7f320 <col:61> "" ""
|-CXXMethodDecl 0x55e45da7f4b8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e45da7f3a8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55e45da7f420 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e45da7f568 <col:67> "" ""
|-CXXMethodDecl 0x55e45da7f680 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e45da7f5f0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e45da7f728 <col:63> "" ""
|-CXXMethodDecl 0x55e45da7f8c0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e45da7f7b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e45da7f828 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e45da7f970 <col:69> "" ""
|-CXXMethodDecl 0x55e45da7fa88 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e45da7f9f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e45da7fb30 <col:63> "" ""
|-CXXMethodDecl 0x55e45da82208 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e45da820f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e45da82170 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e45da822b8 <col:69> "" ""
|-CXXMethodDecl 0x55e45da823d0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e45da82340 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55e45da82478 <col:62> "" ""
|-CXXMethodDecl 0x55e45da82610 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e45da82500 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e45da82578 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55e45da826c0 <col:68> "" ""
|-CXXMethodDecl 0x55e45da827d8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55e45da82748 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e45da82880 <col:63> "" ""
|-CXXMethodDecl 0x55e45da82a18 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55e45da82908 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e45da82980 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55e45da82ac8 <col:69> "" ""
|-CXXMethodDecl 0x55e45da82b58 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e45da82bf8 <col:64> "" ""
|-CXXMethodDecl 0x55e45da82c88 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e45da82d28 <col:52> "" ""
|-CXXMethodDecl 0x55e45da82db8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e45da82e58 <col:67> "" ""
|-CXXMethodDecl 0x55e45da82ee8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e45da82f88 <col:55> "" ""
|-CXXMethodDecl 0x55e45da830a0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e45da83010 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e45da83148 <col:58> "" ""
|-CXXMethodDecl 0x55e45da832e0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e45da831d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e45da83248 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e45da83390 <col:62> "" ""
|-CXXMethodDecl 0x55e45da834a8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55e45da83418 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e45da83550 <col:58> "" ""
|-CXXMethodDecl 0x55e45da836e8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55e45da835d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e45da83650 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55e45da83798 <col:62> "" ""
|-CXXMethodDecl 0x55e45da838b0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e45da83820 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55e45da83958 <col:60> "" ""
|-CXXMethodDecl 0x55e45da83af0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e45da839e0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55e45da83a58 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e45da83ba0 <col:64> "" ""
|-CXXMethodDecl 0x55e45da83cb8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e45da83c28 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e45da83d60 <col:58> "" ""
|-CXXMethodDecl 0x55e45da83ef8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e45da83de8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e45da83e60 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55e45da83fa8 <col:62> "" ""
|-CXXMethodDecl 0x55e45da840c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e45da84030 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55e45da84168 <col:59> "" ""
|-CXXMethodDecl 0x55e45da84300 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e45da841f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e45da84268 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e45da843b0 <col:63> "" ""
|-AccessSpecDecl 0x55e45da84420 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55e45da84448 prev 0x55e45da79650 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e45da84540 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55e45da84630 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55e45da84758 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55e45da848d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55e45da84a58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55e45da84bd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55e45da95a08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e45da96278 <col:11>
| |-CXXDestructorDecl 0x55e45da95ae0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55e45da95c18 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e45da95c18
| | `-ParmVarDecl 0x55e45da95d28 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55e45da95dc8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e45da95dc8
| | `-ParmVarDecl 0x55e45da95ed8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55e45da98c98 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e45da98da8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55e45da99028 <col:11>
| |   `-ReturnStmt 0x55e45da99018 <col:11>
| |     `-UnaryOperator 0x55e45da99000 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e45da98ff0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55e45da98e18 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e45da98e18
|   `-ParmVarDecl 0x55e45da98f28 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55e45da84c40 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e45da84d58 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55e45da84df8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55e45da84e60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55e45da84ec8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55e45da84f30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55e45da84f90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55e45da85050 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55e45da850b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55e45da85110 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55e45da95918 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55e45da84df8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55e45da96288 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55e45da962e0 <col:12>
| |-CXXConstructorDecl 0x55e45da95f48 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e45da95f48
| | `-ParmVarDecl 0x55e45da96058 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55e45da960f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e45da960f8
| | `-ParmVarDecl 0x55e45da96208 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55e45da98380 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55e45da85188 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55e45da851e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55e45da85250 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55e45da852b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55e45da85320 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55e45da85388 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55e45da853e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55e45da85448 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55e45da854b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55e45da85538 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55e45da85188 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55e45da958b0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e45da853e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55e45da962f0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55e45da96350 <col:21, line:755:5>
|-CXXConstructorDecl 0x55e45da856d8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55e45da85618 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55e45da857d0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55e45da859b8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55e45da858c0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55e45da85c88 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55e45da85a70 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e45da85ae8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e45da85b60 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da85ea8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55e45da85d58 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55e45da85dd0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55e45da8e488 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55e45da85f68 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55e45da85fe0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55e45da86058 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55e45da8e5e0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e45da8e550 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da8e728 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e45da8e698 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55e45da8e820 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45da963f0 prev 0x55e45da72cb0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55e45da96528 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55e45da965b8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55e45da96660 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55e45da96700 <col:20>
| `-OptimizeNoneAttr 0x55e45da96758 <col:30>
|-CXXMethodDecl 0x55e45da967a8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55e45da96848 <col:20>
| `-OptimizeNoneAttr 0x55e45da968a0 <col:30>
|-CXXMethodDecl 0x55e45da968f0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e45da969b8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e45da96a80 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e45da96b98 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55e45da96c60 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55e45da96d00 <col:20>
| `-OptimizeNoneAttr 0x55e45da96d58 <col:30>
|-CXXMethodDecl 0x55e45da96dc8 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55e45da96e68 <col:20>
| `-OptimizeNoneAttr 0x55e45da96ec0 <col:30>
|-CXXMethodDecl 0x55e45da96f68 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55e45da97008 <col:20>
| `-OptimizeNoneAttr 0x55e45da97060 <col:30>
|-CXXMethodDecl 0x55e45da970b0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e45da971c8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55e45da972e8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55e45da97408 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55e45da974d0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55e45da97570 <col:62> "" ""
|-AccessSpecDecl 0x55e45da975e0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55e45da97640 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55e45da98238 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55e45da98460 <col:29, col:31>
|-CXXMethodDecl 0x55e45da97708 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55e45da97848 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55e45da977b8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55e45da97940 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55e45da98470 <col:23, col:25>
|-CXXMethodDecl 0x55e45da97af8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55e45da97a30 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55e45da97dc8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e45da97bb0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e45da97c28 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e45da97ca0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e45da97f58 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55e45da97e90 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55e45da98050 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55e45da980b8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55e45da980b8
  `-ParmVarDecl 0x55e45da981c8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45d7e0768 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45d7e0888 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55e45d7e0950 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55e45d8b1140 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e45d8b6458 <col:8>
|-CXXConstructorDecl 0x55e45d8b1248 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55e45d8b1248
| `-ParmVarDecl 0x55e45d8b1358 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55e45d8b13f8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45d8b1508 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55e45d7e0950 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e45d8b6670 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55e45d8b6640 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55e45d7e0950
| |     `-CXXStaticCastExpr 0x55e45d8b6610 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55e45d8b65e0 <col:8> 'in_addr' lvalue ParmVar 0x55e45d8b1508 '' 'in_addr &&'
| `-CompoundStmt 0x55e45d8b66b8 <col:8>
`-CXXDestructorDecl 0x55e45d8b68f0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45d8a8e28 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e45d8a8f48 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55e45d8a9030 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55e45d8a9010 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55e45d8a8fd8 <col:22> 'int' 4
|-FieldDecl 0x55e45d8a90d8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55e45d8a90b8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55e45d8a9080 <col:21> 'int' 4
|-FieldDecl 0x55e45d8a9138 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e45d8a9198 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45d8a91f8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45d8a9258 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45d8a92b8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55e45d8a9318 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55e45d8a9378 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45d8a93e8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55e45d8a9458 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45da2df20 prev 0x55e45da72aa0 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e45da2e018 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x55e45da2e0b8 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45da2e118 <line:26:5, col:14> col:14 referenced th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45da2e1a0 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55e45da2e200 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55e45da2e2a8 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x55e45da2e288 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x55e45da2e250 <col:26> 'int' 4
|-FieldDecl 0x55e45da2e350 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x55e45da2e330 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x55e45da2e2f8 <col:23> 'int' 4
|-FieldDecl 0x55e45da2e3b0 <line:39:5, col:13> col:13 referenced th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x55e45da2e410 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x55e45da2e470 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x55e45da2e4d0 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45db8cf90 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45db8d0a8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55e45db8d138 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55e45db8d378 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55e45db8d170 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55e45db8d1f0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55e45db8d268 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55e45db8d590 <col:81> 'const ArgContext' lvalue Var 0x55e45db74ff8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55e45db8d4d0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55e45db8d440 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55e45db8d6e8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55e45db8d6d8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55e45db8d6c0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55e45db8d690 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55e45db8d678 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55e45db8d650 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55e45db8d630 <col:16, col:24> 'String' (CXXTemporary 0x55e45db8d630)
|               `-CXXConstructExpr 0x55e45db8d5f8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55e45db8d5e0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55e45db8d5c0 <col:23> 'bool' lvalue ParmVar 0x55e45db8d440 'x' 'bool'
|-CXXConstructorDecl 0x55e45dbeb0a8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55e45dbeb180 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e45dbeb2b8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55e45dbeb2b8
| `-ParmVarDecl 0x55e45dbeb3c8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55e45dbeb468 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55e45dbeb578 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55e45dbec1d0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e45db8d728 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55e45db8d988 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55e45dbeafb8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e45dbeb5e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55e45dbeb5e8
| `-ParmVarDecl 0x55e45dbeb6f8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55e45dbeb798 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45dbeb8a8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55e45dbec1e0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e45dbec1b0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55e45dbec180 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55e45dbec150 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55e45dbeb8a8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55e45dbec250 <col:19>
`-CXXDestructorDecl 0x55e45dbeb948 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45db7f320 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e45db7f438 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55e45db7f4c8 <col:16, col:22> col:16 public
|-EnumDecl 0x55e45db7f4f0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55e45db7f5f0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e45db7f840 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45db7f5d0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e45db7f5b0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e45db7f680 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e45db7f858 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45db7f660 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55e45db7f640 <col:24> 'int' 22
| |-EnumConstantDecl 0x55e45db7f710 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e45db7f870 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45db7f6f0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55e45db7f6d0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55e45db7f7a0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55e45db7f888 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e45db7f780 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55e45db7f760 <col:25> 'int' 95
| `-EnumConstantDecl 0x55e45db7f7f0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55e45db81200 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e45db816a8 <col:7>
|-CXXConstructorDecl 0x55e45db81370 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55e45db81370
| `-ParmVarDecl 0x55e45db81488 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55e45db81528 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45db81638 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55e45dbf8280 <col:7>
`-CXXDestructorDecl 0x55e45db837a8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e45db7f8b8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55e45db7fa18 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55e45db7faa8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55e45db7fae0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55e45d69f760 'uint32_t' sugar
|   |-Typedef 0x55e45d5b34c8 'uint32_t'
|   `-TypedefType 0x55e45d58c5a0 '__uint32_t' sugar
|     |-Typedef 0x55e45d58c198 '__uint32_t'
|     `-BuiltinType 0x55e45d54a620 'unsigned int'
|-CXXConstructorDecl 0x55e45db7fc28 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55e45db7fb50 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55e45db81108 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e45db816b8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e45db809c0 'base' 'int'
| | `-ImplicitCastExpr 0x55e45db811a8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e45db81168 <col:16> 'int' lvalue ParmVar 0x55e45db7fb50 'b' 'int'
| `-CompoundStmt 0x55e45db81728 <col:19, line:1046:5>
|-CXXMethodDecl 0x55e45db80120 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55e45db7fcf0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55e45db7fd70 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55e45db7fde8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55e45db7fe68 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55e45db7ff28 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55e45db7ffa8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55e45db80578 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55e45db801f0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e45db804d8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e45db80298 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55e45db80338 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55e45db803b0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e45db81128 <col:82> 'const ArgContext' lvalue Var 0x55e45db74ff8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e45db82658 <col:94, line:1067:5>
| |   |-DeclStmt 0x55e45db818b8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55e45db81748 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55e45db81870 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55e45db81ad8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55e45db818e8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55e45db81ab0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55e45db81a90 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55e45db81a40 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55e45db81a20 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55e45db819c8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55e45db81978 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55e45db819a8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55e45db81a08 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55e45db819e8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55e45db81a70 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55e45db81c38 <line:1056:9, col:27>
| |   | `-VarDecl 0x55e45db81bd0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55e45db82080 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55e45db81fb0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55e45db81f30 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e45da69968 0x55e45d8b2f48 0x55e45d8b2c20 0x55e45d8a33f0 0x55e45d8a30a0 0x55e45d8a2990 0x55e45d875300 0x55e45d8025b0
| |   | | |-CallExpr 0x55e45db81e70 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55e45db81c60 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55e45db81d10 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e45db81ce0 <col:19, col:23> '<bound member function type>' .begin 0x55e45d8925f8
| |   | | | |   `-DeclRefExpr 0x55e45db81cc0 <col:19> 'const String' lvalue ParmVar 0x55e45db80298 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55e45db81d80 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55e45db81d50 <col:32, col:36> '<bound member function type>' .end 0x55e45d892810
| |   | | | |   `-DeclRefExpr 0x55e45db81d30 <col:32> 'const String' lvalue ParmVar 0x55e45db80298 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55e45db81da0 <col:43> 'const bool' lvalue Var 0x55e45db81748 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55e45db81e08 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55e45db81de8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55e45db81e30 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e45db81bd0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55e45db81e50 <col:73> 'const int' lvalue Var 0x55e45db818e8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55e45db81f10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55e45db81ee0 <col:16, col:20> '<bound member function type>' .end 0x55e45d892810
| |   | |     `-DeclRefExpr 0x55e45db81ec0 <col:16> 'const String' lvalue ParmVar 0x55e45db80298 'str' 'const String &'
| |   | `-BinaryOperator 0x55e45db82060 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55e45db81ff8 <col:13> 'int' lvalue ->status 0x55e45db80a28
| |   |   | `-CXXThisExpr 0x55e45db81fe8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55e45db82048 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55e45db82028 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f680 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55e45db822d0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55e45db821b8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55e45db821a0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55e45db82188 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55e45db820a8 <col:13> 'int' lvalue ->status 0x55e45db80a28
| |   | | |     `-CXXThisExpr 0x55e45db82098 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55e45db82168 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55e45db82138 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55e45db820e8 <col:23> 'int' lvalue ->status 0x55e45db80a28
| |   | |   |   `-CXXThisExpr 0x55e45db820d8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55e45db82150 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55e45db82118 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f710 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55e45db822b0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55e45db82250 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55e45db821f8 <col:13, col:18> '<bound member function type>' .error 0x55e45db29a90
| |   |   | | `-DeclRefExpr 0x55e45db821d8 <col:13> 'const ArgContext' lvalue ParmVar 0x55e45db803b0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55e45db82278 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55e45db82228 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55e45db822a0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55e45db82290 <col:20> 'bool' false
| |   |-DeclStmt 0x55e45db824a8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55e45db82450 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55e45db823e0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55e45db82608 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55e45db824c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55e45d836798
| |   | |-DeclRefExpr 0x55e45db82508 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55e45db81bd0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55e45db825d8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55e45db82550 <col:64> 'V' lvalue ParmVar 0x55e45db80338 'result' 'V &'
| |   `-ReturnStmt 0x55e45db82648 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55e45db82638 <col:16> 'bool' true
| `-CXXMethodDecl 0x55e45dbfb888 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e45dbfb660 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55e45dbfb738 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55e45dbfb7a0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e45dbfd620 <col:94, line:1067:5>
|     |-DeclStmt 0x55e45dbfc098 <line:1054:9, col:64>
|     | `-VarDecl 0x55e45dbfbeb8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55e45dbfc028 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55e45dbfbff8 <col:36, col:55> 'const bool' lvalue Var 0x55e45d826708 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55e45dbfc278 <line:1055:9, col:91>
|     | `-VarDecl 0x55e45dbfc0b0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55e45dbfc1f8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55e45dbfc1e0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55e45dbfc1c0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55e45dbfc1a0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55e45dbfc180 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55e45dbfc148 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55e45dbfc128 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55e45db819a8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55e45dbfc168 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55e45db819e8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55e45db81a70 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55e45dbfc410 <line:1056:9, col:27>
|     | `-VarDecl 0x55e45dbfc3a8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55e45dbfc898 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55e45dbfc840 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55e45dbfc6f8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55e45dbfc6c8 <col:13> '<bound member function type>' ->parse 0x55e45db80120
|     | | | | `-CXXThisExpr 0x55e45dbfc6b8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55e45dbfc558 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e45dbfc528 <col:19, col:23> '<bound member function type>' .begin 0x55e45d8925f8
|     | | | |   `-DeclRefExpr 0x55e45dbfc508 <col:19> 'const String' lvalue ParmVar 0x55e45dbfb660 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55e45dbfc5c8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55e45dbfc598 <col:32, col:36> '<bound member function type>' .end 0x55e45d892810
|     | | | |   `-DeclRefExpr 0x55e45dbfc578 <col:32> 'const String' lvalue ParmVar 0x55e45dbfb660 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55e45dbfc768 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55e45dbfc748 <col:43> 'const bool' lvalue Var 0x55e45dbfbeb8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55e45dbfc650 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55e45dbfc638 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55e45dbfc618 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55e45dbfc780 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55e45dbfc678 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55e45dbfc3a8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55e45dbfc7b8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55e45dbfc798 <col:73> 'const int' lvalue Var 0x55e45dbfc0b0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55e45dbfc820 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55e45dbfc7f0 <col:16, col:20> '<bound member function type>' .end 0x55e45d892810
|     | |     `-DeclRefExpr 0x55e45dbfc7d0 <col:16> 'const String' lvalue ParmVar 0x55e45dbfb660 'str' 'const String &'
|     | `-BinaryOperator 0x55e45dbfc878 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55e45db81ff8 <col:13> 'int' lvalue ->status 0x55e45db80a28
|     |   | `-CXXThisExpr 0x55e45db81fe8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55e45dbfc860 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55e45db82028 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f680 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55e45dbfca10 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55e45dbfc930 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55e45dbfc918 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55e45dbfc900 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55e45db820a8 <col:13> 'int' lvalue ->status 0x55e45db80a28
|     | | |     `-CXXThisExpr 0x55e45db82098 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55e45dbfc8e0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55e45dbfc8b0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55e45db820e8 <col:23> 'int' lvalue ->status 0x55e45db80a28
|     | |   |   `-CXXThisExpr 0x55e45db820d8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55e45dbfc8c8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55e45db82118 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f710 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55e45dbfc9f0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55e45dbfc9a0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55e45dbfc970 <col:13, col:18> '<bound member function type>' .error 0x55e45db29a90
|     |   | | `-DeclRefExpr 0x55e45dbfc950 <col:13> 'const ArgContext' lvalue ParmVar 0x55e45dbfb7a0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55e45dbfc9c8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55e45db82228 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55e45dbfc9e0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55e45db82290 <col:20> 'bool' false
|     |-DeclStmt 0x55e45dbfcf58 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55e45dbfcf00 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55e45dbfceb0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55e45dbfce90 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55e45dbfce20 'type'
|     |       `-ElaboratedType 0x55e45dbfcdd0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55e45dbfcdb0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55e45d826860 'unsigned_type'
|     |           `-BuiltinType 0x55e45d54a620 'unsigned int'
|     |-CallExpr 0x55e45dbfd5b0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55e45dbfd598 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55e45dbfd518 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55e45dbfd3f8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55e45d836798 'extract_integer')
|     | |-ImplicitCastExpr 0x55e45dbfd5f8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55e45dbfd5e0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55e45dbfcfb8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55e45dbfc3a8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55e45dbfd088 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55e45dbfd038 <col:64> 'int':'int' lvalue ParmVar 0x55e45dbfb738 'result' 'int &'
|     `-ReturnStmt 0x55e45dbfd610 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55e45db82638 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55e45db80938 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55e45db805e8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55e45db80898 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55e45db80698 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55e45db80738 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55e45db807b0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55e45db81148 <col:71> 'const ArgContext' lvalue Var 0x55e45db74ff8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55e45db82dc8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55e45db82720 <line:1071:9, col:12>
| |   | `-VarDecl 0x55e45db826b8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55e45db82da0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55e45db829b0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55e45db82838 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55e45db82800 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55e45db82748 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55e45db827a0 <col:31> 'const String' lvalue ParmVar 0x55e45db80698 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55e45db827c0 <col:36> 'V' lvalue Var 0x55e45db826b8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55e45db827e0 <col:39> 'const ArgContext' lvalue ParmVar 0x55e45db807b0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55e45db82990 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55e45db82970 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55e45db82958 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55e45db82940 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55e45db82860 <col:17> 'int' lvalue ->status 0x55e45db80a28
| |     |     |     `-CXXThisExpr 0x55e45db82850 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55e45db82920 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55e45db828f0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55e45db828a0 <col:27> 'int' lvalue ->status 0x55e45db80a28
| |     |       |   `-CXXThisExpr 0x55e45db82890 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55e45db82908 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55e45db828d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f710 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55e45db829e0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55e45db829d0 <col:20> 'bool' false
| |     `-IfStmt 0x55e45db82d78 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55e45db82a80 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55e45db82a50 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55e45db82a00 <col:18> 'int' lvalue ->status 0x55e45db80a28
| |       | |   `-CXXThisExpr 0x55e45db829f0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55e45db82a68 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55e45db82a30 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f710 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55e45db82cb8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55e45db82c60 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55e45db82ab0 <line:1076:13> '<bound member function type>' ->range_error 0x55e45db81038
| |       | | | `-CXXThisExpr 0x55e45db82aa0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55e45db82ae0 <col:25> 'const ArgContext' lvalue ParmVar 0x55e45db807b0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55e45db82bc0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55e45db82c38 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55e45db82c18 <col:43> 'V' lvalue Var 0x55e45db826b8 'x' 'V'
| |       | `-ReturnStmt 0x55e45db82ca8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55e45db82c98 <col:20> 'bool' false
| |       `-CompoundStmt 0x55e45db82d58 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55e45db82d18 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55e45db82cd8 <col:13> 'V' lvalue ParmVar 0x55e45db80738 'result' 'V &'
| |         | `-DeclRefExpr 0x55e45db82cf8 <col:22> 'V' lvalue Var 0x55e45db826b8 'x' 'V'
| |         `-ReturnStmt 0x55e45db82d48 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55e45db82d38 <col:20> 'bool' true
| `-CXXMethodDecl 0x55e45dbfb248 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55e45dbfb020 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55e45dbfb0f8 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55e45dbfb160 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55e45dbfbe98 <col:83, line:1083:5>
|     |-DeclStmt 0x55e45dbfb4d0 <line:1071:9, col:12>
|     | `-VarDecl 0x55e45dbfb468 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55e45dbfbe70 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55e45dbfbb00 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55e45dbfba28 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55e45dbfb9f0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55e45dbfb9a8 <col:14> '<bound member function type>' ->parse_saturating 0x55e45dbfb888
|       | |   | `-CXXThisExpr 0x55e45dbfb998 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55e45dbfb540 <col:31> 'const String' lvalue ParmVar 0x55e45dbfb020 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55e45dbfb560 <col:36> 'int':'int' lvalue Var 0x55e45dbfb468 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55e45dbfb580 <col:39> 'const ArgContext' lvalue ParmVar 0x55e45dbfb160 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55e45dbfbae0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55e45dbfbac0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55e45dbfbaa8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55e45dbfba90 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55e45db82860 <col:17> 'int' lvalue ->status 0x55e45db80a28
|       |     |     `-CXXThisExpr 0x55e45db82850 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55e45dbfba70 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55e45dbfba40 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55e45db828a0 <col:27> 'int' lvalue ->status 0x55e45db80a28
|       |       |   `-CXXThisExpr 0x55e45db82890 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55e45dbfba58 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55e45db828d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f710 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55e45dbfbb20 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55e45db829d0 <col:20> 'bool' false
|       `-IfStmt 0x55e45dbfbe48 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55e45dbfbb60 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55e45dbfbb30 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55e45db82a00 <col:18> 'int' lvalue ->status 0x55e45db80a28
|         | |   `-CXXThisExpr 0x55e45db829f0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55e45dbfbb48 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55e45db82a30 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55e45db7f710 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55e45dbfbd80 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55e45dbfbcf0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55e45db82ab0 <line:1076:13> '<bound member function type>' ->range_error 0x55e45db81038
|         | | | `-CXXThisExpr 0x55e45db82aa0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55e45dbfbb80 <col:25> 'const ArgContext' lvalue ParmVar 0x55e45dbfb160 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55e45dbfbd58 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55e45dbfbd28 <col:31, col:50> 'const bool' lvalue Var 0x55e45d826708 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55e45dbfbcc8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55e45dbfbcb0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55e45dbfbc98 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55e45dbfbc78 <col:43> 'int':'int' lvalue Var 0x55e45dbfb468 'x' 'int':'int'
|         | `-ReturnStmt 0x55e45dbfbd70 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55e45db82c98 <col:20> 'bool' false
|         `-CompoundStmt 0x55e45dbfbe28 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55e45dbfbdf8 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55e45dbfbda0 <col:13> 'int':'int' lvalue ParmVar 0x55e45dbfb0f8 'result' 'int &'
|           | `-ImplicitCastExpr 0x55e45dbfbde0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55e45dbfbdc0 <col:22> 'int':'int' lvalue Var 0x55e45dbfb468 'x' 'int':'int'
|           `-ReturnStmt 0x55e45dbfbe18 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55e45db82d38 <col:20> 'bool' true
|-FieldDecl 0x55e45db809c0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55e45db80a28 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55e45db80a78 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55e45db80d30 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55e45db80ab8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55e45db80b38 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55e45db80bb0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55e45db80c30 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55e45db81038 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55e45db80e00 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55e45db80e78 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55e45db80f10 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55e45db83628 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55e45db83628
| `-ParmVarDecl 0x55e45db83738 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55e45db838b8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45db839c8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55e45dbf8290 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e45dbf8260 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55e45dbf8230 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e45dbf8200 <col:7> 'IntArg' lvalue ParmVar 0x55e45db839c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e45db809c0 'base' 'int'
| | `-ImplicitCastExpr 0x55e45dbf8388 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e45dbf8358 <col:7> 'int' xvalue .base 0x55e45db809c0
| |     `-CXXStaticCastExpr 0x55e45dbf8328 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e45dbf82f8 <col:7> 'IntArg' lvalue ParmVar 0x55e45db839c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55e45db80a28 'status' 'int'
| | `-ImplicitCastExpr 0x55e45dbf8458 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e45dbf8428 <col:7> 'int' xvalue .status 0x55e45db80a28
| |     `-CXXStaticCastExpr 0x55e45dbf83f8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55e45dbf83c8 <col:7> 'IntArg' lvalue ParmVar 0x55e45db839c8 '' 'IntArg &&'
| `-CompoundStmt 0x55e45dbf84b0 <col:7>
`-CXXDestructorDecl 0x55e45dbf73f0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e45db87ef0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e45db88148 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55e45dbf7318 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e45dbf7890 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55e45dbf7870 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55e45dbf7900 <col:19>
|-CXXConstructorDecl 0x55e45dbf74f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55e45dbf74f8
| `-ParmVarDecl 0x55e45dbf7608 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55e45dbf76a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e45dbf77b8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55e45dbf84c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e45dbf81e0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55e45dbf81b0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55e45dbf8180 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55e45dbf77b8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55e45dbf8530 <col:19>
`-CXXDestructorDecl 0x55e45dbf7940 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
