
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f024b9f8 prev 0x5644f0243248 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644f024baf0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5644f024bb80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5644f024bbf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5644f024bcb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5644f024bd80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5644f024bef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5644f024be30 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5644f024bfa0 <col:24>
| `-OptimizeNoneAttr 0x5644f024bff8 <col:34>
|-CXXMethodDecl 0x5644f024c040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5644f024c2f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5644f024c0f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5644f024c168 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5644f024c1e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5644f024c3b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5644f024c3e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5644f024c450 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5644f024c4d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5644f024c7f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5644f024c590 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5644f024c608 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5644f024c680 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5644f024c700 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5644f024c910 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5644f0253208 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5644f0253208
| `-ParmVarDecl 0x5644f0253318 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5644f02533b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5644f02533b8
| `-ParmVarDecl 0x5644f02534c8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5644f0264430 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f023ec90 prev 0x5644f023ea30 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5644f023ed88 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5644f023ee18 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5644f023ee78 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5644f023ef68 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5644f023f068 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5644f023f238 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5644f023f0e8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5644f023f160 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5644f023f3c8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5644f023f300 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5644f023f470 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5644f023f5a8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5644f023f4e0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5644f023f748 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5644f023f688 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5644f023f8e8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5644f023f828 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5644f023f990 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5644f023fa90 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5644f023fb70 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f023fa70 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5644f023fa50 <col:26> 'int' 1
| `-EnumConstantDecl 0x5644f023fb20 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5644f023fb88 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f023fb00 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5644f023fae0 <col:44> 'int' 2
|-CXXMethodDecl 0x5644f023fcd0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5644f023fbb8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5644f023fc38 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5644f023fe28 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5644f023fd98 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5644f0240038 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5644f023fee8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5644f023ff60 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5644f02400e8 <col:20>
| `-OptimizeNoneAttr 0x5644f0240140 <col:30>
|-CXXMethodDecl 0x5644f0240248 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5644f0240180 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5644f02402f0 <col:20>
| `-OptimizeNoneAttr 0x5644f0240348 <col:30>
|-CXXMethodDecl 0x5644f0240398 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5644f0240460 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5644f0240548 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5644f02405d0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5644f0240658 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5644f02406e0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5644f0240768 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5644f02407f8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5644f02408b8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5644f0240940 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5644f02409c8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5644f0240a50 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5644f0240ad8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5644f0240b60 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5644f0240bf0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5644f0240cb0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5644f0240d40 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5644f0240e90 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5644f0240df8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5644f0241020 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5644f0240f50 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5644f02412c0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5644f02410d8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5644f0241158 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5644f02411d8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5644f0241378 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5644f0241480 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5644f0241710 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f0241460 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5644f0241440 <col:33> 'int' 0
| |-EnumConstantDecl 0x5644f0241510 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5644f0241728 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f02414f0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5644f02414d0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5644f02415a0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5644f0241740 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f0241580 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5644f0241560 <col:38> 'int' 90
| |-EnumConstantDecl 0x5644f0241630 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5644f0241758 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f0241610 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5644f02415f0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5644f02416c0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5644f0241770 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f02416a0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5644f0241680 <col:32> 'int' 2000
|-CXXMethodDecl 0x5644f02417b0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5644f0241ac0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5644f0241930 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5644f02419a8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5644f0241b90 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5644f0241d10 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5644f0241c40 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5644f0241f18 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5644f0241dc8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5644f0241e40 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5644f0242018 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5644f02420b8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5644f0242180 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5644f0242210 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5644f0242440 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f02421f0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5644f02421d0 <col:36> 'int' EnumConstant 0x5644f0242180 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5644f0242260 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5644f02422b0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5644f0242300 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5644f0242350 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5644f02423a0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5644f02423f0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5644f0242528 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5644f0242468 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5644f02425f0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5644f02426b0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5644f0242770 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5644f0242830 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5644f0242918 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5644f02429e0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5644f0242b60 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5644f0242a90 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5644f0242c88 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5644f0242e88 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5644f0242d38 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5644f0242db8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5644f024f6d8 <col:54, line:127:5>
|   |-ParenExpr 0x5644f024f588 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5644f024f558 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5644f024f240 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5644f024f218 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5644f024f200 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5644f024f1e8 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5644f024f1b8 <col:31> 'Router *' lvalue ->_router 0x5644f024d0d0
|   |   |         `-CXXThisExpr 0x5644f024f1a8 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5644f024f2a0 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f024f280 <col:48> 'int' 0
|   |   `-CallExpr 0x5644f024f4b8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5644f024f4a0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f024f480 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f024f4f8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f024f310 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5644f024f510 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f024f330 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5644f024f528 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f024f368 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5644f024f540 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f024f468 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f024f450 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f024f408 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5644f024f620 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5644f024f5b8 <col:9> 'Router *' lvalue ->_router 0x5644f024d0d0
|   | | `-CXXThisExpr 0x5644f024f5a8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5644f024f608 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5644f024f5e8 <col:19> 'Router *' lvalue ParmVar 0x5644f0242d38 'r' 'Router *'
|   `-BinaryOperator 0x5644f024f6b8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5644f024f650 <col:9> 'int' lvalue ->_eindex 0x5644f024d138
|     | `-CXXThisExpr 0x5644f024f640 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5644f024f6a0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5644f024f680 <col:19> 'int' lvalue ParmVar 0x5644f0242db8 'eindex' 'int'
|-CXXMethodDecl 0x5644f0243010 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5644f0242f48 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5644f02430e0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5644f02431a8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5644f0243248 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5644f0243498 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5644f0243310 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5644f0243390 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5644f0243548 <col:20>
| `-OptimizeNoneAttr 0x5644f02435a0 <col:30>
|-CXXMethodDecl 0x5644f02436a8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5644f02435e0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5644f0243750 <col:20>
| `-OptimizeNoneAttr 0x5644f02437a8 <col:30>
|-CXXMethodDecl 0x5644f0243878 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5644f02437e8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5644f0243920 <col:20>
| `-OptimizeNoneAttr 0x5644f0243978 <col:30>
|-CXXMethodDecl 0x5644f0243b08 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5644f02439b0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5644f0243a30 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5644f0243c98 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5644f0243bd0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5644f0243de8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5644f0243d58 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5644f0243f38 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5644f0243ea8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5644f0244088 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5644f0243ff8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5644f0244348 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5644f0244140 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5644f02441c0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5644f0244268 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5644f0244420 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5644f02444e0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5644f02447b0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5644f0244660 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5644f02446d8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5644f02448d8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5644f0244ab0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5644f0244990 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5644f0244a10 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5644f0244c98 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5644f0244b78 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5644f0244bf8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5644f0245058 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5644f0244da0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5644f0244e18 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5644f0244e98 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5644f024ecb8 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5644f024ec98 <col:106> 'int' 0
| `-ParmVarDecl 0x5644f0244f10 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5644f024ecf0 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5644f024ecd0 <col:126> 'int' 0
|-CXXMethodDecl 0x5644f02453d8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5644f0245128 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5644f02451a0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5644f0245220 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5644f0245298 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5644f024ed28 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5644f024ed08 <col:114> 'int' 0
|-CXXMethodDecl 0x5644f0245768 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5644f02454b0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5644f0245528 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5644f02455a8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5644f024ed40 <col:96> 'int' 0
| `-ParmVarDecl 0x5644f0245620 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5644f024ed80 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5644f024ed60 <col:116> 'int' 0
|-CXXMethodDecl 0x5644f0245ae8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5644f0245838 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5644f02458b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5644f0245930 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5644f024edb8 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5644f024ed98 <col:109> 'int' 0
| `-ParmVarDecl 0x5644f02459a8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5644f024edf0 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5644f024edd0 <col:129> 'int' 0
|-CXXMethodDecl 0x5644f0245e68 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5644f0245bb8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5644f0245c30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5644f0245cb0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5644f0245d28 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5644f024ee28 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5644f024ee08 <col:117> 'int' 0
|-CXXMethodDecl 0x5644f02461f8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5644f0245f40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0245fb8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5644f0246038 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5644f024ee40 <col:99> 'int' 0
| `-ParmVarDecl 0x5644f02460b0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5644f024ee80 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5644f024ee60 <col:119> 'int' 0
|-CXXMethodDecl 0x5644f0246618 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5644f02462c8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5644f0246348 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5644f02463c0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5644f0246440 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5644f024eeb8 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5644f024ee98 <col:108> 'int' 0
| `-ParmVarDecl 0x5644f02464c0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5644f024eef0 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5644f024eed0 <col:141> 'int' 0
|-CXXMethodDecl 0x5644f0246a38 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5644f02466f0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5644f0246770 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5644f02467e8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5644f0246868 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5644f02468e8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5644f024ef08 <col:121> 'int' 0
|-CXXMethodDecl 0x5644f0246e68 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5644f0246b18 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5644f0246b98 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5644f0246c10 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5644f0246c90 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5644f024ef28 <col:98> 'int' 0
| `-ParmVarDecl 0x5644f0246d10 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5644f024ef48 <col:123> 'int' 0
|-CXXMethodDecl 0x5644f0247130 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5644f0246f40 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5644f0246fc0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5644f0247040 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5644f024ef68 <col:80> 'int' 0
|-EnumDecl 0x5644f02471e8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5644f02472f0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5644f0247580 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f02472d0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5644f02472b0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5644f0247380 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5644f0247598 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f0247360 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5644f0247340 <col:40> 'int' 2
| |-EnumConstantDecl 0x5644f0247410 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5644f02475b0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f02473f0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5644f02473d0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5644f02474a0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5644f02475c8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f0247480 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5644f0247460 <col:36> 'int' 7
| `-EnumConstantDecl 0x5644f0247530 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5644f02475e0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f0247510 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5644f02474f0 <col:34> 'int' 6
|-CXXMethodDecl 0x5644f0247898 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5644f0247608 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5644f02476a8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5644f0247728 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5644f02477a0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5644f024f020 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5644f024f008 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5644f024eff0 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5644f024efd0 <col:98, col:105> 'String' (CXXTemporary 0x5644f024efd0)
|           `-CXXTemporaryObjectExpr 0x5644f024ef98 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5644f0247b38 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5644f0247968 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5644f02479e0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5644f0247a58 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5644f024f0d0 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5644f024f0b8 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5644f024f0a0 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5644f024f080 <col:94, col:101> 'String' (CXXTemporary 0x5644f024f080)
| |         `-CXXTemporaryObjectExpr 0x5644f024f048 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5644f024f8c0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5644f024f838 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5644f024f808 <col:9> '<bound member function type>' ->add_task_handlers 0x5644f0247898
|     | `-CXXThisExpr 0x5644f024f7f8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5644f024f878 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5644f024f778 <col:27> 'Task *' lvalue ParmVar 0x5644f0247968 'task' 'Task *'
|     |-ImplicitCastExpr 0x5644f024f890 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5644f024f798 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5644f02479e0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5644f024f8a8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5644f024f7b8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5644f0247530 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5644f024f7d8 <col:62> 'const String' lvalue ParmVar 0x5644f0247a58 'prefix' 'const String &'
|-CXXMethodDecl 0x5644f0247d48 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5644f0247c00 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5644f0247c78 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5644f024f180 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5644f024f168 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5644f024f150 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5644f024f130 <col:70, col:77> 'String' (CXXTemporary 0x5644f024f130)
| |         `-CXXTemporaryObjectExpr 0x5644f024f0f8 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5644f024fa98 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5644f024fa10 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5644f024f9e0 <col:9> '<bound member function type>' ->add_task_handlers 0x5644f0247898
|     | `-CXXThisExpr 0x5644f024f9d0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5644f024fa50 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5644f024f950 <col:27> 'Task *' lvalue ParmVar 0x5644f0247c00 'task' 'Task *'
|     |-ImplicitCastExpr 0x5644f024fa68 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5644f024f970 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5644f024fa80 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5644f024f990 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5644f0247530 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5644f024f9b0 <col:57> 'const String' lvalue ParmVar 0x5644f0247c78 'prefix' 'const String &'
|-CXXMethodDecl 0x5644f0248028 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5644f0247e10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0247e90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0247f08 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5644f02482d8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5644f02480f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0248178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f02481f8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5644f02485c8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5644f02483a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0248428 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f02484a0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5644f0248878 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5644f0248698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0248718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0248798 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5644f0248b28 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5644f0248948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f02489c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0248a48 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5644f0248dd8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5644f0248bf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0248c78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0248cf0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5644f0249088 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5644f0248ea8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0248f28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0248fa8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5644f0249338 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5644f0249158 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f02491d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0249258 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5644f02495e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5644f0249408 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0249488 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0249508 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5644f0249898 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5644f02496b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0249738 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f02497b8 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5644f0249b00 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5644f0249968 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5644f02499e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5644f0249a60 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5644f0249da8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5644f0249bd0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5644f0249c50 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5644f0249cc8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5644f024a058 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5644f0249e78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f0249ef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f0249f78 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5644f024a308 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5644f024a128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f024a1a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f024a220 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5644f024a5b8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5644f024a3d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f024a458 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f024a4d0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5644f024a868 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5644f024a688 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f024a708 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5644f024a780 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5644f024ab98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5644f024a938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5644f024a9b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5644f024aa30 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5644f024aaa8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5644f024f198 <col:93> 'bool' false
|-CXXMethodDecl 0x5644f024ad80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5644f024ac68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5644f024ace8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5644f024af58 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5644f024ae40 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5644f024aec0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5644f024b238 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5644f024b018 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5644f024b090 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5644f024b110 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5644f024b188 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5644f024b528 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5644f024b308 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5644f024b380 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5644f024b400 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5644f024b478 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5644f024b760 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5644f024b600 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5644f024b680 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5644f024b948 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5644f024b828 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5644f024b8a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5644f024b9f8 prev 0x5644f0243248 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5644f024baf0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5644f024bb80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5644f024bbf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5644f024bcb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5644f024bd80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5644f024bef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5644f024be30 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5644f024bfa0 <col:24>
| | `-OptimizeNoneAttr 0x5644f024bff8 <col:34>
| |-CXXMethodDecl 0x5644f024c040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5644f024c2f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5644f024c0f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5644f024c168 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5644f024c1e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5644f024c3b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5644f024c3e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5644f024c450 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5644f024c4d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5644f024c7f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5644f024c590 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5644f024c608 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5644f024c680 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5644f024c700 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5644f024c910 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5644f0253208 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5644f0253208
| | `-ParmVarDecl 0x5644f0253318 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5644f02533b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5644f02533b8
| | `-ParmVarDecl 0x5644f02534c8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5644f0264430 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5644f024c988 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5644f024ca28 <col:38> "" ""
|-CXXMethodDecl 0x5644f024cab8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5644f024cb58 <col:44> "" ""
|-AccessSpecDecl 0x5644f024cbc8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5644f024cbf0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5644f024ccf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5644f024cd40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f024ccd0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5644f024ccb0 <col:27> 'int' 4
|-FieldDecl 0x5644f024ce08 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5644f024cfb8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5644f024d070 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5644f024d0d0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5644f024d138 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5644f024d288 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5644f024d1c8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5644f024d438 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5644f024d348 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5644f024d618 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5644f024d4f8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5644f024d578 <col:25> col:28 'int'
|-CXXMethodDecl 0x5644f024d8c0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5644f024d6e0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5644f024d760 <col:28> col:31 'int'
| `-ParmVarDecl 0x5644f024d7d8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5644f024d978 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5644f024da40 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5644f024da90 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5644f024dae0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5644f024dcc0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5644f024db70 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5644f024dbe8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5644f024df68 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5644f024dd88 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5644f024de08 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5644f024de80 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5644f024e188 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5644f024e038 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5644f024e0b8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5644f024e4c0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5644f024e248 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5644f024e2c8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5644f024e340 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5644f024e3c0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5644f024e6a8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5644f024e590 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5644f024e610 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5644f024e7f8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5644f024e768 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5644f024eb78 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5644f024e8b8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5644f024e938 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5644f024e9b0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5644f024ea30 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5644f024ec58 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPFlowID
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   class IPAddress _daddr
         4 |     uint32_t _addr
         8 |   uint16_t _sport
        10 |   uint16_t _dport
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping AST Record Layout
         0 | class CopyFlowID
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _start
       112 |   class IPFlowID _flow
       112 |     class IPAddress _saddr
       112 |       uint32_t _addr
       116 |     class IPAddress _daddr
       116 |       uint32_t _addr
       120 |     uint16_t _sport
       122 |     uint16_t _dport
           | [sizeof=128, dsize=124, align=8,
           |  nvsize=124, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f01dc380 prev 0x5644efe25bd8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644f01dc478 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5644f01dc508 <col:19, col:25> col:19 public
|-TypedefDecl 0x5644f01dc540 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5644efd601d0 'uninitialized_type'
|   `-CXXRecord 0x5644efd60138 'uninitialized_type'
|-CXXConstructorDecl 0x5644f01dc5d0 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01ded98 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5644f01ded58 <col:10> 'int' 0
| `-CompoundStmt 0x5644f01dede0 <col:13, line:22:5>
|-CXXConstructorDecl 0x5644f01dc720 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5644f01dc690 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01dee30 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5644f01dedf0 <col:10> 'unsigned int' lvalue ParmVar 0x5644f01dc690 'x' 'unsigned int'
| `-CompoundStmt 0x5644f01dee78 <col:13, line:27:5>
|-CXXConstructorDecl 0x5644f01dc878 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5644f01dc7e8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01deee0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5644f01deec8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5644f01dee88 <col:10> 'int' lvalue ParmVar 0x5644f01dc7e8 'x' 'int'
| `-CompoundStmt 0x5644f01def28 <col:13, line:31:5>
|-CXXConstructorDecl 0x5644f01dc9d0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5644f01dc940 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01def90 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5644f01def78 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5644f01def38 <col:10> 'unsigned long' lvalue ParmVar 0x5644f01dc940 'x' 'unsigned long'
| `-CompoundStmt 0x5644f01defd8 <col:13, line:35:5>
|-CXXConstructorDecl 0x5644f01dcb28 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5644f01dca98 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01df040 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5644f01df028 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5644f01defe8 <col:10> 'long' lvalue ParmVar 0x5644f01dca98 'x' 'long'
| `-CompoundStmt 0x5644f01df088 <col:13, line:39:5>
|-CXXConstructorDecl 0x5644f01dcce8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5644f01dcbf8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01df108 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5644f01df0b8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5644efed3470
| |     `-DeclRefExpr 0x5644f01df098 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5644f01dcbf8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5644f01df150 <col:20, line:44:5>
|-CXXConstructorDecl 0x5644f01dce78 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5644f01dcdb0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5644f01df2b8 <col:51, line:56:5>
|   `-BinaryOperator 0x5644f01df298 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5644f01df170 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5644f01decf0
|     | `-CXXThisExpr 0x5644f01df160 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5644f01df280 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5644f01df268 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5644f01df248 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5644f01df218 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5644f01df200 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5644f01df1a0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5644f01dcdb0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5644f01dcfc8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5644f01dcf38 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5644f01dd118 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5644f01dd088 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5644f01df328 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5644f01df300 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5644f01df2d0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5644f01dd088 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5644f01dd2a8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5644f01dd1e0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5644f01dd398 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5644f01dfee8 <col:46, line:83:5>
|   `-ReturnStmt 0x5644f01dfed8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5644f01dfec0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5644f01dfe90 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5644f01dfd48 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5644f01dfc30 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5644f01dfb18 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5644f01df350 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5644f01dd488 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5644f01dff98 <col:31, line:88:5>
|   `-ReturnStmt 0x5644f01dff88 <line:87:2, col:10>
|     `-UnaryOperator 0x5644f01dff70 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5644f01dff58 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5644f01dff40 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5644f01dff10 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5644f01decf0
|             `-CXXThisExpr 0x5644f01dff00 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5644f01dd548 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5644f01e0018 <col:34, line:93:5>
|   `-ReturnStmt 0x5644f01e0008 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5644f01dfff0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5644f01dffc0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5644f01decf0
|         `-CXXThisExpr 0x5644f01dffb0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5644f01dd618 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5644f01e0098 <col:38, line:101:5>
|   `-ReturnStmt 0x5644f01e0088 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5644f01e0070 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5644f01e0040 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5644f01decf0
|         `-CXXThisExpr 0x5644f01e0030 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5644f01dd6e8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5644f01e0308 <col:38, line:108:5>
|   `-ReturnStmt 0x5644f01e02f8 <line:107:2, col:58>
|     `-BinaryOperator 0x5644f01e02d8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5644f01e01f0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5644f01e01d0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5644f01e01b8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5644f01e00c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5644f01decf0
|       |   |   `-CXXThisExpr 0x5644f01e00b0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5644f01e0190 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5644f01e0178 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5644f01e0158 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5644efeda898 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5644f01e0138 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5644f01e02b0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5644f01e0298 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5644f01e0278 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5644efeda898 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5644f01e0258 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5644f01dd7a8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5644f01e0578 <col:39, line:112:5>
|   `-ReturnStmt 0x5644f01e0568 <line:111:2, col:56>
|     `-BinaryOperator 0x5644f01e0548 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5644f01e0460 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5644f01e0440 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5644f01e0428 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5644f01e0330 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5644f01decf0
|       |   |   `-CXXThisExpr 0x5644f01e0320 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5644f01e0400 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5644f01e03e8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5644f01e03c8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5644efeda898 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5644f01e03a8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5644f01e0520 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5644f01e0508 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5644f01e04e8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5644efeda898 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5644f01e04c8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5644f01dd8d8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5644f01dd9e0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5644f01ddaf0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5644f01ddbe0 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5644f01ddca0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5644f01ddd68 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5644f01ddf68 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5644f01dde18 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5644f01dde90 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5644f01de0e8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5644f01de028 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5644f01de230 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5644f01de1a0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5644f01de3d8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5644f01de2e8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5644f01de520 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5644f01de490 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5644f01de668 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5644f01de5d8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5644f01de730 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5644f01de7f0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5644f01de968 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5644f01de8a0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5644f01dea30 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5644f01deb18 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5644f01debc0 <col:51> "" ""
|-TypedefDecl 0x5644f01dec60 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5644efe25c70 'IPAddress'
|   `-CXXRecord 0x5644f01dc380 'IPAddress'
|-AccessSpecDecl 0x5644f01decb8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5644f01decf0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5644f01df398 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5644f01df4a8 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f025d7c8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5644f025d780 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5644f01decf0
| |     `-DeclRefExpr 0x5644f025d760 <col:7> 'const IPAddress' lvalue ParmVar 0x5644f01df4a8 '' 'const IPAddress &'
| `-CompoundStmt 0x5644f025d810 <col:7>
|-CXXConstructorDecl 0x5644f01df548 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5644f01df658 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5644f01decf0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01dfe38 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5644f01dfdf0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5644f01decf0
| |     `-CXXStaticCastExpr 0x5644f01dfdc0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5644f01dfd90 <col:7> 'IPAddress' lvalue ParmVar 0x5644f01df658 '' 'IPAddress &&'
| `-CompoundStmt 0x5644f01dfe80 <col:7>
|-CXXDestructorDecl 0x5644f01dfb48 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5644f025e0b8 <col:7> col:7 implicit used operator= 'IPAddress &(const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5644f025e1c8 <col:7> col:7 used 'const IPAddress &'
| `-CompoundStmt 0x5644f025e520 <col:7>
|   |-BinaryOperator 0x5644f025e4c8 <col:7> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x5644f025e480 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x5644f01decf0
|   | | `-CXXThisExpr 0x5644f025e470 <col:7> 'IPAddress *' this
|   | `-ImplicitCastExpr 0x5644f025e4b0 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x5644f025e440 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5644f01decf0
|   |     `-DeclRefExpr 0x5644f025e420 <col:7> 'const IPAddress' lvalue ParmVar 0x5644f025e1c8 '' 'const IPAddress &'
|   `-ReturnStmt 0x5644f025e510 <col:7>
|     `-UnaryOperator 0x5644f025e4f8 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5644f025e4e8 <col:7> 'IPAddress *' this
`-CXXMethodDecl 0x5644f025e238 <col:7> col:7 implicit operator= 'IPAddress &(IPAddress &&)' inline default trivial noexcept-unevaluated 0x5644f025e238
  `-ParmVarDecl 0x5644f025e348 <col:7> col:7 'IPAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f025ace8 <../dummy_inc/click/ipflowid.hh:9:1, line:143:1> line:9:7 referenced class IPFlowID definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644f025ae08 <col:1, col:7> col:7 implicit referenced class IPFlowID
|-AccessSpecDecl 0x5644f025ae98 <col:18, col:24> col:18 public
|-TypedefDecl 0x5644f025aed0 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5644efd601d0 'uninitialized_type'
|   `-CXXRecord 0x5644efd60138 'uninitialized_type'
|-CXXConstructorDecl 0x5644f025af90 <line:17:5, line:19:5> line:17:5 used IPFlowID 'void ()'
| |-CXXCtorInitializer Field 0x5644f025cf18 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025d4e8 <line:18:4, col:11> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5644f025cf78 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025d550 <col:14, col:21> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5644f025cfd8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5644f025d5e0 <col:31> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x5644f025d5a0 <col:31> 'int' 0
| |-CXXCtorInitializer Field 0x5644f025d038 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5644f025d660 <col:42> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x5644f025d620 <col:42> 'int' 0
| `-CompoundStmt 0x5644f025d6c0 <col:45, line:19:5>
|-CXXConstructorDecl 0x5644f025b2f8 <line:26:5, line:28:5> line:26:5 used IPFlowID 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x5644f025b048 <col:14, col:24> col:24 used saddr 'IPAddress'
| |-ParmVarDecl 0x5644f025b0c0 <col:31, col:40> col:40 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x5644f025b138 <col:47, col:57> col:57 used daddr 'IPAddress'
| |-ParmVarDecl 0x5644f025b1b0 <col:64, col:73> col:73 used dport 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x5644f025cf18 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025d820 <line:27:4, col:16> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x5644f025d710 <col:11> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x5644f025d6d0 <col:11> 'IPAddress' lvalue ParmVar 0x5644f025b048 'saddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x5644f025cf78 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025d8d0 <col:19, col:31> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x5644f025d8b8 <col:26> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x5644f025d878 <col:26> 'IPAddress' lvalue ParmVar 0x5644f025b138 'daddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x5644f025cfd8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5644f025d968 <col:41> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x5644f025d928 <col:41> 'uint16_t':'unsigned short' lvalue ParmVar 0x5644f025b0c0 'sport' 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x5644f025d038 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5644f025d9e8 <col:56> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x5644f025d9a8 <col:56> 'uint16_t':'unsigned short' lvalue ParmVar 0x5644f025b1b0 'dport' 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5644f025da48 <col:63, line:28:5>
|-CXXConstructorDecl 0x5644f025b518 <line:37:5, col:60> col:14 IPFlowID 'void (const Packet *, bool)'
| |-ParmVarDecl 0x5644f025b3d0 <col:23, col:37> col:37 p 'const Packet *'
| `-ParmVarDecl 0x5644f025b448 <col:40, col:55> col:45 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5644f025d4b0 <col:55> 'bool' false
|-CXXConstructorDecl 0x5644f025b728 <line:47:5, col:64> col:14 IPFlowID 'void (const click_ip *, bool)'
| |-ParmVarDecl 0x5644f025b5e0 <col:23, col:39> col:39 iph 'const click_ip *'
| `-ParmVarDecl 0x5644f025b658 <col:44, col:59> col:49 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5644f025d4c0 <col:59> 'bool' false
|-CXXConstructorDecl 0x5644f025b880 <line:50:5, line:52:5> line:50:12 IPFlowID 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5644f025b7f0 <col:21, col:47> col:47 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x5644f025cf18 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025da58 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5644f025cf78 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025daa8 <col:12> 'IPAddress' 'void ()'
| `-CompoundStmt 0x5644f025db60 <col:55, line:52:5>
|   `-CStyleCastExpr 0x5644f025db38 <line:51:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5644f025db08 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5644f025b7f0 'unused' 'const uninitialized_type &'
|-TypedefDecl 0x5644f025ba38 <line:55:5, col:60> col:35 referenced unspecified_bool_type 'IPAddress (IPFlowID::*)() const'
| `-MemberPointerType 0x5644f025b9b0 'IPAddress (IPFlowID::*)() const'
|   |-RecordType 0x5644f025ad80 'IPFlowID'
|   | `-CXXRecord 0x5644f025ace8 'IPFlowID'
|   `-ParenType 0x5644f025b950 'IPAddress () const' sugar
|     `-FunctionProtoType 0x5644f01f1120 'IPAddress () const' const cdecl
|       `-RecordType 0x5644efe25c70 'IPAddress'
|         `-CXXRecord 0x5644f01dc380 'IPAddress'
|-CXXConversionDecl 0x5644f025bb78 <line:57:5, line:59:5> line:57:5 operator IPAddress (IPFlowID::*)() const 'IPFlowID::unspecified_bool_type () const'
| `-CompoundStmt 0x5644f025de10 <col:44, line:59:5>
|   `-ReturnStmt 0x5644f025de00 <line:58:2, col:47>
|     `-ConditionalOperator 0x5644f025ddd0 <col:9, col:47> 'IPAddress (IPFlowID::*)() const'
|       |-BinaryOperator 0x5644f025dcf8 <col:9, col:19> 'bool' '||'
|       | |-ImplicitCastExpr 0x5644f025dcc8 <col:9> 'bool' <IntegralToBoolean>
|       | | `-ImplicitCastExpr 0x5644f025dc48 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | |   `-CXXMemberCallExpr 0x5644f025dc28 <col:9> 'uint32_t':'unsigned int'
|       | |     `-MemberExpr 0x5644f025dbf8 <col:9> '<bound member function type>' .operator unsigned int 0x5644f01dd618
|       | |       `-MemberExpr 0x5644f025db88 <col:9> 'const IPAddress' lvalue ->_saddr 0x5644f025cf18
|       | |         `-CXXThisExpr 0x5644f025db78 <col:9> 'const IPFlowID *' implicit this
|       | `-ImplicitCastExpr 0x5644f025dce0 <col:19> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5644f025dcb0 <col:19> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x5644f025dc90 <col:19> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x5644f025dc60 <col:19> '<bound member function type>' .operator unsigned int 0x5644f01dd618
|       |         `-MemberExpr 0x5644f025dbc8 <col:19> 'const IPAddress' lvalue ->_daddr 0x5644f025cf78
|       |           `-CXXThisExpr 0x5644f025dbb8 <col:19> 'const IPFlowID *' implicit this
|       |-UnaryOperator 0x5644f025dd80 <col:28, col:39> 'IPAddress (IPFlowID::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5644f025dd50 <col:29, col:39> 'IPAddress () const' CXXMethod 0x5644f025bc48 'saddr' 'IPAddress () const'
|       `-ImplicitCastExpr 0x5644f025ddb8 <col:47> 'IPAddress (IPFlowID::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5644f025dd98 <col:47> 'int' 0
|-CXXMethodDecl 0x5644f025bc48 <line:63:5, line:65:5> line:63:15 used saddr 'IPAddress () const'
| `-CompoundStmt 0x5644f025dea8 <col:29, line:65:5>
|   `-ReturnStmt 0x5644f025de98 <line:64:2, col:9>
|     `-CXXConstructExpr 0x5644f025de68 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x5644f025de38 <col:9> 'const IPAddress' lvalue ->_saddr 0x5644f025cf18
|         `-CXXThisExpr 0x5644f025de28 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5644f025bd68 <line:67:5, line:69:5> line:67:14 used sport 'uint16_t () const'
| `-CompoundStmt 0x5644f025df28 <col:28, line:69:5>
|   `-ReturnStmt 0x5644f025df18 <line:68:2, col:9>
|     `-ImplicitCastExpr 0x5644f025df00 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x5644f025ded0 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x5644f025cfd8
|         `-CXXThisExpr 0x5644f025dec0 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5644f025be28 <line:71:5, line:73:5> line:71:15 used daddr 'IPAddress () const'
| `-CompoundStmt 0x5644f025dfc0 <col:29, line:73:5>
|   `-ReturnStmt 0x5644f025dfb0 <line:72:2, col:9>
|     `-CXXConstructExpr 0x5644f025df80 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x5644f025df50 <col:9> 'const IPAddress' lvalue ->_daddr 0x5644f025cf78
|         `-CXXThisExpr 0x5644f025df40 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5644f025bee8 <line:75:5, line:77:5> line:75:14 used dport 'uint16_t () const'
| `-CompoundStmt 0x5644f025e040 <col:28, line:77:5>
|   `-ReturnStmt 0x5644f025e030 <line:76:2, col:9>
|     `-ImplicitCastExpr 0x5644f025e018 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x5644f025dfe8 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x5644f025d038
|         `-CXXThisExpr 0x5644f025dfd8 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5644f025c028 <line:80:5, line:82:5> line:80:10 set_saddr 'void (IPAddress)'
| |-ParmVarDecl 0x5644f025bf98 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x5644f025e5e8 <col:33, line:82:5>
|   `-CXXOperatorCallExpr 0x5644f025e5b0 <line:81:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x5644f025e598 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5644f025e3d0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5644f025e0b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x5644f025e068 <col:2> 'IPAddress' lvalue ->_saddr 0x5644f025cf18
|     | `-CXXThisExpr 0x5644f025e058 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5644f025e3b8 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x5644f025e098 <col:11> 'IPAddress' lvalue ParmVar 0x5644f025bf98 'a' 'IPAddress'
|-CXXMethodDecl 0x5644f025c1d8 <line:85:5, line:87:5> line:85:10 set_sport 'void (uint16_t)'
| |-ParmVarDecl 0x5644f025c0e0 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5644f025e698 <col:32, line:87:5>
|   `-BinaryOperator 0x5644f025e678 <line:86:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5644f025e610 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x5644f025cfd8
|     | `-CXXThisExpr 0x5644f025e600 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5644f025e660 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5644f025e640 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5644f025c0e0 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5644f025c320 <line:89:5, line:91:5> line:89:10 set_daddr 'void (IPAddress)'
| |-ParmVarDecl 0x5644f025c290 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x5644f025e798 <col:33, line:91:5>
|   `-CXXOperatorCallExpr 0x5644f025e760 <line:90:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x5644f025e748 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5644f025e728 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5644f025e0b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x5644f025e6c0 <col:2> 'IPAddress' lvalue ->_daddr 0x5644f025cf78
|     | `-CXXThisExpr 0x5644f025e6b0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5644f025e710 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x5644f025e6f0 <col:11> 'IPAddress' lvalue ParmVar 0x5644f025c290 'a' 'IPAddress'
|-CXXMethodDecl 0x5644f025c468 <line:94:5, line:96:5> line:94:10 set_dport 'void (uint16_t)'
| |-ParmVarDecl 0x5644f025c3d8 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5644f025e848 <col:32, line:96:5>
|   `-BinaryOperator 0x5644f025e828 <line:95:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5644f025e7c0 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x5644f025d038
|     | `-CXXThisExpr 0x5644f025e7b0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5644f025e810 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5644f025e7f0 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5644f025c3d8 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5644f025c730 <line:103:5, line:108:5> line:103:10 assign 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x5644f025c520 <col:17, col:27> col:27 used saddr 'IPAddress'
| |-ParmVarDecl 0x5644f025c598 <col:34, col:43> col:43 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x5644f025c610 <col:50, col:60> col:60 used daddr 'IPAddress'
| |-ParmVarDecl 0x5644f025c688 <col:67, col:76> col:76 used dport 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5644f025eb60 <col:83, line:108:5>
|   |-CXXOperatorCallExpr 0x5644f025e910 <line:104:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x5644f025e8f8 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5644f025e8d8 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5644f025e0b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x5644f025e870 <col:2> 'IPAddress' lvalue ->_saddr 0x5644f025cf18
|   | | `-CXXThisExpr 0x5644f025e860 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5644f025e8c0 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x5644f025e8a0 <col:11> 'IPAddress' lvalue ParmVar 0x5644f025c520 'saddr' 'IPAddress'
|   |-CXXOperatorCallExpr 0x5644f025e9f8 <line:105:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x5644f025e9e0 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x5644f025e9c0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x5644f025e0b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x5644f025e958 <col:2> 'IPAddress' lvalue ->_daddr 0x5644f025cf78
|   | | `-CXXThisExpr 0x5644f025e948 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5644f025e9a8 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x5644f025e988 <col:11> 'IPAddress' lvalue ParmVar 0x5644f025c610 'daddr' 'IPAddress'
|   |-BinaryOperator 0x5644f025eaa8 <line:106:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x5644f025ea40 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x5644f025cfd8
|   | | `-CXXThisExpr 0x5644f025ea30 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x5644f025ea90 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-DeclRefExpr 0x5644f025ea70 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5644f025c598 'sport' 'uint16_t':'unsigned short'
|   `-BinaryOperator 0x5644f025eb40 <line:107:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x5644f025ead8 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x5644f025d038
|     | `-CXXThisExpr 0x5644f025eac8 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x5644f025eb28 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5644f025eb08 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x5644f025c688 'dport' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5644f025c838 <line:113:5, line:115:5> line:113:14 used reverse 'IPFlowID () const'
| `-CompoundStmt 0x5644f025f698 <col:30, line:115:5>
|   `-ReturnStmt 0x5644f025f688 <line:114:2, col:48>
|     `-ExprWithCleanups 0x5644f025f670 <col:9, col:48> 'IPFlowID'
|       `-CXXConstructExpr 0x5644f025f640 <col:9, col:48> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5644f025f1f8 <col:9, col:48> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x5644f025f068 <col:9, col:48> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x5644f025efd8 <col:18> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5644f025ebb0 <col:18> 'const IPAddress' lvalue ->_daddr 0x5644f025cf78
|             |   `-CXXThisExpr 0x5644f025eba0 <col:18> 'const IPFlowID *' implicit this
|             |-ImplicitCastExpr 0x5644f025f008 <col:26> 'uint16_t':'unsigned short' <LValueToRValue>
|             | `-MemberExpr 0x5644f025ebf0 <col:26> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x5644f025d038
|             |   `-CXXThisExpr 0x5644f025ebe0 <col:26> 'const IPFlowID *' implicit this
|             |-CXXConstructExpr 0x5644f025f020 <col:34> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x5644f025ec30 <col:34> 'const IPAddress' lvalue ->_saddr 0x5644f025cf18
|             |   `-CXXThisExpr 0x5644f025ec20 <col:34> 'const IPFlowID *' implicit this
|             `-ImplicitCastExpr 0x5644f025f050 <col:42> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-MemberExpr 0x5644f025ec70 <col:42> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x5644f025cfd8
|                 `-CXXThisExpr 0x5644f025ec60 <col:42> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x5644f025c8f8 <line:116:5, col:59> col:21 rev 'IPFlowID () const' inline
| `-DeprecatedAttr 0x5644f025c998 <col:48> "" ""
|-CXXMethodDecl 0x5644f025ca58 <line:122:5, col:34> col:23 hashcode 'hashcode_t () const' inline
|-CXXMethodDecl 0x5644f025cb18 <line:127:5, col:22> col:12 used unparse 'String () const'
|-CXXConversionDecl 0x5644f025cbe8 <line:129:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5644f025cc90 <col:51> "" ""
|-CXXMethodDecl 0x5644f025cdd0 <line:130:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5644f025ce70 <col:44> "" ""
|-AccessSpecDecl 0x5644f025cee0 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x5644f025cf18 <line:135:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x5644f025cf78 <line:136:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x5644f025cfd8 <line:137:5, col:14> col:14 referenced _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f025d038 <line:138:5, col:14> col:14 referenced _dport 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5644f025d170 <line:140:5, col:26> col:9 unparse 'int (char *) const'
| `-ParmVarDecl 0x5644f025d0a0 <col:17, col:23> col:23 s 'char *'
|-FriendDecl 0x5644f025d458 <line:141:5, col:76> col:25
| `-FunctionDecl 0x5644f025d398 parent 0x5644efc0b488 <col:5, col:76> col:25 operator<< 'StringAccum &(StringAccum &, const IPFlowID &)'
|   |-ParmVarDecl 0x5644f025d228 <col:36, col:49> col:49 sa 'StringAccum &'
|   `-ParmVarDecl 0x5644f025d2c8 <col:53, col:69> col:69 flow_id 'const IPFlowID &'
|-CXXConstructorDecl 0x5644f025eca0 <line:9:7> col:7 implicit constexpr IPFlowID 'void (const IPFlowID &)' inline default trivial noexcept-unevaluated 0x5644f025eca0
| `-ParmVarDecl 0x5644f025edb8 <col:7> col:7 'const IPFlowID &'
|-CXXConstructorDecl 0x5644f025ee58 <col:7> col:7 implicit used constexpr IPFlowID 'void (IPFlowID &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5644f025ef68 <col:7> col:7 used 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5644f025cf18 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025f2e8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x5644f025f2a0 <col:7> 'IPAddress' xvalue ._saddr 0x5644f025cf18
| |     `-CXXStaticCastExpr 0x5644f025f270 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5644f025f240 <col:7> 'IPFlowID' lvalue ParmVar 0x5644f025ef68 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5644f025cf78 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x5644f025f3e8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x5644f025f3a0 <col:7> 'IPAddress' xvalue ._daddr 0x5644f025cf78
| |     `-CXXStaticCastExpr 0x5644f025f370 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5644f025f340 <col:7> 'IPFlowID' lvalue ParmVar 0x5644f025ef68 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5644f025cfd8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5644f025f4e8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x5644f025f4a0 <col:7> 'uint16_t':'unsigned short' xvalue ._sport 0x5644f025cfd8
| |     `-CXXStaticCastExpr 0x5644f025f470 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5644f025f440 <col:7> 'IPFlowID' lvalue ParmVar 0x5644f025ef68 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x5644f025d038 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x5644f025f5d0 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x5644f025f588 <col:7> 'uint16_t':'unsigned short' xvalue ._dport 0x5644f025d038
| |     `-CXXStaticCastExpr 0x5644f025f558 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x5644f025f528 <col:7> 'IPFlowID' lvalue ParmVar 0x5644f025ef68 '' 'IPFlowID &&'
| `-CompoundStmt 0x5644f025f630 <col:7>
`-CXXDestructorDecl 0x5644f025f0b8 <col:7> col:7 implicit referenced ~IPFlowID 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  NonVirtualBaseLLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f0262978 <../elements/local/copyflowid.hh:18:1, line:43:1> line:18:7 class CopyFlowID definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5644f0262ad8 <col:1, col:7> col:7 implicit referenced class CopyFlowID
|-AccessSpecDecl 0x5644f0262b68 <line:19:1, col:8> col:1 private
|-CXXMethodDecl 0x5644f0262df0 <line:20:3, line:21:55> line:20:14 reset_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5644f0262ba0 <line:21:6, col:19> col:20 'const String &'
| |-ParmVarDecl 0x5644f0262c18 <col:22, col:30> col:31 'Element *'
| |-ParmVarDecl 0x5644f0262c98 <col:33, col:38> col:39 'void *'
| `-ParmVarDecl 0x5644f0262d10 <col:41, col:54> col:55 'ErrorHandler *'
|-CXXMethodDecl 0x5644f0262f50 <line:23:3, col:24> col:8 monitor 'void (Packet *)'
| `-ParmVarDecl 0x5644f0262ec0 <col:16, col:23> col:24 'Packet *'
|-CXXMethodDecl 0x5644f0263098 <line:24:3, col:23> col:11 set 'Packet *(Packet *)'
| `-ParmVarDecl 0x5644f0263008 <col:15, col:22> col:23 'Packet *'
|-FieldDecl 0x5644f0263150 <line:26:3, col:8> col:8 _start 'bool'
|-FieldDecl 0x5644f02631b0 <line:27:3, col:12> col:12 _flow 'IPFlowID'
|-AccessSpecDecl 0x5644f0263200 <line:29:1, col:7> col:1 public
|-CXXConstructorDecl 0x5644f0263260 <line:30:3, col:14> col:3 CopyFlowID 'void ()'
|-CXXDestructorDecl 0x5644f0263350 <line:31:3, col:15> col:3 ~CopyFlowID 'void ()' noexcept-unevaluated 0x5644f0263350
| `-Overrides: [ 0x5644f023ef68 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5644f0263480 <line:33:3, col:57> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5644f0240398 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5644f02641b8 <col:34, col:57>
|   `-ReturnStmt 0x5644f02641a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5644f0264190 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5644f0264168 <col:43> 'const char [11]' lvalue "CopyFlowID"
|-CXXMethodDecl 0x5644f0263548 <line:34:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5644f0240460 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5644f0264218 <col:34, col:50>
|   `-ReturnStmt 0x5644f0264208 <col:36, col:43>
|     `-ImplicitCastExpr 0x5644f02641f0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5644f02641d0 <col:43> 'const char [4]' lvalue "2/2"
|-CXXMethodDecl 0x5644f0263690 <line:36:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5644f0241d10 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5644f02635f8 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5644f0263970 <line:37:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5644f0241ac0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5644f0263820 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x5644f0263898 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5644f0263b48 <line:39:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5644f023f238 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5644f0263a38 <col:13> col:16 'int'
| `-ParmVarDecl 0x5644f0263ab0 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x5644f0263ca0 <line:40:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x5644f023f3c8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5644f0263c10 <col:16> col:19 'int'
|-CXXMethodDecl 0x5644f0263d68 <line:41:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5644f0241b90 Element::add_handlers 'void ()' ]
|-CXXConstructorDecl 0x5644f0263e38 <line:18:7> col:7 implicit CopyFlowID 'void (const CopyFlowID &)' inline default_delete noexcept-unevaluated 0x5644f0263e38
| `-ParmVarDecl 0x5644f0263f48 <col:7> col:7 'const CopyFlowID &'
`-CXXMethodDecl 0x5644f0263fe8 <col:7> col:7 implicit operator= 'CopyFlowID &(const CopyFlowID &)' inline default_delete noexcept-unevaluated 0x5644f0263fe8
  `-ParmVarDecl 0x5644f02640f8 <col:7> col:7 'const CopyFlowID &'

Layout: <CGRecordLayout
  LLVMType:%class.CopyFlowID = type { %class.Element.base, i8, %class.IPFlowID, [4 x i8] }
  NonVirtualBaseLLVMType:%class.CopyFlowID.base = type { %class.Element.base, i8, %class.IPFlowID }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644eff3f760 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5644eff3f878 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5644eff3f918 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5644eff3f978 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5644eff3f9d8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5644eff3fa88 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644eff3fd90 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644eff3fea8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5644eff3ff50 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5644eff3ffb8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5644eff40048 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5644eff45f40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5644eff46378 <col:12>
|-CXXConstructorDecl 0x5644eff46048 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5644eff46158 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5644eff3ff50 'data' 'const char *'
| | `-ImplicitCastExpr 0x5644eff48900 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5644eff488d0 <col:12> 'const char *const' lvalue .data 0x5644eff3ff50
| |     `-DeclRefExpr 0x5644eff488b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff46158 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5644eff3ffb8 'length' 'int'
| | `-ImplicitCastExpr 0x5644eff48990 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5644eff48960 <col:12> 'const int' lvalue .length 0x5644eff3ffb8
| |     `-DeclRefExpr 0x5644eff48940 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff46158 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5644eff40048 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5644eff48a20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5644eff489f0 <col:12> 'String::memo_t *const' lvalue .memo 0x5644eff40048
| |     `-DeclRefExpr 0x5644eff489d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff46158 '' 'const String::rep_t &'
| `-CompoundStmt 0x5644eff48a78 <col:12>
|-CXXConstructorDecl 0x5644eff461f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5644eff461f8
| `-ParmVarDecl 0x5644eff46308 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5644eff4b7f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5644eff57228 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5644eff57338 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5644eff57850 <col:12>
|   |-BinaryOperator 0x5644eff57668 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5644eff57620 <col:12> 'const char *' lvalue ->data 0x5644eff3ff50
|   | | `-CXXThisExpr 0x5644eff57610 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5644eff57650 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5644eff575e0 <col:12> 'const char *const' lvalue .data 0x5644eff3ff50
|   |     `-DeclRefExpr 0x5644eff575c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff57338 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5644eff57730 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5644eff576e8 <col:12> 'int' lvalue ->length 0x5644eff3ffb8
|   | | `-CXXThisExpr 0x5644eff576d8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5644eff57718 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5644eff576a8 <col:12> 'const int' lvalue .length 0x5644eff3ffb8
|   |     `-DeclRefExpr 0x5644eff57688 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff57338 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5644eff577f8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5644eff577b0 <col:12> 'String::memo_t *' lvalue ->memo 0x5644eff40048
|   | | `-CXXThisExpr 0x5644eff577a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5644eff577e0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5644eff57770 <col:12> 'String::memo_t *const' lvalue .memo 0x5644eff40048
|   |     `-DeclRefExpr 0x5644eff57750 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff57338 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5644eff57840 <col:12>
|     `-UnaryOperator 0x5644eff57828 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5644eff57818 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5644eff573a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5644eff573a8
  `-ParmVarDecl 0x5644eff574b8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644eff36c40 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5644eff36d58 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5644eff36de8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5644eff36e28 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5644efc0bfd0 'const char *'
|   `-QualType 0x5644efc0b521 'const char' const
|     `-BuiltinType 0x5644efc0b520 'char'
|-TypedefDecl 0x5644eff36eb0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5644eff36e80 'String::const_iterator' sugar
|   |-Typedef 0x5644eff36e28 'const_iterator'
|   `-PointerType 0x5644efc0bfd0 'const char *'
|     `-QualType 0x5644efc0b521 'const char' const
|       `-BuiltinType 0x5644efc0b520 'char'
|-TypedefDecl 0x5644eff37020 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5644eff36f90 'int (String::*)() const'
|   |-RecordType 0x5644eff36cd0 'String'
|   | `-CXXRecord 0x5644eff36c40 'String'
|   `-ParenType 0x5644eff36f30 'int () const' sugar
|     `-FunctionProtoType 0x5644eff0bb10 'int () const' const cdecl
|       `-BuiltinType 0x5644efc0b580 'int'
|-TypedefDecl 0x5644eff37088 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5644efd60760 'int64_t' sugar
|   |-Typedef 0x5644efc74390 'int64_t'
|   `-TypedefType 0x5644efc4d630 '__int64_t' sugar
|     |-Typedef 0x5644efc4d208 '__int64_t'
|     `-BuiltinType 0x5644efc0b5a0 'long'
|-TypedefDecl 0x5644eff370f0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5644efd60680 'uint64_t' sugar
|   |-Typedef 0x5644efc74530 'uint64_t'
|   `-TypedefType 0x5644efc4d6c0 '__uint64_t' sugar
|     |-Typedef 0x5644efc4d278 '__uint64_t'
|     `-BuiltinType 0x5644efc0b640 'unsigned long'
|-TypedefDecl 0x5644eff37180 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5644eff37150 'String::intmax_t' sugar
|   |-Typedef 0x5644eff37088 'intmax_t'
|   `-TypedefType 0x5644efd60760 'int64_t' sugar
|     |-Typedef 0x5644efc74390 'int64_t'
|     `-TypedefType 0x5644efc4d630 '__int64_t' sugar
|       |-Typedef 0x5644efc4d208 '__int64_t'
|       `-BuiltinType 0x5644efc0b5a0 'long'
|-TypedefDecl 0x5644eff37210 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5644eff371e0 'String::uintmax_t' sugar
|   |-Typedef 0x5644eff370f0 'uintmax_t'
|   `-TypedefType 0x5644efd60680 'uint64_t' sugar
|     |-Typedef 0x5644efc74530 'uint64_t'
|     `-TypedefType 0x5644efc4d6c0 '__uint64_t' sugar
|       |-Typedef 0x5644efc4d278 '__uint64_t'
|       `-BuiltinType 0x5644efc0b640 'unsigned long'
|-CXXConstructorDecl 0x5644eff372d0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5644eff37478 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5644eff373b8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5644eff37628 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5644eff37568 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5644eff37780 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5644eff376f0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5644eff37998 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5644eff37848 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5644eff378c8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5644eff37bb8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5644eff37a68 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5644eff37ae8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5644eff37dd8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5644eff37c88 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5644eff37d08 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5644eff37ff8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5644eff37ea8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5644eff37f28 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5644eff38188 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5644eff380c0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5644eff38308 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5644eff38248 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5644eff38498 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5644eff383d0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5644eff385f0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5644eff38560 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5644eff38748 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5644eff386b8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5644eff388a0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5644eff38810 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5644eff38a28 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5644eff38968 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5644eff38bb8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5644eff38af0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5644eff38d48 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5644eff38c80 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5644eff38ed8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5644eff38e10 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5644eff38fd0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5644eff390f8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5644eff39278 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5644eff391b0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5644eff393c8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5644eff39338 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5644eff39470 <col:63> "" ""
|-CXXMethodDecl 0x5644eff395b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5644eff394f8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5644eff397c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5644eff39678 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5644eff396f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5644eff39a38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5644eff39890 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5644eff39960 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5644eff39d18 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5644eff39af8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5644eff39b78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5644eff45a10 <col:55> 'int' 10
| `-ParmVarDecl 0x5644eff39bf0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5644eff45a30 <col:76> 'bool' true
|-CXXMethodDecl 0x5644eff39ff8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5644eff39de0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5644eff39e60 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5644eff45a40 <col:56> 'int' 10
| `-ParmVarDecl 0x5644eff39ed8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5644eff45a60 <col:77> 'bool' true
|-CXXMethodDecl 0x5644eff3a100 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5644eff3a1c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5644eff3a290 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5644eff3a330 <col:20>
| `-OptimizeNoneAttr 0x5644eff3a388 <col:30>
|-CXXConversionDecl 0x5644eff3a478 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5644eff3a548 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5644eff3a608 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5644eff3a6f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5644eff3a7b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5644eff3a938 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5644eff3a870 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5644eff3aa88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5644eff3a9f8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5644eff3ab78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5644eff3ac38 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5644eff3ae88 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5644eff3acf0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5644eff3ad70 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5644eff3b0e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5644eff3af50 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5644eff3afd0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5644eff3b1b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5644eff3b3c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5644eff3b270 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5644eff3b2f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5644eff3b5e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5644eff3b490 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5644eff3b510 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5644eff3b778 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5644eff3b6b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5644eff3b868 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5644eff3b9d8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5644eff3b918 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5644eff3bbe8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5644eff3ba98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5644eff3bb18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5644eff3be00 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5644eff3bca8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5644eff3bd20 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5644eff3bf90 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5644eff3bec0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5644eff3c1b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5644eff3c050 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5644eff3c0d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5644eff3c300 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5644eff3c270 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5644eff3c4d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5644eff3c3c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5644eff3c440 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5644eff3c628 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5644eff3c598 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5644eff3c840 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5644eff3c6e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5644eff3c760 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5644eff45a70 <col:39> 'int' 0
|-CXXMethodDecl 0x5644eff3ca60 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5644eff3c900 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5644eff3c980 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5644eff45a90 <col:48> 'int' 0
|-CXXMethodDecl 0x5644eff3cc40 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5644eff3cb20 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5644eff3cba0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5644eff45ab0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5644eff3cd10 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5644eff3cdd0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5644eff3ce90 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5644eff3cf50 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5644eff3d010 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5644eff3d1b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5644eff3d0c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5644eff3d338 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5644eff3d270 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5644eff3d4b8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5644eff3d3f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5644eff3d638 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5644eff3d570 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5644eff3d780 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5644eff3d6f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5644eff3d970 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5644eff3d840 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5644eff3db48 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5644eff3da30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5644eff3dab0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5644eff3dd28 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5644eff3dc10 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5644eff3dc90 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5644eff3de78 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5644eff3dde8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5644eff3e088 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5644eff3df38 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5644eff3dfb8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5644eff3e1e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5644eff3e150 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5644eff3e340 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5644eff3e2a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5644eff3e3e8 <col:57> "" ""
|-CXXMethodDecl 0x5644eff3e4f8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5644eff3e468 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5644eff3e648 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5644eff3e5b8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5644eff3e7c8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5644eff3e700 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5644eff3e890 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5644eff3e950 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5644eff3ea10 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5644eff3eab0 <col:49> "" ""
|-CXXMethodDecl 0x5644eff3eb40 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5644eff3ec00 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5644eff3ecf0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5644eff3edb8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5644eff3ee78 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5644eff3ef38 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5644eff3f030 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5644eff3f0f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5644eff3f1c0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5644eff3f398 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5644eff3f278 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5644eff3f2f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5644eff3f5c0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5644eff3f460 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5644eff3f4e0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5644eff3f6d0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5644eff3f738 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5644eff3f760 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5644eff3f878 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5644eff3f918 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5644eff3f978 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5644eff3f9d8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5644eff3fa88 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5644eff3faf0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5644eff3fd28 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5644eff3fd78 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644eff3fd08 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5644eff3fc18 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5644eff3fbc0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5644eff3fc00 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5644eff3fbe0 <col:32> 'int' 8
|-CXXRecordDecl 0x5644eff3fd90 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5644eff3fea8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5644eff3ff50 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5644eff3ffb8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5644eff40048 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5644eff45f40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5644eff46378 <col:12>
| |-CXXConstructorDecl 0x5644eff46048 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5644eff46158 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5644eff3ff50 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5644eff48900 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5644eff488d0 <col:12> 'const char *const' lvalue .data 0x5644eff3ff50
| | |     `-DeclRefExpr 0x5644eff488b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff46158 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5644eff3ffb8 'length' 'int'
| | | `-ImplicitCastExpr 0x5644eff48990 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5644eff48960 <col:12> 'const int' lvalue .length 0x5644eff3ffb8
| | |     `-DeclRefExpr 0x5644eff48940 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff46158 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5644eff40048 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5644eff48a20 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5644eff489f0 <col:12> 'String::memo_t *const' lvalue .memo 0x5644eff40048
| | |     `-DeclRefExpr 0x5644eff489d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff46158 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5644eff48a78 <col:12>
| |-CXXConstructorDecl 0x5644eff461f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5644eff461f8
| | `-ParmVarDecl 0x5644eff46308 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5644eff4b7f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5644eff57228 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5644eff57338 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5644eff57850 <col:12>
| |   |-BinaryOperator 0x5644eff57668 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5644eff57620 <col:12> 'const char *' lvalue ->data 0x5644eff3ff50
| |   | | `-CXXThisExpr 0x5644eff57610 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5644eff57650 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5644eff575e0 <col:12> 'const char *const' lvalue .data 0x5644eff3ff50
| |   |     `-DeclRefExpr 0x5644eff575c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff57338 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5644eff57730 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5644eff576e8 <col:12> 'int' lvalue ->length 0x5644eff3ffb8
| |   | | `-CXXThisExpr 0x5644eff576d8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5644eff57718 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5644eff576a8 <col:12> 'const int' lvalue .length 0x5644eff3ffb8
| |   |     `-DeclRefExpr 0x5644eff57688 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff57338 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5644eff577f8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5644eff577b0 <col:12> 'String::memo_t *' lvalue ->memo 0x5644eff40048
| |   | | `-CXXThisExpr 0x5644eff577a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5644eff577e0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5644eff57770 <col:12> 'String::memo_t *const' lvalue .memo 0x5644eff40048
| |   |     `-DeclRefExpr 0x5644eff57750 <col:12> 'const String::rep_t' lvalue ParmVar 0x5644eff57338 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5644eff57840 <col:12>
| |     `-UnaryOperator 0x5644eff57828 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5644eff57818 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5644eff573a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5644eff573a8
|   `-ParmVarDecl 0x5644eff574b8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5644eff400c0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5644eff40308 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5644eff40128 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5644eff401a8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5644eff40220 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5644eff45f00 <col:79, line:261:5>
|   |-BinaryOperator 0x5644eff45b78 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5644eff45b10 <col:2, col:5> 'const char *' lvalue .data 0x5644eff3ff50
|   | | `-MemberExpr 0x5644eff45ae0 <col:2> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|   | |   `-CXXThisExpr 0x5644eff45ad0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5644eff45b60 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5644eff45b40 <col:12> 'const char *' lvalue ParmVar 0x5644eff40128 'data' 'const char *'
|   |-BinaryOperator 0x5644eff45c40 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5644eff45bd8 <col:2, col:5> 'int' lvalue .length 0x5644eff3ffb8
|   | | `-MemberExpr 0x5644eff45ba8 <col:2> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|   | |   `-CXXThisExpr 0x5644eff45b98 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5644eff45c28 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5644eff45c08 <col:14> 'int' lvalue ParmVar 0x5644eff401a8 'length' 'int'
|   `-IfStmt 0x5644eff45ee8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5644eff45d60 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5644eff45d48 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5644eff45d28 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5644eff45d08 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5644eff45ca0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5644eff40048
|     |       | `-MemberExpr 0x5644eff45c70 <col:7> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|     |       |   `-CXXThisExpr 0x5644eff45c60 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5644eff45cf0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5644eff45cd0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5644eff40220 'memo' 'String::memo_t *'
|     `-CallExpr 0x5644eff45ec0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5644eff45ea8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5644eff45db0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5644eff30d00 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5644eff45e18 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5644eff3f918
|         `-ImplicitCastExpr 0x5644eff45e00 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5644eff45de0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5644eff40220 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5644eff405b8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5644eff403d8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5644eff40458 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5644eff404d0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5644eff400c0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5644eff46388 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5644eff46518 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5644eff46480 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5644eff463f0 <col:2> '<bound member function type>' ->assign_memo 0x5644eff40308
|     | `-ImplicitCastExpr 0x5644eff464b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5644eff463e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5644eff464d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5644eff46420 <col:14> 'const char *' lvalue ParmVar 0x5644eff403d8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5644eff464e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5644eff46440 <col:20> 'int' lvalue ParmVar 0x5644eff40458 'length' 'int'
|     `-ImplicitCastExpr 0x5644eff46500 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5644eff46460 <col:28> 'String::memo_t *' lvalue ParmVar 0x5644eff404d0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5644eff40748 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5644eff40688 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5644eff46770 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5644eff466f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5644eff46540 <col:2> '<bound member function type>' ->assign_memo 0x5644eff40308
|     | `-CXXThisExpr 0x5644eff46530 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5644eff46728 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5644eff465c0 <col:14, col:19> 'const char *' lvalue .data 0x5644eff3ff50
|     |   `-MemberExpr 0x5644eff46590 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5644eff400c0
|     |     `-DeclRefExpr 0x5644eff46570 <col:14> 'const String' lvalue ParmVar 0x5644eff40688 'x' 'const String &'
|     |-ImplicitCastExpr 0x5644eff46740 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5644eff46640 <col:25, col:30> 'int' lvalue .length 0x5644eff3ffb8
|     |   `-MemberExpr 0x5644eff46610 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5644eff400c0
|     |     `-DeclRefExpr 0x5644eff465f0 <col:25> 'const String' lvalue ParmVar 0x5644eff40688 'x' 'const String &'
|     `-ImplicitCastExpr 0x5644eff46758 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5644eff466c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5644eff40048
|         `-MemberExpr 0x5644eff46690 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5644eff400c0
|           `-DeclRefExpr 0x5644eff46670 <col:38> 'const String' lvalue ParmVar 0x5644eff40688 'x' 'const String &'
|-CXXMethodDecl 0x5644eff40810 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5644eff47130 <col:31, line:278:5>
|   `-IfStmt 0x5644eff47118 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5644eff46810 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5644eff467f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5644eff467c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5644eff40048
|     |     `-MemberExpr 0x5644eff46798 <col:6> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|     |       `-CXXThisExpr 0x5644eff46788 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5644eff470f0 <col:15, line:277:2>
|       |-ParenExpr 0x5644eff46cc0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5644eff46c90 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5644eff46920 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5644eff46908 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5644eff468f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5644eff468b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5644eff3f918
|       |   |       `-ImplicitCastExpr 0x5644eff46898 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5644eff46868 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5644eff40048
|       |   |           `-MemberExpr 0x5644eff46838 <col:27> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|       |   |             `-CXXThisExpr 0x5644eff46828 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5644eff46980 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5644eff46960 <col:54> 'int' 0
|       |   `-CallExpr 0x5644eff46bf0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5644eff46bd8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5644eff46b58 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5644eff46c30 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5644eff46a68 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5644eff46c48 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5644eff46a98 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5644eff46c60 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5644eff46ad0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5644eff46c78 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5644eff46b40 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5644eff46b28 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5644eff46af0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5644eff47010 <line:274:6, line:275:22>
|       | |-CallExpr 0x5644eff46ed0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5644eff46eb8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5644eff46e30 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5644eff32140 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5644eff46e00 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5644eff3f918
|       | |   `-ImplicitCastExpr 0x5644eff46de8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5644eff46db8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5644eff40048
|       | |       `-MemberExpr 0x5644eff46d88 <col:40> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|       | |         `-CXXThisExpr 0x5644eff46d78 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5644eff46fd0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5644eff46fb8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5644eff46ef8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5644eff414e8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5644eff46ff8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5644eff46f58 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5644eff40048
|       |       `-MemberExpr 0x5644eff46f28 <col:15> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|       |         `-CXXThisExpr 0x5644eff46f18 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5644eff470d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5644eff47068 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5644eff40048
|         | `-MemberExpr 0x5644eff47038 <col:6> 'String::rep_t' lvalue ->_r 0x5644eff400c0
|         |   `-CXXThisExpr 0x5644eff47028 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5644eff470b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5644eff47098 <col:16> 'int' 0
|-CXXMethodDecl 0x5644eff40aa8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5644eff408c8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5644eff40948 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5644eff409c0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5644eff40b80 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5644eff40dd0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5644eff40c38 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5644eff40cb8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5644eff40d30 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5644eff40fb8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5644eff40ea0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5644eff40f20 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5644eff410b8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5644eff47208 <col:41, line:286:5>
|   `-ReturnStmt 0x5644eff471f8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5644eff471c8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5644eff47190 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5644eff47178 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5644eff47158 <col:46> 'int' 1
|-CXXMethodDecl 0x5644eff41358 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5644eff41170 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5644eff411f0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5644eff41270 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5644eff414e8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5644eff41420 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5644eff415b8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5644eff41788 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5644eff41670 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5644eff416f0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5644eff41848 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5644eff45270 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5644eff45378 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5644eff453f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5644eff45468 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5644eff454d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5644eff455d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5644eff45620 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644eff455b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5644eff45590 <col:22> 'int' 14
|-CXXMethodDecl 0x5644eff45838 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5644eff45650 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5644eff456d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5644eff45750 <col:43> col:46 'int'
|-FriendDecl 0x5644eff45940 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5644eff459d0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5644eff89210 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5644eff893e8 prev 0x5644eff89210 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5644eff89478 <col:46, col:52> col:46 public
|-TypedefDecl 0x5644eff894a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5644efc0b580 'int'
|-TypedefDecl 0x5644eff8b5a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5644eff8b550 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5644eff8b530 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5644eff896b8 'type'
|     `-SubstTemplateTypeParmType 0x5644eff89680 'String' sugar
|       |-TemplateTypeParmType 0x5644efefb7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5644efefb770 'T'
|       `-RecordType 0x5644eff36cd0 'String'
|         `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8b658 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5644eff8b620 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5644eff8b600 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5644eff8b5a0 'type'
|     `-ElaboratedType 0x5644eff8b550 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5644eff8b530 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5644eff896b8 'type'
|         `-SubstTemplateTypeParmType 0x5644eff89680 'String' sugar
|           |-TemplateTypeParmType 0x5644efefb7c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5644efefb770 'T'
|           `-RecordType 0x5644eff36cd0 'String'
|             `-CXXRecord 0x5644eff36c40 'String'
|-CXXMethodDecl 0x5644eff8b7d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5644eff8b6e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5644eff8b8c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5644eff8b9a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5644eff8b9a8
|-CXXMethodDecl 0x5644eff8bc78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5644eff8bb80 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5644eff8beb8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5644eff8bd30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5644eff8bda8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5644eff8c088 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5644eff8bf78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5644eff8bff0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5644eff8c1e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5644eff8c2b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5644eff8c508 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5644eff8c378 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5644eff8c3f0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5644eff8c768 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5644eff8c5d8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5644eff8c650 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5644eff8c928 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5644eff8c838 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5644eff8cae8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5644eff8c9f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5644eff8cba0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5644eff8cc50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5644eff8ce88 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5644eff8cd00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5644eff8cd78 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5644eff8d128 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5644eff8d030 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5644eff8d1f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5644eff8d240 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5644eff8d290 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5644eff6b070 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5644eff87c78 prev 0x5644eff6b070 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5644eff89180 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5644eff89130 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5644eff89110 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5644eff88fc0 'type'
|     `-SubstTemplateTypeParmType 0x5644eff88e50 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5644efe24ff0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5644efe24f98 'F'
|       `-RecordType 0x5644eff88ab0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5644eff889d0 'typed_array_memory'
|-FieldDecl 0x5644eff8d2e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5644eff8d330 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5644eff8d368 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|   |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5644eff08498 'T'
|   `-RecordType 0x5644eff36cd0 'String'
|     `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8d3f8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5644eff8d3c0 'String &'
|   `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|     |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5644eff08498 'T'
|     `-RecordType 0x5644eff36cd0 'String'
|       `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8d488 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5644eff8d450 'const String &'
|   `-QualType 0x5644eff87d11 'const String' const
|     `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|       |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5644eff08498 'T'
|       `-RecordType 0x5644eff36cd0 'String'
|         `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8d518 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5644eff8d4e0 'String *'
|   `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|     |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5644eff08498 'T'
|     `-RecordType 0x5644eff36cd0 'String'
|       `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8d5a8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5644eff8d570 'const String *'
|   `-QualType 0x5644eff87d11 'const String' const
|     `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|       |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5644eff08498 'T'
|       `-RecordType 0x5644eff36cd0 'String'
|         `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8e200 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5644eff8e1b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5644eff8e190 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5644eff8e0c8 'type'
|     `-LValueReferenceType 0x5644eff8e090 'const String &'
|       `-QualType 0x5644eff8de31 'const String' const
|         `-SubstTemplateTypeParmType 0x5644eff8de30 'String' sugar
|           |-TemplateTypeParmType 0x5644efe2d320 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5644efe2d2c8 'T'
|           `-RecordType 0x5644eff36cd0 'String'
|             `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8e268 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5644eff8d450 'const String &'
|   `-QualType 0x5644eff87d11 'const String' const
|     `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|       |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5644eff08498 'T'
|       `-RecordType 0x5644eff36cd0 'String'
|         `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8e2c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5644efc0b580 'int'
|-TypedefDecl 0x5644eff8e328 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5644eff8d4e0 'String *'
|   `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|     |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5644eff08498 'T'
|     `-RecordType 0x5644eff36cd0 'String'
|       `-CXXRecord 0x5644eff36c40 'String'
|-TypedefDecl 0x5644eff8e390 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5644eff8d570 'const String *'
|   `-QualType 0x5644eff87d11 'const String' const
|     `-SubstTemplateTypeParmType 0x5644eff87d10 'String' sugar
|       |-TemplateTypeParmType 0x5644eff084f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5644eff08498 'T'
|       `-RecordType 0x5644eff36cd0 'String'
|         `-CXXRecord 0x5644eff36c40 'String'
|-EnumDecl 0x5644eff8e3e8 <line:134:5> col:5
| `-EnumConstantDecl 0x5644eff8e4e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5644eff8e4c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5644eff09ed8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5644eff09eb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5644eff09e90 <col:40> 'int' 1
|-CXXConstructorDecl 0x5644eff8e568 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5644eff8e7f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5644eff8e620 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5644eff8e6c0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5644eff8ea88 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5644eff8e970 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5644eff8ed48 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5644eff8ec30 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5644eff8fa30 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5644eff8f910 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5644eff8fd40 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5644eff8fc20 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5644eff90030 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5644eff8fe78 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5644eff8fef0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5644eff90158 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5644eff90208 <col:20> Inherited
| `-OptimizeNoneAttr 0x5644eff90260 <col:30> Inherited
|-CXXMethodDecl 0x5644eff902a8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5644eff90358 <col:20> Inherited
| `-OptimizeNoneAttr 0x5644eff903b0 <col:30> Inherited
|-CXXMethodDecl 0x5644eff90478 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5644eff90528 <col:20> Inherited
| `-OptimizeNoneAttr 0x5644eff90580 <col:30> Inherited
|-CXXMethodDecl 0x5644eff905c8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5644eff90678 <col:20> Inherited
| `-OptimizeNoneAttr 0x5644eff906d0 <col:30> Inherited
|-CXXMethodDecl 0x5644eff90718 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5644eff907c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5644eff90820 <col:30> Inherited
|-CXXMethodDecl 0x5644eff90868 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5644eff90918 <col:20> Inherited
| `-OptimizeNoneAttr 0x5644eff90970 <col:30> Inherited
|-CXXMethodDecl 0x5644eff90998 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5644eff90a48 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5644eff90af8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5644eff90cb8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5644eff90ba8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5644eff90c20 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5644eff90e08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5644eff90d78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5644eff90fb8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5644eff90ec0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5644eff91070 <col:20>
| `-OptimizeNoneAttr 0x5644eff910c8 <col:30>
|-CXXMethodDecl 0x5644eff911e8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5644eff910f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5644eff912a0 <col:20>
| `-OptimizeNoneAttr 0x5644eff912f8 <col:30>
|-CXXMethodDecl 0x5644eff913b0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5644eff91320 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5644eff914f8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5644eff91468 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5644eff91628 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5644eff91758 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5644eff91828 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5644eff918f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5644eff91a38 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5644eff919a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5644eff91b80 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5644eff91af0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5644eff91cc8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5644eff91c38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5644eff91d80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5644eff91e80 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5644eff91df0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5644eff91f38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5644eff91ff8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5644eff920f8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5644eff92278 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5644eff921b8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5644eff92a38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5644eff92330 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5644eff92998 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5644eff92898 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5644eff92b18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5644eff92c68 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5644eff92bd8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5644eff92d20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5644eff92f68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5644eff92de0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5644eff92e58 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5644eff930f8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5644eff93038 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5644eff93308 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5644eff931c0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5644eff93238 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5644eff933c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5644eff93628 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5644eff93530 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5644eff936f8 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5644eff936f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644eff2b370 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644eff2b488 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5644eff2b518 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5644eff2b5e8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5644eff2b6d0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5644eff2b8e8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5644eff2b790 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2ba98 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5644eff2b9a0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5644eff2bbe0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5644eff2bb50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5644eff2bd28 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5644eff2bc98 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2be70 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5644eff2bde0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2bf38 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5644eff2c080 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5644eff2bff0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5644eff2c148 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5644eff2c290 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5644eff2c200 <col:28> col:31 'int'
|-CXXMethodDecl 0x5644eff2c408 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5644eff2c348 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2c550 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5644eff2c4c0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2c618 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5644eff2c7d8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5644eff2c6c8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5644eff2c740 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2ca28 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5644eff2c898 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5644eff2c910 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5644eff2cad8 <col:86> "" ""
|-CXXMethodDecl 0x5644eff2cd48 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5644eff2cbb8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5644eff2cc30 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2cef8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5644eff2ce08 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5644eff2d0a8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5644eff2cfb0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5644eff2d378 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5644eff2d160 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5644eff2d1d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5644eff2d250 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2d658 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5644eff2d440 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5644eff2d4b8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5644eff2d530 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5644eff2d710 <col:115> "" ""
|-AccessSpecDecl 0x5644eff2d780 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5644eff2d7b8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644eff2dc68 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5644eff2dc68
| `-ParmVarDecl 0x5644eff2dd78 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5644eff2de18 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5644eff2de18
| `-ParmVarDecl 0x5644eff2df28 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5644eff64c18 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5644f020f040 <col:7>
|-CXXConstructorDecl 0x5644eff64cf0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5644eff64cf0
| `-ParmVarDecl 0x5644eff64e08 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5644eff64e78 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5644eff64e78
| `-ParmVarDecl 0x5644eff64f88 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5644f0211a40 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f01f7a68 prev 0x5644f01ef170 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644f01f7b60 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5644f01f7c50 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5644f01f7d00 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5644f01f7e88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5644f01f8008 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5644f01f8188 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5644f020f1a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5644f020faa8 <col:11>
|-CXXDestructorDecl 0x5644f020f310 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5644f020f448 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5644f020f448
| `-ParmVarDecl 0x5644f020f558 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5644f020f5f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5644f020f5f8
| `-ParmVarDecl 0x5644f020f708 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5644f0212438 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5644f0212548 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5644f02127c8 <col:11>
|   `-ReturnStmt 0x5644f02127b8 <col:11>
|     `-UnaryOperator 0x5644f02127a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5644f0212790 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5644f02125b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5644f02125b8
  `-ParmVarDecl 0x5644f02126c8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f01f81f0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644f01f8308 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5644f01f83a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5644f01f8410 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5644f01f8478 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5644f01f84e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5644f01f8540 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5644f01f8600 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5644f01f8660 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5644f01f86c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5644f020f0b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5644f01f83a8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5644f020fab8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5644f020fb10 <col:12>
|-CXXConstructorDecl 0x5644f020f778 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5644f020f778
| `-ParmVarDecl 0x5644f020f888 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5644f020f928 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5644f020f928
| `-ParmVarDecl 0x5644f020fa38 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5644f0211b20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f01e8860 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5644f01e8978 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5644f01e8a08 <col:16, col:22> col:16 public
|-EnumDecl 0x5644f01e8a30 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5644f01e8b30 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5644f01e8c10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01e8b10 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5644f01e8af0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5644f01e8bc0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5644f01e8c28 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f01e8ba0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5644f01e8b80 <col:22> 'int' 64
|-CXXMethodDecl 0x5644f01e8fc8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5644f01e8c50 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5644f01e8cd0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5644f01e8db0 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5644f01e8e28 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5644f01e9088 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5644f01e9288 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5644f01e9100 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5644f01e9178 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5644f01e9338 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5644f01e9498 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5644f01e93a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5644f01e9540 <col:72> warn_unused_result ""
|-TypedefDecl 0x5644f01e9870 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5644f01e9800 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5644f01e97a0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5644f01e9760 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5644efc0b4e0 'void'
|       |-PointerType 0x5644efedf530 'unsigned char *'
|       | `-BuiltinType 0x5644efc0b5e0 'unsigned char'
|       |-TypedefType 0x5644efcb0210 'size_t' sugar
|       | |-Typedef 0x5644efc7bbe0 'size_t'
|       | `-BuiltinType 0x5644efc0b640 'unsigned long'
|       `-PointerType 0x5644efc0bce0 'void *'
|         `-BuiltinType 0x5644efc0b4e0 'void'
|-CXXMethodDecl 0x5644f01e9ce8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5644f01e98e0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5644f01e9958 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5644f01e99f0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5644f01e9a70 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5644f02080d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5644f02080b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5644f0208080 <col:58> 'int' 0
| |-ParmVarDecl 0x5644f01e9af0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5644f02080f8 <col:76> 'int' 0
| |-ParmVarDecl 0x5644f01e9b70 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5644f0208118 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5644f01e9db8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5644f01e9e38 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5644f01e9ef8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5644f01e9f98 <col:20>
| `-OptimizeNoneAttr 0x5644f01e9ff0 <col:30>
|-CXXMethodDecl 0x5644f01ea068 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5644f01ea108 <col:20>
| `-OptimizeNoneAttr 0x5644f01ea160 <col:30>
|-CXXMethodDecl 0x5644f01ea1d8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5644f01ea278 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5644f01ea328 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5644f01ea3c8 <col:20>
| |-OptimizeNoneAttr 0x5644f01ea420 <col:30>
| `-WarnUnusedResultAttr 0x5644f01ea448 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5644f01ea4a0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5644f01ea540 <col:20>
| `-OptimizeNoneAttr 0x5644f01ea598 <col:30>
|-CXXMethodDecl 0x5644f01ea5e8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5644f01ea688 <col:20>
| `-OptimizeNoneAttr 0x5644f01ea6e0 <col:30>
|-CXXMethodDecl 0x5644f01ea728 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5644f01ea7c8 <col:20>
| `-OptimizeNoneAttr 0x5644f01ea820 <col:30>
|-CXXMethodDecl 0x5644f01ea868 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5644f01ea928 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5644f01ea9f0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5644f01eaab8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5644f01eab78 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5644f01eac98 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5644f02081e0 <col:54, line:99:5>
|   `-ReturnStmt 0x5644f02081d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5644f02081b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5644f0208188 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5644f01f89f8
|         `-CXXThisExpr 0x5644f0208178 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5644f01eae38 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5644f01ead48 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5644f0208290 <col:67, line:103:5>
|   `-BinaryOperator 0x5644f0208270 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5644f0208208 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5644f01f89f8
|     | `-CXXThisExpr 0x5644f02081f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5644f0208258 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5644f0208238 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5644f01ead48 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5644f01eaf30 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5644f0208310 <col:33, line:107:5>
|   `-ReturnStmt 0x5644f0208300 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5644f02082e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5644f02082b8 <col:16> 'void *' lvalue ->_destructor_argument 0x5644f01f8a60
|         `-CXXThisExpr 0x5644f02082a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5644f01eaff0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5644f0208940 <col:25, line:113:5>
|   |-ParenExpr 0x5644f0208688 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5644f0208658 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5644f02083c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5644f02083a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5644f0208368 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5644f0208338 <col:24> '<bound member function type>' ->shared 0x5644f01ea068
|   |   |       `-ImplicitCastExpr 0x5644f0208388 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5644f0208328 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5644f0208428 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f0208408 <col:42> 'int' 0
|   |   `-CallExpr 0x5644f02085b8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5644f02085a0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f0208580 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f02085f8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f0208498 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5644f0208610 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f02084c0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f0208628 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f02084f8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5644f0208640 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f0208568 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f0208550 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f0208518 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5644f0208888 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5644f02086b8 <col:2> 'unsigned char *' lvalue ->_head 0x5644f01f8800
|   | | `-CXXThisExpr 0x5644f02086a8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5644f0208870 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5644f0208850 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5644f02086f8 <col:10> 'unsigned char *' lvalue ->_data 0x5644f01f8868
|   |     | `-CXXThisExpr 0x5644f02086e8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5644f0208838 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5644f0208818 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5644f0208738 <col:18> 'unsigned char *' lvalue ->_tail 0x5644f01f88d0
|   |         | `-CXXThisExpr 0x5644f0208728 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5644f0208800 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5644f02087e0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5644f0208778 <col:26> 'unsigned char *' lvalue ->_end 0x5644f01f8938
|   |             | `-CXXThisExpr 0x5644f0208768 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5644f02087c8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5644f02087a8 <col:33> 'int' 0
|   `-BinaryOperator 0x5644f0208920 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5644f02088b8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5644f01f89f8
|     | `-CXXThisExpr 0x5644f02088a8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5644f0208908 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5644f02088e8 <col:16> 'int' 0
|-CXXMethodDecl 0x5644f01eb130 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5644f01eb0a0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5644f01eb1d8 <col:20>
| |-OptimizeNoneAttr 0x5644f01eb230 <col:30>
| `-WarnUnusedResultAttr 0x5644f01eb258 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5644f01eb328 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5644f01eb298 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5644f01eb3d0 <col:20>
| |-OptimizeNoneAttr 0x5644f01eb428 <col:30>
| `-WarnUnusedResultAttr 0x5644f01eb450 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5644f01eb588 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5644f01eb490 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5644f01eb630 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5644f01eb730 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5644f01eb6a0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5644f01eb7d8 <col:20>
| `-OptimizeNoneAttr 0x5644f01eb830 <col:30>
|-CXXMethodDecl 0x5644f01eb8f8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5644f01eb868 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5644f01eb9a0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5644f01ebaa0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5644f01eba10 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5644f01ebb48 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5644f01ebc48 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5644f01ebbb8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5644f01ebcf0 <col:20>
| `-OptimizeNoneAttr 0x5644f01ebd48 <col:30>
|-CXXMethodDecl 0x5644f01ebed8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5644f01ebd88 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5644f01ebe00 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5644f0208138 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5644f01ebf88 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5644f01ec188 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5644f01ec000 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5644f01ec078 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f01ec398 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5644f01ec248 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5644f01ec2c0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f01ec5a8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5644f01ec458 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5644f01ec4d8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5644f0208148 <col:39> 'int' 0
|-CXXMethodDecl 0x5644f01ec678 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5644f01ec740 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5644f01ec808 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5644f01ec8c8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5644f01ec990 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5644f01ecad8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5644f01eca48 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5644f01ecca8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5644f01ecb98 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5644f01ecc10 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f01ecd78 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5644f01ece38 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5644f01eced8 <col:20>
| `-OptimizeNoneAttr 0x5644f01ecf30 <col:30>
|-CXXMethodDecl 0x5644f01ecf80 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5644f01ed020 <col:20>
| `-OptimizeNoneAttr 0x5644f01ed078 <col:30>
|-CXXMethodDecl 0x5644f01ed0c8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5644f01ed188 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5644f01ed250 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5644f01ed2f0 <col:20>
| `-OptimizeNoneAttr 0x5644f01ed348 <col:30>
|-CXXMethodDecl 0x5644f01ed498 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5644f01ed388 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5644f01ed400 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f01ed5e8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5644f01ed558 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f01ed6b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5644f01ed770 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5644f01ed810 <col:20>
| `-OptimizeNoneAttr 0x5644f01ed868 <col:30>
|-CXXMethodDecl 0x5644f01ed8b8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5644f01ed958 <col:20>
| `-OptimizeNoneAttr 0x5644f01ed9b0 <col:30>
|-CXXMethodDecl 0x5644f01eda00 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5644f01edac8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5644f01edb68 <col:20>
| `-OptimizeNoneAttr 0x5644f01edbc0 <col:30>
|-CXXMethodDecl 0x5644f01edc08 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5644f01edd28 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5644f01ede98 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5644f01eddd8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5644f01edf88 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5644f01ee028 <col:20>
| `-OptimizeNoneAttr 0x5644f01ee080 <col:30>
|-CXXMethodDecl 0x5644f01ee0d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5644f01ee190 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5644f01ee3c8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5644f01ee240 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5644f01ee2b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5644f01ee478 <col:20>
| `-OptimizeNoneAttr 0x5644f01ee4d0 <col:30>
|-CXXMethodDecl 0x5644f01ee578 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5644f01ee618 <col:20>
| `-OptimizeNoneAttr 0x5644f01ee670 <col:30>
|-CXXMethodDecl 0x5644f01ee6c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5644f01ee760 <col:20>
| `-OptimizeNoneAttr 0x5644f01ee7b8 <col:30>
|-CXXMethodDecl 0x5644f01ee800 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5644f01ee8a0 <col:20>
| `-OptimizeNoneAttr 0x5644f01ee8f8 <col:30>
|-CXXMethodDecl 0x5644f01ee9f8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5644f01ee930 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5644f01eeaa0 <col:20>
| `-OptimizeNoneAttr 0x5644f01eeaf8 <col:30>
|-CXXMethodDecl 0x5644f01eecb8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5644f01eeb30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5644f01eeba8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5644f01eed68 <col:20>
| `-OptimizeNoneAttr 0x5644f01eedc0 <col:30>
|-CXXMethodDecl 0x5644f01eee68 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5644f01eef88 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5644f01ef0a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5644f01ef148 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5644f01ef170 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5644f01ef298 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5644f01ef338 <col:20>
| `-OptimizeNoneAttr 0x5644f01ef390 <col:30>
|-CXXMethodDecl 0x5644f01ef438 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5644f01ef4d8 <col:20>
| `-OptimizeNoneAttr 0x5644f01ef530 <col:30>
|-AccessSpecDecl 0x5644f01ef558 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5644f01ef580 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5644f01ef680 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5644f01ef6d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f01ef660 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5644f01ef640 <col:14> 'int' 48
|-CXXMethodDecl 0x5644f01ef738 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5644f01ef7d8 <col:20>
| `-OptimizeNoneAttr 0x5644f01ef830 <col:30>
|-CXXMethodDecl 0x5644f01ef8a8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5644f01ef948 <col:20>
| `-OptimizeNoneAttr 0x5644f01ef9a0 <col:30>
|-CXXMethodDecl 0x5644f01efa68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5644f01ef9d8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5644f01efc08 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5644f01efda8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5644f01efcb8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5644f01efe50 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5644f01eff50 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5644f01f0300 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01eff30 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5644f01eff10 <col:9> 'int' 0
| |-EnumConstantDecl 0x5644f01effe0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5644f01f0318 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01effc0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5644f01effa0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5644f01f0070 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5644f01f0330 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f0050 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5644f01f0030 <col:14> 'int' 2
| |-EnumConstantDecl 0x5644f01f0100 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5644f01f0348 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f00e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5644f01f00c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5644f01f0190 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5644f01f0360 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f0170 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5644f01f0150 <col:13> 'int' 4
| |-EnumConstantDecl 0x5644f01f0220 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5644f01f0378 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f0200 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5644f01f01e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5644f01f02b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5644f01f0390 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f01f0290 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5644f01f0270 <col:14> 'int' 6
|-CXXMethodDecl 0x5644f01f03f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5644f01f0498 <col:20>
| `-OptimizeNoneAttr 0x5644f01f04f0 <col:30>
|-CXXMethodDecl 0x5644f01f05e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5644f01f0528 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5644f01f0690 <col:20>
| `-OptimizeNoneAttr 0x5644f01f06e8 <col:30>
|-CXXMethodDecl 0x5644f01f0758 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5644f01f0880 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5644f01f09f8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5644f01f0930 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5644f01f0ac0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5644f01f0b88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5644f01f0cc8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5644f01f0c38 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5644f01f0dc0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5644f01f0ec0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5644f01f10c0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f0ea0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5644f01f0e80 <col:23> 'int' 0
| |-EnumConstantDecl 0x5644f01f0f50 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5644f01f10d8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f0f30 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5644f01f0f10 <col:45> 'int' 4
| |-EnumConstantDecl 0x5644f01f0fe0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5644f01f10f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f0fc0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5644f01f0fa0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5644f01f1070 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5644f01f1108 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f01f1050 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5644f01f1030 <col:47> 'int' 16
|-CXXMethodDecl 0x5644f01f1168 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5644f01f12d8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5644f01f1218 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5644f01f1380 <col:20>
| `-OptimizeNoneAttr 0x5644f01f13d8 <col:30>
|-CXXMethodDecl 0x5644f01f1428 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5644f0208a60 <col:18, col:36>
|   `-ReturnStmt 0x5644f0208a50 <col:20, col:33>
|     `-ImplicitCastExpr 0x5644f0208a38 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5644f0208a18 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5644f02089e8 <col:27> '<bound member function type>' ->xanno 0x5644f01ef438
|           `-CXXThisExpr 0x5644f02089d8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5644f01f1520 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5644f0208b70 <col:30, col:48>
|   `-ReturnStmt 0x5644f0208b60 <col:32, col:45>
|     `-ImplicitCastExpr 0x5644f0208b48 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5644f0208b28 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5644f0208af8 <col:39> '<bound member function type>' ->xanno 0x5644f01ef298
|           `-CXXThisExpr 0x5644f0208ae8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5644f01f1608 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5644f0208d08 <col:24, col:50>
|   `-ReturnStmt 0x5644f0208cf8 <col:26, col:47>
|     `-UnaryOperator 0x5644f0208ce0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5644f0208cc0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5644f0208ca8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5644f0208c58 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5644f01f7d00
|         |   `-CXXMemberCallExpr 0x5644f0208c38 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5644f0208c08 <col:34> '<bound member function type>' ->xanno 0x5644f01ef438
|         |       `-CXXThisExpr 0x5644f0208bf8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5644f0208c88 <col:46> 'int' 0
|-CXXMethodDecl 0x5644f01f16f8 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5644f0208ea0 <col:36, col:62>
|   `-ReturnStmt 0x5644f0208e90 <col:38, col:59>
|     `-UnaryOperator 0x5644f0208e78 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5644f0208e58 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5644f0208e40 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5644f0208df0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5644f01f7d00
|         |   `-CXXMemberCallExpr 0x5644f0208dd0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5644f0208da0 <col:46> '<bound member function type>' ->xanno 0x5644f01ef298
|         |       `-CXXThisExpr 0x5644f0208d90 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5644f0208e20 <col:58> 'int' 0
|-CXXMethodDecl 0x5644f01f1818 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5644f0209038 <col:26, col:53>
|   `-ReturnStmt 0x5644f0209028 <col:28, col:50>
|     `-UnaryOperator 0x5644f0209010 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5644f0208ff0 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5644f0208fd8 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5644f0208f88 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5644f01f8008
|         |   `-CXXMemberCallExpr 0x5644f0208f68 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5644f0208f38 <col:36> '<bound member function type>' ->xanno 0x5644f01ef438
|         |       `-CXXThisExpr 0x5644f0208f28 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5644f0208fb8 <col:49> 'int' 0
|-CXXMethodDecl 0x5644f01f1938 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5644f0209208 <col:38, col:65>
|   `-ReturnStmt 0x5644f02091f8 <col:40, col:62>
|     `-UnaryOperator 0x5644f02091e0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5644f02091c0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5644f02091a8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5644f0209120 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5644f01f8008
|         |   `-CXXMemberCallExpr 0x5644f0209100 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5644f02090d0 <col:48> '<bound member function type>' ->xanno 0x5644f01ef298
|         |       `-CXXThisExpr 0x5644f02090c0 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5644f0209150 <col:61> 'int' 0
|-CXXMethodDecl 0x5644f01f1ae8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5644f01f19f0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5644f02098d8 <col:34, line:463:5>
|   |-ParenExpr 0x5644f0209720 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5644f02096f0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5644f0209358 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f0209328 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f0209278 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f0209260 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f0209220 <col:23> 'int' lvalue ParmVar 0x5644f01f19f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f0209240 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f0209308 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f02092d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f0209298 <col:33> 'int' lvalue ParmVar 0x5644f01f19f0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5644f02092f0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5644f02092b8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5644f02093b8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f0209398 <col:56> 'int' 0
|   |   `-CallExpr 0x5644f0209650 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5644f0209638 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f0209618 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f0209690 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f02094a8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5644f02096a8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f02094d8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f02096c0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f0209510 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5644f02096d8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f0209600 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f02095e8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f02095a8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5644f02098c8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5644f02098b0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5644f0209890 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5644f0209860 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5644f0209810 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5644f01f7d00
|         |   `-CXXMemberCallExpr 0x5644f02097f0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5644f02097c0 <col:9> '<bound member function type>' ->xanno 0x5644f01ef298
|         |       `-CXXThisExpr 0x5644f02097b0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5644f0209878 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5644f0209840 <col:21> 'int' lvalue ParmVar 0x5644f01f19f0 'i' 'int'
|-CXXMethodDecl 0x5644f01f1d38 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5644f01f1ba8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5644f01f1c20 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5644f0209f68 <col:40, line:472:5>
|   |-ParenExpr 0x5644f0209d80 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5644f0209d50 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5644f0209a30 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f0209a00 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f0209950 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f0209938 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f02098f8 <col:23> 'int' lvalue ParmVar 0x5644f01f1ba8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f0209918 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f02099e0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f02099b0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f0209970 <col:33> 'int' lvalue ParmVar 0x5644f01f1ba8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5644f02099c8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5644f0209990 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5644f0209a90 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f0209a70 <col:56> 'int' 0
|   |   `-CallExpr 0x5644f0209cb0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5644f0209c98 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f0209c78 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f0209cf0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f0209b00 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5644f0209d08 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f0209b30 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f0209d20 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f0209b68 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5644f0209d38 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f0209c60 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f0209c48 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f0209c08 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5644f0209f48 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5644f0209ef0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5644f0209ec0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5644f0209e70 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5644f01f7d00
|     | |   `-CXXMemberCallExpr 0x5644f0209e50 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5644f0209e20 <col:2> '<bound member function type>' ->xanno 0x5644f01ef438
|     | |       `-CXXThisExpr 0x5644f0209e10 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5644f0209ed8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5644f0209ea0 <col:14> 'int' lvalue ParmVar 0x5644f01f1ba8 'i' 'int'
|     `-ImplicitCastExpr 0x5644f0209f30 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5644f0209f10 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5644f01f1c20 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5644f01f1ef8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5644f01f1e00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5644f020a6e8 <col:36, line:485:5>
|   |-ParenExpr 0x5644f020a450 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020a420 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020a100 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020a0d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f0209fe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f0209fc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f0209f88 <col:23> 'int' lvalue ParmVar 0x5644f01f1e00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f0209fa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020a0b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020a098 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020a000 <col:33> 'int' lvalue ParmVar 0x5644f01f1e00 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020a078 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020a060 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020a020 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020a040 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5644f020a160 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020a140 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020a380 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020a368 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020a348 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020a3c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020a1d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5644f020a3d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020a208 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020a3f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020a240 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5644f020a408 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020a330 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020a318 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020a2d8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5644f020a6d8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5644f020a6c0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5644f020a6a8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5644f020a678 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5644f020a618 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5644f020a5e8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5644f020a560 <col:61, col:70> 'char const[48]' lvalue ->c 0x5644f01f7c50
|             |   `-CXXMemberCallExpr 0x5644f020a540 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5644f020a510 <col:61> '<bound member function type>' ->xanno 0x5644f01ef298
|             |       `-CXXThisExpr 0x5644f020a500 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5644f020a600 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5644f020a590 <col:74> 'int' lvalue ParmVar 0x5644f01f1e00 'i' 'int'
|-CXXMethodDecl 0x5644f01f2148 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5644f01f1fb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5644f01f2030 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5644f020ae38 <col:42, line:500:5>
|   |-ParenExpr 0x5644f020abd0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020aba0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020a880 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020a850 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020a760 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020a748 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020a708 <col:23> 'int' lvalue ParmVar 0x5644f01f1fb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020a728 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020a830 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020a818 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020a780 <col:33> 'int' lvalue ParmVar 0x5644f01f1fb8 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020a7f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020a7e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020a7a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020a7c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5644f020a8e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020a8c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020ab00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020aae8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020aac8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020ab40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020a950 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5644f020ab58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020a988 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020ab70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020a9c0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5644f020ab88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020aab0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020aa98 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020aa58 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5644f020ae18 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5644f020adc8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5644f020ad98 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5644f020ad40 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5644f020ad10 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5644f020acc0 <col:48, col:57> 'char [48]' lvalue ->c 0x5644f01f7c50
|     |     |   `-CXXMemberCallExpr 0x5644f020aca0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5644f020ac70 <col:48> '<bound member function type>' ->xanno 0x5644f01ef438
|     |     |       `-CXXThisExpr 0x5644f020ac60 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5644f020ad28 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5644f020acf0 <col:61> 'int' lvalue ParmVar 0x5644f01f1fb8 'i' 'int'
|     `-ImplicitCastExpr 0x5644f020ae00 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5644f020ade0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5644f01f2030 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5644f01f2308 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5644f01f2210 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5644f020b598 <col:35, line:513:5>
|   |-ParenExpr 0x5644f020b2a8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020b278 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020afd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020afa0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020aeb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020ae98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020ae58 <col:23> 'int' lvalue ParmVar 0x5644f01f2210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020ae78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020af80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020af68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020aed0 <col:33> 'int' lvalue ParmVar 0x5644f01f2210 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020af48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020af30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020aef0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020af10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5644f020b030 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020b010 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020b1d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020b1c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020b1a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020b218 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020b0a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5644f020b230 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020b0d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020b248 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020b110 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5644f020b260 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020b188 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020b170 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020b130 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5644f020b588 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5644f020b570 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5644f020b558 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5644f020b528 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5644f020b4a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5644f020b470 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5644f020b420 <col:60, col:69> 'char const[48]' lvalue ->c 0x5644f01f7c50
|             |   `-CXXMemberCallExpr 0x5644f020b400 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5644f020b3d0 <col:60> '<bound member function type>' ->xanno 0x5644f01ef298
|             |       `-CXXThisExpr 0x5644f020b3c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5644f020b488 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5644f020b450 <col:73> 'int' lvalue ParmVar 0x5644f01f2210 'i' 'int'
|-CXXMethodDecl 0x5644f01f2558 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5644f01f23c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5644f01f2440 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5644f020bc78 <col:41, line:528:5>
|   |-ParenExpr 0x5644f020ba08 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020b9d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020b730 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020b700 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020b610 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020b5f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020b5b8 <col:23> 'int' lvalue ParmVar 0x5644f01f23c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020b5d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020b6e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020b6c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020b630 <col:33> 'int' lvalue ParmVar 0x5644f01f23c8 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020b6a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020b690 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020b650 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020b670 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5644f020b790 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020b770 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020b938 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020b920 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020b900 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020b978 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020b800 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5644f020b990 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020b838 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020b9a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020b870 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5644f020b9c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020b8e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020b8d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020b890 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5644f020bc58 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5644f020bc08 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5644f020bbd8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5644f020bb78 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5644f020bb48 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5644f020baf8 <col:47, col:56> 'char [48]' lvalue ->c 0x5644f01f7c50
|     |     |   `-CXXMemberCallExpr 0x5644f020bad8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5644f020baa8 <col:47> '<bound member function type>' ->xanno 0x5644f01ef438
|     |     |       `-CXXThisExpr 0x5644f020ba98 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5644f020bb60 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5644f020bb28 <col:60> 'int' lvalue ParmVar 0x5644f01f23c8 'i' 'int'
|     `-ImplicitCastExpr 0x5644f020bc40 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5644f020bc20 <col:65> 'int16_t':'short' lvalue ParmVar 0x5644f01f2440 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5644f01f2718 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5644f01f2620 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5644f020c348 <col:36, line:541:5>
|   |-ParenExpr 0x5644f020c0e8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020c0b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020be10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020bde0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020bcf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020bcd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020bc98 <col:23> 'int' lvalue ParmVar 0x5644f01f2620 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020bcb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020bdc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020bda8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020bd10 <col:33> 'int' lvalue ParmVar 0x5644f01f2620 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020bd88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020bd70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020bd30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020bd50 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5644f020be70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020be50 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020c018 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020c000 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020bfe0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020c058 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020bee0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5644f020c070 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020bf18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020c088 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020bf50 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5644f020c0a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020bfc8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020bfb0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020bf70 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5644f020c338 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5644f020c320 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5644f020c308 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5644f020c2d8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5644f020c280 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5644f020c250 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5644f020c200 <col:61, col:70> 'char const[48]' lvalue ->c 0x5644f01f7c50
|             |   `-CXXMemberCallExpr 0x5644f020c1e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5644f020c1b0 <col:61> '<bound member function type>' ->xanno 0x5644f01ef298
|             |       `-CXXThisExpr 0x5644f020c1a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5644f020c268 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5644f020c230 <col:74> 'int' lvalue ParmVar 0x5644f01f2620 'i' 'int'
|-CXXMethodDecl 0x5644f01f28e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5644f01f27d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5644f01f2850 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5644f01f2998 <col:20>
| `-OptimizeNoneAttr 0x5644f01f29f0 <col:30>
|-CXXMethodDecl 0x5644f01f2b28 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5644f01f2a30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5644f020ca18 <col:35, line:562:5>
|   |-ParenExpr 0x5644f020c7b8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020c788 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020c4e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020c4b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020c3c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020c3a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020c368 <col:23> 'int' lvalue ParmVar 0x5644f01f2a30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020c388 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020c490 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020c478 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020c3e0 <col:33> 'int' lvalue ParmVar 0x5644f01f2a30 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020c458 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020c440 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020c400 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020c420 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5644f020c540 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020c520 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020c6e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020c6d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020c6b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020c728 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020c5b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5644f020c740 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020c5e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020c758 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020c620 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5644f020c770 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020c698 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020c680 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020c640 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5644f020ca08 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5644f020c9f0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5644f020c9d8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5644f020c9a8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5644f020c950 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5644f020c920 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5644f020c8d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5644f01f7c50
|             |   `-CXXMemberCallExpr 0x5644f020c8b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5644f020c880 <col:60> '<bound member function type>' ->xanno 0x5644f01ef298
|             |       `-CXXThisExpr 0x5644f020c870 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5644f020c938 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5644f020c900 <col:73> 'int' lvalue ParmVar 0x5644f01f2a30 'i' 'int'
|-CXXMethodDecl 0x5644f01f2d38 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5644f01f2be8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5644f01f2c60 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5644f020d0f8 <col:41, line:577:5>
|   |-ParenExpr 0x5644f020ce88 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020ce58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020cbb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020cb80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020ca90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020ca78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020ca38 <col:23> 'int' lvalue ParmVar 0x5644f01f2be8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020ca58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020cb60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020cb48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020cab0 <col:33> 'int' lvalue ParmVar 0x5644f01f2be8 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020cb28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020cb10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020cad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020caf0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5644f020cc10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020cbf0 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020cdb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020cda0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020cd80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020cdf8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020cc80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5644f020ce10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020ccb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020ce28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020ccf0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5644f020ce40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020cd68 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020cd50 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020cd10 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5644f020d0d8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5644f020d088 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5644f020d058 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5644f020cff8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5644f020cfc8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5644f020cf78 <col:47, col:56> 'char [48]' lvalue ->c 0x5644f01f7c50
|     |     |   `-CXXMemberCallExpr 0x5644f020cf58 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5644f020cf28 <col:47> '<bound member function type>' ->xanno 0x5644f01ef438
|     |     |       `-CXXThisExpr 0x5644f020cf18 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5644f020cfe0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5644f020cfa8 <col:60> 'int' lvalue ParmVar 0x5644f01f2be8 'i' 'int'
|     `-ImplicitCastExpr 0x5644f020d0c0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5644f020d0a0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5644f01f2c60 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5644f01f2ef8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5644f01f2e00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5644f020d828 <col:36, line:591:5>
|   |-ParenExpr 0x5644f020d568 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020d538 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020d290 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020d260 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020d170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020d158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020d118 <col:23> 'int' lvalue ParmVar 0x5644f01f2e00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020d138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020d240 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020d228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020d190 <col:33> 'int' lvalue ParmVar 0x5644f01f2e00 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020d208 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020d1f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020d1b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020d1d0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5644f020d2f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020d2d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020d498 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020d480 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020d460 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020d4d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020d360 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5644f020d4f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020d398 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020d508 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020d3d0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5644f020d520 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020d448 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020d430 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020d3f0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5644f020d818 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5644f020d800 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5644f020d7e8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5644f020d7b8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5644f020d730 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5644f020d700 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5644f020d6b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5644f01f7c50
|             |   `-CXXMemberCallExpr 0x5644f020d690 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5644f020d660 <col:61> '<bound member function type>' ->xanno 0x5644f01ef298
|             |       `-CXXThisExpr 0x5644f020d650 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5644f020d718 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5644f020d6e0 <col:74> 'int' lvalue ParmVar 0x5644f01f2e00 'i' 'int'
|-CXXMethodDecl 0x5644f01f3148 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5644f01f2fb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5644f01f3030 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5644f020df08 <col:42, line:606:5>
|   |-ParenExpr 0x5644f020dc98 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5644f020dc68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020d9c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020d990 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020d8a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020d888 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020d848 <col:23> 'int' lvalue ParmVar 0x5644f01f2fb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020d868 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020d970 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5644f020d958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020d8c0 <col:33> 'int' lvalue ParmVar 0x5644f01f2fb8 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020d938 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020d920 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020d8e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5644f020d900 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5644f020da20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020da00 <col:60> 'int' 0
|   |   `-CallExpr 0x5644f020dbc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5644f020dbb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020db90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020dc08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020da90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5644f020dc20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020dac8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020dc38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020db00 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5644f020dc50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020db78 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020db60 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020db20 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5644f020dee8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5644f020de98 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5644f020de68 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5644f020de08 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5644f020ddd8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5644f020dd88 <col:48, col:57> 'char [48]' lvalue ->c 0x5644f01f7c50
|     |     |   `-CXXMemberCallExpr 0x5644f020dd68 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5644f020dd38 <col:48> '<bound member function type>' ->xanno 0x5644f01ef438
|     |     |       `-CXXThisExpr 0x5644f020dd28 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5644f020ddf0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5644f020ddb8 <col:61> 'int' lvalue ParmVar 0x5644f01f2fb8 'i' 'int'
|     `-ImplicitCastExpr 0x5644f020ded0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5644f020deb0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5644f01f3030 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5644f01f32e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5644f01f3210 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5644f020e778 <col:33, line:620:5>
|   |-ParenExpr 0x5644f020e4f0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5644f020e4c0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020e110 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020e0e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020df80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020df68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020df28 <col:23> 'int' lvalue ParmVar 0x5644f01f3210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020df48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020e0c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5644f020e0a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020dfa0 <col:33> 'int' lvalue ParmVar 0x5644f01f3210 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020e088 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020e070 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020dfc0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5644f020e048 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5644f020e030 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5644f020dff8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5644f020e170 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020e150 <col:79> 'int' 0
|   |   `-CallExpr 0x5644f020e420 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5644f020e408 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020e3e8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020e460 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020e258 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5644f020e478 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020e2a0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020e490 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020e2d8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5644f020e4a8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020e3d0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020e3b8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020e378 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5644f020e768 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5644f020e750 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5644f020e738 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5644f020e708 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5644f020e680 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5644f020e650 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5644f020e600 <col:67, col:76> 'char const[48]' lvalue ->c 0x5644f01f7c50
|             |   `-CXXMemberCallExpr 0x5644f020e5e0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5644f020e5b0 <col:67> '<bound member function type>' ->xanno 0x5644f01ef298
|             |       `-CXXThisExpr 0x5644f020e5a0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5644f020e668 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5644f020e630 <col:80> 'int' lvalue ParmVar 0x5644f01f3210 'i' 'int'
|-CXXMethodDecl 0x5644f01f34f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5644f01f33a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5644f01f3420 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5644f020efa0 <col:45, line:635:5>
|   |-ParenExpr 0x5644f020ece8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5644f020ecb8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5644f020e980 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5644f020e950 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5644f020e7f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5644f020e7d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5644f020e798 <col:23> 'int' lvalue ParmVar 0x5644f01f33a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5644f020e7b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5644f020e930 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5644f020e918 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5644f020e810 <col:33> 'int' lvalue ParmVar 0x5644f01f33a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5644f020e8f8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5644f020e8e0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5644f020e830 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5644f01ef680 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5644f020e8b8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5644f020e8a0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5644f020e868 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5644f020e9e0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5644f020e9c0 <col:79> 'int' 0
|   |   `-CallExpr 0x5644f020ec18 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5644f020ec00 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5644f020ebe0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5644efca6f70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5644f020ec58 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020ea50 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5644f020ec70 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5644f020ea98 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5644f020ec88 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5644f020ead0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5644f020eca0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5644f020ebc8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5644f020ebb0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5644f020eb68 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5644f020ef80 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5644f020eee8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5644f020eeb8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5644f020ee58 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5644f020ee28 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5644f020edd8 <col:54, col:63> 'char [48]' lvalue ->c 0x5644f01f7c50
|     |     |   `-CXXMemberCallExpr 0x5644f020edb8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5644f020ed88 <col:54> '<bound member function type>' ->xanno 0x5644f01ef438
|     |     |       `-CXXThisExpr 0x5644f020ed78 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5644f020ee40 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5644f020ee08 <col:67> 'int' lvalue ParmVar 0x5644f01f33a0 'i' 'int'
|     `-CXXConstCastExpr 0x5644f020ef50 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5644f020ef38 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5644f020ef00 <col:91> 'const void *' lvalue ParmVar 0x5644f01f3420 'x' 'const void *'
|-CXXMethodDecl 0x5644f01f35c8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5644f020f028 <col:34, line:640:5>
|   `-ReturnStmt 0x5644f020f018 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5644f020f000 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5644f020efd0 <col:16> 'Packet *' lvalue ->_data_packet 0x5644f01f8798
|         `-CXXThisExpr 0x5644f020efc0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5644f01f3708 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5644f01f3678 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5644f0208168 <col:46> 'bool' true
|-CXXMethodDecl 0x5644f01f3888 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5644f01f37c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5644f01f3930 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5644f01f40e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5644f01f3a30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f4150 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3a10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5644f01f39f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5644f01e8b30 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5644f01f3ac0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f4168 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3aa0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5644f01f3a80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5644f01e8bc0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5644f01f3b50 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f4180 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3b30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5644f01f3b10 <col:21> 'int' 0
| |-EnumConstantDecl 0x5644f01f3be0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f4198 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3bc0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5644f01f3ba0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5644f01f3c70 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f41b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3c50 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5644f01f3c30 <col:21> 'int' 16
| |-EnumConstantDecl 0x5644f01f3d00 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f41c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3ce0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5644f01f3cc0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5644f01f3d90 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f41e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3d70 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5644f01f3d50 <col:19> 'int' EnumConstant 0x5644f01f3be0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5644f01f3e20 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f41f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3e00 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5644f01f3de0 <col:19> 'int' EnumConstant 0x5644f01f3d00 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5644f01f3ef0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f4210 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3ed0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5644f01f3eb0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5644f01f3e70 <col:23> 'int' EnumConstant 0x5644f01f3e20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5644f01f3e90 <col:40> 'int' 2
| |-EnumConstantDecl 0x5644f01f3fc0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5644f01f4228 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5644f01f3fa0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5644f01f3f80 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5644f01f3f40 <col:23> 'int' EnumConstant 0x5644f01f3e20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5644f01f3f60 <col:40> 'int' 4
| `-EnumConstantDecl 0x5644f01f4090 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5644f01f4240 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5644f01f4070 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5644f01f4050 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5644f01f4010 <col:23> 'int' EnumConstant 0x5644f01f3e20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5644f01f4030 <col:40> 'int' 8
|-CXXMethodDecl 0x5644f01f4280 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5644f01f4320 <col:68> "" ""
|-CXXMethodDecl 0x5644f01f43b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5644f01f4458 <col:45> "" ""
|-CXXMethodDecl 0x5644f01f44f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5644f01f4590 <col:57> "" ""
|-CXXMethodDecl 0x5644f01f4628 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5644f01f46c8 <col:45> "" ""
|-CXXMethodDecl 0x5644f01f4760 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5644f01f4800 <col:57> "" ""
|-CXXMethodDecl 0x5644f01f4890 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5644f01f4930 <col:51> "" ""
|-CXXMethodDecl 0x5644f01f49c0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5644f01f4a60 <col:63> "" ""
|-CXXMethodDecl 0x5644f01f4af0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5644f01f4b90 <col:53> "" ""
|-CXXMethodDecl 0x5644f01f4c20 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5644f01f4cc0 <col:65> "" ""
|-CXXMethodDecl 0x5644f01f4dd8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5644f01f4d48 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5644f01f4e80 <col:61> "" ""
|-CXXMethodDecl 0x5644f01f5018 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5644f01f4f08 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5644f01f4f80 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5644f01f50c8 <col:67> "" ""
|-CXXMethodDecl 0x5644f01f51e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5644f01f5150 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5644f01f5288 <col:63> "" ""
|-CXXMethodDecl 0x5644f01f5420 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5644f01f5310 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5644f01f5388 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5644f01f54d0 <col:69> "" ""
|-CXXMethodDecl 0x5644f01f55e8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5644f01f5558 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5644f01f5690 <col:63> "" ""
|-CXXMethodDecl 0x5644f01f5828 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5644f01f5718 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5644f01f5790 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5644f01f58d8 <col:69> "" ""
|-CXXMethodDecl 0x5644f01f59f0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5644f01f5960 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5644f01f5a98 <col:62> "" ""
|-CXXMethodDecl 0x5644f01f5c30 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5644f01f5b20 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5644f01f5b98 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5644f01f5ce0 <col:68> "" ""
|-CXXMethodDecl 0x5644f01f5df8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5644f01f5d68 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5644f01f5ea0 <col:63> "" ""
|-CXXMethodDecl 0x5644f01f6038 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5644f01f5f28 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5644f01f5fa0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5644f01f60e8 <col:69> "" ""
|-CXXMethodDecl 0x5644f01f6178 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5644f01f6218 <col:64> "" ""
|-CXXMethodDecl 0x5644f01f62a8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5644f01f6348 <col:52> "" ""
|-CXXMethodDecl 0x5644f01f63d8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5644f01f6478 <col:67> "" ""
|-CXXMethodDecl 0x5644f01f6508 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5644f01f65a8 <col:55> "" ""
|-CXXMethodDecl 0x5644f01f66c0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5644f01f6630 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5644f01f6768 <col:58> "" ""
|-CXXMethodDecl 0x5644f01f6900 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5644f01f67f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5644f01f6868 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5644f01f69b0 <col:62> "" ""
|-CXXMethodDecl 0x5644f01f6ac8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5644f01f6a38 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5644f01f6b70 <col:58> "" ""
|-CXXMethodDecl 0x5644f01f6d08 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5644f01f6bf8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5644f01f6c70 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5644f01f6db8 <col:62> "" ""
|-CXXMethodDecl 0x5644f01f6ed0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5644f01f6e40 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5644f01f6f78 <col:60> "" ""
|-CXXMethodDecl 0x5644f01f7110 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5644f01f7000 <col:34> col:37 'int'
| |-ParmVarDecl 0x5644f01f7078 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5644f01f71c0 <col:64> "" ""
|-CXXMethodDecl 0x5644f01f72d8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5644f01f7248 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5644f01f7380 <col:58> "" ""
|-CXXMethodDecl 0x5644f01f7518 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5644f01f7408 <col:33> col:36 'int'
| |-ParmVarDecl 0x5644f01f7480 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5644f01f75c8 <col:62> "" ""
|-CXXMethodDecl 0x5644f01f76e0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5644f01f7650 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5644f01f7788 <col:59> "" ""
|-CXXMethodDecl 0x5644f01f7920 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5644f01f7810 <col:33> col:36 'int'
| |-ParmVarDecl 0x5644f01f7888 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5644f01f79d0 <col:63> "" ""
|-AccessSpecDecl 0x5644f01f7a40 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5644f01f7a68 prev 0x5644f01ef170 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5644f01f7b60 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5644f01f7c50 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5644f01f7d00 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5644f01f7e88 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5644f01f8008 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5644f01f8188 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5644f020f1a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5644f020faa8 <col:11>
| |-CXXDestructorDecl 0x5644f020f310 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5644f020f448 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5644f020f448
| | `-ParmVarDecl 0x5644f020f558 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5644f020f5f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5644f020f5f8
| | `-ParmVarDecl 0x5644f020f708 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5644f0212438 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5644f0212548 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5644f02127c8 <col:11>
| |   `-ReturnStmt 0x5644f02127b8 <col:11>
| |     `-UnaryOperator 0x5644f02127a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5644f0212790 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5644f02125b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5644f02125b8
|   `-ParmVarDecl 0x5644f02126c8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5644f01f81f0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5644f01f8308 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5644f01f83a8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5644f01f8410 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5644f01f8478 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5644f01f84e0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5644f01f8540 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5644f01f8600 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5644f01f8660 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5644f01f86c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5644f020f0b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5644f01f83a8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5644f020fab8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5644f020fb10 <col:12>
| |-CXXConstructorDecl 0x5644f020f778 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5644f020f778
| | `-ParmVarDecl 0x5644f020f888 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5644f020f928 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5644f020f928
| | `-ParmVarDecl 0x5644f020fa38 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5644f0211b20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5644f01f8738 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5644f01f8798 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5644f01f8800 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5644f01f8868 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5644f01f88d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5644f01f8938 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5644f01f8998 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5644f01f89f8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5644f01f8a60 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5644f01f8ae8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5644f01f8738 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5644f020f050 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5644f01f8998 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5644f020fb20 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5644f020fb80 <col:21, line:755:5>
|-CXXConstructorDecl 0x5644f01f8c88 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5644f01f8bc8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5644f0207300 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5644f02074e8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5644f02073f0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5644f02077b8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5644f02075a0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5644f0207618 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5644f0207690 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f02079d8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5644f0207888 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5644f0207900 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5644f0207ca8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5644f0207a98 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5644f0207b10 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5644f0207b88 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5644f0207e00 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5644f0207d70 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f0207f48 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5644f0207eb8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5644f0208040 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f020fb90 prev 0x5644f01e87b0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5644f020fcc8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5644f020fd58 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5644f020fe00 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5644f020fea0 <col:20>
| `-OptimizeNoneAttr 0x5644f020fef8 <col:30>
|-CXXMethodDecl 0x5644f020ff48 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5644f020ffe8 <col:20>
| `-OptimizeNoneAttr 0x5644f0210040 <col:30>
|-CXXMethodDecl 0x5644f0210090 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5644f0210158 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5644f0210220 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5644f0210338 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5644f0210400 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5644f02104a0 <col:20>
| `-OptimizeNoneAttr 0x5644f02104f8 <col:30>
|-CXXMethodDecl 0x5644f0210568 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5644f0210608 <col:20>
| `-OptimizeNoneAttr 0x5644f0210660 <col:30>
|-CXXMethodDecl 0x5644f0210708 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5644f02107a8 <col:20>
| `-OptimizeNoneAttr 0x5644f0210800 <col:30>
|-CXXMethodDecl 0x5644f0210850 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5644f0210968 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5644f0210a88 <line:791:5, col:36> col:23 used tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5644f0210ba8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5644f0210c70 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5644f0210d10 <col:62> "" ""
|-AccessSpecDecl 0x5644f0210d80 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5644f0210de0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5644f02119d8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5644f0211c00 <col:29, col:31>
|-CXXMethodDecl 0x5644f0210ea8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5644f0210fe8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5644f0210f58 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5644f02110e0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5644f0211c10 <col:23, col:25>
|-CXXMethodDecl 0x5644f0211298 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5644f02111d0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5644f0211568 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5644f0211350 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5644f02113c8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5644f0211440 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5644f02116f8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5644f0211630 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5644f02117f0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5644f0211858 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5644f0211858
  `-ParmVarDecl 0x5644f0211968 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644efed3288 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5644efed33a8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5644efed3470 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5644f01df6e0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5644f01e1848 <col:8>
|-CXXConstructorDecl 0x5644f01df7e8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5644f01df7e8
| `-ParmVarDecl 0x5644f01df8f8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5644f01df998 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5644f01dfaa8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5644efed3470 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5644f01e1a60 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5644f01e1a30 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5644efed3470
| |     `-CXXStaticCastExpr 0x5644f01e1a00 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5644f01e19d0 <col:8> 'in_addr' lvalue ParmVar 0x5644f01dfaa8 '' 'in_addr &&'
| `-CompoundStmt 0x5644f01e1aa8 <col:8>
`-CXXDestructorDecl 0x5644f01e1ce0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f01d9498 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5644f01d95b8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5644f01d96a0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5644f01d9680 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5644f01d9648 <col:22> 'int' 4
|-FieldDecl 0x5644f01d9748 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x5644f01d9728 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5644f01d96f0 <col:21> 'int' 4
|-FieldDecl 0x5644f01d97a8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5644f01d9808 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f01d9868 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f01d98c8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f01d9928 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5644f01d9988 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5644f01d99e8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f01d9a58 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5644f01d9ac8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5644f01d8de8 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5644f01d8f08 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x5644f01d8fa8 <line:25:5, col:14> col:14 referenced th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f01d9008 <line:26:5, col:14> col:14 referenced th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f01d9090 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5644f01d90f0 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5644f01d9198 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x5644f01d9178 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x5644f01d9140 <col:26> 'int' 4
|-FieldDecl 0x5644f01d9240 <line:31:5, col:23> col:14 th_off 'unsigned int'
| `-ConstantExpr 0x5644f01d9220 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x5644f01d91e8 <col:23> 'int' 4
|-FieldDecl 0x5644f01d92a0 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5644f01d9300 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x5644f01d9360 <line:49:5, col:14> col:14 th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x5644f01d93c0 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>
