
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f288188 prev 0x55c83f27f928 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83f288280 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55c83f288310 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55c83f288388 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55c83f288448 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55c83f288510 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55c83f288688 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55c83f2885c0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55c83f288730 <col:24>
| `-OptimizeNoneAttr 0x55c83f288788 <col:34>
|-CXXMethodDecl 0x55c83f2887d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55c83f288a88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55c83f288880 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c83f2888f8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55c83f288978 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55c83f288b40 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55c83f288b78 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55c83f288be0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55c83f288c68 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55c83f288f88 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55c83f288d20 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c83f288d98 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55c83f288e10 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55c83f288e90 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55c83f2890a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55c83f28fa08 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c83f28fa08
| `-ParmVarDecl 0x55c83f28fb18 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55c83f28fbb8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c83f28fbb8
| `-ParmVarDecl 0x55c83f28fcc8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55c83f35f690 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f27b1a0 prev 0x55c83f27af20 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c83f27b298 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55c83f27b328 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55c83f27b388 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55c83f27b478 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55c83f27b578 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55c83f27b748 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55c83f27b5f8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55c83f27b670 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55c83f27b8d8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55c83f27b810 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55c83f27b980 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55c83f27bab8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55c83f27b9f0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55c83f27bc58 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55c83f27bb98 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55c83f27bdf8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55c83f27bd38 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55c83f27bea0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55c83f27bfa0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55c83f27c080 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f27bf80 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55c83f27bf60 <col:26> 'int' 1
| `-EnumConstantDecl 0x55c83f27c030 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55c83f27c098 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f27c010 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55c83f27bff0 <col:44> 'int' 2
|-CXXMethodDecl 0x55c83f27c1e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55c83f27c0c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55c83f27c148 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55c83f27c338 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55c83f27c2a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55c83f27c578 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55c83f27c3f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55c83f27c470 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55c83f27c628 <col:20>
| `-OptimizeNoneAttr 0x55c83f27c680 <col:30>
|-CXXMethodDecl 0x55c83f27c788 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55c83f27c6c0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55c83f27c830 <col:20>
| `-OptimizeNoneAttr 0x55c83f27c888 <col:30>
|-CXXMethodDecl 0x55c83f27c8d8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55c83f27c9a0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55c83f27cab8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55c83f27cb40 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55c83f27cbc8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55c83f27cc50 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55c83f27ccd8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55c83f27cd68 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55c83f27ce28 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55c83f27ceb0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55c83f27cf38 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55c83f27cfc0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55c83f27d048 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55c83f27d0d0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55c83f27d160 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55c83f27d220 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55c83f27d2b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55c83f27d400 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55c83f27d368 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55c83f27d590 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55c83f27d4c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55c83f27d840 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55c83f27d648 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55c83f27d6c8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55c83f27d748 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55c83f27d8f8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55c83f27da00 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c83f27dc90 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f27d9e0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55c83f27d9c0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55c83f27da90 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c83f27dca8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f27da70 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55c83f27da50 <col:32> 'int' 20
| |-EnumConstantDecl 0x55c83f27db20 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c83f27dcc0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f27db00 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55c83f27dae0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55c83f27dbb0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c83f27dcd8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f27db90 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55c83f27db70 <col:35> 'int' 100
| `-EnumConstantDecl 0x55c83f27dc40 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55c83f27dcf0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f27dc20 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55c83f27dc00 <col:32> 'int' 2000
|-CXXMethodDecl 0x55c83f27dd30 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55c83f27e170 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c83f27dfe0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55c83f27e058 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f27e240 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55c83f27e3c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55c83f27e2f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f27e5c8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c83f27e478 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55c83f27e4f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f27e6c8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55c83f27e768 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55c83f27e830 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c83f27e8c0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55c83f27eaf0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f27e8a0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55c83f27e880 <col:36> 'int' EnumConstant 0x55c83f27e830 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c83f27e910 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c83f27e960 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c83f27e9b0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c83f27ea00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c83f27ea50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55c83f27eaa0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55c83f27ebd8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55c83f27eb18 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55c83f27eca0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55c83f27ed60 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55c83f27ee20 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55c83f27eee0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55c83f27eff8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55c83f27f0c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55c83f27f240 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55c83f27f170 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55c83f27f368 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55c83f27f568 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55c83f27f418 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55c83f27f498 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55c83f28bea8 <col:54, line:127:5>
|   |-ParenExpr 0x55c83f28bd58 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55c83f28bd28 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f28ba18 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c83f28b9f0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55c83f28b9d8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55c83f28b9c0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55c83f28b990 <col:31> 'Router *' lvalue ->_router 0x55c83f289870
|   |   |         `-CXXThisExpr 0x55c83f28b980 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c83f28ba78 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f28ba58 <col:48> 'int' 0
|   |   `-CallExpr 0x55c83f28bc88 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55c83f28bc70 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f28bc50 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f28bcc8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f28bae8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55c83f28bce0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f28bb08 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55c83f28bcf8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f28bb40 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55c83f28bd10 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f28bc38 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f28bc20 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f28bbd8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55c83f28bdf0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55c83f28bd88 <col:9> 'Router *' lvalue ->_router 0x55c83f289870
|   | | `-CXXThisExpr 0x55c83f28bd78 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55c83f28bdd8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c83f28bdb8 <col:19> 'Router *' lvalue ParmVar 0x55c83f27f418 'r' 'Router *'
|   `-BinaryOperator 0x55c83f28be88 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55c83f28be20 <col:9> 'int' lvalue ->_eindex 0x55c83f2898d8
|     | `-CXXThisExpr 0x55c83f28be10 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55c83f28be70 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f28be50 <col:19> 'int' lvalue ParmVar 0x55c83f27f498 'eindex' 'int'
|-CXXMethodDecl 0x55c83f27f6f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55c83f27f628 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55c83f27f7c0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55c83f27f888 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55c83f27f928 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55c83f27fb78 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55c83f27f9f0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55c83f27fa70 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55c83f27fc28 <col:20>
| `-OptimizeNoneAttr 0x55c83f27fc80 <col:30>
|-CXXMethodDecl 0x55c83f27fd88 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c83f27fcc0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55c83f27fe30 <col:20>
| `-OptimizeNoneAttr 0x55c83f27fe88 <col:30>
|-CXXMethodDecl 0x55c83f27ff58 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c83f27fec8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55c83f280000 <col:20>
| `-OptimizeNoneAttr 0x55c83f280058 <col:30>
|-CXXMethodDecl 0x55c83f2801e8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55c83f280090 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55c83f280110 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55c83f280378 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c83f2802b0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c83f2804c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c83f280438 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c83f280618 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c83f280588 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c83f280768 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c83f2806d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c83f280a28 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55c83f280820 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55c83f2808a0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55c83f280948 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55c83f280b00 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55c83f280bc0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55c83f280e90 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c83f280d40 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55c83f280db8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f280fb8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55c83f281190 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55c83f281070 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55c83f2810f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55c83f281378 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55c83f281258 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55c83f2812d8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55c83f2816e8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c83f281438 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c83f2814b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c83f281530 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c83f28b490 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c83f28b470 <col:106> 'int' 0
| `-ParmVarDecl 0x55c83f2815a8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c83f28b4c8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c83f28b4a8 <col:126> 'int' 0
|-CXXMethodDecl 0x55c83f281a88 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c83f2817b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c83f281850 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c83f2818d0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55c83f281948 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c83f28b500 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c83f28b4e0 <col:114> 'int' 0
|-CXXMethodDecl 0x55c83f281e18 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c83f281b60 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55c83f281bd8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c83f281c58 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55c83f28b518 <col:96> 'int' 0
| `-ParmVarDecl 0x55c83f281cd0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c83f28b558 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c83f28b538 <col:116> 'int' 0
|-CXXMethodDecl 0x55c83f282198 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c83f281ee8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c83f281f60 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f281fe0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c83f28b590 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c83f28b570 <col:109> 'int' 0
| `-ParmVarDecl 0x55c83f282058 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c83f28b5c8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c83f28b5a8 <col:129> 'int' 0
|-CXXMethodDecl 0x55c83f282518 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c83f282268 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c83f2822e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f282360 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55c83f2823d8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c83f28b600 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c83f28b5e0 <col:117> 'int' 0
|-CXXMethodDecl 0x55c83f2828a8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c83f2825f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f282668 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f2826e8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55c83f28b618 <col:99> 'int' 0
| `-ParmVarDecl 0x55c83f282760 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c83f28b658 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c83f28b638 <col:119> 'int' 0
|-CXXMethodDecl 0x55c83f282cc8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55c83f282978 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c83f2829f8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c83f282a70 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f282af0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c83f28b690 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c83f28b670 <col:108> 'int' 0
| `-ParmVarDecl 0x55c83f282b70 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55c83f28b6c8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55c83f28b6a8 <col:141> 'int' 0
|-CXXMethodDecl 0x55c83f2830e8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c83f282da0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c83f282e20 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c83f282e98 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f282f18 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55c83f282f98 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c83f28b6e0 <col:121> 'int' 0
|-CXXMethodDecl 0x55c83f283518 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c83f2831c8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55c83f283248 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55c83f2832c0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f283340 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55c83f28b700 <col:98> 'int' 0
| `-ParmVarDecl 0x55c83f2833c0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c83f28b720 <col:123> 'int' 0
|-CXXMethodDecl 0x55c83f2837e0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55c83f2835f0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c83f283670 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55c83f2836f0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55c83f28b740 <col:80> 'int' 0
|-EnumDecl 0x55c83f283898 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55c83f2839a0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c83f283c30 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f283980 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55c83f283960 <col:42> 'int' 1
| |-EnumConstantDecl 0x55c83f283a30 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c83f283c48 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f283a10 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55c83f2839f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c83f283ac0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c83f283c60 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f283aa0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55c83f283a80 <col:44> 'int' 4
| |-EnumConstantDecl 0x55c83f283b50 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c83f283c78 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f283b30 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55c83f283b10 <col:36> 'int' 7
| `-EnumConstantDecl 0x55c83f283be0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55c83f283c90 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f283bc0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55c83f283ba0 <col:34> 'int' 6
|-CXXMethodDecl 0x55c83f283f48 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55c83f283cb8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55c83f283d58 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c83f283dd8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55c83f283e50 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55c83f28b7f8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55c83f28b7e0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55c83f28b7c8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55c83f28b7a8 <col:98, col:105> 'String' (CXXTemporary 0x55c83f28b7a8)
|           `-CXXTemporaryObjectExpr 0x55c83f28b770 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55c83f2841e8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55c83f284018 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c83f284090 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c83f284108 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c83f28b8a8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c83f28b890 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c83f28b878 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c83f28b858 <col:94, col:101> 'String' (CXXTemporary 0x55c83f28b858)
| |         `-CXXTemporaryObjectExpr 0x55c83f28b820 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55c83f28c090 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55c83f28c008 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55c83f28bfd8 <col:9> '<bound member function type>' ->add_task_handlers 0x55c83f283f48
|     | `-CXXThisExpr 0x55c83f28bfc8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c83f28c048 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c83f28bf48 <col:27> 'Task *' lvalue ParmVar 0x55c83f284018 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c83f28c060 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c83f28bf68 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55c83f284090 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55c83f28c078 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c83f28bf88 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c83f283be0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c83f28bfa8 <col:62> 'const String' lvalue ParmVar 0x55c83f284108 'prefix' 'const String &'
|-CXXMethodDecl 0x55c83f2843f8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55c83f2842b0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c83f284328 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c83f28b958 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c83f28b940 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c83f28b928 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c83f28b908 <col:70, col:77> 'String' (CXXTemporary 0x55c83f28b908)
| |         `-CXXTemporaryObjectExpr 0x55c83f28b8d0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55c83f28c268 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55c83f28c1e0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55c83f28c1b0 <col:9> '<bound member function type>' ->add_task_handlers 0x55c83f283f48
|     | `-CXXThisExpr 0x55c83f28c1a0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c83f28c220 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c83f28c120 <col:27> 'Task *' lvalue ParmVar 0x55c83f2842b0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c83f28c238 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55c83f28c140 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55c83f28c250 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c83f28c160 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c83f283be0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c83f28c180 <col:57> 'const String' lvalue ParmVar 0x55c83f284328 'prefix' 'const String &'
|-CXXMethodDecl 0x55c83f2846d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55c83f2844c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f284540 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f2845b8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55c83f284988 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55c83f2847a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f284828 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f2848a8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55c83f284c78 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c83f284a58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f284ad8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f284b50 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55c83f284f28 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55c83f284d48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f284dc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f284e48 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55c83f2851d8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55c83f284ff8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f285078 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f2850f8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55c83f285488 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55c83f2852a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f285328 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f2853a0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55c83f285738 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55c83f285558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f2855d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f285658 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55c83f285a48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55c83f285860 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f2858e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f285960 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55c83f285d28 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55c83f285b18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f285b98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f285c40 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55c83f286008 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55c83f285df8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f285e78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f285f20 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55c83f286270 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c83f2860d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c83f286158 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c83f2861d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55c83f286518 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55c83f286340 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c83f2863c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c83f286438 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55c83f2867c8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55c83f2865e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f286668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f2866e8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55c83f286a78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55c83f286898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f286918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f286990 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55c83f286d28 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55c83f286b48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f286bc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f286c40 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55c83f286ff8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55c83f286df8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f286e78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c83f286f18 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55c83f287328 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55c83f2870c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c83f287148 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55c83f2871c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55c83f287238 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c83f28b970 <col:93> 'bool' false
|-CXXMethodDecl 0x55c83f287510 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c83f2873f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55c83f287478 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55c83f2876e8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c83f2875d0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55c83f287650 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55c83f2879c8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c83f2877a8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55c83f287820 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55c83f2878a0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55c83f287918 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f287cb8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c83f287a98 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55c83f287b10 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55c83f287b90 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55c83f287c08 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f287ef0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55c83f287d90 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55c83f287e10 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55c83f2880d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55c83f287fb8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55c83f288038 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55c83f288188 prev 0x55c83f27f928 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c83f288280 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55c83f288310 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55c83f288388 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55c83f288448 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55c83f288510 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55c83f288688 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55c83f2885c0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55c83f288730 <col:24>
| | `-OptimizeNoneAttr 0x55c83f288788 <col:34>
| |-CXXMethodDecl 0x55c83f2887d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55c83f288a88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55c83f288880 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c83f2888f8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55c83f288978 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55c83f288b40 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55c83f288b78 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55c83f288be0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55c83f288c68 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55c83f288f88 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55c83f288d20 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c83f288d98 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55c83f288e10 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55c83f288e90 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55c83f2890a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55c83f28fa08 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c83f28fa08
| | `-ParmVarDecl 0x55c83f28fb18 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55c83f28fbb8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c83f28fbb8
| | `-ParmVarDecl 0x55c83f28fcc8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55c83f35f690 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c83f289118 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55c83f2891b8 <col:38> "" ""
|-CXXMethodDecl 0x55c83f289248 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55c83f2892e8 <col:44> "" ""
|-AccessSpecDecl 0x55c83f289358 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55c83f289380 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55c83f289480 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55c83f2894d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f289460 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55c83f289440 <col:27> 'int' 4
|-FieldDecl 0x55c83f289588 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55c83f289738 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55c83f2897f0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55c83f289870 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55c83f2898d8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55c83f289a28 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55c83f289968 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55c83f289bd8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55c83f289ae8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55c83f289db8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55c83f289c98 <col:20> col:23 'int'
| `-ParmVarDecl 0x55c83f289d18 <col:25> col:28 'int'
|-CXXMethodDecl 0x55c83f28a060 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f289e80 <col:23> col:26 'int'
| |-ParmVarDecl 0x55c83f289f00 <col:28> col:31 'int'
| `-ParmVarDecl 0x55c83f289f78 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55c83f28a118 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55c83f28a1e0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55c83f28a230 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55c83f28a280 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55c83f28a460 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55c83f28a310 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55c83f28a388 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f28a708 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55c83f28a528 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55c83f28a5a8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55c83f28a620 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f28a928 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55c83f28a7d8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55c83f28a858 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55c83f28ac60 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55c83f28a9e8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55c83f28aa68 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55c83f28aae0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55c83f28ab60 <col:57> col:60 'int'
|-CXXMethodDecl 0x55c83f28ae48 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c83f28ad30 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55c83f28adb0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55c83f28af98 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55c83f28af08 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55c83f28b318 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55c83f28b058 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55c83f28b0d8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55c83f28b150 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55c83f28b1d0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55c83f28b430 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ForceUDP
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _count
       112 |   int _dport
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f292b78 <../elements/local/forceudp.hh:18:1, line:32:1> line:18:7 class ForceUDP definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55c83f292cd8 <col:1, col:7> col:7 implicit referenced class ForceUDP
|-AccessSpecDecl 0x55c83f292d68 <line:19:1, col:7> col:1 public
|-CXXConstructorDecl 0x55c83f292df0 <line:20:3, col:12> col:3 ForceUDP 'void ()'
|-CXXDestructorDecl 0x55c83f292ee0 <line:21:3, col:13> col:3 ~ForceUDP 'void ()' noexcept-unevaluated 0x55c83f292ee0
| `-Overrides: [ 0x55c83f27b478 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55c83f293010 <line:23:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55c83f27c8d8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55c83f293a40 <col:34, col:55>
|   `-ReturnStmt 0x55c83f293a30 <col:36, col:43>
|     `-ImplicitCastExpr 0x55c83f293a18 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55c83f2939f8 <col:43> 'const char [9]' lvalue "ForceUDP"
|-CXXMethodDecl 0x55c83f2930d8 <line:24:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55c83f27c9a0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55c83f293aa0 <col:34, col:54>
|   `-ReturnStmt 0x55c83f293a90 <col:36, col:43>
|     `-ImplicitCastExpr 0x55c83f293a78 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55c83f293a58 <col:43> 'const char []' lvalue Var 0x55c83f27cc50 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55c83f2933b0 <line:25:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55c83f27e170 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55c83f293260 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x55c83f2932d8 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f293500 <line:27:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55c83f27bab8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55c83f293470 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55c83f2935a8 <line:29:1, col:8> col:1 private
|-FieldDecl 0x55c83f2935e8 <line:30:3, col:7> col:7 referenced _count 'int'
|-FieldDecl 0x55c83f293650 <line:31:3, col:7> col:7 referenced _dport 'int'
|-CXXConstructorDecl 0x55c83f2936c8 <line:18:7> col:7 implicit ForceUDP 'void (const ForceUDP &)' inline default_delete noexcept-unevaluated 0x55c83f2936c8
| `-ParmVarDecl 0x55c83f2937d8 <col:7> col:7 'const ForceUDP &'
`-CXXMethodDecl 0x55c83f293878 <col:7> col:7 implicit operator= 'ForceUDP &(const ForceUDP &)' inline default_delete noexcept-unevaluated 0x55c83f293878
  `-ParmVarDecl 0x55c83f293988 <col:7> col:7 'const ForceUDP &'

Layout: <CGRecordLayout
  LLVMType:%class.ForceUDP = type { %class.Element.base, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.ForceUDP.base = type { %class.Element.base, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f04b0a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c83f04b1b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55c83f04b258 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55c83f04b2b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55c83f04b318 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55c83f04b3c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f04b6d0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83f04b7e8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55c83f04b890 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55c83f04b8f8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55c83f04b988 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55c83f051a20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c83f051e58 <col:12>
|-CXXConstructorDecl 0x55c83f051b28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c83f051c38 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c83f04b890 'data' 'const char *'
| | `-ImplicitCastExpr 0x55c83f0543e0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55c83f0543b0 <col:12> 'const char *const' lvalue .data 0x55c83f04b890
| |     `-DeclRefExpr 0x55c83f054390 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f051c38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c83f04b8f8 'length' 'int'
| | `-ImplicitCastExpr 0x55c83f054470 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c83f054440 <col:12> 'const int' lvalue .length 0x55c83f04b8f8
| |     `-DeclRefExpr 0x55c83f054420 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f051c38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c83f04b988 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55c83f054500 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55c83f0544d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c83f04b988
| |     `-DeclRefExpr 0x55c83f0544b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f051c38 '' 'const String::rep_t &'
| `-CompoundStmt 0x55c83f054558 <col:12>
|-CXXConstructorDecl 0x55c83f051cd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c83f051cd8
| `-ParmVarDecl 0x55c83f051de8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55c83f057340 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c83f062d58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c83f062e68 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55c83f063380 <col:12>
|   |-BinaryOperator 0x55c83f063198 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c83f063150 <col:12> 'const char *' lvalue ->data 0x55c83f04b890
|   | | `-CXXThisExpr 0x55c83f063140 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c83f063180 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55c83f063110 <col:12> 'const char *const' lvalue .data 0x55c83f04b890
|   |     `-DeclRefExpr 0x55c83f0630f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f062e68 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c83f063260 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55c83f063218 <col:12> 'int' lvalue ->length 0x55c83f04b8f8
|   | | `-CXXThisExpr 0x55c83f063208 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c83f063248 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55c83f0631d8 <col:12> 'const int' lvalue .length 0x55c83f04b8f8
|   |     `-DeclRefExpr 0x55c83f0631b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f062e68 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c83f063328 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55c83f0632e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55c83f04b988
|   | | `-CXXThisExpr 0x55c83f0632d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c83f063310 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55c83f0632a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c83f04b988
|   |     `-DeclRefExpr 0x55c83f063280 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f062e68 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55c83f063370 <col:12>
|     `-UnaryOperator 0x55c83f063358 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f063348 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55c83f062ed8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c83f062ed8
  `-ParmVarDecl 0x55c83f062fe8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f042550 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c83f042668 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55c83f0426f8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55c83f042738 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55c83ed16fd0 'const char *'
|   `-QualType 0x55c83ed16521 'const char' const
|     `-BuiltinType 0x55c83ed16520 'char'
|-TypedefDecl 0x55c83f0427c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55c83f042790 'String::const_iterator' sugar
|   |-Typedef 0x55c83f042738 'const_iterator'
|   `-PointerType 0x55c83ed16fd0 'const char *'
|     `-QualType 0x55c83ed16521 'const char' const
|       `-BuiltinType 0x55c83ed16520 'char'
|-TypedefDecl 0x55c83f042930 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55c83f0428a0 'int (String::*)() const'
|   |-RecordType 0x55c83f0425e0 'String'
|   | `-CXXRecord 0x55c83f042550 'String'
|   `-ParenType 0x55c83f042840 'int () const' sugar
|     `-FunctionProtoType 0x55c83f017270 'int () const' const cdecl
|       `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f042998 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55c83ee6bc70 'int64_t' sugar
|   |-Typedef 0x55c83ed7f390 'int64_t'
|   `-TypedefType 0x55c83ed58630 '__int64_t' sugar
|     |-Typedef 0x55c83ed58208 '__int64_t'
|     `-BuiltinType 0x55c83ed165a0 'long'
|-TypedefDecl 0x55c83f042a00 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55c83ee6bb90 'uint64_t' sugar
|   |-Typedef 0x55c83ed7f530 'uint64_t'
|   `-TypedefType 0x55c83ed586c0 '__uint64_t' sugar
|     |-Typedef 0x55c83ed58278 '__uint64_t'
|     `-BuiltinType 0x55c83ed16640 'unsigned long'
|-TypedefDecl 0x55c83f042a90 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55c83f042a60 'String::intmax_t' sugar
|   |-Typedef 0x55c83f042998 'intmax_t'
|   `-TypedefType 0x55c83ee6bc70 'int64_t' sugar
|     |-Typedef 0x55c83ed7f390 'int64_t'
|     `-TypedefType 0x55c83ed58630 '__int64_t' sugar
|       |-Typedef 0x55c83ed58208 '__int64_t'
|       `-BuiltinType 0x55c83ed165a0 'long'
|-TypedefDecl 0x55c83f042b20 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55c83f042af0 'String::uintmax_t' sugar
|   |-Typedef 0x55c83f042a00 'uintmax_t'
|   `-TypedefType 0x55c83ee6bb90 'uint64_t' sugar
|     |-Typedef 0x55c83ed7f530 'uint64_t'
|     `-TypedefType 0x55c83ed586c0 '__uint64_t' sugar
|       |-Typedef 0x55c83ed58278 '__uint64_t'
|       `-BuiltinType 0x55c83ed16640 'unsigned long'
|-CXXConstructorDecl 0x55c83f042be0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55c83f042d88 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55c83f042cc8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55c83f042f38 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55c83f042e78 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55c83f043090 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55c83f043000 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55c83f0432a8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c83f043158 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55c83f0431d8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55c83f0434c8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55c83f043378 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55c83f0433f8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55c83f0436e8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c83f043598 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55c83f043618 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55c83f043908 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55c83f0437b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55c83f043838 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55c83f043a98 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55c83f0439d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55c83f043c18 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55c83f043b58 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55c83f043da8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55c83f043ce0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55c83f043f00 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55c83f043e70 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55c83f044058 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55c83f043fc8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55c83f0441b0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55c83f044120 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55c83f044338 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55c83f044278 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55c83f0444c8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55c83f044400 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55c83f044658 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55c83f044590 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55c83f0447e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55c83f044720 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55c83f0448e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55c83f044a08 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55c83f044b88 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55c83f044ac0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55c83f044cd8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55c83f044c48 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55c83f044d90 <col:63> "" ""
|-CXXMethodDecl 0x55c83f044ed8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55c83f044e18 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55c83f0450e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55c83f044f98 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55c83f045018 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55c83f045308 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55c83f0451b0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55c83f045230 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55c83f0455e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55c83f0453c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55c83f045448 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55c83f0514f0 <col:55> 'int' 10
| `-ParmVarDecl 0x55c83f0454c0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c83f051510 <col:76> 'bool' true
|-CXXMethodDecl 0x55c83f0458c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55c83f0456b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55c83f045730 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55c83f051520 <col:56> 'int' 10
| `-ParmVarDecl 0x55c83f0457a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c83f051540 <col:77> 'bool' true
|-CXXMethodDecl 0x55c83f0459d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55c83f045a98 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55c83f045b60 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55c83f045c00 <col:20>
| `-OptimizeNoneAttr 0x55c83f045c58 <col:30>
|-CXXConversionDecl 0x55c83f045d48 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55c83f045e18 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55c83f045ed8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55c83f045fc8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c83f046088 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c83f046208 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55c83f046140 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55c83f046358 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55c83f0462c8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55c83f046448 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55c83f046508 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55c83f046758 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55c83f0465c0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55c83f046640 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55c83f0469b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55c83f046820 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55c83f0468a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55c83f046a88 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f046c98 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55c83f046b40 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55c83f046bc0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55c83f046eb8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55c83f046d60 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55c83f046de0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55c83f047048 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55c83f046f80 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55c83f047138 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55c83f0472a8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c83f0471e8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c83f0474b8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55c83f047368 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c83f0473e8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c83f0476d0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55c83f047578 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55c83f0475f0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55c83f047860 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55c83f047790 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c83f047a80 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55c83f047920 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55c83f0479a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c83f047bd0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c83f047b40 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55c83f047da8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c83f047c90 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c83f047d10 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55c83f047ef8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55c83f047e68 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55c83f048110 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55c83f047fb0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55c83f048030 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55c83f051550 <col:39> 'int' 0
|-CXXMethodDecl 0x55c83f048330 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55c83f0481d0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55c83f048250 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55c83f051570 <col:48> 'int' 0
|-CXXMethodDecl 0x55c83f048510 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55c83f0483f0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55c83f048470 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55c83f051590 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55c83f0485e0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55c83f0486a0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55c83f048760 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55c83f048820 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55c83f0488e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55c83f048a88 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c83f048990 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55c83f048c08 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55c83f048b40 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55c83f048ea0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c83f048cc8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55c83f049018 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55c83f048f58 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55c83f049160 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55c83f0490d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c83f0492b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55c83f049220 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55c83f049488 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c83f049370 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c83f0493f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c83f049668 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c83f049550 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55c83f0495d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55c83f0497b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55c83f049728 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55c83f0499c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55c83f049878 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55c83f0498f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55c83f049b28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55c83f049a90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c83f049c80 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55c83f049be8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55c83f049d28 <col:57> "" ""
|-CXXMethodDecl 0x55c83f049e38 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c83f049da8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55c83f049f88 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c83f049ef8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55c83f04a108 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55c83f04a040 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55c83f04a1d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55c83f04a290 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55c83f04a350 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55c83f04a3f0 <col:49> "" ""
|-CXXMethodDecl 0x55c83f04a480 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55c83f04a540 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55c83f04a630 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55c83f04a6f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55c83f04a7b8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55c83f04a878 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55c83f04a970 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55c83f04aa38 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55c83f04ab00 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55c83f04acd8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55c83f04abb8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55c83f04ac38 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55c83f04af00 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55c83f04ada0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55c83f04ae20 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55c83f04b010 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55c83f04b078 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55c83f04b0a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55c83f04b1b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55c83f04b258 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55c83f04b2b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55c83f04b318 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55c83f04b3c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55c83f04b430 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55c83f04b668 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55c83f04b6b8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f04b648 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55c83f04b558 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55c83f04b500 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55c83f04b540 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55c83f04b520 <col:32> 'int' 8
|-CXXRecordDecl 0x55c83f04b6d0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c83f04b7e8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55c83f04b890 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55c83f04b8f8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55c83f04b988 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55c83f051a20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c83f051e58 <col:12>
| |-CXXConstructorDecl 0x55c83f051b28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c83f051c38 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c83f04b890 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55c83f0543e0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55c83f0543b0 <col:12> 'const char *const' lvalue .data 0x55c83f04b890
| | |     `-DeclRefExpr 0x55c83f054390 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f051c38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c83f04b8f8 'length' 'int'
| | | `-ImplicitCastExpr 0x55c83f054470 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55c83f054440 <col:12> 'const int' lvalue .length 0x55c83f04b8f8
| | |     `-DeclRefExpr 0x55c83f054420 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f051c38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c83f04b988 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55c83f054500 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55c83f0544d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c83f04b988
| | |     `-DeclRefExpr 0x55c83f0544b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f051c38 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55c83f054558 <col:12>
| |-CXXConstructorDecl 0x55c83f051cd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c83f051cd8
| | `-ParmVarDecl 0x55c83f051de8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55c83f057340 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55c83f062d58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c83f062e68 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55c83f063380 <col:12>
| |   |-BinaryOperator 0x55c83f063198 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55c83f063150 <col:12> 'const char *' lvalue ->data 0x55c83f04b890
| |   | | `-CXXThisExpr 0x55c83f063140 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c83f063180 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c83f063110 <col:12> 'const char *const' lvalue .data 0x55c83f04b890
| |   |     `-DeclRefExpr 0x55c83f0630f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f062e68 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c83f063260 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55c83f063218 <col:12> 'int' lvalue ->length 0x55c83f04b8f8
| |   | | `-CXXThisExpr 0x55c83f063208 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c83f063248 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55c83f0631d8 <col:12> 'const int' lvalue .length 0x55c83f04b8f8
| |   |     `-DeclRefExpr 0x55c83f0631b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f062e68 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c83f063328 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55c83f0632e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55c83f04b988
| |   | | `-CXXThisExpr 0x55c83f0632d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c83f063310 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c83f0632a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c83f04b988
| |   |     `-DeclRefExpr 0x55c83f063280 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c83f062e68 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55c83f063370 <col:12>
| |     `-UnaryOperator 0x55c83f063358 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c83f063348 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55c83f062ed8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c83f062ed8
|   `-ParmVarDecl 0x55c83f062fe8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55c83f04ba00 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55c83f04bc48 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55c83f04ba68 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55c83f04bae8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55c83f04bb60 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55c83f0519e0 <col:79, line:261:5>
|   |-BinaryOperator 0x55c83f051658 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c83f0515f0 <col:2, col:5> 'const char *' lvalue .data 0x55c83f04b890
|   | | `-MemberExpr 0x55c83f0515c0 <col:2> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|   | |   `-CXXThisExpr 0x55c83f0515b0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c83f051640 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c83f051620 <col:12> 'const char *' lvalue ParmVar 0x55c83f04ba68 'data' 'const char *'
|   |-BinaryOperator 0x55c83f051720 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55c83f0516b8 <col:2, col:5> 'int' lvalue .length 0x55c83f04b8f8
|   | | `-MemberExpr 0x55c83f051688 <col:2> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|   | |   `-CXXThisExpr 0x55c83f051678 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c83f051708 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c83f0516e8 <col:14> 'int' lvalue ParmVar 0x55c83f04bae8 'length' 'int'
|   `-IfStmt 0x55c83f0519c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55c83f051840 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c83f051828 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55c83f051808 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55c83f0517e8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55c83f051780 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55c83f04b988
|     |       | `-MemberExpr 0x55c83f051750 <col:7> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|     |       |   `-CXXThisExpr 0x55c83f051740 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55c83f0517d0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c83f0517b0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55c83f04bb60 'memo' 'String::memo_t *'
|     `-CallExpr 0x55c83f0519a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55c83f051988 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c83f051890 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55c83f03a5b8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55c83f0518f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c83f04b258
|         `-ImplicitCastExpr 0x55c83f0518e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55c83f0518c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55c83f04bb60 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55c83f04bef8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55c83f04bd18 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55c83f04bd98 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55c83f04be10 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55c83f04ba00 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55c83f051e68 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c83f051ff8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55c83f051f60 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55c83f051ed0 <col:2> '<bound member function type>' ->assign_memo 0x55c83f04bc48
|     | `-ImplicitCastExpr 0x55c83f051f98 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55c83f051ec0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55c83f051fb0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c83f051f00 <col:14> 'const char *' lvalue ParmVar 0x55c83f04bd18 'data' 'const char *'
|     |-ImplicitCastExpr 0x55c83f051fc8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c83f051f20 <col:20> 'int' lvalue ParmVar 0x55c83f04bd98 'length' 'int'
|     `-ImplicitCastExpr 0x55c83f051fe0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f051f40 <col:28> 'String::memo_t *' lvalue ParmVar 0x55c83f04be10 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55c83f04c088 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55c83f04bfc8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55c83f052250 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55c83f0521d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55c83f052020 <col:2> '<bound member function type>' ->assign_memo 0x55c83f04bc48
|     | `-CXXThisExpr 0x55c83f052010 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55c83f052208 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55c83f0520a0 <col:14, col:19> 'const char *' lvalue .data 0x55c83f04b890
|     |   `-MemberExpr 0x55c83f052070 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55c83f04ba00
|     |     `-DeclRefExpr 0x55c83f052050 <col:14> 'const String' lvalue ParmVar 0x55c83f04bfc8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55c83f052220 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55c83f052120 <col:25, col:30> 'int' lvalue .length 0x55c83f04b8f8
|     |   `-MemberExpr 0x55c83f0520f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55c83f04ba00
|     |     `-DeclRefExpr 0x55c83f0520d0 <col:25> 'const String' lvalue ParmVar 0x55c83f04bfc8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55c83f052238 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55c83f0521a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55c83f04b988
|         `-MemberExpr 0x55c83f052170 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55c83f04ba00
|           `-DeclRefExpr 0x55c83f052150 <col:38> 'const String' lvalue ParmVar 0x55c83f04bfc8 'x' 'const String &'
|-CXXMethodDecl 0x55c83f04c150 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55c83f052c10 <col:31, line:278:5>
|   `-IfStmt 0x55c83f052bf8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55c83f0522f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c83f0522d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55c83f0522a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c83f04b988
|     |     `-MemberExpr 0x55c83f052278 <col:6> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|     |       `-CXXThisExpr 0x55c83f052268 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55c83f052bd0 <col:15, line:277:2>
|       |-ParenExpr 0x55c83f0527a0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55c83f052770 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55c83f052400 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55c83f0523e8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55c83f0523d0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55c83f052390 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c83f04b258
|       |   |       `-ImplicitCastExpr 0x55c83f052378 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55c83f052348 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55c83f04b988
|       |   |           `-MemberExpr 0x55c83f052318 <col:27> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|       |   |             `-CXXThisExpr 0x55c83f052308 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55c83f052460 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55c83f052440 <col:54> 'int' 0
|       |   `-CallExpr 0x55c83f0526d0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55c83f0526b8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55c83f052638 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55c83f052710 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c83f052548 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55c83f052728 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c83f052578 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55c83f052740 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55c83f0525b0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55c83f052758 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55c83f052620 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55c83f052608 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55c83f0525d0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55c83f052af0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55c83f0529b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55c83f052998 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55c83f052910 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55c83f03ba00 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55c83f0528e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c83f04b258
|       | |   `-ImplicitCastExpr 0x55c83f0528c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55c83f052898 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55c83f04b988
|       | |       `-MemberExpr 0x55c83f052868 <col:40> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|       | |         `-CXXThisExpr 0x55c83f052858 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55c83f052ab0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55c83f052a98 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55c83f0529d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55c83f050930 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55c83f052ad8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55c83f052a38 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55c83f04b988
|       |       `-MemberExpr 0x55c83f052a08 <col:15> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|       |         `-CXXThisExpr 0x55c83f0529f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55c83f052bb0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55c83f052b48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c83f04b988
|         | `-MemberExpr 0x55c83f052b18 <col:6> 'String::rep_t' lvalue ->_r 0x55c83f04ba00
|         |   `-CXXThisExpr 0x55c83f052b08 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55c83f052b98 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55c83f052b78 <col:16> 'int' 0
|-CXXMethodDecl 0x55c83f04c3e8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55c83f04c208 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c83f04c288 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c83f04c300 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55c83f04c4c0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55c83f04c710 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55c83f04c578 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c83f04c5f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c83f04c670 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c83f04c8f8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55c83f04c7e0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55c83f04c860 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55c83f04c9f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55c83f052ce8 <col:41, line:286:5>
|   `-ReturnStmt 0x55c83f052cd8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55c83f052ca8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55c83f052c70 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55c83f052c58 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55c83f052c38 <col:46> 'int' 1
|-CXXMethodDecl 0x55c83f04cc98 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55c83f04cab0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55c83f04cb30 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55c83f04cbb0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55c83f050930 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55c83f04cd60 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c83f050a00 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55c83f050bd0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c83f050ab8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c83f050b38 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55c83f050c90 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55c83f050d58 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55c83f050e58 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55c83f050ed0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55c83f050f48 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55c83f050fb0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55c83f0510b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55c83f051100 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f051090 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55c83f051070 <col:22> 'int' 14
|-CXXMethodDecl 0x55c83f051318 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55c83f051130 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55c83f0511b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55c83f051230 <col:43> col:46 'int'
|-FriendDecl 0x55c83f051420 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55c83f0514b0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c83f2e0450 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55c83f2e0628 prev 0x55c83f2e0450 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c83f2e06b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c83f2e06e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f2e2040 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55c83f2e1ff0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55c83f2e1fd0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55c83f2e08f8 'type'
|     `-SubstTemplateTypeParmType 0x55c83f2e08c0 'String' sugar
|       |-TemplateTypeParmType 0x55c83f006c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f006c40 'T'
|       `-RecordType 0x55c83f0425e0 'String'
|         `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e20f8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55c83f2e20c0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55c83f2e20a0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c83f2e2040 'type'
|     `-ElaboratedType 0x55c83f2e1ff0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55c83f2e1fd0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55c83f2e08f8 'type'
|         `-SubstTemplateTypeParmType 0x55c83f2e08c0 'String' sugar
|           |-TemplateTypeParmType 0x55c83f006c90 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c83f006c40 'T'
|           `-RecordType 0x55c83f0425e0 'String'
|             `-CXXRecord 0x55c83f042550 'String'
|-CXXMethodDecl 0x55c83f2e2298 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55c83f2e21a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55c83f2e2388 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c83f2e2468 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55c83f2e2468
|-CXXMethodDecl 0x55c83f2e2738 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c83f2e2640 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55c83f2e2978 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c83f2e27f0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c83f2e2868 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c83f2e2b48 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c83f2e2a38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c83f2e2ab0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c83f2e2ca8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c83f2e2d78 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c83f2e2fc8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c83f2e2e38 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c83f2e2eb0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c83f2e3228 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55c83f2e3098 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c83f2e3110 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c83f2e33e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c83f2e32f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c83f2e35a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c83f2e34b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c83f2e3660 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c83f2e3710 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c83f2e3948 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c83f2e37c0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c83f2e3838 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c83f2e3be8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c83f2e3af0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55c83f2e3cb0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55c83f2e3d00 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c83f2e3d50 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c83f27dde0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55c83f2deeb8 prev 0x55c83f27dde0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c83f2e03c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55c83f2e0370 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55c83f2e0350 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c83f2e0200 'type'
|     `-SubstTemplateTypeParmType 0x55c83f2e0090 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55c83efdca40 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55c83efdc9e8 'F'
|       `-RecordType 0x55c83f2dfcf0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55c83f2dfc10 'typed_array_memory'
|-FieldDecl 0x55c83f2e3da0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55c83f2e3df0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c83f2e3e28 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|   |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c83f013f58 'T'
|   `-RecordType 0x55c83f0425e0 'String'
|     `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e3eb8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55c83f2e3e80 'String &'
|   `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|     |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c83f013f58 'T'
|     `-RecordType 0x55c83f0425e0 'String'
|       `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e3f48 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55c83f2e3f10 'const String &'
|   `-QualType 0x55c83f2def51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-RecordType 0x55c83f0425e0 'String'
|         `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e3fd8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55c83f2e3fa0 'String *'
|   `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|     |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c83f013f58 'T'
|     `-RecordType 0x55c83f0425e0 'String'
|       `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e4068 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55c83f2e4030 'const String *'
|   `-QualType 0x55c83f2def51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-RecordType 0x55c83f0425e0 'String'
|         `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e4cc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55c83f2e4c70 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55c83f2e4c50 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55c83f2e4b88 'type'
|     `-LValueReferenceType 0x55c83f2e4b50 'const String &'
|       `-QualType 0x55c83f2e48f1 'const String' const
|         `-SubstTemplateTypeParmType 0x55c83f2e48f0 'String' sugar
|           |-TemplateTypeParmType 0x55c83efe6990 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c83efe6938 'T'
|           `-RecordType 0x55c83f0425e0 'String'
|             `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e4d28 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55c83f2e3f10 'const String &'
|   `-QualType 0x55c83f2def51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-RecordType 0x55c83f0425e0 'String'
|         `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e4d80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f2e4de8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55c83f2e3fa0 'String *'
|   `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|     |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c83f013f58 'T'
|     `-RecordType 0x55c83f0425e0 'String'
|       `-CXXRecord 0x55c83f042550 'String'
|-TypedefDecl 0x55c83f2e4e50 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55c83f2e4030 'const String *'
|   `-QualType 0x55c83f2def51 'const String' const
|     `-SubstTemplateTypeParmType 0x55c83f2def50 'String' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-RecordType 0x55c83f0425e0 'String'
|         `-CXXRecord 0x55c83f042550 'String'
|-EnumDecl 0x55c83f2e4ea8 <line:134:5> col:5
| `-EnumConstantDecl 0x55c83f2e4fa0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c83f2e4f80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c83f015638 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c83f015610 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c83f0155f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c83f2e5028 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c83f2e52b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f2e50e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c83f2e5180 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55c83f2e5548 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55c83f2e5430 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55c83f2e5808 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55c83f2e56f0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c83f2e5b20 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55c83f2e5a00 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55c83f2e5e30 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55c83f2e5d10 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c83f2e6120 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f2e5f68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c83f2e5fe0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c83f2e6248 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c83f2e62f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f2e6350 <col:30> Inherited
|-CXXMethodDecl 0x55c83f2e6398 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c83f2e6448 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f2e64a0 <col:30> Inherited
|-CXXMethodDecl 0x55c83f2e6568 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c83f2e6618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f2e6670 <col:30> Inherited
|-CXXMethodDecl 0x55c83f2e66b8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c83f2e6768 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f2e67c0 <col:30> Inherited
|-CXXMethodDecl 0x55c83f2e6808 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c83f2e68b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f2e6910 <col:30> Inherited
|-CXXMethodDecl 0x55c83f2e6958 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c83f2e6a08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f2e6a60 <col:30> Inherited
|-CXXMethodDecl 0x55c83f2e6a88 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c83f2e6b38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c83f2e6be8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c83f2e6da8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f2e6c98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c83f2e6d10 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c83f2e6ef8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c83f2e6e68 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f2e70a8 <line:163:5, col:65> col:43 used operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55c83f2e6fb0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c83f2e7160 <col:20>
| `-OptimizeNoneAttr 0x55c83f2e71b8 <col:30>
|-CXXMethodDecl 0x55c83f2e72d8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55c83f2e71e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c83f2e7390 <col:20>
| `-OptimizeNoneAttr 0x55c83f2e73e8 <col:30>
|-CXXMethodDecl 0x55c83f2e74a0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c83f2e7410 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f2e75e8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c83f2e7558 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f2e7718 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55c83f2e7818 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55c83f2e78e8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55c83f2e79b8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55c83f2e7af8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c83f2e7a68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f2e7c40 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c83f2e7bb0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f2e7d88 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c83f2e7cf8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c83f2e7e40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c83f2e7f40 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c83f2e7eb0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c83f2e7ff8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c83f2e80b8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55c83f2e81b8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55c83f2e8338 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c83f2e8278 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55c83f2e8af8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c83f2e83f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55c83f2e8a58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55c83f2e8958 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55c83f2e8bd8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c83f2e8d28 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c83f2e8c98 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c83f2e8de0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c83f2e9028 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f2e8ea0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c83f2e8f18 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c83f2e91b8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55c83f2e90f8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c83f2e93c8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55c83f2e9280 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c83f2e92f8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c83f2e9488 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c83f2e96e8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55c83f2e95f0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55c83f2e97b8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55c83f2e97b8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f293ab8 prev 0x55c83f27afb0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c83f293bb0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55c83f293c40 <col:22, col:28> col:22 public
|-EnumDecl 0x55c83f293c68 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55c83f293d88 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f293d68 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55c83f293d50 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c83f293d30 <col:14> 'int' 999
| |-EnumConstantDecl 0x55c83f293e30 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f293e10 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55c83f293df8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c83f293dd8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c83f293ec0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f293ea0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55c83f293e80 <col:17> 'int' 0
| |-EnumConstantDecl 0x55c83f293f50 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f293f30 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55c83f293f10 <col:13> 'int' 1
| |-EnumConstantDecl 0x55c83f293fe0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f293fc0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55c83f293fa0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55c83f294070 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f294050 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55c83f294030 <col:13> 'int' 3
| |-EnumConstantDecl 0x55c83f294100 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f2940e0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55c83f2940c0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55c83f294190 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f294170 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55c83f294150 <col:14> 'int' 5
| |-EnumConstantDecl 0x55c83f294220 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c83f294200 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55c83f2941e0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55c83f2942b0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55c83f294290 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55c83f294270 <col:13> 'int' 7
|-VarDecl 0x55c83f294320 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55c83f2943a8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55c83f294430 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55c83f2944b8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55c83f294540 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55c83f2945c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55c83f294650 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55c83f2946d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55c83f294760 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55c83f2947e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55c83f294870 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55c83f294970 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55c83f299d68 '_nerrors' 'int'
| | `-IntegerLiteral 0x55c83f29a4f8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55c83f29a568 <col:16, line:129:5>
|-CXXDestructorDecl 0x55c83f294a60 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55c83f29a578 <col:29, line:132:5>
|-CXXMethodDecl 0x55c83f294c18 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55c83f294b50 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f294ce0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c83f294dc8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c83f29a5d0 <col:44, line:161:5>
|   `-ReturnStmt 0x55c83f29a5c0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55c83f29a5a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f29a588 <col:9> 'ErrorHandler *' lvalue Var 0x55c83f299dc8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f294f38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55c83f294e78 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c83f295000 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c83f29a630 <col:43, line:173:5>
|   `-ReturnStmt 0x55c83f29a620 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55c83f29a608 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f29a5e8 <col:9> 'ErrorHandler *' lvalue Var 0x55c83f299e40 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55c83f2950b8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55c83f295138 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55c83f295248 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55c83f2951b8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c83f295398 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55c83f295308 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c83f2954f0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55c83f295458 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55c83f295648 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55c83f2955b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c83f2957a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55c83f295708 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c83f2959b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c83f295858 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55c83f2958d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55c83f295b88 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c83f295a70 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55c83f295af0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55c83f295da8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c83f295c48 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55c83f295cc8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55c83f295f88 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c83f295e68 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c83f295ee8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c83f296168 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c83f296048 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c83f2960c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c83f2962f0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55c83f296228 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55c83f2964c0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55c83f2963a8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c83f296420 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55c83f29a888 <col:57, line:234:5>
|   `-ReturnStmt 0x55c83f29a878 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55c83f29a860 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c83f29a808 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c83f29a7d8 <col:9> '<bound member function type>' ->xmessage 0x55c83f2962f0
|         | `-CXXThisExpr 0x55c83f29a7c8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55c83f29a848 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c83f29a830 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c83f29a7a8 <col:18, col:40> 'String' (CXXTemporary 0x55c83f29a7a8)
|               `-CallExpr 0x55c83f29a770 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55c83f29a758 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55c83f29a6d0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c83f298548 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55c83f29a6f0 <col:31> 'const String' lvalue ParmVar 0x55c83f296420 'str' 'const String &'
|                 `-DeclRefExpr 0x55c83f29a710 <col:36> 'const String' lvalue ParmVar 0x55c83f2963a8 'anno' 'const String &'
|-CXXMethodDecl 0x55c83f296800 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c83f296580 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c83f296600 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55c83f2966d0 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c83f29ab18 <col:68, line:243:5>
|   `-ReturnStmt 0x55c83f29ab08 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55c83f29aaf0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c83f29aa90 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c83f29aa60 <col:9> '<bound member function type>' ->xmessage 0x55c83f2964c0
|         | `-CXXThisExpr 0x55c83f29aa50 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c83f29a928 <col:18> 'const String' lvalue ParmVar 0x55c83f296580 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c83f29aad8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c83f29aac0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c83f29aa30 <col:24, col:40> 'String' (CXXTemporary 0x55c83f29aa30)
|               `-CXXMemberCallExpr 0x55c83f29a9c8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55c83f29a958 <col:24> '<bound member function type>' ->vformat 0x55c83f2979e0
|                 | `-CXXThisExpr 0x55c83f29a948 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c83f29a9f8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c83f29a988 <col:32> 'const char *' lvalue ParmVar 0x55c83f296600 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c83f29aa10 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c83f29a9a8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c83f2966d0 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c83f296aa0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55c83f2968c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c83f296940 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c83f2969b8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55c83f29ae58 <col:23, line:254:5>
|   `-ReturnStmt 0x55c83f29ae48 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55c83f29ae30 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55c83f29add0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55c83f29ada0 <col:9> '<bound member function type>' ->xmessage 0x55c83f2964c0
|         | `-CXXThisExpr 0x55c83f29ad90 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55c83f29ae18 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55c83f29ae00 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55c83f29ad50 <col:18, col:65> 'String' (CXXTemporary 0x55c83f29ad50)
|         |     `-CallExpr 0x55c83f29ace8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55c83f29acd0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55c83f29abb8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c83f298548 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55c83f29abd8 <col:31> 'const String' lvalue ParmVar 0x55c83f296940 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55c83f29ad30 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55c83f29ad18 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55c83f29acb0 <col:37, col:64> 'String' (CXXTemporary 0x55c83f29acb0)
|         |             `-CallExpr 0x55c83f29ac80 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55c83f29ac68 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55c83f29abf8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55c83f298b98 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55c83f29ac18 <col:56> 'const String' lvalue ParmVar 0x55c83f2968c8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55c83f29ad70 <col:68> 'const String' lvalue ParmVar 0x55c83f2969b8 'str' 'const String &'
|-CXXMethodDecl 0x55c83f296e20 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c83f296b68 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c83f296be0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c83f296c60 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55c83f296cd8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c83f29b110 <col:34, line:267:5>
|   `-ReturnStmt 0x55c83f29b100 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55c83f29b0e8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55c83f29b080 <col:9, col:51> 'int'
|         |-MemberExpr 0x55c83f29b050 <col:9> '<bound member function type>' ->xmessage 0x55c83f296aa0
|         | `-CXXThisExpr 0x55c83f29b040 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c83f29aef8 <col:18> 'const String' lvalue ParmVar 0x55c83f296b68 'landmark' 'const String &'
|         |-DeclRefExpr 0x55c83f29af18 <col:28> 'const String' lvalue ParmVar 0x55c83f296be0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c83f29b0d0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c83f29b0b8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c83f29b020 <col:34, col:50> 'String' (CXXTemporary 0x55c83f29b020)
|               `-CXXMemberCallExpr 0x55c83f29afb8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55c83f29af48 <col:34> '<bound member function type>' ->vformat 0x55c83f2979e0
|                 | `-CXXThisExpr 0x55c83f29af38 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c83f29afe8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c83f29af78 <col:42> 'const char *' lvalue ParmVar 0x55c83f296c60 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c83f29b000 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c83f29af98 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c83f296cd8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c83f296f30 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55c83f29b190 <col:25, line:288:5>
|   `-ReturnStmt 0x55c83f29b180 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55c83f29b168 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55c83f29b138 <col:9> 'const int' lvalue ->_nerrors 0x55c83f299d68
|         `-CXXThisExpr 0x55c83f29b128 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c83f297140 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55c83f296fe8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55c83f297068 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55c83f297428 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c83f297208 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55c83f297288 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55c83f297300 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c83f2975c0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55c83f2974f8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55c83f297808 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c83f297680 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55c83f2976f8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c83f29b3f0 <col:58, line:357:5>
|   `-ReturnStmt 0x55c83f29b3e0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55c83f29b3c8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55c83f29b398 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55c83f29b380 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55c83f29b360 <col:9, col:29> 'String' (CXXTemporary 0x55c83f29b360)
|             `-CallExpr 0x55c83f29b2f0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55c83f29b2d8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c83f29b258 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55c83f297428 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55c83f29b1f8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55c83f29b328 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55c83f29b218 <col:21> 'const char *' lvalue ParmVar 0x55c83f297680 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55c83f29b340 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55c83f29b238 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c83f2976f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c83f2979e0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55c83f2978d0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55c83f297948 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c83f297b38 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55c83f297aa8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55c83f297cb8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55c83f297bf0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55c83f297f50 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55c83f297d70 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55c83f297df0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55c83f297e68 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55c83f2980b0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55c83f298020 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55c83f29b508 <col:37, line:441:5>
|   `-IfStmt 0x55c83f29b4f0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55c83f29b478 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55c83f29b448 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c83f29b408 <col:6> 'int' lvalue ParmVar 0x55c83f298020 'level' 'int'
|     | `-ImplicitCastExpr 0x55c83f29b460 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55c83f29b428 <col:15> 'ErrorHandler::Level' EnumConstant 0x55c83f294070 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55c83f29b4d8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55c83f29b4a8 <col:8> 'int' lvalue ->_nerrors 0x55c83f299d68
|         `-CXXThisExpr 0x55c83f29b498 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c83f298178 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55c83f29b5a0 <col:26, line:448:5>
|   `-BinaryOperator 0x55c83f29b580 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55c83f29b530 <col:2> 'int' lvalue ->_nerrors 0x55c83f299d68
|     | `-CXXThisExpr 0x55c83f29b520 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55c83f29b560 <col:13> 'int' 0
|-CXXMethodDecl 0x55c83f298340 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55c83f298230 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55c83f2982a8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55c83f298548 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55c83f298400 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55c83f298478 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55c83f2987f8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55c83f298608 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55c83f298688 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55c83f298708 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55c83f2988b0 <col:59> 0 0
|-CXXMethodDecl 0x55c83f298a48 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55c83f298928 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55c83f2989a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55c83f29bc10 <col:70, line:534:5>
|   |-DeclStmt 0x55c83f29b710 <line:528:2, col:20>
|   | |-VarDecl 0x55c83f29b5c8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55c83f29b630 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55c83f29b668 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55c83f29b6d0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55c83f29b7e0 <line:529:2, col:23>
|   | `-VarDecl 0x55c83f29b740 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55c83f29b7c8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55c83f29b7a8 <col:18> 'const char *' lvalue ParmVar 0x55c83f298928 'begin' 'const char *'
|   |-DoStmt 0x55c83f29bba8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55c83f29bad8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55c83f29bac0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55c83f29baa0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55c83f29b7f8 <col:6> 'const char *' lvalue Var 0x55c83f29b740 'x' 'const char *'
|   | |     `-CallExpr 0x55c83f29b9f0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55c83f29b9d8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55c83f29b990 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55c83f29a240 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55c83f29ba58 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55c83f29ba40 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55c83f29b8b0 <col:20, col:27> 'String' (CXXTemporary 0x55c83f29b8b0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55c83f29b878 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55c83f29ba70 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c83f29b8d0 <col:30> 'const char *' lvalue Var 0x55c83f29b740 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55c83f29ba88 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c83f29b8f0 <col:33> 'const char *' lvalue ParmVar 0x55c83f2989a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55c83f29b930 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c83f29b910 <col:39> 'String' lvalue Var 0x55c83f29b5c8 'name' 'String'
|   | |       |-UnaryOperator 0x55c83f29b968 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c83f29b948 <col:46> 'String' lvalue Var 0x55c83f29b668 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55c83f29b980 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55c83f29bb90 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55c83f29bb78 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55c83f29bb58 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55c83f29bb28 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|   |         `-ImplicitCastExpr 0x55c83f29bb10 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55c83f29baf0 <col:11> 'String' lvalue Var 0x55c83f29b5c8 'name' 'String'
|   `-ReturnStmt 0x55c83f29bc00 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55c83f29bbe8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f29bbc8 <col:9> 'const char *' lvalue Var 0x55c83f29b740 'x' 'const char *'
|-CXXMethodDecl 0x55c83f298b98 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55c83f298b08 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55c83f29c218 <col:55, line:550:5>
|   `-IfStmt 0x55c83f29c1f0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55c83f29be50 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55c83f29be38 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c83f29be20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c83f29be00 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c83f29bdd0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|     | |       `-DeclRefExpr 0x55c83f29bc70 <col:6> 'const String' lvalue ParmVar 0x55c83f298b08 'x' 'const String &'
|     | `-BinaryOperator 0x55c83f29bdb0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55c83f29bd80 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55c83f29bd30 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55c83f29bd18 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55c83f29bcd0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55c83f05f640 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55c83f29bc90 <col:11> 'const String' lvalue ParmVar 0x55c83f298b08 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55c83f29bcb0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55c83f29bd98 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55c83f29bd68 <col:19> 'char' 123
|     |-ReturnStmt 0x55c83f29bec0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55c83f29be90 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55c83f29be70 <col:13> 'const String' lvalue ParmVar 0x55c83f298b08 'x' 'const String &'
|     `-IfStmt 0x55c83f29c1c8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55c83f29bf58 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c83f29bf40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c83f29bf20 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c83f29bef0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|       |       `-DeclRefExpr 0x55c83f29bed0 <col:11> 'const String' lvalue ParmVar 0x55c83f298b08 'x' 'const String &'
|       |-ReturnStmt 0x55c83f29c0e0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55c83f29c0c8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55c83f29c098 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55c83f29c080 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55c83f29c060 <col:13, col:29> 'String' (CXXTemporary 0x55c83f29c060)
|       |         `-CallExpr 0x55c83f29c010 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55c83f29bff8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55c83f29bf70 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55c83f298340 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55c83f29c040 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55c83f29bf90 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55c83f29bfb0 <col:28> 'const String' lvalue ParmVar 0x55c83f298b08 'x' 'const String &'
|       `-ReturnStmt 0x55c83f29c1b8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55c83f29c1a0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55c83f29c170 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55c83f29c158 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55c83f29c138 <col:13, col:20> 'String' (CXXTemporary 0x55c83f29c138)
|                 `-CXXTemporaryObjectExpr 0x55c83f29c100 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55c83f298d98 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55c83f298c50 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55c83f298cc8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c83f29a4e8 <col:71> 'bool' false
|-CXXRecordDecl 0x55c83f298e48 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55c83f299148 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55c83f2990e0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55c83f299080 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55c83f299040 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55c83f0425e0 'String'
|       | `-CXXRecord 0x55c83f042550 'String'
|       |-BuiltinType 0x55c83ed16580 'int'
|       `-DecayedType 0x55c83f2966a0 '__va_list_tag *' sugar
|         |-TypedefType 0x55c83f296670 'va_list' sugar
|         | |-Typedef 0x55c83ef34450 'va_list'
|         | `-TypedefType 0x55c83ef34400 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55c83ee6bf28 '__gnuc_va_list'
|         |   `-TypedefType 0x55c83ee6be90 '__builtin_va_list' sugar
|         |     |-Typedef 0x55c83ed57d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55c83ed57ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55c83ed172d0 '__va_list_tag'
|         |         `-CXXRecord 0x55c83ed17238 '__va_list_tag'
|         `-PointerType 0x55c83ef39cf0 '__va_list_tag *'
|           `-RecordType 0x55c83ed172d0 '__va_list_tag'
|             `-CXXRecord 0x55c83ed17238 '__va_list_tag'
|-EnumDecl 0x55c83f2991a0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55c83f2992a0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f299800 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f299280 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55c83f299260 <col:16> 'int' 1
| |-EnumConstantDecl 0x55c83f299330 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f299818 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f299310 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55c83f2992f0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55c83f2993c0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f299830 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f2993a0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55c83f299380 <col:22> 'int' 4
| |-EnumConstantDecl 0x55c83f299450 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f299848 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f299430 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55c83f299410 <col:17> 'int' 8
| |-EnumConstantDecl 0x55c83f2994e0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f299860 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f2994c0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55c83f2994a0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55c83f299570 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f299878 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f299550 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c83f299530 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c83f299600 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f2998a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f2995e0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55c83f2995c0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55c83f299690 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f2998b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f299670 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55c83f299650 <col:14> 'int' 128
| |-EnumConstantDecl 0x55c83f299720 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c83f2998d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f299700 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55c83f2996e0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55c83f2997b0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55c83f2998e8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f299790 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55c83f299770 <col:12> 'int' 1024
|-CXXMethodDecl 0x55c83f299af8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55c83f299910 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55c83f2999b0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55c83f299c80 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55c83f299bb8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55c83f299d28 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55c83f299d68 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55c83f299dc8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55c83f299e40 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55c83f29a240 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55c83f299eb8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55c83f299f38 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55c83f299fb8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55c83f29a030 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55c83f29a0a8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55c83f29a120 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55c83f29a368 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55c83f29a368
| `-ParmVarDecl 0x55c83f29a478 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55c83f29c578 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55c83f29c578
  `-ParmVarDecl 0x55c83f29c688 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f2f7e28 prev 0x55c83f23d8f8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83f2f7f20 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55c83f2f7fb0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55c83f2f80b8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55c83f2f7fe8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c83f2f9490 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c83f2f9470 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c83f2f9008 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c83f2f9520 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c83f2f94e0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55c83f2f7fe8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c83f2f9070 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c83f2f95a0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c83f2f9560 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c83f2f90d0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c83f2f95e0 <col:54> 'bool' false
| `-CompoundStmt 0x55c83f2f96e8 <col:61, line:38:5>
|   `-BinaryOperator 0x55c83f2f96c8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55c83f2f9660 <col:9> 'const Element *' lvalue ->_context 0x55c83f2f8fa8
|     | `-CXXThisExpr 0x55c83f2f9650 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55c83f2f96b0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55c83f2f9690 <col:20> 'int' 0
|-CXXConstructorDecl 0x55c83f2f82c8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f2f8178 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55c83f2f81f0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c83f2f94c8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c83f2f94a8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55c83f2f8fa8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55c83f2f9740 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c83f2f9700 <col:20> 'const Element *' lvalue ParmVar 0x55c83f2f8178 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55c83f2f9008 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c83f2f97c0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c83f2f9780 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55c83f2f81f0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c83f2f9070 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c83f2f9840 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c83f2f9800 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55c83f2f90d0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c83f2f9880 <col:73> 'bool' false
| `-CompoundStmt 0x55c83f2f98f8 <col:80, line:46:5>
|-CXXMethodDecl 0x55c83f2f83f8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55c83f2f9970 <col:36, line:51:5>
|   `-ReturnStmt 0x55c83f2f9960 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55c83f2f9948 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55c83f2f9918 <col:16> 'const Element *const' lvalue ->_context 0x55c83f2f8fa8
|         `-CXXThisExpr 0x55c83f2f9908 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c83f2f84e8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55c83f2f99f0 <col:32, line:57:5>
|   `-ReturnStmt 0x55c83f2f99e0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55c83f2f99c8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55c83f2f9998 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55c83f2f9008
|         `-CXXThisExpr 0x55c83f2f9988 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c83f2f85a8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55c83f2f8730 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c83f2f8660 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c83f2f8880 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c83f2f87f0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c83f2f89d0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c83f2f8940 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c83f2f8bd8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55c83f2f8a88 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55c83f2f8b00 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55c83f2f8eb8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55c83f2f8c98 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55c83f2f8d18 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55c83f2f8d90 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55c83f2f8f70 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55c83f2f8fa8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55c83f2f9008 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55c83f2f9070 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55c83f2f90d0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55c83f2f9120 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c83f2f9120
| `-ParmVarDecl 0x55c83f2f9238 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55c83f2f92d8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c83f2f92d8
| `-ParmVarDecl 0x55c83f2f93e8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55c83f3605b8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c83f31af40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55c83f31b118 prev 0x55c83f31af40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c83f31b1a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c83f31b1d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f31cda0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55c83f31cd50 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55c83f31b680 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55c83f31b580 'type'
|     `-TemplateSpecializationType 0x55c83f31b510 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55c83f31b3f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55c83f31b3d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55c83f31b3b0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55c83f31b4f0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55c83f31b410 'char_array'
|-TypedefDecl 0x55c83f31ce58 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55c83f31ce20 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55c83f31ce00 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55c83f31cda0 'type'
|     `-ElaboratedType 0x55c83f31cd50 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55c83f31b680 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55c83f31b580 'type'
|         `-TemplateSpecializationType 0x55c83f31b510 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55c83f31b3f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55c83f31b3d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55c83f31b3b0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55c83f31b4f0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55c83f31b410 'char_array'
|-CXXMethodDecl 0x55c83f31cfd8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55c83f31cee8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55c83f31d0c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c83f31d1a8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55c83f31d478 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c83f31d380 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55c83f31d6b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c83f31d530 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c83f31d5a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c83f31d888 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c83f31d778 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c83f31d7f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c83f326e60 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c83f326f30 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c83f327178 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c83f326ff0 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c83f327068 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c83f3273d8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55c83f327248 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c83f3272c0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c83f327598 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c83f3274a8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c83f327758 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c83f327660 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c83f327810 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c83f3278c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c83f327af8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c83f327970 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c83f3279e8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c83f327d98 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c83f327ca0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55c83f327e60 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55c83f327eb0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c83f327f00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c83f319948 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55c83f319b58 prev 0x55c83f319948 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c83f31aeb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55c83f31ae60 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55c83f31ae40 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55c83f31acf0 'type'
|     `-SubstTemplateTypeParmType 0x55c83f31ab10 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55c83efdc2c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83efdc268 'T'
|       `-RecordType 0x55c83f31a660 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55c83f31a578 'sized_array_memory'
|-FieldDecl 0x55c83f327f50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55c83f327fa0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c83f327fd8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|   |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c83f013f58 'T'
|   `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328068 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55c83f328030 'int &'
|   `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|     |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c83f013f58 'T'
|     `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328128 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55c83f3280f0 'const int &'
|   `-QualType 0x55c83f319bf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f3281b8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55c83f328180 'int *'
|   `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|     |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c83f013f58 'T'
|     `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328248 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55c83f328210 'const int *'
|   `-QualType 0x55c83f319bf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328e30 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55c83f328de0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55c83f328dc0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55c83f328d50 'type'
|     `-SubstTemplateTypeParmType 0x55c83f328b10 'int' sugar
|       |-TemplateTypeParmType 0x55c83efe70c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83efe7070 'T'
|       `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328e98 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55c83f3280f0 'const int &'
|   `-QualType 0x55c83f319bf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328ef0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328f58 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55c83f328180 'int *'
|   `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|     |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c83f013f58 'T'
|     `-BuiltinType 0x55c83ed16580 'int'
|-TypedefDecl 0x55c83f328fc0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55c83f328210 'const int *'
|   `-QualType 0x55c83f319bf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55c83f319bf0 'int' sugar
|       |-TemplateTypeParmType 0x55c83f013fb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c83f013f58 'T'
|       `-BuiltinType 0x55c83ed16580 'int'
|-EnumDecl 0x55c83f329018 <line:134:5> col:5
| `-EnumConstantDecl 0x55c83f329110 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c83f3290f0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c83f015638 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c83f015610 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c83f0155f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c83f329198 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c83f3293e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f329250 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c83f3292f0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55c83f3296a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55c83f329590 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55c83f329968 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55c83f329850 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c83f329cb0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55c83f329b90 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55c83f329fc0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55c83f329ea0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c83f32a2b0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f32a0f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c83f32a170 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c83f32a3d8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c83f32a4b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f32a510 <col:30> Inherited
|-CXXMethodDecl 0x55c83f32a558 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c83f32a608 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f32a660 <col:30> Inherited
|-CXXMethodDecl 0x55c83f32a728 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c83f32a7d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f32a830 <col:30> Inherited
|-CXXMethodDecl 0x55c83f32a878 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c83f32a928 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f32a980 <col:30> Inherited
|-CXXMethodDecl 0x55c83f32a9c8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c83f32aa78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f32aad0 <col:30> Inherited
|-CXXMethodDecl 0x55c83f32ab18 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c83f32abc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c83f32ac20 <col:30> Inherited
|-CXXMethodDecl 0x55c83f32ac48 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c83f32acf8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c83f32ada8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c83f32af68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f32ae58 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c83f32aed0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c83f32b0b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c83f32b028 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f32b268 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55c83f32b170 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c83f32b320 <col:20>
| `-OptimizeNoneAttr 0x55c83f32b378 <col:30>
|-CXXMethodDecl 0x55c83f32b498 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55c83f32b3a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c83f32b550 <col:20>
| `-OptimizeNoneAttr 0x55c83f32b5a8 <col:30>
|-CXXMethodDecl 0x55c83f32b660 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c83f32b5d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f32b7a8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c83f32b718 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f32b8d8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55c83f32ba08 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55c83f32bad8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55c83f32bba8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55c83f32bce8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c83f32bc58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f32be30 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c83f32bda0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c83f32bf78 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c83f32bee8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c83f32c030 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c83f32c130 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c83f32c0a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c83f32c1e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c83f32c2a8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55c83f32c3a8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55c83f32c528 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c83f32c468 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55c83f32cce8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c83f32c5e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55c83f32cc48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55c83f32cb48 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55c83f32cdc8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c83f32cf18 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c83f32ce88 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c83f32cfd0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c83f32d218 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c83f32d090 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c83f32d108 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c83f32d3d8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55c83f32d2e8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c83f32d628 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55c83f32d4a0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c83f32d518 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c83f32d6e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c83f32d948 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55c83f32d850 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55c83f32da18 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f317ab8 prev 0x55c83f2fe958 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c83f317bb0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55c83f317ca0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55c83f33f690 <col:16, line:828:9>
|-CXXDestructorDecl 0x55c83f317d90 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55c83f33f6a0 <col:25, line:830:9>
|-CXXMethodDecl 0x55c83f317e90 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55c83f317f40 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55c83f317fe8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c83f317fe8
| `-ParmVarDecl 0x55c83f3180f8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55c83f3188b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c83f3188b8
  `-ParmVarDecl 0x55c83f3189c8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f2fe768 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55c83f2fe8c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55c83f2fe958 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55c83f2fea10 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55c83f2feb18 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55c83f2fea48 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c83f330838 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c83f330818 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c83f2fee38 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f2fecb0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55c83f2fed28 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c83f330870 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c83f330850 <col:59> 'int' 0
|-CXXConstructorDecl 0x55c83f2ff010 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f2fef00 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55c83f2fef78 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c83f3308a8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c83f330888 <col:55> 'int' 0
|-CXXConstructorDecl 0x55c83f2ff3c8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c83f2ff1b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55c83f2ff228 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55c83f2ff2a0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c83f3308e0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c83f3308c0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c83f2ff588 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55c83f2ff4c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55c83f2ff680 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55c83f2ff868 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55c83f2ff770 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55c83f2ff958 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55c83f330c90 <col:24, line:291:5>
|   `-ReturnStmt 0x55c83f330c80 <line:290:9, col:79>
|     `-BinaryOperator 0x55c83f330c60 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55c83f330b38 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55c83f330a90 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55c83f330a70 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55c83f330968 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55c83f330950 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55c83f330938 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55c83f330908 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55c83f3198e0
|       | |   |       `-CXXThisExpr 0x55c83f3308f8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55c83f330a58 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55c83f330a40 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55c83f330a08 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55c83f3309d8 <col:28, col:35> '<bound member function type>' ->size 0x55c83f2e6a88
|       | |           `-ImplicitCastExpr 0x55c83f330a28 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55c83f3309c0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55c83f330990 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55c83f3198e0
|       | |                 `-CXXThisExpr 0x55c83f330980 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55c83f330b20 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55c83f330b08 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55c83f330af0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55c83f330ac0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55c83f32db60
|       |         `-CXXThisExpr 0x55c83f330ab0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55c83f330c40 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55c83f330c28 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c83f330c10 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c83f330bd0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c83f330bb8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c83f330b68 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c83f32dc10
|         |     |   `-CXXThisExpr 0x55c83f330b58 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c83f330b98 <col:73> 'int' 0
|         `-IntegerLiteral 0x55c83f330bf0 <col:79> 'int' 0
|-CXXMethodDecl 0x55c83f2ffa18 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55c83f330e68 <col:32, line:296:5>
|   `-ReturnStmt 0x55c83f330e58 <line:295:9, col:49>
|     `-BinaryOperator 0x55c83f330e38 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55c83f330d18 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55c83f330d00 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55c83f330ce8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55c83f330cb8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55c83f32db60
|       |       `-CXXThisExpr 0x55c83f330ca8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55c83f330e18 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55c83f330e00 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c83f330de8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c83f330da8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c83f330d90 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c83f330d40 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c83f32dc10
|         |     |   `-CXXThisExpr 0x55c83f330d30 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c83f330d70 <col:43> 'int' 0
|         `-IntegerLiteral 0x55c83f330dc8 <col:49> 'int' 0
|-CXXMethodDecl 0x55c83f2ffb08 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55c83f331078 <col:19, line:306:5>
|   |-IfStmt 0x55c83f330f98 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55c83f330ed8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55c83f330ec0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55c83f330e90 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c83f3198e0
|   | |     `-CXXThisExpr 0x55c83f330e80 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55c83f330f78 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55c83f330f48 <col:13, col:20> '<bound member function type>' ->clear 0x55c83f2e9488
|   |     `-ImplicitCastExpr 0x55c83f330f30 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55c83f330f00 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c83f3198e0
|   |         `-CXXThisExpr 0x55c83f330ef0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55c83f331020 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55c83f330ff0 <col:9, col:16> '<bound member function type>' .clear 0x55c83f32d6e8
|   |   `-MemberExpr 0x55c83f330fc0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55c83f32db00
|   |     `-CXXThisExpr 0x55c83f330fb0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55c83f331068 <line:305:9, col:17>
|     `-UnaryOperator 0x55c83f331050 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f331040 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c83f2ffd88 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55c83f2ffc90 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55c83f2fff08 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55c83f2ffe40 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55c83f300288 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55c83f2fffb0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55c83f3001e8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55c83f300058 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55c83f3000d0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55c83f331398 <col:67, line:327:5>
|     |-WhileStmt 0x55c83f331348 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55c83f331160 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55c83f3310e0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55c83f235dc8 0x55c83f07f3a8 0x55c83f07f080 0x55c83f06f850 0x55c83f06f500 0x55c83f06edf0 0x55c83f0416a0 0x55c83efcea00
|     | | |-DeclRefExpr 0x55c83f3310a0 <col:16> 'Iter' lvalue ParmVar 0x55c83f300058 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55c83f3310c0 <col:25> 'Iter' lvalue ParmVar 0x55c83f3000d0 'end' 'Iter'
|     | `-CompoundStmt 0x55c83f331328 <col:30, line:325:9>
|     |   |-CallExpr 0x55c83f3312c8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55c83f3311a8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55c83f331298 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55c83f331228 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|     |   |   `-DeclRefExpr 0x55c83f331208 <col:24> 'Iter' lvalue ParmVar 0x55c83f300058 'begin' 'Iter'
|     |   `-UnaryOperator 0x55c83f331310 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55c83f3312f0 <col:15> 'Iter' lvalue ParmVar 0x55c83f300058 'begin' 'Iter'
|     `-ReturnStmt 0x55c83f331388 <line:326:9, col:17>
|       `-UnaryOperator 0x55c83f331370 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f331360 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c83f300390 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55c83f300300 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55c83f3004d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55c83f300448 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55c83f3005a0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55c83f331478 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55c83f331418 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55c83f3313c8 <col:9> '<bound member function type>' ->reset_from 0x55c83f32df88
|   | | `-CXXThisExpr 0x55c83f3313b8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55c83f3313f8 <col:20> 'int' 0
|   `-ReturnStmt 0x55c83f331468 <line:352:9, col:17>
|     `-UnaryOperator 0x55c83f331450 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f331440 <col:17> 'Args *' this
|-VarDecl 0x55c83f300658 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c83f3006c0 <col:38> 'int' 1
|-VarDecl 0x55c83f300750 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c83f3007b8 <col:39> 'int' 2
|-VarDecl 0x55c83f300848 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c83f3008b0 <col:39> 'int' 4
|-VarDecl 0x55c83f300940 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c83f3009a8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55c83f300d28 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55c83f300a20 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f300c88 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c83f300ad0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f300b78 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55c83f3315d0 <col:43, line:371:5>
|     `-ReturnStmt 0x55c83f3315c0 <line:370:9, col:34>
|       `-CallExpr 0x55c83f331588 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f3314a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f331528 <col:21> 'const char *' lvalue ParmVar 0x55c83f300ad0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f331548 <col:30> 'int' 0
|         `-DeclRefExpr 0x55c83f331568 <col:33> 'T' lvalue ParmVar 0x55c83f300b78 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f301058 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55c83f300d90 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f300fb8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c83f300e40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f300ee8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c83f331720 <col:45, line:375:5>
|     `-ReturnStmt 0x55c83f331710 <line:374:9, col:42>
|       `-CallExpr 0x55c83f3316d8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f3315f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f331678 <col:21> 'const char *' lvalue ParmVar 0x55c83f300e40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f331698 <col:30> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c83f3316b8 <col:41> 'T' lvalue ParmVar 0x55c83f300ee8 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f301388 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55c83f3010c0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f3012e8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c83f301170 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f301218 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c83f331870 <col:45, line:379:5>
|     `-ReturnStmt 0x55c83f331860 <line:378:9, col:43>
|       `-CallExpr 0x55c83f331828 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f331748 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f3317c8 <col:21> 'const char *' lvalue ParmVar 0x55c83f301170 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f3317e8 <col:30> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int'
|         `-DeclRefExpr 0x55c83f331808 <col:42> 'T' lvalue ParmVar 0x55c83f301218 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f3016b8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55c83f3013f0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f301618 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c83f3014a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f301548 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55c83f331a70 <col:46, line:383:5>
|     `-ReturnStmt 0x55c83f331a60 <line:382:9, col:55>
|       `-CallExpr 0x55c83f331a28 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f331898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f331918 <col:21> 'const char *' lvalue ParmVar 0x55c83f3014a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55c83f3319e8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c83f331998 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c83f331978 <col:30> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c83f3319d0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c83f3319b0 <col:42> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55c83f331a08 <col:54> 'T' lvalue ParmVar 0x55c83f301548 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f301ab8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55c83f301720 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f301a18 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55c83f3017d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f301850 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f3018f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55c83f331bb0 <col:54, line:388:5>
|     |-CallExpr 0x55c83f331b38 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f331a88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c83f331ac8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c83f331ad8 <col:30> 'const char *' lvalue ParmVar 0x55c83f3017d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c83f331af8 <col:39> 'int' lvalue ParmVar 0x55c83f301850 'flags' 'int'
|     | `-DeclRefExpr 0x55c83f331b18 <col:46> 'T' lvalue ParmVar 0x55c83f3018f8 'x' 'T &'
|     `-ReturnStmt 0x55c83f331ba0 <line:387:9, col:17>
|       `-UnaryOperator 0x55c83f331b88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f331b78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f301f68 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55c83f301b28 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c83f301ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c83f301ec8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c83f301c68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f301d08 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55c83f301da8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c83f331d20 <col:74, line:403:5>
|     `-ReturnStmt 0x55c83f331d10 <line:402:9, col:56>
|       `-CallExpr 0x55c83f331cd0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f331be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f331c50 <col:28> 'const char *' lvalue ParmVar 0x55c83f301c68 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f331c70 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c83f331c90 <col:40> 'T' lvalue ParmVar 0x55c83f301d08 'x' 'T &'
|         `-DeclRefExpr 0x55c83f331cb0 <col:43> 'const V' lvalue ParmVar 0x55c83f301da8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c83f3023d8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c83f301fd8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c83f302058 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c83f302338 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c83f302118 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f3021b8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55c83f302258 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c83f331e88 <col:76, line:407:5>
|     `-ReturnStmt 0x55c83f331e78 <line:406:9, col:65>
|       `-CallExpr 0x55c83f331e38 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f331d48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f331db8 <col:28> 'const char *' lvalue ParmVar 0x55c83f302118 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f331dd8 <col:37> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int'
|         |-DeclRefExpr 0x55c83f331df8 <col:49> 'T' lvalue ParmVar 0x55c83f3021b8 'x' 'T &'
|         `-DeclRefExpr 0x55c83f331e18 <col:52> 'const V' lvalue ParmVar 0x55c83f302258 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c83f302928 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55c83f302448 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c83f3024c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c83f302888 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c83f302588 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f302608 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f3026a8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55c83f302748 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c83f331ff0 <col:85, line:412:5>
|     |-CallExpr 0x55c83f331f70 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f331ea0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c83f331ee0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c83f331ef0 <col:37> 'const char *' lvalue ParmVar 0x55c83f302588 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c83f331f10 <col:46> 'int' lvalue ParmVar 0x55c83f302608 'flags' 'int'
|     | |-DeclRefExpr 0x55c83f331f30 <col:53> 'T' lvalue ParmVar 0x55c83f3026a8 'x' 'T &'
|     | `-DeclRefExpr 0x55c83f331f50 <col:56> 'const V' lvalue ParmVar 0x55c83f302748 'default_value' 'const V &'
|     `-ReturnStmt 0x55c83f331fe0 <line:411:9, col:17>
|       `-UnaryOperator 0x55c83f331fc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f331fb8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f302db8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55c83f3029a0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f302a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f302d18 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f302ad8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f302b50 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f302bf8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55c83f332170 <col:53, line:425:5>
|     `-ReturnStmt 0x55c83f332160 <line:424:9, col:42>
|       `-CallExpr 0x55c83f332120 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f332020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f3320a0 <col:21> 'const char *' lvalue ParmVar 0x55c83f302ad8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f3320c0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c83f3320e0 <col:33> 'P' lvalue ParmVar 0x55c83f302b50 'parser' 'P'
|         `-DeclRefExpr 0x55c83f332100 <col:41> 'T' lvalue ParmVar 0x55c83f302bf8 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f303208 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55c83f302e28 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f302ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f303168 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f302f68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f302fe0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f303088 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c83f3322e8 <col:55, line:429:5>
|     `-ReturnStmt 0x55c83f3322d8 <line:428:9, col:50>
|       `-CallExpr 0x55c83f332298 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f332198 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f332218 <col:21> 'const char *' lvalue ParmVar 0x55c83f302f68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f332238 <col:30> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c83f332258 <col:41> 'P' lvalue ParmVar 0x55c83f302fe0 'parser' 'P'
|         `-DeclRefExpr 0x55c83f332278 <col:49> 'T' lvalue ParmVar 0x55c83f303088 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f303658 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55c83f303278 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f3032f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55c83f3035b8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55c83f3033b8 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c83f303430 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x55c83f3034d8 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x55c83f332460 <col:55, line:433:5>
| |   `-ReturnStmt 0x55c83f332450 <line:432:9, col:51>
| |     `-CallExpr 0x55c83f332410 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c83f332310 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c83f332390 <col:21> 'const char *' lvalue ParmVar 0x55c83f3033b8 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55c83f3323b0 <col:30> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int'
| |       |-DeclRefExpr 0x55c83f3323d0 <col:42> 'P' lvalue ParmVar 0x55c83f303430 'parser' 'P'
| |       `-DeclRefExpr 0x55c83f3323f0 <col:50> 'T' lvalue ParmVar 0x55c83f3034d8 'x' 'T &'
| `-CXXMethodDecl 0x55c83f360fd8 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, IPPortArg, unsigned short &)'
|   |-TemplateArgument type 'IPPortArg'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x55c83f360d40 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x55c83f360de8 <col:39, col:41> col:41 parser 'IPPortArg':'IPPortArg'
|   `-ParmVarDecl 0x55c83f360eb8 <col:49, col:52> col:52 x 'unsigned short &'
|-FunctionTemplateDecl 0x55c83f303aa8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55c83f3036c8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f303748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f303a08 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f303808 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f303880 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f303928 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55c83f332688 <col:56, line:437:5>
|     `-ReturnStmt 0x55c83f332678 <line:436:9, col:63>
|       `-CallExpr 0x55c83f332638 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f332488 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f332508 <col:21> 'const char *' lvalue ParmVar 0x55c83f303808 'keyword' 'const char *'
|         |-BinaryOperator 0x55c83f3325d8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c83f332588 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c83f332568 <col:30> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c83f3325c0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c83f3325a0 <col:42> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c83f3325f8 <col:54> 'P' lvalue ParmVar 0x55c83f303880 'parser' 'P'
|         `-DeclRefExpr 0x55c83f332618 <col:62> 'T' lvalue ParmVar 0x55c83f303928 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f303fd8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55c83f303b18 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f303b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f303f38 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c83f303c58 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f303cd8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f303d50 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f303df8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55c83f3327f0 <col:64, line:442:5>
|     |-CallExpr 0x55c83f332770 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f3326a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c83f3326e0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c83f3326f0 <col:30> 'const char *' lvalue ParmVar 0x55c83f303c58 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c83f332710 <col:39> 'int' lvalue ParmVar 0x55c83f303cd8 'flags' 'int'
|     | |-DeclRefExpr 0x55c83f332730 <col:46> 'P' lvalue ParmVar 0x55c83f303d50 'parser' 'P'
|     | `-DeclRefExpr 0x55c83f332750 <col:54> 'T' lvalue ParmVar 0x55c83f303df8 'x' 'T &'
|     `-ReturnStmt 0x55c83f3327e0 <line:441:9, col:17>
|       `-UnaryOperator 0x55c83f3327c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f3327b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f3045d8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55c83f304050 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f3040c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c83f304148 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c83f304538 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c83f304210 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f304288 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f304328 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55c83f3043f8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c83f332988 <col:84, line:458:5>
|     `-ReturnStmt 0x55c83f332978 <line:457:9, col:64>
|       `-CallExpr 0x55c83f332930 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f332820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f332890 <col:28> 'const char *' lvalue ParmVar 0x55c83f304210 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f3328b0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c83f3328d0 <col:40> 'P' lvalue ParmVar 0x55c83f304288 'parser' 'P'
|         |-DeclRefExpr 0x55c83f3328f0 <col:48> 'T' lvalue ParmVar 0x55c83f304328 'x' 'T &'
|         `-DeclRefExpr 0x55c83f332910 <col:51> 'const V' lvalue ParmVar 0x55c83f3043f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c83f304b58 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c83f304650 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f3046c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c83f304748 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c83f304ab8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c83f304810 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f304888 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f304928 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55c83f3049c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c83f332b18 <col:86, line:462:5>
|     `-ReturnStmt 0x55c83f332b08 <line:461:9, col:73>
|       `-CallExpr 0x55c83f332ac0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f3329b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f332a20 <col:28> 'const char *' lvalue ParmVar 0x55c83f304810 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f332a40 <col:37> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int'
|         |-DeclRefExpr 0x55c83f332a60 <col:49> 'P' lvalue ParmVar 0x55c83f304888 'parser' 'P'
|         |-DeclRefExpr 0x55c83f332a80 <col:57> 'T' lvalue ParmVar 0x55c83f304928 'x' 'T &'
|         `-DeclRefExpr 0x55c83f332aa0 <col:60> 'const V' lvalue ParmVar 0x55c83f3049c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c83f3051b8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55c83f304bd0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f304c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c83f304cc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c83f305118 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c83f304d90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f304e10 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f304e88 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f304f28 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55c83f304fc8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c83f332ca8 <col:95, line:467:5>
|     |-CallExpr 0x55c83f332c20 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f332b30 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c83f332b70 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c83f332b80 <col:37> 'const char *' lvalue ParmVar 0x55c83f304d90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c83f332ba0 <col:46> 'int' lvalue ParmVar 0x55c83f304e10 'flags' 'int'
|     | |-DeclRefExpr 0x55c83f332bc0 <col:53> 'P' lvalue ParmVar 0x55c83f304e88 'parser' 'P'
|     | |-DeclRefExpr 0x55c83f332be0 <col:61> 'T' lvalue ParmVar 0x55c83f304f28 'x' 'T &'
|     | `-DeclRefExpr 0x55c83f332c00 <col:64> 'const V' lvalue ParmVar 0x55c83f304fc8 'default_value' 'const V &'
|     `-ReturnStmt 0x55c83f332c98 <line:466:9, col:17>
|       `-UnaryOperator 0x55c83f332c80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f332c70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f305798 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55c83f305238 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f3052b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c83f305338 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c83f3056f8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c83f305400 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f305478 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f305518 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c83f3055b8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c83f332e50 <col:63, line:481:5>
|     `-ReturnStmt 0x55c83f332e40 <line:480:9, col:47>
|       `-CallExpr 0x55c83f332df8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f332cd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f332d58 <col:21> 'const char *' lvalue ParmVar 0x55c83f305400 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f332d78 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c83f332d98 <col:33> 'P' lvalue ParmVar 0x55c83f305478 'parser' 'P'
|         |-DeclRefExpr 0x55c83f332db8 <col:41> 'T1' lvalue ParmVar 0x55c83f305518 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c83f332dd8 <col:45> 'T2' lvalue ParmVar 0x55c83f3055b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c83f306bb8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55c83f305810 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f305888 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c83f305908 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c83f306b18 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c83f3059d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f305a48 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f305ae8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c83f306a20 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c83f332ff0 <col:65, line:485:5>
|     `-ReturnStmt 0x55c83f332fe0 <line:484:9, col:55>
|       `-CallExpr 0x55c83f332f98 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f332e78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f332ef8 <col:21> 'const char *' lvalue ParmVar 0x55c83f3059d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f332f18 <col:30> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c83f332f38 <col:41> 'P' lvalue ParmVar 0x55c83f305a48 'parser' 'P'
|         |-DeclRefExpr 0x55c83f332f58 <col:49> 'T1' lvalue ParmVar 0x55c83f305ae8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c83f332f78 <col:53> 'T2' lvalue ParmVar 0x55c83f306a20 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c83f307138 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55c83f306c30 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f306ca8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c83f306d28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c83f307098 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c83f306df0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f306e68 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f306f08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c83f306fa8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c83f333190 <col:65, line:489:5>
|     `-ReturnStmt 0x55c83f333180 <line:488:9, col:56>
|       `-CallExpr 0x55c83f333138 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f333018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333098 <col:21> 'const char *' lvalue ParmVar 0x55c83f306df0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f3330b8 <col:30> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int'
|         |-DeclRefExpr 0x55c83f3330d8 <col:42> 'P' lvalue ParmVar 0x55c83f306e68 'parser' 'P'
|         |-DeclRefExpr 0x55c83f3330f8 <col:50> 'T1' lvalue ParmVar 0x55c83f306f08 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c83f333118 <col:54> 'T2' lvalue ParmVar 0x55c83f306fa8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c83f3076b8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55c83f3071b0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f307228 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c83f3072a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c83f307618 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c83f307370 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f3073e8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f307488 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c83f307528 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c83f3333e0 <col:66, line:493:5>
|     `-ReturnStmt 0x55c83f3333d0 <line:492:9, col:68>
|       `-CallExpr 0x55c83f333388 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f3331b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333238 <col:21> 'const char *' lvalue ParmVar 0x55c83f307370 'keyword' 'const char *'
|         |-BinaryOperator 0x55c83f333308 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c83f3332b8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c83f333298 <col:30> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c83f3332f0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c83f3332d0 <col:42> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c83f333328 <col:54> 'P' lvalue ParmVar 0x55c83f3073e8 'parser' 'P'
|         |-DeclRefExpr 0x55c83f333348 <col:62> 'T1' lvalue ParmVar 0x55c83f307488 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c83f333368 <col:66> 'T2' lvalue ParmVar 0x55c83f307528 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c83f307d18 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55c83f307730 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f3077a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c83f307828 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c83f307c78 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c83f3078f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f307970 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f3079e8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f307a88 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c83f307b28 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c83f333570 <col:74, line:498:5>
|     |-CallExpr 0x55c83f3334e8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f3333f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c83f333438 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c83f333448 <col:30> 'const char *' lvalue ParmVar 0x55c83f3078f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c83f333468 <col:39> 'int' lvalue ParmVar 0x55c83f307970 'flags' 'int'
|     | |-DeclRefExpr 0x55c83f333488 <col:46> 'P' lvalue ParmVar 0x55c83f3079e8 'parser' 'P'
|     | |-DeclRefExpr 0x55c83f3334a8 <col:54> 'T1' lvalue ParmVar 0x55c83f307a88 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55c83f3334c8 <col:58> 'T2' lvalue ParmVar 0x55c83f307b28 'x2' 'T2 &'
|     `-ReturnStmt 0x55c83f333560 <line:497:9, col:17>
|       `-UnaryOperator 0x55c83f333548 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f333538 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f308078 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55c83f307d98 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f307fd8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c83f307e50 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f307ec8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55c83f3336b8 <col:52, line:509:5>
|     `-ReturnStmt 0x55c83f3336a8 <line:508:9, col:44>
|       `-CallExpr 0x55c83f333670 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f3335a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333610 <col:26> 'const char *' lvalue ParmVar 0x55c83f307e50 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f333630 <col:35> 'int' 0
|         `-DeclRefExpr 0x55c83f333650 <col:38> 'P' lvalue ParmVar 0x55c83f307ec8 'parser' 'P'
|-FunctionTemplateDecl 0x55c83f308378 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55c83f3080e0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f3082d8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c83f308190 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f308208 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c83f3337f8 <col:54, line:513:5>
|     `-ReturnStmt 0x55c83f3337e8 <line:512:9, col:52>
|       `-CallExpr 0x55c83f3337b0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f3336e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333750 <col:26> 'const char *' lvalue ParmVar 0x55c83f308190 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f333770 <col:35> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c83f333790 <col:46> 'P' lvalue ParmVar 0x55c83f308208 'parser' 'P'
|-FunctionTemplateDecl 0x55c83f308678 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55c83f3083e0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f3085d8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c83f308490 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f308508 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c83f333938 <col:54, line:517:5>
|     `-ReturnStmt 0x55c83f333928 <line:516:9, col:53>
|       `-CallExpr 0x55c83f3338f0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f333820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333890 <col:26> 'const char *' lvalue ParmVar 0x55c83f308490 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f3338b0 <col:35> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int'
|         `-DeclRefExpr 0x55c83f3338d0 <col:47> 'P' lvalue ParmVar 0x55c83f308508 'parser' 'P'
|-FunctionTemplateDecl 0x55c83f308978 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c83f3086e0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f3088d8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c83f308790 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f308808 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55c83f333b28 <col:55, line:521:5>
|     `-ReturnStmt 0x55c83f333b18 <line:520:9, col:65>
|       `-CallExpr 0x55c83f333ae0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f333960 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f3339d0 <col:26> 'const char *' lvalue ParmVar 0x55c83f308790 'keyword' 'const char *'
|         |-BinaryOperator 0x55c83f333aa0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55c83f333a50 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c83f333a30 <col:35> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c83f333a88 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c83f333a68 <col:47> 'const int' lvalue Var 0x55c83f300750 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55c83f333ac0 <col:59> 'P' lvalue ParmVar 0x55c83f308808 'parser' 'P'
|-FunctionTemplateDecl 0x55c83f308d48 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55c83f3089e0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f308ca8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c83f308a90 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f308b10 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f308b88 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55c83f333c68 <col:63, line:526:5>
|     |-CallExpr 0x55c83f333bf0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f333b40 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55c83f333b80 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55c83f333b90 <col:35> 'const char *' lvalue ParmVar 0x55c83f308a90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c83f333bb0 <col:44> 'int' lvalue ParmVar 0x55c83f308b10 'flags' 'int'
|     | `-DeclRefExpr 0x55c83f333bd0 <col:51> 'P' lvalue ParmVar 0x55c83f308b88 'parser' 'P'
|     `-ReturnStmt 0x55c83f333c58 <line:525:9, col:17>
|       `-UnaryOperator 0x55c83f333c40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f333c30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f309198 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55c83f308db8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f308e38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f3090f8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f308ef8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f308f70 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f309018 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55c83f333dc0 <col:58, line:541:5>
|     `-ReturnStmt 0x55c83f333db0 <line:540:9, col:39>
|       `-CallExpr 0x55c83f333d78 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f333c98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333d18 <col:21> 'const char *' lvalue ParmVar 0x55c83f308ef8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f333d38 <col:30> 'P' lvalue ParmVar 0x55c83f308f70 'parser' 'P'
|         `-DeclRefExpr 0x55c83f333d58 <col:38> 'T' lvalue ParmVar 0x55c83f309018 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f3095e8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55c83f309208 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f309288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f309548 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f309348 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f3093c0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f309468 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c83f333ef8 <col:60, line:545:5>
|     `-ReturnStmt 0x55c83f333ee8 <line:544:9, col:41>
|       `-CallExpr 0x55c83f333eb0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f333de8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333e50 <col:23> 'const char *' lvalue ParmVar 0x55c83f309348 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f333e70 <col:32> 'P' lvalue ParmVar 0x55c83f3093c0 'parser' 'P'
|         `-DeclRefExpr 0x55c83f333e90 <col:40> 'T' lvalue ParmVar 0x55c83f309468 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f309a38 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55c83f309658 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f3096d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f309998 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f309798 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f309810 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f3098b8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c83f334030 <col:60, line:549:5>
|     `-ReturnStmt 0x55c83f334020 <line:548:9, col:41>
|       `-CallExpr 0x55c83f333fe8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f333f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f333f88 <col:23> 'const char *' lvalue ParmVar 0x55c83f309798 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f333fa8 <col:32> 'P' lvalue ParmVar 0x55c83f309810 'parser' 'P'
|         `-DeclRefExpr 0x55c83f333fc8 <col:40> 'T' lvalue ParmVar 0x55c83f3098b8 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f309e88 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c83f309aa8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f309b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f309de8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f309be8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f309c60 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f309d08 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55c83f334168 <col:61, line:553:5>
|     `-ReturnStmt 0x55c83f334158 <line:552:9, col:42>
|       `-CallExpr 0x55c83f334120 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f334058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f3340c0 <col:24> 'const char *' lvalue ParmVar 0x55c83f309be8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f3340e0 <col:33> 'P' lvalue ParmVar 0x55c83f309c60 'parser' 'P'
|         `-DeclRefExpr 0x55c83f334100 <col:41> 'T' lvalue ParmVar 0x55c83f309d08 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f30a368 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55c83f309ef8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f309f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f30a2c8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c83f30a038 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30a0b8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30a130 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f30a1d8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55c83f3342e0 <col:69, line:557:5>
|     `-ReturnStmt 0x55c83f3342d0 <line:556:9, col:46>
|       `-CallExpr 0x55c83f334290 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f334190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f334210 <col:21> 'const char *' lvalue ParmVar 0x55c83f30a038 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f334230 <col:30> 'int' lvalue ParmVar 0x55c83f30a0b8 'flags' 'int'
|         |-DeclRefExpr 0x55c83f334250 <col:37> 'P' lvalue ParmVar 0x55c83f30a130 'parser' 'P'
|         `-DeclRefExpr 0x55c83f334270 <col:45> 'T' lvalue ParmVar 0x55c83f30a1d8 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f30a678 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55c83f30a3e0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f30a5d8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c83f30a490 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30a508 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55c83f334420 <col:56, line:571:5>
|     `-ReturnStmt 0x55c83f334410 <line:570:9, col:48>
|       `-CallExpr 0x55c83f3343d8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f334308 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f334378 <col:30> 'const char *' lvalue ParmVar 0x55c83f30a490 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f334398 <col:39> 'int' 0
|         `-DeclRefExpr 0x55c83f3343b8 <col:42> 'P' lvalue ParmVar 0x55c83f30a508 'parser' 'P'
|-FunctionTemplateDecl 0x55c83f30aa08 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55c83f30a6e0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f30a968 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c83f30a790 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30a810 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30a888 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c83f3345f0 <col:67, line:576:5>
|     |-CallExpr 0x55c83f334578 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f334438 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c83f334478 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c83f334488 <col:39> 'const char *' lvalue ParmVar 0x55c83f30a790 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c83f334538 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c83f3344e8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c83f3344a8 <col:48> 'int' lvalue ParmVar 0x55c83f30a810 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c83f334520 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c83f334500 <col:56> 'const int' lvalue Var 0x55c83f300940 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55c83f334558 <col:68> 'P' lvalue ParmVar 0x55c83f30a888 'parser' 'P'
|     `-ReturnStmt 0x55c83f3345e0 <line:575:9, col:17>
|       `-UnaryOperator 0x55c83f3345c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f3345b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f30ae58 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55c83f30aa78 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f30aaf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f30adb8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c83f30abb8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30ac30 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f30acd8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55c83f334760 <col:62, line:592:5>
|     `-ReturnStmt 0x55c83f334750 <line:591:9, col:51>
|       `-CallExpr 0x55c83f334710 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f334620 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f334690 <col:30> 'const char *' lvalue ParmVar 0x55c83f30abb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f3346b0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55c83f3346d0 <col:42> 'P' lvalue ParmVar 0x55c83f30ac30 'parser' 'P'
|         `-DeclRefExpr 0x55c83f3346f0 <col:50> 'T' lvalue ParmVar 0x55c83f30acd8 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f30b338 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55c83f30aec8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f30af48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f30b298 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c83f30b008 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30b088 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30b100 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f30b1a8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55c83f334958 <col:73, line:597:5>
|     |-CallExpr 0x55c83f3348d8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f334778 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c83f3347b8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c83f3347c8 <col:39> 'const char *' lvalue ParmVar 0x55c83f30b008 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c83f334878 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c83f334828 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c83f3347e8 <col:48> 'int' lvalue ParmVar 0x55c83f30b088 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c83f334860 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c83f334840 <col:56> 'const int' lvalue Var 0x55c83f300940 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c83f334898 <col:68> 'P' lvalue ParmVar 0x55c83f30b100 'parser' 'P'
|     | `-DeclRefExpr 0x55c83f3348b8 <col:76> 'T' lvalue ParmVar 0x55c83f30b1a8 'x' 'T &'
|     `-ReturnStmt 0x55c83f334948 <line:596:9, col:17>
|       `-UnaryOperator 0x55c83f334930 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f334920 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f30b8e8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55c83f30b3b0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f30b428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f30b848 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c83f30b4e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30b560 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f30b720 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c83f334ac8 <col:65, line:614:5>
|     `-ReturnStmt 0x55c83f334ab8 <line:613:9, col:46>
|       `-CallExpr 0x55c83f334a78 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f334988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f3349f8 <col:25> 'const char *' lvalue ParmVar 0x55c83f30b4e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f334a18 <col:34> 'int' 0
|         |-DeclRefExpr 0x55c83f334a38 <col:37> 'P' lvalue ParmVar 0x55c83f30b560 'parser' 'P'
|         `-DeclRefExpr 0x55c83f334a58 <col:45> 'Vector<T>' lvalue ParmVar 0x55c83f30b720 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c83f30bd18 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55c83f30b958 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f30bc78 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55c83f30ba10 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30bb60 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c83f334ce0 <col:55, line:618:5>
|     `-ReturnStmt 0x55c83f334cd0 <line:617:9, col:55>
|       `-CallExpr 0x55c83f334c90 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f334af0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f334b60 <col:25> 'const char *' lvalue ParmVar 0x55c83f30ba10 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c83f334b80 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55c83f334c50 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c83f334c70 <col:54> 'Vector<T>' lvalue ParmVar 0x55c83f30bb60 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c83f30c2e8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55c83f30bd80 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f30bdf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f30c248 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c83f30beb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30bf38 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30bfb0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f30c100 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c83f334ed8 <col:76, line:623:5>
|     |-CallExpr 0x55c83f334e58 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c83f334cf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55c83f334d38 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55c83f334d48 <col:34> 'const char *' lvalue ParmVar 0x55c83f30beb8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c83f334df8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c83f334da8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c83f334d68 <col:43> 'int' lvalue ParmVar 0x55c83f30bf38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c83f334de0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c83f334dc0 <col:51> 'const int' lvalue Var 0x55c83f300940 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c83f334e18 <col:63> 'P' lvalue ParmVar 0x55c83f30bfb0 'parser' 'P'
|     | `-DeclRefExpr 0x55c83f334e38 <col:71> 'Vector<T>' lvalue ParmVar 0x55c83f30c100 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55c83f334ec8 <line:622:9, col:17>
|       `-UnaryOperator 0x55c83f334eb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f334ea0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f30c828 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55c83f30c360 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f30c3d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f30c788 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55c83f30c498 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30c518 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30c660 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c83f335140 <col:66, line:627:5>
|     `-ReturnStmt 0x55c83f335130 <line:626:9, col:59>
|       `-CallExpr 0x55c83f3350f0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c83f334f08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c83f334f78 <col:25> 'const char *' lvalue ParmVar 0x55c83f30c498 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c83f334f98 <col:34> 'int' lvalue ParmVar 0x55c83f30c518 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55c83f3350b0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c83f3350d0 <col:58> 'Vector<T>' lvalue ParmVar 0x55c83f30c660 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55c83f30c8b8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55c83f3351c0 <col:25, line:633:5>
|   `-ReturnStmt 0x55c83f3351b0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55c83f335198 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c83f335168 <col:16> 'const bool' lvalue ->_status 0x55c83f319748
|         `-CXXThisExpr 0x55c83f335158 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c83f30ca38 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55c83f30c970 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55c83f3352a8 <col:27, line:639:5>
|   |-BinaryOperator 0x55c83f335250 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c83f3351d8 <col:9> 'bool' lvalue ParmVar 0x55c83f30c970 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c83f335238 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c83f335208 <col:13> 'bool' lvalue ->_status 0x55c83f319748
|   |     `-CXXThisExpr 0x55c83f3351f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c83f335298 <line:638:9, col:17>
|     `-UnaryOperator 0x55c83f335280 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f335270 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c83f30cbb8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c83f30caf8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55c83f335398 <col:39, line:644:5>
|   |-BinaryOperator 0x55c83f335340 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c83f3352c8 <col:9> 'bool' lvalue ParmVar 0x55c83f30caf8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c83f335328 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c83f3352f8 <col:13> 'const bool' lvalue ->_status 0x55c83f319748
|   |     `-CXXThisExpr 0x55c83f3352e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c83f335388 <line:643:9, col:17>
|     `-UnaryOperator 0x55c83f335370 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f335360 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c83f30cc80 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55c83f335440 <col:30, line:651:5>
|   `-ReturnStmt 0x55c83f335430 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55c83f335418 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c83f3353e8 <col:16> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|         `-ImplicitCastExpr 0x55c83f3353c8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55c83f3353b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c83f30cdc8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55c83f30cd38 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55c83f335548 <col:32, line:658:5>
|   |-BinaryOperator 0x55c83f3354f0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c83f335458 <col:9> 'bool' lvalue ParmVar 0x55c83f30cd38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c83f3354d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c83f3354a8 <col:13> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|   |     `-ImplicitCastExpr 0x55c83f335488 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c83f335478 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c83f335538 <line:657:9, col:17>
|     `-UnaryOperator 0x55c83f335520 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f335510 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c83f30cf18 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c83f30ce88 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55c83f335658 <col:44, line:663:5>
|   |-BinaryOperator 0x55c83f335600 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c83f335568 <col:9> 'bool' lvalue ParmVar 0x55c83f30ce88 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c83f3355e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c83f3355b8 <col:13> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|   |     `-ImplicitCastExpr 0x55c83f335598 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c83f335588 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c83f335648 <line:662:9, col:17>
|     `-UnaryOperator 0x55c83f335630 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f335620 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c83f30cfe0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55c83f30d0a8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55c83f30d170 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55c83f30d238 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55c83f30d548 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55c83f30d2d8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f30d4a8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55c83f30d3b8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55c83f335a10 <col:19, line:706:5>
|     `-IfStmt 0x55c83f3359e8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55c83f335758 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55c83f335918 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55c83f3358e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55c83f3358a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55c83f3357b0 <col:42> '<bound member function type>' ->simple_slot 0x55c83f32ec40
|       |     | `-CXXThisExpr 0x55c83f3357a0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55c83f335848 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55c83f335800 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55c83f083e48
|       |     | `-DeclRefExpr 0x55c83f3357e0 <col:55> 'T' lvalue ParmVar 0x55c83f30d3b8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55c83f335888 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55c83f3359d8 <line:705:13, col:34>
|         `-CallExpr 0x55c83f3359b0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55c83f335938 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55c83f335990 <col:33> 'T' lvalue ParmVar 0x55c83f30d3b8 'x' 'T &'
|-FunctionTemplateDecl 0x55c83f30d818 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55c83f30d5a8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f30d778 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55c83f30d688 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55c83f335df0 <col:31, line:717:5>
|     |-DeclStmt 0x55c83f335b50 <line:713:9, col:23>
|     | `-VarDecl 0x55c83f335a38 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55c83f335b28 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c83f335ab0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c83f335b08 <col:21> 'T' lvalue ParmVar 0x55c83f30d688 'x' 'T &'
|     |-IfStmt 0x55c83f335da0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55c83f335c48 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55c83f335d80 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c83f335d20 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c83f335cb0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|     |   | `-DeclRefExpr 0x55c83f335c90 <col:14> 'T *' lvalue Var 0x55c83f335a38 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55c83f335d60 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55c83f335dd8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55c83f335db8 <col:16> 'T *' lvalue Var 0x55c83f335a38 's' 'T *'
|-FunctionTemplateDecl 0x55c83f30dc28 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55c83f30d878 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c83f30d8f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c83f30db88 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55c83f30d9d8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55c83f30da78 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55c83f336100 <col:37, line:726:5>
|     |-IfStmt 0x55c83f336090 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55c83f3360b0 <line:723:13, col:26>
|     | | `-VarDecl 0x55c83f335e58 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55c83f335f48 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55c83f335ed0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55c83f335f28 <col:25> 'T' lvalue ParmVar 0x55c83f30d9d8 'x' 'T &'
|     | |-DeclRefExpr 0x55c83f335f70 <col:16> 'T *' lvalue Var 0x55c83f335e58 's' 'T *'
|     | `-BinaryOperator 0x55c83f336070 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c83f336020 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c83f335fb0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|     |   | `-DeclRefExpr 0x55c83f335f90 <col:14> 'T *' lvalue Var 0x55c83f335e58 's' 'T *'
|     |   `-DeclRefExpr 0x55c83f336050 <col:18> 'const V' lvalue ParmVar 0x55c83f30da78 'value' 'const V &'
|     `-ReturnStmt 0x55c83f3360f0 <line:725:9, col:17>
|       `-UnaryOperator 0x55c83f3360d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c83f3360c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c83f30e028 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55c83f30dc90 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c83f30df88 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55c83f30dd40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30ddc0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30de68 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55c83f336f20 <col:65, line:737:5>
|     |-DeclStmt 0x55c83f336198 <line:732:9, col:26>
|     | `-VarDecl 0x55c83f336130 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c83f336ee8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55c83f336f08 <line:733:13, col:58>
|       | `-VarDecl 0x55c83f3361c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c83f3363a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c83f336370 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c83f336358 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c83f336338 <col:26, col:58> 'String' (CXXTemporary 0x55c83f336338)
|       |           `-CXXMemberCallExpr 0x55c83f3362c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c83f336238 <col:26> '<bound member function type>' ->find 0x55c83f32e258
|       |             | `-CXXThisExpr 0x55c83f336228 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c83f336300 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f336268 <col:31> 'const char *' lvalue ParmVar 0x55c83f30dd40 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c83f336318 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f336288 <col:40> 'int' lvalue ParmVar 0x55c83f30ddc0 'flags' 'int'
|       |             `-DeclRefExpr 0x55c83f3362a8 <col:47> 'Args::Slot *' lvalue Var 0x55c83f336130 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c83f336458 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c83f336440 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c83f336420 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c83f3363f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|       |       `-ImplicitCastExpr 0x55c83f3363d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c83f3363b8 <col:20> 'String' lvalue Var 0x55c83f3361c0 'str' 'String'
|       `-CompoundStmt 0x55c83f336ec8 <col:61, line:736:9>
|         |-DeclStmt 0x55c83f336910 <line:734:13, col:76>
|         | `-VarDecl 0x55c83f3364a8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c83f3368e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c83f336850 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c83f336898 <col:60> 'T' lvalue ParmVar 0x55c83f30de68 'variable' 'T &'
|         |     `-UnaryOperator 0x55c83f3368c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c83f3368b8 <col:71> 'Args *' this
|         `-CallExpr 0x55c83f336e98 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55c83f336938 <col:13> '<bound member function type>' ->postparse 0x55c83f32e468
|           | `-CXXThisExpr 0x55c83f336928 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c83f336e58 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c83f336968 <col:23> 'T *' lvalue Var 0x55c83f3364a8 's' 'T *'
|           | `-CallExpr 0x55c83f336e18 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c83f336bf0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55c83f336cf0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55c83f336d10 <col:86> 'String' lvalue Var 0x55c83f3361c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c83f336dc0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c83f336d50 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|           |   | `-DeclRefExpr 0x55c83f336d30 <col:92> 'T *' lvalue Var 0x55c83f3364a8 's' 'T *'
|           |   `-UnaryOperator 0x55c83f336e00 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c83f336df0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55c83f336e78 <col:103> 'Args::Slot *' lvalue Var 0x55c83f336130 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c83f30e578 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c83f30e098 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c83f30e118 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c83f30e4d8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c83f30e1d8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30e258 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30e2f8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55c83f30e398 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55c83f337dc0 <col:88, line:745:5>
|     |-DeclStmt 0x55c83f336fb8 <line:741:9, col:26>
|     | `-VarDecl 0x55c83f336f50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c83f3371d8 <line:742:9, col:55>
|     | `-VarDecl 0x55c83f336fe0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c83f3371c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c83f337190 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c83f337178 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c83f337158 <col:22, col:54> 'String' (CXXTemporary 0x55c83f337158)
|     |           `-CXXMemberCallExpr 0x55c83f3370e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c83f337058 <col:22> '<bound member function type>' ->find 0x55c83f32e258
|     |             | `-CXXThisExpr 0x55c83f337048 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c83f337120 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c83f337088 <col:27> 'const char *' lvalue ParmVar 0x55c83f30e1d8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c83f337138 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c83f3370a8 <col:36> 'int' lvalue ParmVar 0x55c83f30e258 'flags' 'int'
|     |             `-DeclRefExpr 0x55c83f3370c8 <col:43> 'Args::Slot *' lvalue Var 0x55c83f336f50 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c83f3375b0 <line:743:9, col:72>
|     | `-VarDecl 0x55c83f337228 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c83f337580 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c83f3374f0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c83f337538 <col:56> 'T' lvalue ParmVar 0x55c83f30e2f8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c83f337568 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c83f337558 <col:67> 'Args *' this
|     `-CallExpr 0x55c83f337d90 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55c83f3375d8 <col:9> '<bound member function type>' ->postparse 0x55c83f32e468
|       | `-CXXThisExpr 0x55c83f3375c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c83f337d50 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c83f337608 <col:19> 'T *' lvalue Var 0x55c83f337228 's' 'T *'
|       | `-ParenExpr 0x55c83f337d30 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55c83f337d00 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c83f337ce8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c83f337cd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c83f337cb0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c83f337c80 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|       |     |       `-ImplicitCastExpr 0x55c83f337c68 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c83f337628 <col:25> 'String' lvalue Var 0x55c83f336fe0 'str' 'String'
|       |     |-CallExpr 0x55c83f337ad8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c83f3378b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55c83f3379b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55c83f3379d0 <col:89> 'String' lvalue Var 0x55c83f336fe0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c83f337a80 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c83f337a10 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|       |     | | `-DeclRefExpr 0x55c83f3379f0 <col:95> 'T *' lvalue Var 0x55c83f337228 's' 'T *'
|       |     | `-UnaryOperator 0x55c83f337ac0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c83f337ab0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55c83f337c48 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55c83f337c28 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c83f337bf8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c83f337ba8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c83f337b38 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|       |         | | `-DeclRefExpr 0x55c83f337b18 <col:109> 'T *' lvalue Var 0x55c83f337228 's' 'T *'
|       |         | `-DeclRefExpr 0x55c83f337bd8 <col:113> 'const V' lvalue ParmVar 0x55c83f30e398 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c83f337c18 <col:120> 'bool' true
|       `-DeclRefExpr 0x55c83f337d70 <col:128> 'Args::Slot *' lvalue Var 0x55c83f336f50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c83f315af0 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55c83f30e5f0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f30e668 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f315a50 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c83f30e728 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f30e7a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f30e820 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f30e8c8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55c83f33acc8 <col:75, line:754:5>
|     |-DeclStmt 0x55c83f337e68 <line:749:9, col:26>
|     | `-VarDecl 0x55c83f337e00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c83f33ac90 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55c83f33acb0 <line:750:13, col:58>
|       | `-VarDecl 0x55c83f337e90 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c83f338070 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c83f338040 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c83f338028 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c83f338008 <col:26, col:58> 'String' (CXXTemporary 0x55c83f338008)
|       |           `-CXXMemberCallExpr 0x55c83f337f98 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c83f337f08 <col:26> '<bound member function type>' ->find 0x55c83f32e258
|       |             | `-CXXThisExpr 0x55c83f337ef8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c83f337fd0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f337f38 <col:31> 'const char *' lvalue ParmVar 0x55c83f30e728 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c83f337fe8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f337f58 <col:40> 'int' lvalue ParmVar 0x55c83f30e7a8 'flags' 'int'
|       |             `-DeclRefExpr 0x55c83f337f78 <col:47> 'Args::Slot *' lvalue Var 0x55c83f337e00 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c83f338128 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c83f338110 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c83f3380f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c83f3380c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|       |       `-ImplicitCastExpr 0x55c83f3380a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c83f338088 <col:20> 'String' lvalue Var 0x55c83f337e90 'str' 'String'
|       `-CompoundStmt 0x55c83f33ac70 <col:61, line:753:9>
|         |-DeclStmt 0x55c83f338500 <line:751:13, col:63>
|         | `-VarDecl 0x55c83f338178 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c83f3384d0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c83f338440 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c83f338488 <col:47> 'T' lvalue ParmVar 0x55c83f30e8c8 'variable' 'T &'
|         |     `-UnaryOperator 0x55c83f3384b8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c83f3384a8 <col:58> 'Args *' this
|         `-CallExpr 0x55c83f33ac40 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55c83f338528 <col:13> '<bound member function type>' ->postparse 0x55c83f32e468
|           | `-CXXThisExpr 0x55c83f338518 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c83f33ac00 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c83f338558 <col:23> 'T *' lvalue Var 0x55c83f338178 's' 'T *'
|           | `-CallExpr 0x55c83f33abc0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c83f33aa50 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c83f33aa98 <col:56> 'P' lvalue ParmVar 0x55c83f30e820 'parser' 'P'
|           |   |-DeclRefExpr 0x55c83f33aab8 <col:64> 'String' lvalue Var 0x55c83f337e90 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c83f33ab68 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c83f33aaf8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|           |   | `-DeclRefExpr 0x55c83f33aad8 <col:70> 'T *' lvalue Var 0x55c83f338178 's' 'T *'
|           |   `-UnaryOperator 0x55c83f33aba8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c83f33ab98 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55c83f33ac20 <col:81> 'Args::Slot *' lvalue Var 0x55c83f337e00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c83f316158 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c83f315b68 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c83f315be8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55c83f315c68 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c83f3160b8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c83f315d30 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f315db0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f315e28 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f315ec8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55c83f315f68 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55c83f33ba58 <col:98, line:762:5>
|     |-DeclStmt 0x55c83f33ad60 <line:758:9, col:26>
|     | `-VarDecl 0x55c83f33acf8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c83f33af80 <line:759:9, col:55>
|     | `-VarDecl 0x55c83f33ad88 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c83f33af68 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c83f33af38 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c83f33af20 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c83f33af00 <col:22, col:54> 'String' (CXXTemporary 0x55c83f33af00)
|     |           `-CXXMemberCallExpr 0x55c83f33ae90 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c83f33ae00 <col:22> '<bound member function type>' ->find 0x55c83f32e258
|     |             | `-CXXThisExpr 0x55c83f33adf0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c83f33aec8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c83f33ae30 <col:27> 'const char *' lvalue ParmVar 0x55c83f315d30 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c83f33aee0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c83f33ae50 <col:36> 'int' lvalue ParmVar 0x55c83f315db0 'flags' 'int'
|     |             `-DeclRefExpr 0x55c83f33ae70 <col:43> 'Args::Slot *' lvalue Var 0x55c83f33acf8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c83f33b3a0 <line:760:9, col:59>
|     | `-VarDecl 0x55c83f33afd8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c83f33b370 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c83f33b2e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c83f33b328 <col:43> 'T' lvalue ParmVar 0x55c83f315ec8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c83f33b358 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c83f33b348 <col:54> 'Args *' this
|     `-CallExpr 0x55c83f33ba28 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55c83f33b3c8 <col:9> '<bound member function type>' ->postparse 0x55c83f32e468
|       | `-CXXThisExpr 0x55c83f33b3b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c83f33b9e8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c83f33b3f8 <col:19> 'T *' lvalue Var 0x55c83f33afd8 's' 'T *'
|       | `-ParenExpr 0x55c83f33b9c8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55c83f33b998 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c83f33b980 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c83f33b968 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c83f33b948 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c83f33b918 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|       |     |       `-ImplicitCastExpr 0x55c83f33b900 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c83f33b418 <col:25> 'String' lvalue Var 0x55c83f33ad88 'str' 'String'
|       |     |-CallExpr 0x55c83f33b770 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c83f33b600 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55c83f33b648 <col:59> 'P' lvalue ParmVar 0x55c83f315e28 'parser' 'P'
|       |     | |-DeclRefExpr 0x55c83f33b668 <col:67> 'String' lvalue Var 0x55c83f33ad88 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c83f33b718 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c83f33b6a8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|       |     | | `-DeclRefExpr 0x55c83f33b688 <col:73> 'T *' lvalue Var 0x55c83f33afd8 's' 'T *'
|       |     | `-UnaryOperator 0x55c83f33b758 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c83f33b748 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55c83f33b8e0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55c83f33b8c0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c83f33b890 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c83f33b840 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c83f33b7d0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|       |         | | `-DeclRefExpr 0x55c83f33b7b0 <col:87> 'T *' lvalue Var 0x55c83f33afd8 's' 'T *'
|       |         | `-DeclRefExpr 0x55c83f33b870 <col:91> 'const V' lvalue ParmVar 0x55c83f315f68 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c83f33b8b0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55c83f33ba08 <col:106> 'Args::Slot *' lvalue Var 0x55c83f33acf8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c83f3167c8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55c83f3161d8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f316258 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c83f3162d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c83f316728 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c83f3163a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f316420 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f316498 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f316538 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55c83f3165d8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55c83f33ca38 <col:60, line:773:5>
|     |-DeclStmt 0x55c83f33bb00 <line:767:9, col:26>
|     | `-VarDecl 0x55c83f33ba98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c83f33ca00 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55c83f33ca20 <line:768:13, col:58>
|       | `-VarDecl 0x55c83f33bb28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c83f33bd08 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c83f33bcd8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c83f33bcc0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c83f33bca0 <col:26, col:58> 'String' (CXXTemporary 0x55c83f33bca0)
|       |           `-CXXMemberCallExpr 0x55c83f33bc30 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c83f33bba0 <col:26> '<bound member function type>' ->find 0x55c83f32e258
|       |             | `-CXXThisExpr 0x55c83f33bb90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c83f33bc68 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f33bbd0 <col:31> 'const char *' lvalue ParmVar 0x55c83f3163a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c83f33bc80 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f33bbf0 <col:40> 'int' lvalue ParmVar 0x55c83f316420 'flags' 'int'
|       |             `-DeclRefExpr 0x55c83f33bc10 <col:47> 'Args::Slot *' lvalue Var 0x55c83f33ba98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c83f33bdc0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c83f33bda8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c83f33bd88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c83f33bd58 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|       |       `-ImplicitCastExpr 0x55c83f33bd40 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c83f33bd20 <col:20> 'String' lvalue Var 0x55c83f33bb28 'str' 'String'
|       `-CompoundStmt 0x55c83f33c9d8 <col:61, line:772:9>
|         |-DeclStmt 0x55c83f33c100 <line:769:13, col:66>
|         | `-VarDecl 0x55c83f33be18 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55c83f33c0d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c83f33c040 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c83f33c088 <col:49> 'T1' lvalue ParmVar 0x55c83f316538 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55c83f33c0b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c83f33c0a8 <col:61> 'Args *' this
|         |-DeclStmt 0x55c83f33c470 <line:770:13, col:66>
|         | `-VarDecl 0x55c83f33c188 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55c83f33c440 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c83f33c3b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c83f33c3f8 <col:49> 'T2' lvalue ParmVar 0x55c83f3165d8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55c83f33c428 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c83f33c418 <col:61> 'Args *' this
|         `-CallExpr 0x55c83f33c9a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55c83f33c498 <col:13> '<bound member function type>' ->postparse 0x55c83f32e468
|           | `-CXXThisExpr 0x55c83f33c488 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c83f33c968 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55c83f33c508 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55c83f33c4c8 <col:23> 'T1 *' lvalue Var 0x55c83f33be18 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55c83f33c4e8 <col:29> 'T2 *' lvalue Var 0x55c83f33c188 's2' 'T2 *'
|           | `-CallExpr 0x55c83f33c920 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c83f33c6f0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c83f33c738 <col:63> 'P' lvalue ParmVar 0x55c83f316498 'parser' 'P'
|           |   |-DeclRefExpr 0x55c83f33c758 <col:71> 'String' lvalue Var 0x55c83f33bb28 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c83f33c808 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c83f33c798 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|           |   | `-DeclRefExpr 0x55c83f33c778 <col:77> 'T1 *' lvalue Var 0x55c83f33be18 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55c83f33c8c8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c83f33c858 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|           |   | `-DeclRefExpr 0x55c83f33c838 <col:82> 'T2 *' lvalue Var 0x55c83f33c188 's2' 'T2 *'
|           |   `-UnaryOperator 0x55c83f33c908 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c83f33c8f8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55c83f33c988 <col:94> 'Args::Slot *' lvalue Var 0x55c83f33ba98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c83f316bb8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55c83f316848 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f316b18 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c83f316900 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f316980 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f3169f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c83f33cf50 <col:67, line:780:5>
|     |-DeclStmt 0x55c83f33cad0 <line:777:9, col:26>
|     | `-VarDecl 0x55c83f33ca68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c83f33cf18 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55c83f33cf38 <line:778:13, col:58>
|       | `-VarDecl 0x55c83f33caf8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c83f33ccd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c83f33cca8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c83f33cc90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c83f33cc70 <col:26, col:58> 'String' (CXXTemporary 0x55c83f33cc70)
|       |           `-CXXMemberCallExpr 0x55c83f33cc00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c83f33cb70 <col:26> '<bound member function type>' ->find 0x55c83f32e258
|       |             | `-CXXThisExpr 0x55c83f33cb60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c83f33cc38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f33cba0 <col:31> 'const char *' lvalue ParmVar 0x55c83f316900 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c83f33cc50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c83f33cbc0 <col:40> 'int' lvalue ParmVar 0x55c83f316980 'flags' 'int'
|       |             `-DeclRefExpr 0x55c83f33cbe0 <col:47> 'Args::Slot *' lvalue Var 0x55c83f33ca68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c83f33cd90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c83f33cd78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c83f33cd58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c83f33cd28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|       |       `-ImplicitCastExpr 0x55c83f33cd10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c83f33ccf0 <col:20> 'String' lvalue Var 0x55c83f33caf8 'str' 'String'
|       `-CallExpr 0x55c83f33cee8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55c83f33cdb8 <col:13> '<bound member function type>' ->postparse 0x55c83f32e468
|         | `-CXXThisExpr 0x55c83f33cda8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55c83f33ce98 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55c83f33ce08 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55c83f33cde8 <col:23> 'P' lvalue ParmVar 0x55c83f3169f8 'parser' 'P'
|         | |-DeclRefExpr 0x55c83f33ce50 <col:36> 'String' lvalue Var 0x55c83f33caf8 'str' 'String'
|         | `-UnaryOperator 0x55c83f33ce80 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55c83f33ce70 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55c83f33cec8 <col:49> 'Args::Slot *' lvalue Var 0x55c83f33ca68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c83f316f58 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c83f316c28 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c83f316eb8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c83f316ce0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f316d60 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f316dd8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55c83f33d8c0 <col:71, line:792:5>
|     |-DeclStmt 0x55c83f33cfe8 <line:784:9, col:26>
|     | `-VarDecl 0x55c83f33cf80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c83f33d0b8 <line:785:9, col:29>
|     | `-VarDecl 0x55c83f33d018 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c83f33d0a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c83f33d080 <col:28> 'int' 1
|     |-WhileStmt 0x55c83f33d770 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55c83f33d790 <line:786:16, col:61>
|     | | `-VarDecl 0x55c83f33d0e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c83f33d2c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c83f33d290 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c83f33d278 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c83f33d258 <col:29, col:61> 'String' (CXXTemporary 0x55c83f33d258)
|     | |           `-CXXMemberCallExpr 0x55c83f33d1e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c83f33d158 <col:29> '<bound member function type>' ->find 0x55c83f32e258
|     | |             | `-CXXThisExpr 0x55c83f33d148 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c83f33d220 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c83f33d188 <col:34> 'const char *' lvalue ParmVar 0x55c83f316ce0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c83f33d238 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c83f33d1a8 <col:43> 'int' lvalue ParmVar 0x55c83f316d60 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c83f33d1c8 <col:50> 'Args::Slot *' lvalue Var 0x55c83f33cf80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c83f33d378 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c83f33d360 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c83f33d340 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c83f33d310 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|     | |       `-ImplicitCastExpr 0x55c83f33d2f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c83f33d2d8 <col:23> 'String' lvalue Var 0x55c83f33d0e0 'str' 'String'
|     | `-CompoundStmt 0x55c83f33d748 <col:64, line:790:9>
|     |   |-CallExpr 0x55c83f33d4d0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55c83f33d3a0 <col:13> '<bound member function type>' ->postparse 0x55c83f32e468
|     |   | | `-CXXThisExpr 0x55c83f33d390 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c83f33d480 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c83f33d3f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c83f33d3d0 <col:23> 'P' lvalue ParmVar 0x55c83f316dd8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c83f33d438 <col:36> 'String' lvalue Var 0x55c83f33d0e0 'str' 'String'
|     |   | | `-UnaryOperator 0x55c83f33d468 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c83f33d458 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55c83f33d4b0 <col:49> 'Args::Slot *' lvalue Var 0x55c83f33cf80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c83f33d668 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c83f33d500 <col:13> 'int' lvalue Var 0x55c83f33d018 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c83f33d650 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c83f33d630 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c83f33d598 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c83f33d578 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c83f33d560 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c83f33d520 <col:28> 'int' lvalue Var 0x55c83f33d018 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c83f33d540 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c83f33d618 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c83f33d5e8 <col:49> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|     |   |         `-ImplicitCastExpr 0x55c83f33d5c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c83f33d5b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c83f33d718 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c83f33d688 <col:13> 'int' lvalue ParmVar 0x55c83f316d60 'flags' 'int'
|     |     `-UnaryOperator 0x55c83f33d700 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c83f33d6e8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c83f33d6c8 <col:23> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c83f33d8a0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c83f33d7d8 <col:9> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|       | `-ImplicitCastExpr 0x55c83f33d7b8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c83f33d7a8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c83f33d880 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c83f33d860 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c83f33d848 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c83f33d808 <col:25> 'int' lvalue Var 0x55c83f33d018 'read_status' 'int'
|           `-IntegerLiteral 0x55c83f33d828 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c83f317438 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c83f316fc8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f317048 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f317398 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c83f317108 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f317188 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f317200 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f3172a8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55c83f33e850 <col:84, line:805:5>
|     |-DeclStmt 0x55c83f33d968 <line:796:9, col:26>
|     | `-VarDecl 0x55c83f33d900 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c83f33da38 <line:797:9, col:29>
|     | `-VarDecl 0x55c83f33d998 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c83f33da20 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c83f33da00 <col:28> 'int' 1
|     |-DeclStmt 0x55c83f33dd70 <line:798:9, col:71>
|     | `-VarDecl 0x55c83f33da88 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c83f33dd40 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c83f33dcb0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55c83f33dcf8 <col:55> 'T' lvalue ParmVar 0x55c83f3172a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c83f33dd28 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c83f33dd18 <col:66> 'Args *' this
|     |-WhileStmt 0x55c83f33e700 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55c83f33e720 <line:799:16, col:61>
|     | | `-VarDecl 0x55c83f33dd98 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c83f33df78 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c83f33df48 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c83f33df30 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c83f33df10 <col:29, col:61> 'String' (CXXTemporary 0x55c83f33df10)
|     | |           `-CXXMemberCallExpr 0x55c83f33dea0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c83f33de10 <col:29> '<bound member function type>' ->find 0x55c83f32e258
|     | |             | `-CXXThisExpr 0x55c83f33de00 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c83f33ded8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c83f33de40 <col:34> 'const char *' lvalue ParmVar 0x55c83f317108 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c83f33def0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c83f33de60 <col:43> 'int' lvalue ParmVar 0x55c83f317188 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c83f33de80 <col:50> 'Args::Slot *' lvalue Var 0x55c83f33d900 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c83f33e030 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c83f33e018 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c83f33dff8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c83f33dfc8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|     | |       `-ImplicitCastExpr 0x55c83f33dfb0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c83f33df90 <col:23> 'String' lvalue Var 0x55c83f33dd98 'str' 'String'
|     | `-CompoundStmt 0x55c83f33e6d8 <col:64, line:803:9>
|     |   |-CallExpr 0x55c83f33e460 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55c83f33e058 <col:13> '<bound member function type>' ->postparse 0x55c83f32e468
|     |   | | `-CXXThisExpr 0x55c83f33e048 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55c83f33e420 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55c83f33e088 <col:23> 'T *' lvalue Var 0x55c83f33da88 's' 'T *'
|     |   | | `-CallExpr 0x55c83f33e3e0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55c83f33e270 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55c83f33e2b8 <col:56> 'P' lvalue ParmVar 0x55c83f317200 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55c83f33e2d8 <col:64> 'String' lvalue Var 0x55c83f33dd98 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55c83f33e388 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55c83f33e318 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|     |   | |   | `-DeclRefExpr 0x55c83f33e2f8 <col:70> 'T *' lvalue Var 0x55c83f33da88 's' 'T *'
|     |   | |   `-UnaryOperator 0x55c83f33e3c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55c83f33e3b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55c83f33e440 <col:81> 'Args::Slot *' lvalue Var 0x55c83f33d900 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c83f33e5f8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c83f33e490 <col:13> 'int' lvalue Var 0x55c83f33d998 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c83f33e5e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c83f33e5c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c83f33e528 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c83f33e508 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c83f33e4f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c83f33e4b0 <col:28> 'int' lvalue Var 0x55c83f33d998 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c83f33e4d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c83f33e5a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c83f33e578 <col:49> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|     |   |         `-ImplicitCastExpr 0x55c83f33e558 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c83f33e548 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c83f33e6a8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c83f33e618 <col:13> 'int' lvalue ParmVar 0x55c83f317188 'flags' 'int'
|     |     `-UnaryOperator 0x55c83f33e690 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c83f33e678 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c83f33e658 <col:23> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c83f33e830 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c83f33e768 <col:9> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|       | `-ImplicitCastExpr 0x55c83f33e748 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c83f33e738 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c83f33e810 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c83f33e7f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c83f33e7d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c83f33e798 <col:25> 'int' lvalue Var 0x55c83f33d998 'read_status' 'int'
|           `-IntegerLiteral 0x55c83f33e7b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c83f317a18 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55c83f3174b0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c83f317528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c83f317978 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c83f3175e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c83f317668 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55c83f3176e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55c83f317830 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55c83f33f658 <col:87, line:821:5>
|     |-DeclStmt 0x55c83f33e900 <line:809:9, col:26>
|     | `-VarDecl 0x55c83f33e898 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c83f33e9d0 <line:810:9, col:29>
|     | `-VarDecl 0x55c83f33e930 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c83f33e9b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c83f33e998 <col:28> 'int' 1
|     |-DeclStmt 0x55c83f33ec18 <line:811:9, col:38>
|     | `-VarDecl 0x55c83f33eb00 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55c83f33ebf0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c83f33eb78 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c83f33ebd0 <col:29> 'Vector<T>' lvalue ParmVar 0x55c83f317830 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55c83f33f508 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55c83f33f528 <line:812:16, col:61>
|     | | `-VarDecl 0x55c83f33ec40 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c83f33ee20 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c83f33edf0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c83f33edd8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c83f33edb8 <col:29, col:61> 'String' (CXXTemporary 0x55c83f33edb8)
|     | |           `-CXXMemberCallExpr 0x55c83f33ed48 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c83f33ecb8 <col:29> '<bound member function type>' ->find 0x55c83f32e258
|     | |             | `-CXXThisExpr 0x55c83f33eca8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c83f33ed80 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c83f33ece8 <col:34> 'const char *' lvalue ParmVar 0x55c83f3175e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c83f33ed98 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c83f33ed08 <col:43> 'int' lvalue ParmVar 0x55c83f317668 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c83f33ed28 <col:50> 'Args::Slot *' lvalue Var 0x55c83f33e898 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c83f33eed8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c83f33eec0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c83f33eea0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c83f33ee70 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c83f045d48
|     | |       `-ImplicitCastExpr 0x55c83f33ee58 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c83f33ee38 <col:23> 'String' lvalue Var 0x55c83f33ec40 'str' 'String'
|     | `-CompoundStmt 0x55c83f33f4d0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55c83f33ef98 <line:813:13, col:23>
|     |   | `-VarDecl 0x55c83f33ef00 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55c83f33ef78 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55c83f33f118 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55c83f33efc0 <col:13> '<bound member function type>' ->postparse 0x55c83f32e468
|     |   | | `-CXXThisExpr 0x55c83f33efb0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c83f33f0c0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c83f33f010 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c83f33eff0 <col:23> 'P' lvalue ParmVar 0x55c83f3176e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c83f33f058 <col:36> 'String' lvalue Var 0x55c83f33ec40 'str' 'String'
|     |   | | |-DeclRefExpr 0x55c83f33f078 <col:41> 'T' lvalue Var 0x55c83f33ef00 'sx' 'T'
|     |   | | `-UnaryOperator 0x55c83f33f0a8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c83f33f098 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55c83f33f0f8 <col:53> 'Args::Slot *' lvalue Var 0x55c83f33e898 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55c83f33f270 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55c83f33f1a8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55c83f33f178 <col:17> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|     |   | |   `-ImplicitCastExpr 0x55c83f33f158 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55c83f33f148 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55c83f33f248 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55c83f33f1e0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55c83f33f1c0 <col:17> 'Vector<T> *' lvalue Var 0x55c83f33eb00 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55c83f33f228 <col:30> 'T' lvalue Var 0x55c83f33ef00 'sx' 'T'
|     |   |-BinaryOperator 0x55c83f33f3f0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c83f33f288 <col:13> 'int' lvalue Var 0x55c83f33e930 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c83f33f3d8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c83f33f3b8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c83f33f320 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c83f33f300 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c83f33f2e8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c83f33f2a8 <col:28> 'int' lvalue Var 0x55c83f33e930 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c83f33f2c8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c83f33f3a0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c83f33f370 <col:49> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|     |   |         `-ImplicitCastExpr 0x55c83f33f350 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c83f33f340 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c83f33f4a0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c83f33f410 <col:13> 'int' lvalue ParmVar 0x55c83f317668 'flags' 'int'
|     |     `-UnaryOperator 0x55c83f33f488 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c83f33f470 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c83f33f450 <col:23> 'const int' lvalue Var 0x55c83f300658 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c83f33f638 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c83f33f570 <col:9> 'bool' lvalue ->_read_status 0x55c83f2f90d0
|       | `-ImplicitCastExpr 0x55c83f33f550 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c83f33f540 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c83f33f618 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c83f33f5f8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c83f33f5e0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c83f33f5a0 <col:25> 'int' lvalue Var 0x55c83f33e930 'read_status' 'int'
|           `-IntegerLiteral 0x55c83f33f5c0 <col:40> 'int' 1
|-AccessSpecDecl 0x55c83f317a90 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55c83f317ab8 prev 0x55c83f2fe958 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55c83f317bb0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55c83f317ca0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55c83f33f690 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55c83f317d90 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55c83f33f6a0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55c83f317e90 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55c83f317f40 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55c83f317fe8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c83f317fe8
| | `-ParmVarDecl 0x55c83f3180f8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55c83f3188b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c83f3188b8
|   `-ParmVarDecl 0x55c83f3189c8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55c83f318168 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55c83f3182c8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55c83f3184c0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55c83f318370 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55c83f3183e8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55c83f33f880 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55c83f318778 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55c83f33f6f0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c83f33f6b0 <col:20> 'void *' lvalue ParmVar 0x55c83f318370 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55c83f3187e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55c83f33f778 <col:32, col:45> 'char *' array Function 0x55c83ee69518 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55c83f33f760 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55c83f33f730 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55c83f3183e8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55c83f318840 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55c83f33f840 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c83f33f800 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55c83f3183e8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55c83f33f900 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55c83f3185c0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55c83f317d90 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55c83f33f988 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55c83f33f968 <line:840:13, col:22> 'void' array Function 0x55c83ee69878 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55c83f33f950 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55c83f33f920 <col:22> 'char *' lvalue ->_slot 0x55c83f3187e0
| |         `-CXXThisExpr 0x55c83f33f910 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55c83f3186c0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55c83f317e90 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55c83f33fb78 <col:22, line:844:9>
| |   `-CallExpr 0x55c83f33fae0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55c83f33fac8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55c83f33faa8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55c83ef75638 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55c83f33fb18 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55c83f33f9f8 <col:20> 'void *' lvalue ->_ptr 0x55c83f318778
| |     |   `-CXXThisExpr 0x55c83f33f9e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55c83f33fb48 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55c83f33fb30 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55c83f33fa38 <col:26> 'char *' lvalue ->_slot 0x55c83f3187e0
| |     |     `-CXXThisExpr 0x55c83f33fa28 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55c83f33fb60 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55c83f33fa78 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55c83f318840
| |         `-CXXThisExpr 0x55c83f33fa68 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55c83f318778 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55c83f3187e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55c83f318840 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55c83f318a38 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c83f318a38
| | `-ParmVarDecl 0x55c83f318b48 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55c83f318be8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c83f318be8
|   `-ParmVarDecl 0x55c83f318cf8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55c83f318e98 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55c83f318d68 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55c83f318e08 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55c83f319130 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55c83f319328 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55c83f3191f8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55c83f3194a8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55c83f33fbb0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55c83f33fb90 <col:20> 'T *' lvalue ParmVar 0x55c83f3191f8 'ptr' 'T *'
|   | `-CompoundStmt 0x55c83f33fc00 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55c83f3193f8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55c83f317e90 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55c83f33fdb0 <col:22, line:857:9>
|   |   `-CallExpr 0x55c83f33fd80 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55c83f33fc10 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55c83f02ded8 0x55c83efd8098
|   |     |-CXXOperatorCallExpr 0x55c83f33fd10 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55c83f33fca0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c83f23af48 0x55c83f23ab68 0x55c83f23a798 0x55c83f23a3b8 0x55c83f239fd8 0x55c83f239c08
|   |     | `-MemberExpr 0x55c83f33fc70 <col:29> 'T *' lvalue ->_ptr 0x55c83f3194a8
|   |     |   `-CXXThisExpr 0x55c83f33fc60 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55c83f33fd50 <col:35> 'T' lvalue ->_slot 0x55c83f319508
|   |       `-CXXThisExpr 0x55c83f33fd40 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55c83f3194a8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55c83f319508 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55c83f319570 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55c83f319670 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55c83f3196c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f319650 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55c83f319630 <col:31> 'int' 48
|-FieldDecl 0x55c83f3196e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55c83f319748 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55c83f3197a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55c83f3198e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55c83f32db00 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55c83f32db60 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55c83f32dc10 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55c83f32de38 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55c83f32dd40 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55c83f32df88 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55c83f32def8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55c83f32e258 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55c83f32e048 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55c83f32e0c8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55c83f32e170 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55c83f32e468 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55c83f32e320 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55c83f32e398 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55c83f32e538 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55c83f32e688 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55c83f32e5f0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55c83f32ea18 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55c83f32e748 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55c83f32e7c8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55c83f32e870 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55c83f32e928 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55c83f32ec40 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55c83f32eaf0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55c83f32eb68 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55c83f3307b8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55c83f32ecf0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55c83f330718 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55c83f32edc8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPortArg
         0 |   int ip_p
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f08c810 <../dummy_inc/click/ipaddress.hh:408:1, line:416:1> line:408:7 referenced class IPPortArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83f08c928 <col:1, col:7> col:7 implicit referenced class IPPortArg
|-AccessSpecDecl 0x55c83f08c9b8 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x55c83f08cac8 <line:409:5, line:412:5> line:409:5 used IPPortArg 'void (int)'
| |-ParmVarDecl 0x55c83f08c9f8 <col:15, col:19> col:19 used p 'int'
| |-CXXCtorInitializer Field 0x55c83f08cef8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x55c83f08cfc0 <line:410:9> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55c83f08cf80 <col:9> 'int' lvalue ParmVar 0x55c83f08c9f8 'p' 'int'
| `-CompoundStmt 0x55c83f08d588 <col:12, line:412:5>
|   `-ParenExpr 0x55c83f08d568 <line:411:2, col:175> 'void'
|     `-ConditionalOperator 0x55c83f08d538 <col:3, col:174> 'void'
|       |-CXXStaticCastExpr 0x55c83f08d168 <col:3, col:45> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x55c83f08d138 <col:23, col:42> 'bool' '&&'
|       |   |-BinaryOperator 0x55c83f08d080 <col:23, col:30> 'bool' '>'
|       |   | |-ImplicitCastExpr 0x55c83f08d068 <col:23> 'int' <LValueToRValue>
|       |   | | `-MemberExpr 0x55c83f08d018 <col:23> 'int' lvalue ->ip_p 0x55c83f08cef8
|       |   | |   `-CXXThisExpr 0x55c83f08d008 <col:23> 'IPPortArg *' implicit this
|       |   | `-IntegerLiteral 0x55c83f08d048 <col:30> 'int' 0
|       |   `-BinaryOperator 0x55c83f08d118 <col:35, col:42> 'bool' '<'
|       |     |-ImplicitCastExpr 0x55c83f08d100 <col:35> 'int' <LValueToRValue>
|       |     | `-MemberExpr 0x55c83f08d0b0 <col:35> 'int' lvalue ->ip_p 0x55c83f08cef8
|       |     |   `-CXXThisExpr 0x55c83f08d0a0 <col:35> 'IPPortArg *' implicit this
|       |     `-IntegerLiteral 0x55c83f08d0e0 <col:42> 'int' 256
|       |-CXXFunctionalCastExpr 0x55c83f08d1c8 <col:49, col:56> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x55c83f08d1a8 <col:55> 'int' 0
|       `-CallExpr 0x55c83f08d498 <col:60, col:174> 'void'
|         |-ImplicitCastExpr 0x55c83f08d480 <col:60> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55c83f08d460 <col:60> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x55c83f08d4d8 <col:75> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55c83f08d2b8 <col:75> 'const char [23]' lvalue "ip_p > 0 && ip_p < 256"
|         |-ImplicitCastExpr 0x55c83f08d4f0 <col:101> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55c83f08d328 <col:101> 'const char [32]' lvalue "../dummy_inc/click/ipaddress.hh"
|         |-ImplicitCastExpr 0x55c83f08d508 <col:136> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x55c83f08d360 <col:136> 'int' 411
|         `-ImplicitCastExpr 0x55c83f08d520 <col:141, col:155> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x55c83f08d448 <col:141, col:155> 'const char [26]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x55c83f08d430 <col:155> 'const char [26]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x55c83f08d3f8 <col:155> 'const char [26]' lvalue "IPPortArg::IPPortArg(int)"
|-CXXMethodDecl 0x55c83f08ce28 <line:413:5, line:414:46> line:413:10 parse 'bool (const String &, uint16_t &, const ArgContext &) const'
| |-ParmVarDecl 0x55c83f08cb88 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55c83f08cc58 <col:35, col:45> col:45 result 'uint16_t &'
| `-ParmVarDecl 0x55c83f08ccd0 <line:414:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c83f08cf60 <col:34> 'const ArgContext' lvalue Var 0x55c83f077f30 'blank_args' 'const ArgContext'
|-FieldDecl 0x55c83f08cef8 <line:415:5, col:9> col:9 referenced ip_p 'int'
|-CXXConstructorDecl 0x55c83f3607c8 <line:408:7> col:7 implicit constexpr IPPortArg 'void (const IPPortArg &)' inline default trivial noexcept-unevaluated 0x55c83f3607c8
| `-ParmVarDecl 0x55c83f3608d8 <col:7> col:7 'const IPPortArg &'
|-CXXConstructorDecl 0x55c83f360978 <col:7> col:7 implicit used constexpr IPPortArg 'void (IPPortArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c83f360a88 <col:7> col:7 used 'IPPortArg &&'
| |-CXXCtorInitializer Field 0x55c83f08cef8 'ip_p' 'int'
| | `-ImplicitCastExpr 0x55c83f361270 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c83f361240 <col:7> 'int' xvalue .ip_p 0x55c83f08cef8
| |     `-CXXStaticCastExpr 0x55c83f361210 <col:7> 'IPPortArg' xvalue static_cast<class IPPortArg &&> <NoOp>
| |       `-DeclRefExpr 0x55c83f3611e0 <col:7> 'IPPortArg' lvalue ParmVar 0x55c83f360a88 '' 'IPPortArg &&'
| `-CompoundStmt 0x55c83f3612b8 <col:7>
`-CXXDestructorDecl 0x55c83f360b28 <col:7> col:7 implicit referenced ~IPPortArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPortArg = type { i32 }
  NonVirtualBaseLLVMType:%class.IPPortArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f036c00 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83f036d18 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55c83f036da8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55c83f036e78 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55c83f036f60 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f037178 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c83f037020 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f037328 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c83f037230 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c83f037470 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c83f0373e0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c83f0375b8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c83f037528 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f037700 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c83f037670 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f0377c8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55c83f037910 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55c83f037880 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c83f0379d8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55c83f037b20 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55c83f037a90 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c83f037c98 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c83f037bd8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f037de0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c83f037d50 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f037ea8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55c83f038068 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c83f037f58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c83f037fd0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f0382b8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c83f038128 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c83f0381a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c83f038368 <col:86> "" ""
|-CXXMethodDecl 0x55c83f0385d8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55c83f038448 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55c83f0384c0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f038788 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c83f038698 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c83f038938 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c83f038840 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c83f038c08 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c83f0389f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c83f038a68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c83f038ae0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f038ee8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c83f038cd0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c83f038d48 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c83f038dc0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c83f038fa0 <col:115> "" ""
|-AccessSpecDecl 0x55c83f039010 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55c83f039048 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f039550 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c83f039550
| `-ParmVarDecl 0x55c83f039658 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55c83f0396f8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c83f0396f8
| `-ParmVarDecl 0x55c83f039808 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55c83f06eef8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c83f262280 <col:7>
|-CXXConstructorDecl 0x55c83f06efd0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c83f06efd0
| `-ParmVarDecl 0x55c83f06f0e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55c83f06f158 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c83f06f158
| `-ParmVarDecl 0x55c83f06f268 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55c83f267690 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f250de8 prev 0x55c83f245ab0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83f250ee0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55c83f250fd0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55c83f2510f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55c83f251278 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55c83f2513f8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55c83f251578 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55c83f2623e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c83f262c58 <col:11>
|-CXXDestructorDecl 0x55c83f2624c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c83f2625f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c83f2625f8
| `-ParmVarDecl 0x55c83f262708 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55c83f2627a8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c83f2627a8
| `-ParmVarDecl 0x55c83f2628b8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55c83f268088 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c83f268198 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55c83f268418 <col:11>
|   `-ReturnStmt 0x55c83f268408 <col:11>
|     `-UnaryOperator 0x55c83f2683f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c83f2683e0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55c83f268208 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c83f268208
  `-ParmVarDecl 0x55c83f268318 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f2515e0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83f2516f8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55c83f251798 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55c83f251800 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55c83f251868 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55c83f2518d0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55c83f251930 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55c83f2519f0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55c83f251a50 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55c83f251ab0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55c83f2622f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55c83f251798 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55c83f262c68 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55c83f262cc0 <col:12>
|-CXXConstructorDecl 0x55c83f262928 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c83f262928
| `-ParmVarDecl 0x55c83f262a38 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55c83f262ad8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c83f262ad8
| `-ParmVarDecl 0x55c83f262be8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55c83f267770 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f23f1c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c83f23f2d8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55c83f23f368 <col:16, col:22> col:16 public
|-EnumDecl 0x55c83f23f390 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55c83f23f490 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55c83f23f570 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f23f470 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55c83f23f450 <col:21> 'int' 28
| `-EnumConstantDecl 0x55c83f23f520 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55c83f23f588 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f23f500 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55c83f23f4e0 <col:22> 'int' 64
|-CXXMethodDecl 0x55c83f23f8c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c83f23f5b0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c83f23f630 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55c83f23f6a8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c83f23f720 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c83f23f988 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c83f23fb88 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55c83f23fa00 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55c83f23fa78 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c83f23fc38 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c83f23fd98 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55c83f23fca8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c83f23fe40 <col:72> warn_unused_result ""
|-TypedefDecl 0x55c83f2401a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55c83f240130 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55c83f2400d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55c83f240090 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55c83ed164e0 'void'
|       |-PointerType 0x55c83efbf330 'unsigned char *'
|       | `-BuiltinType 0x55c83ed165e0 'unsigned char'
|       |-TypedefType 0x55c83edbb400 'size_t' sugar
|       | |-Typedef 0x55c83ed86be0 'size_t'
|       | `-BuiltinType 0x55c83ed16640 'unsigned long'
|       `-PointerType 0x55c83ed16ce0 'void *'
|         `-BuiltinType 0x55c83ed164e0 'void'
|-CXXMethodDecl 0x55c83f240618 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55c83f240210 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55c83f240288 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c83f240320 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55c83f2403a0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55c83f25b290 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55c83f25b278 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55c83f25b240 <col:58> 'int' 0
| |-ParmVarDecl 0x55c83f240420 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55c83f25b2b8 <col:76> 'int' 0
| |-ParmVarDecl 0x55c83f2404a0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55c83f25b2d8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55c83f2406e8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55c83f240768 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c83f240828 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55c83f2408c8 <col:20>
| `-OptimizeNoneAttr 0x55c83f240920 <col:30>
|-CXXMethodDecl 0x55c83f240998 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55c83f240a38 <col:20>
| `-OptimizeNoneAttr 0x55c83f240a90 <col:30>
|-CXXMethodDecl 0x55c83f240b08 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55c83f240ba8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55c83f240c58 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55c83f240cf8 <col:20>
| |-OptimizeNoneAttr 0x55c83f240d50 <col:30>
| `-WarnUnusedResultAttr 0x55c83f240d78 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55c83f240dd0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c83f240e70 <col:20>
| `-OptimizeNoneAttr 0x55c83f240ec8 <col:30>
|-CXXMethodDecl 0x55c83f240f18 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c83f240fb8 <col:20>
| `-OptimizeNoneAttr 0x55c83f241010 <col:30>
|-CXXMethodDecl 0x55c83f241058 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55c83f2410f8 <col:20>
| `-OptimizeNoneAttr 0x55c83f241150 <col:30>
|-CXXMethodDecl 0x55c83f241198 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f241258 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f241320 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c83f2413e8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c83f2414a8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f2415c8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55c83f25b3a0 <col:54, line:99:5>
|   `-ReturnStmt 0x55c83f25b390 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55c83f25b378 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55c83f25b348 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c83f251de8
|         `-CXXThisExpr 0x55c83f25b338 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c83f241768 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55c83f241678 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55c83f25b450 <col:67, line:103:5>
|   `-BinaryOperator 0x55c83f25b430 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c83f25b3c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c83f251de8
|     | `-CXXThisExpr 0x55c83f25b3b8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c83f25b418 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f25b3f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55c83f241678 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55c83f241860 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55c83f25b4d0 <col:33, line:107:5>
|   `-ReturnStmt 0x55c83f25b4c0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55c83f25b4a8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55c83f25b478 <col:16> 'void *' lvalue ->_destructor_argument 0x55c83f251e50
|         `-CXXThisExpr 0x55c83f25b468 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c83f241920 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55c83f25bb00 <col:25, line:113:5>
|   |-ParenExpr 0x55c83f25b848 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55c83f25b818 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25b588 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c83f25b560 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55c83f25b528 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55c83f25b4f8 <col:24> '<bound member function type>' ->shared 0x55c83f240998
|   |   |       `-ImplicitCastExpr 0x55c83f25b548 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55c83f25b4e8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c83f25b5e8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25b5c8 <col:42> 'int' 0
|   |   `-CallExpr 0x55c83f25b778 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25b760 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25b740 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25b7b8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25b658 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55c83f25b7d0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25b680 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25b7e8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25b6b8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55c83f25b800 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25b728 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25b710 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25b6d8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55c83f25ba48 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55c83f25b878 <col:2> 'unsigned char *' lvalue ->_head 0x55c83f251bf0
|   | | `-CXXThisExpr 0x55c83f25b868 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55c83f25ba30 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55c83f25ba10 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55c83f25b8b8 <col:10> 'unsigned char *' lvalue ->_data 0x55c83f251c58
|   |     | `-CXXThisExpr 0x55c83f25b8a8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55c83f25b9f8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55c83f25b9d8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55c83f25b8f8 <col:18> 'unsigned char *' lvalue ->_tail 0x55c83f251cc0
|   |         | `-CXXThisExpr 0x55c83f25b8e8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55c83f25b9c0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55c83f25b9a0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55c83f25b938 <col:26> 'unsigned char *' lvalue ->_end 0x55c83f251d28
|   |             | `-CXXThisExpr 0x55c83f25b928 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55c83f25b988 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55c83f25b968 <col:33> 'int' 0
|   `-BinaryOperator 0x55c83f25bae0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c83f25ba78 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c83f251de8
|     | `-CXXThisExpr 0x55c83f25ba68 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c83f25bac8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55c83f25baa8 <col:16> 'int' 0
|-CXXMethodDecl 0x55c83f241a60 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c83f2419d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c83f241b08 <col:20>
| |-OptimizeNoneAttr 0x55c83f241b60 <col:30>
| `-WarnUnusedResultAttr 0x55c83f241b88 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c83f241c58 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c83f241bc8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c83f241d00 <col:20>
| |-OptimizeNoneAttr 0x55c83f241d58 <col:30>
| `-WarnUnusedResultAttr 0x55c83f241d80 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55c83f241eb8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c83f241dc0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c83f241f60 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55c83f242060 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55c83f241fd0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c83f242108 <col:20>
| `-OptimizeNoneAttr 0x55c83f242160 <col:30>
|-CXXMethodDecl 0x55c83f242228 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c83f242198 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c83f2422d0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55c83f2423d0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c83f242340 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c83f242478 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c83f242578 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55c83f2424e8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c83f242620 <col:20>
| `-OptimizeNoneAttr 0x55c83f242678 <col:30>
|-CXXMethodDecl 0x55c83f242808 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55c83f2426b8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55c83f242730 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55c83f25b2f8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55c83f2428b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55c83f242ab8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c83f242930 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55c83f2429a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f242cc8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c83f242b78 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c83f242bf0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f242ed8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55c83f242d88 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55c83f242e08 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55c83f25b308 <col:39> 'int' 0
|-CXXMethodDecl 0x55c83f242fa8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55c83f243070 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c83f243138 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c83f2431f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f2432c0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55c83f243408 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55c83f243378 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55c83f2435d8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c83f2434c8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55c83f243540 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f2436a8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55c83f243768 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55c83f243808 <col:20>
| `-OptimizeNoneAttr 0x55c83f243860 <col:30>
|-CXXMethodDecl 0x55c83f2438b0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c83f243950 <col:20>
| `-OptimizeNoneAttr 0x55c83f2439a8 <col:30>
|-CXXMethodDecl 0x55c83f2439f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c83f243ab8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f243b80 <line:292:5, col:61> col:44 used network_length 'int () const'
| |-NoInlineAttr 0x55c83f243c20 <col:20>
| `-OptimizeNoneAttr 0x55c83f243c78 <col:30>
|-CXXMethodDecl 0x55c83f243dc8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c83f243cb8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55c83f243d30 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f243f18 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55c83f243e88 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f243ff0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55c83f2440b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55c83f244150 <col:20>
| `-OptimizeNoneAttr 0x55c83f2441a8 <col:30>
|-CXXMethodDecl 0x55c83f2441f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c83f244298 <col:20>
| `-OptimizeNoneAttr 0x55c83f2442f0 <col:30>
|-CXXMethodDecl 0x55c83f244340 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c83f244408 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55c83f2444a8 <col:20>
| `-OptimizeNoneAttr 0x55c83f244500 <col:30>
|-CXXMethodDecl 0x55c83f244548 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55c83f244668 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55c83f2447d8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55c83f244718 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55c83f2448c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55c83f244968 <col:20>
| `-OptimizeNoneAttr 0x55c83f2449c0 <col:30>
|-CXXMethodDecl 0x55c83f244a10 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c83f244ad0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c83f244d08 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55c83f244b80 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55c83f244bf8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c83f244db8 <col:20>
| `-OptimizeNoneAttr 0x55c83f244e10 <col:30>
|-CXXMethodDecl 0x55c83f244eb8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55c83f244f58 <col:20>
| `-OptimizeNoneAttr 0x55c83f244fb0 <col:30>
|-CXXMethodDecl 0x55c83f245000 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55c83f2450a0 <col:20>
| `-OptimizeNoneAttr 0x55c83f2450f8 <col:30>
|-CXXMethodDecl 0x55c83f245140 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55c83f2451e0 <col:20>
| `-OptimizeNoneAttr 0x55c83f245238 <col:30>
|-CXXMethodDecl 0x55c83f245338 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55c83f245270 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55c83f2453e0 <col:20>
| `-OptimizeNoneAttr 0x55c83f245438 <col:30>
|-CXXMethodDecl 0x55c83f2455f8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55c83f245470 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55c83f2454e8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c83f2456a8 <col:20>
| `-OptimizeNoneAttr 0x55c83f245700 <col:30>
|-CXXMethodDecl 0x55c83f2457a8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55c83f2458c8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55c83f2459e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55c83f245a88 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55c83f245ab0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55c83f245bd8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55c83f245c78 <col:20>
| `-OptimizeNoneAttr 0x55c83f245cd0 <col:30>
|-CXXMethodDecl 0x55c83f245d78 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55c83f245e18 <col:20>
| `-OptimizeNoneAttr 0x55c83f245e70 <col:30>
|-AccessSpecDecl 0x55c83f245e98 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55c83f245ec0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55c83f245fc0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55c83f246010 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f245fa0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55c83f245f80 <col:14> 'int' 48
|-CXXMethodDecl 0x55c83f246078 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55c83f246118 <col:20>
| `-OptimizeNoneAttr 0x55c83f246170 <col:30>
|-CXXMethodDecl 0x55c83f2461e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55c83f246288 <col:20>
| `-OptimizeNoneAttr 0x55c83f2462e0 <col:30>
|-CXXMethodDecl 0x55c83f2463a8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55c83f246318 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55c83f246548 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55c83f2466e8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55c83f2465f8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55c83f246790 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55c83f246890 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c83f246c40 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f246870 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55c83f246850 <col:9> 'int' 0
| |-EnumConstantDecl 0x55c83f246920 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c83f246c58 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f246900 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55c83f2468e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c83f2469b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c83f246c70 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f246990 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55c83f246970 <col:14> 'int' 2
| |-EnumConstantDecl 0x55c83f246a40 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c83f246c88 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f246a20 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55c83f246a00 <col:14> 'int' 3
| |-EnumConstantDecl 0x55c83f246ad0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c83f246ca0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f246ab0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55c83f246a90 <col:13> 'int' 4
| |-EnumConstantDecl 0x55c83f246b60 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c83f246cb8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f246b40 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55c83f246b20 <col:13> 'int' 5
| `-EnumConstantDecl 0x55c83f246bf0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55c83f246cd0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f246bd0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55c83f246bb0 <col:14> 'int' 6
|-CXXMethodDecl 0x55c83f246d38 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55c83f246dd8 <col:20>
| `-OptimizeNoneAttr 0x55c83f246e30 <col:30>
|-CXXMethodDecl 0x55c83f246f28 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55c83f246e68 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55c83f246fd0 <col:20>
| `-OptimizeNoneAttr 0x55c83f247028 <col:30>
|-CXXMethodDecl 0x55c83f247098 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55c83f2471c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55c83f247338 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55c83f247270 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55c83f247400 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55c83f2474c8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55c83f247608 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55c83f247578 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55c83f2476b0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55c83f2477b0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c83f2479b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f247790 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55c83f247770 <col:23> 'int' 0
| |-EnumConstantDecl 0x55c83f247840 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c83f2479c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f247820 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55c83f247800 <col:45> 'int' 4
| |-EnumConstantDecl 0x55c83f2478d0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c83f2479e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f2478b0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55c83f247890 <col:24> 'int' 0
| `-EnumConstantDecl 0x55c83f247960 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55c83f2479f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f247940 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55c83f247920 <col:47> 'int' 16
|-CXXMethodDecl 0x55c83f247a58 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55c83f247bc8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55c83f247b08 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55c83f247c70 <col:20>
| `-OptimizeNoneAttr 0x55c83f247cc8 <col:30>
|-CXXMethodDecl 0x55c83f247d18 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55c83f25bc20 <col:18, col:36>
|   `-ReturnStmt 0x55c83f25bc10 <col:20, col:33>
|     `-ImplicitCastExpr 0x55c83f25bbf8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c83f25bbd8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55c83f25bba8 <col:27> '<bound member function type>' ->xanno 0x55c83f245d78
|           `-CXXThisExpr 0x55c83f25bb98 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55c83f247e10 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55c83f25bd30 <col:30, col:48>
|   `-ReturnStmt 0x55c83f25bd20 <col:32, col:45>
|     `-ImplicitCastExpr 0x55c83f25bd08 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c83f25bce8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55c83f25bcb8 <col:39> '<bound member function type>' ->xanno 0x55c83f245bd8
|           `-CXXThisExpr 0x55c83f25bca8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c83f247ef8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55c83f25bec8 <col:24, col:50>
|   `-ReturnStmt 0x55c83f25beb8 <col:26, col:47>
|     `-UnaryOperator 0x55c83f25bea0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c83f25be80 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c83f25be68 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c83f25be18 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55c83f2510f8
|         |   `-CXXMemberCallExpr 0x55c83f25bdf8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c83f25bdc8 <col:34> '<bound member function type>' ->xanno 0x55c83f245d78
|         |       `-CXXThisExpr 0x55c83f25bdb8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c83f25be48 <col:46> 'int' 0
|-CXXMethodDecl 0x55c83f248000 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55c83f25c098 <col:36, col:62>
|   `-ReturnStmt 0x55c83f25c088 <col:38, col:59>
|     `-UnaryOperator 0x55c83f25c070 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c83f25c050 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c83f25c038 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c83f25bfb0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55c83f2510f8
|         |   `-CXXMemberCallExpr 0x55c83f25bf90 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c83f25bf60 <col:46> '<bound member function type>' ->xanno 0x55c83f245bd8
|         |       `-CXXThisExpr 0x55c83f25bf50 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c83f25bfe0 <col:58> 'int' 0
|-CXXMethodDecl 0x55c83f248118 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55c83f25c230 <col:26, col:53>
|   `-ReturnStmt 0x55c83f25c220 <col:28, col:50>
|     `-UnaryOperator 0x55c83f25c208 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c83f25c1e8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c83f25c1d0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c83f25c180 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55c83f2513f8
|         |   `-CXXMemberCallExpr 0x55c83f25c160 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c83f25c130 <col:36> '<bound member function type>' ->xanno 0x55c83f245d78
|         |       `-CXXThisExpr 0x55c83f25c120 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c83f25c1b0 <col:49> 'int' 0
|-CXXMethodDecl 0x55c83f248238 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55c83f25c408 <col:38, col:65>
|   `-ReturnStmt 0x55c83f25c3f8 <col:40, col:62>
|     `-UnaryOperator 0x55c83f25c3e0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c83f25c3c0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c83f25c3a8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c83f25c318 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55c83f2513f8
|         |   `-CXXMemberCallExpr 0x55c83f25c2f8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c83f25c2c8 <col:48> '<bound member function type>' ->xanno 0x55c83f245bd8
|         |       `-CXXThisExpr 0x55c83f25c2b8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c83f25c348 <col:61> 'int' 0
|-CXXMethodDecl 0x55c83f2483e8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55c83f2482f0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55c83f25cad8 <col:34, line:463:5>
|   |-ParenExpr 0x55c83f25c920 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c83f25c8f0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25c558 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25c528 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25c478 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25c460 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25c420 <col:23> 'int' lvalue ParmVar 0x55c83f2482f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25c440 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25c508 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25c4d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25c498 <col:33> 'int' lvalue ParmVar 0x55c83f2482f0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c83f25c4f0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c83f25c4b8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c83f25c5b8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25c598 <col:56> 'int' 0
|   |   `-CallExpr 0x55c83f25c850 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25c838 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25c818 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25c890 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25c6a8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c83f25c8a8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25c6d8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25c8c0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25c710 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55c83f25c8d8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25c800 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25c7e8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25c7a8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55c83f25cac8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55c83f25cab0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55c83f25ca90 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c83f25ca60 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c83f25ca10 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55c83f2510f8
|         |   `-CXXMemberCallExpr 0x55c83f25c9f0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c83f25c9c0 <col:9> '<bound member function type>' ->xanno 0x55c83f245bd8
|         |       `-CXXThisExpr 0x55c83f25c9b0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55c83f25ca78 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55c83f25ca40 <col:21> 'int' lvalue ParmVar 0x55c83f2482f0 'i' 'int'
|-CXXMethodDecl 0x55c83f248638 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55c83f2484a8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55c83f248520 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55c83f25d168 <col:40, line:472:5>
|   |-ParenExpr 0x55c83f25cf80 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c83f25cf50 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25cc30 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25cc00 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25cb50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25cb38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25caf8 <col:23> 'int' lvalue ParmVar 0x55c83f2484a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25cb18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25cbe0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25cbb0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25cb70 <col:33> 'int' lvalue ParmVar 0x55c83f2484a8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c83f25cbc8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c83f25cb90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c83f25cc90 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25cc70 <col:56> 'int' 0
|   |   `-CallExpr 0x55c83f25ceb0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25ce98 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25ce78 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25cef0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25cd00 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c83f25cf08 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25cd30 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25cf20 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25cd68 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55c83f25cf38 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25ce60 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25ce48 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25ce08 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55c83f25d148 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55c83f25d0f0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55c83f25d0c0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55c83f25d070 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55c83f2510f8
|     | |   `-CXXMemberCallExpr 0x55c83f25d050 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55c83f25d020 <col:2> '<bound member function type>' ->xanno 0x55c83f245d78
|     | |       `-CXXThisExpr 0x55c83f25d010 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55c83f25d0d8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c83f25d0a0 <col:14> 'int' lvalue ParmVar 0x55c83f2484a8 'i' 'int'
|     `-ImplicitCastExpr 0x55c83f25d130 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f25d110 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55c83f248520 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55c83f2487f8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55c83f248700 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c83f25d8e8 <col:36, line:485:5>
|   |-ParenExpr 0x55c83f25d650 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f25d620 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25d300 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25d2d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25d1e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25d1c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25d188 <col:23> 'int' lvalue ParmVar 0x55c83f248700 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25d1a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25d2b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25d298 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25d200 <col:33> 'int' lvalue ParmVar 0x55c83f248700 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f25d278 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f25d260 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f25d220 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f25d240 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c83f25d360 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25d340 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f25d580 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25d568 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25d548 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25d5c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25d3d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c83f25d5d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25d408 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25d5f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25d440 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55c83f25d608 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25d530 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25d518 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25d4d8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55c83f25d8d8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55c83f25d8c0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55c83f25d8a8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c83f25d878 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55c83f25d818 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c83f25d7e8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c83f25d760 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c83f250fd0
|             |   `-CXXMemberCallExpr 0x55c83f25d740 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c83f25d710 <col:61> '<bound member function type>' ->xanno 0x55c83f245bd8
|             |       `-CXXThisExpr 0x55c83f25d700 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c83f25d800 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c83f25d790 <col:74> 'int' lvalue ParmVar 0x55c83f248700 'i' 'int'
|-CXXMethodDecl 0x55c83f248a48 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55c83f2488b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c83f248930 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55c83f25e038 <col:42, line:500:5>
|   |-ParenExpr 0x55c83f25ddd0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f25dda0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25da80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25da50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25d960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25d948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25d908 <col:23> 'int' lvalue ParmVar 0x55c83f2488b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25d928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25da30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25da18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25d980 <col:33> 'int' lvalue ParmVar 0x55c83f2488b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f25d9f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f25d9e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f25d9a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f25d9c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c83f25dae0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25dac0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f25dd00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25dce8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25dcc8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25dd40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25db50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c83f25dd58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25db88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25dd70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25dbc0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55c83f25dd88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25dcb0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25dc98 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25dc58 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55c83f25e018 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55c83f25dfc8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c83f25df98 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c83f25df40 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c83f25df10 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c83f25dec0 <col:48, col:57> 'char [48]' lvalue ->c 0x55c83f250fd0
|     |     |   `-CXXMemberCallExpr 0x55c83f25dea0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c83f25de70 <col:48> '<bound member function type>' ->xanno 0x55c83f245d78
|     |     |       `-CXXThisExpr 0x55c83f25de60 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c83f25df28 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c83f25def0 <col:61> 'int' lvalue ParmVar 0x55c83f2488b8 'i' 'int'
|     `-ImplicitCastExpr 0x55c83f25e000 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f25dfe0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55c83f248930 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55c83f248c08 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55c83f248b10 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c83f25e798 <col:35, line:513:5>
|   |-ParenExpr 0x55c83f25e4a8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f25e478 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25e1d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25e1a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25e0b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25e098 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25e058 <col:23> 'int' lvalue ParmVar 0x55c83f248b10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25e078 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25e180 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25e168 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25e0d0 <col:33> 'int' lvalue ParmVar 0x55c83f248b10 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f25e148 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f25e130 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f25e0f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f25e110 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c83f25e230 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25e210 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f25e3d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25e3c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25e3a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25e418 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25e2a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c83f25e430 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25e2d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25e448 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25e310 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55c83f25e460 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25e388 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25e370 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25e330 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55c83f25e788 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55c83f25e770 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55c83f25e758 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c83f25e728 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55c83f25e6a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c83f25e670 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c83f25e620 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c83f250fd0
|             |   `-CXXMemberCallExpr 0x55c83f25e600 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c83f25e5d0 <col:60> '<bound member function type>' ->xanno 0x55c83f245bd8
|             |       `-CXXThisExpr 0x55c83f25e5c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c83f25e688 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c83f25e650 <col:73> 'int' lvalue ParmVar 0x55c83f248b10 'i' 'int'
|-CXXMethodDecl 0x55c83f248e58 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55c83f248cc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c83f248d40 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55c83f25eeb8 <col:41, line:528:5>
|   |-ParenExpr 0x55c83f25ec40 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f25ec10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25e930 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25e900 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25e810 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25e7f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25e7b8 <col:23> 'int' lvalue ParmVar 0x55c83f248cc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25e7d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25e8e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25e8c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25e830 <col:33> 'int' lvalue ParmVar 0x55c83f248cc8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f25e8a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f25e890 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f25e850 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f25e870 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c83f25e990 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25e970 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f25eb70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25eb58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25eb38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25ebb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25ea00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c83f25ebc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25ea38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25ebe0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25ea70 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55c83f25ebf8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25eb20 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25eb08 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25eac8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55c83f25ee98 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55c83f25ee48 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c83f25ee18 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c83f25edc0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c83f25ed80 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c83f25ed30 <col:47, col:56> 'char [48]' lvalue ->c 0x55c83f250fd0
|     |     |   `-CXXMemberCallExpr 0x55c83f25ed10 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c83f25ece0 <col:47> '<bound member function type>' ->xanno 0x55c83f245d78
|     |     |       `-CXXThisExpr 0x55c83f25ecd0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c83f25ed98 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c83f25ed60 <col:60> 'int' lvalue ParmVar 0x55c83f248cc8 'i' 'int'
|     `-ImplicitCastExpr 0x55c83f25ee80 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f25ee60 <col:65> 'int16_t':'short' lvalue ParmVar 0x55c83f248d40 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55c83f249018 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55c83f248f20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c83f25f588 <col:36, line:541:5>
|   |-ParenExpr 0x55c83f25f328 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f25f2f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25f050 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25f020 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25ef30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25ef18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25eed8 <col:23> 'int' lvalue ParmVar 0x55c83f248f20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25eef8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25f000 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25efe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25ef50 <col:33> 'int' lvalue ParmVar 0x55c83f248f20 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f25efc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f25efb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f25ef70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f25ef90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c83f25f0b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25f090 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f25f258 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25f240 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25f220 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25f298 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25f120 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c83f25f2b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25f158 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25f2c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25f190 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55c83f25f2e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25f208 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25f1f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25f1b0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55c83f25f578 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55c83f25f560 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55c83f25f548 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c83f25f518 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55c83f25f4c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c83f25f490 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c83f25f440 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c83f250fd0
|             |   `-CXXMemberCallExpr 0x55c83f25f420 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c83f25f3f0 <col:61> '<bound member function type>' ->xanno 0x55c83f245bd8
|             |       `-CXXThisExpr 0x55c83f25f3e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c83f25f4a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c83f25f470 <col:74> 'int' lvalue ParmVar 0x55c83f248f20 'i' 'int'
|-CXXMethodDecl 0x55c83f2491e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55c83f2490d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55c83f249150 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c83f249298 <col:20>
| `-OptimizeNoneAttr 0x55c83f2492f0 <col:30>
|-CXXMethodDecl 0x55c83f249428 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55c83f249330 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c83f25fc58 <col:35, line:562:5>
|   |-ParenExpr 0x55c83f25f9f8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f25f9c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25f720 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25f6f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25f600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25f5e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25f5a8 <col:23> 'int' lvalue ParmVar 0x55c83f249330 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25f5c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25f6d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25f6b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25f620 <col:33> 'int' lvalue ParmVar 0x55c83f249330 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f25f698 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f25f680 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f25f640 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f25f660 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c83f25f780 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25f760 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f25f928 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25f910 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25f8f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f25f968 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25f7f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c83f25f980 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25f828 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f25f998 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25f860 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55c83f25f9b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25f8d8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25f8c0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25f880 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55c83f25fc48 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55c83f25fc30 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55c83f25fc18 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c83f25fbe8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55c83f25fb90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c83f25fb60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c83f25fb10 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c83f250fd0
|             |   `-CXXMemberCallExpr 0x55c83f25faf0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c83f25fac0 <col:60> '<bound member function type>' ->xanno 0x55c83f245bd8
|             |       `-CXXThisExpr 0x55c83f25fab0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c83f25fb78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c83f25fb40 <col:73> 'int' lvalue ParmVar 0x55c83f249330 'i' 'int'
|-CXXMethodDecl 0x55c83f249638 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55c83f2494e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c83f249560 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55c83f260338 <col:41, line:577:5>
|   |-ParenExpr 0x55c83f2600c8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f260098 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f25fdf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f25fdc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f25fcd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f25fcb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f25fc78 <col:23> 'int' lvalue ParmVar 0x55c83f2494e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f25fc98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f25fda0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f25fd88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f25fcf0 <col:33> 'int' lvalue ParmVar 0x55c83f2494e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f25fd68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f25fd50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f25fd10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f25fd30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c83f25fe50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f25fe30 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f25fff8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f25ffe0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f25ffc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f260038 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25fec0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c83f260050 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f25fef8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f260068 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f25ff30 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55c83f260080 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f25ffa8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f25ff90 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f25ff50 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55c83f260318 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55c83f2602c8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c83f260298 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55c83f260238 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c83f260208 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c83f2601b8 <col:47, col:56> 'char [48]' lvalue ->c 0x55c83f250fd0
|     |     |   `-CXXMemberCallExpr 0x55c83f260198 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c83f260168 <col:47> '<bound member function type>' ->xanno 0x55c83f245d78
|     |     |       `-CXXThisExpr 0x55c83f260158 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c83f260220 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c83f2601e8 <col:60> 'int' lvalue ParmVar 0x55c83f2494e8 'i' 'int'
|     `-ImplicitCastExpr 0x55c83f260300 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f2602e0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55c83f249560 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55c83f2497f8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55c83f249700 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c83f260a68 <col:36, line:591:5>
|   |-ParenExpr 0x55c83f2607a8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f260778 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f2604d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f2604a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f2603b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f260398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f260358 <col:23> 'int' lvalue ParmVar 0x55c83f249700 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f260378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f260480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f260468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f2603d0 <col:33> 'int' lvalue ParmVar 0x55c83f249700 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f260448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f260430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f2603f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f260410 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c83f260530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f260510 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f2606d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f2606c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f2606a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f260718 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f2605a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c83f260730 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f2605d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f260748 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f260610 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55c83f260760 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f260688 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f260670 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f260630 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55c83f260a58 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55c83f260a40 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55c83f260a28 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c83f2609f8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55c83f260970 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c83f260940 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c83f2608f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c83f250fd0
|             |   `-CXXMemberCallExpr 0x55c83f2608d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c83f2608a0 <col:61> '<bound member function type>' ->xanno 0x55c83f245bd8
|             |       `-CXXThisExpr 0x55c83f260890 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c83f260958 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c83f260920 <col:74> 'int' lvalue ParmVar 0x55c83f249700 'i' 'int'
|-CXXMethodDecl 0x55c83f249a48 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55c83f2498b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c83f249930 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55c83f261148 <col:42, line:606:5>
|   |-ParenExpr 0x55c83f260ed8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c83f260ea8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f260c00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f260bd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f260ae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f260ac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f260a88 <col:23> 'int' lvalue ParmVar 0x55c83f2498b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f260aa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f260bb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c83f260b98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f260b00 <col:33> 'int' lvalue ParmVar 0x55c83f2498b8 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f260b78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f260b60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f260b20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c83f260b40 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c83f260c60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f260c40 <col:60> 'int' 0
|   |   `-CallExpr 0x55c83f260e08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c83f260df0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f260dd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f260e48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f260cd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c83f260e60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f260d08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f260e78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f260d40 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55c83f260e90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f260db8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f260da0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f260d60 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55c83f261128 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55c83f2610d8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c83f2610a8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55c83f261048 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c83f261018 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c83f260fc8 <col:48, col:57> 'char [48]' lvalue ->c 0x55c83f250fd0
|     |     |   `-CXXMemberCallExpr 0x55c83f260fa8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c83f260f78 <col:48> '<bound member function type>' ->xanno 0x55c83f245d78
|     |     |       `-CXXThisExpr 0x55c83f260f68 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c83f261030 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c83f260ff8 <col:61> 'int' lvalue ParmVar 0x55c83f2498b8 'i' 'int'
|     `-ImplicitCastExpr 0x55c83f261110 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55c83f2610f0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55c83f249930 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55c83f249be0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55c83f249b10 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55c83f2619b8 <col:33, line:620:5>
|   |-ParenExpr 0x55c83f261730 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c83f261700 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f261350 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f261320 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f2611c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f2611a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f261168 <col:23> 'int' lvalue ParmVar 0x55c83f249b10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f261188 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f261300 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c83f2612e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f2611e0 <col:33> 'int' lvalue ParmVar 0x55c83f249b10 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f2612c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f2612b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f261200 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c83f261288 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c83f261270 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c83f261238 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c83f2613b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f261390 <col:79> 'int' 0
|   |   `-CallExpr 0x55c83f261660 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c83f261648 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f261628 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f2616a0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f261498 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c83f2616b8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f2614e0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f2616d0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f261518 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55c83f2616e8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f261610 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f2615f8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f2615b8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55c83f2619a8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55c83f261990 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55c83f261978 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c83f261948 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55c83f2618c0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c83f261890 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c83f261840 <col:67, col:76> 'char const[48]' lvalue ->c 0x55c83f250fd0
|             |   `-CXXMemberCallExpr 0x55c83f261820 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c83f2617f0 <col:67> '<bound member function type>' ->xanno 0x55c83f245bd8
|             |       `-CXXThisExpr 0x55c83f2617e0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c83f2618a8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c83f261870 <col:80> 'int' lvalue ParmVar 0x55c83f249b10 'i' 'int'
|-CXXMethodDecl 0x55c83f249df8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55c83f249ca0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c83f249d20 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55c83f2621e0 <col:45, line:635:5>
|   |-ParenExpr 0x55c83f261f28 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c83f261ef8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c83f261bc0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c83f261b90 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c83f261a30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c83f261a18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c83f2619d8 <col:23> 'int' lvalue ParmVar 0x55c83f249ca0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c83f2619f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c83f261b70 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c83f261b58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c83f261a50 <col:33> 'int' lvalue ParmVar 0x55c83f249ca0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c83f261b38 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c83f261b20 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c83f261a70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c83f245fc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c83f261af8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c83f261ae0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c83f261aa8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c83f261c20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c83f261c00 <col:79> 'int' 0
|   |   `-CallExpr 0x55c83f261e58 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c83f261e40 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c83f261e20 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c83edb2160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c83f261e98 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f261c90 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c83f261eb0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c83f261cd8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c83f261ec8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c83f261d10 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55c83f261ee0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c83f261e08 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c83f261df0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c83f261da8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55c83f2621c0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55c83f262128 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c83f2620f8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55c83f262098 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c83f262068 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c83f262018 <col:54, col:63> 'char [48]' lvalue ->c 0x55c83f250fd0
|     |     |   `-CXXMemberCallExpr 0x55c83f261ff8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c83f261fc8 <col:54> '<bound member function type>' ->xanno 0x55c83f245d78
|     |     |       `-CXXThisExpr 0x55c83f261fb8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c83f262080 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c83f262048 <col:67> 'int' lvalue ParmVar 0x55c83f249ca0 'i' 'int'
|     `-CXXConstCastExpr 0x55c83f262190 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55c83f262178 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55c83f262140 <col:91> 'const void *' lvalue ParmVar 0x55c83f249d20 'x' 'const void *'
|-CXXMethodDecl 0x55c83f249ec8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55c83f262268 <col:34, line:640:5>
|   `-ReturnStmt 0x55c83f262258 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55c83f262240 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55c83f262210 <col:16> 'Packet *' lvalue ->_data_packet 0x55c83f251b88
|         `-CXXThisExpr 0x55c83f262200 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c83f24a008 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55c83f249f78 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c83f25b328 <col:46> 'bool' true
|-CXXMethodDecl 0x55c83f24a188 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55c83f24a0c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55c83f24a230 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55c83f24a9e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55c83f24a330 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aa50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a310 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55c83f24a2f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c83f23f490 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c83f24a3c0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aa68 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a3a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55c83f24a380 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c83f23f520 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c83f24a450 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aa80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a430 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c83f24a410 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c83f24a4e0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aa98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a4c0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55c83f24a4a0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55c83f24a570 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aab0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a550 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55c83f24a530 <col:21> 'int' 16
| |-EnumConstantDecl 0x55c83f24a600 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aac8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a5e0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c83f24a5c0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c83f24a690 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aae0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a670 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55c83f24a650 <col:19> 'int' EnumConstant 0x55c83f24a4e0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c83f24a720 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24aaf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a700 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55c83f24a6e0 <col:19> 'int' EnumConstant 0x55c83f24a600 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c83f24a7f0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24ab10 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a7d0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55c83f24a7b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c83f24a770 <col:23> 'int' EnumConstant 0x55c83f24a720 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c83f24a790 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c83f24a8c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c83f24ab28 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c83f24a8a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55c83f24a880 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c83f24a840 <col:23> 'int' EnumConstant 0x55c83f24a720 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c83f24a860 <col:40> 'int' 4
| `-EnumConstantDecl 0x55c83f24a990 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55c83f24ab40 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c83f24a970 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55c83f24a950 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55c83f24a910 <col:23> 'int' EnumConstant 0x55c83f24a720 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55c83f24a930 <col:40> 'int' 8
|-CXXMethodDecl 0x55c83f24ab80 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55c83f24ac20 <col:68> "" ""
|-CXXMethodDecl 0x55c83f24acb8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55c83f24ad58 <col:45> "" ""
|-CXXMethodDecl 0x55c83f24adf0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c83f24ae90 <col:57> "" ""
|-CXXMethodDecl 0x55c83f24af28 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55c83f24afc8 <col:45> "" ""
|-CXXMethodDecl 0x55c83f24b060 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c83f24b100 <col:57> "" ""
|-CXXMethodDecl 0x55c83f24b190 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c83f24b230 <col:51> "" ""
|-CXXMethodDecl 0x55c83f24b2c0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c83f24b360 <col:63> "" ""
|-CXXMethodDecl 0x55c83f24b3f0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c83f24b490 <col:53> "" ""
|-CXXMethodDecl 0x55c83f24b520 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c83f24b5c0 <col:65> "" ""
|-CXXMethodDecl 0x55c83f24b6d8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c83f24b648 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55c83f24b780 <col:61> "" ""
|-CXXMethodDecl 0x55c83f24b918 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c83f24b808 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55c83f24b880 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c83f24b9c8 <col:67> "" ""
|-CXXMethodDecl 0x55c83f24bae0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c83f24ba50 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c83f24bb88 <col:63> "" ""
|-CXXMethodDecl 0x55c83f24bd20 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c83f24bc10 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c83f24bc88 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c83f24bdd0 <col:69> "" ""
|-CXXMethodDecl 0x55c83f24bee8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c83f24be58 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c83f24bf90 <col:63> "" ""
|-CXXMethodDecl 0x55c83f24eba8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c83f24ea98 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c83f24eb10 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c83f24ec58 <col:69> "" ""
|-CXXMethodDecl 0x55c83f24ed70 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c83f24ece0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55c83f24ee18 <col:62> "" ""
|-CXXMethodDecl 0x55c83f24efb0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c83f24eea0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c83f24ef18 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55c83f24f060 <col:68> "" ""
|-CXXMethodDecl 0x55c83f24f178 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55c83f24f0e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c83f24f220 <col:63> "" ""
|-CXXMethodDecl 0x55c83f24f3b8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55c83f24f2a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c83f24f320 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55c83f24f468 <col:69> "" ""
|-CXXMethodDecl 0x55c83f24f4f8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c83f24f598 <col:64> "" ""
|-CXXMethodDecl 0x55c83f24f628 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c83f24f6c8 <col:52> "" ""
|-CXXMethodDecl 0x55c83f24f758 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c83f24f7f8 <col:67> "" ""
|-CXXMethodDecl 0x55c83f24f888 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c83f24f928 <col:55> "" ""
|-CXXMethodDecl 0x55c83f24fa40 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c83f24f9b0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c83f24fae8 <col:58> "" ""
|-CXXMethodDecl 0x55c83f24fc80 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c83f24fb70 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c83f24fbe8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c83f24fd30 <col:62> "" ""
|-CXXMethodDecl 0x55c83f24fe48 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55c83f24fdb8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c83f24fef0 <col:58> "" ""
|-CXXMethodDecl 0x55c83f250088 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55c83f24ff78 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c83f24fff0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55c83f250138 <col:62> "" ""
|-CXXMethodDecl 0x55c83f250250 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c83f2501c0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55c83f2502f8 <col:60> "" ""
|-CXXMethodDecl 0x55c83f250490 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c83f250380 <col:34> col:37 'int'
| |-ParmVarDecl 0x55c83f2503f8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c83f250540 <col:64> "" ""
|-CXXMethodDecl 0x55c83f250658 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c83f2505c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c83f250700 <col:58> "" ""
|-CXXMethodDecl 0x55c83f250898 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c83f250788 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c83f250800 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55c83f250948 <col:62> "" ""
|-CXXMethodDecl 0x55c83f250a60 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c83f2509d0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55c83f250b08 <col:59> "" ""
|-CXXMethodDecl 0x55c83f250ca0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c83f250b90 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c83f250c08 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c83f250d50 <col:63> "" ""
|-AccessSpecDecl 0x55c83f250dc0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55c83f250de8 prev 0x55c83f245ab0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c83f250ee0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55c83f250fd0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55c83f2510f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55c83f251278 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55c83f2513f8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55c83f251578 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55c83f2623e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c83f262c58 <col:11>
| |-CXXDestructorDecl 0x55c83f2624c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55c83f2625f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c83f2625f8
| | `-ParmVarDecl 0x55c83f262708 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55c83f2627a8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c83f2627a8
| | `-ParmVarDecl 0x55c83f2628b8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55c83f268088 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c83f268198 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55c83f268418 <col:11>
| |   `-ReturnStmt 0x55c83f268408 <col:11>
| |     `-UnaryOperator 0x55c83f2683f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c83f2683e0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55c83f268208 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c83f268208
|   `-ParmVarDecl 0x55c83f268318 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55c83f2515e0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c83f2516f8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55c83f251798 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55c83f251800 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55c83f251868 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55c83f2518d0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55c83f251930 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55c83f2519f0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55c83f251a50 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55c83f251ab0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55c83f2622f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55c83f251798 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55c83f262c68 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55c83f262cc0 <col:12>
| |-CXXConstructorDecl 0x55c83f262928 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c83f262928
| | `-ParmVarDecl 0x55c83f262a38 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55c83f262ad8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c83f262ad8
| | `-ParmVarDecl 0x55c83f262be8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55c83f267770 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55c83f251b28 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55c83f251b88 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55c83f251bf0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55c83f251c58 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55c83f251cc0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55c83f251d28 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55c83f251d88 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55c83f251de8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55c83f251e50 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55c83f251ed8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55c83f251b28 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55c83f262290 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c83f251d88 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55c83f262cd0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55c83f262d30 <col:21, line:755:5>
|-CXXConstructorDecl 0x55c83f252078 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55c83f251fb8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55c83f252170 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55c83f252358 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55c83f252260 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55c83f252628 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55c83f252410 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c83f252488 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c83f252500 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f252848 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55c83f2526f8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55c83f252770 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55c83f25ae68 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55c83f252908 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55c83f252980 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55c83f2529f8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55c83f25afc0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c83f25af30 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f25b108 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c83f25b078 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55c83f25b200 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f2657e0 prev 0x55c83f23f110 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55c83f265918 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55c83f2659a8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55c83f265a50 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55c83f265af0 <col:20>
| `-OptimizeNoneAttr 0x55c83f265b48 <col:30>
|-CXXMethodDecl 0x55c83f265b98 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55c83f265c38 <col:20>
| `-OptimizeNoneAttr 0x55c83f265c90 <col:30>
|-CXXMethodDecl 0x55c83f265ce0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c83f265da8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c83f265e70 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c83f265f88 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55c83f266050 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55c83f2660f0 <col:20>
| `-OptimizeNoneAttr 0x55c83f266148 <col:30>
|-CXXMethodDecl 0x55c83f2661b8 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55c83f266258 <col:20>
| `-OptimizeNoneAttr 0x55c83f2662b0 <col:30>
|-CXXMethodDecl 0x55c83f266358 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55c83f2663f8 <col:20>
| `-OptimizeNoneAttr 0x55c83f266450 <col:30>
|-CXXMethodDecl 0x55c83f2664a0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c83f2665b8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55c83f2666d8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55c83f2667f8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55c83f2668c0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55c83f266960 <col:62> "" ""
|-AccessSpecDecl 0x55c83f2669d0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55c83f266a30 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55c83f267628 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55c83f267850 <col:29, col:31>
|-CXXMethodDecl 0x55c83f266af8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55c83f266c38 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55c83f266ba8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55c83f266d30 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55c83f267860 <col:23, col:25>
|-CXXMethodDecl 0x55c83f266ee8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55c83f266e20 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55c83f2671b8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c83f266fa0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c83f267018 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c83f267090 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c83f267348 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55c83f267280 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55c83f267440 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55c83f2674a8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55c83f2674a8
  `-ParmVarDecl 0x55c83f2675b8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83efacbb8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c83efaccd8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55c83efacda0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55c83f07d5a0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c83f0828b8 <col:8>
|-CXXConstructorDecl 0x55c83f07d6a8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55c83f07d6a8
| `-ParmVarDecl 0x55c83f07d7b8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55c83f07d858 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c83f07d968 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55c83efacda0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c83f082ad0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55c83f082aa0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55c83efacda0
| |     `-CXXStaticCastExpr 0x55c83f082a70 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55c83f082a40 <col:8> 'in_addr' lvalue ParmVar 0x55c83f07d968 '' 'in_addr &&'
| `-CompoundStmt 0x55c83f082b18 <col:8>
`-CXXDestructorDecl 0x55c83f082d50 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f075288 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c83f0753a8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55c83f075490 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55c83f075470 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55c83f075438 <col:22> 'int' 4
|-FieldDecl 0x55c83f075538 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55c83f075518 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55c83f0754e0 <col:21> 'int' 4
|-FieldDecl 0x55c83f075598 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55c83f0755f8 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55c83f075658 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55c83f0756b8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55c83f075718 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55c83f075778 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55c83f0757d8 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55c83f075848 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55c83f0758b8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c83f1fab38 prev 0x55c83f23efb0 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c83f1fac30 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x55c83f1facd0 <line:12:5, col:14> col:14 uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55c83f1fad30 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55c83f1fad90 <line:14:5, col:14> col:14 referenced uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x55c83f1fadf0 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]
