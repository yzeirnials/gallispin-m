
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1827ea28 prev 0x558a182761c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a1827eb20 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x558a1827ebb0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x558a1827ec28 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x558a1827ece8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x558a1827edb0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x558a1827ef28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x558a1827ee60 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x558a1827efd0 <col:24>
| `-OptimizeNoneAttr 0x558a1827f028 <col:34>
|-CXXMethodDecl 0x558a1827f070 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x558a1827f328 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x558a1827f120 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558a1827f198 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x558a1827f218 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x558a1827f3e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x558a1827f418 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x558a1827f480 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x558a1827f508 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x558a1827f828 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x558a1827f5c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558a1827f638 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x558a1827f6b0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x558a1827f730 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x558a1827f940 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x558a182872b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558a182872b8
| `-ParmVarDecl 0x558a182873c8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x558a18287468 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558a18287468
| `-ParmVarDecl 0x558a18287578 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x558a18355148 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a18271a40 prev 0x558a182717c0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a18271b38 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x558a18271bc8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x558a18271c28 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x558a18271d18 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x558a18271e18 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x558a18271fe8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x558a18271e98 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x558a18271f10 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x558a18272178 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x558a182720b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x558a18272220 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x558a18272358 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x558a18272290 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x558a182724f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x558a18272438 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x558a18272698 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x558a182725d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x558a18272740 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x558a18272840 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x558a18272920 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18272820 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x558a18272800 <col:26> 'int' 1
| `-EnumConstantDecl 0x558a182728d0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x558a18272938 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a182728b0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x558a18272890 <col:44> 'int' 2
|-CXXMethodDecl 0x558a18272a80 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x558a18272968 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x558a182729e8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x558a18272bd8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x558a18272b48 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x558a18272e18 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x558a18272c98 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x558a18272d10 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x558a18272ec8 <col:20>
| `-OptimizeNoneAttr 0x558a18272f20 <col:30>
|-CXXMethodDecl 0x558a18273028 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x558a18272f60 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x558a182730d0 <col:20>
| `-OptimizeNoneAttr 0x558a18273128 <col:30>
|-CXXMethodDecl 0x558a18273178 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x558a18273240 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x558a18273358 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x558a182733e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x558a18273468 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x558a182734f0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x558a18273578 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x558a18273608 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x558a182736c8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x558a18273750 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x558a182737d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x558a18273860 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x558a182738e8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x558a18273970 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x558a18273a00 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x558a18273ac0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x558a18273b50 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x558a18273ca0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x558a18273c08 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x558a18273e30 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x558a18273d60 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x558a182740e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x558a18273ee8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x558a18273f68 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x558a18273fe8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x558a18274198 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x558a182742a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a18274530 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18274280 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x558a18274260 <col:33> 'int' 0
| |-EnumConstantDecl 0x558a18274330 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a18274548 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18274310 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x558a182742f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x558a182743c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a18274560 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a182743a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x558a18274380 <col:38> 'int' 90
| |-EnumConstantDecl 0x558a18274450 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558a18274578 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18274430 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x558a18274410 <col:35> 'int' 100
| `-EnumConstantDecl 0x558a182744e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x558a18274590 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a182744c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x558a182744a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x558a182745d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x558a18274a10 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558a18274880 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x558a182748f8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a18274ae0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x558a18274c60 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x558a18274b90 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a18274e68 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558a18274d18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x558a18274d90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a18274f68 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x558a18275008 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x558a182750d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a18275160 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x558a18275390 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18275140 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x558a18275120 <col:36> 'int' EnumConstant 0x558a182750d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a182751b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a18275200 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a18275250 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a182752a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558a182752f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x558a18275340 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x558a18275478 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x558a182753b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x558a18275540 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x558a18275600 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x558a182756c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x558a18275780 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x558a18275898 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x558a18275960 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x558a18275ae0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x558a18275a10 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x558a18275c08 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x558a18275e08 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x558a18275cb8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x558a18275d38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x558a18283758 <col:54, line:127:5>
|   |-ParenExpr 0x558a18283608 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x558a182835d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x558a182832c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558a182832a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x558a18283288 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x558a18283270 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x558a18283240 <col:31> 'Router *' lvalue ->_router 0x558a18281120
|   |   |         `-CXXThisExpr 0x558a18283230 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558a18283328 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18283308 <col:48> 'int' 0
|   |   `-CallExpr 0x558a18283538 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x558a18283520 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18283500 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18283578 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18283398 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x558a18283590 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a182833b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x558a182835a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a182833f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x558a182835c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a182834e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a182834d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18283488 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x558a182836a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x558a18283638 <col:9> 'Router *' lvalue ->_router 0x558a18281120
|   | | `-CXXThisExpr 0x558a18283628 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x558a18283688 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558a18283668 <col:19> 'Router *' lvalue ParmVar 0x558a18275cb8 'r' 'Router *'
|   `-BinaryOperator 0x558a18283738 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x558a182836d0 <col:9> 'int' lvalue ->_eindex 0x558a18281188
|     | `-CXXThisExpr 0x558a182836c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x558a18283720 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558a18283700 <col:19> 'int' lvalue ParmVar 0x558a18275d38 'eindex' 'int'
|-CXXMethodDecl 0x558a18275f90 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x558a18275ec8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x558a18276060 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x558a18276128 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x558a182761c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x558a18276418 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x558a18276290 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x558a18276310 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x558a182764c8 <col:20>
| `-OptimizeNoneAttr 0x558a18276520 <col:30>
|-CXXMethodDecl 0x558a18276628 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558a18276560 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x558a182766d0 <col:20>
| `-OptimizeNoneAttr 0x558a18276728 <col:30>
|-CXXMethodDecl 0x558a182767f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558a18276768 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x558a182768a0 <col:20>
| `-OptimizeNoneAttr 0x558a182768f8 <col:30>
|-CXXMethodDecl 0x558a18276a88 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x558a18276930 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x558a182769b0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x558a18276c18 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558a18276b50 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558a18276d68 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558a18276cd8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558a18276eb8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558a18276e28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558a18277008 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558a18276f78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558a182772c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x558a182770c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x558a18277140 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x558a182771e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x558a182773a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x558a18277460 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x558a18277730 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558a182775e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x558a18277658 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x558a18277858 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x558a18277a30 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x558a18277910 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x558a18277990 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x558a18277c18 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x558a18277af8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x558a18277b78 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x558a18277f88 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558a18277cd8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558a18277d50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558a18277dd0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558a18282d40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558a18282d20 <col:106> 'int' 0
| `-ParmVarDecl 0x558a18277e48 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a18282d78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a18282d58 <col:126> 'int' 0
|-CXXMethodDecl 0x558a18278328 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a18278058 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558a182780f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558a18278170 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x558a182781e8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a18282db0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a18282d90 <col:114> 'int' 0
|-CXXMethodDecl 0x558a182786b8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a18278400 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x558a18278478 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558a182784f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x558a18282dc8 <col:96> 'int' 0
| `-ParmVarDecl 0x558a18278570 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a18282e08 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a18282de8 <col:116> 'int' 0
|-CXXMethodDecl 0x558a18278a38 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558a18278788 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558a18278800 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558a18278880 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558a18282e40 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558a18282e20 <col:109> 'int' 0
| `-ParmVarDecl 0x558a182788f8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a18282e78 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a18282e58 <col:129> 'int' 0
|-CXXMethodDecl 0x558a18278db8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a18278b08 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558a18278b80 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558a18278c00 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x558a18278c78 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a18282eb0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a18282e90 <col:117> 'int' 0
|-CXXMethodDecl 0x558a18279148 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558a18278e90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a18278f08 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558a18278f88 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x558a18282ec8 <col:99> 'int' 0
| `-ParmVarDecl 0x558a18279000 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558a18282f08 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558a18282ee8 <col:119> 'int' 0
|-CXXMethodDecl 0x558a18279568 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x558a18279218 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558a18279298 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558a18279310 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558a18279390 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558a18282f40 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558a18282f20 <col:108> 'int' 0
| `-ParmVarDecl 0x558a18279410 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x558a18282f78 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x558a18282f58 <col:141> 'int' 0
|-CXXMethodDecl 0x558a18279988 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558a18279640 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558a182796c0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558a18279738 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558a182797b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x558a18279838 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558a18282f90 <col:121> 'int' 0
|-CXXMethodDecl 0x558a18279db8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558a18279a68 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x558a18279ae8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x558a18279b60 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558a18279be0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x558a18282fb0 <col:98> 'int' 0
| `-ParmVarDecl 0x558a18279c60 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558a18282fd0 <col:123> 'int' 0
|-CXXMethodDecl 0x558a1827a080 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x558a18279e90 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558a18279f10 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x558a18279f90 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x558a18282ff0 <col:80> 'int' 0
|-EnumDecl 0x558a1827a138 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x558a1827a240 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a1827a4d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a1827a220 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x558a1827a200 <col:42> 'int' 1
| |-EnumConstantDecl 0x558a1827a2d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a1827a4e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a1827a2b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x558a1827a290 <col:40> 'int' 2
| |-EnumConstantDecl 0x558a1827a360 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a1827a500 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a1827a340 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x558a1827a320 <col:44> 'int' 4
| |-EnumConstantDecl 0x558a1827a3f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558a1827a518 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a1827a3d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x558a1827a3b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x558a1827a480 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x558a1827a530 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a1827a460 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x558a1827a440 <col:34> 'int' 6
|-CXXMethodDecl 0x558a1827a7e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x558a1827a558 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x558a1827a5f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x558a1827a678 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x558a1827a6f0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x558a182830a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x558a18283090 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x558a18283078 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x558a18283058 <col:98, col:105> 'String' (CXXTemporary 0x558a18283058)
|           `-CXXTemporaryObjectExpr 0x558a18283020 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x558a1827aa88 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x558a1827a8b8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558a1827a930 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x558a1827a9a8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558a18283158 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558a18283140 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558a18283128 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558a18283108 <col:94, col:101> 'String' (CXXTemporary 0x558a18283108)
| |         `-CXXTemporaryObjectExpr 0x558a182830d0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x558a18283940 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x558a182838b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x558a18283888 <col:9> '<bound member function type>' ->add_task_handlers 0x558a1827a7e8
|     | `-CXXThisExpr 0x558a18283878 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558a182838f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a182837f8 <col:27> 'Task *' lvalue ParmVar 0x558a1827a8b8 'task' 'Task *'
|     |-ImplicitCastExpr 0x558a18283910 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a18283818 <col:33> 'NotifierSignal *' lvalue ParmVar 0x558a1827a930 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x558a18283928 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558a18283838 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558a1827a480 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558a18283858 <col:62> 'const String' lvalue ParmVar 0x558a1827a9a8 'prefix' 'const String &'
|-CXXMethodDecl 0x558a1827ac98 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x558a1827ab50 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558a1827abc8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558a18283208 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558a182831f0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558a182831d8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558a182831b8 <col:70, col:77> 'String' (CXXTemporary 0x558a182831b8)
| |         `-CXXTemporaryObjectExpr 0x558a18283180 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x558a18283b18 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x558a18283a90 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x558a18283a60 <col:9> '<bound member function type>' ->add_task_handlers 0x558a1827a7e8
|     | `-CXXThisExpr 0x558a18283a50 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558a18283ad0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a182839d0 <col:27> 'Task *' lvalue ParmVar 0x558a1827ab50 'task' 'Task *'
|     |-ImplicitCastExpr 0x558a18283ae8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x558a182839f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x558a18283b00 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558a18283a10 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558a1827a480 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558a18283a30 <col:57> 'const String' lvalue ParmVar 0x558a1827abc8 'prefix' 'const String &'
|-CXXMethodDecl 0x558a1827af78 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x558a1827ad60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827ade0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827ae58 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x558a1827b228 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x558a1827b048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827b0c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827b148 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x558a1827b518 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558a1827b2f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827b378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827b3f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x558a1827b7c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x558a1827b5e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827b668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827b6e8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x558a1827ba78 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x558a1827b898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827b918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827b998 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x558a1827bd28 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x558a1827bb48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827bbc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827bc40 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x558a1827bfd8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x558a1827bdf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827be78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827bef8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x558a1827c2e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x558a1827c100 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827c180 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827c200 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x558a1827c5c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x558a1827c3b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827c438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827c4e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x558a1827c8a8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x558a1827c698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827c718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827c7c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x558a1827cb10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558a1827c978 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558a1827c9f8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558a1827ca70 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x558a1827cdb8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x558a1827cbe0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558a1827cc60 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558a1827ccd8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x558a1827d068 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x558a1827ce88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827cf08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827cf88 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x558a1827d318 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x558a1827d138 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827d1b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827d230 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x558a1827d5c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x558a1827d3e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827d468 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827d4e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x558a1827d898 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x558a1827d698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827d718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558a1827d7b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x558a1827dbc8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x558a1827d968 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558a1827d9e8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x558a1827da60 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x558a1827dad8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a18283220 <col:93> 'bool' false
|-CXXMethodDecl 0x558a1827ddb0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558a1827dc98 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x558a1827dd18 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x558a1827df88 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558a1827de70 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x558a1827def0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x558a1827e268 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558a1827e048 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x558a1827e0c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x558a1827e140 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x558a1827e1b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x558a1827e558 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558a1827e338 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x558a1827e3b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x558a1827e430 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x558a1827e4a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x558a1827e790 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x558a1827e630 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x558a1827e6b0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x558a1827e978 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x558a1827e858 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x558a1827e8d8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x558a1827ea28 prev 0x558a182761c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a1827eb20 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x558a1827ebb0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x558a1827ec28 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x558a1827ece8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x558a1827edb0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x558a1827ef28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x558a1827ee60 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x558a1827efd0 <col:24>
| | `-OptimizeNoneAttr 0x558a1827f028 <col:34>
| |-CXXMethodDecl 0x558a1827f070 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x558a1827f328 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x558a1827f120 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558a1827f198 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x558a1827f218 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x558a1827f3e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x558a1827f418 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x558a1827f480 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x558a1827f508 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x558a1827f828 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x558a1827f5c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558a1827f638 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x558a1827f6b0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x558a1827f730 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x558a1827f940 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x558a182872b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558a182872b8
| | `-ParmVarDecl 0x558a182873c8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x558a18287468 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558a18287468
| | `-ParmVarDecl 0x558a18287578 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x558a18355148 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558a1827f9b8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x558a1827fa58 <col:38> "" ""
|-CXXMethodDecl 0x558a1827fae8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x558a1827fb88 <col:44> "" ""
|-AccessSpecDecl 0x558a1827fbf8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x558a1827fc20 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x558a1827fd20 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x558a1827fd70 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a1827fd00 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x558a1827fce0 <col:27> 'int' 4
|-FieldDecl 0x558a1827fe28 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x558a1827ffd8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x558a18280090 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x558a18281120 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x558a18281188 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x558a182812d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x558a18281218 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x558a18281488 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x558a18281398 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x558a18281668 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x558a18281548 <col:20> col:23 'int'
| `-ParmVarDecl 0x558a182815c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x558a18281910 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x558a18281730 <col:23> col:26 'int'
| |-ParmVarDecl 0x558a182817b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x558a18281828 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x558a182819c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x558a18281a90 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x558a18281ae0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x558a18281b30 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x558a18281d10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x558a18281bc0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x558a18281c38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a18281fb8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x558a18281dd8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x558a18281e58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x558a18281ed0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x558a182821d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x558a18282088 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x558a18282108 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x558a18282510 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x558a18282298 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x558a18282318 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x558a18282390 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x558a18282410 <col:57> col:60 'int'
|-CXXMethodDecl 0x558a182826f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558a182825e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x558a18282660 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x558a18282848 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x558a182827b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x558a18282bc8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x558a18282908 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x558a18282988 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x558a18282a00 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x558a18282a80 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x558a18282ce0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class FixIPSrc
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct in_addr _my_ip
       108 |     in_addr_t s_addr
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a17fa6618 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a17fa6738 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x558a17fa6800 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x558a18076dd0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a1807c0e8 <col:8>
|-CXXConstructorDecl 0x558a18076ed8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x558a18076ed8
| `-ParmVarDecl 0x558a18076fe8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x558a18077088 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a18077198 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x558a17fa6800 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a1807c300 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a1807c2d0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x558a17fa6800
| |     `-CXXStaticCastExpr 0x558a1807c2a0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x558a1807c270 <col:8> 'in_addr' lvalue ParmVar 0x558a18077198 '' 'in_addr &&'
| `-CompoundStmt 0x558a1807c348 <col:8>
`-CXXDestructorDecl 0x558a1807c580 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1828a428 <../elements/ip/fixipsrc.hh:29:1, line:43:1> line:29:7 class FixIPSrc definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x558a1828a588 <col:1, col:7> col:7 implicit referenced class FixIPSrc
|-FieldDecl 0x558a1828a638 <line:30:3, col:18> col:18 _my_ip 'struct in_addr':'in_addr'
|-AccessSpecDecl 0x558a1828a688 <line:32:1, col:7> col:1 public
|-CXXConstructorDecl 0x558a1828a710 <line:33:3, col:12> col:3 FixIPSrc 'void ()'
|-CXXDestructorDecl 0x558a1828a800 <line:34:3, col:13> col:3 ~FixIPSrc 'void ()' noexcept-unevaluated 0x558a1828a800
| `-Overrides: [ 0x558a18271d18 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x558a1828a930 <line:36:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x558a18273178 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x558a1828b3f0 <col:34, col:55>
|   `-ReturnStmt 0x558a1828b3e0 <col:36, col:43>
|     `-ImplicitCastExpr 0x558a1828b3c8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x558a1828b3a8 <col:43> 'const char [9]' lvalue "FixIPSrc"
|-CXXMethodDecl 0x558a1828a9f8 <line:37:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x558a18273240 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x558a1828b450 <col:34, col:54>
|   `-ReturnStmt 0x558a1828b440 <col:36, col:43>
|     `-ImplicitCastExpr 0x558a1828b428 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x558a1828b408 <col:43> 'const char []' lvalue Var 0x558a182734f0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x558a1828acd0 <line:38:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x558a18274a10 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x558a1828ab80 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x558a1828abf8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x558a1828ae58 <line:40:3, col:34> col:19 fix_it 'WritablePacket *(Packet *)'
| `-ParmVarDecl 0x558a1828ad90 <col:26, col:33> col:34 'Packet *'
|-CXXMethodDecl 0x558a1828afa0 <line:41:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x558a18272358 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x558a1828af10 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x558a1828b078 <line:29:7> col:7 implicit FixIPSrc 'void (const FixIPSrc &)' inline default_delete noexcept-unevaluated 0x558a1828b078
| `-ParmVarDecl 0x558a1828b188 <col:7> col:7 'const FixIPSrc &'
`-CXXMethodDecl 0x558a1828b228 <col:7> col:7 implicit operator= 'FixIPSrc &(const FixIPSrc &)' inline default_delete noexcept-unevaluated 0x558a1828b228
  `-ParmVarDecl 0x558a1828b338 <col:7> col:7 'const FixIPSrc &'

Layout: <CGRecordLayout
  LLVMType:%class.FixIPSrc = type { %class.Element.base, %struct.in_addr }
  NonVirtualBaseLLVMType:%class.FixIPSrc = type { %class.Element.base, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a180448d0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558a180449e8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x558a18044a88 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x558a18044ae8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x558a18044b48 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x558a18044bf8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a18044f00 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a18045018 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x558a180450c0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x558a18045128 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x558a180451b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x558a1804b250 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a1804b688 <col:12>
|-CXXConstructorDecl 0x558a1804b358 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a1804b468 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558a180450c0 'data' 'const char *'
| | `-ImplicitCastExpr 0x558a1804dc10 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x558a1804dbe0 <col:12> 'const char *const' lvalue .data 0x558a180450c0
| |     `-DeclRefExpr 0x558a1804dbc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1804b468 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558a18045128 'length' 'int'
| | `-ImplicitCastExpr 0x558a1804dca0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558a1804dc70 <col:12> 'const int' lvalue .length 0x558a18045128
| |     `-DeclRefExpr 0x558a1804dc50 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1804b468 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558a180451b8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x558a1804dd30 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x558a1804dd00 <col:12> 'String::memo_t *const' lvalue .memo 0x558a180451b8
| |     `-DeclRefExpr 0x558a1804dce0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1804b468 '' 'const String::rep_t &'
| `-CompoundStmt 0x558a1804dd88 <col:12>
|-CXXConstructorDecl 0x558a1804b508 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a1804b508
| `-ParmVarDecl 0x558a1804b618 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x558a18050b70 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558a1805c588 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a1805c698 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x558a1805cbb0 <col:12>
|   |-BinaryOperator 0x558a1805c9c8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558a1805c980 <col:12> 'const char *' lvalue ->data 0x558a180450c0
|   | | `-CXXThisExpr 0x558a1805c970 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558a1805c9b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x558a1805c940 <col:12> 'const char *const' lvalue .data 0x558a180450c0
|   |     `-DeclRefExpr 0x558a1805c920 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1805c698 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558a1805ca90 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x558a1805ca48 <col:12> 'int' lvalue ->length 0x558a18045128
|   | | `-CXXThisExpr 0x558a1805ca38 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558a1805ca78 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x558a1805ca08 <col:12> 'const int' lvalue .length 0x558a18045128
|   |     `-DeclRefExpr 0x558a1805c9e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1805c698 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558a1805cb58 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x558a1805cb10 <col:12> 'String::memo_t *' lvalue ->memo 0x558a180451b8
|   | | `-CXXThisExpr 0x558a1805cb00 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558a1805cb40 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x558a1805cad0 <col:12> 'String::memo_t *const' lvalue .memo 0x558a180451b8
|   |     `-DeclRefExpr 0x558a1805cab0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1805c698 '' 'const String::rep_t &'
|   `-ReturnStmt 0x558a1805cba0 <col:12>
|     `-UnaryOperator 0x558a1805cb88 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a1805cb78 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x558a1805c708 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a1805c708
  `-ParmVarDecl 0x558a1805c818 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1803be40 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a1803bf58 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x558a1803bfe8 <col:16, col:22> col:16 public
|-TypedefDecl 0x558a1803c028 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558a17d10fd0 'const char *'
|   `-QualType 0x558a17d10521 'const char' const
|     `-BuiltinType 0x558a17d10520 'char'
|-TypedefDecl 0x558a1803c0b0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x558a1803c080 'String::const_iterator' sugar
|   |-Typedef 0x558a1803c028 'const_iterator'
|   `-PointerType 0x558a17d10fd0 'const char *'
|     `-QualType 0x558a17d10521 'const char' const
|       `-BuiltinType 0x558a17d10520 'char'
|-TypedefDecl 0x558a1803c220 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x558a1803c190 'int (String::*)() const'
|   |-RecordType 0x558a1803bed0 'String'
|   | `-CXXRecord 0x558a1803be40 'String'
|   `-ParenType 0x558a1803c130 'int () const' sugar
|     `-FunctionProtoType 0x558a18010cd0 'int () const' const cdecl
|       `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a1803c288 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x558a17e658b0 'int64_t' sugar
|   |-Typedef 0x558a17d79390 'int64_t'
|   `-TypedefType 0x558a17d52630 '__int64_t' sugar
|     |-Typedef 0x558a17d52208 '__int64_t'
|     `-BuiltinType 0x558a17d105a0 'long'
|-TypedefDecl 0x558a1803c2f0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x558a17e657d0 'uint64_t' sugar
|   |-Typedef 0x558a17d79530 'uint64_t'
|   `-TypedefType 0x558a17d526c0 '__uint64_t' sugar
|     |-Typedef 0x558a17d52278 '__uint64_t'
|     `-BuiltinType 0x558a17d10640 'unsigned long'
|-TypedefDecl 0x558a1803c380 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x558a1803c350 'String::intmax_t' sugar
|   |-Typedef 0x558a1803c288 'intmax_t'
|   `-TypedefType 0x558a17e658b0 'int64_t' sugar
|     |-Typedef 0x558a17d79390 'int64_t'
|     `-TypedefType 0x558a17d52630 '__int64_t' sugar
|       |-Typedef 0x558a17d52208 '__int64_t'
|       `-BuiltinType 0x558a17d105a0 'long'
|-TypedefDecl 0x558a1803c410 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x558a1803c3e0 'String::uintmax_t' sugar
|   |-Typedef 0x558a1803c2f0 'uintmax_t'
|   `-TypedefType 0x558a17e657d0 'uint64_t' sugar
|     |-Typedef 0x558a17d79530 'uint64_t'
|     `-TypedefType 0x558a17d526c0 '__uint64_t' sugar
|       |-Typedef 0x558a17d52278 '__uint64_t'
|       `-BuiltinType 0x558a17d10640 'unsigned long'
|-CXXConstructorDecl 0x558a1803c4d0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x558a1803c678 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x558a1803c5b8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x558a1803c828 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x558a1803c768 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x558a1803c980 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x558a1803c8f0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x558a1803cb98 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x558a1803ca48 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x558a1803cac8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x558a1803cdb8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558a1803cc68 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x558a1803cce8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x558a1803cfd8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558a1803ce88 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x558a1803cf08 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x558a1803d1f8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558a1803d0a8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x558a1803d128 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x558a1803d388 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x558a1803d2c0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x558a1803d508 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x558a1803d448 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x558a1803d698 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x558a1803d5d0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x558a1803d7f0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x558a1803d760 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x558a1803d948 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x558a1803d8b8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x558a1803daa0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x558a1803da10 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x558a1803dc28 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x558a1803db68 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x558a1803ddb8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x558a1803dcf0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x558a1803df48 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x558a1803de80 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x558a1803e0d8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x558a1803e010 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x558a1803e1d0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x558a1803e2f8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x558a1803e478 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x558a1803e3b0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x558a1803e5c8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x558a1803e538 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x558a1803e680 <col:63> "" ""
|-CXXMethodDecl 0x558a1803e7c8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x558a1803e708 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x558a1803e9d8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x558a1803e888 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x558a1803e908 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x558a1803ebf8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x558a1803eaa0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x558a1803eb20 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x558a1803eed8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x558a1803ecb8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558a1803ed38 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x558a1804ad20 <col:55> 'int' 10
| `-ParmVarDecl 0x558a1803edb0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a1804ad40 <col:76> 'bool' true
|-CXXMethodDecl 0x558a1803f1b8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x558a1803efa0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558a1803f020 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x558a1804ad50 <col:56> 'int' 10
| `-ParmVarDecl 0x558a1803f098 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a1804ad70 <col:77> 'bool' true
|-CXXMethodDecl 0x558a1803f2c0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558a1803f388 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558a1803f450 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x558a1803f4f0 <col:20>
| `-OptimizeNoneAttr 0x558a1803f548 <col:30>
|-CXXConversionDecl 0x558a1803f638 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558a1803f708 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x558a1803f7c8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558a1803f8b8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558a1803f978 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558a1803faf8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558a1803fa30 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558a1803fc48 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x558a1803fbb8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x558a1803fd38 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x558a1803fdf8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558a18040048 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x558a1803feb0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x558a1803ff30 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x558a180402a8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x558a18040110 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x558a18040190 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x558a18040378 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558a18040588 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x558a18040430 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x558a180404b0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x558a180407a8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x558a18040650 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x558a180406d0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x558a18040938 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x558a18040870 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x558a18040a28 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x558a18040b98 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x558a18040ad8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558a18040da8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x558a18040c58 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558a18040cd8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558a18040fc0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x558a18040e68 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x558a18040ee0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x558a18041150 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x558a18041080 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558a18041370 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x558a18041210 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x558a18041290 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558a180414c0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x558a18041430 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x558a18041698 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x558a18041580 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558a18041600 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x558a180417e8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x558a18041758 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x558a18041a00 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x558a180418a0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x558a18041920 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x558a1804ad80 <col:39> 'int' 0
|-CXXMethodDecl 0x558a18041c20 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x558a18041ac0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x558a18041b40 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x558a1804ada0 <col:48> 'int' 0
|-CXXMethodDecl 0x558a18041e00 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x558a18041ce0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x558a18041d60 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x558a1804adc0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x558a18041ed0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x558a18041f90 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x558a18042050 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x558a18042110 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x558a180421d0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x558a18042378 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x558a18042280 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x558a180424f8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x558a18042430 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x558a180426d0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x558a180425b8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x558a18042848 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x558a18042788 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x558a18042990 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x558a18042900 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558a18042ae0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x558a18042a50 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x558a18042cb8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x558a18042ba0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558a18042c20 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558a18042e98 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558a18042d80 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x558a18042e00 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x558a18042fe8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x558a18042f58 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x558a180431f8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x558a180430a8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x558a18043128 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x558a18043358 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x558a180432c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558a180434b0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x558a18043418 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x558a18043558 <col:57> "" ""
|-CXXMethodDecl 0x558a18043668 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x558a180435d8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x558a180437b8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x558a18043728 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x558a18043938 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x558a18043870 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x558a18043a00 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x558a18043ac0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x558a18043b80 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x558a18043c20 <col:49> "" ""
|-CXXMethodDecl 0x558a18043cb0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x558a18043d70 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x558a18043e60 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x558a18043f28 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x558a18043fe8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x558a180440a8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x558a180441a0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x558a18044268 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x558a18044330 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x558a18044508 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x558a180443e8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x558a18044468 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x558a18044730 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x558a180445d0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x558a18044650 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x558a18044840 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x558a180448a8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x558a180448d0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x558a180449e8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x558a18044a88 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x558a18044ae8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x558a18044b48 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x558a18044bf8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x558a18044c60 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x558a18044e98 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x558a18044ee8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a18044e78 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x558a18044d88 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x558a18044d30 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x558a18044d70 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x558a18044d50 <col:32> 'int' 8
|-CXXRecordDecl 0x558a18044f00 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a18045018 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x558a180450c0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x558a18045128 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x558a180451b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x558a1804b250 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558a1804b688 <col:12>
| |-CXXConstructorDecl 0x558a1804b358 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558a1804b468 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558a180450c0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x558a1804dc10 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x558a1804dbe0 <col:12> 'const char *const' lvalue .data 0x558a180450c0
| | |     `-DeclRefExpr 0x558a1804dbc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1804b468 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558a18045128 'length' 'int'
| | | `-ImplicitCastExpr 0x558a1804dca0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558a1804dc70 <col:12> 'const int' lvalue .length 0x558a18045128
| | |     `-DeclRefExpr 0x558a1804dc50 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1804b468 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558a180451b8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x558a1804dd30 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x558a1804dd00 <col:12> 'String::memo_t *const' lvalue .memo 0x558a180451b8
| | |     `-DeclRefExpr 0x558a1804dce0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1804b468 '' 'const String::rep_t &'
| | `-CompoundStmt 0x558a1804dd88 <col:12>
| |-CXXConstructorDecl 0x558a1804b508 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a1804b508
| | `-ParmVarDecl 0x558a1804b618 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x558a18050b70 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x558a1805c588 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558a1805c698 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x558a1805cbb0 <col:12>
| |   |-BinaryOperator 0x558a1805c9c8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x558a1805c980 <col:12> 'const char *' lvalue ->data 0x558a180450c0
| |   | | `-CXXThisExpr 0x558a1805c970 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558a1805c9b0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x558a1805c940 <col:12> 'const char *const' lvalue .data 0x558a180450c0
| |   |     `-DeclRefExpr 0x558a1805c920 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1805c698 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558a1805ca90 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x558a1805ca48 <col:12> 'int' lvalue ->length 0x558a18045128
| |   | | `-CXXThisExpr 0x558a1805ca38 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558a1805ca78 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x558a1805ca08 <col:12> 'const int' lvalue .length 0x558a18045128
| |   |     `-DeclRefExpr 0x558a1805c9e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1805c698 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558a1805cb58 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x558a1805cb10 <col:12> 'String::memo_t *' lvalue ->memo 0x558a180451b8
| |   | | `-CXXThisExpr 0x558a1805cb00 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558a1805cb40 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x558a1805cad0 <col:12> 'String::memo_t *const' lvalue .memo 0x558a180451b8
| |   |     `-DeclRefExpr 0x558a1805cab0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558a1805c698 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x558a1805cba0 <col:12>
| |     `-UnaryOperator 0x558a1805cb88 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558a1805cb78 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x558a1805c708 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558a1805c708
|   `-ParmVarDecl 0x558a1805c818 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x558a18045230 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x558a18045478 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x558a18045298 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x558a18045318 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x558a18045390 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x558a1804b210 <col:79, line:261:5>
|   |-BinaryOperator 0x558a1804ae88 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558a1804ae20 <col:2, col:5> 'const char *' lvalue .data 0x558a180450c0
|   | | `-MemberExpr 0x558a1804adf0 <col:2> 'String::rep_t' lvalue ->_r 0x558a18045230
|   | |   `-CXXThisExpr 0x558a1804ade0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558a1804ae70 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558a1804ae50 <col:12> 'const char *' lvalue ParmVar 0x558a18045298 'data' 'const char *'
|   |-BinaryOperator 0x558a1804af50 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x558a1804aee8 <col:2, col:5> 'int' lvalue .length 0x558a18045128
|   | | `-MemberExpr 0x558a1804aeb8 <col:2> 'String::rep_t' lvalue ->_r 0x558a18045230
|   | |   `-CXXThisExpr 0x558a1804aea8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558a1804af38 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x558a1804af18 <col:14> 'int' lvalue ParmVar 0x558a18045318 'length' 'int'
|   `-IfStmt 0x558a1804b1f8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x558a1804b070 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558a1804b058 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x558a1804b038 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x558a1804b018 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x558a1804afb0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x558a180451b8
|     |       | `-MemberExpr 0x558a1804af80 <col:7> 'String::rep_t' lvalue ->_r 0x558a18045230
|     |       |   `-CXXThisExpr 0x558a1804af70 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x558a1804b000 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a1804afe0 <col:17> 'String::memo_t *' lvalue ParmVar 0x558a18045390 'memo' 'String::memo_t *'
|     `-CallExpr 0x558a1804b1d0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x558a1804b1b8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558a1804b0c0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x558a18033ea8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x558a1804b128 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558a18044a88
|         `-ImplicitCastExpr 0x558a1804b110 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x558a1804b0f0 <col:27> 'String::memo_t *' lvalue ParmVar 0x558a18045390 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x558a18045728 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x558a18045548 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x558a180455c8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x558a18045640 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x558a18045230 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x558a1804b698 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558a1804b828 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x558a1804b790 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x558a1804b700 <col:2> '<bound member function type>' ->assign_memo 0x558a18045478
|     | `-ImplicitCastExpr 0x558a1804b7c8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x558a1804b6f0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x558a1804b7e0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x558a1804b730 <col:14> 'const char *' lvalue ParmVar 0x558a18045548 'data' 'const char *'
|     |-ImplicitCastExpr 0x558a1804b7f8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558a1804b750 <col:20> 'int' lvalue ParmVar 0x558a180455c8 'length' 'int'
|     `-ImplicitCastExpr 0x558a1804b810 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x558a1804b770 <col:28> 'String::memo_t *' lvalue ParmVar 0x558a18045640 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x558a180458b8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x558a180457f8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x558a1804ba80 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x558a1804ba00 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x558a1804b850 <col:2> '<bound member function type>' ->assign_memo 0x558a18045478
|     | `-CXXThisExpr 0x558a1804b840 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x558a1804ba38 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x558a1804b8d0 <col:14, col:19> 'const char *' lvalue .data 0x558a180450c0
|     |   `-MemberExpr 0x558a1804b8a0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x558a18045230
|     |     `-DeclRefExpr 0x558a1804b880 <col:14> 'const String' lvalue ParmVar 0x558a180457f8 'x' 'const String &'
|     |-ImplicitCastExpr 0x558a1804ba50 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x558a1804b950 <col:25, col:30> 'int' lvalue .length 0x558a18045128
|     |   `-MemberExpr 0x558a1804b920 <col:25, col:27> 'String::rep_t' lvalue ._r 0x558a18045230
|     |     `-DeclRefExpr 0x558a1804b900 <col:25> 'const String' lvalue ParmVar 0x558a180457f8 'x' 'const String &'
|     `-ImplicitCastExpr 0x558a1804ba68 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x558a1804b9d0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x558a180451b8
|         `-MemberExpr 0x558a1804b9a0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x558a18045230
|           `-DeclRefExpr 0x558a1804b980 <col:38> 'const String' lvalue ParmVar 0x558a180457f8 'x' 'const String &'
|-CXXMethodDecl 0x558a18045980 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x558a1804c440 <col:31, line:278:5>
|   `-IfStmt 0x558a1804c428 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x558a1804bb20 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558a1804bb08 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x558a1804bad8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558a180451b8
|     |     `-MemberExpr 0x558a1804baa8 <col:6> 'String::rep_t' lvalue ->_r 0x558a18045230
|     |       `-CXXThisExpr 0x558a1804ba98 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x558a1804c400 <col:15, line:277:2>
|       |-ParenExpr 0x558a1804bfd0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x558a1804bfa0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x558a1804bc30 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x558a1804bc18 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x558a1804bc00 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x558a1804bbc0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558a18044a88
|       |   |       `-ImplicitCastExpr 0x558a1804bba8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x558a1804bb78 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x558a180451b8
|       |   |           `-MemberExpr 0x558a1804bb48 <col:27> 'String::rep_t' lvalue ->_r 0x558a18045230
|       |   |             `-CXXThisExpr 0x558a1804bb38 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x558a1804bc90 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x558a1804bc70 <col:54> 'int' 0
|       |   `-CallExpr 0x558a1804bf00 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x558a1804bee8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558a1804be68 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x558a1804bf40 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558a1804bd78 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x558a1804bf58 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558a1804bda8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x558a1804bf70 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x558a1804bde0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x558a1804bf88 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x558a1804be50 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x558a1804be38 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x558a1804be00 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x558a1804c320 <line:274:6, line:275:22>
|       | |-CallExpr 0x558a1804c1e0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x558a1804c1c8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x558a1804c140 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x558a180352f0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x558a1804c110 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558a18044a88
|       | |   `-ImplicitCastExpr 0x558a1804c0f8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x558a1804c0c8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x558a180451b8
|       | |       `-MemberExpr 0x558a1804c098 <col:40> 'String::rep_t' lvalue ->_r 0x558a18045230
|       | |         `-CXXThisExpr 0x558a1804c088 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x558a1804c2e0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x558a1804c2c8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x558a1804c208 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x558a1804a160 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x558a1804c308 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x558a1804c268 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x558a180451b8
|       |       `-MemberExpr 0x558a1804c238 <col:15> 'String::rep_t' lvalue ->_r 0x558a18045230
|       |         `-CXXThisExpr 0x558a1804c228 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x558a1804c3e0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x558a1804c378 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558a180451b8
|         | `-MemberExpr 0x558a1804c348 <col:6> 'String::rep_t' lvalue ->_r 0x558a18045230
|         |   `-CXXThisExpr 0x558a1804c338 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x558a1804c3c8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x558a1804c3a8 <col:16> 'int' 0
|-CXXMethodDecl 0x558a18045c18 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x558a18045a38 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558a18045ab8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558a18045b30 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x558a18045cf0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x558a18045f40 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x558a18045da8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558a18045e28 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558a18045ea0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x558a18046128 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x558a18046010 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x558a18046090 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x558a18046228 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x558a1804c518 <col:41, line:286:5>
|   `-ReturnStmt 0x558a1804c508 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x558a1804c4d8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x558a1804c4a0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x558a1804c488 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x558a1804c468 <col:46> 'int' 1
|-CXXMethodDecl 0x558a180464c8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x558a180462e0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x558a18046360 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x558a180463e0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x558a1804a160 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x558a18046590 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x558a1804a230 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x558a1804a400 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x558a1804a2e8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558a1804a368 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x558a1804a4c0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x558a1804a588 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x558a1804a688 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x558a1804a700 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x558a1804a778 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x558a1804a7e0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x558a1804a8e0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x558a1804a930 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a1804a8c0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x558a1804a8a0 <col:22> 'int' 14
|-CXXMethodDecl 0x558a1804ab48 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x558a1804a960 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x558a1804a9e0 <col:38> col:41 'int'
| `-ParmVarDecl 0x558a1804aa60 <col:43> col:46 'int'
|-FriendDecl 0x558a1804ac50 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x558a1804ace0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a1810d7a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x558a1810d978 prev 0x558a1810d7a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558a1810da08 <col:46, col:52> col:46 public
|-TypedefDecl 0x558a1810da30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a1810f390 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x558a1810f340 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x558a1810f320 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x558a1810dc48 'type'
|     `-SubstTemplateTypeParmType 0x558a1810dc10 'String' sugar
|       |-TemplateTypeParmType 0x558a180006f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a180006a0 'T'
|       `-RecordType 0x558a1803bed0 'String'
|         `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a1810f448 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x558a1810f410 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x558a1810f3f0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558a1810f390 'type'
|     `-ElaboratedType 0x558a1810f340 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x558a1810f320 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x558a1810dc48 'type'
|         `-SubstTemplateTypeParmType 0x558a1810dc10 'String' sugar
|           |-TemplateTypeParmType 0x558a180006f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558a180006a0 'T'
|           `-RecordType 0x558a1803bed0 'String'
|             `-CXXRecord 0x558a1803be40 'String'
|-CXXMethodDecl 0x558a1810f5c8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x558a1810f4d8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x558a1810f6b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558a1810f798 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x558a1810f798
|-CXXMethodDecl 0x558a1810fa68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558a1810f970 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x558a1810fca8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a1810fb20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a1810fb98 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a1810fe78 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a1810fd68 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a1810fde0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a1810ffd8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558a181100a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558a182bc250 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a18110168 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558a181101e0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a182bc4a8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x558a182bc320 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558a182bc398 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a182bc668 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558a182bc578 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a182bc828 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558a182bc730 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a182bc8e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a182bc990 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558a182bcbc8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558a182bca40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a182bcab8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558a182bce68 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558a182bcd70 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x558a182bcf30 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x558a182bcf80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558a182bcfd0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a18274680 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x558a1810c208 prev 0x558a18274680 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558a1810d710 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x558a1810d6c0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x558a1810d6a0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558a1810d550 'type'
|     `-SubstTemplateTypeParmType 0x558a1810d3e0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x558a17fd64a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x558a17fd6448 'F'
|       `-RecordType 0x558a1810d040 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x558a1810cf60 'typed_array_memory'
|-FieldDecl 0x558a182bd020 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x558a182bd070 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558a182bd0a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|   |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558a1800d9b8 'T'
|   `-RecordType 0x558a1803bed0 'String'
|     `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182bd138 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x558a182bd100 'String &'
|   `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|     |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a1800d9b8 'T'
|     `-RecordType 0x558a1803bed0 'String'
|       `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182bd1c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x558a182bd190 'const String &'
|   `-QualType 0x558a1810c2a1 'const String' const
|     `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-RecordType 0x558a1803bed0 'String'
|         `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182bd258 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x558a182bd220 'String *'
|   `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|     |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a1800d9b8 'T'
|     `-RecordType 0x558a1803bed0 'String'
|       `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182bd2e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x558a182bd2b0 'const String *'
|   `-QualType 0x558a1810c2a1 'const String' const
|     `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-RecordType 0x558a1803bed0 'String'
|         `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182bdf40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x558a182bdef0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x558a182bded0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x558a182bde08 'type'
|     `-LValueReferenceType 0x558a182bddd0 'const String &'
|       `-QualType 0x558a182bdb71 'const String' const
|         `-SubstTemplateTypeParmType 0x558a182bdb70 'String' sugar
|           |-TemplateTypeParmType 0x558a17fe0800 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558a17fe07a8 'T'
|           `-RecordType 0x558a1803bed0 'String'
|             `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182bdfa8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x558a182bd190 'const String &'
|   `-QualType 0x558a1810c2a1 'const String' const
|     `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-RecordType 0x558a1803bed0 'String'
|         `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182be000 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a182be068 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x558a182bd220 'String *'
|   `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|     |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a1800d9b8 'T'
|     `-RecordType 0x558a1803bed0 'String'
|       `-CXXRecord 0x558a1803be40 'String'
|-TypedefDecl 0x558a182be0d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x558a182bd2b0 'const String *'
|   `-QualType 0x558a1810c2a1 'const String' const
|     `-SubstTemplateTypeParmType 0x558a1810c2a0 'String' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-RecordType 0x558a1803bed0 'String'
|         `-CXXRecord 0x558a1803be40 'String'
|-EnumDecl 0x558a182be128 <line:134:5> col:5
| `-EnumConstantDecl 0x558a182be220 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558a182be200 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558a1800f098 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558a1800f070 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558a1800f050 <col:40> 'int' 1
|-CXXConstructorDecl 0x558a182be2a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558a182be538 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a182be360 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a182be400 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x558a182be7c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x558a182be6b0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x558a182bea88 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x558a182be970 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x558a182beda0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x558a182bec80 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x558a182bf0b0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x558a182bef90 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x558a182bf3a0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a182bf1e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a182bf260 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a182bf4c8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558a182bf578 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a182bf5d0 <col:30> Inherited
|-CXXMethodDecl 0x558a182bf618 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558a182bf6c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a182bf720 <col:30> Inherited
|-CXXMethodDecl 0x558a182bf7e8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a182bf898 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a182bf8f0 <col:30> Inherited
|-CXXMethodDecl 0x558a182bf938 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a182bf9e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a182bfa40 <col:30> Inherited
|-CXXMethodDecl 0x558a182bfa88 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a182bfb38 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a182bfb90 <col:30> Inherited
|-CXXMethodDecl 0x558a182bfbd8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558a182bfc88 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a182bfce0 <col:30> Inherited
|-CXXMethodDecl 0x558a182bfd08 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a182bfdb8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a182bfe68 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558a182c0028 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a182bff18 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a182bff90 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a182c0178 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558a182c00e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a182c0328 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x558a182c0230 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a182c03e0 <col:20>
| `-OptimizeNoneAttr 0x558a182c0438 <col:30>
|-CXXMethodDecl 0x558a182c0558 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x558a182c0460 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a182c0610 <col:20>
| `-OptimizeNoneAttr 0x558a182c0668 <col:30>
|-CXXMethodDecl 0x558a182c0720 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a182c0690 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a182c0868 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a182c07d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a182c0998 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x558a182c0a98 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x558a182c0b68 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x558a182c0c38 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x558a182c0d78 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a182c0ce8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a182c0ec0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a182c0e30 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a182c1008 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x558a182c0f78 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a182c10c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558a182c11c0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558a182c1130 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a182c1278 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558a182c1338 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x558a182c1438 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x558a182c15b8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558a182c14f8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x558a182c1d78 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558a182c1670 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x558a182c1cd8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x558a182c1bd8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x558a182c1e58 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a182c1fa8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558a182c1f18 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a182c2060 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558a182c22a8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558a182c2120 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558a182c2198 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558a182c2438 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x558a182c2378 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558a182c2648 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x558a182c2500 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558a182c2578 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558a182c2708 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558a182c2968 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x558a182c2870 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x558a182c2a38 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x558a182c2a38

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a18341188 prev 0x558a181f1f58 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a18341280 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x558a18341310 <col:22, col:28> col:22 public
|-EnumDecl 0x558a18341338 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x558a18341458 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a18341438 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x558a18341420 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558a18341400 <col:14> 'int' 999
| |-EnumConstantDecl 0x558a18341500 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a183414e0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x558a183414c8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558a183414a8 <col:14> 'int' 1
| |-EnumConstantDecl 0x558a18341590 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a18341570 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x558a18341550 <col:17> 'int' 0
| |-EnumConstantDecl 0x558a18341620 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a18341600 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x558a183415e0 <col:13> 'int' 1
| |-EnumConstantDecl 0x558a183416b0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a18341690 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x558a18341670 <col:16> 'int' 2
| |-EnumConstantDecl 0x558a18341740 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a18341720 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x558a18341700 <col:13> 'int' 3
| |-EnumConstantDecl 0x558a183417d0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a183417b0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x558a18341790 <col:15> 'int' 4
| |-EnumConstantDecl 0x558a18341860 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a18341840 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x558a18341820 <col:14> 'int' 5
| |-EnumConstantDecl 0x558a183418f0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x558a183418d0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x558a183418b0 <col:12> 'int' 6
| `-EnumConstantDecl 0x558a18341980 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x558a18341960 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x558a18341940 <col:13> 'int' 7
|-VarDecl 0x558a183419f0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x558a18341a78 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x558a18341b00 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x558a18341b88 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x558a18341c10 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x558a18341c98 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x558a18341d20 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x558a18341da8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x558a18341e30 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x558a18341eb8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x558a18341f40 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x558a18342040 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x558a18347338 '_nerrors' 'int'
| | `-IntegerLiteral 0x558a18347ac8 <line:128:13> 'int' 0
| `-CompoundStmt 0x558a18347b38 <col:16, line:129:5>
|-CXXDestructorDecl 0x558a18342130 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x558a18347b48 <col:29, line:132:5>
|-CXXMethodDecl 0x558a183422e8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x558a18342220 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a183423b0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558a18342498 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558a18347ba0 <col:44, line:161:5>
|   `-ReturnStmt 0x558a18347b90 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x558a18347b78 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558a18347b58 <col:9> 'ErrorHandler *' lvalue Var 0x558a18347398 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x558a183425d8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x558a18342548 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558a183426a0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558a18347c00 <col:43, line:173:5>
|   `-ReturnStmt 0x558a18347bf0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x558a18347bd8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558a18347bb8 <col:9> 'ErrorHandler *' lvalue Var 0x558a18347410 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x558a18342758 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x558a183427d8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x558a183428e8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x558a18342858 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558a18342a38 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x558a183429a8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558a18342b90 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x558a18342af8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x558a18342ce8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x558a18342c50 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558a18342e40 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x558a18342da8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558a18343050 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a18342ef8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x558a18342f78 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x558a18343228 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a18343110 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x558a18343190 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x558a18343448 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a183432e8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x558a18343368 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x558a18343628 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a18343508 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558a18343588 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558a18343808 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558a183436e8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558a18343768 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558a18343990 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x558a183438c8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x558a18343b60 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x558a18343a48 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558a18343ac0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x558a18347e58 <col:57, line:234:5>
|   `-ReturnStmt 0x558a18347e48 <line:233:2, col:41>
|     `-ExprWithCleanups 0x558a18347e30 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558a18347dd8 <col:9, col:41> 'int'
|         |-MemberExpr 0x558a18347da8 <col:9> '<bound member function type>' ->xmessage 0x558a18343990
|         | `-CXXThisExpr 0x558a18347d98 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x558a18347e18 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558a18347e00 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558a18347d78 <col:18, col:40> 'String' (CXXTemporary 0x558a18347d78)
|               `-CallExpr 0x558a18347d40 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x558a18347d28 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x558a18347ca0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558a18345b58 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x558a18347cc0 <col:31> 'const String' lvalue ParmVar 0x558a18343ac0 'str' 'const String &'
|                 `-DeclRefExpr 0x558a18347ce0 <col:36> 'const String' lvalue ParmVar 0x558a18343a48 'anno' 'const String &'
|-CXXMethodDecl 0x558a18343e40 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558a18343c20 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558a18343ca0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x558a18343d18 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558a183480e8 <col:68, line:243:5>
|   `-ReturnStmt 0x558a183480d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x558a183480c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558a18348060 <col:9, col:41> 'int'
|         |-MemberExpr 0x558a18348030 <col:9> '<bound member function type>' ->xmessage 0x558a18343b60
|         | `-CXXThisExpr 0x558a18348020 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558a18347ef8 <col:18> 'const String' lvalue ParmVar 0x558a18343c20 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558a183480a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558a18348090 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558a18348000 <col:24, col:40> 'String' (CXXTemporary 0x558a18348000)
|               `-CXXMemberCallExpr 0x558a18347f98 <col:24, col:40> 'String'
|                 |-MemberExpr 0x558a18347f28 <col:24> '<bound member function type>' ->vformat 0x558a18345020
|                 | `-CXXThisExpr 0x558a18347f18 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558a18347fc8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558a18347f58 <col:32> 'const char *' lvalue ParmVar 0x558a18343ca0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558a18347fe0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558a18347f78 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558a18343d18 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a183440e0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x558a18343f08 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558a18343f80 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558a18343ff8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x558a18348428 <col:23, line:254:5>
|   `-ReturnStmt 0x558a18348418 <line:253:2, col:71>
|     `-ExprWithCleanups 0x558a18348400 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x558a183483a0 <col:9, col:71> 'int'
|         |-MemberExpr 0x558a18348370 <col:9> '<bound member function type>' ->xmessage 0x558a18343b60
|         | `-CXXThisExpr 0x558a18348360 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x558a183483e8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x558a183483d0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x558a18348320 <col:18, col:65> 'String' (CXXTemporary 0x558a18348320)
|         |     `-CallExpr 0x558a183482b8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x558a183482a0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x558a18348188 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558a18345b58 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x558a183481a8 <col:31> 'const String' lvalue ParmVar 0x558a18343f80 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x558a18348300 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x558a183482e8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x558a18348280 <col:37, col:64> 'String' (CXXTemporary 0x558a18348280)
|         |             `-CallExpr 0x558a18348250 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x558a18348238 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x558a183481c8 <col:37> 'String (const String &)' lvalue CXXMethod 0x558a183461a8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x558a183481e8 <col:56> 'const String' lvalue ParmVar 0x558a18343f08 'landmark' 'const String &'
|         `-DeclRefExpr 0x558a18348340 <col:68> 'const String' lvalue ParmVar 0x558a18343ff8 'str' 'const String &'
|-CXXMethodDecl 0x558a18344460 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558a183441a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558a18344220 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558a183442a0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x558a18344318 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558a183486e0 <col:34, line:267:5>
|   `-ReturnStmt 0x558a183486d0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x558a183486b8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x558a18348650 <col:9, col:51> 'int'
|         |-MemberExpr 0x558a18348620 <col:9> '<bound member function type>' ->xmessage 0x558a183440e0
|         | `-CXXThisExpr 0x558a18348610 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558a183484c8 <col:18> 'const String' lvalue ParmVar 0x558a183441a8 'landmark' 'const String &'
|         |-DeclRefExpr 0x558a183484e8 <col:28> 'const String' lvalue ParmVar 0x558a18344220 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558a183486a0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x558a18348688 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558a183485f0 <col:34, col:50> 'String' (CXXTemporary 0x558a183485f0)
|               `-CXXMemberCallExpr 0x558a18348588 <col:34, col:50> 'String'
|                 |-MemberExpr 0x558a18348518 <col:34> '<bound member function type>' ->vformat 0x558a18345020
|                 | `-CXXThisExpr 0x558a18348508 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558a183485b8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558a18348548 <col:42> 'const char *' lvalue ParmVar 0x558a183442a0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558a183485d0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558a18348568 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558a18344318 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a18344570 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x558a18348760 <col:25, line:288:5>
|   `-ReturnStmt 0x558a18348750 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x558a18348738 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x558a18348708 <col:9> 'const int' lvalue ->_nerrors 0x558a18347338
|         `-CXXThisExpr 0x558a183486f8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x558a18344780 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x558a18344628 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x558a183446a8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x558a18344a68 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558a18344848 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x558a183448c8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x558a18344940 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a18344c00 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x558a18344b38 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x558a18344e48 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558a18344cc0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x558a18344d38 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558a183489c0 <col:58, line:357:5>
|   `-ReturnStmt 0x558a183489b0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x558a18348998 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x558a18348968 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x558a18348950 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x558a18348930 <col:9, col:29> 'String' (CXXTemporary 0x558a18348930)
|             `-CallExpr 0x558a183488c0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x558a183488a8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558a18348828 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x558a18344a68 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x558a183487c8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x558a183488f8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x558a183487e8 <col:21> 'const char *' lvalue ParmVar 0x558a18344cc0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x558a18348910 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x558a18348808 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558a18344d38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a18345020 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x558a18344f10 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x558a18344f88 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558a18345178 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x558a183450e8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x558a183452c0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x558a18345230 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x558a18345560 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x558a18345378 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x558a183453f8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x558a18345470 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x558a183456c0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x558a18345630 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x558a18348ad8 <col:37, line:441:5>
|   `-IfStmt 0x558a18348ac0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x558a18348a48 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x558a18348a18 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x558a183489d8 <col:6> 'int' lvalue ParmVar 0x558a18345630 'level' 'int'
|     | `-ImplicitCastExpr 0x558a18348a30 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x558a183489f8 <col:15> 'ErrorHandler::Level' EnumConstant 0x558a18341740 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x558a18348aa8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x558a18348a78 <col:8> 'int' lvalue ->_nerrors 0x558a18347338
|         `-CXXThisExpr 0x558a18348a68 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x558a18345788 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x558a18348b70 <col:26, line:448:5>
|   `-BinaryOperator 0x558a18348b50 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x558a18348b00 <col:2> 'int' lvalue ->_nerrors 0x558a18347338
|     | `-CXXThisExpr 0x558a18348af0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x558a18348b30 <col:13> 'int' 0
|-CXXMethodDecl 0x558a18345950 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x558a18345840 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x558a183458b8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x558a18345b58 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x558a18345a10 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x558a18345a88 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x558a18345e08 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x558a18345c18 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x558a18345c98 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x558a18345d18 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x558a18345ec0 <col:59> 0 0
|-CXXMethodDecl 0x558a18346058 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x558a18345f38 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x558a18345fb8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x558a183491e0 <col:70, line:534:5>
|   |-DeclStmt 0x558a18348ce0 <line:528:2, col:20>
|   | |-VarDecl 0x558a18348b98 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x558a18348c00 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x558a18348c38 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x558a18348ca0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x558a18348db0 <line:529:2, col:23>
|   | `-VarDecl 0x558a18348d10 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x558a18348d98 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x558a18348d78 <col:18> 'const char *' lvalue ParmVar 0x558a18345f38 'begin' 'const char *'
|   |-DoStmt 0x558a18349178 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x558a183490a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x558a18349090 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x558a18349070 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x558a18348dc8 <col:6> 'const char *' lvalue Var 0x558a18348d10 'x' 'const char *'
|   | |     `-CallExpr 0x558a18348fc0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x558a18348fa8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x558a18348f60 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x558a18347810 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x558a18349028 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x558a18349010 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x558a18348e80 <col:20, col:27> 'String' (CXXTemporary 0x558a18348e80)
|   | |       |     `-CXXTemporaryObjectExpr 0x558a18348e48 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x558a18349040 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558a18348ea0 <col:30> 'const char *' lvalue Var 0x558a18348d10 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x558a18349058 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558a18348ec0 <col:33> 'const char *' lvalue ParmVar 0x558a18345fb8 'end' 'const char *'
|   | |       |-UnaryOperator 0x558a18348f00 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558a18348ee0 <col:39> 'String' lvalue Var 0x558a18348b98 'name' 'String'
|   | |       |-UnaryOperator 0x558a18348f38 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558a18348f18 <col:46> 'String' lvalue Var 0x558a18348c38 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x558a18348f50 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x558a18349160 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x558a18349148 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x558a18349128 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x558a183490f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|   |         `-ImplicitCastExpr 0x558a183490e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x558a183490c0 <col:11> 'String' lvalue Var 0x558a18348b98 'name' 'String'
|   `-ReturnStmt 0x558a183491d0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x558a183491b8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x558a18349198 <col:9> 'const char *' lvalue Var 0x558a18348d10 'x' 'const char *'
|-CXXMethodDecl 0x558a183461a8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x558a18346118 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x558a183497e8 <col:55, line:550:5>
|   `-IfStmt 0x558a183497c0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x558a18349420 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x558a18349408 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a183493f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a183493d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a183493a0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|     | |       `-DeclRefExpr 0x558a18349240 <col:6> 'const String' lvalue ParmVar 0x558a18346118 'x' 'const String &'
|     | `-BinaryOperator 0x558a18349380 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x558a18349350 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x558a18349300 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x558a183492e8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x558a183492a0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x558a18058e70 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x558a18349260 <col:11> 'const String' lvalue ParmVar 0x558a18346118 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x558a18349280 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x558a18349368 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x558a18349338 <col:19> 'char' 123
|     |-ReturnStmt 0x558a18349490 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x558a18349460 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x558a18349440 <col:13> 'const String' lvalue ParmVar 0x558a18346118 'x' 'const String &'
|     `-IfStmt 0x558a18349798 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x558a18349528 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a18349510 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a183494f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a183494c0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|       |       `-DeclRefExpr 0x558a183494a0 <col:11> 'const String' lvalue ParmVar 0x558a18346118 'x' 'const String &'
|       |-ReturnStmt 0x558a183496b0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x558a18349698 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x558a18349668 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x558a18349650 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x558a18349630 <col:13, col:29> 'String' (CXXTemporary 0x558a18349630)
|       |         `-CallExpr 0x558a183495e0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x558a183495c8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x558a18349540 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x558a18345950 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x558a18349610 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x558a18349560 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x558a18349580 <col:28> 'const String' lvalue ParmVar 0x558a18346118 'x' 'const String &'
|       `-ReturnStmt 0x558a18349788 <line:549:6, col:20>
|         `-ExprWithCleanups 0x558a18349770 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x558a18349740 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x558a18349728 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x558a18349708 <col:13, col:20> 'String' (CXXTemporary 0x558a18349708)
|                 `-CXXTemporaryObjectExpr 0x558a183496d0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x558a18346370 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x558a18346260 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x558a183462d8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a18347ab8 <col:71> 'bool' false
|-CXXRecordDecl 0x558a18346420 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x558a18346718 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x558a183466b0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x558a18346650 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x558a18346610 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x558a1803bed0 'String'
|       | `-CXXRecord 0x558a1803be40 'String'
|       |-BuiltinType 0x558a17d10580 'int'
|       `-DecayedType 0x558a181f2fa0 '__va_list_tag *' sugar
|         |-TypedefType 0x558a181f2f70 'va_list' sugar
|         | |-Typedef 0x558a17f2df90 'va_list'
|         | `-TypedefType 0x558a17f2df40 '__gnuc_va_list' sugar
|         |   |-Typedef 0x558a17e65b68 '__gnuc_va_list'
|         |   `-TypedefType 0x558a17e65ad0 '__builtin_va_list' sugar
|         |     |-Typedef 0x558a17d51d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x558a17d51ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x558a17d112d0 '__va_list_tag'
|         |         `-CXXRecord 0x558a17d11238 '__va_list_tag'
|         `-PointerType 0x558a17f33830 '__va_list_tag *'
|           `-RecordType 0x558a17d112d0 '__va_list_tag'
|             `-CXXRecord 0x558a17d11238 '__va_list_tag'
|-EnumDecl 0x558a18346770 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x558a18346870 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346de0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346850 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x558a18346830 <col:16> 'int' 1
| |-EnumConstantDecl 0x558a18346900 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346df8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a183468e0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x558a183468c0 <col:21> 'int' 2
| |-EnumConstantDecl 0x558a18346990 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346e10 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346970 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x558a18346950 <col:22> 'int' 4
| |-EnumConstantDecl 0x558a18346a20 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346e28 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346a00 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x558a183469e0 <col:17> 'int' 8
| |-EnumConstantDecl 0x558a18346ab0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346e40 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346a90 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x558a18346a70 <col:22> 'int' 16
| |-EnumConstantDecl 0x558a18346b40 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346e58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346b20 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558a18346b00 <col:19> 'int' 32
| |-EnumConstantDecl 0x558a18346bd0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346e70 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346bb0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x558a18346b90 <col:17> 'int' 64
| |-EnumConstantDecl 0x558a18346c60 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346e88 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346c40 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x558a18346c20 <col:14> 'int' 128
| |-EnumConstantDecl 0x558a18346cf0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558a18346ea0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18346cd0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x558a18346cb0 <col:16> 'int' 256
| `-EnumConstantDecl 0x558a18346d80 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x558a18346eb8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a18346d60 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x558a18346d40 <col:12> 'int' 1024
|-CXXMethodDecl 0x558a183470c8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x558a18346ee0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x558a18346f80 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x558a18347250 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x558a18347188 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x558a183472f8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x558a18347338 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x558a18347398 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x558a18347410 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x558a18347810 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x558a18347488 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x558a18347508 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x558a18347588 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x558a18347600 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x558a18347678 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x558a183476f0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x558a18347938 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x558a18347938
| `-ParmVarDecl 0x558a18347a48 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x558a18349b48 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x558a18349b48
  `-ParmVarDecl 0x558a18349c58 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a18071a00 prev 0x558a17fd7a48 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a18071af8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x558a18071b88 <col:19, col:25> col:19 public
|-TypedefDecl 0x558a18071bc0 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x558a17e65320 'uninitialized_type'
|   `-CXXRecord 0x558a17e65288 'uninitialized_type'
|-CXXConstructorDecl 0x558a18071c80 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x558a180763e0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a18076488 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x558a18076448 <col:10> 'int' 0
| `-CompoundStmt 0x558a180764d0 <col:13, line:22:5>
|-CXXConstructorDecl 0x558a18071dd0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x558a18071d40 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x558a180763e0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a18076520 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x558a180764e0 <col:10> 'unsigned int' lvalue ParmVar 0x558a18071d40 'x' 'unsigned int'
| `-CompoundStmt 0x558a18076568 <col:13, line:27:5>
|-CXXConstructorDecl 0x558a18071f28 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x558a18071e98 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x558a180763e0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a180765d0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x558a180765b8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x558a18076578 <col:10> 'int' lvalue ParmVar 0x558a18071e98 'x' 'int'
| `-CompoundStmt 0x558a18076618 <col:13, line:31:5>
|-CXXConstructorDecl 0x558a18072080 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x558a18071ff0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x558a180763e0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a18076680 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x558a18076668 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x558a18076628 <col:10> 'unsigned long' lvalue ParmVar 0x558a18071ff0 'x' 'unsigned long'
| `-CompoundStmt 0x558a180766c8 <col:13, line:35:5>
|-CXXConstructorDecl 0x558a180721d8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x558a18072148 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x558a180763e0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a18076730 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x558a18076718 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x558a180766d8 <col:10> 'long' lvalue ParmVar 0x558a18072148 'x' 'long'
| `-CompoundStmt 0x558a18076778 <col:13, line:39:5>
|-CXXConstructorDecl 0x558a18072398 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x558a180722a8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x558a180763e0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a180767f8 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a180767a8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x558a17fa6800
| |     `-DeclRefExpr 0x558a18076788 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x558a180722a8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x558a18076840 <col:20, line:44:5>
|-CXXConstructorDecl 0x558a18072528 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x558a18072460 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x558a180769a8 <col:51, line:56:5>
|   `-BinaryOperator 0x558a18076988 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x558a18076860 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x558a180763e0
|     | `-CXXThisExpr 0x558a18076850 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x558a18076970 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x558a18076958 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x558a18076938 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x558a18076908 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x558a180768f0 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x558a18076890 <col:47> 'const unsigned char *' lvalue ParmVar 0x558a18072460 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x558a18072678 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x558a180725e8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x558a18072828 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x558a18072768 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x558a18076a18 <col:56, line:68:5>
|   `-CStyleCastExpr 0x558a180769f0 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x558a180769c0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x558a18072768 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x558a180729b8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x558a180728f0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x558a18072aa8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x558a180779d8 <col:46, line:83:5>
|   `-ReturnStmt 0x558a180779c8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x558a180779b0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x558a18077980 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x558a18077838 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x558a18077720 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x558a18077608 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x558a18076a40 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x558a18072b98 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x558a18077a88 <col:31, line:88:5>
|   `-ReturnStmt 0x558a18077a78 <line:87:2, col:10>
|     `-UnaryOperator 0x558a18077a60 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x558a18077a48 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x558a18077a30 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x558a18077a00 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a180763e0
|             `-CXXThisExpr 0x558a180779f0 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x558a18072c58 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x558a18077b08 <col:34, line:93:5>
|   `-ReturnStmt 0x558a18077af8 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x558a18077ae0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x558a18077ab0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a180763e0
|         `-CXXThisExpr 0x558a18077aa0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x558a18072d28 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x558a18077b88 <col:38, line:101:5>
|   `-ReturnStmt 0x558a18077b78 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x558a18077b60 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x558a18077b30 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a180763e0
|         `-CXXThisExpr 0x558a18077b20 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x558a18072df8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x558a18077e58 <col:38, line:108:5>
|   `-ReturnStmt 0x558a18077e48 <line:107:2, col:58>
|     `-BinaryOperator 0x558a18077e28 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x558a18077d40 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x558a18077d20 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x558a18077d08 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x558a18077bb0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a180763e0
|       |   |   `-CXXThisExpr 0x558a18077ba0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x558a18077ce0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x558a18077cc8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558a18077c48 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a17fb4d38 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x558a18077c28 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x558a18077e00 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x558a18077de8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x558a18077dc8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a17fb4d38 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x558a18077da8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x558a18072eb8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x558a180780c8 <col:39, line:112:5>
|   `-ReturnStmt 0x558a180780b8 <line:111:2, col:56>
|     `-BinaryOperator 0x558a18078098 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x558a18077fb0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x558a18077f90 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x558a18077f78 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x558a18077e80 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x558a180763e0
|       |   |   `-CXXThisExpr 0x558a18077e70 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x558a18077f50 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x558a18077f38 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558a18077f18 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a17fb4d38 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x558a18077ef8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x558a18078070 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x558a18078058 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x558a18078038 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x558a17fb4d38 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x558a18078018 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x558a18072fe8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x558a180730f0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x558a18073200 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x558a180752d8 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a18075398 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558a18075460 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x558a18075658 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x558a18075510 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x558a18075588 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x558a180757d8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x558a18075718 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x558a18075920 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x558a18075890 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x558a18075ac8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x558a180759d8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x558a18075c10 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x558a18075b80 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x558a18075d58 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x558a18075cc8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x558a18075e20 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x558a18075ee0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x558a18076058 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x558a18075f90 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x558a18076120 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x558a18076208 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x558a180762b0 <col:51> "" ""
|-TypedefDecl 0x558a18076350 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x558a17fd7ae0 'IPAddress'
|   `-CXXRecord 0x558a18071a00 'IPAddress'
|-AccessSpecDecl 0x558a180763a8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x558a180763e0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x558a18076a88 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x558a18076a88
| `-ParmVarDecl 0x558a18076b98 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x558a18076c38 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a18076d48 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x558a180763e0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x558a18077928 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x558a180778e0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x558a180763e0
| |     `-CXXStaticCastExpr 0x558a180778b0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x558a18077880 <col:7> 'IPAddress' lvalue ParmVar 0x558a18076d48 '' 'IPAddress &&'
| `-CompoundStmt 0x558a18077970 <col:7>
`-CXXDestructorDecl 0x558a18077638 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a181f1fe8 prev 0x558a18237128 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a181f20e0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x558a181f2170 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x558a181f22a8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x558a181f21a8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558a181f36d0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558a181f36b0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558a181f3248 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558a181f3760 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558a181f3720 <col:17> 'ErrorHandler *' lvalue ParmVar 0x558a181f21a8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558a181f32b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558a181f37e0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558a181f37a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558a181f3310 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558a181f3820 <col:54> 'bool' false
| `-CompoundStmt 0x558a181f3928 <col:61, line:38:5>
|   `-BinaryOperator 0x558a181f3908 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x558a181f38a0 <col:9> 'const Element *' lvalue ->_context 0x558a181f31e8
|     | `-CXXThisExpr 0x558a181f3890 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x558a181f38f0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x558a181f38d0 <col:20> 'int' 0
|-CXXConstructorDecl 0x558a181f24b8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558a181f2368 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x558a181f23e0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558a181f3708 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558a181f36e8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x558a181f31e8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x558a181f3980 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x558a181f3940 <col:20> 'const Element *' lvalue ParmVar 0x558a181f2368 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x558a181f3248 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558a181f3a00 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558a181f39c0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x558a181f23e0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558a181f32b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558a181f3a80 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558a181f3a40 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x558a181f3310 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558a181f3ac0 <col:73> 'bool' false
| `-CompoundStmt 0x558a181f3b38 <col:80, line:46:5>
|-CXXMethodDecl 0x558a181f25e8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x558a181f3bb0 <col:36, line:51:5>
|   `-ReturnStmt 0x558a181f3ba0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x558a181f3b88 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x558a181f3b58 <col:16> 'const Element *const' lvalue ->_context 0x558a181f31e8
|         `-CXXThisExpr 0x558a181f3b48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558a181f26d8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x558a181f3c30 <col:32, line:57:5>
|   `-ReturnStmt 0x558a181f3c20 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x558a181f3c08 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x558a181f3bd8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x558a181f3248
|         `-CXXThisExpr 0x558a181f3bc8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558a181f2798 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x558a181f2920 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x558a181f2850 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558a181f2a70 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x558a181f29e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558a181f2bc0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x558a181f2b30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558a181f2dc8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x558a181f2c78 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x558a181f2cf0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x558a181f30f8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x558a181f2e88 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x558a181f2f08 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x558a181f2fd0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x558a181f31b0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x558a181f31e8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x558a181f3248 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x558a181f32b0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x558a181f3310 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x558a181f3360 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x558a181f3360
| `-ParmVarDecl 0x558a181f3478 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x558a181f3518 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x558a181f3518
| `-ParmVarDecl 0x558a181f3628 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x558a18355c70 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a182ff990 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x558a182ffb68 prev 0x558a182ff990 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558a182ffbf8 <col:46, col:52> col:46 public
|-TypedefDecl 0x558a182ffc20 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a183017f0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x558a183017a0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x558a183000d0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x558a182fffd0 'type'
|     `-TemplateSpecializationType 0x558a182fff60 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x558a182ffe40 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x558a182ffe20 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x558a182ffe00 <col:24> 'unsigned long' 4
|       `-RecordType 0x558a182fff40 'char_array<4>'
|         `-ClassTemplateSpecialization 0x558a182ffe60 'char_array'
|-TypedefDecl 0x558a183018a8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x558a18301870 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x558a18301850 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x558a183017f0 'type'
|     `-ElaboratedType 0x558a183017a0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x558a183000d0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x558a182fffd0 'type'
|         `-TemplateSpecializationType 0x558a182fff60 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x558a182ffe40 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x558a182ffe20 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x558a182ffe00 <col:24> 'unsigned long' 4
|           `-RecordType 0x558a182fff40 'char_array<4>'
|             `-ClassTemplateSpecialization 0x558a182ffe60 'char_array'
|-CXXMethodDecl 0x558a18301a28 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x558a18301938 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x558a18301b18 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558a18301bf8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x558a18301ec8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558a18301dd0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x558a18302108 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a18301f80 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a18301ff8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a183022d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a183021c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a18302240 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a18302438 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558a18302508 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558a18302758 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a183025c8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558a18302640 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a183029b8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x558a18302828 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558a183028a0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a18302b78 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558a18302a88 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a18302d38 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558a18302c40 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a18302df0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a18302ea0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558a183030d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558a18302f50 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558a18302fc8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558a183097a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558a18303280 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x558a18309870 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x558a183098c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558a18309910 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a182fe398 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558a182fe5a8 prev 0x558a182fe398 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558a182ff900 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x558a182ff8b0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x558a182ff890 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x558a182ff740 'type'
|     `-SubstTemplateTypeParmType 0x558a182ff560 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x558a17fd5d20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a17fd5cc8 'T'
|       `-RecordType 0x558a182ff0b0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x558a182fefc8 'sized_array_memory'
|-FieldDecl 0x558a18309960 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x558a183099b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558a183099e8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|   |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558a1800d9b8 'T'
|   `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a18309a78 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x558a18309a40 'int &'
|   `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|     |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a1800d9b8 'T'
|     `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a18309b38 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x558a18309b00 'const int &'
|   `-QualType 0x558a182fe641 'const int' const
|     `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a18309bc8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x558a18309b90 'int *'
|   `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|     |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a1800d9b8 'T'
|     `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a18309c58 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x558a18309c20 'const int *'
|   `-QualType 0x558a182fe641 'const int' const
|     `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a1830a840 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x558a1830a7f0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x558a1830a7d0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x558a1830a760 'type'
|     `-SubstTemplateTypeParmType 0x558a1830a520 'int' sugar
|       |-TemplateTypeParmType 0x558a17fe0f30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a17fe0ee0 'T'
|       `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a1830a8a8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x558a18309b00 'const int &'
|   `-QualType 0x558a182fe641 'const int' const
|     `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a1830a900 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a1830a968 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x558a18309b90 'int *'
|   `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|     |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558a1800d9b8 'T'
|     `-BuiltinType 0x558a17d10580 'int'
|-TypedefDecl 0x558a1830a9d0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x558a18309c20 'const int *'
|   `-QualType 0x558a182fe641 'const int' const
|     `-SubstTemplateTypeParmType 0x558a182fe640 'int' sugar
|       |-TemplateTypeParmType 0x558a1800da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558a1800d9b8 'T'
|       `-BuiltinType 0x558a17d10580 'int'
|-EnumDecl 0x558a1830aa28 <line:134:5> col:5
| `-EnumConstantDecl 0x558a1830ab20 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558a1830ab00 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558a1800f098 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558a1800f070 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558a1800f050 <col:40> 'int' 1
|-CXXConstructorDecl 0x558a1830aba8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558a1830adf8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a1830ac60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a1830ad00 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x558a1830b0b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x558a1830afa0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x558a1830b378 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x558a1830b260 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x558a1830b6c0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x558a1830b5a0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x558a1830b9d0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x558a1830b8b0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x558a1830bcc0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a1830bb08 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a1830bb80 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a1830bde8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558a1830bec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a1830bf20 <col:30> Inherited
|-CXXMethodDecl 0x558a1830bf68 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558a1830c018 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a1830c070 <col:30> Inherited
|-CXXMethodDecl 0x558a1830c138 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a1830c1e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a1830c240 <col:30> Inherited
|-CXXMethodDecl 0x558a1830c288 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a1830c338 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a1830c390 <col:30> Inherited
|-CXXMethodDecl 0x558a1830c3d8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a1830c488 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a1830c4e0 <col:30> Inherited
|-CXXMethodDecl 0x558a1830c528 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558a1830c5d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558a1830c630 <col:30> Inherited
|-CXXMethodDecl 0x558a1830c658 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a1830c708 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558a1830c7b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558a1830c978 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a1830c868 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558a1830c8e0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a1830cac8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558a1830ca38 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a1830cc78 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x558a1830cb80 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a1830cd30 <col:20>
| `-OptimizeNoneAttr 0x558a1830cd88 <col:30>
|-CXXMethodDecl 0x558a1830cea8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x558a1830cdb0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558a1830cf60 <col:20>
| `-OptimizeNoneAttr 0x558a1830cfb8 <col:30>
|-CXXMethodDecl 0x558a1830d070 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a1830cfe0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a1830d1b8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a1830d128 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a1830d2e8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x558a1830d418 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x558a1830d4e8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x558a1830d5b8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x558a1830d6f8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558a1830d668 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a1830d840 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558a1830d7b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558a1830d988 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x558a1830d8f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a1830da40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558a1830db40 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558a1830dab0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558a1830dbf8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558a1830dcb8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x558a1830ddb8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x558a1830df38 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558a1830de78 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x558a1830e6f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558a1830dff0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x558a1830e658 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x558a1830e558 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x558a1830e7d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558a1830e928 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558a1830e898 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a1830e9e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558a1830ec28 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558a1830eaa0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558a1830eb18 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558a1830ede8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x558a1830ecf8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558a1830f038 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x558a1830eeb0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558a1830ef28 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558a1830f0f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558a1830f358 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x558a1830f260 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x558a1830f428 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a182fc508 prev 0x558a181f8b48 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a182fc600 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x558a182fc6f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x558a183211b0 <col:16, line:828:9>
|-CXXDestructorDecl 0x558a182fc7e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x558a183211c0 <col:25, line:830:9>
|-CXXMethodDecl 0x558a182fc8e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x558a182fc990 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x558a182fca38 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558a182fca38
| `-ParmVarDecl 0x558a182fcb48 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x558a182fd308 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558a182fd308
  `-ParmVarDecl 0x558a182fd418 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a181f8958 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x558a181f8ab8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x558a181f8b48 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x558a182de2c0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x558a182de3c8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x558a182de2f8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a183109e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a183109c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x558a182de6e8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x558a182de560 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x558a182de5d8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a18310a20 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a18310a00 <col:59> 'int' 0
|-CXXConstructorDecl 0x558a182de8c0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558a182de7b0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x558a182de828 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a18310a58 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a18310a38 <col:55> 'int' 0
|-CXXConstructorDecl 0x558a182dec78 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558a182dea60 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x558a182dead8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x558a182deb50 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558a18310a90 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558a18310a70 <col:31> 'int' 0
|-CXXConstructorDecl 0x558a182dee38 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x558a182ded78 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x558a182def30 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x558a182df118 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x558a182df020 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x558a182df208 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x558a18310e40 <col:24, line:291:5>
|   `-ReturnStmt 0x558a18310e30 <line:290:9, col:79>
|     `-BinaryOperator 0x558a18310e10 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x558a18310ce8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x558a18310c40 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x558a18310c20 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x558a18310b18 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x558a18310b00 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x558a18310ae8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x558a18310ab8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x558a182fe330
|       | |   |       `-CXXThisExpr 0x558a18310aa8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x558a18310c08 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x558a18310bf0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x558a18310bb8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x558a18310b88 <col:28, col:35> '<bound member function type>' ->size 0x558a182bfd08
|       | |           `-ImplicitCastExpr 0x558a18310bd8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x558a18310b70 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x558a18310b40 <col:28> 'Vector<String> *const' lvalue ->_conf 0x558a182fe330
|       | |                 `-CXXThisExpr 0x558a18310b30 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x558a18310cd0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x558a18310cb8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x558a18310ca0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x558a18310c70 <col:47> 'Args::Slot *const' lvalue ->_slots 0x558a1830f570
|       |         `-CXXThisExpr 0x558a18310c60 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x558a18310df0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x558a18310dd8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558a18310dc0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558a18310d80 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558a18310d68 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558a18310d18 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558a1830f620
|         |     |   `-CXXThisExpr 0x558a18310d08 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558a18310d48 <col:73> 'int' 0
|         `-IntegerLiteral 0x558a18310da0 <col:79> 'int' 0
|-CXXMethodDecl 0x558a182df2c8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x558a18311018 <col:32, line:296:5>
|   `-ReturnStmt 0x558a18311008 <line:295:9, col:49>
|     `-BinaryOperator 0x558a18310fe8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x558a18310ec8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x558a18310eb0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x558a18310e98 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x558a18310e68 <col:17> 'Args::Slot *const' lvalue ->_slots 0x558a1830f570
|       |       `-CXXThisExpr 0x558a18310e58 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x558a18310fc8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x558a18310fb0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558a18310f98 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558a18310f58 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558a18310f40 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558a18310ef0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558a1830f620
|         |     |   `-CXXThisExpr 0x558a18310ee0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558a18310f20 <col:43> 'int' 0
|         `-IntegerLiteral 0x558a18310f78 <col:49> 'int' 0
|-CXXMethodDecl 0x558a182df3b8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x558a18311228 <col:19, line:306:5>
|   |-IfStmt 0x558a18311148 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x558a18311088 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x558a18311070 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x558a18311040 <col:13> 'Vector<String> *' lvalue ->_conf 0x558a182fe330
|   | |     `-CXXThisExpr 0x558a18311030 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x558a18311128 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x558a183110f8 <col:13, col:20> '<bound member function type>' ->clear 0x558a182c2708
|   |     `-ImplicitCastExpr 0x558a183110e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x558a183110b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x558a182fe330
|   |         `-CXXThisExpr 0x558a183110a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x558a183111d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x558a183111a0 <col:9, col:16> '<bound member function type>' .clear 0x558a1830f0f8
|   |   `-MemberExpr 0x558a18311170 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x558a1830f510
|   |     `-CXXThisExpr 0x558a18311160 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x558a18311218 <line:305:9, col:17>
|     `-UnaryOperator 0x558a18311200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a183111f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a182df638 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x558a182df540 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x558a182df7b8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x558a182df6f0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x558a182dfb38 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x558a182df860 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x558a182dfa98 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x558a182df908 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x558a182df980 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x558a18311548 <col:67, line:327:5>
|     |-WhileStmt 0x558a183114f8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x558a18311310 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x558a18311290 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558a1822f5f8 0x558a18078bd8 0x558a180788b0 0x558a18069080 0x558a18068d30 0x558a18068620 0x558a1803af90 0x558a17fc8460
|     | | |-DeclRefExpr 0x558a18311250 <col:16> 'Iter' lvalue ParmVar 0x558a182df908 'begin' 'Iter'
|     | | `-DeclRefExpr 0x558a18311270 <col:25> 'Iter' lvalue ParmVar 0x558a182df980 'end' 'Iter'
|     | `-CompoundStmt 0x558a183114d8 <col:30, line:325:9>
|     |   |-CallExpr 0x558a18311478 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x558a18311358 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x558a18311448 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x558a183113d8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|     |   |   `-DeclRefExpr 0x558a183113b8 <col:24> 'Iter' lvalue ParmVar 0x558a182df908 'begin' 'Iter'
|     |   `-UnaryOperator 0x558a183114c0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x558a183114a0 <col:15> 'Iter' lvalue ParmVar 0x558a182df908 'begin' 'Iter'
|     `-ReturnStmt 0x558a18311538 <line:326:9, col:17>
|       `-UnaryOperator 0x558a18311520 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18311510 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a182dfc40 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x558a182dfbb0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x558a182dfd88 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x558a182dfcf8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x558a182dfe50 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x558a18311628 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x558a183115c8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x558a18311578 <col:9> '<bound member function type>' ->reset_from 0x558a1830f998
|   | | `-CXXThisExpr 0x558a18311568 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x558a183115a8 <col:20> 'int' 0
|   `-ReturnStmt 0x558a18311618 <line:352:9, col:17>
|     `-UnaryOperator 0x558a18311600 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a183115f0 <col:17> 'Args *' this
|-VarDecl 0x558a182dff08 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a182dff70 <col:38> 'int' 1
|-VarDecl 0x558a182e0000 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a182e0068 <col:39> 'int' 2
|-VarDecl 0x558a182e00f8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a182e0160 <col:39> 'int' 4
|-VarDecl 0x558a182e01f0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x558a182e0258 <col:39> 'int' 8
|-FunctionTemplateDecl 0x558a182e05d8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x558a182e02d0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182e0538 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558a182e0380 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e0428 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x558a183130a8 <col:43, line:371:5>
|     `-ReturnStmt 0x558a18313098 <line:370:9, col:34>
|       `-CallExpr 0x558a18313060 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18311658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183116d8 <col:21> 'const char *' lvalue ParmVar 0x558a182e0380 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a183116f8 <col:30> 'int' 0
|         `-DeclRefExpr 0x558a18313040 <col:33> 'T' lvalue ParmVar 0x558a182e0428 'x' 'T &'
|-FunctionTemplateDecl 0x558a182e0908 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x558a182e0640 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182e0868 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558a182e06f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e0798 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558a183131f8 <col:45, line:375:5>
|     `-ReturnStmt 0x558a183131e8 <line:374:9, col:42>
|       `-CallExpr 0x558a183131b0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183130d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18313150 <col:21> 'const char *' lvalue ParmVar 0x558a182e06f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18313170 <col:30> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int'
|         `-DeclRefExpr 0x558a18313190 <col:41> 'T' lvalue ParmVar 0x558a182e0798 'x' 'T &'
|-FunctionTemplateDecl 0x558a182e0c38 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x558a182e0970 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182e0b98 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558a182e0a20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e0ac8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558a18313348 <col:45, line:379:5>
|     `-ReturnStmt 0x558a18313338 <line:378:9, col:43>
|       `-CallExpr 0x558a18313300 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18313220 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183132a0 <col:21> 'const char *' lvalue ParmVar 0x558a182e0a20 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a183132c0 <col:30> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int'
|         `-DeclRefExpr 0x558a183132e0 <col:42> 'T' lvalue ParmVar 0x558a182e0ac8 'x' 'T &'
|-FunctionTemplateDecl 0x558a182e0f68 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x558a182e0ca0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558a182e0ec8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558a182e0d50 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558a182e0df8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x558a18313548 <col:46, line:383:5>
| |   `-ReturnStmt 0x558a18313538 <line:382:9, col:55>
| |     `-CallExpr 0x558a18313500 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558a18313370 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558a183133f0 <col:21> 'const char *' lvalue ParmVar 0x558a182e0d50 'keyword' 'const char *'
| |       |-BinaryOperator 0x558a183134c0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x558a18313470 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x558a18313450 <col:30> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x558a183134a8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x558a18313488 <col:42> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x558a183134e0 <col:54> 'T' lvalue ParmVar 0x558a182e0df8 'x' 'T &'
| `-CXXMethodDecl 0x558a183560d8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x558a18355ef0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x558a18355fc8 <col:40, col:43> col:43 x 'IPAddress &'
|-FunctionTemplateDecl 0x558a182e1368 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x558a182e0fd0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182e12c8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x558a182e1080 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e1100 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558a182e11a8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x558a18313688 <col:54, line:388:5>
|     |-CallExpr 0x558a18313610 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18313560 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558a183135a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558a183135b0 <col:30> 'const char *' lvalue ParmVar 0x558a182e1080 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a183135d0 <col:39> 'int' lvalue ParmVar 0x558a182e1100 'flags' 'int'
|     | `-DeclRefExpr 0x558a183135f0 <col:46> 'T' lvalue ParmVar 0x558a182e11a8 'x' 'T &'
|     `-ReturnStmt 0x558a18313678 <line:387:9, col:17>
|       `-UnaryOperator 0x558a18313660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18313650 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182e1818 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x558a182e13d8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a182e1458 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a182e1778 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558a182e1518 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e15b8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x558a182e1658 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a183137f8 <col:74, line:403:5>
|     `-ReturnStmt 0x558a183137e8 <line:402:9, col:56>
|       `-CallExpr 0x558a183137a8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183136b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18313728 <col:28> 'const char *' lvalue ParmVar 0x558a182e1518 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18313748 <col:37> 'int' 0
|         |-DeclRefExpr 0x558a18313768 <col:40> 'T' lvalue ParmVar 0x558a182e15b8 'x' 'T &'
|         `-DeclRefExpr 0x558a18313788 <col:43> 'const V' lvalue ParmVar 0x558a182e1658 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a182e1c88 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558a182e1888 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a182e1908 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a182e1be8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558a182e19c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e1a68 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x558a182e1b08 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a18313960 <col:76, line:407:5>
|     `-ReturnStmt 0x558a18313950 <line:406:9, col:65>
|       `-CallExpr 0x558a18313910 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18313820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18313890 <col:28> 'const char *' lvalue ParmVar 0x558a182e19c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a183138b0 <col:37> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int'
|         |-DeclRefExpr 0x558a183138d0 <col:49> 'T' lvalue ParmVar 0x558a182e1a68 'x' 'T &'
|         `-DeclRefExpr 0x558a183138f0 <col:52> 'const V' lvalue ParmVar 0x558a182e1b08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a182e21d8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x558a182e1cf8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a182e1d78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a182e2138 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558a182e1e38 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e1eb8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558a182e1f58 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x558a182e1ff8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a18313ac8 <col:85, line:412:5>
|     |-CallExpr 0x558a18313a48 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18313978 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558a183139b8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558a183139c8 <col:37> 'const char *' lvalue ParmVar 0x558a182e1e38 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a183139e8 <col:46> 'int' lvalue ParmVar 0x558a182e1eb8 'flags' 'int'
|     | |-DeclRefExpr 0x558a18313a08 <col:53> 'T' lvalue ParmVar 0x558a182e1f58 'x' 'T &'
|     | `-DeclRefExpr 0x558a18313a28 <col:56> 'const V' lvalue ParmVar 0x558a182e1ff8 'default_value' 'const V &'
|     `-ReturnStmt 0x558a18313ab8 <line:411:9, col:17>
|       `-UnaryOperator 0x558a18313aa0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18313a90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182e2668 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x558a182e2250 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e22c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182e25c8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182e2388 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e2400 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e24a8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x558a18313c48 <col:53, line:425:5>
|     `-ReturnStmt 0x558a18313c38 <line:424:9, col:42>
|       `-CallExpr 0x558a18313bf8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18313af8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18313b78 <col:21> 'const char *' lvalue ParmVar 0x558a182e2388 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18313b98 <col:30> 'int' 0
|         |-DeclRefExpr 0x558a18313bb8 <col:33> 'P' lvalue ParmVar 0x558a182e2400 'parser' 'P'
|         `-DeclRefExpr 0x558a18313bd8 <col:41> 'T' lvalue ParmVar 0x558a182e24a8 'x' 'T &'
|-FunctionTemplateDecl 0x558a182e2ab8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x558a182e26d8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e2758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182e2a18 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182e2818 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e2890 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e2938 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558a18313dc0 <col:55, line:429:5>
|     `-ReturnStmt 0x558a18313db0 <line:428:9, col:50>
|       `-CallExpr 0x558a18313d70 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18313c70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18313cf0 <col:21> 'const char *' lvalue ParmVar 0x558a182e2818 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18313d10 <col:30> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int'
|         |-DeclRefExpr 0x558a18313d30 <col:41> 'P' lvalue ParmVar 0x558a182e2890 'parser' 'P'
|         `-DeclRefExpr 0x558a18313d50 <col:49> 'T' lvalue ParmVar 0x558a182e2938 'x' 'T &'
|-FunctionTemplateDecl 0x558a182e2f08 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x558a182e2b28 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e2ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182e2e68 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182e2c68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e2ce0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e2d88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558a18313f38 <col:55, line:433:5>
|     `-ReturnStmt 0x558a18313f28 <line:432:9, col:51>
|       `-CallExpr 0x558a18313ee8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18313de8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18313e68 <col:21> 'const char *' lvalue ParmVar 0x558a182e2c68 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18313e88 <col:30> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int'
|         |-DeclRefExpr 0x558a18313ea8 <col:42> 'P' lvalue ParmVar 0x558a182e2ce0 'parser' 'P'
|         `-DeclRefExpr 0x558a18313ec8 <col:50> 'T' lvalue ParmVar 0x558a182e2d88 'x' 'T &'
|-FunctionTemplateDecl 0x558a182e3358 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x558a182e2f78 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e2ff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182e32b8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182e30b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e3130 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e31d8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x558a18314160 <col:56, line:437:5>
|     `-ReturnStmt 0x558a18314150 <line:436:9, col:63>
|       `-CallExpr 0x558a18314110 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18313f60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18313fe0 <col:21> 'const char *' lvalue ParmVar 0x558a182e30b8 'keyword' 'const char *'
|         |-BinaryOperator 0x558a183140b0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558a18314060 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558a18314040 <col:30> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558a18314098 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558a18314078 <col:42> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558a183140d0 <col:54> 'P' lvalue ParmVar 0x558a182e3130 'parser' 'P'
|         `-DeclRefExpr 0x558a183140f0 <col:62> 'T' lvalue ParmVar 0x558a182e31d8 'x' 'T &'
|-FunctionTemplateDecl 0x558a182e3888 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x558a182e33c8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e3448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182e37e8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a182e3508 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e3588 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558a182e3600 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e36a8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x558a183142c8 <col:64, line:442:5>
|     |-CallExpr 0x558a18314248 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18314178 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558a183141b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558a183141c8 <col:30> 'const char *' lvalue ParmVar 0x558a182e3508 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a183141e8 <col:39> 'int' lvalue ParmVar 0x558a182e3588 'flags' 'int'
|     | |-DeclRefExpr 0x558a18314208 <col:46> 'P' lvalue ParmVar 0x558a182e3600 'parser' 'P'
|     | `-DeclRefExpr 0x558a18314228 <col:54> 'T' lvalue ParmVar 0x558a182e36a8 'x' 'T &'
|     `-ReturnStmt 0x558a183142b8 <line:441:9, col:17>
|       `-UnaryOperator 0x558a183142a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18314290 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182e3e88 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x558a182e3900 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e3978 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558a182e39f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a182e3de8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558a182e3ac0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e3b38 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e3bd8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x558a182e3ca8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a18314460 <col:84, line:458:5>
|     `-ReturnStmt 0x558a18314450 <line:457:9, col:64>
|       `-CallExpr 0x558a18314408 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183142f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18314368 <col:28> 'const char *' lvalue ParmVar 0x558a182e3ac0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18314388 <col:37> 'int' 0
|         |-DeclRefExpr 0x558a183143a8 <col:40> 'P' lvalue ParmVar 0x558a182e3b38 'parser' 'P'
|         |-DeclRefExpr 0x558a183143c8 <col:48> 'T' lvalue ParmVar 0x558a182e3bd8 'x' 'T &'
|         `-DeclRefExpr 0x558a183143e8 <col:51> 'const V' lvalue ParmVar 0x558a182e3ca8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a182e4408 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558a182e3f00 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e3f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558a182e3ff8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a182e4368 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558a182e40c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e4138 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e41d8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x558a182e4278 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a183145f0 <col:86, line:462:5>
|     `-ReturnStmt 0x558a183145e0 <line:461:9, col:73>
|       `-CallExpr 0x558a18314598 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18314488 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183144f8 <col:28> 'const char *' lvalue ParmVar 0x558a182e40c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18314518 <col:37> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int'
|         |-DeclRefExpr 0x558a18314538 <col:49> 'P' lvalue ParmVar 0x558a182e4138 'parser' 'P'
|         |-DeclRefExpr 0x558a18314558 <col:57> 'T' lvalue ParmVar 0x558a182e41d8 'x' 'T &'
|         `-DeclRefExpr 0x558a18314578 <col:60> 'const V' lvalue ParmVar 0x558a182e4278 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558a182e4a68 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x558a182e4480 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e44f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558a182e4578 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a182e49c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558a182e4640 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e46c0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558a182e4738 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e47d8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x558a182e4878 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x558a18314780 <col:95, line:467:5>
|     |-CallExpr 0x558a183146f8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18314608 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558a18314648 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558a18314658 <col:37> 'const char *' lvalue ParmVar 0x558a182e4640 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a18314678 <col:46> 'int' lvalue ParmVar 0x558a182e46c0 'flags' 'int'
|     | |-DeclRefExpr 0x558a18314698 <col:53> 'P' lvalue ParmVar 0x558a182e4738 'parser' 'P'
|     | |-DeclRefExpr 0x558a183146b8 <col:61> 'T' lvalue ParmVar 0x558a182e47d8 'x' 'T &'
|     | `-DeclRefExpr 0x558a183146d8 <col:64> 'const V' lvalue ParmVar 0x558a182e4878 'default_value' 'const V &'
|     `-ReturnStmt 0x558a18314770 <line:466:9, col:17>
|       `-UnaryOperator 0x558a18314758 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18314748 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182e5048 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x558a182e4ae8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e4b68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a182e4be8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a182e4fa8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a182e4cb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e4d28 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e4dc8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a182e4e68 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a18314928 <col:63, line:481:5>
|     `-ReturnStmt 0x558a18314918 <line:480:9, col:47>
|       `-CallExpr 0x558a183148d0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183147b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18314830 <col:21> 'const char *' lvalue ParmVar 0x558a182e4cb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18314850 <col:30> 'int' 0
|         |-DeclRefExpr 0x558a18314870 <col:33> 'P' lvalue ParmVar 0x558a182e4d28 'parser' 'P'
|         |-DeclRefExpr 0x558a18314890 <col:41> 'T1' lvalue ParmVar 0x558a182e4dc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x558a183148b0 <col:45> 'T2' lvalue ParmVar 0x558a182e4e68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558a182e55c8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x558a182e50c0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e5138 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a182e51b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a182e5528 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a182e5280 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e52f8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e5398 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a182e5438 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a18314ac8 <col:65, line:485:5>
|     `-ReturnStmt 0x558a18314ab8 <line:484:9, col:55>
|       `-CallExpr 0x558a18314a70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18314950 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183149d0 <col:21> 'const char *' lvalue ParmVar 0x558a182e5280 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a183149f0 <col:30> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int'
|         |-DeclRefExpr 0x558a18314a10 <col:41> 'P' lvalue ParmVar 0x558a182e52f8 'parser' 'P'
|         |-DeclRefExpr 0x558a18314a30 <col:49> 'T1' lvalue ParmVar 0x558a182e5398 'x1' 'T1 &'
|         `-DeclRefExpr 0x558a18314a50 <col:53> 'T2' lvalue ParmVar 0x558a182e5438 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558a182e5b48 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x558a182e5640 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e56b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a182e5738 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a182e5aa8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a182e5800 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e5878 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e5918 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a182e59b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a18314c68 <col:65, line:489:5>
|     `-ReturnStmt 0x558a18314c58 <line:488:9, col:56>
|       `-CallExpr 0x558a18314c10 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18314af0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18314b70 <col:21> 'const char *' lvalue ParmVar 0x558a182e5800 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18314b90 <col:30> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int'
|         |-DeclRefExpr 0x558a18314bb0 <col:42> 'P' lvalue ParmVar 0x558a182e5878 'parser' 'P'
|         |-DeclRefExpr 0x558a18314bd0 <col:50> 'T1' lvalue ParmVar 0x558a182e5918 'x1' 'T1 &'
|         `-DeclRefExpr 0x558a18314bf0 <col:54> 'T2' lvalue ParmVar 0x558a182e59b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558a182e60c8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x558a182e5bc0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e5c38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a182e5cb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a182e6028 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a182e5d80 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182e5df8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558a182e5e98 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a182e5f38 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a18314eb8 <col:66, line:493:5>
|     `-ReturnStmt 0x558a18314ea8 <line:492:9, col:68>
|       `-CallExpr 0x558a18314e60 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18314c90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18314d10 <col:21> 'const char *' lvalue ParmVar 0x558a182e5d80 'keyword' 'const char *'
|         |-BinaryOperator 0x558a18314de0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558a18314d90 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558a18314d70 <col:30> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558a18314dc8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558a18314da8 <col:42> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558a18314e00 <col:54> 'P' lvalue ParmVar 0x558a182e5df8 'parser' 'P'
|         |-DeclRefExpr 0x558a18314e20 <col:62> 'T1' lvalue ParmVar 0x558a182e5e98 'x1' 'T1 &'
|         `-DeclRefExpr 0x558a18314e40 <col:66> 'T2' lvalue ParmVar 0x558a182e5f38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558a182eae38 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x558a182e6140 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182e61b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a182e6238 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a182ead98 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a182eaa10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182eaa90 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558a182eab08 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558a182eaba8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558a182eac48 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x558a18315048 <col:74, line:498:5>
|     |-CallExpr 0x558a18314fc0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18314ed0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558a18314f10 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558a18314f20 <col:30> 'const char *' lvalue ParmVar 0x558a182eaa10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a18314f40 <col:39> 'int' lvalue ParmVar 0x558a182eaa90 'flags' 'int'
|     | |-DeclRefExpr 0x558a18314f60 <col:46> 'P' lvalue ParmVar 0x558a182eab08 'parser' 'P'
|     | |-DeclRefExpr 0x558a18314f80 <col:54> 'T1' lvalue ParmVar 0x558a182eaba8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x558a18314fa0 <col:58> 'T2' lvalue ParmVar 0x558a182eac48 'x2' 'T2 &'
|     `-ReturnStmt 0x558a18315038 <line:497:9, col:17>
|       `-UnaryOperator 0x558a18315020 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18315010 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182eb198 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x558a182eaeb8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182eb0f8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a182eaf70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182eafe8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x558a18315190 <col:52, line:509:5>
|     `-ReturnStmt 0x558a18315180 <line:508:9, col:44>
|       `-CallExpr 0x558a18315148 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18315078 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183150e8 <col:26> 'const char *' lvalue ParmVar 0x558a182eaf70 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18315108 <col:35> 'int' 0
|         `-DeclRefExpr 0x558a18315128 <col:38> 'P' lvalue ParmVar 0x558a182eafe8 'parser' 'P'
|-FunctionTemplateDecl 0x558a182eb498 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x558a182eb200 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182eb3f8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a182eb2b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182eb328 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558a183152d0 <col:54, line:513:5>
|     `-ReturnStmt 0x558a183152c0 <line:512:9, col:52>
|       `-CallExpr 0x558a18315288 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183151b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18315228 <col:26> 'const char *' lvalue ParmVar 0x558a182eb2b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18315248 <col:35> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int'
|         `-DeclRefExpr 0x558a18315268 <col:46> 'P' lvalue ParmVar 0x558a182eb328 'parser' 'P'
|-FunctionTemplateDecl 0x558a182eb798 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x558a182eb500 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182eb6f8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a182eb5b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182eb628 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558a18315410 <col:54, line:517:5>
|     `-ReturnStmt 0x558a18315400 <line:516:9, col:53>
|       `-CallExpr 0x558a183153c8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183152f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18315368 <col:26> 'const char *' lvalue ParmVar 0x558a182eb5b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18315388 <col:35> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int'
|         `-DeclRefExpr 0x558a183153a8 <col:47> 'P' lvalue ParmVar 0x558a182eb628 'parser' 'P'
|-FunctionTemplateDecl 0x558a182eba98 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x558a182eb800 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182eb9f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a182eb8b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182eb928 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x558a18315600 <col:55, line:521:5>
|     `-ReturnStmt 0x558a183155f0 <line:520:9, col:65>
|       `-CallExpr 0x558a183155b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18315438 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183154a8 <col:26> 'const char *' lvalue ParmVar 0x558a182eb8b0 'keyword' 'const char *'
|         |-BinaryOperator 0x558a18315578 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x558a18315528 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558a18315508 <col:35> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558a18315560 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558a18315540 <col:47> 'const int' lvalue Var 0x558a182e0000 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558a18315598 <col:59> 'P' lvalue ParmVar 0x558a182eb928 'parser' 'P'
|-FunctionTemplateDecl 0x558a182ebe68 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x558a182ebb00 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182ebdc8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558a182ebbb0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ebc30 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558a182ebca8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x558a18315740 <col:63, line:526:5>
|     |-CallExpr 0x558a183156c8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18315618 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x558a18315658 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x558a18315668 <col:35> 'const char *' lvalue ParmVar 0x558a182ebbb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558a18315688 <col:44> 'int' lvalue ParmVar 0x558a182ebc30 'flags' 'int'
|     | `-DeclRefExpr 0x558a183156a8 <col:51> 'P' lvalue ParmVar 0x558a182ebca8 'parser' 'P'
|     `-ReturnStmt 0x558a18315730 <line:525:9, col:17>
|       `-UnaryOperator 0x558a18315718 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18315708 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182ec2b8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x558a182ebed8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ebf58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ec218 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182ec018 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ec090 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ec138 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x558a18315898 <col:58, line:541:5>
|     `-ReturnStmt 0x558a18315888 <line:540:9, col:39>
|       `-CallExpr 0x558a18315850 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18315770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183157f0 <col:21> 'const char *' lvalue ParmVar 0x558a182ec018 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18315810 <col:30> 'P' lvalue ParmVar 0x558a182ec090 'parser' 'P'
|         `-DeclRefExpr 0x558a18315830 <col:38> 'T' lvalue ParmVar 0x558a182ec138 'x' 'T &'
|-FunctionTemplateDecl 0x558a182ec708 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x558a182ec328 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ec3a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ec668 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182ec468 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ec4e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ec588 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558a183159d0 <col:60, line:545:5>
|     `-ReturnStmt 0x558a183159c0 <line:544:9, col:41>
|       `-CallExpr 0x558a18315988 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183158c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18315928 <col:23> 'const char *' lvalue ParmVar 0x558a182ec468 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18315948 <col:32> 'P' lvalue ParmVar 0x558a182ec4e0 'parser' 'P'
|         `-DeclRefExpr 0x558a18315968 <col:40> 'T' lvalue ParmVar 0x558a182ec588 'x' 'T &'
|-FunctionTemplateDecl 0x558a182ecb58 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x558a182ec778 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ec7f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ecab8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182ec8b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ec930 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ec9d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558a18315b08 <col:60, line:549:5>
|     `-ReturnStmt 0x558a18315af8 <line:548:9, col:41>
|       `-CallExpr 0x558a18315ac0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183159f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18315a60 <col:23> 'const char *' lvalue ParmVar 0x558a182ec8b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18315a80 <col:32> 'P' lvalue ParmVar 0x558a182ec930 'parser' 'P'
|         `-DeclRefExpr 0x558a18315aa0 <col:40> 'T' lvalue ParmVar 0x558a182ec9d8 'x' 'T &'
|-FunctionTemplateDecl 0x558a182ecfa8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x558a182ecbc8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ecc48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ecf08 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182ecd08 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ecd80 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ece28 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x558a18315c40 <col:61, line:553:5>
|     `-ReturnStmt 0x558a18315c30 <line:552:9, col:42>
|       `-CallExpr 0x558a18315bf8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18315b30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18315b98 <col:24> 'const char *' lvalue ParmVar 0x558a182ecd08 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18315bb8 <col:33> 'P' lvalue ParmVar 0x558a182ecd80 'parser' 'P'
|         `-DeclRefExpr 0x558a18315bd8 <col:41> 'T' lvalue ParmVar 0x558a182ece28 'x' 'T &'
|-FunctionTemplateDecl 0x558a182ed488 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x558a182ed018 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ed098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ed3e8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a182ed158 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ed1d8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558a182ed250 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ed2f8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x558a18315db8 <col:69, line:557:5>
|     `-ReturnStmt 0x558a18315da8 <line:556:9, col:46>
|       `-CallExpr 0x558a18315d68 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18315c68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18315ce8 <col:21> 'const char *' lvalue ParmVar 0x558a182ed158 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18315d08 <col:30> 'int' lvalue ParmVar 0x558a182ed1d8 'flags' 'int'
|         |-DeclRefExpr 0x558a18315d28 <col:37> 'P' lvalue ParmVar 0x558a182ed250 'parser' 'P'
|         `-DeclRefExpr 0x558a18315d48 <col:45> 'T' lvalue ParmVar 0x558a182ed2f8 'x' 'T &'
|-FunctionTemplateDecl 0x558a182ed798 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x558a182ed500 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182ed6f8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558a182ed5b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ed628 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x558a18315ef8 <col:56, line:571:5>
|     `-ReturnStmt 0x558a18315ee8 <line:570:9, col:48>
|       `-CallExpr 0x558a18315eb0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18315de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18315e50 <col:30> 'const char *' lvalue ParmVar 0x558a182ed5b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18315e70 <col:39> 'int' 0
|         `-DeclRefExpr 0x558a18315e90 <col:42> 'P' lvalue ParmVar 0x558a182ed628 'parser' 'P'
|-FunctionTemplateDecl 0x558a182edb28 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x558a182ed800 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182eda88 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558a182ed8b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ed930 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558a182ed9a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558a183160c8 <col:67, line:576:5>
|     |-CallExpr 0x558a18316050 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18315f10 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558a18315f50 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558a18315f60 <col:39> 'const char *' lvalue ParmVar 0x558a182ed8b0 'keyword' 'const char *'
|     | |-BinaryOperator 0x558a18316010 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558a18315fc0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558a18315f80 <col:48> 'int' lvalue ParmVar 0x558a182ed930 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558a18315ff8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558a18315fd8 <col:56> 'const int' lvalue Var 0x558a182e01f0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x558a18316030 <col:68> 'P' lvalue ParmVar 0x558a182ed9a8 'parser' 'P'
|     `-ReturnStmt 0x558a183160b8 <line:575:9, col:17>
|       `-UnaryOperator 0x558a183160a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18316090 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182edf78 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x558a182edb98 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182edc18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182eded8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558a182edcd8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182edd50 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558a182eddf8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x558a18316238 <col:62, line:592:5>
|     `-ReturnStmt 0x558a18316228 <line:591:9, col:51>
|       `-CallExpr 0x558a183161e8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183160f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18316168 <col:30> 'const char *' lvalue ParmVar 0x558a182edcd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18316188 <col:39> 'int' 0
|         |-DeclRefExpr 0x558a183161a8 <col:42> 'P' lvalue ParmVar 0x558a182edd50 'parser' 'P'
|         `-DeclRefExpr 0x558a183161c8 <col:50> 'T' lvalue ParmVar 0x558a182eddf8 'x' 'T &'
|-FunctionTemplateDecl 0x558a182ee458 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x558a182edfe8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ee068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ee3b8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a182ee128 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ee1a8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558a182ee220 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ee2c8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x558a18316430 <col:73, line:597:5>
|     |-CallExpr 0x558a183163b0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a18316250 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558a18316290 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558a183162a0 <col:39> 'const char *' lvalue ParmVar 0x558a182ee128 'keyword' 'const char *'
|     | |-BinaryOperator 0x558a18316350 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558a18316300 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558a183162c0 <col:48> 'int' lvalue ParmVar 0x558a182ee1a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558a18316338 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558a18316318 <col:56> 'const int' lvalue Var 0x558a182e01f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558a18316370 <col:68> 'P' lvalue ParmVar 0x558a182ee220 'parser' 'P'
|     | `-DeclRefExpr 0x558a18316390 <col:76> 'T' lvalue ParmVar 0x558a182ee2c8 'x' 'T &'
|     `-ReturnStmt 0x558a18316420 <line:596:9, col:17>
|       `-UnaryOperator 0x558a18316408 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a183163f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182eea08 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x558a182ee4d0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ee548 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ee968 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x558a182ee608 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ee680 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ee840 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a183165a0 <col:65, line:614:5>
|     `-ReturnStmt 0x558a18316590 <line:613:9, col:46>
|       `-CallExpr 0x558a18316550 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a18316460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a183164d0 <col:25> 'const char *' lvalue ParmVar 0x558a182ee608 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a183164f0 <col:34> 'int' 0
|         |-DeclRefExpr 0x558a18316510 <col:37> 'P' lvalue ParmVar 0x558a182ee680 'parser' 'P'
|         `-DeclRefExpr 0x558a18316530 <col:45> 'Vector<T>' lvalue ParmVar 0x558a182ee840 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558a182eee38 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x558a182eea78 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182eed98 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x558a182eeb30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182eec80 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a183167c0 <col:55, line:618:5>
|     `-ReturnStmt 0x558a183167b0 <line:617:9, col:55>
|       `-CallExpr 0x558a18316770 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183165c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18316638 <col:25> 'const char *' lvalue ParmVar 0x558a182eeb30 'keyword' 'const char *'
|         |-IntegerLiteral 0x558a18316658 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x558a18316730 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558a18316750 <col:54> 'Vector<T>' lvalue ParmVar 0x558a182eec80 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558a182ef408 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x558a182eeea0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182eef18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ef368 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558a182eefd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ef058 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a182ef0d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558a182ef220 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a183169b8 <col:76, line:623:5>
|     |-CallExpr 0x558a18316938 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558a183167d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x558a18316818 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x558a18316828 <col:34> 'const char *' lvalue ParmVar 0x558a182eefd8 'keyword' 'const char *'
|     | |-BinaryOperator 0x558a183168d8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x558a18316888 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558a18316848 <col:43> 'int' lvalue ParmVar 0x558a182ef058 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558a183168c0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558a183168a0 <col:51> 'const int' lvalue Var 0x558a182e01f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558a183168f8 <col:63> 'P' lvalue ParmVar 0x558a182ef0d0 'parser' 'P'
|     | `-DeclRefExpr 0x558a18316918 <col:71> 'Vector<T>' lvalue ParmVar 0x558a182ef220 'x' 'Vector<T> &'
|     `-ReturnStmt 0x558a183169a8 <line:622:9, col:17>
|       `-UnaryOperator 0x558a18316990 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18316980 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182ef948 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x558a182ef480 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182ef4f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182ef8a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x558a182ef5b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182ef638 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a182ef780 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558a18316c20 <col:66, line:627:5>
|     `-ReturnStmt 0x558a18316c10 <line:626:9, col:59>
|       `-CallExpr 0x558a18316bd0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558a183169e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558a18316a58 <col:25> 'const char *' lvalue ParmVar 0x558a182ef5b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558a18316a78 <col:34> 'int' lvalue ParmVar 0x558a182ef638 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x558a18316b90 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558a18316bb0 <col:58> 'Vector<T>' lvalue ParmVar 0x558a182ef780 'x' 'Vector<T> &'
|-CXXMethodDecl 0x558a182ef9d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x558a18316ca0 <col:25, line:633:5>
|   `-ReturnStmt 0x558a18316c90 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x558a18316c78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558a18316c48 <col:16> 'const bool' lvalue ->_status 0x558a182fe198
|         `-CXXThisExpr 0x558a18316c38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558a182efb58 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x558a182efa90 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x558a18316d88 <col:27, line:639:5>
|   |-BinaryOperator 0x558a18316d30 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a18316cb8 <col:9> 'bool' lvalue ParmVar 0x558a182efa90 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a18316d18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a18316ce8 <col:13> 'bool' lvalue ->_status 0x558a182fe198
|   |     `-CXXThisExpr 0x558a18316cd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558a18316d78 <line:638:9, col:17>
|     `-UnaryOperator 0x558a18316d60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a18316d50 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a182efcd8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558a182efc18 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x558a18316e78 <col:39, line:644:5>
|   |-BinaryOperator 0x558a18316e20 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a18316da8 <col:9> 'bool' lvalue ParmVar 0x558a182efc18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a18316e08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a18316dd8 <col:13> 'const bool' lvalue ->_status 0x558a182fe198
|   |     `-CXXThisExpr 0x558a18316dc8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558a18316e68 <line:643:9, col:17>
|     `-UnaryOperator 0x558a18316e50 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a18316e40 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558a182efda0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x558a18316f20 <col:30, line:651:5>
|   `-ReturnStmt 0x558a18316f10 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x558a18316ef8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558a18316ec8 <col:16> 'bool' lvalue ->_read_status 0x558a181f3310
|         `-ImplicitCastExpr 0x558a18316ea8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x558a18316e98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558a182efee8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x558a182efe58 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x558a18317028 <col:32, line:658:5>
|   |-BinaryOperator 0x558a18316fd0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a18316f38 <col:9> 'bool' lvalue ParmVar 0x558a182efe58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a18316fb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a18316f88 <col:13> 'bool' lvalue ->_read_status 0x558a181f3310
|   |     `-ImplicitCastExpr 0x558a18316f68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558a18316f58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558a18317018 <line:657:9, col:17>
|     `-UnaryOperator 0x558a18317000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a18316ff0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558a182f0038 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558a182effa8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x558a18317138 <col:44, line:663:5>
|   |-BinaryOperator 0x558a183170e0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558a18317048 <col:9> 'bool' lvalue ParmVar 0x558a182effa8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558a183170c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558a18317098 <col:13> 'bool' lvalue ->_read_status 0x558a181f3310
|   |     `-ImplicitCastExpr 0x558a18317078 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558a18317068 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558a18317128 <line:662:9, col:17>
|     `-UnaryOperator 0x558a18317110 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a18317100 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558a182f0100 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x558a182f01c8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x558a182f0290 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x558a182f0358 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x558a182f0668 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x558a182f03f8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182f05c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x558a182f04d8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x558a183174f0 <col:19, line:706:5>
|     `-IfStmt 0x558a183174c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x558a18317238 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x558a183173f8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x558a183173c8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x558a18317388 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x558a18317290 <col:42> '<bound member function type>' ->simple_slot 0x558a18310650
|       |     | `-CXXThisExpr 0x558a18317280 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x558a18317328 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x558a183172e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x558a1807d678
|       |     | `-DeclRefExpr 0x558a183172c0 <col:55> 'T' lvalue ParmVar 0x558a182f04d8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x558a18317368 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x558a183174b8 <line:705:13, col:34>
|         `-CallExpr 0x558a18317490 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x558a18317418 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x558a18317470 <col:33> 'T' lvalue ParmVar 0x558a182f04d8 'x' 'T &'
|-FunctionTemplateDecl 0x558a182f0938 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x558a182f06c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182f0898 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x558a182f07a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x558a183178d0 <col:31, line:717:5>
|     |-DeclStmt 0x558a18317630 <line:713:9, col:23>
|     | `-VarDecl 0x558a18317518 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x558a18317608 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558a18317590 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558a183175e8 <col:21> 'T' lvalue ParmVar 0x558a182f07a8 'x' 'T &'
|     |-IfStmt 0x558a18317880 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x558a18317728 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x558a18317860 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558a18317800 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558a18317790 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|     |   | `-DeclRefExpr 0x558a18317770 <col:14> 'T *' lvalue Var 0x558a18317518 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x558a18317840 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x558a183178b8 <line:716:9, col:16>
|       `-DeclRefExpr 0x558a18317898 <col:16> 'T *' lvalue Var 0x558a18317518 's' 'T *'
|-FunctionTemplateDecl 0x558a182f0d48 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x558a182f0998 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a182f0a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a182f0ca8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x558a182f0af8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x558a182f0b98 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x558a18317be0 <col:37, line:726:5>
|     |-IfStmt 0x558a18317b70 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x558a18317b90 <line:723:13, col:26>
|     | | `-VarDecl 0x558a18317938 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x558a18317a28 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x558a183179b0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x558a18317a08 <col:25> 'T' lvalue ParmVar 0x558a182f0af8 'x' 'T &'
|     | |-DeclRefExpr 0x558a18317a50 <col:16> 'T *' lvalue Var 0x558a18317938 's' 'T *'
|     | `-BinaryOperator 0x558a18317b50 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558a18317b00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558a18317a90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|     |   | `-DeclRefExpr 0x558a18317a70 <col:14> 'T *' lvalue Var 0x558a18317938 's' 'T *'
|     |   `-DeclRefExpr 0x558a18317b30 <col:18> 'const V' lvalue ParmVar 0x558a182f0b98 'value' 'const V &'
|     `-ReturnStmt 0x558a18317bd0 <line:725:9, col:17>
|       `-UnaryOperator 0x558a18317bb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558a18317ba8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558a182f1148 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x558a182f0db0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558a182f10a8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x558a182f0e60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182f0ee0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a182f0f88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x558a18318a00 <col:65, line:737:5>
|     |-DeclStmt 0x558a18317c78 <line:732:9, col:26>
|     | `-VarDecl 0x558a18317c10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a183189c8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x558a183189e8 <line:733:13, col:58>
|       | `-VarDecl 0x558a18317ca0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a18317e80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a18317e50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a18317e38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a18317e18 <col:26, col:58> 'String' (CXXTemporary 0x558a18317e18)
|       |           `-CXXMemberCallExpr 0x558a18317da8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a18317d18 <col:26> '<bound member function type>' ->find 0x558a1830fc68
|       |             | `-CXXThisExpr 0x558a18317d08 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a18317de0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a18317d48 <col:31> 'const char *' lvalue ParmVar 0x558a182f0e60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a18317df8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a18317d68 <col:40> 'int' lvalue ParmVar 0x558a182f0ee0 'flags' 'int'
|       |             `-DeclRefExpr 0x558a18317d88 <col:47> 'Args::Slot *' lvalue Var 0x558a18317c10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a18317f38 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a18317f20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a18317f00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a18317ed0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|       |       `-ImplicitCastExpr 0x558a18317eb8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a18317e98 <col:20> 'String' lvalue Var 0x558a18317ca0 'str' 'String'
|       `-CompoundStmt 0x558a183189a8 <col:61, line:736:9>
|         |-DeclStmt 0x558a183183f0 <line:734:13, col:76>
|         | `-VarDecl 0x558a18317f88 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558a183183c0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a18318330 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a18318378 <col:60> 'T' lvalue ParmVar 0x558a182f0f88 'variable' 'T &'
|         |     `-UnaryOperator 0x558a183183a8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a18318398 <col:71> 'Args *' this
|         `-CallExpr 0x558a18318978 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x558a18318418 <col:13> '<bound member function type>' ->postparse 0x558a1830fe78
|           | `-CXXThisExpr 0x558a18318408 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558a18318938 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558a18318448 <col:23> 'T *' lvalue Var 0x558a18317f88 's' 'T *'
|           | `-CallExpr 0x558a183188f8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558a183186d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x558a183187d0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x558a183187f0 <col:86> 'String' lvalue Var 0x558a18317ca0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558a183188a0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a18318830 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|           |   | `-DeclRefExpr 0x558a18318810 <col:92> 'T *' lvalue Var 0x558a18317f88 's' 'T *'
|           |   `-UnaryOperator 0x558a183188e0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558a183188d0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x558a18318958 <col:103> 'Args::Slot *' lvalue Var 0x558a18317c10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a182f1698 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558a182f11b8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a182f1238 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558a182f15f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558a182f12f8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182f1378 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558a182f1418 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x558a182f14b8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x558a183198a0 <col:88, line:745:5>
|     |-DeclStmt 0x558a18318a98 <line:741:9, col:26>
|     | `-VarDecl 0x558a18318a30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a18318cb8 <line:742:9, col:55>
|     | `-VarDecl 0x558a18318ac0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558a18318ca0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558a18318c70 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558a18318c58 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558a18318c38 <col:22, col:54> 'String' (CXXTemporary 0x558a18318c38)
|     |           `-CXXMemberCallExpr 0x558a18318bc8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558a18318b38 <col:22> '<bound member function type>' ->find 0x558a1830fc68
|     |             | `-CXXThisExpr 0x558a18318b28 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558a18318c00 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a18318b68 <col:27> 'const char *' lvalue ParmVar 0x558a182f12f8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558a18318c18 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a18318b88 <col:36> 'int' lvalue ParmVar 0x558a182f1378 'flags' 'int'
|     |             `-DeclRefExpr 0x558a18318ba8 <col:43> 'Args::Slot *' lvalue Var 0x558a18318a30 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558a18319090 <line:743:9, col:72>
|     | `-VarDecl 0x558a18318d08 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558a18319060 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558a18318fd0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558a18319018 <col:56> 'T' lvalue ParmVar 0x558a182f1418 'variable' 'T &'
|     |     `-UnaryOperator 0x558a18319048 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558a18319038 <col:67> 'Args *' this
|     `-CallExpr 0x558a18319870 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x558a183190b8 <col:9> '<bound member function type>' ->postparse 0x558a1830fe78
|       | `-CXXThisExpr 0x558a183190a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558a18319830 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558a183190e8 <col:19> 'T *' lvalue Var 0x558a18318d08 's' 'T *'
|       | `-ParenExpr 0x558a18319810 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x558a183197e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558a183197c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558a183197b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558a18319790 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558a18319760 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|       |     |       `-ImplicitCastExpr 0x558a18319748 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558a18319108 <col:25> 'String' lvalue Var 0x558a18318ac0 'str' 'String'
|       |     |-CallExpr 0x558a183195b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558a18319390 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x558a18319490 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x558a183194b0 <col:89> 'String' lvalue Var 0x558a18318ac0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558a18319560 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558a183194f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|       |     | | `-DeclRefExpr 0x558a183194d0 <col:95> 'T *' lvalue Var 0x558a18318d08 's' 'T *'
|       |     | `-UnaryOperator 0x558a183195a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558a18319590 <col:99> 'Args *' this
|       |     `-ParenExpr 0x558a18319728 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x558a18319708 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x558a183196d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558a18319688 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558a18319618 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|       |         | | `-DeclRefExpr 0x558a183195f8 <col:109> 'T *' lvalue Var 0x558a18318d08 's' 'T *'
|       |         | `-DeclRefExpr 0x558a183196b8 <col:113> 'const V' lvalue ParmVar 0x558a182f14b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558a183196f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x558a18319850 <col:128> 'Args::Slot *' lvalue Var 0x558a18318a30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a182f1bc8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x558a182f1710 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182f1788 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182f1b28 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a182f1848 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182f18c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a182f1940 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558a182f19e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x558a1831a498 <col:75, line:754:5>
|     |-DeclStmt 0x558a18319948 <line:749:9, col:26>
|     | `-VarDecl 0x558a183198e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a1831a460 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x558a1831a480 <line:750:13, col:58>
|       | `-VarDecl 0x558a18319970 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a18319b50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a18319b20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a18319b08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a18319ae8 <col:26, col:58> 'String' (CXXTemporary 0x558a18319ae8)
|       |           `-CXXMemberCallExpr 0x558a18319a78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a183199e8 <col:26> '<bound member function type>' ->find 0x558a1830fc68
|       |             | `-CXXThisExpr 0x558a183199d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a18319ab0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a18319a18 <col:31> 'const char *' lvalue ParmVar 0x558a182f1848 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a18319ac8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a18319a38 <col:40> 'int' lvalue ParmVar 0x558a182f18c8 'flags' 'int'
|       |             `-DeclRefExpr 0x558a18319a58 <col:47> 'Args::Slot *' lvalue Var 0x558a183198e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a18319c08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a18319bf0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a18319bd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a18319ba0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|       |       `-ImplicitCastExpr 0x558a18319b88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a18319b68 <col:20> 'String' lvalue Var 0x558a18319970 'str' 'String'
|       `-CompoundStmt 0x558a1831a440 <col:61, line:753:9>
|         |-DeclStmt 0x558a18319fe0 <line:751:13, col:63>
|         | `-VarDecl 0x558a18319c58 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558a18319fb0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a18319f20 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a18319f68 <col:47> 'T' lvalue ParmVar 0x558a182f19e8 'variable' 'T &'
|         |     `-UnaryOperator 0x558a18319f98 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a18319f88 <col:58> 'Args *' this
|         `-CallExpr 0x558a1831a410 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x558a1831a008 <col:13> '<bound member function type>' ->postparse 0x558a1830fe78
|           | `-CXXThisExpr 0x558a18319ff8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558a1831a3d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558a1831a038 <col:23> 'T *' lvalue Var 0x558a18319c58 's' 'T *'
|           | `-CallExpr 0x558a1831a390 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558a1831a220 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558a1831a268 <col:56> 'P' lvalue ParmVar 0x558a182f1940 'parser' 'P'
|           |   |-DeclRefExpr 0x558a1831a288 <col:64> 'String' lvalue Var 0x558a18319970 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558a1831a338 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a1831a2c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|           |   | `-DeclRefExpr 0x558a1831a2a8 <col:70> 'T *' lvalue Var 0x558a18319c58 's' 'T *'
|           |   `-UnaryOperator 0x558a1831a378 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558a1831a368 <col:74> 'Args *' this
|           `-DeclRefExpr 0x558a1831a3f0 <col:81> 'Args::Slot *' lvalue Var 0x558a183198e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a182f2228 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558a182f1c40 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558a182f1cb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x558a182f1d38 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558a182f2188 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558a182f1e00 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182f1e80 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558a182f1ef8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x558a182f1f98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x558a182f2038 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x558a1831d578 <col:98, line:762:5>
|     |-DeclStmt 0x558a1831a530 <line:758:9, col:26>
|     | `-VarDecl 0x558a1831a4c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a1831a750 <line:759:9, col:55>
|     | `-VarDecl 0x558a1831a558 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558a1831a738 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558a1831a708 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558a1831a6f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558a1831a6d0 <col:22, col:54> 'String' (CXXTemporary 0x558a1831a6d0)
|     |           `-CXXMemberCallExpr 0x558a1831a660 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558a1831a5d0 <col:22> '<bound member function type>' ->find 0x558a1830fc68
|     |             | `-CXXThisExpr 0x558a1831a5c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558a1831a698 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a1831a600 <col:27> 'const char *' lvalue ParmVar 0x558a182f1e00 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558a1831a6b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558a1831a620 <col:36> 'int' lvalue ParmVar 0x558a182f1e80 'flags' 'int'
|     |             `-DeclRefExpr 0x558a1831a640 <col:43> 'Args::Slot *' lvalue Var 0x558a1831a4c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558a1831ab70 <line:760:9, col:59>
|     | `-VarDecl 0x558a1831a7a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558a1831ab40 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558a1831aab0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558a1831aaf8 <col:43> 'T' lvalue ParmVar 0x558a182f1f98 'variable' 'T &'
|     |     `-UnaryOperator 0x558a1831ab28 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558a1831ab18 <col:54> 'Args *' this
|     `-CallExpr 0x558a1831d548 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x558a1831ab98 <col:9> '<bound member function type>' ->postparse 0x558a1830fe78
|       | `-CXXThisExpr 0x558a1831ab88 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558a1831d508 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558a1831abc8 <col:19> 'T *' lvalue Var 0x558a1831a7a8 's' 'T *'
|       | `-ParenExpr 0x558a1831d4e8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x558a1831d4b8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558a1831d4a0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558a1831d488 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558a1831d468 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558a1831d438 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|       |     |       `-ImplicitCastExpr 0x558a1831d420 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558a1831abe8 <col:25> 'String' lvalue Var 0x558a1831a558 'str' 'String'
|       |     |-CallExpr 0x558a1831af40 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558a1831add0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x558a1831ae18 <col:59> 'P' lvalue ParmVar 0x558a182f1ef8 'parser' 'P'
|       |     | |-DeclRefExpr 0x558a1831ae38 <col:67> 'String' lvalue Var 0x558a1831a558 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558a1831aee8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558a1831ae78 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|       |     | | `-DeclRefExpr 0x558a1831ae58 <col:73> 'T *' lvalue Var 0x558a1831a7a8 's' 'T *'
|       |     | `-UnaryOperator 0x558a1831af28 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558a1831af18 <col:77> 'Args *' this
|       |     `-ParenExpr 0x558a1831d400 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x558a1831d3e0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x558a1831d3b0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558a1831b010 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558a1831afa0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|       |         | | `-DeclRefExpr 0x558a1831af80 <col:87> 'T *' lvalue Var 0x558a1831a7a8 's' 'T *'
|       |         | `-DeclRefExpr 0x558a1831d390 <col:91> 'const V' lvalue ParmVar 0x558a182f2038 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558a1831d3d0 <col:98> 'bool' true
|       `-DeclRefExpr 0x558a1831d528 <col:106> 'Args::Slot *' lvalue Var 0x558a1831a4c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a182f2898 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x558a182f22a8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182f2328 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558a182f23a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558a182f27f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558a182f2470 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182f24f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558a182f2568 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x558a182f2608 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x558a182f26a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x558a1831e558 <col:60, line:773:5>
|     |-DeclStmt 0x558a1831d620 <line:767:9, col:26>
|     | `-VarDecl 0x558a1831d5b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a1831e520 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x558a1831e540 <line:768:13, col:58>
|       | `-VarDecl 0x558a1831d648 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a1831d828 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a1831d7f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a1831d7e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a1831d7c0 <col:26, col:58> 'String' (CXXTemporary 0x558a1831d7c0)
|       |           `-CXXMemberCallExpr 0x558a1831d750 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a1831d6c0 <col:26> '<bound member function type>' ->find 0x558a1830fc68
|       |             | `-CXXThisExpr 0x558a1831d6b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a1831d788 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a1831d6f0 <col:31> 'const char *' lvalue ParmVar 0x558a182f2470 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a1831d7a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a1831d710 <col:40> 'int' lvalue ParmVar 0x558a182f24f0 'flags' 'int'
|       |             `-DeclRefExpr 0x558a1831d730 <col:47> 'Args::Slot *' lvalue Var 0x558a1831d5b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a1831d8e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a1831d8c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a1831d8a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a1831d878 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|       |       `-ImplicitCastExpr 0x558a1831d860 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a1831d840 <col:20> 'String' lvalue Var 0x558a1831d648 'str' 'String'
|       `-CompoundStmt 0x558a1831e4f8 <col:61, line:772:9>
|         |-DeclStmt 0x558a1831dc20 <line:769:13, col:66>
|         | `-VarDecl 0x558a1831d938 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x558a1831dbf0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a1831db60 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a1831dba8 <col:49> 'T1' lvalue ParmVar 0x558a182f2608 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x558a1831dbd8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a1831dbc8 <col:61> 'Args *' this
|         |-DeclStmt 0x558a1831df90 <line:770:13, col:66>
|         | `-VarDecl 0x558a1831dca8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x558a1831df60 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558a1831ded0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558a1831df18 <col:49> 'T2' lvalue ParmVar 0x558a182f26a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x558a1831df48 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558a1831df38 <col:61> 'Args *' this
|         `-CallExpr 0x558a1831e4c8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x558a1831dfb8 <col:13> '<bound member function type>' ->postparse 0x558a1830fe78
|           | `-CXXThisExpr 0x558a1831dfa8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558a1831e488 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x558a1831e028 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x558a1831dfe8 <col:23> 'T1 *' lvalue Var 0x558a1831d938 's1' 'T1 *'
|           | | `-DeclRefExpr 0x558a1831e008 <col:29> 'T2 *' lvalue Var 0x558a1831dca8 's2' 'T2 *'
|           | `-CallExpr 0x558a1831e440 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558a1831e210 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558a1831e258 <col:63> 'P' lvalue ParmVar 0x558a182f2568 'parser' 'P'
|           |   |-DeclRefExpr 0x558a1831e278 <col:71> 'String' lvalue Var 0x558a1831d648 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558a1831e328 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a1831e2b8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|           |   | `-DeclRefExpr 0x558a1831e298 <col:77> 'T1 *' lvalue Var 0x558a1831d938 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x558a1831e3e8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558a1831e378 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|           |   | `-DeclRefExpr 0x558a1831e358 <col:82> 'T2 *' lvalue Var 0x558a1831dca8 's2' 'T2 *'
|           |   `-UnaryOperator 0x558a1831e428 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558a1831e418 <col:87> 'Args *' this
|           `-DeclRefExpr 0x558a1831e4a8 <col:94> 'Args::Slot *' lvalue Var 0x558a1831d5b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a182fb608 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x558a182f2918 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182fb568 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558a182fb348 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182fb3c8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558a182fb440 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558a1831ea70 <col:67, line:780:5>
|     |-DeclStmt 0x558a1831e5f0 <line:777:9, col:26>
|     | `-VarDecl 0x558a1831e588 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558a1831ea38 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x558a1831ea58 <line:778:13, col:58>
|       | `-VarDecl 0x558a1831e618 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558a1831e7f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558a1831e7c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558a1831e7b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558a1831e790 <col:26, col:58> 'String' (CXXTemporary 0x558a1831e790)
|       |           `-CXXMemberCallExpr 0x558a1831e720 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558a1831e690 <col:26> '<bound member function type>' ->find 0x558a1830fc68
|       |             | `-CXXThisExpr 0x558a1831e680 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558a1831e758 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a1831e6c0 <col:31> 'const char *' lvalue ParmVar 0x558a182fb348 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558a1831e770 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558a1831e6e0 <col:40> 'int' lvalue ParmVar 0x558a182fb3c8 'flags' 'int'
|       |             `-DeclRefExpr 0x558a1831e700 <col:47> 'Args::Slot *' lvalue Var 0x558a1831e588 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558a1831e8b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558a1831e898 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558a1831e878 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558a1831e848 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|       |       `-ImplicitCastExpr 0x558a1831e830 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558a1831e810 <col:20> 'String' lvalue Var 0x558a1831e618 'str' 'String'
|       `-CallExpr 0x558a1831ea08 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x558a1831e8d8 <col:13> '<bound member function type>' ->postparse 0x558a1830fe78
|         | `-CXXThisExpr 0x558a1831e8c8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x558a1831e9b8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x558a1831e928 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x558a1831e908 <col:23> 'P' lvalue ParmVar 0x558a182fb440 'parser' 'P'
|         | |-DeclRefExpr 0x558a1831e970 <col:36> 'String' lvalue Var 0x558a1831e618 'str' 'String'
|         | `-UnaryOperator 0x558a1831e9a0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x558a1831e990 <col:42> 'Args *' this
|         `-DeclRefExpr 0x558a1831e9e8 <col:49> 'Args::Slot *' lvalue Var 0x558a1831e588 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558a182fb9a8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558a182fb678 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558a182fb908 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558a182fb730 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182fb7b0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558a182fb828 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x558a1831f3e0 <col:71, line:792:5>
|     |-DeclStmt 0x558a1831eb08 <line:784:9, col:26>
|     | `-VarDecl 0x558a1831eaa0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a1831ebd8 <line:785:9, col:29>
|     | `-VarDecl 0x558a1831eb38 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558a1831ebc0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558a1831eba0 <col:28> 'int' 1
|     |-WhileStmt 0x558a1831f290 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x558a1831f2b0 <line:786:16, col:61>
|     | | `-VarDecl 0x558a1831ec00 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558a1831ede0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558a1831edb0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558a1831ed98 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558a1831ed78 <col:29, col:61> 'String' (CXXTemporary 0x558a1831ed78)
|     | |           `-CXXMemberCallExpr 0x558a1831ed08 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558a1831ec78 <col:29> '<bound member function type>' ->find 0x558a1830fc68
|     | |             | `-CXXThisExpr 0x558a1831ec68 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558a1831ed40 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a1831eca8 <col:34> 'const char *' lvalue ParmVar 0x558a182fb730 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558a1831ed58 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a1831ecc8 <col:43> 'int' lvalue ParmVar 0x558a182fb7b0 'flags' 'int'
|     | |             `-DeclRefExpr 0x558a1831ece8 <col:50> 'Args::Slot *' lvalue Var 0x558a1831eaa0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558a1831ee98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a1831ee80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a1831ee60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a1831ee30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|     | |       `-ImplicitCastExpr 0x558a1831ee18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558a1831edf8 <col:23> 'String' lvalue Var 0x558a1831ec00 'str' 'String'
|     | `-CompoundStmt 0x558a1831f268 <col:64, line:790:9>
|     |   |-CallExpr 0x558a1831eff0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x558a1831eec0 <col:13> '<bound member function type>' ->postparse 0x558a1830fe78
|     |   | | `-CXXThisExpr 0x558a1831eeb0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558a1831efa0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558a1831ef10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558a1831eef0 <col:23> 'P' lvalue ParmVar 0x558a182fb828 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558a1831ef58 <col:36> 'String' lvalue Var 0x558a1831ec00 'str' 'String'
|     |   | | `-UnaryOperator 0x558a1831ef88 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558a1831ef78 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x558a1831efd0 <col:49> 'Args::Slot *' lvalue Var 0x558a1831eaa0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558a1831f188 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558a1831f020 <col:13> 'int' lvalue Var 0x558a1831eb38 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558a1831f170 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558a1831f150 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558a1831f0b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558a1831f098 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558a1831f080 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558a1831f040 <col:28> 'int' lvalue Var 0x558a1831eb38 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558a1831f060 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558a1831f138 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558a1831f108 <col:49> 'bool' lvalue ->_read_status 0x558a181f3310
|     |   |         `-ImplicitCastExpr 0x558a1831f0e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558a1831f0d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558a1831f238 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558a1831f1a8 <col:13> 'int' lvalue ParmVar 0x558a182fb7b0 'flags' 'int'
|     |     `-UnaryOperator 0x558a1831f220 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558a1831f208 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a1831f1e8 <col:23> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558a1831f3c0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558a1831f2f8 <col:9> 'bool' lvalue ->_read_status 0x558a181f3310
|       | `-ImplicitCastExpr 0x558a1831f2d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558a1831f2c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558a1831f3a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558a1831f380 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558a1831f368 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558a1831f328 <col:25> 'int' lvalue Var 0x558a1831eb38 'read_status' 'int'
|           `-IntegerLiteral 0x558a1831f348 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558a182fbe88 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558a182fba18 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182fba98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182fbde8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558a182fbb58 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182fbbd8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558a182fbc50 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x558a182fbcf8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x558a18320370 <col:84, line:805:5>
|     |-DeclStmt 0x558a1831f488 <line:796:9, col:26>
|     | `-VarDecl 0x558a1831f420 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a1831f558 <line:797:9, col:29>
|     | `-VarDecl 0x558a1831f4b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558a1831f540 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558a1831f520 <col:28> 'int' 1
|     |-DeclStmt 0x558a1831f890 <line:798:9, col:71>
|     | `-VarDecl 0x558a1831f5a8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558a1831f860 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558a1831f7d0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x558a1831f818 <col:55> 'T' lvalue ParmVar 0x558a182fbcf8 'variable' 'T &'
|     |     `-UnaryOperator 0x558a1831f848 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558a1831f838 <col:66> 'Args *' this
|     |-WhileStmt 0x558a18320220 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x558a18320240 <line:799:16, col:61>
|     | | `-VarDecl 0x558a1831f8b8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558a1831fa98 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558a1831fa68 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558a1831fa50 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558a1831fa30 <col:29, col:61> 'String' (CXXTemporary 0x558a1831fa30)
|     | |           `-CXXMemberCallExpr 0x558a1831f9c0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558a1831f930 <col:29> '<bound member function type>' ->find 0x558a1830fc68
|     | |             | `-CXXThisExpr 0x558a1831f920 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558a1831f9f8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a1831f960 <col:34> 'const char *' lvalue ParmVar 0x558a182fbb58 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558a1831fa10 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a1831f980 <col:43> 'int' lvalue ParmVar 0x558a182fbbd8 'flags' 'int'
|     | |             `-DeclRefExpr 0x558a1831f9a0 <col:50> 'Args::Slot *' lvalue Var 0x558a1831f420 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558a1831fb50 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a1831fb38 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a1831fb18 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a1831fae8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|     | |       `-ImplicitCastExpr 0x558a1831fad0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558a1831fab0 <col:23> 'String' lvalue Var 0x558a1831f8b8 'str' 'String'
|     | `-CompoundStmt 0x558a183201f8 <col:64, line:803:9>
|     |   |-CallExpr 0x558a1831ff80 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x558a1831fb78 <col:13> '<bound member function type>' ->postparse 0x558a1830fe78
|     |   | | `-CXXThisExpr 0x558a1831fb68 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x558a1831ff40 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x558a1831fba8 <col:23> 'T *' lvalue Var 0x558a1831f5a8 's' 'T *'
|     |   | | `-CallExpr 0x558a1831ff00 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x558a1831fd90 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x558a1831fdd8 <col:56> 'P' lvalue ParmVar 0x558a182fbc50 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x558a1831fdf8 <col:64> 'String' lvalue Var 0x558a1831f8b8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x558a1831fea8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x558a1831fe38 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|     |   | |   | `-DeclRefExpr 0x558a1831fe18 <col:70> 'T *' lvalue Var 0x558a1831f5a8 's' 'T *'
|     |   | |   `-UnaryOperator 0x558a1831fee8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x558a1831fed8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x558a1831ff60 <col:81> 'Args::Slot *' lvalue Var 0x558a1831f420 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558a18320118 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558a1831ffb0 <col:13> 'int' lvalue Var 0x558a1831f4b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558a18320100 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558a183200e0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558a18320048 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558a18320028 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558a18320010 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558a1831ffd0 <col:28> 'int' lvalue Var 0x558a1831f4b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558a1831fff0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558a183200c8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558a18320098 <col:49> 'bool' lvalue ->_read_status 0x558a181f3310
|     |   |         `-ImplicitCastExpr 0x558a18320078 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558a18320068 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558a183201c8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558a18320138 <col:13> 'int' lvalue ParmVar 0x558a182fbbd8 'flags' 'int'
|     |     `-UnaryOperator 0x558a183201b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558a18320198 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a18320178 <col:23> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558a18320350 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558a18320288 <col:9> 'bool' lvalue ->_read_status 0x558a181f3310
|       | `-ImplicitCastExpr 0x558a18320268 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558a18320258 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558a18320330 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558a18320310 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558a183202f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558a183202b8 <col:25> 'int' lvalue Var 0x558a1831f4b8 'read_status' 'int'
|           `-IntegerLiteral 0x558a183202d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558a182fc468 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x558a182fbf00 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558a182fbf78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558a182fc3c8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558a182fc038 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558a182fc0b8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x558a182fc130 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x558a182fc280 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x558a18321178 <col:87, line:821:5>
|     |-DeclStmt 0x558a18320420 <line:809:9, col:26>
|     | `-VarDecl 0x558a183203b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558a183204f0 <line:810:9, col:29>
|     | `-VarDecl 0x558a18320450 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558a183204d8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558a183204b8 <col:28> 'int' 1
|     |-DeclStmt 0x558a18320738 <line:811:9, col:38>
|     | `-VarDecl 0x558a18320620 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x558a18320710 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558a18320698 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558a183206f0 <col:29> 'Vector<T>' lvalue ParmVar 0x558a182fc280 'variable' 'Vector<T> &'
|     |-WhileStmt 0x558a18321028 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x558a18321048 <line:812:16, col:61>
|     | | `-VarDecl 0x558a18320760 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558a18320940 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558a18320910 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558a183208f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558a183208d8 <col:29, col:61> 'String' (CXXTemporary 0x558a183208d8)
|     | |           `-CXXMemberCallExpr 0x558a18320868 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558a183207d8 <col:29> '<bound member function type>' ->find 0x558a1830fc68
|     | |             | `-CXXThisExpr 0x558a183207c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558a183208a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a18320808 <col:34> 'const char *' lvalue ParmVar 0x558a182fc038 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558a183208b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558a18320828 <col:43> 'int' lvalue ParmVar 0x558a182fc0b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x558a18320848 <col:50> 'Args::Slot *' lvalue Var 0x558a183203b8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558a183209f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558a183209e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558a183209c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558a18320990 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558a1803f638
|     | |       `-ImplicitCastExpr 0x558a18320978 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558a18320958 <col:23> 'String' lvalue Var 0x558a18320760 'str' 'String'
|     | `-CompoundStmt 0x558a18320ff0 <col:64, line:819:9>
|     |   |-DeclStmt 0x558a18320ab8 <line:813:13, col:23>
|     |   | `-VarDecl 0x558a18320a20 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x558a18320a98 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x558a18320c38 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x558a18320ae0 <col:13> '<bound member function type>' ->postparse 0x558a1830fe78
|     |   | | `-CXXThisExpr 0x558a18320ad0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558a18320be0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558a18320b30 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558a18320b10 <col:23> 'P' lvalue ParmVar 0x558a182fc130 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558a18320b78 <col:36> 'String' lvalue Var 0x558a18320760 'str' 'String'
|     |   | | |-DeclRefExpr 0x558a18320b98 <col:41> 'T' lvalue Var 0x558a18320a20 'sx' 'T'
|     |   | | `-UnaryOperator 0x558a18320bc8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558a18320bb8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x558a18320c18 <col:53> 'Args::Slot *' lvalue Var 0x558a183203b8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x558a18320d90 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x558a18320cc8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x558a18320c98 <col:17> 'bool' lvalue ->_read_status 0x558a181f3310
|     |   | |   `-ImplicitCastExpr 0x558a18320c78 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x558a18320c68 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x558a18320d68 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x558a18320d00 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x558a18320ce0 <col:17> 'Vector<T> *' lvalue Var 0x558a18320620 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x558a18320d48 <col:30> 'T' lvalue Var 0x558a18320a20 'sx' 'T'
|     |   |-BinaryOperator 0x558a18320f10 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558a18320da8 <col:13> 'int' lvalue Var 0x558a18320450 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558a18320ef8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558a18320ed8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558a18320e40 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558a18320e20 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558a18320e08 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558a18320dc8 <col:28> 'int' lvalue Var 0x558a18320450 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558a18320de8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558a18320ec0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558a18320e90 <col:49> 'bool' lvalue ->_read_status 0x558a181f3310
|     |   |         `-ImplicitCastExpr 0x558a18320e70 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558a18320e60 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558a18320fc0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558a18320f30 <col:13> 'int' lvalue ParmVar 0x558a182fc0b8 'flags' 'int'
|     |     `-UnaryOperator 0x558a18320fa8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558a18320f90 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558a18320f70 <col:23> 'const int' lvalue Var 0x558a182dff08 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558a18321158 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558a18321090 <col:9> 'bool' lvalue ->_read_status 0x558a181f3310
|       | `-ImplicitCastExpr 0x558a18321070 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558a18321060 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558a18321138 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558a18321118 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558a18321100 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558a183210c0 <col:25> 'int' lvalue Var 0x558a18320450 'read_status' 'int'
|           `-IntegerLiteral 0x558a183210e0 <col:40> 'int' 1
|-AccessSpecDecl 0x558a182fc4e0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x558a182fc508 prev 0x558a181f8b48 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x558a182fc600 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x558a182fc6f0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x558a183211b0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x558a182fc7e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x558a183211c0 <col:25, line:830:9>
| |-CXXMethodDecl 0x558a182fc8e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x558a182fc990 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x558a182fca38 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558a182fca38
| | `-ParmVarDecl 0x558a182fcb48 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x558a182fd308 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558a182fd308
|   `-ParmVarDecl 0x558a182fd418 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x558a182fcbb8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x558a182fcd18 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x558a182fcf10 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x558a182fcdc0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x558a182fce38 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x558a183213a0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x558a182fd1c8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x558a18321210 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x558a183211d0 <col:20> 'void *' lvalue ParmVar 0x558a182fcdc0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x558a182fd230 '_slot' 'char *'
| | | `-CXXNewExpr 0x558a18321298 <col:32, col:45> 'char *' array Function 0x558a17e632b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x558a18321280 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x558a18321250 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x558a182fce38 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x558a182fd290 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x558a18321360 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x558a18321320 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x558a182fce38 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x558a18321420 <col:61, line:838:9>
| |-CXXDestructorDecl 0x558a182fd010 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x558a182fc7e0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x558a183214a8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x558a18321488 <line:840:13, col:22> 'void' array Function 0x558a17e63618 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x558a18321470 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x558a18321440 <col:22> 'char *' lvalue ->_slot 0x558a182fd230
| |         `-CXXThisExpr 0x558a18321430 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x558a182fd110 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x558a182fc8e0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x558a18321698 <col:22, line:844:9>
| |   `-CallExpr 0x558a18321600 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x558a183215e8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x558a183215c8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x558a17f6f098 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x558a18321638 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x558a18321518 <col:20> 'void *' lvalue ->_ptr 0x558a182fd1c8
| |     |   `-CXXThisExpr 0x558a18321508 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x558a18321668 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x558a18321650 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x558a18321558 <col:26> 'char *' lvalue ->_slot 0x558a182fd230
| |     |     `-CXXThisExpr 0x558a18321548 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x558a18321680 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x558a18321598 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x558a182fd290
| |         `-CXXThisExpr 0x558a18321588 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x558a182fd1c8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x558a182fd230 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x558a182fd290 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x558a182fd488 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558a182fd488
| | `-ParmVarDecl 0x558a182fd598 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x558a182fd638 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558a182fd638
|   `-ParmVarDecl 0x558a182fd748 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x558a182fd8e8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x558a182fd7b8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x558a182fd858 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x558a182fdb80 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x558a182fdd78 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x558a182fdc48 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x558a182fdef8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x558a183216d0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x558a183216b0 <col:20> 'T *' lvalue ParmVar 0x558a182fdc48 'ptr' 'T *'
|   | `-CompoundStmt 0x558a18321720 <col:25, line:854:9>
|   |-CXXMethodDecl 0x558a182fde48 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x558a182fc8e0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x558a183218d0 <col:22, line:857:9>
|   |   `-CallExpr 0x558a183218a0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x558a18321730 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x558a180277c8 0x558a17fd1af8
|   |     |-CXXOperatorCallExpr 0x558a18321830 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x558a183217c0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558a18234778 0x558a18234398 0x558a18233fc8 0x558a18233be8 0x558a18233808 0x558a18233438
|   |     | `-MemberExpr 0x558a18321790 <col:29> 'T *' lvalue ->_ptr 0x558a182fdef8
|   |     |   `-CXXThisExpr 0x558a18321780 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x558a18321870 <col:35> 'T' lvalue ->_slot 0x558a182fdf58
|   |       `-CXXThisExpr 0x558a18321860 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x558a182fdef8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x558a182fdf58 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x558a182fdfc0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x558a182fe0c0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x558a182fe110 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a182fe0a0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x558a182fe080 <col:31> 'int' 48
|-FieldDecl 0x558a182fe138 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x558a182fe198 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x558a182fe1f8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x558a182fe330 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x558a1830f510 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x558a1830f570 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x558a1830f620 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x558a1830f848 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x558a1830f750 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x558a1830f998 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x558a1830f908 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x558a1830fc68 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x558a1830fa58 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x558a1830fad8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x558a1830fb80 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x558a1830fe78 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x558a1830fd30 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x558a1830fda8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x558a1830ff48 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x558a18310098 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x558a18310000 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x558a18310428 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x558a18310158 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x558a183101d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x558a18310280 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x558a18310338 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x558a18310650 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x558a18310500 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x558a18310578 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x558a18310968 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x558a18310700 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x558a183108c8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x558a183107d8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a180304f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a18030608 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x558a18030698 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x558a18030768 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x558a18030850 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x558a18030a68 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558a18030910 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a18030c18 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558a18030b20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558a18030d60 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558a18030cd0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558a18030ea8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558a18030e18 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a18030ff0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558a18030f60 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a180310b8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x558a18031200 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x558a18031170 <col:28> col:31 'int'
|-CXXMethodDecl 0x558a180312c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x558a18031410 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x558a18031380 <col:28> col:31 'int'
|-CXXMethodDecl 0x558a18031588 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558a180314c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a180316d0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558a18031640 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a18031798 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x558a18031958 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558a18031848 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a180318c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a18031ba8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558a18031a18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a18031a90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a18031c58 <col:86> "" ""
|-CXXMethodDecl 0x558a18031ec8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x558a18031d38 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x558a18031db0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a18032078 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558a18031f88 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558a18032228 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558a18032130 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558a180324f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558a180322e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558a18032358 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a180323d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a180327d8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558a180325c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558a18032638 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a180326b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a18032890 <col:115> "" ""
|-AccessSpecDecl 0x558a18032900 <line:84:3, col:10> col:3 private
|-FieldDecl 0x558a18032938 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a18032e40 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558a18032e40
| `-ParmVarDecl 0x558a18032f48 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x558a18032fe8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558a18032fe8
| `-ParmVarDecl 0x558a180330f8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x558a18068728 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a1825b530 <col:7>
|-CXXConstructorDecl 0x558a18068800 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558a18068800
| `-ParmVarDecl 0x558a18068918 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x558a18068988 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558a18068988
| `-ParmVarDecl 0x558a18068a98 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x558a1825df30 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1824a0d8 prev 0x558a1823f2e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a1824a1d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x558a1824a2c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x558a1824a3e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x558a1824a568 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x558a1824a6e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x558a1824a868 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x558a1825b698 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558a1825bf08 <col:11>
|-CXXDestructorDecl 0x558a1825b770 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a1825b8a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558a1825b8a8
| `-ParmVarDecl 0x558a1825b9b8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x558a1825ba58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a1825ba58
| `-ParmVarDecl 0x558a1825bb68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x558a1825e928 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x558a1825ea38 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x558a1825ecb8 <col:11>
|   `-ReturnStmt 0x558a1825eca8 <col:11>
|     `-UnaryOperator 0x558a1825ec90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558a1825ec80 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x558a1825eaa8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a1825eaa8
  `-ParmVarDecl 0x558a1825ebb8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1824a8d0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a1824a9e8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x558a1824aa88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x558a1824aaf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x558a1824ab58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x558a1824abc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x558a1824ac20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x558a1824ace0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x558a1824ad40 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x558a1824ada0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x558a1825b5a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x558a1824aa88 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x558a1825bf18 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x558a1825bf70 <col:12>
|-CXXConstructorDecl 0x558a1825bbd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558a1825bbd8
| `-ParmVarDecl 0x558a1825bce8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x558a1825bd88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558a1825bd88
| `-ParmVarDecl 0x558a1825be98 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x558a1825e010 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a182389f0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558a18238b08 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x558a18238b98 <col:16, col:22> col:16 public
|-EnumDecl 0x558a18238bc0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x558a18238cc0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x558a18238da0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18238ca0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x558a18238c80 <col:21> 'int' 28
| `-EnumConstantDecl 0x558a18238d50 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x558a18238db8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a18238d30 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x558a18238d10 <col:22> 'int' 64
|-CXXMethodDecl 0x558a182390f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x558a18238de0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a18238e60 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x558a18238ed8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a18238f50 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a182391b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558a182393b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x558a18239230 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x558a182392a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a18239468 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558a182395c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x558a182394d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a18239670 <col:72> warn_unused_result ""
|-TypedefDecl 0x558a182399d0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x558a18239960 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x558a18239900 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x558a182398c0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x558a17d104e0 'void'
|       |-PointerType 0x558a17fb8d90 'unsigned char *'
|       | `-BuiltinType 0x558a17d105e0 'unsigned char'
|       |-TypedefType 0x558a17db5360 'size_t' sugar
|       | |-Typedef 0x558a17d80be0 'size_t'
|       | `-BuiltinType 0x558a17d10640 'unsigned long'
|       `-PointerType 0x558a17d10ce0 'void *'
|         `-BuiltinType 0x558a17d104e0 'void'
|-CXXMethodDecl 0x558a18239e48 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x558a18239a40 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x558a18239ab8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a18239b50 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x558a18239bd0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x558a18254540 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x558a18254528 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x558a182544f0 <col:58> 'int' 0
| |-ParmVarDecl 0x558a18239c50 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x558a18254568 <col:76> 'int' 0
| |-ParmVarDecl 0x558a18239cd0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x558a18254588 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x558a18239f18 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x558a18239f98 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558a1823a058 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x558a1823a0f8 <col:20>
| `-OptimizeNoneAttr 0x558a1823a150 <col:30>
|-CXXMethodDecl 0x558a1823a1c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x558a1823a268 <col:20>
| `-OptimizeNoneAttr 0x558a1823a2c0 <col:30>
|-CXXMethodDecl 0x558a1823a338 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x558a1823a3d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x558a1823a488 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x558a1823a528 <col:20>
| |-OptimizeNoneAttr 0x558a1823a580 <col:30>
| `-WarnUnusedResultAttr 0x558a1823a5a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x558a1823a600 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x558a1823a6a0 <col:20>
| `-OptimizeNoneAttr 0x558a1823a6f8 <col:30>
|-CXXMethodDecl 0x558a1823a748 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x558a1823a7e8 <col:20>
| `-OptimizeNoneAttr 0x558a1823a840 <col:30>
|-CXXMethodDecl 0x558a1823a888 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x558a1823a928 <col:20>
| `-OptimizeNoneAttr 0x558a1823a980 <col:30>
|-CXXMethodDecl 0x558a1823a9c8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558a1823aa88 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558a1823ab50 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a1823ac18 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a1823acd8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a1823adf8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x558a18254650 <col:54, line:99:5>
|   `-ReturnStmt 0x558a18254640 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x558a18254628 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x558a182545f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558a1824b0d8
|         `-CXXThisExpr 0x558a182545e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x558a1823af98 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x558a1823aea8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x558a18254700 <col:67, line:103:5>
|   `-BinaryOperator 0x558a182546e0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558a18254678 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558a1824b0d8
|     | `-CXXThisExpr 0x558a18254668 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558a182546c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x558a182546a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x558a1823aea8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x558a1823b090 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x558a18254780 <col:33, line:107:5>
|   `-ReturnStmt 0x558a18254770 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x558a18254758 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x558a18254728 <col:16> 'void *' lvalue ->_destructor_argument 0x558a1824b140
|         `-CXXThisExpr 0x558a18254718 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558a1823b150 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x558a18254db0 <col:25, line:113:5>
|   |-ParenExpr 0x558a18254af8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x558a18254ac8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x558a18254838 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558a18254810 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x558a182547d8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x558a182547a8 <col:24> '<bound member function type>' ->shared 0x558a1823a1c8
|   |   |       `-ImplicitCastExpr 0x558a182547f8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x558a18254798 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558a18254898 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18254878 <col:42> 'int' 0
|   |   `-CallExpr 0x558a18254a28 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x558a18254a10 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a182549f0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18254a68 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18254908 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x558a18254a80 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18254930 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a18254a98 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a18254968 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x558a18254ab0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a182549d8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a182549c0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18254988 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x558a18254cf8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x558a18254b28 <col:2> 'unsigned char *' lvalue ->_head 0x558a1824aee0
|   | | `-CXXThisExpr 0x558a18254b18 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x558a18254ce0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x558a18254cc0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x558a18254b68 <col:10> 'unsigned char *' lvalue ->_data 0x558a1824af48
|   |     | `-CXXThisExpr 0x558a18254b58 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x558a18254ca8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x558a18254c88 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x558a18254ba8 <col:18> 'unsigned char *' lvalue ->_tail 0x558a1824afb0
|   |         | `-CXXThisExpr 0x558a18254b98 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x558a18254c70 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x558a18254c50 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x558a18254be8 <col:26> 'unsigned char *' lvalue ->_end 0x558a1824b018
|   |             | `-CXXThisExpr 0x558a18254bd8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x558a18254c38 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x558a18254c18 <col:33> 'int' 0
|   `-BinaryOperator 0x558a18254d90 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558a18254d28 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558a1824b0d8
|     | `-CXXThisExpr 0x558a18254d18 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558a18254d78 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x558a18254d58 <col:16> 'int' 0
|-CXXMethodDecl 0x558a1823b290 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558a1823b200 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a1823b338 <col:20>
| |-OptimizeNoneAttr 0x558a1823b390 <col:30>
| `-WarnUnusedResultAttr 0x558a1823b3b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558a1823b488 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558a1823b3f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a1823b530 <col:20>
| |-OptimizeNoneAttr 0x558a1823b588 <col:30>
| `-WarnUnusedResultAttr 0x558a1823b5b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x558a1823b6e8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558a1823b5f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a1823b790 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x558a1823b890 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x558a1823b800 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a1823b938 <col:20>
| `-OptimizeNoneAttr 0x558a1823b990 <col:30>
|-CXXMethodDecl 0x558a1823ba58 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558a1823b9c8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a1823bb00 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x558a1823bc00 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558a1823bb70 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558a1823bca8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558a1823bda8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x558a1823bd18 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a1823be50 <col:20>
| `-OptimizeNoneAttr 0x558a1823bea8 <col:30>
|-CXXMethodDecl 0x558a1823c038 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x558a1823bee8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x558a1823bf60 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x558a182545a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x558a1823c0e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x558a1823c2e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558a1823c160 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x558a1823c1d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a1823c4f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558a1823c3a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a1823c420 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a1823c708 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x558a1823c5b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x558a1823c638 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x558a182545b8 <col:39> 'int' 0
|-CXXMethodDecl 0x558a1823c7d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x558a1823c8a0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558a1823c968 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a1823ca28 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a1823caf0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x558a1823cc38 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x558a1823cba8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x558a1823ce08 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558a1823ccf8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x558a1823cd70 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a1823ced8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x558a1823cf98 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x558a1823d038 <col:20>
| `-OptimizeNoneAttr 0x558a1823d090 <col:30>
|-CXXMethodDecl 0x558a1823d0e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558a1823d180 <col:20>
| `-OptimizeNoneAttr 0x558a1823d1d8 <col:30>
|-CXXMethodDecl 0x558a1823d228 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a1823d2e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a1823d3b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x558a1823d450 <col:20>
| `-OptimizeNoneAttr 0x558a1823d4a8 <col:30>
|-CXXMethodDecl 0x558a1823d5f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558a1823d4e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x558a1823d560 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a1823d748 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x558a1823d6b8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a1823d820 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x558a1823d8e0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x558a1823d980 <col:20>
| `-OptimizeNoneAttr 0x558a1823d9d8 <col:30>
|-CXXMethodDecl 0x558a1823da28 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558a1823dac8 <col:20>
| `-OptimizeNoneAttr 0x558a1823db20 <col:30>
|-CXXMethodDecl 0x558a1823db70 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a1823dc38 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x558a1823dcd8 <col:20>
| `-OptimizeNoneAttr 0x558a1823dd30 <col:30>
|-CXXMethodDecl 0x558a1823dd78 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x558a1823de98 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x558a1823e008 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x558a1823df48 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x558a1823e0f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x558a1823e198 <col:20>
| `-OptimizeNoneAttr 0x558a1823e1f0 <col:30>
|-CXXMethodDecl 0x558a1823e240 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x558a1823e300 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558a1823e538 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x558a1823e3b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x558a1823e428 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a1823e5e8 <col:20>
| `-OptimizeNoneAttr 0x558a1823e640 <col:30>
|-CXXMethodDecl 0x558a1823e6e8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x558a1823e788 <col:20>
| `-OptimizeNoneAttr 0x558a1823e7e0 <col:30>
|-CXXMethodDecl 0x558a1823e830 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x558a1823e8d0 <col:20>
| `-OptimizeNoneAttr 0x558a1823e928 <col:30>
|-CXXMethodDecl 0x558a1823e970 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x558a1823ea10 <col:20>
| `-OptimizeNoneAttr 0x558a1823ea68 <col:30>
|-CXXMethodDecl 0x558a1823eb68 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x558a1823eaa0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x558a1823ec10 <col:20>
| `-OptimizeNoneAttr 0x558a1823ec68 <col:30>
|-CXXMethodDecl 0x558a1823ee28 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x558a1823eca0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x558a1823ed18 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a1823eed8 <col:20>
| `-OptimizeNoneAttr 0x558a1823ef30 <col:30>
|-CXXMethodDecl 0x558a1823efd8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x558a1823f0f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x558a1823f218 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x558a1823f2b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x558a1823f2e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x558a1823f408 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x558a1823f4a8 <col:20>
| `-OptimizeNoneAttr 0x558a1823f500 <col:30>
|-CXXMethodDecl 0x558a1823f5a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x558a1823f648 <col:20>
| `-OptimizeNoneAttr 0x558a1823f6a0 <col:30>
|-AccessSpecDecl 0x558a1823f6c8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x558a1823f6f0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x558a1823f7f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x558a1823f840 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a1823f7d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x558a1823f7b0 <col:14> 'int' 48
|-CXXMethodDecl 0x558a1823f8a8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x558a1823f948 <col:20>
| `-OptimizeNoneAttr 0x558a1823f9a0 <col:30>
|-CXXMethodDecl 0x558a1823fa18 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x558a1823fab8 <col:20>
| `-OptimizeNoneAttr 0x558a1823fb10 <col:30>
|-CXXMethodDecl 0x558a1823fbd8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x558a1823fb48 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x558a1823fd78 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x558a1823ff18 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x558a1823fe28 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x558a1823ffc0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x558a182400c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a18240470 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a182400a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x558a18240080 <col:9> 'int' 0
| |-EnumConstantDecl 0x558a18240150 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a18240488 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18240130 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x558a18240110 <col:14> 'int' 1
| |-EnumConstantDecl 0x558a182401e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a182404a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a182401c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x558a182401a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x558a18240270 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a182404b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18240250 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x558a18240230 <col:14> 'int' 3
| |-EnumConstantDecl 0x558a18240300 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a182404d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a182402e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x558a182402c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x558a18240390 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558a182404e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18240370 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x558a18240350 <col:13> 'int' 5
| `-EnumConstantDecl 0x558a18240420 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x558a18240500 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a18240400 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x558a182403e0 <col:14> 'int' 6
|-CXXMethodDecl 0x558a18240568 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x558a18240608 <col:20>
| `-OptimizeNoneAttr 0x558a18240660 <col:30>
|-CXXMethodDecl 0x558a18240758 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x558a18240698 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x558a18240800 <col:20>
| `-OptimizeNoneAttr 0x558a18240858 <col:30>
|-CXXMethodDecl 0x558a182408c8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x558a182409f0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x558a18240b68 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x558a18240aa0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x558a18240c30 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x558a18240cf8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x558a18240e38 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x558a18240da8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x558a18240ee0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x558a18240fe0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558a182411e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18240fc0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x558a18240fa0 <col:23> 'int' 0
| |-EnumConstantDecl 0x558a18241070 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558a182411f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18241050 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x558a18241030 <col:45> 'int' 4
| |-EnumConstantDecl 0x558a18241100 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558a18241210 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a182410e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x558a182410c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x558a18241190 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x558a18241228 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a18241170 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x558a18241150 <col:47> 'int' 16
|-CXXMethodDecl 0x558a18241288 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x558a182413f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x558a18241338 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x558a182414a0 <col:20>
| `-OptimizeNoneAttr 0x558a182414f8 <col:30>
|-CXXMethodDecl 0x558a18241548 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x558a18254ed0 <col:18, col:36>
|   `-ReturnStmt 0x558a18254ec0 <col:20, col:33>
|     `-ImplicitCastExpr 0x558a18254ea8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x558a18254e88 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x558a18254e58 <col:27> '<bound member function type>' ->xanno 0x558a1823f5a8
|           `-CXXThisExpr 0x558a18254e48 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x558a18241640 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x558a18254fe0 <col:30, col:48>
|   `-ReturnStmt 0x558a18254fd0 <col:32, col:45>
|     `-ImplicitCastExpr 0x558a18254fb8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x558a18254f98 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x558a18254f68 <col:39> '<bound member function type>' ->xanno 0x558a1823f408
|           `-CXXThisExpr 0x558a18254f58 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x558a18241728 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x558a18255178 <col:24, col:50>
|   `-ReturnStmt 0x558a18255168 <col:26, col:47>
|     `-UnaryOperator 0x558a18255150 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a18255130 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x558a18255118 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a182550c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x558a1824a3e8
|         |   `-CXXMemberCallExpr 0x558a182550a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x558a18255078 <col:34> '<bound member function type>' ->xanno 0x558a1823f5a8
|         |       `-CXXThisExpr 0x558a18255068 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x558a182550f8 <col:46> 'int' 0
|-CXXMethodDecl 0x558a18241830 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x558a18255348 <col:36, col:62>
|   `-ReturnStmt 0x558a18255338 <col:38, col:59>
|     `-UnaryOperator 0x558a18255320 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a18255300 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558a182552e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a18255260 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x558a1824a3e8
|         |   `-CXXMemberCallExpr 0x558a18255240 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558a18255210 <col:46> '<bound member function type>' ->xanno 0x558a1823f408
|         |       `-CXXThisExpr 0x558a18255200 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558a18255290 <col:58> 'int' 0
|-CXXMethodDecl 0x558a18241948 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x558a182554e0 <col:26, col:53>
|   `-ReturnStmt 0x558a182554d0 <col:28, col:50>
|     `-UnaryOperator 0x558a182554b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a18255498 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x558a18255480 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a18255430 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x558a1824a6e8
|         |   `-CXXMemberCallExpr 0x558a18255410 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x558a182553e0 <col:36> '<bound member function type>' ->xanno 0x558a1823f5a8
|         |       `-CXXThisExpr 0x558a182553d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x558a18255460 <col:49> 'int' 0
|-CXXMethodDecl 0x558a18241a68 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x558a182556b8 <col:38, col:65>
|   `-ReturnStmt 0x558a182556a8 <col:40, col:62>
|     `-UnaryOperator 0x558a18255690 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558a18255670 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x558a18255658 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a182555c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x558a1824a6e8
|         |   `-CXXMemberCallExpr 0x558a182555a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558a18255578 <col:48> '<bound member function type>' ->xanno 0x558a1823f408
|         |       `-CXXThisExpr 0x558a18255568 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558a182555f8 <col:61> 'int' 0
|-CXXMethodDecl 0x558a18241c18 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x558a18241b20 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x558a18255d88 <col:34, line:463:5>
|   |-ParenExpr 0x558a18255bd0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x558a18255ba0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558a18255808 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a182557d8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18255728 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18255710 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a182556d0 <col:23> 'int' lvalue ParmVar 0x558a18241b20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a182556f0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a182557b8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18255788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18255748 <col:33> 'int' lvalue ParmVar 0x558a18241b20 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558a182557a0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558a18255768 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558a18255868 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18255848 <col:56> 'int' 0
|   |   `-CallExpr 0x558a18255b00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558a18255ae8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18255ac8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18255b40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18255958 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558a18255b58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18255988 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a18255b70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a182559c0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x558a18255b88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18255ab0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a18255a98 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18255a58 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x558a18255d78 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x558a18255d60 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x558a18255d40 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558a18255d10 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558a18255cc0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x558a1824a3e8
|         |   `-CXXMemberCallExpr 0x558a18255ca0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558a18255c70 <col:9> '<bound member function type>' ->xanno 0x558a1823f408
|         |       `-CXXThisExpr 0x558a18255c60 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x558a18255d28 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x558a18255cf0 <col:21> 'int' lvalue ParmVar 0x558a18241b20 'i' 'int'
|-CXXMethodDecl 0x558a18241e68 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x558a18241cd8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x558a18241d50 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x558a18256418 <col:40, line:472:5>
|   |-ParenExpr 0x558a18256230 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x558a18256200 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558a18255ee0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18255eb0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18255e00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18255de8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18255da8 <col:23> 'int' lvalue ParmVar 0x558a18241cd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18255dc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18255e90 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18255e60 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18255e20 <col:33> 'int' lvalue ParmVar 0x558a18241cd8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558a18255e78 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558a18255e40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558a18255f40 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18255f20 <col:56> 'int' 0
|   |   `-CallExpr 0x558a18256160 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558a18256148 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18256128 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a182561a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18255fb0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558a182561b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18255fe0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a182561d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a18256018 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x558a182561e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18256110 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a182560f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a182560b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x558a182563f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x558a182563a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x558a18256370 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x558a18256320 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x558a1824a3e8
|     | |   `-CXXMemberCallExpr 0x558a18256300 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x558a182562d0 <col:2> '<bound member function type>' ->xanno 0x558a1823f5a8
|     | |       `-CXXThisExpr 0x558a182562c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x558a18256388 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x558a18256350 <col:14> 'int' lvalue ParmVar 0x558a18241cd8 'i' 'int'
|     `-ImplicitCastExpr 0x558a182563e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x558a182563c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x558a18241d50 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x558a18242028 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x558a18241f30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558a18256b98 <col:36, line:485:5>
|   |-ParenExpr 0x558a18256900 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a182568d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a182565b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18256580 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18256490 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18256478 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18256438 <col:23> 'int' lvalue ParmVar 0x558a18241f30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18256458 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18256560 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18256548 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a182564b0 <col:33> 'int' lvalue ParmVar 0x558a18241f30 'i' 'int'
|   |   |     `-BinaryOperator 0x558a18256528 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a18256510 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a182564d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a182564f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a18256610 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a182565f0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a18256830 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a18256818 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a182567f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18256870 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18256680 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a18256888 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a182566b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a182568a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a182566f0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x558a182568b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a182567e0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a182567c8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18256788 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x558a18256b88 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x558a18256b70 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x558a18256b58 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a18256b28 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x558a18256ac8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a18256a98 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a18256a10 <col:61, col:70> 'char const[48]' lvalue ->c 0x558a1824a2c0
|             |   `-CXXMemberCallExpr 0x558a182569f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a182569c0 <col:61> '<bound member function type>' ->xanno 0x558a1823f408
|             |       `-CXXThisExpr 0x558a182569b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a18256ab0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a18256a40 <col:74> 'int' lvalue ParmVar 0x558a18241f30 'i' 'int'
|-CXXMethodDecl 0x558a18242278 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x558a182420e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a18242160 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x558a182572e8 <col:42, line:500:5>
|   |-ParenExpr 0x558a18257080 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a18257050 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a18256d30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18256d00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18256c10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18256bf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18256bb8 <col:23> 'int' lvalue ParmVar 0x558a182420e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18256bd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18256ce0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18256cc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18256c30 <col:33> 'int' lvalue ParmVar 0x558a182420e8 'i' 'int'
|   |   |     `-BinaryOperator 0x558a18256ca8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a18256c90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a18256c50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a18256c70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a18256d90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18256d70 <col:60> 'int' 0
|   |   `-CallExpr 0x558a18256fb0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a18256f98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18256f78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18256ff0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18256e00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a18257008 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18256e38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a18257020 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a18256e70 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x558a18257038 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18256f60 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a18256f48 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18256f08 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x558a182572c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x558a18257278 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a18257248 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x558a182571f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a182571c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a18257170 <col:48, col:57> 'char [48]' lvalue ->c 0x558a1824a2c0
|     |     |   `-CXXMemberCallExpr 0x558a18257150 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a18257120 <col:48> '<bound member function type>' ->xanno 0x558a1823f5a8
|     |     |       `-CXXThisExpr 0x558a18257110 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a182571d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a182571a0 <col:61> 'int' lvalue ParmVar 0x558a182420e8 'i' 'int'
|     `-ImplicitCastExpr 0x558a182572b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x558a18257290 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x558a18242160 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x558a18242438 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x558a18242340 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558a18257a48 <col:35, line:513:5>
|   |-ParenExpr 0x558a18257758 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a18257728 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a18257480 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18257450 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18257360 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18257348 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18257308 <col:23> 'int' lvalue ParmVar 0x558a18242340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18257328 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18257430 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18257418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18257380 <col:33> 'int' lvalue ParmVar 0x558a18242340 'i' 'int'
|   |   |     `-BinaryOperator 0x558a182573f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a182573e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a182573a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a182573c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a182574e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a182574c0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a18257688 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a18257670 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18257650 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a182576c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18257550 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a182576e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18257588 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a182576f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a182575c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x558a18257710 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18257638 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a18257620 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a182575e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x558a18257a38 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x558a18257a20 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x558a18257a08 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a182579d8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x558a18257950 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a18257920 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a182578d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x558a1824a2c0
|             |   `-CXXMemberCallExpr 0x558a182578b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a18257880 <col:60> '<bound member function type>' ->xanno 0x558a1823f408
|             |       `-CXXThisExpr 0x558a18257870 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a18257938 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a18257900 <col:73> 'int' lvalue ParmVar 0x558a18242340 'i' 'int'
|-CXXMethodDecl 0x558a18242688 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x558a182424f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a18242570 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x558a18258168 <col:41, line:528:5>
|   |-ParenExpr 0x558a18257ef0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a18257ec0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a18257be0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18257bb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18257ac0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18257aa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18257a68 <col:23> 'int' lvalue ParmVar 0x558a182424f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18257a88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18257b90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18257b78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18257ae0 <col:33> 'int' lvalue ParmVar 0x558a182424f8 'i' 'int'
|   |   |     `-BinaryOperator 0x558a18257b58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a18257b40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a18257b00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a18257b20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558a18257c40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18257c20 <col:60> 'int' 0
|   |   `-CallExpr 0x558a18257e20 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a18257e08 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18257de8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18257e60 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18257cb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558a18257e78 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18257ce8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a18257e90 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a18257d20 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x558a18257ea8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18257dd0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a18257db8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18257d78 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x558a18258148 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x558a182580f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a182580c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x558a18258070 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a18258030 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a18257fe0 <col:47, col:56> 'char [48]' lvalue ->c 0x558a1824a2c0
|     |     |   `-CXXMemberCallExpr 0x558a18257fc0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a18257f90 <col:47> '<bound member function type>' ->xanno 0x558a1823f5a8
|     |     |       `-CXXThisExpr 0x558a18257f80 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a18258048 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a18258010 <col:60> 'int' lvalue ParmVar 0x558a182424f8 'i' 'int'
|     `-ImplicitCastExpr 0x558a18258130 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x558a18258110 <col:65> 'int16_t':'short' lvalue ParmVar 0x558a18242570 'x' 'int16_t':'short'
|-CXXMethodDecl 0x558a18242848 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x558a18242750 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558a18258838 <col:36, line:541:5>
|   |-ParenExpr 0x558a182585d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a182585a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a18258300 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a182582d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a182581e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a182581c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18258188 <col:23> 'int' lvalue ParmVar 0x558a18242750 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a182581a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a182582b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18258298 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18258200 <col:33> 'int' lvalue ParmVar 0x558a18242750 'i' 'int'
|   |   |     `-BinaryOperator 0x558a18258278 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a18258260 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a18258220 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a18258240 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558a18258360 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18258340 <col:60> 'int' 0
|   |   `-CallExpr 0x558a18258508 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a182584f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a182584d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18258548 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a182583d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558a18258560 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18258408 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a18258578 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a18258440 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x558a18258590 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a182584b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a182584a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18258460 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x558a18258828 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x558a18258810 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x558a182587f8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a182587c8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x558a18258770 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a18258740 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a182586f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x558a1824a2c0
|             |   `-CXXMemberCallExpr 0x558a182586d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a182586a0 <col:61> '<bound member function type>' ->xanno 0x558a1823f408
|             |       `-CXXThisExpr 0x558a18258690 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a18258758 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a18258720 <col:74> 'int' lvalue ParmVar 0x558a18242750 'i' 'int'
|-CXXMethodDecl 0x558a18242a18 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x558a18242908 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x558a18242980 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558a18242ac8 <col:20>
| `-OptimizeNoneAttr 0x558a18242b20 <col:30>
|-CXXMethodDecl 0x558a18242c58 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x558a18242b60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558a18258f08 <col:35, line:562:5>
|   |-ParenExpr 0x558a18258ca8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a18258c78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a182589d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a182589a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a182588b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18258898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18258858 <col:23> 'int' lvalue ParmVar 0x558a18242b60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18258878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18258980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18258968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a182588d0 <col:33> 'int' lvalue ParmVar 0x558a18242b60 'i' 'int'
|   |   |     `-BinaryOperator 0x558a18258948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a18258930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a182588f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a18258910 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558a18258a30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18258a10 <col:60> 'int' 0
|   |   `-CallExpr 0x558a18258bd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a18258bc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18258ba0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a18258c18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18258aa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558a18258c30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18258ad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a18258c48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a18258b10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x558a18258c60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18258b88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a18258b70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18258b30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x558a18258ef8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x558a18258ee0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x558a18258ec8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a18258e98 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x558a18258e40 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a18258e10 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a18258dc0 <col:60, col:69> 'char const[48]' lvalue ->c 0x558a1824a2c0
|             |   `-CXXMemberCallExpr 0x558a18258da0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a18258d70 <col:60> '<bound member function type>' ->xanno 0x558a1823f408
|             |       `-CXXThisExpr 0x558a18258d60 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a18258e28 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a18258df0 <col:73> 'int' lvalue ParmVar 0x558a18242b60 'i' 'int'
|-CXXMethodDecl 0x558a18242e68 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x558a18242d18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a18242d90 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x558a182595e8 <col:41, line:577:5>
|   |-ParenExpr 0x558a18259378 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a18259348 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a182590a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18259070 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18258f80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18258f68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18258f28 <col:23> 'int' lvalue ParmVar 0x558a18242d18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18258f48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18259050 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18259038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18258fa0 <col:33> 'int' lvalue ParmVar 0x558a18242d18 'i' 'int'
|   |   |     `-BinaryOperator 0x558a18259018 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a18259000 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a18258fc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a18258fe0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558a18259100 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a182590e0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a182592a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a18259290 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18259270 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a182592e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18259170 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558a18259300 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a182591a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a18259318 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a182591e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x558a18259330 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18259258 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a18259240 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a18259200 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x558a182595c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x558a18259578 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a18259548 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x558a182594e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a182594b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a18259468 <col:47, col:56> 'char [48]' lvalue ->c 0x558a1824a2c0
|     |     |   `-CXXMemberCallExpr 0x558a18259448 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a18259418 <col:47> '<bound member function type>' ->xanno 0x558a1823f5a8
|     |     |       `-CXXThisExpr 0x558a18259408 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a182594d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a18259498 <col:60> 'int' lvalue ParmVar 0x558a18242d18 'i' 'int'
|     `-ImplicitCastExpr 0x558a182595b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x558a18259590 <col:65> 'int32_t':'int' lvalue ParmVar 0x558a18242d90 'x' 'int32_t':'int'
|-CXXMethodDecl 0x558a18243028 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x558a18242f30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558a18259d18 <col:36, line:591:5>
|   |-ParenExpr 0x558a18259a58 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a18259a28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a18259780 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18259750 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18259660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18259648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18259608 <col:23> 'int' lvalue ParmVar 0x558a18242f30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18259628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18259730 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18259718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18259680 <col:33> 'int' lvalue ParmVar 0x558a18242f30 'i' 'int'
|   |   |     `-BinaryOperator 0x558a182596f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a182596e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a182596a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a182596c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558a182597e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a182597c0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a18259988 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a18259970 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a18259950 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a182599c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18259850 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558a182599e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18259888 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a182599f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a182598c0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x558a18259a10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a18259938 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a18259920 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a182598e0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x558a18259d08 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x558a18259cf0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x558a18259cd8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a18259ca8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x558a18259c20 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a18259bf0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a18259ba0 <col:61, col:70> 'char const[48]' lvalue ->c 0x558a1824a2c0
|             |   `-CXXMemberCallExpr 0x558a18259b80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a18259b50 <col:61> '<bound member function type>' ->xanno 0x558a1823f408
|             |       `-CXXThisExpr 0x558a18259b40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a18259c08 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a18259bd0 <col:74> 'int' lvalue ParmVar 0x558a18242f30 'i' 'int'
|-CXXMethodDecl 0x558a18243278 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x558a182430e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a18243160 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x558a1825a3f8 <col:42, line:606:5>
|   |-ParenExpr 0x558a1825a188 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x558a1825a158 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558a18259eb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a18259e80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a18259d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a18259d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a18259d38 <col:23> 'int' lvalue ParmVar 0x558a182430e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a18259d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a18259e60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558a18259e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a18259db0 <col:33> 'int' lvalue ParmVar 0x558a182430e8 'i' 'int'
|   |   |     `-BinaryOperator 0x558a18259e28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a18259e10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a18259dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558a18259df0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558a18259f10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a18259ef0 <col:60> 'int' 0
|   |   `-CallExpr 0x558a1825a0b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558a1825a0a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a1825a080 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a1825a0f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18259f80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558a1825a110 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a18259fb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a1825a128 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a18259ff0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x558a1825a140 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a1825a068 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a1825a050 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a1825a010 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x558a1825a3d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x558a1825a388 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a1825a358 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x558a1825a2f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a1825a2c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a1825a278 <col:48, col:57> 'char [48]' lvalue ->c 0x558a1824a2c0
|     |     |   `-CXXMemberCallExpr 0x558a1825a258 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a1825a228 <col:48> '<bound member function type>' ->xanno 0x558a1823f5a8
|     |     |       `-CXXThisExpr 0x558a1825a218 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a1825a2e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a1825a2a8 <col:61> 'int' lvalue ParmVar 0x558a182430e8 'i' 'int'
|     `-ImplicitCastExpr 0x558a1825a3c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x558a1825a3a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x558a18243160 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x558a18243410 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x558a18243340 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x558a1825ac68 <col:33, line:620:5>
|   |-ParenExpr 0x558a1825a9e0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x558a1825a9b0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558a1825a600 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a1825a5d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a1825a470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a1825a458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a1825a418 <col:23> 'int' lvalue ParmVar 0x558a18243340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a1825a438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a1825a5b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558a1825a598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a1825a490 <col:33> 'int' lvalue ParmVar 0x558a18243340 'i' 'int'
|   |   |     `-BinaryOperator 0x558a1825a578 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a1825a560 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a1825a4b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558a1825a538 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558a1825a520 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558a1825a4e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558a1825a660 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a1825a640 <col:79> 'int' 0
|   |   `-CallExpr 0x558a1825a910 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558a1825a8f8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a1825a8d8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a1825a950 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a1825a748 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558a1825a968 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a1825a790 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a1825a980 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a1825a7c8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x558a1825a998 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a1825a8c0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a1825a8a8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a1825a868 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x558a1825ac58 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x558a1825ac40 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x558a1825ac28 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558a1825abf8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x558a1825ab70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x558a1825ab40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558a1825aaf0 <col:67, col:76> 'char const[48]' lvalue ->c 0x558a1824a2c0
|             |   `-CXXMemberCallExpr 0x558a1825aad0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558a1825aaa0 <col:67> '<bound member function type>' ->xanno 0x558a1823f408
|             |       `-CXXThisExpr 0x558a1825aa90 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558a1825ab58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558a1825ab20 <col:80> 'int' lvalue ParmVar 0x558a18243340 'i' 'int'
|-CXXMethodDecl 0x558a18243628 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x558a182434d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558a18243550 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x558a1825b490 <col:45, line:635:5>
|   |-ParenExpr 0x558a1825b1d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x558a1825b1a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558a1825ae70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558a1825ae40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558a1825ace0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558a1825acc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558a1825ac88 <col:23> 'int' lvalue ParmVar 0x558a182434d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558a1825aca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558a1825ae20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558a1825ae08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558a1825ad00 <col:33> 'int' lvalue ParmVar 0x558a182434d0 'i' 'int'
|   |   |     `-BinaryOperator 0x558a1825ade8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558a1825add0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558a1825ad20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558a1823f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558a1825ada8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558a1825ad90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558a1825ad58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558a1825aed0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558a1825aeb0 <col:79> 'int' 0
|   |   `-CallExpr 0x558a1825b108 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558a1825b0f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558a1825b0d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558a17dac0c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558a1825b148 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a1825af40 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558a1825b160 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558a1825af88 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558a1825b178 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558a1825afc0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x558a1825b190 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558a1825b0b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558a1825b0a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558a1825b058 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x558a1825b470 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x558a1825b3d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558a1825b3a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x558a1825b348 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558a1825b318 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558a1825b2c8 <col:54, col:63> 'char [48]' lvalue ->c 0x558a1824a2c0
|     |     |   `-CXXMemberCallExpr 0x558a1825b2a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558a1825b278 <col:54> '<bound member function type>' ->xanno 0x558a1823f5a8
|     |     |       `-CXXThisExpr 0x558a1825b268 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558a1825b330 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558a1825b2f8 <col:67> 'int' lvalue ParmVar 0x558a182434d0 'i' 'int'
|     `-CXXConstCastExpr 0x558a1825b440 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x558a1825b428 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x558a1825b3f0 <col:91> 'const void *' lvalue ParmVar 0x558a18243550 'x' 'const void *'
|-CXXMethodDecl 0x558a182436f8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x558a1825b518 <col:34, line:640:5>
|   `-ReturnStmt 0x558a1825b508 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x558a1825b4f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x558a1825b4c0 <col:16> 'Packet *' lvalue ->_data_packet 0x558a1824ae78
|         `-CXXThisExpr 0x558a1825b4b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558a18243838 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x558a182437a8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558a182545d8 <col:46> 'bool' true
|-CXXMethodDecl 0x558a182439b8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x558a182438f0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x558a18243a60 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x558a18244210 <line:660:22> "" ""
| |-EnumConstantDecl 0x558a18243b60 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a18244280 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243b40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x558a18243b20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558a18238cc0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558a18243bf0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a18244298 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243bd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x558a18243bb0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558a18238d50 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558a18243c80 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a182442b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243c60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558a18243c40 <col:21> 'int' 0
| |-EnumConstantDecl 0x558a18243d10 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a182442c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243cf0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x558a18243cd0 <col:19> 'int' 16
| |-EnumConstantDecl 0x558a18243da0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a182442e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243d80 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x558a18243d60 <col:21> 'int' 16
| |-EnumConstantDecl 0x558a18243e30 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a182442f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243e10 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558a18243df0 <col:19> 'int' 32
| |-EnumConstantDecl 0x558a18243ec0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a18244310 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243ea0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x558a18243e80 <col:19> 'int' EnumConstant 0x558a18243d10 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558a18243f50 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a18244328 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18243f30 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x558a18243f10 <col:19> 'int' EnumConstant 0x558a18243e30 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558a18244020 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a18244340 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a18244000 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x558a18243fe0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558a18243fa0 <col:23> 'int' EnumConstant 0x558a18243f50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558a18243fc0 <col:40> 'int' 2
| |-EnumConstantDecl 0x558a182440f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558a18244358 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558a182440d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x558a182440b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558a18244070 <col:23> 'int' EnumConstant 0x558a18243f50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558a18244090 <col:40> 'int' 4
| `-EnumConstantDecl 0x558a182441c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x558a18244370 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558a182441a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x558a18244180 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x558a18244140 <col:23> 'int' EnumConstant 0x558a18243f50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x558a18244160 <col:40> 'int' 8
|-CXXMethodDecl 0x558a182443b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x558a18244450 <col:68> "" ""
|-CXXMethodDecl 0x558a182444e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x558a18244588 <col:45> "" ""
|-CXXMethodDecl 0x558a18244620 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558a182446c0 <col:57> "" ""
|-CXXMethodDecl 0x558a18244758 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x558a182447f8 <col:45> "" ""
|-CXXMethodDecl 0x558a18244890 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558a18244930 <col:57> "" ""
|-CXXMethodDecl 0x558a182449c0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x558a18244a60 <col:51> "" ""
|-CXXMethodDecl 0x558a18244af0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558a18244b90 <col:63> "" ""
|-CXXMethodDecl 0x558a18244c20 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x558a18244cc0 <col:53> "" ""
|-CXXMethodDecl 0x558a18244d50 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558a18244df0 <col:65> "" ""
|-CXXMethodDecl 0x558a18244f08 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558a18244e78 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x558a18244fb0 <col:61> "" ""
|-CXXMethodDecl 0x558a18245148 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558a18245038 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x558a182450b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558a182451f8 <col:67> "" ""
|-CXXMethodDecl 0x558a18245310 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558a18245280 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558a182453b8 <col:63> "" ""
|-CXXMethodDecl 0x558a18245550 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558a18245440 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a182454b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558a18245600 <col:69> "" ""
|-CXXMethodDecl 0x558a18245718 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558a18245688 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558a182457c0 <col:63> "" ""
|-CXXMethodDecl 0x558a18247e98 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558a18247d88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a18247e00 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a18247f48 <col:69> "" ""
|-CXXMethodDecl 0x558a18248060 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x558a18247fd0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x558a18248108 <col:62> "" ""
|-CXXMethodDecl 0x558a182482a0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558a18248190 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a18248208 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x558a18248350 <col:68> "" ""
|-CXXMethodDecl 0x558a18248468 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x558a182483d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558a18248510 <col:63> "" ""
|-CXXMethodDecl 0x558a182486a8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x558a18248598 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558a18248610 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x558a18248758 <col:69> "" ""
|-CXXMethodDecl 0x558a182487e8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558a18248888 <col:64> "" ""
|-CXXMethodDecl 0x558a18248918 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x558a182489b8 <col:52> "" ""
|-CXXMethodDecl 0x558a18248a48 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558a18248ae8 <col:67> "" ""
|-CXXMethodDecl 0x558a18248b78 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x558a18248c18 <col:55> "" ""
|-CXXMethodDecl 0x558a18248d30 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558a18248ca0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558a18248dd8 <col:58> "" ""
|-CXXMethodDecl 0x558a18248f70 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558a18248e60 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a18248ed8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558a18249020 <col:62> "" ""
|-CXXMethodDecl 0x558a18249138 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x558a182490a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558a182491e0 <col:58> "" ""
|-CXXMethodDecl 0x558a18249378 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x558a18249268 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a182492e0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x558a18249428 <col:62> "" ""
|-CXXMethodDecl 0x558a18249540 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558a182494b0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x558a182495e8 <col:60> "" ""
|-CXXMethodDecl 0x558a18249780 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558a18249670 <col:34> col:37 'int'
| |-ParmVarDecl 0x558a182496e8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558a18249830 <col:64> "" ""
|-CXXMethodDecl 0x558a18249948 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x558a182498b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558a182499f0 <col:58> "" ""
|-CXXMethodDecl 0x558a18249b88 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558a18249a78 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a18249af0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x558a18249c38 <col:62> "" ""
|-CXXMethodDecl 0x558a18249d50 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558a18249cc0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x558a18249df8 <col:59> "" ""
|-CXXMethodDecl 0x558a18249f90 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558a18249e80 <col:33> col:36 'int'
| |-ParmVarDecl 0x558a18249ef8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558a1824a040 <col:63> "" ""
|-AccessSpecDecl 0x558a1824a0b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x558a1824a0d8 prev 0x558a1823f2e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a1824a1d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x558a1824a2c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x558a1824a3e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x558a1824a568 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x558a1824a6e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x558a1824a868 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x558a1825b698 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558a1825bf08 <col:11>
| |-CXXDestructorDecl 0x558a1825b770 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x558a1825b8a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558a1825b8a8
| | `-ParmVarDecl 0x558a1825b9b8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x558a1825ba58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a1825ba58
| | `-ParmVarDecl 0x558a1825bb68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x558a1825e928 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558a1825ea38 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x558a1825ecb8 <col:11>
| |   `-ReturnStmt 0x558a1825eca8 <col:11>
| |     `-UnaryOperator 0x558a1825ec90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558a1825ec80 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x558a1825eaa8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558a1825eaa8
|   `-ParmVarDecl 0x558a1825ebb8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x558a1824a8d0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558a1824a9e8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x558a1824aa88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x558a1824aaf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x558a1824ab58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x558a1824abc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x558a1824ac20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x558a1824ace0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x558a1824ad40 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x558a1824ada0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x558a1825b5a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x558a1824aa88 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x558a1825bf18 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x558a1825bf70 <col:12>
| |-CXXConstructorDecl 0x558a1825bbd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558a1825bbd8
| | `-ParmVarDecl 0x558a1825bce8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x558a1825bd88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558a1825bd88
| | `-ParmVarDecl 0x558a1825be98 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x558a1825e010 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x558a1824ae18 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x558a1824ae78 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x558a1824aee0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x558a1824af48 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x558a1824afb0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x558a1824b018 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x558a1824b078 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x558a1824b0d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x558a1824b140 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x558a1824b1c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x558a1824ae18 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x558a1825b540 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558a1824b078 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x558a1825bf80 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x558a1825bfe0 <col:21, line:755:5>
|-CXXConstructorDecl 0x558a1824b368 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x558a1824b2a8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x558a1824b460 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x558a1824b648 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x558a1824b550 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x558a1824b918 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x558a1824b700 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a1824b778 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a1824b7f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a1824bb38 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x558a1824b9e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x558a1824ba60 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x558a18254118 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x558a1824bbf8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x558a1824bc70 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x558a1824bce8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x558a18254270 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558a182541e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a182543b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558a18254328 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x558a182544b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1825c080 prev 0x558a18238940 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x558a1825c1b8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x558a1825c248 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x558a1825c2f0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x558a1825c390 <col:20>
| `-OptimizeNoneAttr 0x558a1825c3e8 <col:30>
|-CXXMethodDecl 0x558a1825c438 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x558a1825c4d8 <col:20>
| `-OptimizeNoneAttr 0x558a1825c530 <col:30>
|-CXXMethodDecl 0x558a1825c580 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x558a1825c648 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x558a1825c710 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x558a1825c828 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x558a1825c8f0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x558a1825c990 <col:20>
| `-OptimizeNoneAttr 0x558a1825c9e8 <col:30>
|-CXXMethodDecl 0x558a1825ca58 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x558a1825caf8 <col:20>
| `-OptimizeNoneAttr 0x558a1825cb50 <col:30>
|-CXXMethodDecl 0x558a1825cbf8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x558a1825cc98 <col:20>
| `-OptimizeNoneAttr 0x558a1825ccf0 <col:30>
|-CXXMethodDecl 0x558a1825cd40 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x558a1825ce58 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x558a1825cf78 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x558a1825d098 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x558a1825d160 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x558a1825d200 <col:62> "" ""
|-AccessSpecDecl 0x558a1825d270 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x558a1825d2d0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x558a1825dec8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x558a1825e0f0 <col:29, col:31>
|-CXXMethodDecl 0x558a1825d398 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x558a1825d4d8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x558a1825d448 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x558a1825d5d0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x558a1825e100 <col:23, col:25>
|-CXXMethodDecl 0x558a1825d788 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x558a1825d6c0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x558a1825da58 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x558a1825d840 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558a1825d8b8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558a1825d930 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558a1825dbe8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x558a1825db20 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x558a1825dce0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x558a1825dd48 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x558a1825dd48
  `-ParmVarDecl 0x558a1825de58 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1806eab8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558a1806ebd8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x558a1806ecc0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x558a1806eca0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x558a1806ec68 <col:22> 'int' 4
|-FieldDecl 0x558a1806ed68 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x558a1806ed48 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x558a1806ed10 <col:21> 'int' 4
|-FieldDecl 0x558a1806edc8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x558a1806ee28 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x558a1806ee88 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x558a1806eee8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x558a1806ef48 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x558a1806efa8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x558a1806f008 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x558a1806f078 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x558a1806f0e8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558a1807f3e0 prev 0x558a180717c8 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558a1807f4d8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x558a1807f568 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x558a1807f990 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x558a1807f5a8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x558a1807f628 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x558a1807f760 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x558a1807f810 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x558a1807fc58 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x558a1807fa60 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x558a1807fad8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x558a1807fb78 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x558a180845f8 <col:34> 'const ArgContext' lvalue Var 0x558a18071760 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x558a18084050 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x558a1807fd20 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x558a1807fe10 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x558a1807fe88 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x558a18084618 <col:34> 'const ArgContext' lvalue Var 0x558a18071760 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x558a180847f8 <col:46, line:375:5>
|   `-ReturnStmt 0x558a180847e8 <line:374:2, col:63>
|     `-CallExpr 0x558a180847b0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x558a18084798 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558a18084750 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x558a1807fc58 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x558a180846b0 <col:15> 'const String' lvalue ParmVar 0x558a1807fd20 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x558a18084700 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x558a180846d0 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x558a1807fe10 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x558a18084730 <col:59> 'const ArgContext' lvalue ParmVar 0x558a1807fe88 'args' 'const ArgContext &'
|-CXXMethodDecl 0x558a18084528 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x558a18084118 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x558a18084390 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x558a18084408 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x558a18084638 <col:34> 'const ArgContext' lvalue Var 0x558a18071760 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x558a18390498 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x558a18390570 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a183906a8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x558a183906a8
| `-ParmVarDecl 0x558a183907b8 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x558a18390858 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x558a18390968 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x558a183915c0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558a18085628 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x558a18085888 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558a183903a8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558a183909d8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x558a183909d8
| `-ParmVarDecl 0x558a18390ae8 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x558a18390b88 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558a18390c98 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x558a183915d0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558a183915a0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x558a18391570 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x558a18391540 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x558a18390c98 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x558a18391640 <col:19>
`-CXXDestructorDecl 0x558a18390d38 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
