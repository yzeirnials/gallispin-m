
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IPTable::Entry
         0 |   class IPAddress dst
         0 |     uint32_t _addr
         4 |   class IPAddress mask
         4 |     uint32_t _addr
         8 |   class IPAddress gw
         8 |     uint32_t _addr
        12 |   int index
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e634c868 prev 0x5634e6344008 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5634e634c960 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5634e634c9f0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5634e634ca68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5634e634cb28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5634e634cbf0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5634e634cd68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5634e634cca0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5634e634ce10 <col:24>
| `-OptimizeNoneAttr 0x5634e634ce68 <col:34>
|-CXXMethodDecl 0x5634e634ceb0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5634e634d168 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5634e634cf60 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5634e634cfd8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5634e634d058 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5634e634d220 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5634e634d258 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5634e634d2c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5634e634d348 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5634e634d668 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5634e634d400 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5634e634d478 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5634e634d4f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5634e634d570 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5634e634d780 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5634e63550f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5634e63550f8
| `-ParmVarDecl 0x5634e6355208 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5634e63552a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5634e63552a8
| `-ParmVarDecl 0x5634e63553b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5634e63c9400 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e633f880 prev 0x5634e633f600 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5634e633f978 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5634e633fa08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5634e633fa68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5634e633fb58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5634e633fc58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5634e633fe28 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5634e633fcd8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5634e633fd50 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5634e633ffb8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5634e633fef0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5634e6340060 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5634e6340198 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5634e63400d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5634e6340338 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5634e6340278 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5634e63404d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5634e6340418 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5634e6340580 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5634e6340680 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5634e6340760 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6340660 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5634e6340640 <col:26> 'int' 1
| `-EnumConstantDecl 0x5634e6340710 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5634e6340778 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e63406f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5634e63406d0 <col:44> 'int' 2
|-CXXMethodDecl 0x5634e63408c0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5634e63407a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5634e6340828 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5634e6340a18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5634e6340988 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5634e6340c58 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5634e6340ad8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5634e6340b50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5634e6340d08 <col:20>
| `-OptimizeNoneAttr 0x5634e6340d60 <col:30>
|-CXXMethodDecl 0x5634e6340e68 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5634e6340da0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5634e6340f10 <col:20>
| `-OptimizeNoneAttr 0x5634e6340f68 <col:30>
|-CXXMethodDecl 0x5634e6340fb8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5634e6341080 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5634e6341198 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5634e6341220 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5634e63412a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5634e6341330 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5634e63413b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5634e6341448 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5634e6341508 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5634e6341590 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5634e6341618 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5634e63416a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5634e6341728 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5634e63417b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5634e6341840 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5634e6341900 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5634e6341990 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5634e6341ae0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5634e6341a48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5634e6341c70 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5634e6341ba0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5634e6341f20 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5634e6341d28 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5634e6341da8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5634e6341e28 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5634e6341fd8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5634e63420e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5634e6342370 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63420c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5634e63420a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5634e6342170 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5634e6342388 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6342150 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5634e6342130 <col:32> 'int' 20
| |-EnumConstantDecl 0x5634e6342200 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5634e63423a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63421e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5634e63421c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5634e6342290 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5634e63423b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6342270 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5634e6342250 <col:35> 'int' 100
| `-EnumConstantDecl 0x5634e6342320 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5634e63423d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e6342300 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5634e63422e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5634e6342410 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5634e6342850 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5634e63426c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5634e6342738 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5634e6342920 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5634e6342aa0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5634e63429d0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5634e6342ca8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5634e6342b58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5634e6342bd0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5634e6342da8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5634e6342e48 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5634e6342f10 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5634e6342fa0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5634e63431d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6342f80 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5634e6342f60 <col:36> 'int' EnumConstant 0x5634e6342f10 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5634e6342ff0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5634e6343040 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5634e6343090 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5634e63430e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5634e6343130 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5634e6343180 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5634e63432b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5634e63431f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5634e6343380 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5634e6343440 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5634e6343500 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5634e63435c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5634e63436d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5634e63437a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5634e6343920 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5634e6343850 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5634e6343a48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5634e6343c48 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5634e6343af8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5634e6343b78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5634e6351598 <col:54, line:127:5>
|   |-ParenExpr 0x5634e6351448 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5634e6351418 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6351108 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5634e63510e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5634e63510c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5634e63510b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5634e6351080 <col:31> 'Router *' lvalue ->_router 0x5634e634ef60
|   |   |         `-CXXThisExpr 0x5634e6351070 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5634e6351168 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6351148 <col:48> 'int' 0
|   |   `-CallExpr 0x5634e6351378 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5634e6351360 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6351340 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e63513b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63511d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5634e63513d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63511f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5634e63513e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6351230 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5634e6351400 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6351328 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6351310 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e63512c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5634e63514e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5634e6351478 <col:9> 'Router *' lvalue ->_router 0x5634e634ef60
|   | | `-CXXThisExpr 0x5634e6351468 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5634e63514c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5634e63514a8 <col:19> 'Router *' lvalue ParmVar 0x5634e6343af8 'r' 'Router *'
|   `-BinaryOperator 0x5634e6351578 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5634e6351510 <col:9> 'int' lvalue ->_eindex 0x5634e634efc8
|     | `-CXXThisExpr 0x5634e6351500 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5634e6351560 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5634e6351540 <col:19> 'int' lvalue ParmVar 0x5634e6343b78 'eindex' 'int'
|-CXXMethodDecl 0x5634e6343dd0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5634e6343d08 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5634e6343ea0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5634e6343f68 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5634e6344008 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5634e6344258 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5634e63440d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5634e6344150 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5634e6344308 <col:20>
| `-OptimizeNoneAttr 0x5634e6344360 <col:30>
|-CXXMethodDecl 0x5634e6344468 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5634e63443a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5634e6344510 <col:20>
| `-OptimizeNoneAttr 0x5634e6344568 <col:30>
|-CXXMethodDecl 0x5634e6344638 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5634e63445a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5634e63446e0 <col:20>
| `-OptimizeNoneAttr 0x5634e6344738 <col:30>
|-CXXMethodDecl 0x5634e63448c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5634e6344770 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5634e63447f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5634e6344a58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5634e6344990 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5634e6344ba8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5634e6344b18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5634e6344cf8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5634e6344c68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5634e6344e48 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5634e6344db8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5634e6345108 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5634e6344f00 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5634e6344f80 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5634e6345028 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5634e63451e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5634e63452a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5634e6345570 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5634e6345420 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5634e6345498 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5634e6345698 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5634e6345870 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5634e6345750 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5634e63457d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5634e6345a58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5634e6345938 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5634e63459b8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5634e6345dc8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5634e6345b18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5634e6345b90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5634e6345c10 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5634e6350b80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5634e6350b60 <col:106> 'int' 0
| `-ParmVarDecl 0x5634e6345c88 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5634e6350bb8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5634e6350b98 <col:126> 'int' 0
|-CXXMethodDecl 0x5634e6346168 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5634e6345e98 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5634e6345f30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5634e6345fb0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5634e6346028 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5634e6350bf0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5634e6350bd0 <col:114> 'int' 0
|-CXXMethodDecl 0x5634e63464f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5634e6346240 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5634e63462b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5634e6346338 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5634e6350c08 <col:96> 'int' 0
| `-ParmVarDecl 0x5634e63463b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5634e6350c48 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5634e6350c28 <col:116> 'int' 0
|-CXXMethodDecl 0x5634e6346878 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5634e63465c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5634e6346640 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5634e63466c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5634e6350c80 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5634e6350c60 <col:109> 'int' 0
| `-ParmVarDecl 0x5634e6346738 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5634e6350cb8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5634e6350c98 <col:129> 'int' 0
|-CXXMethodDecl 0x5634e6346bf8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5634e6346948 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5634e63469c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5634e6346a40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5634e6346ab8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5634e6350cf0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5634e6350cd0 <col:117> 'int' 0
|-CXXMethodDecl 0x5634e6346f88 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5634e6346cd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e6346d48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5634e6346dc8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5634e6350d08 <col:99> 'int' 0
| `-ParmVarDecl 0x5634e6346e40 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5634e6350d48 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5634e6350d28 <col:119> 'int' 0
|-CXXMethodDecl 0x5634e63473a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5634e6347058 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5634e63470d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5634e6347150 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5634e63471d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5634e6350d80 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5634e6350d60 <col:108> 'int' 0
| `-ParmVarDecl 0x5634e6347250 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5634e6350db8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5634e6350d98 <col:141> 'int' 0
|-CXXMethodDecl 0x5634e63477c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5634e6347480 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5634e6347500 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5634e6347578 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5634e63475f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5634e6347678 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5634e6350dd0 <col:121> 'int' 0
|-CXXMethodDecl 0x5634e6347bf8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5634e63478a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5634e6347928 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5634e63479a0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5634e6347a20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5634e6350df0 <col:98> 'int' 0
| `-ParmVarDecl 0x5634e6347aa0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5634e6350e10 <col:123> 'int' 0
|-CXXMethodDecl 0x5634e6347ec0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5634e6347cd0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5634e6347d50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5634e6347dd0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5634e6350e30 <col:80> 'int' 0
|-EnumDecl 0x5634e6347f78 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5634e6348080 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5634e6348310 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6348060 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5634e6348040 <col:42> 'int' 1
| |-EnumConstantDecl 0x5634e6348110 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5634e6348328 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63480f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5634e63480d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5634e63481a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5634e6348340 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6348180 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5634e6348160 <col:44> 'int' 4
| |-EnumConstantDecl 0x5634e6348230 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5634e6348358 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6348210 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5634e63481f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5634e63482c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5634e6348370 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e63482a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5634e6348280 <col:34> 'int' 6
|-CXXMethodDecl 0x5634e6348628 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5634e6348398 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5634e6348438 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5634e63484b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5634e6348530 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5634e6350ee8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5634e6350ed0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5634e6350eb8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5634e6350e98 <col:98, col:105> 'String' (CXXTemporary 0x5634e6350e98)
|           `-CXXTemporaryObjectExpr 0x5634e6350e60 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5634e63488c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5634e63486f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5634e6348770 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5634e63487e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5634e6350f98 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5634e6350f80 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5634e6350f68 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5634e6350f48 <col:94, col:101> 'String' (CXXTemporary 0x5634e6350f48)
| |         `-CXXTemporaryObjectExpr 0x5634e6350f10 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5634e6351780 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5634e63516f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5634e63516c8 <col:9> '<bound member function type>' ->add_task_handlers 0x5634e6348628
|     | `-CXXThisExpr 0x5634e63516b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5634e6351738 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5634e6351638 <col:27> 'Task *' lvalue ParmVar 0x5634e63486f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5634e6351750 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5634e6351658 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5634e6348770 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5634e6351768 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5634e6351678 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5634e63482c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5634e6351698 <col:62> 'const String' lvalue ParmVar 0x5634e63487e8 'prefix' 'const String &'
|-CXXMethodDecl 0x5634e6348ad8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5634e6348990 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5634e6348a08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5634e6351048 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5634e6351030 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5634e6351018 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5634e6350ff8 <col:70, col:77> 'String' (CXXTemporary 0x5634e6350ff8)
| |         `-CXXTemporaryObjectExpr 0x5634e6350fc0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5634e6351958 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5634e63518d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5634e63518a0 <col:9> '<bound member function type>' ->add_task_handlers 0x5634e6348628
|     | `-CXXThisExpr 0x5634e6351890 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5634e6351910 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5634e6351810 <col:27> 'Task *' lvalue ParmVar 0x5634e6348990 'task' 'Task *'
|     |-ImplicitCastExpr 0x5634e6351928 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5634e6351830 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5634e6351940 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5634e6351850 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5634e63482c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5634e6351870 <col:57> 'const String' lvalue ParmVar 0x5634e6348a08 'prefix' 'const String &'
|-CXXMethodDecl 0x5634e6348db8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5634e6348ba0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e6348c20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e6348c98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5634e6349068 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5634e6348e88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e6348f08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e6348f88 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5634e6349358 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5634e6349138 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e63491b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e6349230 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5634e6349608 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5634e6349428 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e63494a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e6349528 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5634e63498b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5634e63496d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e6349758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e63497d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5634e6349b68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5634e6349988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e6349a08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e6349a80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5634e6349e18 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5634e6349c38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e6349cb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e6349d38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5634e634a128 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5634e6349f40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e6349fc0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e634a040 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5634e634a408 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5634e634a1f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e634a278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e634a320 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5634e634a6e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5634e634a4d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e634a558 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e634a600 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5634e634a950 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5634e634a7b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5634e634a838 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5634e634a8b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5634e634abf8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5634e634aa20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5634e634aaa0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5634e634ab18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5634e634aea8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5634e634acc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e634ad48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e634adc8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5634e634b158 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5634e634af78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e634aff8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e634b070 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5634e634b408 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5634e634b228 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e634b2a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e634b320 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5634e634b6d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5634e634b4d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e634b558 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5634e634b5f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5634e634ba08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5634e634b7a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5634e634b828 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5634e634b8a0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5634e634b918 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5634e6351060 <col:93> 'bool' false
|-CXXMethodDecl 0x5634e634bbf0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5634e634bad8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5634e634bb58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5634e634bdc8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5634e634bcb0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5634e634bd30 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5634e634c0a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5634e634be88 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5634e634bf00 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5634e634bf80 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5634e634bff8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5634e634c398 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5634e634c178 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5634e634c1f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5634e634c270 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5634e634c2e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5634e634c5d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5634e634c470 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5634e634c4f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5634e634c7b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5634e634c698 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5634e634c718 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5634e634c868 prev 0x5634e6344008 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5634e634c960 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5634e634c9f0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5634e634ca68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5634e634cb28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5634e634cbf0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5634e634cd68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5634e634cca0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5634e634ce10 <col:24>
| | `-OptimizeNoneAttr 0x5634e634ce68 <col:34>
| |-CXXMethodDecl 0x5634e634ceb0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5634e634d168 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5634e634cf60 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5634e634cfd8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5634e634d058 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5634e634d220 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5634e634d258 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5634e634d2c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5634e634d348 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5634e634d668 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5634e634d400 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5634e634d478 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5634e634d4f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5634e634d570 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5634e634d780 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5634e63550f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5634e63550f8
| | `-ParmVarDecl 0x5634e6355208 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5634e63552a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5634e63552a8
| | `-ParmVarDecl 0x5634e63553b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5634e63c9400 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5634e634d7f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5634e634d898 <col:38> "" ""
|-CXXMethodDecl 0x5634e634d928 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5634e634d9c8 <col:44> "" ""
|-AccessSpecDecl 0x5634e634da38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5634e634da60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5634e634db60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5634e634dbb0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e634db40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5634e634db20 <col:27> 'int' 4
|-FieldDecl 0x5634e634dc68 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5634e634de18 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5634e634ded0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5634e634ef60 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5634e634efc8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5634e634f118 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5634e634f058 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5634e634f2c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5634e634f1d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5634e634f4a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5634e634f388 <col:20> col:23 'int'
| `-ParmVarDecl 0x5634e634f408 <col:25> col:28 'int'
|-CXXMethodDecl 0x5634e634f750 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5634e634f570 <col:23> col:26 'int'
| |-ParmVarDecl 0x5634e634f5f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5634e634f668 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5634e634f808 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5634e634f8d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5634e634f920 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5634e634f970 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5634e634fb50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5634e634fa00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5634e634fa78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5634e634fdf8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5634e634fc18 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5634e634fc98 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5634e634fd10 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5634e6350018 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5634e634fec8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5634e634ff48 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5634e6350350 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5634e63500d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5634e6350158 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5634e63501d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5634e6350250 <col:57> col:60 'int'
|-CXXMethodDecl 0x5634e6350538 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5634e6350420 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5634e63504a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5634e6350688 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5634e63505f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5634e6350a08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5634e6350748 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5634e63507c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5634e6350840 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5634e63508c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5634e6350b20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct IPTable::Entry>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPTable
         0 |   class Vector<struct IPTable::Entry> _v
         0 |     class vector_memory<class sized_array_memory<16> > vm_
         0 |       vector_memory<class sized_array_memory<16> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class LinuxIPLookup
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _nout
       112 |   class Vector<class String> _out2devname
       112 |     class vector_memory<class typed_array_memory<class String> > vm_
       112 |       vector_memory<class typed_array_memory<class String> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   class IPTable _t
       128 |     class Vector<struct IPTable::Entry> _v
       128 |       class vector_memory<class sized_array_memory<16> > vm_
       128 |         vector_memory<class sized_array_memory<16> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
           | [sizeof=144, dsize=144, align=8,
           |  nvsize=144, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6113720 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5634e6113838 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5634e61138d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5634e6113938 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5634e6113998 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5634e6113a48 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6113d50 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5634e6113e68 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5634e6113f10 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5634e6113f78 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5634e6114008 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5634e611a0a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5634e611a4d8 <col:12>
|-CXXConstructorDecl 0x5634e611a1a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5634e611a2b8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5634e6113f10 'data' 'const char *'
| | `-ImplicitCastExpr 0x5634e611ca60 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5634e611ca30 <col:12> 'const char *const' lvalue .data 0x5634e6113f10
| |     `-DeclRefExpr 0x5634e611ca10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e611a2b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5634e6113f78 'length' 'int'
| | `-ImplicitCastExpr 0x5634e611caf0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5634e611cac0 <col:12> 'const int' lvalue .length 0x5634e6113f78
| |     `-DeclRefExpr 0x5634e611caa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e611a2b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5634e6114008 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5634e611cb80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5634e611cb50 <col:12> 'String::memo_t *const' lvalue .memo 0x5634e6114008
| |     `-DeclRefExpr 0x5634e611cb30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e611a2b8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5634e611cbd8 <col:12>
|-CXXConstructorDecl 0x5634e611a358 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5634e611a358
| `-ParmVarDecl 0x5634e611a468 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5634e611f9c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5634e612b3d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5634e612b4e8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5634e612ba00 <col:12>
|   |-BinaryOperator 0x5634e612b818 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5634e612b7d0 <col:12> 'const char *' lvalue ->data 0x5634e6113f10
|   | | `-CXXThisExpr 0x5634e612b7c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5634e612b800 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5634e612b790 <col:12> 'const char *const' lvalue .data 0x5634e6113f10
|   |     `-DeclRefExpr 0x5634e612b770 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e612b4e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5634e612b8e0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5634e612b898 <col:12> 'int' lvalue ->length 0x5634e6113f78
|   | | `-CXXThisExpr 0x5634e612b888 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5634e612b8c8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5634e612b858 <col:12> 'const int' lvalue .length 0x5634e6113f78
|   |     `-DeclRefExpr 0x5634e612b838 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e612b4e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5634e612b9a8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5634e612b960 <col:12> 'String::memo_t *' lvalue ->memo 0x5634e6114008
|   | | `-CXXThisExpr 0x5634e612b950 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5634e612b990 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5634e612b920 <col:12> 'String::memo_t *const' lvalue .memo 0x5634e6114008
|   |     `-DeclRefExpr 0x5634e612b900 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e612b4e8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5634e612b9f0 <col:12>
|     `-UnaryOperator 0x5634e612b9d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5634e612b9c8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5634e612b558 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5634e612b558
  `-ParmVarDecl 0x5634e612b668 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e610ac90 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5634e610ada8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5634e610ae38 <col:16, col:22> col:16 public
|-TypedefDecl 0x5634e610ae78 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5634e5ddfdc0 'const char *'
|   `-QualType 0x5634e5ddf311 'const char' const
|     `-BuiltinType 0x5634e5ddf310 'char'
|-TypedefDecl 0x5634e610af00 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5634e610aed0 'String::const_iterator' sugar
|   |-Typedef 0x5634e610ae78 'const_iterator'
|   `-PointerType 0x5634e5ddfdc0 'const char *'
|     `-QualType 0x5634e5ddf311 'const char' const
|       `-BuiltinType 0x5634e5ddf310 'char'
|-TypedefDecl 0x5634e610b070 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5634e610afe0 'int (String::*)() const'
|   |-RecordType 0x5634e610ad20 'String'
|   | `-CXXRecord 0x5634e610ac90 'String'
|   `-ParenType 0x5634e610af80 'int () const' sugar
|     `-FunctionProtoType 0x5634e60deb10 'int () const' const cdecl
|       `-BuiltinType 0x5634e5ddf370 'int'
|-TypedefDecl 0x5634e610b0d8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5634e5f336f0 'int64_t' sugar
|   |-Typedef 0x5634e5e482d0 'int64_t'
|   `-TypedefType 0x5634e5e214d0 '__int64_t' sugar
|     |-Typedef 0x5634e5e210a8 '__int64_t'
|     `-BuiltinType 0x5634e5ddf390 'long'
|-TypedefDecl 0x5634e610b140 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5634e5f33610 'uint64_t' sugar
|   |-Typedef 0x5634e5e48470 'uint64_t'
|   `-TypedefType 0x5634e5e21560 '__uint64_t' sugar
|     |-Typedef 0x5634e5e21118 '__uint64_t'
|     `-BuiltinType 0x5634e5ddf430 'unsigned long'
|-TypedefDecl 0x5634e610b1d0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5634e610b1a0 'String::intmax_t' sugar
|   |-Typedef 0x5634e610b0d8 'intmax_t'
|   `-TypedefType 0x5634e5f336f0 'int64_t' sugar
|     |-Typedef 0x5634e5e482d0 'int64_t'
|     `-TypedefType 0x5634e5e214d0 '__int64_t' sugar
|       |-Typedef 0x5634e5e210a8 '__int64_t'
|       `-BuiltinType 0x5634e5ddf390 'long'
|-TypedefDecl 0x5634e610b260 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5634e610b230 'String::uintmax_t' sugar
|   |-Typedef 0x5634e610b140 'uintmax_t'
|   `-TypedefType 0x5634e5f33610 'uint64_t' sugar
|     |-Typedef 0x5634e5e48470 'uint64_t'
|     `-TypedefType 0x5634e5e21560 '__uint64_t' sugar
|       |-Typedef 0x5634e5e21118 '__uint64_t'
|       `-BuiltinType 0x5634e5ddf430 'unsigned long'
|-CXXConstructorDecl 0x5634e610b320 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5634e610b4c8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5634e610b408 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5634e610b678 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5634e610b5b8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5634e610b7d0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5634e610b740 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5634e610b9e8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5634e610b898 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5634e610b918 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5634e610bc08 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5634e610bab8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5634e610bb38 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5634e610be28 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5634e610bcd8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5634e610bd58 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5634e610c048 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5634e610bef8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5634e610bf78 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5634e610c1d8 <line:49:5, col:34> col:21 String 'void (bool)' inline
| `-ParmVarDecl 0x5634e610c110 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5634e610c358 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5634e610c298 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5634e610c4e8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5634e610c420 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5634e610c640 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5634e610c5b0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5634e610c798 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5634e610c708 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5634e610c8f0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5634e610c860 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5634e610ca78 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5634e610c9b8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5634e610cc08 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5634e610cb40 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5634e610cd98 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5634e610ccd0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5634e610cf28 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5634e610ce60 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5634e610d020 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5634e610d148 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5634e610d2c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5634e610d200 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5634e610d418 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5634e610d388 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5634e610d4d0 <col:63> "" ""
|-CXXMethodDecl 0x5634e610d618 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5634e610d558 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5634e610d828 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5634e610d6d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5634e610d758 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5634e610da48 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5634e610d8f0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5634e610d970 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5634e610dd28 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5634e610db08 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5634e610db88 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5634e6119b70 <col:55> 'int' 10
| `-ParmVarDecl 0x5634e610dc00 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5634e6119b90 <col:76> 'bool' true
|-CXXMethodDecl 0x5634e610e008 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5634e610ddf0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5634e610de70 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5634e6119ba0 <col:56> 'int' 10
| `-ParmVarDecl 0x5634e610dee8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5634e6119bc0 <col:77> 'bool' true
|-CXXMethodDecl 0x5634e610e110 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5634e610e1d8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5634e610e2a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5634e610e340 <col:20>
| `-OptimizeNoneAttr 0x5634e610e398 <col:30>
|-CXXConversionDecl 0x5634e610e488 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5634e610e558 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5634e610e618 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5634e610e708 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5634e610e7c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5634e610e948 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5634e610e880 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5634e610ea98 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5634e610ea08 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5634e610eb88 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5634e610ec48 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5634e610ee98 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5634e610ed00 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5634e610ed80 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5634e610f0f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5634e610ef60 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5634e610efe0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5634e610f1c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e610f3d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5634e610f280 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5634e610f300 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5634e610f5f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5634e610f4a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5634e610f520 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5634e610f788 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5634e610f6c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5634e610f878 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5634e610f9e8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5634e610f928 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5634e610fbf8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5634e610faa8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5634e610fb28 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5634e610fe10 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5634e610fcb8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5634e610fd30 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5634e610ffa0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5634e610fed0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5634e61101c0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5634e6110060 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5634e61100e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5634e6110310 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5634e6110280 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5634e61104e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5634e61103d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5634e6110450 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5634e6110638 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5634e61105a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5634e6110850 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5634e61106f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5634e6110770 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5634e6119bd0 <col:39> 'int' 0
|-CXXMethodDecl 0x5634e6110a70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5634e6110910 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5634e6110990 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5634e6119bf0 <col:48> 'int' 0
|-CXXMethodDecl 0x5634e6110c50 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5634e6110b30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5634e6110bb0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5634e6119c10 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5634e6110d20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5634e6110de0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5634e6110ea0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5634e6110f60 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5634e6111020 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5634e61111c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5634e61110d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5634e6111348 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5634e6111280 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5634e6111520 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5634e6111408 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5634e6111698 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5634e61115d8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5634e61117e0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5634e6111750 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5634e6111930 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5634e61118a0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5634e6111b08 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5634e61119f0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5634e6111a70 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5634e6111ce8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5634e6111bd0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5634e6111c50 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5634e6111e38 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5634e6111da8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5634e6112048 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5634e6111ef8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5634e6111f78 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5634e61121a8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5634e6112110 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5634e6112300 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5634e6112268 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5634e61123a8 <col:57> "" ""
|-CXXMethodDecl 0x5634e61124b8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5634e6112428 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5634e6112608 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5634e6112578 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5634e6112788 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5634e61126c0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5634e6112850 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5634e6112910 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5634e61129d0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5634e6112a70 <col:49> "" ""
|-CXXMethodDecl 0x5634e6112b00 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5634e6112bc0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5634e6112cb0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5634e6112d78 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5634e6112e38 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5634e6112ef8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5634e6112ff0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5634e61130b8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5634e6113180 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5634e6113358 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5634e6113238 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5634e61132b8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5634e6113580 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5634e6113420 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5634e61134a0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5634e6113690 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5634e61136f8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5634e6113720 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634e6113838 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5634e61138d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5634e6113938 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5634e6113998 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5634e6113a48 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5634e6113ab0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5634e6113ce8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5634e6113d38 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e6113cc8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5634e6113bd8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5634e6113b80 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5634e6113bc0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5634e6113ba0 <col:32> 'int' 8
|-CXXRecordDecl 0x5634e6113d50 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5634e6113e68 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5634e6113f10 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5634e6113f78 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5634e6114008 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5634e611a0a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5634e611a4d8 <col:12>
| |-CXXConstructorDecl 0x5634e611a1a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5634e611a2b8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5634e6113f10 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5634e611ca60 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5634e611ca30 <col:12> 'const char *const' lvalue .data 0x5634e6113f10
| | |     `-DeclRefExpr 0x5634e611ca10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e611a2b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5634e6113f78 'length' 'int'
| | | `-ImplicitCastExpr 0x5634e611caf0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5634e611cac0 <col:12> 'const int' lvalue .length 0x5634e6113f78
| | |     `-DeclRefExpr 0x5634e611caa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e611a2b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5634e6114008 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5634e611cb80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5634e611cb50 <col:12> 'String::memo_t *const' lvalue .memo 0x5634e6114008
| | |     `-DeclRefExpr 0x5634e611cb30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e611a2b8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5634e611cbd8 <col:12>
| |-CXXConstructorDecl 0x5634e611a358 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5634e611a358
| | `-ParmVarDecl 0x5634e611a468 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5634e611f9c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5634e612b3d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5634e612b4e8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5634e612ba00 <col:12>
| |   |-BinaryOperator 0x5634e612b818 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5634e612b7d0 <col:12> 'const char *' lvalue ->data 0x5634e6113f10
| |   | | `-CXXThisExpr 0x5634e612b7c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5634e612b800 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5634e612b790 <col:12> 'const char *const' lvalue .data 0x5634e6113f10
| |   |     `-DeclRefExpr 0x5634e612b770 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e612b4e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5634e612b8e0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5634e612b898 <col:12> 'int' lvalue ->length 0x5634e6113f78
| |   | | `-CXXThisExpr 0x5634e612b888 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5634e612b8c8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5634e612b858 <col:12> 'const int' lvalue .length 0x5634e6113f78
| |   |     `-DeclRefExpr 0x5634e612b838 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e612b4e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5634e612b9a8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5634e612b960 <col:12> 'String::memo_t *' lvalue ->memo 0x5634e6114008
| |   | | `-CXXThisExpr 0x5634e612b950 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5634e612b990 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5634e612b920 <col:12> 'String::memo_t *const' lvalue .memo 0x5634e6114008
| |   |     `-DeclRefExpr 0x5634e612b900 <col:12> 'const String::rep_t' lvalue ParmVar 0x5634e612b4e8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5634e612b9f0 <col:12>
| |     `-UnaryOperator 0x5634e612b9d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5634e612b9c8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5634e612b558 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5634e612b558
|   `-ParmVarDecl 0x5634e612b668 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5634e6114080 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5634e61142c8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5634e61140e8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5634e6114168 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5634e61141e0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5634e611a060 <col:79, line:261:5>
|   |-BinaryOperator 0x5634e6119cd8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5634e6119c70 <col:2, col:5> 'const char *' lvalue .data 0x5634e6113f10
|   | | `-MemberExpr 0x5634e6119c40 <col:2> 'String::rep_t' lvalue ->_r 0x5634e6114080
|   | |   `-CXXThisExpr 0x5634e6119c30 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5634e6119cc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5634e6119ca0 <col:12> 'const char *' lvalue ParmVar 0x5634e61140e8 'data' 'const char *'
|   |-BinaryOperator 0x5634e6119da0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5634e6119d38 <col:2, col:5> 'int' lvalue .length 0x5634e6113f78
|   | | `-MemberExpr 0x5634e6119d08 <col:2> 'String::rep_t' lvalue ->_r 0x5634e6114080
|   | |   `-CXXThisExpr 0x5634e6119cf8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5634e6119d88 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5634e6119d68 <col:14> 'int' lvalue ParmVar 0x5634e6114168 'length' 'int'
|   `-IfStmt 0x5634e611a048 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5634e6119ec0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5634e6119ea8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5634e6119e88 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5634e6119e68 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5634e6119e00 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5634e6114008
|     |       | `-MemberExpr 0x5634e6119dd0 <col:7> 'String::rep_t' lvalue ->_r 0x5634e6114080
|     |       |   `-CXXThisExpr 0x5634e6119dc0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5634e6119e50 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5634e6119e30 <col:17> 'String::memo_t *' lvalue ParmVar 0x5634e61141e0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5634e611a020 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5634e611a008 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5634e6119f10 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5634e6102cf8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5634e6119f78 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5634e61138d8
|         `-ImplicitCastExpr 0x5634e6119f60 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5634e6119f40 <col:27> 'String::memo_t *' lvalue ParmVar 0x5634e61141e0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5634e6114578 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5634e6114398 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5634e6114418 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5634e6114490 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5634e6114080 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5634e611a4e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5634e611a678 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5634e611a5e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5634e611a550 <col:2> '<bound member function type>' ->assign_memo 0x5634e61142c8
|     | `-ImplicitCastExpr 0x5634e611a618 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5634e611a540 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5634e611a630 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5634e611a580 <col:14> 'const char *' lvalue ParmVar 0x5634e6114398 'data' 'const char *'
|     |-ImplicitCastExpr 0x5634e611a648 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5634e611a5a0 <col:20> 'int' lvalue ParmVar 0x5634e6114418 'length' 'int'
|     `-ImplicitCastExpr 0x5634e611a660 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5634e611a5c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5634e6114490 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5634e6114708 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5634e6114648 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5634e611a8d0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5634e611a850 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5634e611a6a0 <col:2> '<bound member function type>' ->assign_memo 0x5634e61142c8
|     | `-CXXThisExpr 0x5634e611a690 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5634e611a888 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5634e611a720 <col:14, col:19> 'const char *' lvalue .data 0x5634e6113f10
|     |   `-MemberExpr 0x5634e611a6f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5634e6114080
|     |     `-DeclRefExpr 0x5634e611a6d0 <col:14> 'const String' lvalue ParmVar 0x5634e6114648 'x' 'const String &'
|     |-ImplicitCastExpr 0x5634e611a8a0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5634e611a7a0 <col:25, col:30> 'int' lvalue .length 0x5634e6113f78
|     |   `-MemberExpr 0x5634e611a770 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5634e6114080
|     |     `-DeclRefExpr 0x5634e611a750 <col:25> 'const String' lvalue ParmVar 0x5634e6114648 'x' 'const String &'
|     `-ImplicitCastExpr 0x5634e611a8b8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5634e611a820 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5634e6114008
|         `-MemberExpr 0x5634e611a7f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5634e6114080
|           `-DeclRefExpr 0x5634e611a7d0 <col:38> 'const String' lvalue ParmVar 0x5634e6114648 'x' 'const String &'
|-CXXMethodDecl 0x5634e61147d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5634e611b290 <col:31, line:278:5>
|   `-IfStmt 0x5634e611b278 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5634e611a970 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5634e611a958 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5634e611a928 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5634e6114008
|     |     `-MemberExpr 0x5634e611a8f8 <col:6> 'String::rep_t' lvalue ->_r 0x5634e6114080
|     |       `-CXXThisExpr 0x5634e611a8e8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5634e611b250 <col:15, line:277:2>
|       |-ParenExpr 0x5634e611ae20 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5634e611adf0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5634e611aa80 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5634e611aa68 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5634e611aa50 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5634e611aa10 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5634e61138d8
|       |   |       `-ImplicitCastExpr 0x5634e611a9f8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5634e611a9c8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5634e6114008
|       |   |           `-MemberExpr 0x5634e611a998 <col:27> 'String::rep_t' lvalue ->_r 0x5634e6114080
|       |   |             `-CXXThisExpr 0x5634e611a988 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5634e611aae0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5634e611aac0 <col:54> 'int' 0
|       |   `-CallExpr 0x5634e611ad50 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5634e611ad38 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5634e611acb8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5634e611ad90 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5634e611abc8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5634e611ada8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5634e611abf8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5634e611adc0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5634e611ac30 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5634e611add8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5634e611aca0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5634e611ac88 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5634e611ac50 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5634e611b170 <line:274:6, line:275:22>
|       | |-CallExpr 0x5634e611b030 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5634e611b018 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5634e611af90 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5634e6104140 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5634e611af60 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5634e61138d8
|       | |   `-ImplicitCastExpr 0x5634e611af48 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5634e611af18 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5634e6114008
|       | |       `-MemberExpr 0x5634e611aee8 <col:40> 'String::rep_t' lvalue ->_r 0x5634e6114080
|       | |         `-CXXThisExpr 0x5634e611aed8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5634e611b130 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5634e611b118 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5634e611b058 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5634e6118fb0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5634e611b158 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5634e611b0b8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5634e6114008
|       |       `-MemberExpr 0x5634e611b088 <col:15> 'String::rep_t' lvalue ->_r 0x5634e6114080
|       |         `-CXXThisExpr 0x5634e611b078 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5634e611b230 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5634e611b1c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5634e6114008
|         | `-MemberExpr 0x5634e611b198 <col:6> 'String::rep_t' lvalue ->_r 0x5634e6114080
|         |   `-CXXThisExpr 0x5634e611b188 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5634e611b218 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5634e611b1f8 <col:16> 'int' 0
|-CXXMethodDecl 0x5634e6114a68 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5634e6114888 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5634e6114908 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5634e6114980 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5634e6114b40 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5634e6114d90 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5634e6114bf8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5634e6114c78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5634e6114cf0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5634e6114f78 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5634e6114e60 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5634e6114ee0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5634e6115078 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5634e611b368 <col:41, line:286:5>
|   `-ReturnStmt 0x5634e611b358 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5634e611b328 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5634e611b2f0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5634e611b2d8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5634e611b2b8 <col:46> 'int' 1
|-CXXMethodDecl 0x5634e6115318 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5634e6115130 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5634e61151b0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5634e6115230 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5634e6118fb0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5634e61153e0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5634e6119080 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5634e6119250 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5634e6119138 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5634e61191b8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5634e6119310 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5634e61193d8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5634e61194d8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5634e6119550 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5634e61195c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5634e6119630 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5634e6119730 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5634e6119780 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e6119710 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5634e61196f0 <col:22> 'int' 14
|-CXXMethodDecl 0x5634e6119998 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5634e61197b0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5634e6119830 <col:38> col:41 'int'
| `-ParmVarDecl 0x5634e61198b0 <col:43> col:46 'int'
|-FriendDecl 0x5634e6119aa0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5634e6119b30 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5634e6366d00 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5634e6366ed8 prev 0x5634e6366d00 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5634e6366f68 <col:46, col:52> col:46 public
|-TypedefDecl 0x5634e6366fa0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5634e5ddf370 'int'
|-TypedefDecl 0x5634e6368900 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5634e63688b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5634e6368890 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5634e63671b8 'type'
|     `-SubstTemplateTypeParmType 0x5634e6367180 'String' sugar
|       |-TemplateTypeParmType 0x5634e60ce530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60ce4e0 'T'
|       `-RecordType 0x5634e610ad20 'String'
|         `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e63689b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5634e6368980 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5634e6368960 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5634e6368900 'type'
|     `-ElaboratedType 0x5634e63688b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5634e6368890 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5634e63671b8 'type'
|         `-SubstTemplateTypeParmType 0x5634e6367180 'String' sugar
|           |-TemplateTypeParmType 0x5634e60ce530 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5634e60ce4e0 'T'
|           `-RecordType 0x5634e610ad20 'String'
|             `-CXXRecord 0x5634e610ac90 'String'
|-CXXMethodDecl 0x5634e6368b38 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5634e6368a48 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5634e6368c28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5634e6368d08 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5634e6368fd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5634e6368ee0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5634e6369218 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5634e6369090 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5634e6369108 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5634e63693e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5634e63692d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5634e6369350 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5634e6369548 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5634e6369618 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5634e6369868 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5634e63696d8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5634e6369750 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5634e6369ac8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5634e6369938 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5634e63699b0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5634e6369c88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5634e6369b98 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5634e6369e48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5634e6369d50 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5634e6369f00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5634e6369fb0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5634e636a1e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5634e636a060 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5634e636a0d8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5634e636a488 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5634e636a390 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5634e636a550 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5634e636a5a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5634e636a5f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5634e63424c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5634e63659a8 prev 0x5634e63424c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5634e6366c70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5634e6366c20 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5634e6366c00 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5634e6366ab0 'type'
|     `-SubstTemplateTypeParmType 0x5634e6366940 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5634e60a42e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5634e60a4288 'F'
|       `-RecordType 0x5634e63665a0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5634e63664c0 'typed_array_memory'
|-FieldDecl 0x5634e636a640 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5634e636a690 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5634e636a6c8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|   |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5634e60db7f8 'T'
|   `-RecordType 0x5634e610ad20 'String'
|     `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636a758 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5634e636a720 'String &'
|   `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|     |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5634e60db7f8 'T'
|     `-RecordType 0x5634e610ad20 'String'
|       `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636a7e8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5634e636a7b0 'const String &'
|   `-QualType 0x5634e6365a41 'const String' const
|     `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e610ad20 'String'
|         `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636a878 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5634e636a840 'String *'
|   `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|     |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5634e60db7f8 'T'
|     `-RecordType 0x5634e610ad20 'String'
|       `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636a908 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5634e636a8d0 'const String *'
|   `-QualType 0x5634e6365a41 'const String' const
|     `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e610ad20 'String'
|         `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636b560 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5634e636b510 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5634e636b4f0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5634e636b428 'type'
|     `-LValueReferenceType 0x5634e636b3f0 'const String &'
|       `-QualType 0x5634e636b191 'const String' const
|         `-SubstTemplateTypeParmType 0x5634e636b190 'String' sugar
|           |-TemplateTypeParmType 0x5634e60ae230 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5634e60ae1d8 'T'
|           `-RecordType 0x5634e610ad20 'String'
|             `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636b5c8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5634e636a7b0 'const String &'
|   `-QualType 0x5634e6365a41 'const String' const
|     `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e610ad20 'String'
|         `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636b620 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5634e5ddf370 'int'
|-TypedefDecl 0x5634e636b688 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5634e636a840 'String *'
|   `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|     |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5634e60db7f8 'T'
|     `-RecordType 0x5634e610ad20 'String'
|       `-CXXRecord 0x5634e610ac90 'String'
|-TypedefDecl 0x5634e636b6f0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5634e636a8d0 'const String *'
|   `-QualType 0x5634e6365a41 'const String' const
|     `-SubstTemplateTypeParmType 0x5634e6365a40 'String' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e610ad20 'String'
|         `-CXXRecord 0x5634e610ac90 'String'
|-EnumDecl 0x5634e636b748 <line:134:5> col:5
| `-EnumConstantDecl 0x5634e636b840 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5634e636b820 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5634e60dced8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5634e60dceb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5634e60dce90 <col:40> 'int' 1
|-CXXConstructorDecl 0x5634e636b8c8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5634e636bb58 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e636b980 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5634e636ba20 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5634e636be18 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5634e636bd00 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5634e636c0d8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5634e636bfc0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5634e636c3f0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5634e636c2d0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5634e636c700 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5634e636c5e0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5634e636c9f0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e636c838 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5634e636c8b0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5634e636cb18 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5634e636cbf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e636cc50 <col:30> Inherited
|-CXXMethodDecl 0x5634e636cc98 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5634e636cd48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e636cda0 <col:30> Inherited
|-CXXMethodDecl 0x5634e636ce68 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5634e636cf18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e636cf70 <col:30> Inherited
|-CXXMethodDecl 0x5634e636cfb8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5634e636d068 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e636d0c0 <col:30> Inherited
|-CXXMethodDecl 0x5634e636d108 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5634e636d1b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e636d210 <col:30> Inherited
|-CXXMethodDecl 0x5634e636d258 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5634e636d308 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e636d360 <col:30> Inherited
|-CXXMethodDecl 0x5634e636d388 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5634e636d438 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5634e636d4e8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5634e636d6a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e636d598 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5634e636d610 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5634e636d7f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5634e636d768 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e636d9a8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5634e636d8b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5634e636da60 <col:20>
| `-OptimizeNoneAttr 0x5634e636dab8 <col:30>
|-CXXMethodDecl 0x5634e636dbd8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5634e636dae0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5634e636dc90 <col:20>
| `-OptimizeNoneAttr 0x5634e636dce8 <col:30>
|-CXXMethodDecl 0x5634e636dda0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5634e636dd10 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e636dee8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5634e636de58 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e636e018 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5634e636e118 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5634e636e1e8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5634e636e2b8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5634e636e3f8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5634e636e368 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e636e540 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5634e636e4b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e636e688 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5634e636e5f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5634e636e740 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5634e636e840 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5634e636e7b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5634e636e8f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5634e636e9b8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5634e636eab8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5634e636ec38 <line:180:5, col:48> col:17 push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5634e636eb78 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5634e63708b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5634e636ecf0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5634e6370818 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5634e6370718 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5634e6370998 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5634e6370ae8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5634e6370a58 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5634e6370ba0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5634e6370de8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e6370c60 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5634e6370cd8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5634e6370f78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5634e6370eb8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5634e6371188 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5634e6371040 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5634e63710b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5634e6371248 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5634e63714a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5634e63713b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5634e6371578 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5634e63c93f0 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5634e635aaa0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5634e635ac78 prev 0x5634e635aaa0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5634e635ad08 <col:46, col:52> col:46 public
|-TypedefDecl 0x5634e635ad30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5634e5ddf370 'int'
|-TypedefDecl 0x5634e635c900 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5634e635c8b0 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5634e635b1e0 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5634e635b0e0 'type'
|     `-TemplateSpecializationType 0x5634e635b070 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5634e635af50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5634e635af30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5634e635af10 <col:24> 'unsigned long' 16
|       `-RecordType 0x5634e635b050 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5634e635af70 'char_array'
|-TypedefDecl 0x5634e635c9b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5634e635c980 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5634e635c960 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5634e635c900 'type'
|     `-ElaboratedType 0x5634e635c8b0 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5634e635b1e0 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5634e635b0e0 'type'
|         `-TemplateSpecializationType 0x5634e635b070 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5634e635af50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5634e635af30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5634e635af10 <col:24> 'unsigned long' 16
|           `-RecordType 0x5634e635b050 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5634e635af70 'char_array'
|-CXXMethodDecl 0x5634e635cb38 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5634e635ca48 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5634e635cc28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5634e635cd08 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5634e635cfd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5634e635cee0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5634e635d218 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5634e635d090 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5634e635d108 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5634e635d3e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5634e635d2d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5634e635d350 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5634e635d548 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5634e635d618 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5634e635d868 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5634e635d6d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5634e635d750 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5634e635dac8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5634e635d938 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5634e635d9b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5634e635dc88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5634e635db98 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5634e635de48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5634e635dd50 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5634e635df00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5634e635dfb0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5634e635e1e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5634e635e060 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5634e635e0d8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5634e635e488 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5634e635e390 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x5634e635e550 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5634e635e5a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5634e635e5f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5634e63593b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPTable::Entry'
|-CXXRecordDecl 0x5634e63595b8 prev 0x5634e63593b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5634e635aa10 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Entry>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5634e635a9c0 'typename array_memory<Entry>::type' sugar
|   `-TypedefType 0x5634e635a9a0 'conditional<true, sized_array_memory<16>, typed_array_memory<IPTable::Entry> >::type' sugar
|     |-Typedef 0x5634e635a850 'type'
|     `-SubstTemplateTypeParmType 0x5634e635a670 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5634e60a3b60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60a3b08 'T'
|       `-RecordType 0x5634e635a1c0 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5634e635a0d8 'sized_array_memory'
|-FieldDecl 0x5634e635e640 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPTable::Entry>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5634e635e690 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5634e635e6c8 <line:118:5, col:15> col:15 value_type 'IPTable::Entry':'IPTable::Entry'
| `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|   |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5634e60db7f8 'T'
|   `-RecordType 0x5634e6359000 'IPTable::Entry'
|     `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635e788 <line:119:5, col:16> col:16 reference 'IPTable::Entry &'
| `-LValueReferenceType 0x5634e635e750 'IPTable::Entry &'
|   `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|     |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5634e60db7f8 'T'
|     `-RecordType 0x5634e6359000 'IPTable::Entry'
|       `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635e848 <line:120:5, col:22> col:22 const_reference 'const IPTable::Entry &'
| `-LValueReferenceType 0x5634e635e810 'const IPTable::Entry &'
|   `-QualType 0x5634e6359651 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e6359000 'IPTable::Entry'
|         `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635e908 <line:121:5, col:16> col:16 pointer 'IPTable::Entry *'
| `-PointerType 0x5634e635e8d0 'IPTable::Entry *'
|   `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|     |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5634e60db7f8 'T'
|     `-RecordType 0x5634e6359000 'IPTable::Entry'
|       `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635e998 <line:122:5, col:22> col:22 const_pointer 'const IPTable::Entry *'
| `-PointerType 0x5634e635e960 'const IPTable::Entry *'
|   `-QualType 0x5634e6359651 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e6359000 'IPTable::Entry'
|         `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635f820 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Entry>::type':'const IPTable::Entry &'
| `-ElaboratedType 0x5634e635f7d0 'typename fast_argument<Entry>::type' sugar
|   `-TypedefType 0x5634e635f7b0 'fast_argument<IPTable::Entry, true>::type' sugar
|     |-Typedef 0x5634e635f6e8 'type'
|     `-LValueReferenceType 0x5634e635f6b0 'const IPTable::Entry &'
|       `-QualType 0x5634e635f451 'const IPTable::Entry' const
|         `-SubstTemplateTypeParmType 0x5634e635f450 'IPTable::Entry' sugar
|           |-TemplateTypeParmType 0x5634e60ae230 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5634e60ae1d8 'T'
|           `-RecordType 0x5634e6359000 'IPTable::Entry'
|             `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635f888 <line:126:5, col:22> col:22 const_access_type 'const IPTable::Entry &'
| `-LValueReferenceType 0x5634e635e810 'const IPTable::Entry &'
|   `-QualType 0x5634e6359651 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e6359000 'IPTable::Entry'
|         `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635f8e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5634e5ddf370 'int'
|-TypedefDecl 0x5634e635f948 <line:130:5, col:16> col:16 iterator 'IPTable::Entry *'
| `-PointerType 0x5634e635e8d0 'IPTable::Entry *'
|   `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|     |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5634e60db7f8 'T'
|     `-RecordType 0x5634e6359000 'IPTable::Entry'
|       `-CXXRecord 0x5634e6358f70 'Entry'
|-TypedefDecl 0x5634e635f9b0 <line:131:5, col:22> col:22 const_iterator 'const IPTable::Entry *'
| `-PointerType 0x5634e635e960 'const IPTable::Entry *'
|   `-QualType 0x5634e6359651 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5634e6359650 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5634e60db850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5634e60db7f8 'T'
|       `-RecordType 0x5634e6359000 'IPTable::Entry'
|         `-CXXRecord 0x5634e6358f70 'Entry'
|-EnumDecl 0x5634e635fa08 <line:134:5> col:5
| `-EnumConstantDecl 0x5634e635fb00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPTable::Entry>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5634e635fae0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5634e60dced8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5634e60dceb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5634e60dce90 <col:40> 'int' 1
|-CXXConstructorDecl 0x5634e635fb88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5634e635fe18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e635fc40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5634e635fce0 <col:41, col:61> col:61 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXConstructorDecl 0x5634e63600d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPTable::Entry> &)' inline
| `-ParmVarDecl 0x5634e635ffc0 <col:19, col:36> col:36 x 'const Vector<IPTable::Entry> &'
|-CXXConstructorDecl 0x5634e6360398 <line:141:5, col:32> col:12 Vector 'void (Vector<IPTable::Entry> &&)' inline
| `-ParmVarDecl 0x5634e6360280 <col:19, col:31> col:31 x 'Vector<IPTable::Entry> &&'
|-CXXMethodDecl 0x5634e63606e0 <line:144:5, col:51> col:23 operator= 'Vector<IPTable::Entry> &(const Vector<IPTable::Entry> &)' inline
| `-ParmVarDecl 0x5634e63605c0 <col:33, col:50> col:50 x 'const Vector<IPTable::Entry> &'
|-CXXMethodDecl 0x5634e63609f0 <line:146:5, col:46> col:23 operator= 'Vector<IPTable::Entry> &(Vector<IPTable::Entry> &&)' inline
| `-ParmVarDecl 0x5634e63608d0 <col:33, col:45> col:45 x 'Vector<IPTable::Entry> &&'
|-CXXMethodDecl 0x5634e6360ce0 <line:148:5, col:70> col:23 assign 'Vector<IPTable::Entry> &(Vector::size_type, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e6360b28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5634e6360ba0 <col:43, col:69> col:63 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5634e6360e38 <line:150:5, col:55> col:49 begin 'Vector<IPTable::Entry>::iterator ()'
| |-NoInlineAttr 0x5634e6360f18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e6360f70 <col:30> Inherited
|-CXXMethodDecl 0x5634e6360fb8 <line:151:5, col:53> col:49 end 'Vector<IPTable::Entry>::iterator ()'
| |-NoInlineAttr 0x5634e6361068 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e63610c0 <col:30> Inherited
|-CXXMethodDecl 0x5634e6361188 <line:152:5, col:63> col:55 begin 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5634e6361238 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e6361290 <col:30> Inherited
|-CXXMethodDecl 0x5634e63612d8 <line:153:5, col:61> col:55 end 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5634e6361388 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e63613e0 <col:30> Inherited
|-CXXMethodDecl 0x5634e6361428 <line:154:5, col:64> col:55 cbegin 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5634e63614d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e6361530 <col:30> Inherited
|-CXXMethodDecl 0x5634e6361578 <line:155:5, col:62> col:55 cend 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5634e6361628 <col:20> Inherited
| `-OptimizeNoneAttr 0x5634e6361680 <col:30> Inherited
|-CXXMethodDecl 0x5634e63616a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5634e6361758 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5634e6361808 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5634e63619c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e63618b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5634e6361930 <col:37, col:63> col:57 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5634e6361b18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5634e6361a88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e6361cc8 <line:163:5, col:65> col:43 operator[] 'IPTable::Entry &(Vector::size_type)'
| |-ParmVarDecl 0x5634e6361bd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5634e6361d80 <col:20>
| `-OptimizeNoneAttr 0x5634e6361dd8 <col:30>
|-CXXMethodDecl 0x5634e6361ef8 <line:164:5, col:73> col:49 operator[] 'const IPTable::Entry &(Vector::size_type) const'
| |-ParmVarDecl 0x5634e6361e00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5634e6361fb0 <col:20>
| `-OptimizeNoneAttr 0x5634e6362008 <col:30>
|-CXXMethodDecl 0x5634e63620c0 <line:165:5, col:29> col:15 at 'IPTable::Entry &(Vector::size_type)' inline
| `-ParmVarDecl 0x5634e6362030 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e6362208 <line:166:5, col:37> col:21 at 'const IPTable::Entry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5634e6362178 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e6362338 <line:167:5, col:21> col:15 front 'IPTable::Entry &()' inline
|-CXXMethodDecl 0x5634e6362468 <line:168:5, col:29> col:21 front 'const IPTable::Entry &() const' inline
|-CXXMethodDecl 0x5634e6362538 <line:169:5, col:20> col:15 back 'IPTable::Entry &()' inline
|-CXXMethodDecl 0x5634e6362608 <line:170:5, col:28> col:21 back 'const IPTable::Entry &() const' inline
|-CXXMethodDecl 0x5634e6362748 <line:172:5, col:39> col:15 unchecked_at 'IPTable::Entry &(Vector::size_type)' inline
| `-ParmVarDecl 0x5634e63626b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e6362890 <line:173:5, col:47> col:21 unchecked_at 'const IPTable::Entry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5634e6362800 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5634e63629d8 <line:174:5, col:59> col:15 at_u 'IPTable::Entry &(Vector::size_type)' inline
| |-ParmVarDecl 0x5634e6362948 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5634e6362a90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5634e6362b90 <line:175:5, col:71> col:21 at_u 'const IPTable::Entry &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5634e6362b00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5634e6362c48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5634e6362d08 <line:177:5, col:20> col:15 data 'IPTable::Entry *()' inline
|-CXXMethodDecl 0x5634e6362e08 <line:178:5, col:28> col:21 data 'const IPTable::Entry *() const' inline
|-CXXMethodDecl 0x5634e6362fb8 <line:180:5, col:48> col:17 push_back 'void (Vector<IPTable::Entry>::value_argument_type)' inline
| `-ParmVarDecl 0x5634e6362ec8 <col:27, col:47> col:47 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-FunctionTemplateDecl 0x5634e63637a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5634e6363070 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPTable::Entry>':'fast_argument<IPTable::Entry, true>'
| `-CXXMethodDecl 0x5634e6363708 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPTable::Entry &&)' inline
|   `-ParmVarDecl 0x5634e6363608 <col:58, col:62> col:62 v 'IPTable::Entry &&'
|-CXXMethodDecl 0x5634e6363888 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5634e63639d8 <line:186:5, col:49> col:17 push_front 'void (Vector<IPTable::Entry>::value_argument_type)' inline
| `-ParmVarDecl 0x5634e6363948 <col:28, col:48> col:48 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5634e6363a90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5634e6363cd8 <line:189:5, col:62> col:21 insert 'Vector<IPTable::Entry>::iterator (Vector<IPTable::Entry>::iterator, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5634e6363b50 <col:28, col:37> col:37 it 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
| `-ParmVarDecl 0x5634e6363bc8 <col:41, col:61> col:61 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5634e6363e98 <line:190:5, col:38> col:21 erase 'Vector<IPTable::Entry>::iterator (Vector<IPTable::Entry>::iterator)' inline
| `-ParmVarDecl 0x5634e6363da8 <col:27, col:36> col:36 it 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
|-CXXMethodDecl 0x5634e63640e8 <line:191:5, col:49> col:21 erase 'Vector<IPTable::Entry>::iterator (Vector<IPTable::Entry>::iterator, Vector<IPTable::Entry>::iterator)' inline
| |-ParmVarDecl 0x5634e6363f60 <col:27, col:36> col:36 a 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
| `-ParmVarDecl 0x5634e6363fd8 <col:39, col:48> col:48 b 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
|-CXXMethodDecl 0x5634e63641a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5634e6364408 <line:195:5, col:34> col:17 swap 'void (Vector<IPTable::Entry> &)' inline
| `-ParmVarDecl 0x5634e6364310 <col:22, col:33> col:33 x 'Vector<IPTable::Entry> &'
`-CXXDestructorDecl 0x5634e63644d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6358268 <../dummy_inc/click/iptable.hh:13:1, line:35:1> line:13:7 referenced class IPTable definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5634e6358388 <col:1, col:7> col:7 implicit referenced class IPTable
|-AccessSpecDecl 0x5634e6358418 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5634e63584a0 <line:15:3, col:11> col:3 used IPTable 'void ()'
|-CXXDestructorDecl 0x5634e6358590 <line:16:3, col:12> col:3 used ~IPTable 'void () noexcept'
|-CXXMethodDecl 0x5634e6358888 <line:18:3, col:57> col:8 lookup 'bool (IPAddress, IPAddress &, int &) const'
| |-ParmVarDecl 0x5634e6358680 <col:15, col:25> col:25 dst 'IPAddress'
| |-ParmVarDecl 0x5634e63586f8 <col:30, col:41> col:41 gw 'IPAddress &'
| `-ParmVarDecl 0x5634e6358778 <col:45, col:50> col:50 index 'int &'
|-CXXMethodDecl 0x5634e6358bb8 <line:20:3, col:66> col:8 add 'void (IPAddress, IPAddress, IPAddress, int)'
| |-ParmVarDecl 0x5634e6358950 <col:12, col:22> col:22 dst 'IPAddress'
| |-ParmVarDecl 0x5634e63589c8 <col:27, col:37> col:37 mask 'IPAddress'
| |-ParmVarDecl 0x5634e6358a40 <col:43, col:53> col:53 gw 'IPAddress'
| `-ParmVarDecl 0x5634e6358ac0 <col:57, col:61> col:61 index 'int'
|-CXXMethodDecl 0x5634e6358dd8 <line:21:3, col:41> col:8 del 'void (IPAddress, IPAddress)'
| |-ParmVarDecl 0x5634e6358c88 <col:12, col:22> col:22 dst 'IPAddress'
| `-ParmVarDecl 0x5634e6358d00 <col:27, col:37> col:37 mask 'IPAddress'
|-CXXMethodDecl 0x5634e6358ea8 <line:22:3, col:30> col:8 clear 'void ()'
| `-CompoundStmt 0x5634e63649f8 <col:16, col:30>
|   `-CXXMemberCallExpr 0x5634e63649d8 <col:18, col:27> 'void'
|     `-MemberExpr 0x5634e63649a8 <col:18, col:21> '<bound member function type>' .clear 0x5634e63641a8
|       `-MemberExpr 0x5634e6364978 <col:18> 'Vector<IPTable::Entry>':'Vector<IPTable::Entry>' lvalue ->_v 0x5634e63645c0
|         `-CXXThisExpr 0x5634e6364968 <col:18> 'IPTable *' implicit this
|-AccessSpecDecl 0x5634e6358f48 <line:24:2, col:9> col:2 private
|-CXXRecordDecl 0x5634e6358f70 <line:26:3, line:32:3> line:26:10 referenced struct Entry definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634e6359088 <col:3, col:10> col:10 implicit struct Entry
| |-FieldDecl 0x5634e6359128 <line:27:5, col:15> col:15 referenced dst 'IPAddress'
| |-FieldDecl 0x5634e6359188 <line:28:5, col:15> col:15 referenced mask 'IPAddress'
| |-FieldDecl 0x5634e63591e8 <line:29:5, col:15> col:15 gw 'IPAddress'
| |-FieldDecl 0x5634e6359250 <line:30:5, col:9> col:9 index 'int'
| `-CXXMethodDecl 0x5634e63592e8 <line:31:5, col:47> col:10 valid 'bool () const'
|   `-CompoundStmt 0x5634e6364bd8 <col:24, col:47>
|     `-ReturnStmt 0x5634e6364bc8 <col:26, col:42>
|       `-BinaryOperator 0x5634e6364ba8 <col:33, col:42> 'bool' '||'
|         |-ImplicitCastExpr 0x5634e6364b90 <col:33> 'bool' <IntegralToBoolean>
|         | `-ImplicitCastExpr 0x5634e6364b78 <col:33> 'uint32_t':'unsigned int' <UserDefinedConversion>
|         |   `-CXXMemberCallExpr 0x5634e6364b58 <col:33> 'uint32_t':'unsigned int'
|         |     `-MemberExpr 0x5634e6364b28 <col:33> '<bound member function type>' .operator unsigned int 0x5634e6141b78
|         |       `-MemberExpr 0x5634e6364a20 <col:33> 'const IPAddress' lvalue ->mask 0x5634e6359188
|         |         `-CXXThisExpr 0x5634e6364a10 <col:33> 'const IPTable::Entry *' implicit this
|         `-UnaryOperator 0x5634e6364b10 <col:41, col:42> 'bool' prefix '!' cannot overflow
|           `-ImplicitCastExpr 0x5634e6364af8 <col:42> 'bool' <IntegralToBoolean>
|             `-ImplicitCastExpr 0x5634e6364ae0 <col:42> 'uint32_t':'unsigned int' <UserDefinedConversion>
|               `-CXXMemberCallExpr 0x5634e6364ac0 <col:42> 'uint32_t':'unsigned int'
|                 `-MemberExpr 0x5634e6364a90 <col:42> '<bound member function type>' .operator unsigned int 0x5634e6141b78
|                   `-MemberExpr 0x5634e6364a60 <col:42> 'const IPAddress' lvalue ->dst 0x5634e6359128
|                     `-CXXThisExpr 0x5634e6364a50 <col:42> 'const IPTable::Entry *' implicit this
|-FieldDecl 0x5634e63645c0 <line:33:3, col:17> col:17 referenced _v 'Vector<IPTable::Entry>':'Vector<IPTable::Entry>'
|-CXXConstructorDecl 0x5634e6364638 <line:13:7> col:7 implicit IPTable 'void (const IPTable &)' inline default noexcept-unevaluated 0x5634e6364638
| `-ParmVarDecl 0x5634e6364748 <col:7> col:7 'const IPTable &'
`-CXXMethodDecl 0x5634e63647e8 <col:7> col:7 implicit operator= 'IPTable &(const IPTable &)' inline default noexcept-unevaluated 0x5634e63647e8
  `-ParmVarDecl 0x5634e63648f8 <col:7> col:7 'const IPTable &'

Layout: <CGRecordLayout
  LLVMType:%class.IPTable = type { %class.Vector.0 }
  NonVirtualBaseLLVMType:%class.IPTable = type { %class.Vector.0 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6364bf0 <../elements/ip/lookupiproutelinux.hh:40:1, line:64:1> line:40:7 class LinuxIPLookup definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5634e6364d48 <col:1, col:7> col:7 implicit referenced class LinuxIPLookup
|-AccessSpecDecl 0x5634e6364dd8 <line:41:1, col:7> col:1 public
|-CXXConstructorDecl 0x5634e6364e60 <line:42:3, col:17> col:3 LinuxIPLookup 'void ()'
|-CXXDestructorDecl 0x5634e6364f50 <line:43:3, col:18> col:3 ~LinuxIPLookup 'void ()' noexcept-unevaluated 0x5634e6364f50
| `-Overrides: [ 0x5634e633fb58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5634e6365080 <line:45:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5634e6340fb8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5634e6371ea8 <col:34, col:60>
|   `-ReturnStmt 0x5634e6371e98 <col:36, col:43>
|     `-ImplicitCastExpr 0x5634e6371e80 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5634e6371e58 <col:43> 'const char [14]' lvalue "LinuxIPLookup"
|-CXXMethodDecl 0x5634e6365148 <line:46:3, col:51> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5634e6341080 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5634e6371f80 <col:34, col:51>
|   `-ReturnStmt 0x5634e6371f70 <col:36, col:43>
|     `-ImplicitCastExpr 0x5634e6371f58 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5634e6371f38 <col:43> 'const char [5]' lvalue "1/1-"
|-CXXMethodDecl 0x5634e6365420 <line:47:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5634e6342850 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5634e63652d0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5634e6365348 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5634e6365578 <line:48:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5634e6342aa0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5634e63654e0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5634e6365748 <line:50:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5634e633fe28 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5634e6365638 <col:13> col:16 'int'
| `-ParmVarDecl 0x5634e63656b0 <col:18, col:25> col:26 'Packet *'
|-AccessSpecDecl 0x5634e63657f8 <line:52:1, col:8> col:1 private
|-FieldDecl 0x5634e6365838 <line:53:3, col:7> col:7 referenced _nout 'int'
|-FieldDecl 0x5634e6371660 <line:54:3, col:18> col:18 _out2devname 'Vector<String>':'Vector<String>'
|-CXXMethodDecl 0x5634e6371758 <line:56:3, col:33> col:7 init_routes 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5634e63716c0 <col:19, col:32> col:33 'ErrorHandler *'
|-CXXMethodDecl 0x5634e63719e8 <line:57:3, col:44> col:8 lookup 'bool (IPAddress, IPAddress &, int &)'
| |-ParmVarDecl 0x5634e6371810 <col:15> col:24 'IPAddress'
| |-ParmVarDecl 0x5634e6371888 <col:26, col:36> col:37 'IPAddress &'
| `-ParmVarDecl 0x5634e6371908 <col:39, col:43> col:44 'int &'
|-FieldDecl 0x5634e6371ab0 <line:62:3, col:11> col:11 _t 'IPTable'
|-CXXConstructorDecl 0x5634e6371b28 <line:40:7> col:7 implicit LinuxIPLookup 'void (const LinuxIPLookup &)' inline default_delete noexcept-unevaluated 0x5634e6371b28
| `-ParmVarDecl 0x5634e6371c38 <col:7> col:7 'const LinuxIPLookup &'
`-CXXMethodDecl 0x5634e6371cd8 <col:7> col:7 implicit operator= 'LinuxIPLookup &(const LinuxIPLookup &)' inline default_delete noexcept-unevaluated 0x5634e6371cd8
  `-ParmVarDecl 0x5634e6371de8 <col:7> col:7 'const LinuxIPLookup &'

Layout: <CGRecordLayout
  LLVMType:%class.LinuxIPLookup = type { %class.Element.base, i32, %class.Vector, %class.IPTable }
  NonVirtualBaseLLVMType:%class.LinuxIPLookup = type { %class.Element.base, i32, %class.Vector, %class.IPTable }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e62c49c8 prev 0x5634e63720b8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5634e62c4ac0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5634e62c4b50 <col:22, col:28> col:22 public
|-EnumDecl 0x5634e62c4b78 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5634e62c4c98 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c4c78 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5634e62c4c60 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5634e62c4c40 <col:14> 'int' 999
| |-EnumConstantDecl 0x5634e62c4d40 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c4d20 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5634e62c4d08 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5634e62c4ce8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5634e62c4dd0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c4db0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5634e62c4d90 <col:17> 'int' 0
| |-EnumConstantDecl 0x5634e62c4e60 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c4e40 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5634e62c4e20 <col:13> 'int' 1
| |-EnumConstantDecl 0x5634e62c4ef0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c4ed0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5634e62c4eb0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5634e62c4f80 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c4f60 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5634e62c4f40 <col:13> 'int' 3
| |-EnumConstantDecl 0x5634e62c5010 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c4ff0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5634e62c4fd0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5634e62c50a0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c5080 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5634e62c5060 <col:14> 'int' 5
| |-EnumConstantDecl 0x5634e62c5130 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5634e62c5110 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5634e62c50f0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5634e62c51c0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5634e62c51a0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5634e62c5180 <col:13> 'int' 7
|-VarDecl 0x5634e62c5230 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5634e62c52b8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5634e62c5340 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5634e62c53c8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5634e62c5450 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5634e62c54d8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5634e62c5560 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5634e62c55e8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5634e62c5670 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5634e62c56f8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5634e62c5780 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5634e62c5880 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5634e63bd278 '_nerrors' 'int'
| | `-IntegerLiteral 0x5634e63bda08 <line:128:13> 'int' 0
| `-CompoundStmt 0x5634e63bda78 <col:16, line:129:5>
|-CXXDestructorDecl 0x5634e62c5970 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5634e63bda88 <col:29, line:132:5>
|-CXXMethodDecl 0x5634e62c5b28 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5634e62c5a60 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5634e62c5bf0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5634e62c5cd8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5634e63bdae0 <col:44, line:161:5>
|   `-ReturnStmt 0x5634e63bdad0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5634e63bdab8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5634e63bda98 <col:9> 'ErrorHandler *' lvalue Var 0x5634e63bd2d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5634e62c5e48 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5634e62c5d88 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5634e62c5f10 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5634e63bdb40 <col:43, line:173:5>
|   `-ReturnStmt 0x5634e63bdb30 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5634e63bdb18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5634e63bdaf8 <col:9> 'ErrorHandler *' lvalue Var 0x5634e63bd350 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5634e62c5fc8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5634e62c6048 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5634e62c6158 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5634e62c60c8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5634e62c62a8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5634e62c6218 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5634e62c6400 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5634e62c6368 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5634e62c6558 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5634e62c64c0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5634e62c66b0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5634e62c6618 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5634e62c68c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5634e62c6768 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5634e62c67e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5634e63b9118 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5634e62c6980 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5634e63b9080 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5634e63b9338 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5634e63b91d8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5634e63b9258 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5634e63b9518 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5634e63b93f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5634e63b9478 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5634e63b96f8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5634e63b95d8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5634e63b9658 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5634e63b9880 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5634e63b97b8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5634e63b9a50 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5634e63b9938 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5634e63b99b0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5634e63bdd98 <col:57, line:234:5>
|   `-ReturnStmt 0x5634e63bdd88 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5634e63bdd70 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5634e63bdd18 <col:9, col:41> 'int'
|         |-MemberExpr 0x5634e63bdce8 <col:9> '<bound member function type>' ->xmessage 0x5634e63b9880
|         | `-CXXThisExpr 0x5634e63bdcd8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5634e63bdd58 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5634e63bdd40 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5634e63bdcb8 <col:18, col:40> 'String' (CXXTemporary 0x5634e63bdcb8)
|               `-CallExpr 0x5634e63bdc80 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5634e63bdc68 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5634e63bdbe0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5634e63bbaa8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5634e63bdc00 <col:31> 'const String' lvalue ParmVar 0x5634e63b99b0 'str' 'const String &'
|                 `-DeclRefExpr 0x5634e63bdc20 <col:36> 'const String' lvalue ParmVar 0x5634e63b9938 'anno' 'const String &'
|-CXXMethodDecl 0x5634e63b9d90 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5634e63b9b10 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5634e63b9b90 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5634e63b9c60 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5634e63be028 <col:68, line:243:5>
|   `-ReturnStmt 0x5634e63be018 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5634e63be000 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5634e63bdfa0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5634e63bdf70 <col:9> '<bound member function type>' ->xmessage 0x5634e63b9a50
|         | `-CXXThisExpr 0x5634e63bdf60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5634e63bde38 <col:18> 'const String' lvalue ParmVar 0x5634e63b9b10 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5634e63bdfe8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5634e63bdfd0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5634e63bdf40 <col:24, col:40> 'String' (CXXTemporary 0x5634e63bdf40)
|               `-CXXMemberCallExpr 0x5634e63bded8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5634e63bde68 <col:24> '<bound member function type>' ->vformat 0x5634e63baf70
|                 | `-CXXThisExpr 0x5634e63bde58 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5634e63bdf08 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5634e63bde98 <col:32> 'const char *' lvalue ParmVar 0x5634e63b9b90 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5634e63bdf20 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5634e63bdeb8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5634e63b9c60 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5634e63ba030 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5634e63b9e58 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5634e63b9ed0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5634e63b9f48 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5634e63be368 <col:23, line:254:5>
|   `-ReturnStmt 0x5634e63be358 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5634e63be340 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5634e63be2e0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5634e63be2b0 <col:9> '<bound member function type>' ->xmessage 0x5634e63b9a50
|         | `-CXXThisExpr 0x5634e63be2a0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5634e63be328 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5634e63be310 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5634e63be260 <col:18, col:65> 'String' (CXXTemporary 0x5634e63be260)
|         |     `-CallExpr 0x5634e63be1f8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5634e63be1e0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5634e63be0c8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5634e63bbaa8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5634e63be0e8 <col:31> 'const String' lvalue ParmVar 0x5634e63b9ed0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5634e63be240 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5634e63be228 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5634e63be1c0 <col:37, col:64> 'String' (CXXTemporary 0x5634e63be1c0)
|         |             `-CallExpr 0x5634e63be190 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5634e63be178 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5634e63be108 <col:37> 'String (const String &)' lvalue CXXMethod 0x5634e63bc0f8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5634e63be128 <col:56> 'const String' lvalue ParmVar 0x5634e63b9e58 'landmark' 'const String &'
|         `-DeclRefExpr 0x5634e63be280 <col:68> 'const String' lvalue ParmVar 0x5634e63b9f48 'str' 'const String &'
|-CXXMethodDecl 0x5634e63ba3b0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5634e63ba0f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5634e63ba170 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5634e63ba1f0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5634e63ba268 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5634e63be620 <col:34, line:267:5>
|   `-ReturnStmt 0x5634e63be610 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5634e63be5f8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5634e63be590 <col:9, col:51> 'int'
|         |-MemberExpr 0x5634e63be560 <col:9> '<bound member function type>' ->xmessage 0x5634e63ba030
|         | `-CXXThisExpr 0x5634e63be550 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5634e63be408 <col:18> 'const String' lvalue ParmVar 0x5634e63ba0f8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5634e63be428 <col:28> 'const String' lvalue ParmVar 0x5634e63ba170 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5634e63be5e0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5634e63be5c8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5634e63be530 <col:34, col:50> 'String' (CXXTemporary 0x5634e63be530)
|               `-CXXMemberCallExpr 0x5634e63be4c8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5634e63be458 <col:34> '<bound member function type>' ->vformat 0x5634e63baf70
|                 | `-CXXThisExpr 0x5634e63be448 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5634e63be4f8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5634e63be488 <col:42> 'const char *' lvalue ParmVar 0x5634e63ba1f0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5634e63be510 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5634e63be4a8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5634e63ba268 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5634e63ba4c0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5634e63be6a0 <col:25, line:288:5>
|   `-ReturnStmt 0x5634e63be690 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5634e63be678 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5634e63be648 <col:9> 'const int' lvalue ->_nerrors 0x5634e63bd278
|         `-CXXThisExpr 0x5634e63be638 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5634e63ba6d0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5634e63ba578 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5634e63ba5f8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5634e63ba9b8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5634e63ba798 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5634e63ba818 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5634e63ba890 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5634e63bab50 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5634e63baa88 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5634e63bad98 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5634e63bac10 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5634e63bac88 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5634e63be900 <col:58, line:357:5>
|   `-ReturnStmt 0x5634e63be8f0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5634e63be8d8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5634e63be8a8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5634e63be890 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5634e63be870 <col:9, col:29> 'String' (CXXTemporary 0x5634e63be870)
|             `-CallExpr 0x5634e63be800 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5634e63be7e8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5634e63be768 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5634e63ba9b8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5634e63be708 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5634e63be838 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5634e63be728 <col:21> 'const char *' lvalue ParmVar 0x5634e63bac10 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5634e63be850 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5634e63be748 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5634e63bac88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5634e63baf70 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5634e63bae60 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5634e63baed8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5634e63bb0c8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5634e63bb038 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5634e63bb210 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5634e63bb180 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5634e63bb4b0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5634e63bb2c8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5634e63bb348 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5634e63bb3c0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5634e63bb610 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5634e63bb580 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5634e63bea18 <col:37, line:441:5>
|   `-IfStmt 0x5634e63bea00 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5634e63be988 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5634e63be958 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5634e63be918 <col:6> 'int' lvalue ParmVar 0x5634e63bb580 'level' 'int'
|     | `-ImplicitCastExpr 0x5634e63be970 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5634e63be938 <col:15> 'ErrorHandler::Level' EnumConstant 0x5634e62c4f80 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5634e63be9e8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5634e63be9b8 <col:8> 'int' lvalue ->_nerrors 0x5634e63bd278
|         `-CXXThisExpr 0x5634e63be9a8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5634e63bb6d8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5634e63beab0 <col:26, line:448:5>
|   `-BinaryOperator 0x5634e63bea90 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5634e63bea40 <col:2> 'int' lvalue ->_nerrors 0x5634e63bd278
|     | `-CXXThisExpr 0x5634e63bea30 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5634e63bea70 <col:13> 'int' 0
|-CXXMethodDecl 0x5634e63bb8a0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5634e63bb790 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5634e63bb808 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5634e63bbaa8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5634e63bb960 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5634e63bb9d8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5634e63bbd58 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5634e63bbb68 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5634e63bbbe8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5634e63bbc68 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5634e63bbe10 <col:59> 0 0
|-CXXMethodDecl 0x5634e63bbfa8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5634e63bbe88 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5634e63bbf08 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5634e63bf120 <col:70, line:534:5>
|   |-DeclStmt 0x5634e63bec20 <line:528:2, col:20>
|   | |-VarDecl 0x5634e63bead8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5634e63beb40 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5634e63beb78 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5634e63bebe0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5634e63becf0 <line:529:2, col:23>
|   | `-VarDecl 0x5634e63bec50 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5634e63becd8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5634e63becb8 <col:18> 'const char *' lvalue ParmVar 0x5634e63bbe88 'begin' 'const char *'
|   |-DoStmt 0x5634e63bf0b8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5634e63befe8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5634e63befd0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5634e63befb0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5634e63bed08 <col:6> 'const char *' lvalue Var 0x5634e63bec50 'x' 'const char *'
|   | |     `-CallExpr 0x5634e63bef00 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5634e63beee8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5634e63beea0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5634e63bd750 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5634e63bef68 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5634e63bef50 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5634e63bedc0 <col:20, col:27> 'String' (CXXTemporary 0x5634e63bedc0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5634e63bed88 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5634e63bef80 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5634e63bede0 <col:30> 'const char *' lvalue Var 0x5634e63bec50 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5634e63bef98 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5634e63bee00 <col:33> 'const char *' lvalue ParmVar 0x5634e63bbf08 'end' 'const char *'
|   | |       |-UnaryOperator 0x5634e63bee40 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5634e63bee20 <col:39> 'String' lvalue Var 0x5634e63bead8 'name' 'String'
|   | |       |-UnaryOperator 0x5634e63bee78 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5634e63bee58 <col:46> 'String' lvalue Var 0x5634e63beb78 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5634e63bee90 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5634e63bf0a0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5634e63bf088 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5634e63bf068 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5634e63bf038 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5634e610e488
|   |         `-ImplicitCastExpr 0x5634e63bf020 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5634e63bf000 <col:11> 'String' lvalue Var 0x5634e63bead8 'name' 'String'
|   `-ReturnStmt 0x5634e63bf110 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5634e63bf0f8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5634e63bf0d8 <col:9> 'const char *' lvalue Var 0x5634e63bec50 'x' 'const char *'
|-CXXMethodDecl 0x5634e63bc0f8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5634e63bc068 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5634e63bf728 <col:55, line:550:5>
|   `-IfStmt 0x5634e63bf700 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5634e63bf360 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5634e63bf348 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5634e63bf330 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5634e63bf310 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5634e63bf2e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5634e610e488
|     | |       `-DeclRefExpr 0x5634e63bf180 <col:6> 'const String' lvalue ParmVar 0x5634e63bc068 'x' 'const String &'
|     | `-BinaryOperator 0x5634e63bf2c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5634e63bf290 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5634e63bf240 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5634e63bf228 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5634e63bf1e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5634e6127cc0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5634e63bf1a0 <col:11> 'const String' lvalue ParmVar 0x5634e63bc068 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5634e63bf1c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5634e63bf2a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5634e63bf278 <col:19> 'char' 123
|     |-ReturnStmt 0x5634e63bf3d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5634e63bf3a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5634e63bf380 <col:13> 'const String' lvalue ParmVar 0x5634e63bc068 'x' 'const String &'
|     `-IfStmt 0x5634e63bf6d8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5634e63bf468 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5634e63bf450 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5634e63bf430 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5634e63bf400 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5634e610e488
|       |       `-DeclRefExpr 0x5634e63bf3e0 <col:11> 'const String' lvalue ParmVar 0x5634e63bc068 'x' 'const String &'
|       |-ReturnStmt 0x5634e63bf5f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5634e63bf5d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5634e63bf5a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5634e63bf590 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5634e63bf570 <col:13, col:29> 'String' (CXXTemporary 0x5634e63bf570)
|       |         `-CallExpr 0x5634e63bf520 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5634e63bf508 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5634e63bf480 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5634e63bb8a0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5634e63bf550 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5634e63bf4a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5634e63bf4c0 <col:28> 'const String' lvalue ParmVar 0x5634e63bc068 'x' 'const String &'
|       `-ReturnStmt 0x5634e63bf6c8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5634e63bf6b0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5634e63bf680 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5634e63bf668 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5634e63bf648 <col:13, col:20> 'String' (CXXTemporary 0x5634e63bf648)
|                 `-CXXTemporaryObjectExpr 0x5634e63bf610 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5634e63bc2c0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5634e63bc1b0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5634e63bc228 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5634e63bd9f8 <col:71> 'bool' false
|-CXXRecordDecl 0x5634e63bc370 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5634e63bc668 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5634e63bc600 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5634e63bc5a0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5634e63bc560 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5634e610ad20 'String'
|       | `-CXXRecord 0x5634e610ac90 'String'
|       |-BuiltinType 0x5634e5ddf370 'int'
|       `-DecayedType 0x5634e63b9c30 '__va_list_tag *' sugar
|         |-TypedefType 0x5634e63b9c00 'va_list' sugar
|         | |-Typedef 0x5634e5ffbdd0 'va_list'
|         | `-TypedefType 0x5634e5ffbd80 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5634e5f339a8 '__gnuc_va_list'
|         |   `-TypedefType 0x5634e5f33910 '__builtin_va_list' sugar
|         |     |-Typedef 0x5634e5e20bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5634e5e20b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5634e5de00c0 '__va_list_tag'
|         |         `-CXXRecord 0x5634e5de0028 '__va_list_tag'
|         `-PointerType 0x5634e6001670 '__va_list_tag *'
|           `-RecordType 0x5634e5de00c0 '__va_list_tag'
|             `-CXXRecord 0x5634e5de0028 '__va_list_tag'
|-EnumDecl 0x5634e63bc6c0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5634e63bc7c0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcd20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bc7a0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5634e63bc780 <col:16> 'int' 1
| |-EnumConstantDecl 0x5634e63bc850 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcd38 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bc830 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5634e63bc810 <col:21> 'int' 2
| |-EnumConstantDecl 0x5634e63bc8e0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcd50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bc8c0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5634e63bc8a0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5634e63bc970 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcd68 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bc950 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5634e63bc930 <col:17> 'int' 8
| |-EnumConstantDecl 0x5634e63bca00 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcd80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bc9e0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5634e63bc9c0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5634e63bca90 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcd98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bca70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5634e63bca50 <col:19> 'int' 32
| |-EnumConstantDecl 0x5634e63bcb20 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcdb0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bcb00 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5634e63bcae0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5634e63bcbb0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcdc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bcb90 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5634e63bcb70 <col:14> 'int' 128
| |-EnumConstantDecl 0x5634e63bcc40 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5634e63bcde0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e63bcc20 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5634e63bcc00 <col:16> 'int' 256
| `-EnumConstantDecl 0x5634e63bccd0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5634e63bcdf8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e63bccb0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5634e63bcc90 <col:12> 'int' 1024
|-CXXMethodDecl 0x5634e63bd008 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5634e63bce20 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5634e63bcec0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5634e63bd190 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5634e63bd0c8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5634e63bd238 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5634e63bd278 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5634e63bd2d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5634e63bd350 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5634e63bd750 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5634e63bd3c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5634e63bd448 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5634e63bd4c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5634e63bd540 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5634e63bd5b8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5634e63bd630 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5634e63bd878 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5634e63bd878
| `-ParmVarDecl 0x5634e63bd988 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5634e63bfa88 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5634e63bfa88
  `-ParmVarDecl 0x5634e63bfb98 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct _IO_FILE
         0 |   int _flags
         8 |   char * _IO_read_ptr
        16 |   char * _IO_read_end
        24 |   char * _IO_read_base
        32 |   char * _IO_write_base
        40 |   char * _IO_write_ptr
        48 |   char * _IO_write_end
        56 |   char * _IO_buf_base
        64 |   char * _IO_buf_end
        72 |   char * _IO_save_base
        80 |   char * _IO_backup_base
        88 |   char * _IO_save_end
        96 |   struct _IO_marker * _markers
       104 |   struct _IO_FILE * _chain
       112 |   int _fileno
       116 |   int _flags2
       120 |   __off_t _old_offset
       128 |   unsigned short _cur_column
       130 |   signed char _vtable_offset
       131 |   char [1] _shortbuf
       136 |   _IO_lock_t * _lock
       144 |   __off64_t _offset
       152 |   struct _IO_codecvt * _codecvt
       160 |   struct _IO_wide_data * _wide_data
       168 |   struct _IO_FILE * _freeres_list
       176 |   void * _freeres_buf
       184 |   size_t __pad5
       192 |   int _mode
       196 |   char [20] _unused2
           | [sizeof=216, dsize=216, align=8,
           |  nvsize=216, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e5ff9bb8 prev 0x5634e5ff98b0 </usr/include/bits/types/struct_FILE.h:49:1, line:99:1> line:49:8 struct _IO_FILE definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5634e5ff9cb0 <col:1, col:8> col:8 implicit struct _IO_FILE
|-FieldDecl 0x5634e5ff9d58 <line:51:3, col:7> col:7 _flags 'int'
|-FieldDecl 0x5634e5ff9dc0 <line:54:3, col:9> col:9 _IO_read_ptr 'char *'
|-FieldDecl 0x5634e5ff9e28 <line:55:3, col:9> col:9 _IO_read_end 'char *'
|-FieldDecl 0x5634e5ff9e90 <line:56:3, col:9> col:9 _IO_read_base 'char *'
|-FieldDecl 0x5634e5ff9ef8 <line:57:3, col:9> col:9 _IO_write_base 'char *'
|-FieldDecl 0x5634e5ff9f60 <line:58:3, col:9> col:9 _IO_write_ptr 'char *'
|-FieldDecl 0x5634e5ff9fc8 <line:59:3, col:9> col:9 _IO_write_end 'char *'
|-FieldDecl 0x5634e5ffa030 <line:60:3, col:9> col:9 _IO_buf_base 'char *'
|-FieldDecl 0x5634e5ffa098 <line:61:3, col:9> col:9 _IO_buf_end 'char *'
|-FieldDecl 0x5634e5ffa100 <line:64:3, col:9> col:9 _IO_save_base 'char *'
|-FieldDecl 0x5634e5ffa168 <line:65:3, col:9> col:9 _IO_backup_base 'char *'
|-FieldDecl 0x5634e5ffa1d0 <line:66:3, col:9> col:9 _IO_save_end 'char *'
|-FieldDecl 0x5634e5ffa2d0 <line:68:3, col:22> col:22 _markers 'struct _IO_marker *'
|-FieldDecl 0x5634e5ffa3a0 <line:70:3, col:20> col:20 _chain 'struct _IO_FILE *'
|-FieldDecl 0x5634e5ffa408 <line:72:3, col:7> col:7 _fileno 'int'
|-FieldDecl 0x5634e5ffa470 <line:73:3, col:7> col:7 _flags2 'int'
|-FieldDecl 0x5634e5ffa4d0 <line:74:3, col:11> col:11 _old_offset '__off_t':'long'
|-FieldDecl 0x5634e5ffa538 <line:77:3, col:18> col:18 _cur_column 'unsigned short'
|-FieldDecl 0x5634e5ffa5a0 <line:78:3, col:15> col:15 _vtable_offset 'signed char'
|-FieldDecl 0x5634e5ffa688 <line:79:3, col:19> col:8 _shortbuf 'char [1]'
|-FieldDecl 0x5634e5ffa738 <line:81:3, col:15> col:15 _lock '_IO_lock_t *'
|-FieldDecl 0x5634e5ffa798 <line:89:3, col:13> col:13 _offset '__off64_t':'long'
|-FieldDecl 0x5634e5ffa8a0 <line:91:3, col:23> col:23 _codecvt 'struct _IO_codecvt *'
|-FieldDecl 0x5634e5ffa9a0 <line:92:3, col:25> col:25 _wide_data 'struct _IO_wide_data *'
|-FieldDecl 0x5634e5ffaa18 <line:93:3, col:20> col:20 _freeres_list 'struct _IO_FILE *'
|-FieldDecl 0x5634e5ffaa80 <line:94:3, col:9> col:9 _freeres_buf 'void *'
|-FieldDecl 0x5634e5ffaae0 <line:95:3, col:10> col:10 __pad5 'size_t':'unsigned long'
|-FieldDecl 0x5634e5ffab48 <line:96:3, col:7> col:7 _mode 'int'
`-FieldDecl 0x5634e5ffada8 <line:98:3, col:74> col:8 _unused2 'char [20]'

Layout: <CGRecordLayout
  LLVMType:%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
  NonVirtualBaseLLVMType:%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6140850 prev 0x5634e60a5888 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5634e6140948 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5634e61409d8 <col:19, col:25> col:19 public
|-TypedefDecl 0x5634e6140a10 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5634e5f33160 'uninitialized_type'
|   `-CXXRecord 0x5634e5f330c8 'uninitialized_type'
|-CXXConstructorDecl 0x5634e6140ad0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5634e6144220 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5634e61442c8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5634e6144288 <col:10> 'int' 0
| `-CompoundStmt 0x5634e6144310 <col:13, line:22:5>
|-CXXConstructorDecl 0x5634e6140c20 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5634e6140b90 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5634e6144220 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5634e6144360 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5634e6144320 <col:10> 'unsigned int' lvalue ParmVar 0x5634e6140b90 'x' 'unsigned int'
| `-CompoundStmt 0x5634e61443a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x5634e6140d78 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5634e6140ce8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5634e6144220 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5634e6144410 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5634e61443f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5634e61443b8 <col:10> 'int' lvalue ParmVar 0x5634e6140ce8 'x' 'int'
| `-CompoundStmt 0x5634e6144458 <col:13, line:31:5>
|-CXXConstructorDecl 0x5634e6140ed0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5634e6140e40 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5634e6144220 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5634e61444c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5634e61444a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5634e6144468 <col:10> 'unsigned long' lvalue ParmVar 0x5634e6140e40 'x' 'unsigned long'
| `-CompoundStmt 0x5634e6144508 <col:13, line:35:5>
|-CXXConstructorDecl 0x5634e6141028 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5634e6140f98 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5634e6144220 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5634e6144570 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5634e6144558 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5634e6144518 <col:10> 'long' lvalue ParmVar 0x5634e6140f98 'x' 'long'
| `-CompoundStmt 0x5634e61445b8 <col:13, line:39:5>
|-CXXConstructorDecl 0x5634e61411e8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5634e61410f8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5634e6144220 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5634e6144638 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5634e61445e8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5634e6074640
| |     `-DeclRefExpr 0x5634e61445c8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5634e61410f8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5634e6144680 <col:20, line:44:5>
|-CXXConstructorDecl 0x5634e6141378 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5634e61412b0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5634e61447e8 <col:51, line:56:5>
|   `-BinaryOperator 0x5634e61447c8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5634e61446a0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5634e6144220
|     | `-CXXThisExpr 0x5634e6144690 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5634e61447b0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5634e6144798 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5634e6144778 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5634e6144748 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5634e6144730 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5634e61446d0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5634e61412b0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5634e61414c8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5634e6141438 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5634e6141678 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5634e61415b8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5634e6144858 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5634e6144830 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5634e6144800 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5634e61415b8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5634e6141808 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5634e6141740 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5634e61418f8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5634e6145818 <col:46, line:83:5>
|   `-ReturnStmt 0x5634e6145808 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5634e61457f0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5634e61457c0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5634e6145678 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5634e6145560 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5634e6145448 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5634e6144880 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5634e61419e8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5634e61458c8 <col:31, line:88:5>
|   `-ReturnStmt 0x5634e61458b8 <line:87:2, col:10>
|     `-UnaryOperator 0x5634e61458a0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5634e6145888 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5634e6145870 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5634e6145840 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5634e6144220
|             `-CXXThisExpr 0x5634e6145830 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5634e6141aa8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5634e6145948 <col:34, line:93:5>
|   `-ReturnStmt 0x5634e6145938 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5634e6145920 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5634e61458f0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5634e6144220
|         `-CXXThisExpr 0x5634e61458e0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5634e6141b78 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5634e61459c8 <col:38, line:101:5>
|   `-ReturnStmt 0x5634e61459b8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5634e61459a0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5634e6145970 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5634e6144220
|         `-CXXThisExpr 0x5634e6145960 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5634e6141c48 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5634e6145c98 <col:38, line:108:5>
|   `-ReturnStmt 0x5634e6145c88 <line:107:2, col:58>
|     `-BinaryOperator 0x5634e6145c68 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5634e6145b80 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5634e6145b60 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5634e6145b48 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5634e61459f0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5634e6144220
|       |   |   `-CXXThisExpr 0x5634e61459e0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5634e6145b20 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5634e6145b08 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5634e6145a88 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5634e6082b78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5634e6145a68 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5634e6145c40 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5634e6145c28 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5634e6145c08 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5634e6082b78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5634e6145be8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5634e6141d08 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5634e6145f08 <col:39, line:112:5>
|   `-ReturnStmt 0x5634e6145ef8 <line:111:2, col:56>
|     `-BinaryOperator 0x5634e6145ed8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5634e6145df0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5634e6145dd0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5634e6145db8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5634e6145cc0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5634e6144220
|       |   |   `-CXXThisExpr 0x5634e6145cb0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5634e6145d90 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5634e6145d78 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5634e6145d58 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5634e6082b78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5634e6145d38 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5634e6145eb0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5634e6145e98 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5634e6145e78 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5634e6082b78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5634e6145e58 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5634e6141e38 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5634e6141f40 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5634e6142050 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5634e6143118 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5634e61431d8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e61432a0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5634e6143498 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5634e6143350 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5634e61433c8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5634e6143618 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5634e6143558 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5634e6143760 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5634e61436d0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5634e6143908 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5634e6143818 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5634e6143a50 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5634e61439c0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5634e6143b98 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5634e6143b08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5634e6143c60 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5634e6143d20 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5634e6143e98 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5634e6143dd0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5634e6143f60 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5634e6144048 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5634e61440f0 <col:51> "" ""
|-TypedefDecl 0x5634e6144190 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5634e60a5920 'IPAddress'
|   `-CXXRecord 0x5634e6140850 'IPAddress'
|-AccessSpecDecl 0x5634e61441e8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5634e6144220 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5634e61448c8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5634e61448c8
| `-ParmVarDecl 0x5634e61449d8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x5634e6144a78 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5634e6144b88 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5634e6144220 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5634e6145768 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5634e6145720 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5634e6144220
| |     `-CXXStaticCastExpr 0x5634e61456f0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5634e61456c0 <col:7> 'IPAddress' lvalue ParmVar 0x5634e6144b88 '' 'IPAddress &&'
| `-CompoundStmt 0x5634e61457b0 <col:7>
`-CXXDestructorDecl 0x5634e6145478 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e60fe330 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5634e60fe448 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5634e60fe4d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5634e60fe5a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5634e60fe690 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e60fe8a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5634e60fe750 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e60fea58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5634e60fe960 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5634e60feba0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5634e60feb10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5634e60fece8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5634e60fec58 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e60fee30 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5634e60feda0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e60feef8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5634e60ff040 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5634e60fefb0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5634e60ff108 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5634e60ff250 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5634e60ff1c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5634e60ff3c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5634e60ff308 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e60ff510 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5634e60ff480 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e60ff5d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5634e60ff798 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5634e60ff688 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5634e60ff700 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e60ff9e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5634e60ff858 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5634e60ff8d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5634e60ffa98 <col:86> "" ""
|-CXXMethodDecl 0x5634e60ffd08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5634e60ffb78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5634e60ffbf0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e60ffeb8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5634e60ffdc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5634e6100068 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5634e60fff70 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5634e6100338 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5634e6100120 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5634e6100198 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5634e6100210 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e6100618 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5634e6100400 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5634e6100478 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5634e61004f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5634e61006d0 <col:115> "" ""
|-AccessSpecDecl 0x5634e6100740 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5634e6100778 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e6101c90 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5634e6101c90
| `-ParmVarDecl 0x5634e6101d98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5634e6101e38 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5634e6101e38
| `-ParmVarDecl 0x5634e6101f48 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5634e6137578 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5634e6329370 <col:7>
|-CXXConstructorDecl 0x5634e6137650 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5634e6137650
| `-ParmVarDecl 0x5634e6137768 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5634e61377d8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5634e61377d8
| `-ParmVarDecl 0x5634e61378e8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5634e632bd70 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6317f18 prev 0x5634e630d120 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5634e6318010 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5634e6318100 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5634e6318228 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5634e63183a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5634e6318528 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5634e63186a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5634e63294d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5634e6329d48 <col:11>
|-CXXDestructorDecl 0x5634e63295b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5634e63296e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5634e63296e8
| `-ParmVarDecl 0x5634e63297f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5634e6329898 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5634e6329898
| `-ParmVarDecl 0x5634e63299a8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5634e632c768 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5634e632c878 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5634e632caf8 <col:11>
|   `-ReturnStmt 0x5634e632cae8 <col:11>
|     `-UnaryOperator 0x5634e632cad0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5634e632cac0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5634e632c8e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5634e632c8e8
  `-ParmVarDecl 0x5634e632c9f8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6318710 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5634e6318828 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5634e63188c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5634e6318930 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5634e6318998 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5634e6318a00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5634e6318a60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5634e6318b20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5634e6318b80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5634e6318be0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5634e63293e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5634e63188c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5634e6329d58 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5634e6329db0 <col:12>
|-CXXConstructorDecl 0x5634e6329a18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5634e6329a18
| `-ParmVarDecl 0x5634e6329b28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5634e6329bc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5634e6329bc8
| `-ParmVarDecl 0x5634e6329cd8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5634e632be50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5634e6306830 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5634e6306948 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5634e63069d8 <col:16, col:22> col:16 public
|-EnumDecl 0x5634e6306a00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5634e6306b00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5634e6306be0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6306ae0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5634e6306ac0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5634e6306b90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5634e6306bf8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e6306b70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5634e6306b50 <col:22> 'int' 64
|-CXXMethodDecl 0x5634e6306f38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5634e6306c20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5634e6306ca0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5634e6306d18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5634e6306d90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5634e6306ff8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5634e63071f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5634e6307070 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5634e63070e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5634e63072a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5634e6307408 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5634e6307318 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5634e63074b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5634e6307810 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5634e63077a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5634e6307740 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5634e6307700 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5634e5ddf2d0 'void'
|       |-PointerType 0x5634e6086bd0 'unsigned char *'
|       | `-BuiltinType 0x5634e5ddf3d0 'unsigned char'
|       |-TypedefType 0x5634e5e83140 'size_t' sugar
|       | |-Typedef 0x5634e5e4fb20 'size_t'
|       | `-BuiltinType 0x5634e5ddf430 'unsigned long'
|       `-PointerType 0x5634e5ddfad0 'void *'
|         `-BuiltinType 0x5634e5ddf2d0 'void'
|-CXXMethodDecl 0x5634e6307c88 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5634e6307880 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5634e63078f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5634e6307990 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5634e6307a10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5634e6322380 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5634e6322368 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5634e6322330 <col:58> 'int' 0
| |-ParmVarDecl 0x5634e6307a90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5634e63223a8 <col:76> 'int' 0
| |-ParmVarDecl 0x5634e6307b10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5634e63223c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5634e6307d58 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5634e6307dd8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5634e6307e98 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5634e6307f38 <col:20>
| `-OptimizeNoneAttr 0x5634e6307f90 <col:30>
|-CXXMethodDecl 0x5634e6308008 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5634e63080a8 <col:20>
| `-OptimizeNoneAttr 0x5634e6308100 <col:30>
|-CXXMethodDecl 0x5634e6308178 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5634e6308218 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5634e63082c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5634e6308368 <col:20>
| |-OptimizeNoneAttr 0x5634e63083c0 <col:30>
| `-WarnUnusedResultAttr 0x5634e63083e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5634e6308440 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5634e63084e0 <col:20>
| `-OptimizeNoneAttr 0x5634e6308538 <col:30>
|-CXXMethodDecl 0x5634e6308588 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5634e6308628 <col:20>
| `-OptimizeNoneAttr 0x5634e6308680 <col:30>
|-CXXMethodDecl 0x5634e63086c8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5634e6308768 <col:20>
| `-OptimizeNoneAttr 0x5634e63087c0 <col:30>
|-CXXMethodDecl 0x5634e6308808 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e63088c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e6308990 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5634e6308a58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5634e6308b18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e6308c38 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5634e6322490 <col:54, line:99:5>
|   `-ReturnStmt 0x5634e6322480 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5634e6322468 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5634e6322438 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5634e6318f18
|         `-CXXThisExpr 0x5634e6322428 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5634e6308dd8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5634e6308ce8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5634e6322540 <col:67, line:103:5>
|   `-BinaryOperator 0x5634e6322520 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5634e63224b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5634e6318f18
|     | `-CXXThisExpr 0x5634e63224a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5634e6322508 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5634e63224e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5634e6308ce8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5634e6308ed0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5634e63225c0 <col:33, line:107:5>
|   `-ReturnStmt 0x5634e63225b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5634e6322598 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5634e6322568 <col:16> 'void *' lvalue ->_destructor_argument 0x5634e6318f80
|         `-CXXThisExpr 0x5634e6322558 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5634e6308f90 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5634e6322bf0 <col:25, line:113:5>
|   |-ParenExpr 0x5634e6322938 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5634e6322908 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6322678 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5634e6322650 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5634e6322618 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5634e63225e8 <col:24> '<bound member function type>' ->shared 0x5634e6308008
|   |   |       `-ImplicitCastExpr 0x5634e6322638 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5634e63225d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5634e63226d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e63226b8 <col:42> 'int' 0
|   |   `-CallExpr 0x5634e6322868 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5634e6322850 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6322830 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e63228a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6322748 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5634e63228c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6322770 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e63228d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e63227a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5634e63228f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6322818 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6322800 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e63227c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5634e6322b38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5634e6322968 <col:2> 'unsigned char *' lvalue ->_head 0x5634e6318d20
|   | | `-CXXThisExpr 0x5634e6322958 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5634e6322b20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5634e6322b00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5634e63229a8 <col:10> 'unsigned char *' lvalue ->_data 0x5634e6318d88
|   |     | `-CXXThisExpr 0x5634e6322998 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5634e6322ae8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5634e6322ac8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5634e63229e8 <col:18> 'unsigned char *' lvalue ->_tail 0x5634e6318df0
|   |         | `-CXXThisExpr 0x5634e63229d8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5634e6322ab0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5634e6322a90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5634e6322a28 <col:26> 'unsigned char *' lvalue ->_end 0x5634e6318e58
|   |             | `-CXXThisExpr 0x5634e6322a18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5634e6322a78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5634e6322a58 <col:33> 'int' 0
|   `-BinaryOperator 0x5634e6322bd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5634e6322b68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5634e6318f18
|     | `-CXXThisExpr 0x5634e6322b58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5634e6322bb8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5634e6322b98 <col:16> 'int' 0
|-CXXMethodDecl 0x5634e63090d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5634e6309040 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5634e6309178 <col:20>
| |-OptimizeNoneAttr 0x5634e63091d0 <col:30>
| `-WarnUnusedResultAttr 0x5634e63091f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5634e63092c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5634e6309238 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5634e6309370 <col:20>
| |-OptimizeNoneAttr 0x5634e63093c8 <col:30>
| `-WarnUnusedResultAttr 0x5634e63093f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5634e6309528 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5634e6309430 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5634e63095d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5634e63096d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5634e6309640 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5634e6309778 <col:20>
| `-OptimizeNoneAttr 0x5634e63097d0 <col:30>
|-CXXMethodDecl 0x5634e6309898 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5634e6309808 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5634e6309940 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5634e6309a40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5634e63099b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5634e6309ae8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5634e6309be8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5634e6309b58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5634e6309c90 <col:20>
| `-OptimizeNoneAttr 0x5634e6309ce8 <col:30>
|-CXXMethodDecl 0x5634e6309e78 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5634e6309d28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5634e6309da0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5634e63223e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5634e6309f28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5634e630a128 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5634e6309fa0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5634e630a018 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e630a338 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5634e630a1e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5634e630a260 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e630a548 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5634e630a3f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5634e630a478 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5634e63223f8 <col:39> 'int' 0
|-CXXMethodDecl 0x5634e630a618 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5634e630a6e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5634e630a7a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5634e630a868 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e630a930 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5634e630aa78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5634e630a9e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5634e630ac48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5634e630ab38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5634e630abb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e630ad18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5634e630add8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5634e630ae78 <col:20>
| `-OptimizeNoneAttr 0x5634e630aed0 <col:30>
|-CXXMethodDecl 0x5634e630af20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5634e630afc0 <col:20>
| `-OptimizeNoneAttr 0x5634e630b018 <col:30>
|-CXXMethodDecl 0x5634e630b068 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5634e630b128 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e630b1f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5634e630b290 <col:20>
| `-OptimizeNoneAttr 0x5634e630b2e8 <col:30>
|-CXXMethodDecl 0x5634e630b438 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5634e630b328 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5634e630b3a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e630b588 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5634e630b4f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e630b660 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5634e630b720 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5634e630b7c0 <col:20>
| `-OptimizeNoneAttr 0x5634e630b818 <col:30>
|-CXXMethodDecl 0x5634e630b868 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5634e630b908 <col:20>
| `-OptimizeNoneAttr 0x5634e630b960 <col:30>
|-CXXMethodDecl 0x5634e630b9b0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5634e630ba78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5634e630bb18 <col:20>
| `-OptimizeNoneAttr 0x5634e630bb70 <col:30>
|-CXXMethodDecl 0x5634e630bbb8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5634e630bcd8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5634e630be48 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5634e630bd88 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5634e630bf38 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5634e630bfd8 <col:20>
| `-OptimizeNoneAttr 0x5634e630c030 <col:30>
|-CXXMethodDecl 0x5634e630c080 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5634e630c140 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5634e630c378 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5634e630c1f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5634e630c268 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5634e630c428 <col:20>
| `-OptimizeNoneAttr 0x5634e630c480 <col:30>
|-CXXMethodDecl 0x5634e630c528 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5634e630c5c8 <col:20>
| `-OptimizeNoneAttr 0x5634e630c620 <col:30>
|-CXXMethodDecl 0x5634e630c670 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5634e630c710 <col:20>
| `-OptimizeNoneAttr 0x5634e630c768 <col:30>
|-CXXMethodDecl 0x5634e630c7b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5634e630c850 <col:20>
| `-OptimizeNoneAttr 0x5634e630c8a8 <col:30>
|-CXXMethodDecl 0x5634e630c9a8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5634e630c8e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5634e630ca50 <col:20>
| `-OptimizeNoneAttr 0x5634e630caa8 <col:30>
|-CXXMethodDecl 0x5634e630cc68 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5634e630cae0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5634e630cb58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5634e630cd18 <col:20>
| `-OptimizeNoneAttr 0x5634e630cd70 <col:30>
|-CXXMethodDecl 0x5634e630ce18 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5634e630cf38 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5634e630d058 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5634e630d0f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5634e630d120 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5634e630d248 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5634e630d2e8 <col:20>
| `-OptimizeNoneAttr 0x5634e630d340 <col:30>
|-CXXMethodDecl 0x5634e630d3e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5634e630d488 <col:20>
| `-OptimizeNoneAttr 0x5634e630d4e0 <col:30>
|-AccessSpecDecl 0x5634e630d508 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5634e630d530 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5634e630d630 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5634e630d680 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e630d610 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5634e630d5f0 <col:14> 'int' 48
|-CXXMethodDecl 0x5634e630d6e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5634e630d788 <col:20>
| `-OptimizeNoneAttr 0x5634e630d7e0 <col:30>
|-CXXMethodDecl 0x5634e630d858 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5634e630d8f8 <col:20>
| `-OptimizeNoneAttr 0x5634e630d950 <col:30>
|-CXXMethodDecl 0x5634e630da18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5634e630d988 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5634e630dbb8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5634e630dd58 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5634e630dc68 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5634e630de00 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5634e630df00 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5634e630e2b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630dee0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5634e630dec0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5634e630df90 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5634e630e2c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630df70 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5634e630df50 <col:14> 'int' 1
| |-EnumConstantDecl 0x5634e630e020 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5634e630e2e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630e000 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5634e630dfe0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5634e630e0b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5634e630e2f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630e090 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5634e630e070 <col:14> 'int' 3
| |-EnumConstantDecl 0x5634e630e140 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5634e630e310 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630e120 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5634e630e100 <col:13> 'int' 4
| |-EnumConstantDecl 0x5634e630e1d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5634e630e328 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630e1b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5634e630e190 <col:13> 'int' 5
| `-EnumConstantDecl 0x5634e630e260 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5634e630e340 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e630e240 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5634e630e220 <col:14> 'int' 6
|-CXXMethodDecl 0x5634e630e3a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5634e630e448 <col:20>
| `-OptimizeNoneAttr 0x5634e630e4a0 <col:30>
|-CXXMethodDecl 0x5634e630e598 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5634e630e4d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5634e630e640 <col:20>
| `-OptimizeNoneAttr 0x5634e630e698 <col:30>
|-CXXMethodDecl 0x5634e630e708 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5634e630e830 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5634e630e9a8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5634e630e8e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5634e630ea70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5634e630eb38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5634e630ec78 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5634e630ebe8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5634e630ed20 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5634e630ee20 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5634e630f020 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630ee00 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5634e630ede0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5634e630eeb0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5634e630f038 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630ee90 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5634e630ee70 <col:45> 'int' 4
| |-EnumConstantDecl 0x5634e630ef40 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5634e630f050 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e630ef20 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5634e630ef00 <col:24> 'int' 0
| `-EnumConstantDecl 0x5634e630efd0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5634e630f068 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e630efb0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5634e630ef90 <col:47> 'int' 16
|-CXXMethodDecl 0x5634e630f0c8 <line:431:5, col:36> col:22 used dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5634e630f238 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5634e630f178 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5634e630f2e0 <col:20>
| `-OptimizeNoneAttr 0x5634e630f338 <col:30>
|-CXXMethodDecl 0x5634e630f388 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5634e6322d10 <col:18, col:36>
|   `-ReturnStmt 0x5634e6322d00 <col:20, col:33>
|     `-ImplicitCastExpr 0x5634e6322ce8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5634e6322cc8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5634e6322c98 <col:27> '<bound member function type>' ->xanno 0x5634e630d3e8
|           `-CXXThisExpr 0x5634e6322c88 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5634e630f480 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5634e6322e20 <col:30, col:48>
|   `-ReturnStmt 0x5634e6322e10 <col:32, col:45>
|     `-ImplicitCastExpr 0x5634e6322df8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5634e6322dd8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5634e6322da8 <col:39> '<bound member function type>' ->xanno 0x5634e630d248
|           `-CXXThisExpr 0x5634e6322d98 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5634e630f568 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5634e6322fb8 <col:24, col:50>
|   `-ReturnStmt 0x5634e6322fa8 <col:26, col:47>
|     `-UnaryOperator 0x5634e6322f90 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5634e6322f70 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5634e6322f58 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5634e6322f08 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5634e6318228
|         |   `-CXXMemberCallExpr 0x5634e6322ee8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5634e6322eb8 <col:34> '<bound member function type>' ->xanno 0x5634e630d3e8
|         |       `-CXXThisExpr 0x5634e6322ea8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5634e6322f38 <col:46> 'int' 0
|-CXXMethodDecl 0x5634e630f670 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5634e6323188 <col:36, col:62>
|   `-ReturnStmt 0x5634e6323178 <col:38, col:59>
|     `-UnaryOperator 0x5634e6323160 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5634e6323140 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5634e6323128 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5634e63230a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5634e6318228
|         |   `-CXXMemberCallExpr 0x5634e6323080 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5634e6323050 <col:46> '<bound member function type>' ->xanno 0x5634e630d248
|         |       `-CXXThisExpr 0x5634e6323040 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5634e63230d0 <col:58> 'int' 0
|-CXXMethodDecl 0x5634e630f788 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5634e6323320 <col:26, col:53>
|   `-ReturnStmt 0x5634e6323310 <col:28, col:50>
|     `-UnaryOperator 0x5634e63232f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5634e63232d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5634e63232c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5634e6323270 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5634e6318528
|         |   `-CXXMemberCallExpr 0x5634e6323250 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5634e6323220 <col:36> '<bound member function type>' ->xanno 0x5634e630d3e8
|         |       `-CXXThisExpr 0x5634e6323210 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5634e63232a0 <col:49> 'int' 0
|-CXXMethodDecl 0x5634e630f8a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5634e63234f8 <col:38, col:65>
|   `-ReturnStmt 0x5634e63234e8 <col:40, col:62>
|     `-UnaryOperator 0x5634e63234d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5634e63234b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5634e6323498 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5634e6323408 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5634e6318528
|         |   `-CXXMemberCallExpr 0x5634e63233e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5634e63233b8 <col:48> '<bound member function type>' ->xanno 0x5634e630d248
|         |       `-CXXThisExpr 0x5634e63233a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5634e6323438 <col:61> 'int' 0
|-CXXMethodDecl 0x5634e630fa58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5634e630f960 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5634e6323bc8 <col:34, line:463:5>
|   |-ParenExpr 0x5634e6323a10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5634e63239e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6323648 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6323618 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6323568 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6323550 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6323510 <col:23> 'int' lvalue ParmVar 0x5634e630f960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6323530 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e63235f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e63235c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6323588 <col:33> 'int' lvalue ParmVar 0x5634e630f960 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5634e63235e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5634e63235a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5634e63236a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6323688 <col:56> 'int' 0
|   |   `-CallExpr 0x5634e6323940 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5634e6323928 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6323908 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6323980 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6323798 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5634e6323998 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63237c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e63239b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6323800 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5634e63239c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e63238f0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e63238d8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6323898 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5634e6323bb8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5634e6323ba0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5634e6323b80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5634e6323b50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5634e6323b00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5634e6318228
|         |   `-CXXMemberCallExpr 0x5634e6323ae0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5634e6323ab0 <col:9> '<bound member function type>' ->xanno 0x5634e630d248
|         |       `-CXXThisExpr 0x5634e6323aa0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5634e6323b68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5634e6323b30 <col:21> 'int' lvalue ParmVar 0x5634e630f960 'i' 'int'
|-CXXMethodDecl 0x5634e630fca8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5634e630fb18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5634e630fb90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5634e6324258 <col:40, line:472:5>
|   |-ParenExpr 0x5634e6324070 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5634e6324040 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6323d20 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6323cf0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6323c40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6323c28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6323be8 <col:23> 'int' lvalue ParmVar 0x5634e630fb18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6323c08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e6323cd0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e6323ca0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6323c60 <col:33> 'int' lvalue ParmVar 0x5634e630fb18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5634e6323cb8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5634e6323c80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5634e6323d80 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6323d60 <col:56> 'int' 0
|   |   `-CallExpr 0x5634e6323fa0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5634e6323f88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6323f68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6323fe0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6323df0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5634e6323ff8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6323e20 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6324010 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6323e58 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5634e6324028 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6323f50 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6323f38 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6323ef8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5634e6324238 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5634e63241e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5634e63241b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5634e6324160 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5634e6318228
|     | |   `-CXXMemberCallExpr 0x5634e6324140 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5634e6324110 <col:2> '<bound member function type>' ->xanno 0x5634e630d3e8
|     | |       `-CXXThisExpr 0x5634e6324100 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5634e63241c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5634e6324190 <col:14> 'int' lvalue ParmVar 0x5634e630fb18 'i' 'int'
|     `-ImplicitCastExpr 0x5634e6324220 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5634e6324200 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5634e630fb90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5634e630fe68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5634e630fd70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5634e63249d8 <col:36, line:485:5>
|   |-ParenExpr 0x5634e6324740 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6324710 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e63243f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e63243c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e63242d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e63242b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6324278 <col:23> 'int' lvalue ParmVar 0x5634e630fd70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6324298 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e63243a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e6324388 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e63242f0 <col:33> 'int' lvalue ParmVar 0x5634e630fd70 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6324368 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6324350 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6324310 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6324330 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5634e6324450 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6324430 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e6324670 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e6324658 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6324638 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e63246b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63244c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5634e63246c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63244f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e63246e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6324530 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5634e63246f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6324620 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6324608 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e63245c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5634e63249c8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5634e63249b0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5634e6324998 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5634e6324968 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5634e6324908 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5634e63248d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5634e6324850 <col:61, col:70> 'char const[48]' lvalue ->c 0x5634e6318100
|             |   `-CXXMemberCallExpr 0x5634e6324830 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5634e6324800 <col:61> '<bound member function type>' ->xanno 0x5634e630d248
|             |       `-CXXThisExpr 0x5634e63247f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5634e63248f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5634e6324880 <col:74> 'int' lvalue ParmVar 0x5634e630fd70 'i' 'int'
|-CXXMethodDecl 0x5634e63100b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5634e630ff28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5634e630ffa0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5634e6325128 <col:42, line:500:5>
|   |-ParenExpr 0x5634e6324ec0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6324e90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6324b70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6324b40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6324a50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6324a38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e63249f8 <col:23> 'int' lvalue ParmVar 0x5634e630ff28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6324a18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e6324b20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e6324b08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6324a70 <col:33> 'int' lvalue ParmVar 0x5634e630ff28 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6324ae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6324ad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6324a90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6324ab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5634e6324bd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6324bb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e6324df0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e6324dd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6324db8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6324e30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6324c40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5634e6324e48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6324c78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6324e60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6324cb0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5634e6324e78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6324da0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6324d88 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6324d48 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5634e6325108 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5634e63250b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5634e6325088 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5634e6325030 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5634e6325000 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5634e6324fb0 <col:48, col:57> 'char [48]' lvalue ->c 0x5634e6318100
|     |     |   `-CXXMemberCallExpr 0x5634e6324f90 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5634e6324f60 <col:48> '<bound member function type>' ->xanno 0x5634e630d3e8
|     |     |       `-CXXThisExpr 0x5634e6324f50 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5634e6325018 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5634e6324fe0 <col:61> 'int' lvalue ParmVar 0x5634e630ff28 'i' 'int'
|     `-ImplicitCastExpr 0x5634e63250f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5634e63250d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5634e630ffa0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5634e6310278 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5634e6310180 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5634e6325888 <col:35, line:513:5>
|   |-ParenExpr 0x5634e6325598 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6325568 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e63252c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6325290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e63251a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6325188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6325148 <col:23> 'int' lvalue ParmVar 0x5634e6310180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6325168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e6325270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e6325258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e63251c0 <col:33> 'int' lvalue ParmVar 0x5634e6310180 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6325238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6325220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e63251e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6325200 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5634e6325320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6325300 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e63254c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e63254b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6325490 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6325508 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6325390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5634e6325520 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63253c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6325538 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6325400 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5634e6325550 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6325478 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6325460 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6325420 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5634e6325878 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5634e6325860 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5634e6325848 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5634e6325818 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5634e6325790 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5634e6325760 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5634e6325710 <col:60, col:69> 'char const[48]' lvalue ->c 0x5634e6318100
|             |   `-CXXMemberCallExpr 0x5634e63256f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5634e63256c0 <col:60> '<bound member function type>' ->xanno 0x5634e630d248
|             |       `-CXXThisExpr 0x5634e63256b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5634e6325778 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5634e6325740 <col:73> 'int' lvalue ParmVar 0x5634e6310180 'i' 'int'
|-CXXMethodDecl 0x5634e63104c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5634e6310338 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5634e63103b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5634e6325fa8 <col:41, line:528:5>
|   |-ParenExpr 0x5634e6325d30 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6325d00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6325a20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e63259f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6325900 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e63258e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e63258a8 <col:23> 'int' lvalue ParmVar 0x5634e6310338 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e63258c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e63259d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e63259b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6325920 <col:33> 'int' lvalue ParmVar 0x5634e6310338 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6325998 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6325980 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6325940 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6325960 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5634e6325a80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6325a60 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e6325c60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e6325c48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6325c28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6325ca0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6325af0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5634e6325cb8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6325b28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6325cd0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6325b60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5634e6325ce8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6325c10 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6325bf8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6325bb8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5634e6325f88 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5634e6325f38 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5634e6325f08 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5634e6325eb0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5634e6325e70 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5634e6325e20 <col:47, col:56> 'char [48]' lvalue ->c 0x5634e6318100
|     |     |   `-CXXMemberCallExpr 0x5634e6325e00 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5634e6325dd0 <col:47> '<bound member function type>' ->xanno 0x5634e630d3e8
|     |     |       `-CXXThisExpr 0x5634e6325dc0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5634e6325e88 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5634e6325e50 <col:60> 'int' lvalue ParmVar 0x5634e6310338 'i' 'int'
|     `-ImplicitCastExpr 0x5634e6325f70 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5634e6325f50 <col:65> 'int16_t':'short' lvalue ParmVar 0x5634e63103b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5634e6310688 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5634e6310590 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5634e6326678 <col:36, line:541:5>
|   |-ParenExpr 0x5634e6326418 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e63263e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6326140 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6326110 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6326020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6326008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6325fc8 <col:23> 'int' lvalue ParmVar 0x5634e6310590 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6325fe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e63260f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e63260d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6326040 <col:33> 'int' lvalue ParmVar 0x5634e6310590 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e63260b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e63260a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6326060 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6326080 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5634e63261a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6326180 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e6326348 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e6326330 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6326310 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6326388 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6326210 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5634e63263a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6326248 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e63263b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6326280 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5634e63263d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e63262f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e63262e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e63262a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5634e6326668 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5634e6326650 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5634e6326638 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5634e6326608 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5634e63265b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5634e6326580 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5634e6326530 <col:61, col:70> 'char const[48]' lvalue ->c 0x5634e6318100
|             |   `-CXXMemberCallExpr 0x5634e6326510 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5634e63264e0 <col:61> '<bound member function type>' ->xanno 0x5634e630d248
|             |       `-CXXThisExpr 0x5634e63264d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5634e6326598 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5634e6326560 <col:74> 'int' lvalue ParmVar 0x5634e6310590 'i' 'int'
|-CXXMethodDecl 0x5634e6310858 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5634e6310748 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5634e63107c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5634e6310908 <col:20>
| `-OptimizeNoneAttr 0x5634e6310960 <col:30>
|-CXXMethodDecl 0x5634e6310a98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5634e63109a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5634e6326d48 <col:35, line:562:5>
|   |-ParenExpr 0x5634e6326ae8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6326ab8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6326810 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e63267e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e63266f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e63266d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6326698 <col:23> 'int' lvalue ParmVar 0x5634e63109a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e63266b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e63267c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e63267a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6326710 <col:33> 'int' lvalue ParmVar 0x5634e63109a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6326788 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6326770 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6326730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6326750 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5634e6326870 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6326850 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e6326a18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e6326a00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e63269e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6326a58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63268e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5634e6326a70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6326918 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6326a88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6326950 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5634e6326aa0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e63269c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e63269b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6326970 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5634e6326d38 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5634e6326d20 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5634e6326d08 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5634e6326cd8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5634e6326c80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5634e6326c50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5634e6326c00 <col:60, col:69> 'char const[48]' lvalue ->c 0x5634e6318100
|             |   `-CXXMemberCallExpr 0x5634e6326be0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5634e6326bb0 <col:60> '<bound member function type>' ->xanno 0x5634e630d248
|             |       `-CXXThisExpr 0x5634e6326ba0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5634e6326c68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5634e6326c30 <col:73> 'int' lvalue ParmVar 0x5634e63109a0 'i' 'int'
|-CXXMethodDecl 0x5634e6310ca8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5634e6310b58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5634e6310bd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5634e6327428 <col:41, line:577:5>
|   |-ParenExpr 0x5634e63271b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6327188 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6326ee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6326eb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6326dc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6326da8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6326d68 <col:23> 'int' lvalue ParmVar 0x5634e6310b58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6326d88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e6326e90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e6326e78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6326de0 <col:33> 'int' lvalue ParmVar 0x5634e6310b58 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6326e58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6326e40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6326e00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6326e20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5634e6326f40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6326f20 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e63270e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e63270d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e63270b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6327128 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6326fb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5634e6327140 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6326fe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6327158 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6327020 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5634e6327170 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6327098 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6327080 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6327040 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5634e6327408 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5634e63273b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5634e6327388 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5634e6327328 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5634e63272f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5634e63272a8 <col:47, col:56> 'char [48]' lvalue ->c 0x5634e6318100
|     |     |   `-CXXMemberCallExpr 0x5634e6327288 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5634e6327258 <col:47> '<bound member function type>' ->xanno 0x5634e630d3e8
|     |     |       `-CXXThisExpr 0x5634e6327248 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5634e6327310 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5634e63272d8 <col:60> 'int' lvalue ParmVar 0x5634e6310b58 'i' 'int'
|     `-ImplicitCastExpr 0x5634e63273f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5634e63273d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5634e6310bd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5634e6310e68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5634e6310d70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5634e6327b58 <col:36, line:591:5>
|   |-ParenExpr 0x5634e6327898 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6327868 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e63275c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6327590 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e63274a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6327488 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6327448 <col:23> 'int' lvalue ParmVar 0x5634e6310d70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6327468 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e6327570 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e6327558 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e63274c0 <col:33> 'int' lvalue ParmVar 0x5634e6310d70 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6327538 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6327520 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e63274e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6327500 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5634e6327620 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6327600 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e63277c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e63277b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6327790 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6327808 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6327690 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5634e6327820 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63276c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6327838 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6327700 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5634e6327850 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6327778 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6327760 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6327720 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5634e6327b48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5634e6327b30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5634e6327b18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5634e6327ae8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5634e6327a60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5634e6327a30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5634e63279e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5634e6318100
|             |   `-CXXMemberCallExpr 0x5634e63279c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5634e6327990 <col:61> '<bound member function type>' ->xanno 0x5634e630d248
|             |       `-CXXThisExpr 0x5634e6327980 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5634e6327a48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5634e6327a10 <col:74> 'int' lvalue ParmVar 0x5634e6310d70 'i' 'int'
|-CXXMethodDecl 0x5634e63110b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5634e6310f28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5634e6310fa0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5634e6328238 <col:42, line:606:5>
|   |-ParenExpr 0x5634e6327fc8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5634e6327f98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6327cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6327cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6327bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6327bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6327b78 <col:23> 'int' lvalue ParmVar 0x5634e6310f28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6327b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e6327ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5634e6327c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6327bf0 <col:33> 'int' lvalue ParmVar 0x5634e6310f28 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6327c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6327c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6327c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5634e6327c30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5634e6327d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6327d30 <col:60> 'int' 0
|   |   `-CallExpr 0x5634e6327ef8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5634e6327ee0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6327ec0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6327f38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6327dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5634e6327f50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6327df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6327f68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6327e30 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5634e6327f80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6327ea8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6327e90 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6327e50 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5634e6328218 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5634e63281c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5634e6328198 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5634e6328138 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5634e6328108 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5634e63280b8 <col:48, col:57> 'char [48]' lvalue ->c 0x5634e6318100
|     |     |   `-CXXMemberCallExpr 0x5634e6328098 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5634e6328068 <col:48> '<bound member function type>' ->xanno 0x5634e630d3e8
|     |     |       `-CXXThisExpr 0x5634e6328058 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5634e6328120 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5634e63280e8 <col:61> 'int' lvalue ParmVar 0x5634e6310f28 'i' 'int'
|     `-ImplicitCastExpr 0x5634e6328200 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5634e63281e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5634e6310fa0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5634e6311250 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5634e6311180 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5634e6328aa8 <col:33, line:620:5>
|   |-ParenExpr 0x5634e6328820 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5634e63287f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6328440 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6328410 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e63282b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6328298 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6328258 <col:23> 'int' lvalue ParmVar 0x5634e6311180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6328278 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e63283f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5634e63283d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e63282d0 <col:33> 'int' lvalue ParmVar 0x5634e6311180 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e63283b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e63283a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e63282f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5634e6328378 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5634e6328360 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5634e6328328 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5634e63284a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6328480 <col:79> 'int' 0
|   |   `-CallExpr 0x5634e6328750 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5634e6328738 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6328718 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6328790 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6328588 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5634e63287a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e63285d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e63287c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6328608 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5634e63287d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6328700 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e63286e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e63286a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5634e6328a98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5634e6328a80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5634e6328a68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5634e6328a38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5634e63289b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5634e6328980 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5634e6328930 <col:67, col:76> 'char const[48]' lvalue ->c 0x5634e6318100
|             |   `-CXXMemberCallExpr 0x5634e6328910 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5634e63288e0 <col:67> '<bound member function type>' ->xanno 0x5634e630d248
|             |       `-CXXThisExpr 0x5634e63288d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5634e6328998 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5634e6328960 <col:80> 'int' lvalue ParmVar 0x5634e6311180 'i' 'int'
|-CXXMethodDecl 0x5634e6311468 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5634e6311310 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5634e6311390 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5634e63292d0 <col:45, line:635:5>
|   |-ParenExpr 0x5634e6329018 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5634e6328fe8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5634e6328cb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5634e6328c80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5634e6328b20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5634e6328b08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5634e6328ac8 <col:23> 'int' lvalue ParmVar 0x5634e6311310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5634e6328ae8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5634e6328c60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5634e6328c48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634e6328b40 <col:33> 'int' lvalue ParmVar 0x5634e6311310 'i' 'int'
|   |   |     `-BinaryOperator 0x5634e6328c28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5634e6328c10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5634e6328b60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5634e630d630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5634e6328be8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5634e6328bd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5634e6328b98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5634e6328d10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5634e6328cf0 <col:79> 'int' 0
|   |   `-CallExpr 0x5634e6328f48 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5634e6328f30 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5634e6328f10 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5634e5e79f50 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5634e6328f88 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6328d80 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5634e6328fa0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5634e6328dc8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5634e6328fb8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634e6328e00 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5634e6328fd0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5634e6328ef8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5634e6328ee0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5634e6328e98 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5634e63292b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5634e6329218 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5634e63291e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5634e6329188 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5634e6329158 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5634e6329108 <col:54, col:63> 'char [48]' lvalue ->c 0x5634e6318100
|     |     |   `-CXXMemberCallExpr 0x5634e63290e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5634e63290b8 <col:54> '<bound member function type>' ->xanno 0x5634e630d3e8
|     |     |       `-CXXThisExpr 0x5634e63290a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5634e6329170 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5634e6329138 <col:67> 'int' lvalue ParmVar 0x5634e6311310 'i' 'int'
|     `-CXXConstCastExpr 0x5634e6329280 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5634e6329268 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5634e6329230 <col:91> 'const void *' lvalue ParmVar 0x5634e6311390 'x' 'const void *'
|-CXXMethodDecl 0x5634e6311538 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5634e6329358 <col:34, line:640:5>
|   `-ReturnStmt 0x5634e6329348 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5634e6329330 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5634e6329300 <col:16> 'Packet *' lvalue ->_data_packet 0x5634e6318cb8
|         `-CXXThisExpr 0x5634e63292f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5634e6311678 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5634e63115e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5634e6322418 <col:46> 'bool' true
|-CXXMethodDecl 0x5634e63117f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5634e6311730 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5634e63118a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5634e6312050 <line:660:22> "" ""
| |-EnumConstantDecl 0x5634e63119a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e63120c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311980 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5634e6311960 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5634e6306b00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5634e6311a30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e63120d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311a10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5634e63119f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5634e6306b90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5634e6311ac0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e63120f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311aa0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5634e6311a80 <col:21> 'int' 0
| |-EnumConstantDecl 0x5634e6311b50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e6312108 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311b30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5634e6311b10 <col:19> 'int' 16
| |-EnumConstantDecl 0x5634e6311be0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e6312120 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311bc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5634e6311ba0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5634e6311c70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e6312138 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311c50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5634e6311c30 <col:19> 'int' 32
| |-EnumConstantDecl 0x5634e6311d00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e6312150 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311ce0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5634e6311cc0 <col:19> 'int' EnumConstant 0x5634e6311b50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5634e6311d90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e6312168 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311d70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5634e6311d50 <col:19> 'int' EnumConstant 0x5634e6311c70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5634e6311e60 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e6312180 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311e40 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5634e6311e20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5634e6311de0 <col:23> 'int' EnumConstant 0x5634e6311d90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5634e6311e00 <col:40> 'int' 2
| |-EnumConstantDecl 0x5634e6311f30 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5634e6312198 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634e6311f10 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5634e6311ef0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5634e6311eb0 <col:23> 'int' EnumConstant 0x5634e6311d90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5634e6311ed0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5634e6312000 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5634e63121b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634e6311fe0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5634e6311fc0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5634e6311f80 <col:23> 'int' EnumConstant 0x5634e6311d90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5634e6311fa0 <col:40> 'int' 8
|-CXXMethodDecl 0x5634e63121f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5634e6312290 <col:68> "" ""
|-CXXMethodDecl 0x5634e6312328 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5634e63123c8 <col:45> "" ""
|-CXXMethodDecl 0x5634e6312460 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5634e6312500 <col:57> "" ""
|-CXXMethodDecl 0x5634e6312598 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5634e6312638 <col:45> "" ""
|-CXXMethodDecl 0x5634e63126d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5634e6312770 <col:57> "" ""
|-CXXMethodDecl 0x5634e6312800 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5634e63128a0 <col:51> "" ""
|-CXXMethodDecl 0x5634e6312930 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5634e63129d0 <col:63> "" ""
|-CXXMethodDecl 0x5634e6312a60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5634e6312b00 <col:53> "" ""
|-CXXMethodDecl 0x5634e6312b90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5634e6312c30 <col:65> "" ""
|-CXXMethodDecl 0x5634e6312d48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5634e6312cb8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5634e6312df0 <col:61> "" ""
|-CXXMethodDecl 0x5634e6312f88 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5634e6312e78 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5634e6312ef0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5634e6313038 <col:67> "" ""
|-CXXMethodDecl 0x5634e6313150 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5634e63130c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5634e63131f8 <col:63> "" ""
|-CXXMethodDecl 0x5634e6313390 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5634e6313280 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5634e63132f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5634e6313440 <col:69> "" ""
|-CXXMethodDecl 0x5634e6313558 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5634e63134c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5634e6313600 <col:63> "" ""
|-CXXMethodDecl 0x5634e6315cd8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5634e6315bc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5634e6315c40 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5634e6315d88 <col:69> "" ""
|-CXXMethodDecl 0x5634e6315ea0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5634e6315e10 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5634e6315f48 <col:62> "" ""
|-CXXMethodDecl 0x5634e63160e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5634e6315fd0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5634e6316048 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5634e6316190 <col:68> "" ""
|-CXXMethodDecl 0x5634e63162a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5634e6316218 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5634e6316350 <col:63> "" ""
|-CXXMethodDecl 0x5634e63164e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5634e63163d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5634e6316450 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5634e6316598 <col:69> "" ""
|-CXXMethodDecl 0x5634e6316628 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5634e63166c8 <col:64> "" ""
|-CXXMethodDecl 0x5634e6316758 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5634e63167f8 <col:52> "" ""
|-CXXMethodDecl 0x5634e6316888 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5634e6316928 <col:67> "" ""
|-CXXMethodDecl 0x5634e63169b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5634e6316a58 <col:55> "" ""
|-CXXMethodDecl 0x5634e6316b70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5634e6316ae0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5634e6316c18 <col:58> "" ""
|-CXXMethodDecl 0x5634e6316db0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5634e6316ca0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5634e6316d18 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5634e6316e60 <col:62> "" ""
|-CXXMethodDecl 0x5634e6316f78 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5634e6316ee8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5634e6317020 <col:58> "" ""
|-CXXMethodDecl 0x5634e63171b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5634e63170a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5634e6317120 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5634e6317268 <col:62> "" ""
|-CXXMethodDecl 0x5634e6317380 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5634e63172f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5634e6317428 <col:60> "" ""
|-CXXMethodDecl 0x5634e63175c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5634e63174b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5634e6317528 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5634e6317670 <col:64> "" ""
|-CXXMethodDecl 0x5634e6317788 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5634e63176f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5634e6317830 <col:58> "" ""
|-CXXMethodDecl 0x5634e63179c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5634e63178b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5634e6317930 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5634e6317a78 <col:62> "" ""
|-CXXMethodDecl 0x5634e6317b90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5634e6317b00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5634e6317c38 <col:59> "" ""
|-CXXMethodDecl 0x5634e6317dd0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5634e6317cc0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5634e6317d38 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5634e6317e80 <col:63> "" ""
|-AccessSpecDecl 0x5634e6317ef0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5634e6317f18 prev 0x5634e630d120 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5634e6318010 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5634e6318100 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5634e6318228 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5634e63183a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5634e6318528 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5634e63186a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5634e63294d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5634e6329d48 <col:11>
| |-CXXDestructorDecl 0x5634e63295b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5634e63296e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5634e63296e8
| | `-ParmVarDecl 0x5634e63297f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5634e6329898 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5634e6329898
| | `-ParmVarDecl 0x5634e63299a8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5634e632c768 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5634e632c878 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5634e632caf8 <col:11>
| |   `-ReturnStmt 0x5634e632cae8 <col:11>
| |     `-UnaryOperator 0x5634e632cad0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5634e632cac0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5634e632c8e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5634e632c8e8
|   `-ParmVarDecl 0x5634e632c9f8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5634e6318710 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5634e6318828 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5634e63188c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5634e6318930 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5634e6318998 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5634e6318a00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5634e6318a60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5634e6318b20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5634e6318b80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5634e6318be0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5634e63293e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5634e63188c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5634e6329d58 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5634e6329db0 <col:12>
| |-CXXConstructorDecl 0x5634e6329a18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5634e6329a18
| | `-ParmVarDecl 0x5634e6329b28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5634e6329bc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5634e6329bc8
| | `-ParmVarDecl 0x5634e6329cd8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5634e632be50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5634e6318c58 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5634e6318cb8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5634e6318d20 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5634e6318d88 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5634e6318df0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5634e6318e58 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5634e6318eb8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5634e6318f18 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5634e6318f80 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5634e6319008 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5634e6318c58 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5634e6329380 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5634e6318eb8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5634e6329dc0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5634e6329e20 <col:21, line:755:5>
|-CXXConstructorDecl 0x5634e63191a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5634e63190e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5634e63192a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5634e6319488 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5634e6319390 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5634e6319758 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5634e6319540 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5634e63195b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5634e6319630 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e6319978 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5634e6319828 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5634e63198a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5634e6321f58 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5634e6319a38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5634e6319ab0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5634e6319b28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5634e63220b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5634e6322020 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5634e63221f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5634e6322168 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5634e63222f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>
