
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c04b618 prev 0x55e94c042db8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94c04b710 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55e94c04b7a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55e94c04b818 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55e94c04b8d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55e94c04b9a0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55e94c04bb18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55e94c04ba50 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55e94c04bbc0 <col:24>
| `-OptimizeNoneAttr 0x55e94c04bc18 <col:34>
|-CXXMethodDecl 0x55e94c04bc60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55e94c04bf18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55e94c04bd10 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e94c04bd88 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55e94c04be08 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55e94c04bfd0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55e94c04c008 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55e94c04c070 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55e94c04c0f8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55e94c04c418 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55e94c04c1b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55e94c04c228 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55e94c04c2a0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55e94c04c320 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55e94c04c530 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55e94c053ea8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e94c053ea8
| `-ParmVarDecl 0x55e94c053fb8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55e94c054058 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e94c054058
| `-ParmVarDecl 0x55e94c054168 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55e94c10e128 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c03e630 prev 0x55e94c03e3b0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e94c03e728 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55e94c03e7b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55e94c03e818 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55e94c03e908 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55e94c03ea08 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55e94c03ebd8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55e94c03ea88 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55e94c03eb00 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55e94c03ed68 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55e94c03eca0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55e94c03ee10 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55e94c03ef48 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55e94c03ee80 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55e94c03f0e8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55e94c03f028 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55e94c03f288 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55e94c03f1c8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55e94c03f330 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55e94c03f430 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55e94c03f510 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c03f410 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55e94c03f3f0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55e94c03f4c0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55e94c03f528 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c03f4a0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55e94c03f480 <col:44> 'int' 2
|-CXXMethodDecl 0x55e94c03f670 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55e94c03f558 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55e94c03f5d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55e94c03f7c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55e94c03f738 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55e94c03fa08 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55e94c03f888 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55e94c03f900 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55e94c03fab8 <col:20>
| `-OptimizeNoneAttr 0x55e94c03fb10 <col:30>
|-CXXMethodDecl 0x55e94c03fc18 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55e94c03fb50 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55e94c03fcc0 <col:20>
| `-OptimizeNoneAttr 0x55e94c03fd18 <col:30>
|-CXXMethodDecl 0x55e94c03fd68 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55e94c03fe30 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55e94c03ff48 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55e94c03ffd0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55e94c040058 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55e94c0400e0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55e94c040168 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55e94c0401f8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55e94c0402b8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55e94c040340 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55e94c0403c8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55e94c040450 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55e94c0404d8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55e94c040560 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55e94c0405f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55e94c0406b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55e94c040740 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55e94c040890 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55e94c0407f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55e94c040a20 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55e94c040950 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55e94c040cd0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55e94c040ad8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55e94c040b58 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55e94c040bd8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55e94c040d88 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55e94c040e90 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e94c041120 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c040e70 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55e94c040e50 <col:33> 'int' 0
| |-EnumConstantDecl 0x55e94c040f20 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e94c041138 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c040f00 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55e94c040ee0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55e94c040fb0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e94c041150 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c040f90 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55e94c040f70 <col:38> 'int' 90
| |-EnumConstantDecl 0x55e94c041040 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55e94c041168 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c041020 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55e94c041000 <col:35> 'int' 100
| `-EnumConstantDecl 0x55e94c0410d0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55e94c041180 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c0410b0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55e94c041090 <col:32> 'int' 2000
|-CXXMethodDecl 0x55e94c0411c0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55e94c041600 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e94c041470 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e94c0414e8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c0416d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55e94c041850 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55e94c041780 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c041a58 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e94c041908 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55e94c041980 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c041b58 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55e94c041bf8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55e94c041cc0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e94c041d50 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55e94c041f80 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c041d30 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55e94c041d10 <col:36> 'int' EnumConstant 0x55e94c041cc0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e94c041da0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e94c041df0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e94c041e40 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e94c041e90 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55e94c041ee0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55e94c041f30 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55e94c042068 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55e94c041fa8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55e94c042130 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55e94c0421f0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55e94c0422b0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55e94c042370 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55e94c042488 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55e94c042550 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55e94c0426d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55e94c042600 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55e94c0427f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55e94c0429f8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55e94c0428a8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55e94c042928 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55e94c050348 <col:54, line:127:5>
|   |-ParenExpr 0x55e94c0501f8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55e94c0501c8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c04feb8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e94c04fe90 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55e94c04fe78 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55e94c04fe60 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55e94c04fe30 <col:31> 'Router *' lvalue ->_router 0x55e94c04dd10
|   |   |         `-CXXThisExpr 0x55e94c04fe20 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e94c04ff18 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c04fef8 <col:48> 'int' 0
|   |   `-CallExpr 0x55e94c050128 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55e94c050110 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c0500f0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c050168 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c04ff88 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55e94c050180 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c04ffa8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55e94c050198 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c04ffe0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55e94c0501b0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c0500d8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c0500c0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c050078 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55e94c050290 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55e94c050228 <col:9> 'Router *' lvalue ->_router 0x55e94c04dd10
|   | | `-CXXThisExpr 0x55e94c050218 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55e94c050278 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e94c050258 <col:19> 'Router *' lvalue ParmVar 0x55e94c0428a8 'r' 'Router *'
|   `-BinaryOperator 0x55e94c050328 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55e94c0502c0 <col:9> 'int' lvalue ->_eindex 0x55e94c04dd78
|     | `-CXXThisExpr 0x55e94c0502b0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55e94c050310 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e94c0502f0 <col:19> 'int' lvalue ParmVar 0x55e94c042928 'eindex' 'int'
|-CXXMethodDecl 0x55e94c042b80 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55e94c042ab8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55e94c042c50 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55e94c042d18 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55e94c042db8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55e94c043008 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55e94c042e80 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55e94c042f00 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55e94c0430b8 <col:20>
| `-OptimizeNoneAttr 0x55e94c043110 <col:30>
|-CXXMethodDecl 0x55e94c043218 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e94c043150 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55e94c0432c0 <col:20>
| `-OptimizeNoneAttr 0x55e94c043318 <col:30>
|-CXXMethodDecl 0x55e94c0433e8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55e94c043358 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55e94c043490 <col:20>
| `-OptimizeNoneAttr 0x55e94c0434e8 <col:30>
|-CXXMethodDecl 0x55e94c043678 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55e94c043520 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55e94c0435a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55e94c043808 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e94c043740 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e94c043958 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e94c0438c8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55e94c043aa8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55e94c043a18 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e94c043bf8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55e94c043b68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55e94c043eb8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55e94c043cb0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55e94c043d30 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55e94c043dd8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55e94c043f90 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55e94c044050 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55e94c044320 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55e94c0441d0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55e94c044248 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c044448 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55e94c044620 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55e94c044500 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55e94c044580 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55e94c044808 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55e94c0446e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55e94c044768 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55e94c044b78 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e94c0448c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e94c044940 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e94c0449c0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e94c04f930 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e94c04f910 <col:106> 'int' 0
| `-ParmVarDecl 0x55e94c044a38 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e94c04f968 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e94c04f948 <col:126> 'int' 0
|-CXXMethodDecl 0x55e94c044f18 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e94c044c48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e94c044ce0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e94c044d60 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55e94c044dd8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e94c04f9a0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e94c04f980 <col:114> 'int' 0
|-CXXMethodDecl 0x55e94c0452a8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e94c044ff0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55e94c045068 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55e94c0450e8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55e94c04f9b8 <col:96> 'int' 0
| `-ParmVarDecl 0x55e94c045160 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e94c04f9f8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e94c04f9d8 <col:116> 'int' 0
|-CXXMethodDecl 0x55e94c045628 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55e94c045378 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e94c0453f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c045470 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e94c04fa30 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e94c04fa10 <col:109> 'int' 0
| `-ParmVarDecl 0x55e94c0454e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e94c04fa68 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e94c04fa48 <col:129> 'int' 0
|-CXXMethodDecl 0x55e94c0459a8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e94c0456f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55e94c045770 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c0457f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55e94c045868 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e94c04faa0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e94c04fa80 <col:117> 'int' 0
|-CXXMethodDecl 0x55e94c045d38 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55e94c045a80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c045af8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c045b78 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55e94c04fab8 <col:99> 'int' 0
| `-ParmVarDecl 0x55e94c045bf0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55e94c04faf8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55e94c04fad8 <col:119> 'int' 0
|-CXXMethodDecl 0x55e94c046158 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55e94c045e08 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e94c045e88 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e94c045f00 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c045f80 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55e94c04fb30 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55e94c04fb10 <col:108> 'int' 0
| `-ParmVarDecl 0x55e94c046000 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55e94c04fb68 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55e94c04fb48 <col:141> 'int' 0
|-CXXMethodDecl 0x55e94c046578 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e94c046230 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55e94c0462b0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55e94c046328 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c0463a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55e94c046428 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e94c04fb80 <col:121> 'int' 0
|-CXXMethodDecl 0x55e94c0469a8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55e94c046658 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55e94c0466d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55e94c046750 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c0467d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55e94c04fba0 <col:98> 'int' 0
| `-ParmVarDecl 0x55e94c046850 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55e94c04fbc0 <col:123> 'int' 0
|-CXXMethodDecl 0x55e94c046c70 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55e94c046a80 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55e94c046b00 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55e94c046b80 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55e94c04fbe0 <col:80> 'int' 0
|-EnumDecl 0x55e94c046d28 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55e94c046e30 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e94c0470c0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c046e10 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55e94c046df0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55e94c046ec0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e94c0470d8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c046ea0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55e94c046e80 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e94c046f50 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e94c0470f0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c046f30 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55e94c046f10 <col:44> 'int' 4
| |-EnumConstantDecl 0x55e94c046fe0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55e94c047108 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c046fc0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55e94c046fa0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55e94c047070 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55e94c047120 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c047050 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55e94c047030 <col:34> 'int' 6
|-CXXMethodDecl 0x55e94c0473d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55e94c047148 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55e94c0471e8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e94c047268 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55e94c0472e0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55e94c04fc98 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55e94c04fc80 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55e94c04fc68 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55e94c04fc48 <col:98, col:105> 'String' (CXXTemporary 0x55e94c04fc48)
|           `-CXXTemporaryObjectExpr 0x55e94c04fc10 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55e94c047678 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55e94c0474a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e94c047520 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55e94c047598 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e94c04fd48 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e94c04fd30 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e94c04fd18 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e94c04fcf8 <col:94, col:101> 'String' (CXXTemporary 0x55e94c04fcf8)
| |         `-CXXTemporaryObjectExpr 0x55e94c04fcc0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55e94c050530 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55e94c0504a8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55e94c050478 <col:9> '<bound member function type>' ->add_task_handlers 0x55e94c0473d8
|     | `-CXXThisExpr 0x55e94c050468 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e94c0504e8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e94c0503e8 <col:27> 'Task *' lvalue ParmVar 0x55e94c0474a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e94c050500 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e94c050408 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55e94c047520 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55e94c050518 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e94c050428 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e94c047070 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e94c050448 <col:62> 'const String' lvalue ParmVar 0x55e94c047598 'prefix' 'const String &'
|-CXXMethodDecl 0x55e94c047888 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55e94c047740 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55e94c0477b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55e94c04fdf8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55e94c04fde0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55e94c04fdc8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55e94c04fda8 <col:70, col:77> 'String' (CXXTemporary 0x55e94c04fda8)
| |         `-CXXTemporaryObjectExpr 0x55e94c04fd70 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55e94c050708 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55e94c050680 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55e94c050650 <col:9> '<bound member function type>' ->add_task_handlers 0x55e94c0473d8
|     | `-CXXThisExpr 0x55e94c050640 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55e94c0506c0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e94c0505c0 <col:27> 'Task *' lvalue ParmVar 0x55e94c047740 'task' 'Task *'
|     |-ImplicitCastExpr 0x55e94c0506d8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55e94c0505e0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55e94c0506f0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55e94c050600 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55e94c047070 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55e94c050620 <col:57> 'const String' lvalue ParmVar 0x55e94c0477b8 'prefix' 'const String &'
|-CXXMethodDecl 0x55e94c047b68 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55e94c047950 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c0479d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c047a48 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55e94c047e18 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55e94c047c38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c047cb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c047d38 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55e94c048108 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e94c047ee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c047f68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c047fe0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55e94c0483b8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55e94c0481d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c048258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c0482d8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55e94c048668 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55e94c048488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c048508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c048588 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55e94c048918 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55e94c048738 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c0487b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c048830 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55e94c048bc8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55e94c0489e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c048a68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c048ae8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55e94c048ed8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55e94c048cf0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c048d70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c048df0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55e94c0491b8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55e94c048fa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c049028 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c0490d0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55e94c049498 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55e94c049288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c049308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c0493b0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55e94c049700 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55e94c049568 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e94c0495e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e94c049660 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55e94c0499a8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55e94c0497d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55e94c049850 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55e94c0498c8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55e94c049c58 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55e94c049a78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c049af8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c049b78 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55e94c049f08 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55e94c049d28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c049da8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c049e20 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55e94c04a1b8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55e94c049fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c04a058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c04a0d0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55e94c04a488 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55e94c04a288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c04a308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55e94c04a3a8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55e94c04a7b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55e94c04a558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55e94c04a5d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55e94c04a650 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55e94c04a6c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e94c04fe10 <col:93> 'bool' false
|-CXXMethodDecl 0x55e94c04a9a0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e94c04a888 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55e94c04a908 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55e94c04ab78 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e94c04aa60 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55e94c04aae0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55e94c04ae58 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e94c04ac38 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55e94c04acb0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55e94c04ad30 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55e94c04ada8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c04b148 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55e94c04af28 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55e94c04afa0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55e94c04b020 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55e94c04b098 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c04b380 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55e94c04b220 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55e94c04b2a0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55e94c04b568 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55e94c04b448 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55e94c04b4c8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55e94c04b618 prev 0x55e94c042db8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e94c04b710 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55e94c04b7a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55e94c04b818 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55e94c04b8d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55e94c04b9a0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55e94c04bb18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55e94c04ba50 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55e94c04bbc0 <col:24>
| | `-OptimizeNoneAttr 0x55e94c04bc18 <col:34>
| |-CXXMethodDecl 0x55e94c04bc60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55e94c04bf18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55e94c04bd10 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e94c04bd88 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55e94c04be08 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55e94c04bfd0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55e94c04c008 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55e94c04c070 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55e94c04c0f8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55e94c04c418 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55e94c04c1b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55e94c04c228 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55e94c04c2a0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55e94c04c320 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55e94c04c530 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55e94c053ea8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55e94c053ea8
| | `-ParmVarDecl 0x55e94c053fb8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55e94c054058 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55e94c054058
| | `-ParmVarDecl 0x55e94c054168 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55e94c10e128 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e94c04c5a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55e94c04c648 <col:38> "" ""
|-CXXMethodDecl 0x55e94c04c6d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55e94c04c778 <col:44> "" ""
|-AccessSpecDecl 0x55e94c04c7e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55e94c04c810 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55e94c04c910 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55e94c04c960 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c04c8f0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55e94c04c8d0 <col:27> 'int' 4
|-FieldDecl 0x55e94c04ca18 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55e94c04cbc8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55e94c04cc80 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55e94c04dd10 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55e94c04dd78 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55e94c04dec8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55e94c04de08 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55e94c04e078 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55e94c04df88 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55e94c04e258 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55e94c04e138 <col:20> col:23 'int'
| `-ParmVarDecl 0x55e94c04e1b8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55e94c04e500 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c04e320 <col:23> col:26 'int'
| |-ParmVarDecl 0x55e94c04e3a0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55e94c04e418 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55e94c04e5b8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55e94c04e680 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55e94c04e6d0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55e94c04e720 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55e94c04e900 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55e94c04e7b0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55e94c04e828 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c04eba8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55e94c04e9c8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55e94c04ea48 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55e94c04eac0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c04edc8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55e94c04ec78 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55e94c04ecf8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55e94c04f100 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55e94c04ee88 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55e94c04ef08 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55e94c04ef80 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55e94c04f000 <col:57> col:60 'int'
|-CXXMethodDecl 0x55e94c04f2e8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55e94c04f1d0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55e94c04f250 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55e94c04f438 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55e94c04f3a8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55e94c04f7b8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55e94c04f4f8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55e94c04f578 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55e94c04f5f0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55e94c04f670 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55e94c04f8d0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class DecIPTTL
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class atomic_uint32_t _drops
       108 |     uint32_t _val
       112 |   _Bool _active
       113 |   _Bool _multicast
           | [sizeof=120, dsize=114, align=8,
           |  nvsize=114, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94bdfcec0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94bdfcfd8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55e94bdfd068 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55e94bdfd138 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55e94bdfd220 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94bdfd438 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e94bdfd2e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdfd5e8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e94bdfd4f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e94bdfd730 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55e94bdfd6a0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55e94bdfd878 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e94bdfd7e8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdfd9c0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55e94bdfd930 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdfda88 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55e94bdfdbd0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55e94bdfdb40 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e94bdfdc98 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55e94bdfdde0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55e94bdfdd50 <col:28> col:31 'int'
|-CXXMethodDecl 0x55e94bdfdf58 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e94bdfde98 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdfe0a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55e94bdfe010 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdfe168 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55e94bdfe328 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e94bdfe218 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e94bdfe290 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdfe578 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e94bdfe3e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e94bdfe460 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e94bdfe628 <col:86> "" ""
|-CXXMethodDecl 0x55e94bdfe898 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55e94bdfe708 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55e94bdfe780 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdfea48 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e94bdfe958 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e94bdfebf8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55e94bdfeb00 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55e94bdfeec8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e94bdfecb0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e94bdfed28 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e94bdfeda0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdff1a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55e94bdfef90 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55e94bdff008 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e94bdff080 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e94bdff260 <col:115> "" ""
|-AccessSpecDecl 0x55e94bdff2d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55e94bdff308 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94bdff810 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e94bdff810
| `-ParmVarDecl 0x55e94bdff918 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55e94bdff9b8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e94bdff9b8
| `-ParmVarDecl 0x55e94bdffac8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55e94be350f8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e94c028120 <col:7>
|-CXXConstructorDecl 0x55e94be351d0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55e94be351d0
| `-ParmVarDecl 0x55e94be352e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55e94be35358 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55e94be35358
| `-ParmVarDecl 0x55e94be35468 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55e94c02ab20 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c057018 <../elements/ip/decipttl.hh:45:1, line:65:1> line:45:7 class DecIPTTL definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55e94c057178 <col:1, col:7> col:7 implicit referenced class DecIPTTL
|-AccessSpecDecl 0x55e94c057208 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x55e94c057290 <line:47:5, col:14> col:5 DecIPTTL 'void ()'
|-CXXDestructorDecl 0x55e94c057380 <line:48:5, col:15> col:5 ~DecIPTTL 'void ()' noexcept-unevaluated 0x55e94c057380
| `-Overrides: [ 0x55e94c03e908 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55e94c0574b0 <line:50:5, col:57> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55e94c03fd68 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55e94c0580b0 <col:36, col:57>
|   `-ReturnStmt 0x55e94c0580a0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55e94c058088 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55e94c058068 <col:45> 'const char [9]' lvalue "DecIPTTL"
|-CXXMethodDecl 0x55e94c057578 <line:51:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55e94c03fe30 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55e94c058110 <col:36, col:58>
|   `-ReturnStmt 0x55e94c058100 <col:38, col:45>
|     `-ImplicitCastExpr 0x55e94c0580e8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e94c0580c8 <col:45> 'const char []' lvalue Var 0x55e94c040168 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55e94c057640 <line:52:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55e94c0401f8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55e94c058170 <col:36, col:62>
|   `-ReturnStmt 0x55e94c058160 <col:38, col:45>
|     `-ImplicitCastExpr 0x55e94c058148 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55e94c058128 <col:45> 'const char []' lvalue Var 0x55e94c040560 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55e94c057910 <line:54:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55e94c041600 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55e94c0577c0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x55e94c057838 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55e94c0579e0 <line:55:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55e94c0416d0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55e94c057b20 <line:57:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55e94c03ef48 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55e94c057a90 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55e94c057bc8 <line:59:3, col:10> col:3 private
|-FieldDecl 0x55e94c057c00 <line:61:5, col:21> col:21 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x55e94c057c60 <line:62:5, col:10> col:10 _active 'bool'
|-FieldDecl 0x55e94c057cc0 <line:63:5, col:10> col:10 _multicast 'bool'
|-CXXConstructorDecl 0x55e94c057d38 <line:45:7> col:7 implicit DecIPTTL 'void (const DecIPTTL &)' inline default_delete noexcept-unevaluated 0x55e94c057d38
| `-ParmVarDecl 0x55e94c057e48 <col:7> col:7 'const DecIPTTL &'
`-CXXMethodDecl 0x55e94c057ee8 <col:7> col:7 implicit operator= 'DecIPTTL &(const DecIPTTL &)' inline default_delete noexcept-unevaluated 0x55e94c057ee8
  `-ParmVarDecl 0x55e94c057ff8 <col:7> col:7 'const DecIPTTL &'

Layout: <CGRecordLayout
  LLVMType:%class.DecIPTTL = type <{ %class.Element.base, %class.atomic_uint32_t, i8, i8, [6 x i8] }>
  NonVirtualBaseLLVMType:%class.DecIPTTL.base = type <{ %class.Element.base, %class.atomic_uint32_t, i8, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94be112a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e94be113b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55e94be11458 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55e94be114b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55e94be11518 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55e94be115c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94be118d0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94be119e8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55e94be11a90 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55e94be11af8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55e94be11b88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55e94be17c20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e94be18058 <col:12>
|-CXXConstructorDecl 0x55e94be17d28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e94be17e38 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e94be11a90 'data' 'const char *'
| | `-ImplicitCastExpr 0x55e94be1a5e0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55e94be1a5b0 <col:12> 'const char *const' lvalue .data 0x55e94be11a90
| |     `-DeclRefExpr 0x55e94be1a590 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be17e38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e94be11af8 'length' 'int'
| | `-ImplicitCastExpr 0x55e94be1a670 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55e94be1a640 <col:12> 'const int' lvalue .length 0x55e94be11af8
| |     `-DeclRefExpr 0x55e94be1a620 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be17e38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55e94be11b88 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55e94be1a700 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55e94be1a6d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e94be11b88
| |     `-DeclRefExpr 0x55e94be1a6b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be17e38 '' 'const String::rep_t &'
| `-CompoundStmt 0x55e94be1a758 <col:12>
|-CXXConstructorDecl 0x55e94be17ed8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e94be17ed8
| `-ParmVarDecl 0x55e94be17fe8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55e94be1d540 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55e94be28f58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e94be29068 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55e94be29580 <col:12>
|   |-BinaryOperator 0x55e94be29398 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e94be29350 <col:12> 'const char *' lvalue ->data 0x55e94be11a90
|   | | `-CXXThisExpr 0x55e94be29340 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e94be29380 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55e94be29310 <col:12> 'const char *const' lvalue .data 0x55e94be11a90
|   |     `-DeclRefExpr 0x55e94be292f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be29068 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e94be29460 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55e94be29418 <col:12> 'int' lvalue ->length 0x55e94be11af8
|   | | `-CXXThisExpr 0x55e94be29408 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e94be29448 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55e94be293d8 <col:12> 'const int' lvalue .length 0x55e94be11af8
|   |     `-DeclRefExpr 0x55e94be293b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be29068 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55e94be29528 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55e94be294e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55e94be11b88
|   | | `-CXXThisExpr 0x55e94be294d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55e94be29510 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55e94be294a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e94be11b88
|   |     `-DeclRefExpr 0x55e94be29480 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be29068 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55e94be29570 <col:12>
|     `-UnaryOperator 0x55e94be29558 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94be29548 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55e94be290d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e94be290d8
  `-ParmVarDecl 0x55e94be291e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94be08810 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e94be08928 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55e94be089b8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55e94be089f8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55e94baddfd0 'const char *'
|   `-QualType 0x55e94badd521 'const char' const
|     `-BuiltinType 0x55e94badd520 'char'
|-TypedefDecl 0x55e94be08a80 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55e94be08a50 'String::const_iterator' sugar
|   |-Typedef 0x55e94be089f8 'const_iterator'
|   `-PointerType 0x55e94baddfd0 'const char *'
|     `-QualType 0x55e94badd521 'const char' const
|       `-BuiltinType 0x55e94badd520 'char'
|-TypedefDecl 0x55e94be08bf0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55e94be08b60 'int (String::*)() const'
|   |-RecordType 0x55e94be088a0 'String'
|   | `-CXXRecord 0x55e94be08810 'String'
|   `-ParenType 0x55e94be08b00 'int () const' sugar
|     `-FunctionProtoType 0x55e94bddd6a0 'int () const' const cdecl
|       `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94be08c58 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55e94bc32280 'int64_t' sugar
|   |-Typedef 0x55e94bb46390 'int64_t'
|   `-TypedefType 0x55e94bb1f630 '__int64_t' sugar
|     |-Typedef 0x55e94bb1f208 '__int64_t'
|     `-BuiltinType 0x55e94badd5a0 'long'
|-TypedefDecl 0x55e94be08cc0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55e94bc321a0 'uint64_t' sugar
|   |-Typedef 0x55e94bb46530 'uint64_t'
|   `-TypedefType 0x55e94bb1f6c0 '__uint64_t' sugar
|     |-Typedef 0x55e94bb1f278 '__uint64_t'
|     `-BuiltinType 0x55e94badd640 'unsigned long'
|-TypedefDecl 0x55e94be08d50 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55e94be08d20 'String::intmax_t' sugar
|   |-Typedef 0x55e94be08c58 'intmax_t'
|   `-TypedefType 0x55e94bc32280 'int64_t' sugar
|     |-Typedef 0x55e94bb46390 'int64_t'
|     `-TypedefType 0x55e94bb1f630 '__int64_t' sugar
|       |-Typedef 0x55e94bb1f208 '__int64_t'
|       `-BuiltinType 0x55e94badd5a0 'long'
|-TypedefDecl 0x55e94be08de0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55e94be08db0 'String::uintmax_t' sugar
|   |-Typedef 0x55e94be08cc0 'uintmax_t'
|   `-TypedefType 0x55e94bc321a0 'uint64_t' sugar
|     |-Typedef 0x55e94bb46530 'uint64_t'
|     `-TypedefType 0x55e94bb1f6c0 '__uint64_t' sugar
|       |-Typedef 0x55e94bb1f278 '__uint64_t'
|       `-BuiltinType 0x55e94badd640 'unsigned long'
|-CXXConstructorDecl 0x55e94be08ea0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55e94be09048 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55e94be08f88 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55e94be091f8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55e94be09138 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55e94be09350 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55e94be092c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55e94be09568 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e94be09418 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55e94be09498 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55e94be09788 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55e94be09638 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55e94be096b8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55e94be099a8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e94be09858 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55e94be098d8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55e94be09bc8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55e94be09a78 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55e94be09af8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55e94be09d58 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55e94be09c90 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55e94be09ed8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55e94be09e18 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55e94be0a068 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55e94be09fa0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55e94be0a1c0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55e94be0a130 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55e94be0a318 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55e94be0a288 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55e94be0a470 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55e94be0a3e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55e94be0a5f8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55e94be0a538 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55e94be0a788 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55e94be0a6c0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55e94be0a918 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55e94be0a850 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55e94be0aaa8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55e94be0a9e0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55e94be0aba0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55e94be0acc8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55e94be0ae48 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55e94be0ad80 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55e94be0af98 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55e94be0af08 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55e94be0b050 <col:63> "" ""
|-CXXMethodDecl 0x55e94be0b198 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55e94be0b0d8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55e94be0b3a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55e94be0b258 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55e94be0b2d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55e94be0b5c8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55e94be0b470 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55e94be0b4f0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55e94be0b8a8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55e94be0b688 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55e94be0b708 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55e94be176f0 <col:55> 'int' 10
| `-ParmVarDecl 0x55e94be0b780 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e94be17710 <col:76> 'bool' true
|-CXXMethodDecl 0x55e94be0bb88 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55e94be0b970 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55e94be0b9f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55e94be17720 <col:56> 'int' 10
| `-ParmVarDecl 0x55e94be0ba68 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e94be17740 <col:77> 'bool' true
|-CXXMethodDecl 0x55e94be0bc90 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55e94be0bd58 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55e94be0be20 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55e94be0bec0 <col:20>
| `-OptimizeNoneAttr 0x55e94be0bf18 <col:30>
|-CXXConversionDecl 0x55e94be0c008 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55e94be0c0d8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55e94be0c198 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55e94be0c288 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e94be0c348 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55e94be0c4c8 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55e94be0c400 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55e94be0c618 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55e94be0c588 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55e94be0c708 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55e94be0c7c8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55e94be0ca18 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55e94be0c880 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55e94be0c900 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55e94be0cc78 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55e94be0cae0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55e94be0cb60 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55e94be0cd48 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94be0cf58 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55e94be0ce00 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55e94be0ce80 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55e94be0d178 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55e94be0d020 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55e94be0d0a0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55e94be0d308 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55e94be0d240 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55e94be0d3f8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55e94be0d568 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e94be0d4a8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e94be0d778 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55e94be0d628 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e94be0d6a8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e94be0d990 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55e94be0d838 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55e94be0d8b0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55e94be0db20 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55e94be0da50 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e94be0dd40 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55e94be0dbe0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55e94be0dc60 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e94be0de90 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55e94be0de00 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55e94be0e068 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e94be0df50 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e94be0dfd0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55e94be0e1b8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55e94be0e128 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55e94be0e3d0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55e94be0e270 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55e94be0e2f0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55e94be17750 <col:39> 'int' 0
|-CXXMethodDecl 0x55e94be0e5f0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55e94be0e490 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55e94be0e510 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55e94be17770 <col:48> 'int' 0
|-CXXMethodDecl 0x55e94be0e7d0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55e94be0e6b0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55e94be0e730 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55e94be17790 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55e94be0e8a0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55e94be0e960 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55e94be0ea20 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55e94be0eae0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55e94be0eba0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55e94be0ed48 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e94be0ec50 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55e94be0eec8 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55e94be0ee00 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55e94be0f0a0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e94be0ef88 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55e94be0f218 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55e94be0f158 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55e94be0f360 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55e94be0f2d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55e94be0f4b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55e94be0f420 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55e94be0f688 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55e94be0f570 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55e94be0f5f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55e94be0f868 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55e94be0f750 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55e94be0f7d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55e94be0f9b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55e94be0f928 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55e94be0fbc8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55e94be0fa78 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55e94be0faf8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55e94be0fd28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55e94be0fc90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55e94be0fe80 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55e94be0fde8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55e94be0ff28 <col:57> "" ""
|-CXXMethodDecl 0x55e94be10038 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55e94be0ffa8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55e94be10188 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55e94be100f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55e94be10308 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55e94be10240 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55e94be103d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55e94be10490 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55e94be10550 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55e94be105f0 <col:49> "" ""
|-CXXMethodDecl 0x55e94be10680 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55e94be10740 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55e94be10830 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55e94be108f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55e94be109b8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55e94be10a78 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55e94be10b70 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55e94be10c38 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55e94be10d00 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55e94be10ed8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55e94be10db8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55e94be10e38 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55e94be11100 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55e94be10fa0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55e94be11020 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55e94be11210 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55e94be11278 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55e94be112a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55e94be113b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55e94be11458 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55e94be114b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55e94be11518 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55e94be115c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55e94be11630 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55e94be11868 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55e94be118b8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94be11848 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55e94be11758 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55e94be11700 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55e94be11740 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55e94be11720 <col:32> 'int' 8
|-CXXRecordDecl 0x55e94be118d0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e94be119e8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55e94be11a90 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55e94be11af8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55e94be11b88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55e94be17c20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e94be18058 <col:12>
| |-CXXConstructorDecl 0x55e94be17d28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e94be17e38 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e94be11a90 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55e94be1a5e0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55e94be1a5b0 <col:12> 'const char *const' lvalue .data 0x55e94be11a90
| | |     `-DeclRefExpr 0x55e94be1a590 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be17e38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e94be11af8 'length' 'int'
| | | `-ImplicitCastExpr 0x55e94be1a670 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55e94be1a640 <col:12> 'const int' lvalue .length 0x55e94be11af8
| | |     `-DeclRefExpr 0x55e94be1a620 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be17e38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55e94be11b88 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55e94be1a700 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55e94be1a6d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e94be11b88
| | |     `-DeclRefExpr 0x55e94be1a6b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be17e38 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55e94be1a758 <col:12>
| |-CXXConstructorDecl 0x55e94be17ed8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e94be17ed8
| | `-ParmVarDecl 0x55e94be17fe8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55e94be1d540 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55e94be28f58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e94be29068 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55e94be29580 <col:12>
| |   |-BinaryOperator 0x55e94be29398 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55e94be29350 <col:12> 'const char *' lvalue ->data 0x55e94be11a90
| |   | | `-CXXThisExpr 0x55e94be29340 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e94be29380 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e94be29310 <col:12> 'const char *const' lvalue .data 0x55e94be11a90
| |   |     `-DeclRefExpr 0x55e94be292f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be29068 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e94be29460 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55e94be29418 <col:12> 'int' lvalue ->length 0x55e94be11af8
| |   | | `-CXXThisExpr 0x55e94be29408 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e94be29448 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55e94be293d8 <col:12> 'const int' lvalue .length 0x55e94be11af8
| |   |     `-DeclRefExpr 0x55e94be293b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be29068 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55e94be29528 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55e94be294e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55e94be11b88
| |   | | `-CXXThisExpr 0x55e94be294d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55e94be29510 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55e94be294a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55e94be11b88
| |   |     `-DeclRefExpr 0x55e94be29480 <col:12> 'const String::rep_t' lvalue ParmVar 0x55e94be29068 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55e94be29570 <col:12>
| |     `-UnaryOperator 0x55e94be29558 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e94be29548 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55e94be290d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55e94be290d8
|   `-ParmVarDecl 0x55e94be291e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55e94be11c00 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55e94be11e48 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55e94be11c68 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55e94be11ce8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55e94be11d60 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55e94be17be0 <col:79, line:261:5>
|   |-BinaryOperator 0x55e94be17858 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55e94be177f0 <col:2, col:5> 'const char *' lvalue .data 0x55e94be11a90
|   | | `-MemberExpr 0x55e94be177c0 <col:2> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|   | |   `-CXXThisExpr 0x55e94be177b0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e94be17840 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e94be17820 <col:12> 'const char *' lvalue ParmVar 0x55e94be11c68 'data' 'const char *'
|   |-BinaryOperator 0x55e94be17920 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55e94be178b8 <col:2, col:5> 'int' lvalue .length 0x55e94be11af8
|   | | `-MemberExpr 0x55e94be17888 <col:2> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|   | |   `-CXXThisExpr 0x55e94be17878 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55e94be17908 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55e94be178e8 <col:14> 'int' lvalue ParmVar 0x55e94be11ce8 'length' 'int'
|   `-IfStmt 0x55e94be17bc8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55e94be17a40 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e94be17a28 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55e94be17a08 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55e94be179e8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55e94be17980 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55e94be11b88
|     |       | `-MemberExpr 0x55e94be17950 <col:7> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|     |       |   `-CXXThisExpr 0x55e94be17940 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55e94be179d0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e94be179b0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55e94be11d60 'memo' 'String::memo_t *'
|     `-CallExpr 0x55e94be17ba0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55e94be17b88 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55e94be17a90 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55e94be00878 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55e94be17af8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e94be11458
|         `-ImplicitCastExpr 0x55e94be17ae0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55e94be17ac0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55e94be11d60 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55e94be120f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55e94be11f18 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55e94be11f98 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55e94be12010 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55e94be11c00 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55e94be18068 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55e94be181f8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55e94be18160 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55e94be180d0 <col:2> '<bound member function type>' ->assign_memo 0x55e94be11e48
|     | `-ImplicitCastExpr 0x55e94be18198 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55e94be180c0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55e94be181b0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55e94be18100 <col:14> 'const char *' lvalue ParmVar 0x55e94be11f18 'data' 'const char *'
|     |-ImplicitCastExpr 0x55e94be181c8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55e94be18120 <col:20> 'int' lvalue ParmVar 0x55e94be11f98 'length' 'int'
|     `-ImplicitCastExpr 0x55e94be181e0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55e94be18140 <col:28> 'String::memo_t *' lvalue ParmVar 0x55e94be12010 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55e94be12288 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55e94be121c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55e94be18450 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55e94be183d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55e94be18220 <col:2> '<bound member function type>' ->assign_memo 0x55e94be11e48
|     | `-CXXThisExpr 0x55e94be18210 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55e94be18408 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55e94be182a0 <col:14, col:19> 'const char *' lvalue .data 0x55e94be11a90
|     |   `-MemberExpr 0x55e94be18270 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55e94be11c00
|     |     `-DeclRefExpr 0x55e94be18250 <col:14> 'const String' lvalue ParmVar 0x55e94be121c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55e94be18420 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55e94be18320 <col:25, col:30> 'int' lvalue .length 0x55e94be11af8
|     |   `-MemberExpr 0x55e94be182f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55e94be11c00
|     |     `-DeclRefExpr 0x55e94be182d0 <col:25> 'const String' lvalue ParmVar 0x55e94be121c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55e94be18438 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55e94be183a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55e94be11b88
|         `-MemberExpr 0x55e94be18370 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55e94be11c00
|           `-DeclRefExpr 0x55e94be18350 <col:38> 'const String' lvalue ParmVar 0x55e94be121c8 'x' 'const String &'
|-CXXMethodDecl 0x55e94be12350 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55e94be18e10 <col:31, line:278:5>
|   `-IfStmt 0x55e94be18df8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55e94be184f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55e94be184d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55e94be184a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e94be11b88
|     |     `-MemberExpr 0x55e94be18478 <col:6> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|     |       `-CXXThisExpr 0x55e94be18468 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55e94be18dd0 <col:15, line:277:2>
|       |-ParenExpr 0x55e94be189a0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55e94be18970 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55e94be18600 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55e94be185e8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55e94be185d0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55e94be18590 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e94be11458
|       |   |       `-ImplicitCastExpr 0x55e94be18578 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55e94be18548 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55e94be11b88
|       |   |           `-MemberExpr 0x55e94be18518 <col:27> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|       |   |             `-CXXThisExpr 0x55e94be18508 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55e94be18660 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55e94be18640 <col:54> 'int' 0
|       |   `-CallExpr 0x55e94be188d0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55e94be188b8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e94be18838 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55e94be18910 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e94be18748 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55e94be18928 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55e94be18778 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55e94be18940 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55e94be187b0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55e94be18958 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55e94be18820 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55e94be18808 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55e94be187d0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55e94be18cf0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55e94be18bb0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55e94be18b98 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55e94be18b10 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55e94be01cc0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55e94be18ae0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55e94be11458
|       | |   `-ImplicitCastExpr 0x55e94be18ac8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55e94be18a98 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55e94be11b88
|       | |       `-MemberExpr 0x55e94be18a68 <col:40> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|       | |         `-CXXThisExpr 0x55e94be18a58 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55e94be18cb0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55e94be18c98 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55e94be18bd8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55e94be16b30 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55e94be18cd8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55e94be18c38 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55e94be11b88
|       |       `-MemberExpr 0x55e94be18c08 <col:15> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|       |         `-CXXThisExpr 0x55e94be18bf8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55e94be18db0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55e94be18d48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55e94be11b88
|         | `-MemberExpr 0x55e94be18d18 <col:6> 'String::rep_t' lvalue ->_r 0x55e94be11c00
|         |   `-CXXThisExpr 0x55e94be18d08 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55e94be18d98 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55e94be18d78 <col:16> 'int' 0
|-CXXMethodDecl 0x55e94be125e8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55e94be12408 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e94be12488 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e94be12500 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55e94be126c0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55e94be12910 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55e94be12778 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55e94be127f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55e94be12870 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e94be12af8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55e94be129e0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55e94be12a60 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55e94be12bf8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55e94be18ee8 <col:41, line:286:5>
|   `-ReturnStmt 0x55e94be18ed8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55e94be18ea8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55e94be18e70 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55e94be18e58 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55e94be18e38 <col:46> 'int' 1
|-CXXMethodDecl 0x55e94be12e98 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55e94be12cb0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55e94be12d30 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55e94be12db0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55e94be16b30 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55e94be12f60 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55e94be16c00 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55e94be16dd0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55e94be16cb8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55e94be16d38 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55e94be16e90 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55e94be16f58 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55e94be17058 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55e94be170d0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55e94be17148 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55e94be171b0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55e94be172b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55e94be17300 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94be17290 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55e94be17270 <col:22> 'int' 14
|-CXXMethodDecl 0x55e94be17518 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55e94be17330 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55e94be173b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55e94be17430 <col:43> col:46 'int'
|-FriendDecl 0x55e94be17620 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55e94be176b0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e94beda460 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55e94beda638 prev 0x55e94beda460 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e94beda6c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e94beda6f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94bedc050 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55e94bedc000 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55e94bedbfe0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55e94beda908 'type'
|     `-SubstTemplateTypeParmType 0x55e94beda8d0 'String' sugar
|       |-TemplateTypeParmType 0x55e94bdcd0c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdcd070 'T'
|       `-RecordType 0x55e94be088a0 'String'
|         `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94bedc108 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55e94bedc0d0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55e94bedc0b0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e94bedc050 'type'
|     `-ElaboratedType 0x55e94bedc000 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55e94bedbfe0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55e94beda908 'type'
|         `-SubstTemplateTypeParmType 0x55e94beda8d0 'String' sugar
|           |-TemplateTypeParmType 0x55e94bdcd0c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e94bdcd070 'T'
|           `-RecordType 0x55e94be088a0 'String'
|             `-CXXRecord 0x55e94be08810 'String'
|-CXXMethodDecl 0x55e94bedc288 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55e94bedc198 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55e94bedc378 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e94bedc458 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55e94bedc458
|-CXXMethodDecl 0x55e94bedc728 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e94bedc630 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55e94bedc968 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e94bedc7e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e94bedc858 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e94bedcb38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e94bedca28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e94bedcaa0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e94bedcc98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e94bedcd68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55e94c0872c8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e94bedce28 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e94c0871b0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e94c087528 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55e94c087398 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55e94c087410 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e94c0876e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e94c0875f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e94c0878a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55e94c0877b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e94c087960 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e94c087a10 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e94c087c48 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55e94c087ac0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e94c087b38 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55e94c087ee8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55e94c087df0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55e94c087fb0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55e94c088000 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e94c088050 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e94c041270 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55e94bed8ec8 prev 0x55e94c041270 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e94beda3d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55e94beda380 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55e94beda360 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55e94beda210 'type'
|     `-SubstTemplateTypeParmType 0x55e94beda0a0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55e94bda2e70 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55e94bda2e18 'F'
|       `-RecordType 0x55e94bed9d00 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55e94bed9c20 'typed_array_memory'
|-FieldDecl 0x55e94c0880a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55e94c0880f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e94c088128 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|   |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e94bdda388 'T'
|   `-RecordType 0x55e94be088a0 'String'
|     `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c0881b8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55e94c088180 'String &'
|   `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|     |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e94bdda388 'T'
|     `-RecordType 0x55e94be088a0 'String'
|       `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c088248 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55e94c088210 'const String &'
|   `-QualType 0x55e94bed8f61 'const String' const
|     `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-RecordType 0x55e94be088a0 'String'
|         `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c0882d8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55e94c0882a0 'String *'
|   `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|     |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e94bdda388 'T'
|     `-RecordType 0x55e94be088a0 'String'
|       `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c088368 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55e94c088330 'const String *'
|   `-QualType 0x55e94bed8f61 'const String' const
|     `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-RecordType 0x55e94be088a0 'String'
|         `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c088fc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55e94c088f70 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55e94c088f50 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55e94c088e88 'type'
|     `-LValueReferenceType 0x55e94c088e50 'const String &'
|       `-QualType 0x55e94c088bf1 'const String' const
|         `-SubstTemplateTypeParmType 0x55e94c088bf0 'String' sugar
|           |-TemplateTypeParmType 0x55e94bdacdc0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55e94bdacd68 'T'
|           `-RecordType 0x55e94be088a0 'String'
|             `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c089028 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55e94c088210 'const String &'
|   `-QualType 0x55e94bed8f61 'const String' const
|     `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-RecordType 0x55e94be088a0 'String'
|         `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c089080 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0890e8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55e94c0882a0 'String *'
|   `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|     |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e94bdda388 'T'
|     `-RecordType 0x55e94be088a0 'String'
|       `-CXXRecord 0x55e94be08810 'String'
|-TypedefDecl 0x55e94c089150 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55e94c088330 'const String *'
|   `-QualType 0x55e94bed8f61 'const String' const
|     `-SubstTemplateTypeParmType 0x55e94bed8f60 'String' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-RecordType 0x55e94be088a0 'String'
|         `-CXXRecord 0x55e94be08810 'String'
|-EnumDecl 0x55e94c0891a8 <line:134:5> col:5
| `-EnumConstantDecl 0x55e94c0892a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e94c089280 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e94bddba68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e94bddba40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e94bddba20 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e94c089328 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e94c0895b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c0893e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e94c089480 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55e94c089848 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55e94c089730 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55e94c089b08 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55e94c0899f0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e94c089e20 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55e94c089d00 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55e94c08a130 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55e94c08a010 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55e94c08a420 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c08a268 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e94c08a2e0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e94c08a548 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e94c08a5f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c08a650 <col:30> Inherited
|-CXXMethodDecl 0x55e94c08a698 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55e94c08a748 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c08a7a0 <col:30> Inherited
|-CXXMethodDecl 0x55e94c08a868 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e94c08a918 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c08a970 <col:30> Inherited
|-CXXMethodDecl 0x55e94c08a9b8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e94c08aa68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c08aac0 <col:30> Inherited
|-CXXMethodDecl 0x55e94c08ab08 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e94c08abb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c08ac10 <col:30> Inherited
|-CXXMethodDecl 0x55e94c08ac58 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55e94c08ad08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c08ad60 <col:30> Inherited
|-CXXMethodDecl 0x55e94c08ad88 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e94c08ae38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e94c08aee8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e94c08b0a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c08af98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e94c08b010 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e94c08b1f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e94c08b168 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c08b3a8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55e94c08b2b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e94c08b460 <col:20>
| `-OptimizeNoneAttr 0x55e94c08b4b8 <col:30>
|-CXXMethodDecl 0x55e94c08b5d8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55e94c08b4e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e94c08b690 <col:20>
| `-OptimizeNoneAttr 0x55e94c08b6e8 <col:30>
|-CXXMethodDecl 0x55e94c08b7a0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e94c08b710 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c08b8e8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e94c08b858 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c08ba18 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55e94c08bb18 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55e94c08bbe8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55e94c08bcb8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55e94c08bdf8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e94c08bd68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c08bf40 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e94c08beb0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c08c088 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e94c08bff8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e94c08c140 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e94c08c240 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e94c08c1b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e94c08c2f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e94c08c3b8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55e94c08c4b8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55e94c08c638 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e94c08c578 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55e94c08cdf8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e94c08c6f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55e94c08cd58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55e94c08cc58 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55e94c08ced8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e94c08d028 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55e94c08cf98 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e94c08d0e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e94c08d328 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c08d1a0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e94c08d218 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55e94c08d4b8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55e94c08d3f8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e94c08d6c8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55e94c08d580 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55e94c08d5f8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55e94c08d788 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e94c08d9e8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55e94c08d8f0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55e94c08dab8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55e94c08dab8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94bfbed28 prev 0x55e94c003d18 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94bfbee20 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55e94bfbeeb0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55e94bfbefe8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55e94bfbeee8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e94bfc0410 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e94bfc03f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e94bfbff88 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e94bfc04a0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e94bfc0460 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55e94bfbeee8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e94bfbfff0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e94bfc0520 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e94bfc04e0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55e94bfc0050 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e94bfc0560 <col:54> 'bool' false
| `-CompoundStmt 0x55e94bfc0668 <col:61, line:38:5>
|   `-BinaryOperator 0x55e94bfc0648 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55e94bfc05e0 <col:9> 'const Element *' lvalue ->_context 0x55e94bfbff28
|     | `-CXXThisExpr 0x55e94bfc05d0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55e94bfc0630 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55e94bfc0610 <col:20> 'int' 0
|-CXXConstructorDecl 0x55e94bfbf1f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94bfbf0a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55e94bfbf120 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55e94bfc0448 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55e94bfc0428 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55e94bfbff28 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55e94bfc06c0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e94bfc0680 <col:20> 'const Element *' lvalue ParmVar 0x55e94bfbf0a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55e94bfbff88 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55e94bfc0740 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55e94bfc0700 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55e94bfbf120 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55e94bfbfff0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55e94bfc07c0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55e94bfc0780 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55e94bfc0050 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55e94bfc0800 <col:73> 'bool' false
| `-CompoundStmt 0x55e94bfc0878 <col:80, line:46:5>
|-CXXMethodDecl 0x55e94bfbf328 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55e94bfc08f0 <col:36, line:51:5>
|   `-ReturnStmt 0x55e94bfc08e0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55e94bfc08c8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55e94bfc0898 <col:16> 'const Element *const' lvalue ->_context 0x55e94bfbff28
|         `-CXXThisExpr 0x55e94bfc0888 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e94bfbf418 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55e94bfc0970 <col:32, line:57:5>
|   `-ReturnStmt 0x55e94bfc0960 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55e94bfc0948 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55e94bfc0918 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55e94bfbff88
|         `-CXXThisExpr 0x55e94bfc0908 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55e94bfbf4d8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55e94bfbf660 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e94bfbf590 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55e94bfbf7b0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e94bfbf720 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e94bfbf900 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55e94bfbf870 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55e94bfbfb08 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55e94bfbf9b8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55e94bfbfa30 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55e94bfbfe38 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55e94bfbfbc8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55e94bfbfc48 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55e94bfbfd10 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55e94bfbfef0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55e94bfbff28 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55e94bfbff88 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55e94bfbfff0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55e94bfc0050 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55e94bfc00a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e94bfc00a0
| `-ParmVarDecl 0x55e94bfc01b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55e94bfc0258 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55e94bfc0258
| `-ParmVarDecl 0x55e94bfc0368 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55e94c10ed58 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e94c0cb6a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55e94c0cb878 prev 0x55e94c0cb6a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55e94c0cb908 <col:46, col:52> col:46 public
|-TypedefDecl 0x55e94c0cb930 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0cd500 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55e94c0cd4b0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55e94c0cbde0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55e94c0cbce0 'type'
|     `-TemplateSpecializationType 0x55e94c0cbc70 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55e94c0cbb50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55e94c0cbb30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55e94c0cbb10 <col:24> 'unsigned long' 4
|       `-RecordType 0x55e94c0cbc50 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55e94c0cbb70 'char_array'
|-TypedefDecl 0x55e94c0cd5b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55e94c0cd580 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55e94c0cd560 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55e94c0cd500 'type'
|     `-ElaboratedType 0x55e94c0cd4b0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55e94c0cbde0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55e94c0cbce0 'type'
|         `-TemplateSpecializationType 0x55e94c0cbc70 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55e94c0cbb50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55e94c0cbb30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55e94c0cbb10 <col:24> 'unsigned long' 4
|           `-RecordType 0x55e94c0cbc50 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55e94c0cbb70 'char_array'
|-CXXMethodDecl 0x55e94c0cd738 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55e94c0cd648 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55e94c0cd828 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55e94c0cd908 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55e94c0cdbd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e94c0cdae0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55e94c0cde18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e94c0cdc90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e94c0cdd08 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e94c0cdfe8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e94c0cded8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e94c0cdf50 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e94c0ce148 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e94c0ce218 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55e94c0ce468 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e94c0ce2d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e94c0ce350 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e94c0ce6c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55e94c0ce538 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55e94c0ce5b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e94c0ce888 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e94c0ce798 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e94c0cea48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55e94c0ce950 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e94c0ceb00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e94c0cebb0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55e94c0cede8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55e94c0cec60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55e94c0cecd8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55e94c0d63e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55e94c0d62f0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55e94c0d64b0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55e94c0d6500 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55e94c0d6550 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e94c0ca0a8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55e94c0ca2b8 prev 0x55e94c0ca0a8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55e94c0cb610 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55e94c0cb5c0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55e94c0cb5a0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55e94c0cb450 'type'
|     `-SubstTemplateTypeParmType 0x55e94c0cb270 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55e94bda26f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bda2698 'T'
|       `-RecordType 0x55e94c0cadc0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55e94c0cacd8 'sized_array_memory'
|-FieldDecl 0x55e94c0d65a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55e94c0d65f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55e94c0d6628 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|   |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55e94bdda388 'T'
|   `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d66b8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55e94c0d6680 'int &'
|   `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|     |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e94bdda388 'T'
|     `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d6778 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55e94c0d6740 'const int &'
|   `-QualType 0x55e94c0ca351 'const int' const
|     `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d6808 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55e94c0d67d0 'int *'
|   `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|     |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e94bdda388 'T'
|     `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d6898 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55e94c0d6860 'const int *'
|   `-QualType 0x55e94c0ca351 'const int' const
|     `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d7480 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55e94c0d7430 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55e94c0d7410 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55e94c0d73a0 'type'
|     `-SubstTemplateTypeParmType 0x55e94c0d7160 'int' sugar
|       |-TemplateTypeParmType 0x55e94bdad4f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdad4a0 'T'
|       `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d74e8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55e94c0d6740 'const int &'
|   `-QualType 0x55e94c0ca351 'const int' const
|     `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d7540 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d75a8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55e94c0d67d0 'int *'
|   `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|     |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55e94bdda388 'T'
|     `-BuiltinType 0x55e94badd580 'int'
|-TypedefDecl 0x55e94c0d7610 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55e94c0d6860 'const int *'
|   `-QualType 0x55e94c0ca351 'const int' const
|     `-SubstTemplateTypeParmType 0x55e94c0ca350 'int' sugar
|       |-TemplateTypeParmType 0x55e94bdda3e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55e94bdda388 'T'
|       `-BuiltinType 0x55e94badd580 'int'
|-EnumDecl 0x55e94c0d7668 <line:134:5> col:5
| `-EnumConstantDecl 0x55e94c0d7760 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55e94c0d7740 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55e94bddba68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55e94bddba40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55e94bddba20 <col:40> 'int' 1
|-CXXConstructorDecl 0x55e94c0d77e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55e94c0d7a38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c0d78a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e94c0d7940 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55e94c0d7cf8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55e94c0d7be0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55e94c0d7fb8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55e94c0d7ea0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e94c0d8300 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55e94c0d81e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55e94c0d8610 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55e94c0d84f0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55e94c0d8900 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c0d8748 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e94c0d87c0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e94c0d8a28 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e94c0d8b08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c0d8b60 <col:30> Inherited
|-CXXMethodDecl 0x55e94c0d8ba8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55e94c0d8c58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c0d8cb0 <col:30> Inherited
|-CXXMethodDecl 0x55e94c0d8d78 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e94c0d8e28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c0d8e80 <col:30> Inherited
|-CXXMethodDecl 0x55e94c0d8ec8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e94c0d8f78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c0d8fd0 <col:30> Inherited
|-CXXMethodDecl 0x55e94c0d9018 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e94c0d90c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c0d9120 <col:30> Inherited
|-CXXMethodDecl 0x55e94c0d9168 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55e94c0d9218 <col:20> Inherited
| `-OptimizeNoneAttr 0x55e94c0d9270 <col:30> Inherited
|-CXXMethodDecl 0x55e94c0d9298 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e94c0d9348 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55e94c0d93f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55e94c0d95b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c0d94a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55e94c0d9520 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e94c0d9708 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55e94c0d9678 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c0d98b8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55e94c0d97c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e94c0d9970 <col:20>
| `-OptimizeNoneAttr 0x55e94c0d99c8 <col:30>
|-CXXMethodDecl 0x55e94c0d9ae8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55e94c0d99f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55e94c0d9ba0 <col:20>
| `-OptimizeNoneAttr 0x55e94c0d9bf8 <col:30>
|-CXXMethodDecl 0x55e94c0d9cb0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e94c0d9c20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c0d9df8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e94c0d9d68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c0d9f28 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55e94c0da058 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55e94c0da128 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55e94c0da1f8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55e94c0da338 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55e94c0da2a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c0da480 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55e94c0da3f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55e94c0da5c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55e94c0da538 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e94c0da680 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55e94c0da780 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55e94c0da6f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55e94c0da838 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55e94c0da8f8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55e94c0da9f8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55e94c0dab78 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e94c0daab8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55e94c0db338 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55e94c0dac30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55e94c0db298 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55e94c0db198 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55e94c0db418 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55e94c0db568 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55e94c0db4d8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e94c0db620 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55e94c0db868 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55e94c0db6e0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e94c0db758 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55e94c0dba28 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55e94c0db938 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e94c0dbc78 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55e94c0dbaf0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55e94c0dbb68 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55e94c0dbd38 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55e94c0dbf98 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55e94c0dbea0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55e94c0dc068 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c0c8218 prev 0x55e94c0a9ac8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e94c0c8310 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55e94c0c8400 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55e94c0ede80 <col:16, line:828:9>
|-CXXDestructorDecl 0x55e94c0c84f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55e94c0ede90 <col:25, line:830:9>
|-CXXMethodDecl 0x55e94c0c85f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55e94c0c86a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55e94c0c8748 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e94c0c8748
| `-ParmVarDecl 0x55e94c0c8858 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55e94c0c9018 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e94c0c9018
  `-ParmVarDecl 0x55e94c0c9128 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94bfc5698 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55e94c0a9a38 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55e94c0a9ac8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55e94c0a9b80 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55e94c0a9c88 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55e94c0a9bb8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e94c0dd628 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e94c0dd608 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e94c0a9fa8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c0a9e20 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55e94c0a9e98 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e94c0dd660 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e94c0dd640 <col:59> 'int' 0
|-CXXConstructorDecl 0x55e94c0aa180 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c0aa070 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55e94c0aa0e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e94c0dd698 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e94c0dd678 <col:55> 'int' 0
|-CXXConstructorDecl 0x55e94c0aa538 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55e94c0aa320 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55e94c0aa398 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55e94c0aa410 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55e94c0dd6d0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55e94c0dd6b0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55e94c0aa6f8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55e94c0aa638 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55e94c0aa7f0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55e94c0aa9d8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55e94c0aa8e0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55e94c0aaac8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55e94c0dda80 <col:24, line:291:5>
|   `-ReturnStmt 0x55e94c0dda70 <line:290:9, col:79>
|     `-BinaryOperator 0x55e94c0dda50 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55e94c0dd928 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55e94c0dd880 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55e94c0dd860 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55e94c0dd758 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55e94c0dd740 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55e94c0dd728 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55e94c0dd6f8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55e94c0ca040
|       | |   |       `-CXXThisExpr 0x55e94c0dd6e8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55e94c0dd848 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55e94c0dd830 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55e94c0dd7f8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55e94c0dd7c8 <col:28, col:35> '<bound member function type>' ->size 0x55e94c08ad88
|       | |           `-ImplicitCastExpr 0x55e94c0dd818 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55e94c0dd7b0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55e94c0dd780 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55e94c0ca040
|       | |                 `-CXXThisExpr 0x55e94c0dd770 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55e94c0dd910 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55e94c0dd8f8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55e94c0dd8e0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55e94c0dd8b0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55e94c0dc1b0
|       |         `-CXXThisExpr 0x55e94c0dd8a0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55e94c0dda30 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55e94c0dda18 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e94c0dda00 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e94c0dd9c0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e94c0dd9a8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e94c0dd958 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e94c0dc260
|         |     |   `-CXXThisExpr 0x55e94c0dd948 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e94c0dd988 <col:73> 'int' 0
|         `-IntegerLiteral 0x55e94c0dd9e0 <col:79> 'int' 0
|-CXXMethodDecl 0x55e94c0aab88 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55e94c0ddc58 <col:32, line:296:5>
|   `-ReturnStmt 0x55e94c0ddc48 <line:295:9, col:49>
|     `-BinaryOperator 0x55e94c0ddc28 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55e94c0ddb08 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55e94c0ddaf0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55e94c0ddad8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55e94c0ddaa8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55e94c0dc1b0
|       |       `-CXXThisExpr 0x55e94c0dda98 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55e94c0ddc08 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55e94c0ddbf0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55e94c0ddbd8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55e94c0ddb98 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55e94c0ddb80 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55e94c0ddb30 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55e94c0dc260
|         |     |   `-CXXThisExpr 0x55e94c0ddb20 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55e94c0ddb60 <col:43> 'int' 0
|         `-IntegerLiteral 0x55e94c0ddbb8 <col:49> 'int' 0
|-CXXMethodDecl 0x55e94c0aac78 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55e94c0dde68 <col:19, line:306:5>
|   |-IfStmt 0x55e94c0ddd88 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55e94c0ddcc8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55e94c0ddcb0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55e94c0ddc80 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e94c0ca040
|   | |     `-CXXThisExpr 0x55e94c0ddc70 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55e94c0ddd68 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55e94c0ddd38 <col:13, col:20> '<bound member function type>' ->clear 0x55e94c08d788
|   |     `-ImplicitCastExpr 0x55e94c0ddd20 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55e94c0ddcf0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55e94c0ca040
|   |         `-CXXThisExpr 0x55e94c0ddce0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55e94c0dde10 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55e94c0ddde0 <col:9, col:16> '<bound member function type>' .clear 0x55e94c0dbd38
|   |   `-MemberExpr 0x55e94c0dddb0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55e94c0dc150
|   |     `-CXXThisExpr 0x55e94c0ddda0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55e94c0dde58 <line:305:9, col:17>
|     `-UnaryOperator 0x55e94c0dde40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94c0dde30 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e94c0aaef8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55e94c0aae00 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55e94c0ab078 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55e94c0aafb0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55e94c0ab3f8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55e94c0ab120 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55e94c0ab358 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55e94c0ab1c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55e94c0ab240 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55e94c0de188 <col:67, line:327:5>
|     |-WhileStmt 0x55e94c0de138 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55e94c0ddf50 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55e94c0dded0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55e94bffc1e8 0x55e94be455a8 0x55e94be45280 0x55e94be35a50 0x55e94be35700 0x55e94be34ff0 0x55e94be07960 0x55e94bd94e30
|     | | |-DeclRefExpr 0x55e94c0dde90 <col:16> 'Iter' lvalue ParmVar 0x55e94c0ab1c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55e94c0ddeb0 <col:25> 'Iter' lvalue ParmVar 0x55e94c0ab240 'end' 'Iter'
|     | `-CompoundStmt 0x55e94c0de118 <col:30, line:325:9>
|     |   |-CallExpr 0x55e94c0de0b8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55e94c0ddf98 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55e94c0de088 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55e94c0de018 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|     |   |   `-DeclRefExpr 0x55e94c0ddff8 <col:24> 'Iter' lvalue ParmVar 0x55e94c0ab1c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55e94c0de100 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55e94c0de0e0 <col:15> 'Iter' lvalue ParmVar 0x55e94c0ab1c8 'begin' 'Iter'
|     `-ReturnStmt 0x55e94c0de178 <line:326:9, col:17>
|       `-UnaryOperator 0x55e94c0de160 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0de150 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e94c0ab500 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55e94c0ab470 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55e94c0ab648 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55e94c0ab5b8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55e94c0ab710 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55e94c0dfbd0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55e94c0dfb70 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55e94c0de1b8 <col:9> '<bound member function type>' ->reset_from 0x55e94c0dc5d8
|   | | `-CXXThisExpr 0x55e94c0de1a8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55e94c0dfb50 <col:20> 'int' 0
|   `-ReturnStmt 0x55e94c0dfbc0 <line:352:9, col:17>
|     `-UnaryOperator 0x55e94c0dfba8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94c0dfb98 <col:17> 'Args *' this
|-VarDecl 0x55e94c0ab7c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e94c0ab830 <col:38> 'int' 1
|-VarDecl 0x55e94c0ab8c0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e94c0ab928 <col:39> 'int' 2
|-VarDecl 0x55e94c0ab9b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e94c0aba20 <col:39> 'int' 4
|-VarDecl 0x55e94c0abab0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55e94c0abb18 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55e94c0abe98 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55e94c0abb90 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55e94c0abdf8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55e94c0abc40 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55e94c0abce8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55e94c0dfd28 <col:43, line:371:5>
| |   `-ReturnStmt 0x55e94c0dfd18 <line:370:9, col:34>
| |     `-CallExpr 0x55e94c0dfce0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55e94c0dfc00 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55e94c0dfc80 <col:21> 'const char *' lvalue ParmVar 0x55e94c0abc40 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55e94c0dfca0 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55e94c0dfcc0 <col:33> 'T' lvalue ParmVar 0x55e94c0abce8 'x' 'T &'
| `-CXXMethodDecl 0x55e94c10f1f8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55e94c10f018 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55e94c10f0e8 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55e94c0ac1c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55e94c0abf00 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0ac128 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e94c0abfb0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ac058 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0dfe78 <col:45, line:375:5>
|     `-ReturnStmt 0x55e94c0dfe68 <line:374:9, col:42>
|       `-CallExpr 0x55e94c0dfe30 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0dfd50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0dfdd0 <col:21> 'const char *' lvalue ParmVar 0x55e94c0abfb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0dfdf0 <col:30> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e94c0dfe10 <col:41> 'T' lvalue ParmVar 0x55e94c0ac058 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0ac4f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55e94c0ac230 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0ac458 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e94c0ac2e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ac388 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0dffc8 <col:45, line:379:5>
|     `-ReturnStmt 0x55e94c0dffb8 <line:378:9, col:43>
|       `-CallExpr 0x55e94c0dff80 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0dfea0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0dff20 <col:21> 'const char *' lvalue ParmVar 0x55e94c0ac2e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0dff40 <col:30> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int'
|         `-DeclRefExpr 0x55e94c0dff60 <col:42> 'T' lvalue ParmVar 0x55e94c0ac388 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0ac828 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55e94c0ac560 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0ac788 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55e94c0ac610 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ac6b8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e01c8 <col:46, line:383:5>
|     `-ReturnStmt 0x55e94c0e01b8 <line:382:9, col:55>
|       `-CallExpr 0x55e94c0e0180 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0dfff0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e0070 <col:21> 'const char *' lvalue ParmVar 0x55e94c0ac610 'keyword' 'const char *'
|         |-BinaryOperator 0x55e94c0e0140 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e94c0e00f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e94c0e00d0 <col:30> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e94c0e0128 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e94c0e0108 <col:42> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e94c0e0160 <col:54> 'T' lvalue ParmVar 0x55e94c0ac6b8 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0acc28 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55e94c0ac890 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0acb88 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55e94c0ac940 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ac9c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0aca68 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e0308 <col:54, line:388:5>
|     |-CallExpr 0x55e94c0e0290 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e01e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e94c0e0220 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e0230 <col:30> 'const char *' lvalue ParmVar 0x55e94c0ac940 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e94c0e0250 <col:39> 'int' lvalue ParmVar 0x55e94c0ac9c0 'flags' 'int'
|     | `-DeclRefExpr 0x55e94c0e0270 <col:46> 'T' lvalue ParmVar 0x55e94c0aca68 'x' 'T &'
|     `-ReturnStmt 0x55e94c0e02f8 <line:387:9, col:17>
|       `-UnaryOperator 0x55e94c0e02e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e02d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0ad0d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55e94c0acc98 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e94c0acd18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e94c0ad038 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0acdd8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ace78 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55e94c0acf18 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e94c0e0478 <col:74, line:403:5>
|     `-ReturnStmt 0x55e94c0e0468 <line:402:9, col:56>
|       `-CallExpr 0x55e94c0e0428 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e0338 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e03a8 <col:28> 'const char *' lvalue ParmVar 0x55e94c0acdd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e03c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e94c0e03e8 <col:40> 'T' lvalue ParmVar 0x55e94c0ace78 'x' 'T &'
|         `-DeclRefExpr 0x55e94c0e0408 <col:43> 'const V' lvalue ParmVar 0x55e94c0acf18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e94c0ad548 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e94c0ad148 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e94c0ad1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e94c0ad4a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0ad288 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ad328 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55e94c0ad3c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e94c0e05e0 <col:76, line:407:5>
|     `-ReturnStmt 0x55e94c0e05d0 <line:406:9, col:65>
|       `-CallExpr 0x55e94c0e0590 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e04a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e0510 <col:28> 'const char *' lvalue ParmVar 0x55e94c0ad288 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e0530 <col:37> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int'
|         |-DeclRefExpr 0x55e94c0e0550 <col:49> 'T' lvalue ParmVar 0x55e94c0ad328 'x' 'T &'
|         `-DeclRefExpr 0x55e94c0e0570 <col:52> 'const V' lvalue ParmVar 0x55e94c0ad3c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e94c0ada98 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55e94c0ad5b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e94c0ad638 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e94c0ad9f8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0ad6f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ad778 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0ad818 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55e94c0ad8b8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e94c0e0748 <col:85, line:412:5>
|     |-CallExpr 0x55e94c0e06c8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e05f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e94c0e0638 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e0648 <col:37> 'const char *' lvalue ParmVar 0x55e94c0ad6f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e94c0e0668 <col:46> 'int' lvalue ParmVar 0x55e94c0ad778 'flags' 'int'
|     | |-DeclRefExpr 0x55e94c0e0688 <col:53> 'T' lvalue ParmVar 0x55e94c0ad818 'x' 'T &'
|     | `-DeclRefExpr 0x55e94c0e06a8 <col:56> 'const V' lvalue ParmVar 0x55e94c0ad8b8 'default_value' 'const V &'
|     `-ReturnStmt 0x55e94c0e0738 <line:411:9, col:17>
|       `-UnaryOperator 0x55e94c0e0720 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e0710 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0adf28 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55e94c0adb10 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0adb88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0ade88 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0adc48 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0adcc0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0add68 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e08c8 <col:53, line:425:5>
|     `-ReturnStmt 0x55e94c0e08b8 <line:424:9, col:42>
|       `-CallExpr 0x55e94c0e0878 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e0778 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e07f8 <col:21> 'const char *' lvalue ParmVar 0x55e94c0adc48 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e0818 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e94c0e0838 <col:33> 'P' lvalue ParmVar 0x55e94c0adcc0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e0858 <col:41> 'T' lvalue ParmVar 0x55e94c0add68 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0ae378 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55e94c0adf98 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0ae018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0ae2d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0ae0d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ae150 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0ae1f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e0a40 <col:55, line:429:5>
|     `-ReturnStmt 0x55e94c0e0a30 <line:428:9, col:50>
|       `-CallExpr 0x55e94c0e09f0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e08f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e0970 <col:21> 'const char *' lvalue ParmVar 0x55e94c0ae0d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e0990 <col:30> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e94c0e09b0 <col:41> 'P' lvalue ParmVar 0x55e94c0ae150 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e09d0 <col:49> 'T' lvalue ParmVar 0x55e94c0ae1f8 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0ae7c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55e94c0ae3e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0ae468 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0ae728 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0ae528 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ae5a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0ae648 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e0bb8 <col:55, line:433:5>
|     `-ReturnStmt 0x55e94c0e0ba8 <line:432:9, col:51>
|       `-CallExpr 0x55e94c0e0b68 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e0a68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e0ae8 <col:21> 'const char *' lvalue ParmVar 0x55e94c0ae528 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e0b08 <col:30> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int'
|         |-DeclRefExpr 0x55e94c0e0b28 <col:42> 'P' lvalue ParmVar 0x55e94c0ae5a0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e0b48 <col:50> 'T' lvalue ParmVar 0x55e94c0ae648 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0aec18 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55e94c0ae838 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0ae8b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0aeb78 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0ae978 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ae9f0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0aea98 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e0de0 <col:56, line:437:5>
|     `-ReturnStmt 0x55e94c0e0dd0 <line:436:9, col:63>
|       `-CallExpr 0x55e94c0e0d90 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e0be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e0c60 <col:21> 'const char *' lvalue ParmVar 0x55e94c0ae978 'keyword' 'const char *'
|         |-BinaryOperator 0x55e94c0e0d30 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e94c0e0ce0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e94c0e0cc0 <col:30> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e94c0e0d18 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e94c0e0cf8 <col:42> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e94c0e0d50 <col:54> 'P' lvalue ParmVar 0x55e94c0ae9f0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e0d70 <col:62> 'T' lvalue ParmVar 0x55e94c0aea98 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0af148 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55e94c0aec88 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0aed08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0af0a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e94c0aedc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0aee48 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0aeec0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0aef68 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e0f48 <col:64, line:442:5>
|     |-CallExpr 0x55e94c0e0ec8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e0df8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e94c0e0e38 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e0e48 <col:30> 'const char *' lvalue ParmVar 0x55e94c0aedc8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e94c0e0e68 <col:39> 'int' lvalue ParmVar 0x55e94c0aee48 'flags' 'int'
|     | |-DeclRefExpr 0x55e94c0e0e88 <col:46> 'P' lvalue ParmVar 0x55e94c0aeec0 'parser' 'P'
|     | `-DeclRefExpr 0x55e94c0e0ea8 <col:54> 'T' lvalue ParmVar 0x55e94c0aef68 'x' 'T &'
|     `-ReturnStmt 0x55e94c0e0f38 <line:441:9, col:17>
|       `-UnaryOperator 0x55e94c0e0f20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e0f10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0af748 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55e94c0af1c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0af238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e94c0af2b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e94c0af6a8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0af380 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0af3f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0af498 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55e94c0af568 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e94c0e10e0 <col:84, line:458:5>
|     `-ReturnStmt 0x55e94c0e10d0 <line:457:9, col:64>
|       `-CallExpr 0x55e94c0e1088 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e0f78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e0fe8 <col:28> 'const char *' lvalue ParmVar 0x55e94c0af380 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e1008 <col:37> 'int' 0
|         |-DeclRefExpr 0x55e94c0e1028 <col:40> 'P' lvalue ParmVar 0x55e94c0af3f8 'parser' 'P'
|         |-DeclRefExpr 0x55e94c0e1048 <col:48> 'T' lvalue ParmVar 0x55e94c0af498 'x' 'T &'
|         `-DeclRefExpr 0x55e94c0e1068 <col:51> 'const V' lvalue ParmVar 0x55e94c0af568 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e94c0afcc8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55e94c0af7c0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0af838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e94c0af8b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e94c0afc28 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0af980 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0af9f8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0afa98 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55e94c0afb38 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e94c0e1270 <col:86, line:462:5>
|     `-ReturnStmt 0x55e94c0e1260 <line:461:9, col:73>
|       `-CallExpr 0x55e94c0e1218 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e1108 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e1178 <col:28> 'const char *' lvalue ParmVar 0x55e94c0af980 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e1198 <col:37> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int'
|         |-DeclRefExpr 0x55e94c0e11b8 <col:49> 'P' lvalue ParmVar 0x55e94c0af9f8 'parser' 'P'
|         |-DeclRefExpr 0x55e94c0e11d8 <col:57> 'T' lvalue ParmVar 0x55e94c0afa98 'x' 'T &'
|         `-DeclRefExpr 0x55e94c0e11f8 <col:60> 'const V' lvalue ParmVar 0x55e94c0afb38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55e94c0b0328 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55e94c0afd40 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0afdb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55e94c0afe38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e94c0b0288 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0aff00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0aff80 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0afff8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b0098 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55e94c0b0138 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55e94c0e1400 <col:95, line:467:5>
|     |-CallExpr 0x55e94c0e1378 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e1288 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55e94c0e12c8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e12d8 <col:37> 'const char *' lvalue ParmVar 0x55e94c0aff00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e94c0e12f8 <col:46> 'int' lvalue ParmVar 0x55e94c0aff80 'flags' 'int'
|     | |-DeclRefExpr 0x55e94c0e1318 <col:53> 'P' lvalue ParmVar 0x55e94c0afff8 'parser' 'P'
|     | |-DeclRefExpr 0x55e94c0e1338 <col:61> 'T' lvalue ParmVar 0x55e94c0b0098 'x' 'T &'
|     | `-DeclRefExpr 0x55e94c0e1358 <col:64> 'const V' lvalue ParmVar 0x55e94c0b0138 'default_value' 'const V &'
|     `-ReturnStmt 0x55e94c0e13f0 <line:466:9, col:17>
|       `-UnaryOperator 0x55e94c0e13d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e13c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0b0908 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55e94c0b03a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b0428 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e94c0b04a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e94c0b0868 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e94c0b0570 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b05e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b0688 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e94c0b0728 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e94c0e15a8 <col:63, line:481:5>
|     `-ReturnStmt 0x55e94c0e1598 <line:480:9, col:47>
|       `-CallExpr 0x55e94c0e1550 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e1430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e14b0 <col:21> 'const char *' lvalue ParmVar 0x55e94c0b0570 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e14d0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55e94c0e14f0 <col:33> 'P' lvalue ParmVar 0x55e94c0b05e8 'parser' 'P'
|         |-DeclRefExpr 0x55e94c0e1510 <col:41> 'T1' lvalue ParmVar 0x55e94c0b0688 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e94c0e1530 <col:45> 'T2' lvalue ParmVar 0x55e94c0b0728 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e94c0b0e88 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55e94c0b0980 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b09f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e94c0b0a78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e94c0b0de8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e94c0b0b40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b0bb8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b0c58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e94c0b0cf8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e94c0e1748 <col:65, line:485:5>
|     `-ReturnStmt 0x55e94c0e1738 <line:484:9, col:55>
|       `-CallExpr 0x55e94c0e16f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e15d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e1650 <col:21> 'const char *' lvalue ParmVar 0x55e94c0b0b40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e1670 <col:30> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55e94c0e1690 <col:41> 'P' lvalue ParmVar 0x55e94c0b0bb8 'parser' 'P'
|         |-DeclRefExpr 0x55e94c0e16b0 <col:49> 'T1' lvalue ParmVar 0x55e94c0b0c58 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e94c0e16d0 <col:53> 'T2' lvalue ParmVar 0x55e94c0b0cf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e94c0b1408 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55e94c0b0f00 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b0f78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e94c0b0ff8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e94c0b1368 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e94c0b10c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b1138 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b11d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e94c0b1278 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e94c0e18e8 <col:65, line:489:5>
|     `-ReturnStmt 0x55e94c0e18d8 <line:488:9, col:56>
|       `-CallExpr 0x55e94c0e1890 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e1770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e17f0 <col:21> 'const char *' lvalue ParmVar 0x55e94c0b10c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e1810 <col:30> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int'
|         |-DeclRefExpr 0x55e94c0e1830 <col:42> 'P' lvalue ParmVar 0x55e94c0b1138 'parser' 'P'
|         |-DeclRefExpr 0x55e94c0e1850 <col:50> 'T1' lvalue ParmVar 0x55e94c0b11d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e94c0e1870 <col:54> 'T2' lvalue ParmVar 0x55e94c0b1278 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e94c0b1988 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55e94c0b1480 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b14f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e94c0b1578 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e94c0b18e8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e94c0b1640 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b16b8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b1758 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e94c0b17f8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e94c0e1b38 <col:66, line:493:5>
|     `-ReturnStmt 0x55e94c0e1b28 <line:492:9, col:68>
|       `-CallExpr 0x55e94c0e1ae0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e1910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e1990 <col:21> 'const char *' lvalue ParmVar 0x55e94c0b1640 'keyword' 'const char *'
|         |-BinaryOperator 0x55e94c0e1a60 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55e94c0e1a10 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e94c0e19f0 <col:30> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e94c0e1a48 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e94c0e1a28 <col:42> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55e94c0e1a80 <col:54> 'P' lvalue ParmVar 0x55e94c0b16b8 'parser' 'P'
|         |-DeclRefExpr 0x55e94c0e1aa0 <col:62> 'T1' lvalue ParmVar 0x55e94c0b1758 'x1' 'T1 &'
|         `-DeclRefExpr 0x55e94c0e1ac0 <col:66> 'T2' lvalue ParmVar 0x55e94c0b17f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55e94c0b7a98 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55e94c0b74b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b7528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e94c0b75a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e94c0b79f8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e94c0b7670 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b76f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0b7768 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b7808 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55e94c0b78a8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55e94c0e1cc8 <col:74, line:498:5>
|     |-CallExpr 0x55e94c0e1c40 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e1b50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55e94c0e1b90 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e1ba0 <col:30> 'const char *' lvalue ParmVar 0x55e94c0b7670 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e94c0e1bc0 <col:39> 'int' lvalue ParmVar 0x55e94c0b76f0 'flags' 'int'
|     | |-DeclRefExpr 0x55e94c0e1be0 <col:46> 'P' lvalue ParmVar 0x55e94c0b7768 'parser' 'P'
|     | |-DeclRefExpr 0x55e94c0e1c00 <col:54> 'T1' lvalue ParmVar 0x55e94c0b7808 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55e94c0e1c20 <col:58> 'T2' lvalue ParmVar 0x55e94c0b78a8 'x2' 'T2 &'
|     `-ReturnStmt 0x55e94c0e1cb8 <line:497:9, col:17>
|       `-UnaryOperator 0x55e94c0e1ca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e1c90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0b7df8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55e94c0b7b18 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0b7d58 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e94c0b7bd0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b7c48 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0e1e10 <col:52, line:509:5>
|     `-ReturnStmt 0x55e94c0e1e00 <line:508:9, col:44>
|       `-CallExpr 0x55e94c0e1dc8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e1cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e1d68 <col:26> 'const char *' lvalue ParmVar 0x55e94c0b7bd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e1d88 <col:35> 'int' 0
|         `-DeclRefExpr 0x55e94c0e1da8 <col:38> 'P' lvalue ParmVar 0x55e94c0b7c48 'parser' 'P'
|-FunctionTemplateDecl 0x55e94c0b80f8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55e94c0b7e60 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0b8058 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e94c0b7f10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b7f88 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0e1f50 <col:54, line:513:5>
|     `-ReturnStmt 0x55e94c0e1f40 <line:512:9, col:52>
|       `-CallExpr 0x55e94c0e1f08 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e1e38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e1ea8 <col:26> 'const char *' lvalue ParmVar 0x55e94c0b7f10 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e1ec8 <col:35> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55e94c0e1ee8 <col:46> 'P' lvalue ParmVar 0x55e94c0b7f88 'parser' 'P'
|-FunctionTemplateDecl 0x55e94c0b83f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55e94c0b8160 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0b8358 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e94c0b8210 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b8288 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0e2090 <col:54, line:517:5>
|     `-ReturnStmt 0x55e94c0e2080 <line:516:9, col:53>
|       `-CallExpr 0x55e94c0e2048 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e1f78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e1fe8 <col:26> 'const char *' lvalue ParmVar 0x55e94c0b8210 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e2008 <col:35> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int'
|         `-DeclRefExpr 0x55e94c0e2028 <col:47> 'P' lvalue ParmVar 0x55e94c0b8288 'parser' 'P'
|-FunctionTemplateDecl 0x55e94c0b86f8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e94c0b8460 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0b8658 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e94c0b8510 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b8588 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0e2280 <col:55, line:521:5>
|     `-ReturnStmt 0x55e94c0e2270 <line:520:9, col:65>
|       `-CallExpr 0x55e94c0e2238 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e20b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e2128 <col:26> 'const char *' lvalue ParmVar 0x55e94c0b8510 'keyword' 'const char *'
|         |-BinaryOperator 0x55e94c0e21f8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55e94c0e21a8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55e94c0e2188 <col:35> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55e94c0e21e0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55e94c0e21c0 <col:47> 'const int' lvalue Var 0x55e94c0ab8c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55e94c0e2218 <col:59> 'P' lvalue ParmVar 0x55e94c0b8588 'parser' 'P'
|-FunctionTemplateDecl 0x55e94c0b8ac8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55e94c0b8760 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0b8a28 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e94c0b8810 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b8890 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0b8908 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0e23c0 <col:63, line:526:5>
|     |-CallExpr 0x55e94c0e2348 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e2298 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55e94c0e22d8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e22e8 <col:35> 'const char *' lvalue ParmVar 0x55e94c0b8810 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55e94c0e2308 <col:44> 'int' lvalue ParmVar 0x55e94c0b8890 'flags' 'int'
|     | `-DeclRefExpr 0x55e94c0e2328 <col:51> 'P' lvalue ParmVar 0x55e94c0b8908 'parser' 'P'
|     `-ReturnStmt 0x55e94c0e23b0 <line:525:9, col:17>
|       `-UnaryOperator 0x55e94c0e2398 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e2388 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0b8f18 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55e94c0b8b38 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b8bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0b8e78 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0b8c78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b8cf0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b8d98 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e2518 <col:58, line:541:5>
|     `-ReturnStmt 0x55e94c0e2508 <line:540:9, col:39>
|       `-CallExpr 0x55e94c0e24d0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e23f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e2470 <col:21> 'const char *' lvalue ParmVar 0x55e94c0b8c78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e2490 <col:30> 'P' lvalue ParmVar 0x55e94c0b8cf0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e24b0 <col:38> 'T' lvalue ParmVar 0x55e94c0b8d98 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0b9368 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55e94c0b8f88 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b9008 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0b92c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0b90c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b9140 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b91e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e2650 <col:60, line:545:5>
|     `-ReturnStmt 0x55e94c0e2640 <line:544:9, col:41>
|       `-CallExpr 0x55e94c0e2608 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e2540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e25a8 <col:23> 'const char *' lvalue ParmVar 0x55e94c0b90c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e25c8 <col:32> 'P' lvalue ParmVar 0x55e94c0b9140 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e25e8 <col:40> 'T' lvalue ParmVar 0x55e94c0b91e8 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0b97b8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55e94c0b93d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b9458 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0b9718 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0b9518 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b9590 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b9638 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e2788 <col:60, line:549:5>
|     `-ReturnStmt 0x55e94c0e2778 <line:548:9, col:41>
|       `-CallExpr 0x55e94c0e2740 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e2678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e26e0 <col:23> 'const char *' lvalue ParmVar 0x55e94c0b9518 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e2700 <col:32> 'P' lvalue ParmVar 0x55e94c0b9590 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e2720 <col:40> 'T' lvalue ParmVar 0x55e94c0b9638 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0b9c08 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55e94c0b9828 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b98a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0b9b68 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0b9968 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b99e0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b9a88 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e28c0 <col:61, line:553:5>
|     `-ReturnStmt 0x55e94c0e28b0 <line:552:9, col:42>
|       `-CallExpr 0x55e94c0e2878 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e27b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e2818 <col:24> 'const char *' lvalue ParmVar 0x55e94c0b9968 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e2838 <col:33> 'P' lvalue ParmVar 0x55e94c0b99e0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e2858 <col:41> 'T' lvalue ParmVar 0x55e94c0b9a88 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0ba0e8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55e94c0b9c78 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0b9cf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0ba048 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e94c0b9db8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0b9e38 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0b9eb0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0b9f58 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e2a38 <col:69, line:557:5>
|     `-ReturnStmt 0x55e94c0e2a28 <line:556:9, col:46>
|       `-CallExpr 0x55e94c0e29e8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e28e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e2968 <col:21> 'const char *' lvalue ParmVar 0x55e94c0b9db8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e2988 <col:30> 'int' lvalue ParmVar 0x55e94c0b9e38 'flags' 'int'
|         |-DeclRefExpr 0x55e94c0e29a8 <col:37> 'P' lvalue ParmVar 0x55e94c0b9eb0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e29c8 <col:45> 'T' lvalue ParmVar 0x55e94c0b9f58 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0ba3f8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55e94c0ba160 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0ba358 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55e94c0ba210 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ba288 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0e2b78 <col:56, line:571:5>
|     `-ReturnStmt 0x55e94c0e2b68 <line:570:9, col:48>
|       `-CallExpr 0x55e94c0e2b30 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e2a60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e2ad0 <col:30> 'const char *' lvalue ParmVar 0x55e94c0ba210 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e2af0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55e94c0e2b10 <col:42> 'P' lvalue ParmVar 0x55e94c0ba288 'parser' 'P'
|-FunctionTemplateDecl 0x55e94c0ba788 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55e94c0ba460 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0ba6e8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55e94c0ba510 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ba590 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0ba608 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0e2d48 <col:67, line:576:5>
|     |-CallExpr 0x55e94c0e2cd0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e2b90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e94c0e2bd0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e2be0 <col:39> 'const char *' lvalue ParmVar 0x55e94c0ba510 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e94c0e2c90 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e94c0e2c40 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e94c0e2c00 <col:48> 'int' lvalue ParmVar 0x55e94c0ba590 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e94c0e2c78 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e94c0e2c58 <col:56> 'const int' lvalue Var 0x55e94c0abab0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55e94c0e2cb0 <col:68> 'P' lvalue ParmVar 0x55e94c0ba608 'parser' 'P'
|     `-ReturnStmt 0x55e94c0e2d38 <line:575:9, col:17>
|       `-UnaryOperator 0x55e94c0e2d20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e2d10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0babd8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55e94c0ba7f8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0ba878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0bab38 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55e94c0ba938 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0ba9b0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0baa58 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e2eb8 <col:62, line:592:5>
|     `-ReturnStmt 0x55e94c0e2ea8 <line:591:9, col:51>
|       `-CallExpr 0x55e94c0e2e68 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e2d78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e2de8 <col:30> 'const char *' lvalue ParmVar 0x55e94c0ba938 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e2e08 <col:39> 'int' 0
|         |-DeclRefExpr 0x55e94c0e2e28 <col:42> 'P' lvalue ParmVar 0x55e94c0ba9b0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e2e48 <col:50> 'T' lvalue ParmVar 0x55e94c0baa58 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0bb0b8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55e94c0bac48 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0bacc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0bb018 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e94c0bad88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bae08 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0bae80 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0baf28 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e30b0 <col:73, line:597:5>
|     |-CallExpr 0x55e94c0e3030 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e2ed0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55e94c0e2f10 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e2f20 <col:39> 'const char *' lvalue ParmVar 0x55e94c0bad88 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e94c0e2fd0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e94c0e2f80 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e94c0e2f40 <col:48> 'int' lvalue ParmVar 0x55e94c0bae08 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e94c0e2fb8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e94c0e2f98 <col:56> 'const int' lvalue Var 0x55e94c0abab0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e94c0e2ff0 <col:68> 'P' lvalue ParmVar 0x55e94c0bae80 'parser' 'P'
|     | `-DeclRefExpr 0x55e94c0e3010 <col:76> 'T' lvalue ParmVar 0x55e94c0baf28 'x' 'T &'
|     `-ReturnStmt 0x55e94c0e30a0 <line:596:9, col:17>
|       `-UnaryOperator 0x55e94c0e3088 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e3078 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0bb668 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55e94c0bb130 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0bb1a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0bb5c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e94c0bb268 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bb2e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0bb4a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e94c0e3220 <col:65, line:614:5>
|     `-ReturnStmt 0x55e94c0e3210 <line:613:9, col:46>
|       `-CallExpr 0x55e94c0e31d0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e30e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e3150 <col:25> 'const char *' lvalue ParmVar 0x55e94c0bb268 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e3170 <col:34> 'int' 0
|         |-DeclRefExpr 0x55e94c0e3190 <col:37> 'P' lvalue ParmVar 0x55e94c0bb2e0 'parser' 'P'
|         `-DeclRefExpr 0x55e94c0e31b0 <col:45> 'Vector<T>' lvalue ParmVar 0x55e94c0bb4a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e94c0bba98 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55e94c0bb6d8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0bb9f8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55e94c0bb790 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bb8e0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e94c0e3440 <col:55, line:618:5>
|     `-ReturnStmt 0x55e94c0e3430 <line:617:9, col:55>
|       `-CallExpr 0x55e94c0e33f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e3248 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e32b8 <col:25> 'const char *' lvalue ParmVar 0x55e94c0bb790 'keyword' 'const char *'
|         |-IntegerLiteral 0x55e94c0e32d8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55e94c0e33b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e94c0e33d0 <col:54> 'Vector<T>' lvalue ParmVar 0x55e94c0bb8e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55e94c0bc068 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55e94c0bbb00 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0bbb78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0bbfc8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e94c0bbc38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bbcb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0bbd30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0bbe80 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e94c0e3638 <col:76, line:623:5>
|     |-CallExpr 0x55e94c0e35b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55e94c0e3458 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55e94c0e3498 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55e94c0e34a8 <col:34> 'const char *' lvalue ParmVar 0x55e94c0bbc38 'keyword' 'const char *'
|     | |-BinaryOperator 0x55e94c0e3558 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55e94c0e3508 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55e94c0e34c8 <col:43> 'int' lvalue ParmVar 0x55e94c0bbcb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55e94c0e3540 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55e94c0e3520 <col:51> 'const int' lvalue Var 0x55e94c0abab0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55e94c0e3578 <col:63> 'P' lvalue ParmVar 0x55e94c0bbd30 'parser' 'P'
|     | `-DeclRefExpr 0x55e94c0e3598 <col:71> 'Vector<T>' lvalue ParmVar 0x55e94c0bbe80 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55e94c0e3628 <line:622:9, col:17>
|       `-UnaryOperator 0x55e94c0e3610 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e3600 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0bc5a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55e94c0bc0e0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0bc158 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0bc508 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55e94c0bc218 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bc298 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0bc3e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55e94c0e38a0 <col:66, line:627:5>
|     `-ReturnStmt 0x55e94c0e3890 <line:626:9, col:59>
|       `-CallExpr 0x55e94c0e3850 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55e94c0e3668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55e94c0e36d8 <col:25> 'const char *' lvalue ParmVar 0x55e94c0bc218 'keyword' 'const char *'
|         |-DeclRefExpr 0x55e94c0e36f8 <col:34> 'int' lvalue ParmVar 0x55e94c0bc298 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55e94c0e3810 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55e94c0e3830 <col:58> 'Vector<T>' lvalue ParmVar 0x55e94c0bc3e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55e94c0bc638 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55e94c0e3920 <col:25, line:633:5>
|   `-ReturnStmt 0x55e94c0e3910 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55e94c0e38f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e94c0e38c8 <col:16> 'const bool' lvalue ->_status 0x55e94c0c9ea8
|         `-CXXThisExpr 0x55e94c0e38b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e94c0bc7b8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55e94c0bc6f0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55e94c0e3a08 <col:27, line:639:5>
|   |-BinaryOperator 0x55e94c0e39b0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e94c0e3938 <col:9> 'bool' lvalue ParmVar 0x55e94c0bc6f0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e94c0e3998 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e94c0e3968 <col:13> 'bool' lvalue ->_status 0x55e94c0c9ea8
|   |     `-CXXThisExpr 0x55e94c0e3958 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e94c0e39f8 <line:638:9, col:17>
|     `-UnaryOperator 0x55e94c0e39e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94c0e39d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e94c0bc938 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e94c0bc878 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55e94c0e3af8 <col:39, line:644:5>
|   |-BinaryOperator 0x55e94c0e3aa0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e94c0e3a28 <col:9> 'bool' lvalue ParmVar 0x55e94c0bc878 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e94c0e3a88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e94c0e3a58 <col:13> 'const bool' lvalue ->_status 0x55e94c0c9ea8
|   |     `-CXXThisExpr 0x55e94c0e3a48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e94c0e3ae8 <line:643:9, col:17>
|     `-UnaryOperator 0x55e94c0e3ad0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94c0e3ac0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e94c0bca00 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55e94c0e3ba0 <col:30, line:651:5>
|   `-ReturnStmt 0x55e94c0e3b90 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55e94c0e3b78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55e94c0e3b48 <col:16> 'bool' lvalue ->_read_status 0x55e94bfc0050
|         `-ImplicitCastExpr 0x55e94c0e3b28 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55e94c0e3b18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55e94c0bcb48 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55e94c0bcab8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55e94c0e3ca8 <col:32, line:658:5>
|   |-BinaryOperator 0x55e94c0e3c50 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e94c0e3bb8 <col:9> 'bool' lvalue ParmVar 0x55e94c0bcab8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e94c0e3c38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e94c0e3c08 <col:13> 'bool' lvalue ->_read_status 0x55e94bfc0050
|   |     `-ImplicitCastExpr 0x55e94c0e3be8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e94c0e3bd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55e94c0e3c98 <line:657:9, col:17>
|     `-UnaryOperator 0x55e94c0e3c80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94c0e3c70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55e94c0bcc98 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55e94c0bcc08 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55e94c0e3db8 <col:44, line:663:5>
|   |-BinaryOperator 0x55e94c0e3d60 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55e94c0e3cc8 <col:9> 'bool' lvalue ParmVar 0x55e94c0bcc08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55e94c0e3d48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55e94c0e3d18 <col:13> 'bool' lvalue ->_read_status 0x55e94bfc0050
|   |     `-ImplicitCastExpr 0x55e94c0e3cf8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55e94c0e3ce8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55e94c0e3da8 <line:662:9, col:17>
|     `-UnaryOperator 0x55e94c0e3d90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94c0e3d80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55e94c0bcd60 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55e94c0bce28 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55e94c0bcef0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55e94c0bcfb8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55e94c0bd2c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55e94c0bd058 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0bd228 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55e94c0bd138 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e4170 <col:19, line:706:5>
|     `-IfStmt 0x55e94c0e4148 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55e94c0e3eb8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55e94c0e4078 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55e94c0e4048 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55e94c0e4008 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55e94c0e3f10 <col:42> '<bound member function type>' ->simple_slot 0x55e94c0dd290
|       |     | `-CXXThisExpr 0x55e94c0e3f00 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55e94c0e3fa8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55e94c0e3f60 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55e94be4a048
|       |     | `-DeclRefExpr 0x55e94c0e3f40 <col:55> 'T' lvalue ParmVar 0x55e94c0bd138 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55e94c0e3fe8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55e94c0e4138 <line:705:13, col:34>
|         `-CallExpr 0x55e94c0e4110 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55e94c0e4098 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55e94c0e40f0 <col:33> 'T' lvalue ParmVar 0x55e94c0bd138 'x' 'T &'
|-FunctionTemplateDecl 0x55e94c0bd598 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55e94c0bd328 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0bd4f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55e94c0bd408 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55e94c0e4550 <col:31, line:717:5>
|     |-DeclStmt 0x55e94c0e42b0 <line:713:9, col:23>
|     | `-VarDecl 0x55e94c0e4198 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55e94c0e4288 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e94c0e4210 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e94c0e4268 <col:21> 'T' lvalue ParmVar 0x55e94c0bd408 'x' 'T &'
|     |-IfStmt 0x55e94c0e4500 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55e94c0e43a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55e94c0e44e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e94c0e4480 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e94c0e4410 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|     |   | `-DeclRefExpr 0x55e94c0e43f0 <col:14> 'T *' lvalue Var 0x55e94c0e4198 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55e94c0e44c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55e94c0e4538 <line:716:9, col:16>
|       `-DeclRefExpr 0x55e94c0e4518 <col:16> 'T *' lvalue Var 0x55e94c0e4198 's' 'T *'
|-FunctionTemplateDecl 0x55e94c0bd9a8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55e94c0bd5f8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e94c0bd678 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e94c0bd908 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55e94c0bd758 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55e94c0bd7f8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55e94c0e4860 <col:37, line:726:5>
|     |-IfStmt 0x55e94c0e47f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55e94c0e4810 <line:723:13, col:26>
|     | | `-VarDecl 0x55e94c0e45b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55e94c0e46a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55e94c0e4630 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55e94c0e4688 <col:25> 'T' lvalue ParmVar 0x55e94c0bd758 'x' 'T &'
|     | |-DeclRefExpr 0x55e94c0e46d0 <col:16> 'T *' lvalue Var 0x55e94c0e45b8 's' 'T *'
|     | `-BinaryOperator 0x55e94c0e47d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55e94c0e4780 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55e94c0e4710 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|     |   | `-DeclRefExpr 0x55e94c0e46f0 <col:14> 'T *' lvalue Var 0x55e94c0e45b8 's' 'T *'
|     |   `-DeclRefExpr 0x55e94c0e47b0 <col:18> 'const V' lvalue ParmVar 0x55e94c0bd7f8 'value' 'const V &'
|     `-ReturnStmt 0x55e94c0e4850 <line:725:9, col:17>
|       `-UnaryOperator 0x55e94c0e4838 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55e94c0e4828 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55e94c0bdda8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55e94c0bda10 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55e94c0bdd08 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55e94c0bdac0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bdb40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0bdbe8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55e94c0e5680 <col:65, line:737:5>
|     |-DeclStmt 0x55e94c0e48f8 <line:732:9, col:26>
|     | `-VarDecl 0x55e94c0e4890 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e94c0e5648 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55e94c0e5668 <line:733:13, col:58>
|       | `-VarDecl 0x55e94c0e4920 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e94c0e4b00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e94c0e4ad0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e94c0e4ab8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e94c0e4a98 <col:26, col:58> 'String' (CXXTemporary 0x55e94c0e4a98)
|       |           `-CXXMemberCallExpr 0x55e94c0e4a28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e94c0e4998 <col:26> '<bound member function type>' ->find 0x55e94c0dc8a8
|       |             | `-CXXThisExpr 0x55e94c0e4988 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e94c0e4a60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0e49c8 <col:31> 'const char *' lvalue ParmVar 0x55e94c0bdac0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e94c0e4a78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0e49e8 <col:40> 'int' lvalue ParmVar 0x55e94c0bdb40 'flags' 'int'
|       |             `-DeclRefExpr 0x55e94c0e4a08 <col:47> 'Args::Slot *' lvalue Var 0x55e94c0e4890 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e94c0e4bb8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e94c0e4ba0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e94c0e4b80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e94c0e4b50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|       |       `-ImplicitCastExpr 0x55e94c0e4b38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e94c0e4b18 <col:20> 'String' lvalue Var 0x55e94c0e4920 'str' 'String'
|       `-CompoundStmt 0x55e94c0e5628 <col:61, line:736:9>
|         |-DeclStmt 0x55e94c0e5070 <line:734:13, col:76>
|         | `-VarDecl 0x55e94c0e4c08 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e94c0e5040 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e94c0e4fb0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e94c0e4ff8 <col:60> 'T' lvalue ParmVar 0x55e94c0bdbe8 'variable' 'T &'
|         |     `-UnaryOperator 0x55e94c0e5028 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e94c0e5018 <col:71> 'Args *' this
|         `-CallExpr 0x55e94c0e55f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55e94c0e5098 <col:13> '<bound member function type>' ->postparse 0x55e94c0dcab8
|           | `-CXXThisExpr 0x55e94c0e5088 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e94c0e55b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e94c0e50c8 <col:23> 'T *' lvalue Var 0x55e94c0e4c08 's' 'T *'
|           | `-CallExpr 0x55e94c0e5578 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e94c0e5350 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55e94c0e5450 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55e94c0e5470 <col:86> 'String' lvalue Var 0x55e94c0e4920 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e94c0e5520 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e94c0e54b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|           |   | `-DeclRefExpr 0x55e94c0e5490 <col:92> 'T *' lvalue Var 0x55e94c0e4c08 's' 'T *'
|           |   `-UnaryOperator 0x55e94c0e5560 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e94c0e5550 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55e94c0e55d8 <col:103> 'Args::Slot *' lvalue Var 0x55e94c0e4890 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e94c0be2f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e94c0bde18 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e94c0bde98 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55e94c0be258 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0bdf58 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bdfd8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0be078 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55e94c0be118 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55e94c0e6520 <col:88, line:745:5>
|     |-DeclStmt 0x55e94c0e5718 <line:741:9, col:26>
|     | `-VarDecl 0x55e94c0e56b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e94c0e5938 <line:742:9, col:55>
|     | `-VarDecl 0x55e94c0e5740 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e94c0e5920 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e94c0e58f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e94c0e58d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e94c0e58b8 <col:22, col:54> 'String' (CXXTemporary 0x55e94c0e58b8)
|     |           `-CXXMemberCallExpr 0x55e94c0e5848 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e94c0e57b8 <col:22> '<bound member function type>' ->find 0x55e94c0dc8a8
|     |             | `-CXXThisExpr 0x55e94c0e57a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e94c0e5880 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e94c0e57e8 <col:27> 'const char *' lvalue ParmVar 0x55e94c0bdf58 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e94c0e5898 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e94c0e5808 <col:36> 'int' lvalue ParmVar 0x55e94c0bdfd8 'flags' 'int'
|     |             `-DeclRefExpr 0x55e94c0e5828 <col:43> 'Args::Slot *' lvalue Var 0x55e94c0e56b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e94c0e5d10 <line:743:9, col:72>
|     | `-VarDecl 0x55e94c0e5988 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e94c0e5ce0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e94c0e5c50 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e94c0e5c98 <col:56> 'T' lvalue ParmVar 0x55e94c0be078 'variable' 'T &'
|     |     `-UnaryOperator 0x55e94c0e5cc8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e94c0e5cb8 <col:67> 'Args *' this
|     `-CallExpr 0x55e94c0e64f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55e94c0e5d38 <col:9> '<bound member function type>' ->postparse 0x55e94c0dcab8
|       | `-CXXThisExpr 0x55e94c0e5d28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e94c0e64b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e94c0e5d68 <col:19> 'T *' lvalue Var 0x55e94c0e5988 's' 'T *'
|       | `-ParenExpr 0x55e94c0e6490 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55e94c0e6460 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e94c0e6448 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e94c0e6430 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e94c0e6410 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e94c0e63e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|       |     |       `-ImplicitCastExpr 0x55e94c0e63c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e94c0e5d88 <col:25> 'String' lvalue Var 0x55e94c0e5740 'str' 'String'
|       |     |-CallExpr 0x55e94c0e6238 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e94c0e6010 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55e94c0e6110 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55e94c0e6130 <col:89> 'String' lvalue Var 0x55e94c0e5740 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e94c0e61e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e94c0e6170 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|       |     | | `-DeclRefExpr 0x55e94c0e6150 <col:95> 'T *' lvalue Var 0x55e94c0e5988 's' 'T *'
|       |     | `-UnaryOperator 0x55e94c0e6220 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e94c0e6210 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55e94c0e63a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55e94c0e6388 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e94c0e6358 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e94c0e6308 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e94c0e6298 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|       |         | | `-DeclRefExpr 0x55e94c0e6278 <col:109> 'T *' lvalue Var 0x55e94c0e5988 's' 'T *'
|       |         | `-DeclRefExpr 0x55e94c0e6338 <col:113> 'const V' lvalue ParmVar 0x55e94c0be118 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e94c0e6378 <col:120> 'bool' true
|       `-DeclRefExpr 0x55e94c0e64d0 <col:128> 'Args::Slot *' lvalue Var 0x55e94c0e56b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e94c0be828 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55e94c0be370 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0be3e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0be788 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e94c0be4a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0be528 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0be5a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0be648 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55e94c0e7118 <col:75, line:754:5>
|     |-DeclStmt 0x55e94c0e65c8 <line:749:9, col:26>
|     | `-VarDecl 0x55e94c0e6560 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e94c0e70e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55e94c0e7100 <line:750:13, col:58>
|       | `-VarDecl 0x55e94c0e65f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e94c0e67d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e94c0e67a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e94c0e6788 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e94c0e6768 <col:26, col:58> 'String' (CXXTemporary 0x55e94c0e6768)
|       |           `-CXXMemberCallExpr 0x55e94c0e66f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e94c0e6668 <col:26> '<bound member function type>' ->find 0x55e94c0dc8a8
|       |             | `-CXXThisExpr 0x55e94c0e6658 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e94c0e6730 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0e6698 <col:31> 'const char *' lvalue ParmVar 0x55e94c0be4a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e94c0e6748 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0e66b8 <col:40> 'int' lvalue ParmVar 0x55e94c0be528 'flags' 'int'
|       |             `-DeclRefExpr 0x55e94c0e66d8 <col:47> 'Args::Slot *' lvalue Var 0x55e94c0e6560 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e94c0e6888 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e94c0e6870 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e94c0e6850 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e94c0e6820 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|       |       `-ImplicitCastExpr 0x55e94c0e6808 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e94c0e67e8 <col:20> 'String' lvalue Var 0x55e94c0e65f0 'str' 'String'
|       `-CompoundStmt 0x55e94c0e70c0 <col:61, line:753:9>
|         |-DeclStmt 0x55e94c0e6c60 <line:751:13, col:63>
|         | `-VarDecl 0x55e94c0e68d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55e94c0e6c30 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e94c0e6ba0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e94c0e6be8 <col:47> 'T' lvalue ParmVar 0x55e94c0be648 'variable' 'T &'
|         |     `-UnaryOperator 0x55e94c0e6c18 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e94c0e6c08 <col:58> 'Args *' this
|         `-CallExpr 0x55e94c0e7090 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55e94c0e6c88 <col:13> '<bound member function type>' ->postparse 0x55e94c0dcab8
|           | `-CXXThisExpr 0x55e94c0e6c78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e94c0e7050 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55e94c0e6cb8 <col:23> 'T *' lvalue Var 0x55e94c0e68d8 's' 'T *'
|           | `-CallExpr 0x55e94c0e7010 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e94c0e6ea0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e94c0e6ee8 <col:56> 'P' lvalue ParmVar 0x55e94c0be5a0 'parser' 'P'
|           |   |-DeclRefExpr 0x55e94c0e6f08 <col:64> 'String' lvalue Var 0x55e94c0e65f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e94c0e6fb8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e94c0e6f48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|           |   | `-DeclRefExpr 0x55e94c0e6f28 <col:70> 'T *' lvalue Var 0x55e94c0e68d8 's' 'T *'
|           |   `-UnaryOperator 0x55e94c0e6ff8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e94c0e6fe8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55e94c0e7070 <col:81> 'Args::Slot *' lvalue Var 0x55e94c0e6560 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e94c0bee88 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55e94c0be8a0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55e94c0be918 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55e94c0be998 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55e94c0bede8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55e94c0bea60 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0beae0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0beb58 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0bebf8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55e94c0bec98 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55e94c0ea250 <col:98, line:762:5>
|     |-DeclStmt 0x55e94c0e71b0 <line:758:9, col:26>
|     | `-VarDecl 0x55e94c0e7148 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e94c0e73d0 <line:759:9, col:55>
|     | `-VarDecl 0x55e94c0e71d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55e94c0e73b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55e94c0e7388 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55e94c0e7370 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55e94c0e7350 <col:22, col:54> 'String' (CXXTemporary 0x55e94c0e7350)
|     |           `-CXXMemberCallExpr 0x55e94c0e72e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55e94c0e7250 <col:22> '<bound member function type>' ->find 0x55e94c0dc8a8
|     |             | `-CXXThisExpr 0x55e94c0e7240 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55e94c0e7318 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e94c0e7280 <col:27> 'const char *' lvalue ParmVar 0x55e94c0bea60 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55e94c0e7330 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55e94c0e72a0 <col:36> 'int' lvalue ParmVar 0x55e94c0beae0 'flags' 'int'
|     |             `-DeclRefExpr 0x55e94c0e72c0 <col:43> 'Args::Slot *' lvalue Var 0x55e94c0e7148 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55e94c0e77f0 <line:760:9, col:59>
|     | `-VarDecl 0x55e94c0e7428 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e94c0e77c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e94c0e7730 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55e94c0e7778 <col:43> 'T' lvalue ParmVar 0x55e94c0bebf8 'variable' 'T &'
|     |     `-UnaryOperator 0x55e94c0e77a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e94c0e7798 <col:54> 'Args *' this
|     `-CallExpr 0x55e94c0ea220 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55e94c0e7818 <col:9> '<bound member function type>' ->postparse 0x55e94c0dcab8
|       | `-CXXThisExpr 0x55e94c0e7808 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55e94c0ea1e0 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55e94c0e7848 <col:19> 'T *' lvalue Var 0x55e94c0e7428 's' 'T *'
|       | `-ParenExpr 0x55e94c0ea1c0 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55e94c0ea190 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55e94c0ea178 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55e94c0ea160 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55e94c0ea140 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55e94c0ea110 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|       |     |       `-ImplicitCastExpr 0x55e94c0ea0f8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55e94c0e7868 <col:25> 'String' lvalue Var 0x55e94c0e71d8 'str' 'String'
|       |     |-CallExpr 0x55e94c0e9f68 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55e94c0e7a50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55e94c0e7a98 <col:59> 'P' lvalue ParmVar 0x55e94c0beb58 'parser' 'P'
|       |     | |-DeclRefExpr 0x55e94c0e7ab8 <col:67> 'String' lvalue Var 0x55e94c0e71d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55e94c0e9f10 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55e94c0e9ea0 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|       |     | | `-DeclRefExpr 0x55e94c0e7ad8 <col:73> 'T *' lvalue Var 0x55e94c0e7428 's' 'T *'
|       |     | `-UnaryOperator 0x55e94c0e9f50 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55e94c0e9f40 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55e94c0ea0d8 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55e94c0ea0b8 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55e94c0ea088 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55e94c0ea038 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55e94c0e9fc8 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|       |         | | `-DeclRefExpr 0x55e94c0e9fa8 <col:87> 'T *' lvalue Var 0x55e94c0e7428 's' 'T *'
|       |         | `-DeclRefExpr 0x55e94c0ea068 <col:91> 'const V' lvalue ParmVar 0x55e94c0bec98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55e94c0ea0a8 <col:98> 'bool' true
|       `-DeclRefExpr 0x55e94c0ea200 <col:106> 'Args::Slot *' lvalue Var 0x55e94c0e7148 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e94c0c6f30 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55e94c0bef08 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0bef88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55e94c0bf008 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55e94c0c6e90 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55e94c0bf0d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0bf150 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0bf1c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0bf268 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55e94c0bf308 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55e94c0eb228 <col:60, line:773:5>
|     |-DeclStmt 0x55e94c0ea2f8 <line:767:9, col:26>
|     | `-VarDecl 0x55e94c0ea290 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e94c0eb1f0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55e94c0eb210 <line:768:13, col:58>
|       | `-VarDecl 0x55e94c0ea320 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e94c0ea500 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e94c0ea4d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e94c0ea4b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e94c0ea498 <col:26, col:58> 'String' (CXXTemporary 0x55e94c0ea498)
|       |           `-CXXMemberCallExpr 0x55e94c0ea428 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e94c0ea398 <col:26> '<bound member function type>' ->find 0x55e94c0dc8a8
|       |             | `-CXXThisExpr 0x55e94c0ea388 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e94c0ea460 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0ea3c8 <col:31> 'const char *' lvalue ParmVar 0x55e94c0bf0d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e94c0ea478 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0ea3e8 <col:40> 'int' lvalue ParmVar 0x55e94c0bf150 'flags' 'int'
|       |             `-DeclRefExpr 0x55e94c0ea408 <col:47> 'Args::Slot *' lvalue Var 0x55e94c0ea290 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e94c0ea5b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e94c0ea5a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e94c0ea580 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e94c0ea550 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|       |       `-ImplicitCastExpr 0x55e94c0ea538 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e94c0ea518 <col:20> 'String' lvalue Var 0x55e94c0ea320 'str' 'String'
|       `-CompoundStmt 0x55e94c0eb1c8 <col:61, line:772:9>
|         |-DeclStmt 0x55e94c0ea8f0 <line:769:13, col:66>
|         | `-VarDecl 0x55e94c0ea608 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55e94c0ea8c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e94c0ea830 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e94c0ea878 <col:49> 'T1' lvalue ParmVar 0x55e94c0bf268 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55e94c0ea8a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e94c0ea898 <col:61> 'Args *' this
|         |-DeclStmt 0x55e94c0eac60 <line:770:13, col:66>
|         | `-VarDecl 0x55e94c0ea978 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55e94c0eac30 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55e94c0eaba0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55e94c0eabe8 <col:49> 'T2' lvalue ParmVar 0x55e94c0bf308 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55e94c0eac18 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55e94c0eac08 <col:61> 'Args *' this
|         `-CallExpr 0x55e94c0eb198 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55e94c0eac88 <col:13> '<bound member function type>' ->postparse 0x55e94c0dcab8
|           | `-CXXThisExpr 0x55e94c0eac78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55e94c0eb158 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55e94c0eacf8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55e94c0eacb8 <col:23> 'T1 *' lvalue Var 0x55e94c0ea608 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55e94c0eacd8 <col:29> 'T2 *' lvalue Var 0x55e94c0ea978 's2' 'T2 *'
|           | `-CallExpr 0x55e94c0eb110 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55e94c0eaee0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55e94c0eaf28 <col:63> 'P' lvalue ParmVar 0x55e94c0bf1c8 'parser' 'P'
|           |   |-DeclRefExpr 0x55e94c0eaf48 <col:71> 'String' lvalue Var 0x55e94c0ea320 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55e94c0eaff8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e94c0eaf88 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|           |   | `-DeclRefExpr 0x55e94c0eaf68 <col:77> 'T1 *' lvalue Var 0x55e94c0ea608 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55e94c0eb0b8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55e94c0eb048 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|           |   | `-DeclRefExpr 0x55e94c0eb028 <col:82> 'T2 *' lvalue Var 0x55e94c0ea978 's2' 'T2 *'
|           |   `-UnaryOperator 0x55e94c0eb0f8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55e94c0eb0e8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55e94c0eb178 <col:94> 'Args::Slot *' lvalue Var 0x55e94c0ea290 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e94c0c7318 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55e94c0c6fb0 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0c7278 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e94c0c7060 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0c70e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0c7158 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0eb740 <col:67, line:780:5>
|     |-DeclStmt 0x55e94c0eb2c0 <line:777:9, col:26>
|     | `-VarDecl 0x55e94c0eb258 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55e94c0eb708 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55e94c0eb728 <line:778:13, col:58>
|       | `-VarDecl 0x55e94c0eb2e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55e94c0eb4c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55e94c0eb498 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55e94c0eb480 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55e94c0eb460 <col:26, col:58> 'String' (CXXTemporary 0x55e94c0eb460)
|       |           `-CXXMemberCallExpr 0x55e94c0eb3f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55e94c0eb360 <col:26> '<bound member function type>' ->find 0x55e94c0dc8a8
|       |             | `-CXXThisExpr 0x55e94c0eb350 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55e94c0eb428 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0eb390 <col:31> 'const char *' lvalue ParmVar 0x55e94c0c7060 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55e94c0eb440 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55e94c0eb3b0 <col:40> 'int' lvalue ParmVar 0x55e94c0c70e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55e94c0eb3d0 <col:47> 'Args::Slot *' lvalue Var 0x55e94c0eb258 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55e94c0eb580 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55e94c0eb568 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55e94c0eb548 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55e94c0eb518 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|       |       `-ImplicitCastExpr 0x55e94c0eb500 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55e94c0eb4e0 <col:20> 'String' lvalue Var 0x55e94c0eb2e8 'str' 'String'
|       `-CallExpr 0x55e94c0eb6d8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55e94c0eb5a8 <col:13> '<bound member function type>' ->postparse 0x55e94c0dcab8
|         | `-CXXThisExpr 0x55e94c0eb598 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55e94c0eb688 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55e94c0eb5f8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55e94c0eb5d8 <col:23> 'P' lvalue ParmVar 0x55e94c0c7158 'parser' 'P'
|         | |-DeclRefExpr 0x55e94c0eb640 <col:36> 'String' lvalue Var 0x55e94c0eb2e8 'str' 'String'
|         | `-UnaryOperator 0x55e94c0eb670 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55e94c0eb660 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55e94c0eb6b8 <col:49> 'Args::Slot *' lvalue Var 0x55e94c0eb258 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55e94c0c76b8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e94c0c7388 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55e94c0c7618 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55e94c0c7440 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0c74c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0c7538 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55e94c0ec0b0 <col:71, line:792:5>
|     |-DeclStmt 0x55e94c0eb7d8 <line:784:9, col:26>
|     | `-VarDecl 0x55e94c0eb770 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e94c0eb8a8 <line:785:9, col:29>
|     | `-VarDecl 0x55e94c0eb808 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e94c0eb890 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e94c0eb870 <col:28> 'int' 1
|     |-WhileStmt 0x55e94c0ebf60 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55e94c0ebf80 <line:786:16, col:61>
|     | | `-VarDecl 0x55e94c0eb8d0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e94c0ebab0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e94c0eba80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e94c0eba68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e94c0eba48 <col:29, col:61> 'String' (CXXTemporary 0x55e94c0eba48)
|     | |           `-CXXMemberCallExpr 0x55e94c0eb9d8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e94c0eb948 <col:29> '<bound member function type>' ->find 0x55e94c0dc8a8
|     | |             | `-CXXThisExpr 0x55e94c0eb938 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e94c0eba10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e94c0eb978 <col:34> 'const char *' lvalue ParmVar 0x55e94c0c7440 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e94c0eba28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e94c0eb998 <col:43> 'int' lvalue ParmVar 0x55e94c0c74c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e94c0eb9b8 <col:50> 'Args::Slot *' lvalue Var 0x55e94c0eb770 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e94c0ebb68 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e94c0ebb50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e94c0ebb30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e94c0ebb00 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|     | |       `-ImplicitCastExpr 0x55e94c0ebae8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e94c0ebac8 <col:23> 'String' lvalue Var 0x55e94c0eb8d0 'str' 'String'
|     | `-CompoundStmt 0x55e94c0ebf38 <col:64, line:790:9>
|     |   |-CallExpr 0x55e94c0ebcc0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55e94c0ebb90 <col:13> '<bound member function type>' ->postparse 0x55e94c0dcab8
|     |   | | `-CXXThisExpr 0x55e94c0ebb80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e94c0ebc70 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e94c0ebbe0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e94c0ebbc0 <col:23> 'P' lvalue ParmVar 0x55e94c0c7538 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e94c0ebc28 <col:36> 'String' lvalue Var 0x55e94c0eb8d0 'str' 'String'
|     |   | | `-UnaryOperator 0x55e94c0ebc58 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e94c0ebc48 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55e94c0ebca0 <col:49> 'Args::Slot *' lvalue Var 0x55e94c0eb770 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e94c0ebe58 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e94c0ebcf0 <col:13> 'int' lvalue Var 0x55e94c0eb808 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e94c0ebe40 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e94c0ebe20 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e94c0ebd88 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e94c0ebd68 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e94c0ebd50 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e94c0ebd10 <col:28> 'int' lvalue Var 0x55e94c0eb808 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e94c0ebd30 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e94c0ebe08 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e94c0ebdd8 <col:49> 'bool' lvalue ->_read_status 0x55e94bfc0050
|     |   |         `-ImplicitCastExpr 0x55e94c0ebdb8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e94c0ebda8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e94c0ebf08 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e94c0ebe78 <col:13> 'int' lvalue ParmVar 0x55e94c0c74c0 'flags' 'int'
|     |     `-UnaryOperator 0x55e94c0ebef0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e94c0ebed8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e94c0ebeb8 <col:23> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e94c0ec090 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e94c0ebfc8 <col:9> 'bool' lvalue ->_read_status 0x55e94bfc0050
|       | `-ImplicitCastExpr 0x55e94c0ebfa8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e94c0ebf98 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e94c0ec070 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e94c0ec050 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e94c0ec038 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e94c0ebff8 <col:25> 'int' lvalue Var 0x55e94c0eb808 'read_status' 'int'
|           `-IntegerLiteral 0x55e94c0ec018 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e94c0c7b98 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55e94c0c7728 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0c77a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0c7af8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55e94c0c7868 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0c78e8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0c7960 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0c7a08 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55e94c0ed040 <col:84, line:805:5>
|     |-DeclStmt 0x55e94c0ec158 <line:796:9, col:26>
|     | `-VarDecl 0x55e94c0ec0f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e94c0ec228 <line:797:9, col:29>
|     | `-VarDecl 0x55e94c0ec188 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e94c0ec210 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e94c0ec1f0 <col:28> 'int' 1
|     |-DeclStmt 0x55e94c0ec560 <line:798:9, col:71>
|     | `-VarDecl 0x55e94c0ec278 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55e94c0ec530 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55e94c0ec4a0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55e94c0ec4e8 <col:55> 'T' lvalue ParmVar 0x55e94c0c7a08 'variable' 'T &'
|     |     `-UnaryOperator 0x55e94c0ec518 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55e94c0ec508 <col:66> 'Args *' this
|     |-WhileStmt 0x55e94c0ecef0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55e94c0ecf10 <line:799:16, col:61>
|     | | `-VarDecl 0x55e94c0ec588 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e94c0ec768 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e94c0ec738 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e94c0ec720 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e94c0ec700 <col:29, col:61> 'String' (CXXTemporary 0x55e94c0ec700)
|     | |           `-CXXMemberCallExpr 0x55e94c0ec690 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e94c0ec600 <col:29> '<bound member function type>' ->find 0x55e94c0dc8a8
|     | |             | `-CXXThisExpr 0x55e94c0ec5f0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e94c0ec6c8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e94c0ec630 <col:34> 'const char *' lvalue ParmVar 0x55e94c0c7868 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e94c0ec6e0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e94c0ec650 <col:43> 'int' lvalue ParmVar 0x55e94c0c78e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e94c0ec670 <col:50> 'Args::Slot *' lvalue Var 0x55e94c0ec0f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e94c0ec820 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e94c0ec808 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e94c0ec7e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e94c0ec7b8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|     | |       `-ImplicitCastExpr 0x55e94c0ec7a0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e94c0ec780 <col:23> 'String' lvalue Var 0x55e94c0ec588 'str' 'String'
|     | `-CompoundStmt 0x55e94c0ecec8 <col:64, line:803:9>
|     |   |-CallExpr 0x55e94c0ecc50 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55e94c0ec848 <col:13> '<bound member function type>' ->postparse 0x55e94c0dcab8
|     |   | | `-CXXThisExpr 0x55e94c0ec838 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55e94c0ecc10 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55e94c0ec878 <col:23> 'T *' lvalue Var 0x55e94c0ec278 's' 'T *'
|     |   | | `-CallExpr 0x55e94c0ecbd0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55e94c0eca60 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55e94c0ecaa8 <col:56> 'P' lvalue ParmVar 0x55e94c0c7960 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55e94c0ecac8 <col:64> 'String' lvalue Var 0x55e94c0ec588 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55e94c0ecb78 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55e94c0ecb08 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|     |   | |   | `-DeclRefExpr 0x55e94c0ecae8 <col:70> 'T *' lvalue Var 0x55e94c0ec278 's' 'T *'
|     |   | |   `-UnaryOperator 0x55e94c0ecbb8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55e94c0ecba8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55e94c0ecc30 <col:81> 'Args::Slot *' lvalue Var 0x55e94c0ec0f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55e94c0ecde8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e94c0ecc80 <col:13> 'int' lvalue Var 0x55e94c0ec188 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e94c0ecdd0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e94c0ecdb0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e94c0ecd18 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e94c0eccf8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e94c0ecce0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e94c0ecca0 <col:28> 'int' lvalue Var 0x55e94c0ec188 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e94c0eccc0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e94c0ecd98 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e94c0ecd68 <col:49> 'bool' lvalue ->_read_status 0x55e94bfc0050
|     |   |         `-ImplicitCastExpr 0x55e94c0ecd48 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e94c0ecd38 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e94c0ece98 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e94c0ece08 <col:13> 'int' lvalue ParmVar 0x55e94c0c78e8 'flags' 'int'
|     |     `-UnaryOperator 0x55e94c0ece80 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e94c0ece68 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e94c0ece48 <col:23> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e94c0ed020 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e94c0ecf58 <col:9> 'bool' lvalue ->_read_status 0x55e94bfc0050
|       | `-ImplicitCastExpr 0x55e94c0ecf38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e94c0ecf28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e94c0ed000 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e94c0ecfe0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e94c0ecfc8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e94c0ecf88 <col:25> 'int' lvalue Var 0x55e94c0ec188 'read_status' 'int'
|           `-IntegerLiteral 0x55e94c0ecfa8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55e94c0c8178 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55e94c0c7c10 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55e94c0c7c88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55e94c0c80d8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55e94c0c7d48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55e94c0c7dc8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55e94c0c7e40 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55e94c0c7f90 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55e94c0ede48 <col:87, line:821:5>
|     |-DeclStmt 0x55e94c0ed0f0 <line:809:9, col:26>
|     | `-VarDecl 0x55e94c0ed088 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55e94c0ed1c0 <line:810:9, col:29>
|     | `-VarDecl 0x55e94c0ed120 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55e94c0ed1a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55e94c0ed188 <col:28> 'int' 1
|     |-DeclStmt 0x55e94c0ed408 <line:811:9, col:38>
|     | `-VarDecl 0x55e94c0ed2f0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55e94c0ed3e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55e94c0ed368 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55e94c0ed3c0 <col:29> 'Vector<T>' lvalue ParmVar 0x55e94c0c7f90 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55e94c0edcf8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55e94c0edd18 <line:812:16, col:61>
|     | | `-VarDecl 0x55e94c0ed430 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55e94c0ed610 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55e94c0ed5e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55e94c0ed5c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55e94c0ed5a8 <col:29, col:61> 'String' (CXXTemporary 0x55e94c0ed5a8)
|     | |           `-CXXMemberCallExpr 0x55e94c0ed538 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55e94c0ed4a8 <col:29> '<bound member function type>' ->find 0x55e94c0dc8a8
|     | |             | `-CXXThisExpr 0x55e94c0ed498 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55e94c0ed570 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e94c0ed4d8 <col:34> 'const char *' lvalue ParmVar 0x55e94c0c7d48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55e94c0ed588 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55e94c0ed4f8 <col:43> 'int' lvalue ParmVar 0x55e94c0c7dc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55e94c0ed518 <col:50> 'Args::Slot *' lvalue Var 0x55e94c0ed088 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55e94c0ed6c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55e94c0ed6b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55e94c0ed690 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55e94c0ed660 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55e94be0c008
|     | |       `-ImplicitCastExpr 0x55e94c0ed648 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55e94c0ed628 <col:23> 'String' lvalue Var 0x55e94c0ed430 'str' 'String'
|     | `-CompoundStmt 0x55e94c0edcc0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55e94c0ed788 <line:813:13, col:23>
|     |   | `-VarDecl 0x55e94c0ed6f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55e94c0ed768 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55e94c0ed908 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55e94c0ed7b0 <col:13> '<bound member function type>' ->postparse 0x55e94c0dcab8
|     |   | | `-CXXThisExpr 0x55e94c0ed7a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55e94c0ed8b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55e94c0ed800 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55e94c0ed7e0 <col:23> 'P' lvalue ParmVar 0x55e94c0c7e40 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55e94c0ed848 <col:36> 'String' lvalue Var 0x55e94c0ed430 'str' 'String'
|     |   | | |-DeclRefExpr 0x55e94c0ed868 <col:41> 'T' lvalue Var 0x55e94c0ed6f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55e94c0ed898 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55e94c0ed888 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55e94c0ed8e8 <col:53> 'Args::Slot *' lvalue Var 0x55e94c0ed088 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55e94c0eda60 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55e94c0ed998 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55e94c0ed968 <col:17> 'bool' lvalue ->_read_status 0x55e94bfc0050
|     |   | |   `-ImplicitCastExpr 0x55e94c0ed948 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55e94c0ed938 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55e94c0eda38 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55e94c0ed9d0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55e94c0ed9b0 <col:17> 'Vector<T> *' lvalue Var 0x55e94c0ed2f0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55e94c0eda18 <col:30> 'T' lvalue Var 0x55e94c0ed6f0 'sx' 'T'
|     |   |-BinaryOperator 0x55e94c0edbe0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55e94c0eda78 <col:13> 'int' lvalue Var 0x55e94c0ed120 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55e94c0edbc8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55e94c0edba8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55e94c0edb10 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55e94c0edaf0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55e94c0edad8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55e94c0eda98 <col:28> 'int' lvalue Var 0x55e94c0ed120 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55e94c0edab8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55e94c0edb90 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55e94c0edb60 <col:49> 'bool' lvalue ->_read_status 0x55e94bfc0050
|     |   |         `-ImplicitCastExpr 0x55e94c0edb40 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55e94c0edb30 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55e94c0edc90 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55e94c0edc00 <col:13> 'int' lvalue ParmVar 0x55e94c0c7dc8 'flags' 'int'
|     |     `-UnaryOperator 0x55e94c0edc78 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55e94c0edc60 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55e94c0edc40 <col:23> 'const int' lvalue Var 0x55e94c0ab7c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55e94c0ede28 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55e94c0edd60 <col:9> 'bool' lvalue ->_read_status 0x55e94bfc0050
|       | `-ImplicitCastExpr 0x55e94c0edd40 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55e94c0edd30 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55e94c0ede08 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55e94c0edde8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55e94c0eddd0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55e94c0edd90 <col:25> 'int' lvalue Var 0x55e94c0ed120 'read_status' 'int'
|           `-IntegerLiteral 0x55e94c0eddb0 <col:40> 'int' 1
|-AccessSpecDecl 0x55e94c0c81f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55e94c0c8218 prev 0x55e94c0a9ac8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55e94c0c8310 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55e94c0c8400 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55e94c0ede80 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55e94c0c84f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55e94c0ede90 <col:25, line:830:9>
| |-CXXMethodDecl 0x55e94c0c85f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55e94c0c86a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55e94c0c8748 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55e94c0c8748
| | `-ParmVarDecl 0x55e94c0c8858 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55e94c0c9018 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55e94c0c9018
|   `-ParmVarDecl 0x55e94c0c9128 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55e94c0c88c8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55e94c0c8a28 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55e94c0c8c20 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55e94c0c8ad0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55e94c0c8b48 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55e94c0ee070 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55e94c0c8ed8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55e94c0edee0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e94c0edea0 <col:20> 'void *' lvalue ParmVar 0x55e94c0c8ad0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55e94c0c8f40 '_slot' 'char *'
| | | `-CXXNewExpr 0x55e94c0edf68 <col:32, col:45> 'char *' array Function 0x55e94bc2fc88 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55e94c0edf50 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55e94c0edf20 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55e94c0c8b48 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55e94c0c8fa0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55e94c0ee030 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55e94c0edff0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55e94c0c8b48 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55e94c0ee0f0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55e94c0c8d20 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55e94c0c84f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55e94c0ee178 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55e94c0ee158 <line:840:13, col:22> 'void' array Function 0x55e94bc2ffe8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55e94c0ee140 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55e94c0ee110 <col:22> 'char *' lvalue ->_slot 0x55e94c0c8f40
| |         `-CXXThisExpr 0x55e94c0ee100 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55e94c0c8e20 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55e94c0c85f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55e94c0ee368 <col:22, line:844:9>
| |   `-CallExpr 0x55e94c0ee2d0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55e94c0ee2b8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55e94c0ee298 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55e94bd3ba68 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55e94c0ee308 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55e94c0ee1e8 <col:20> 'void *' lvalue ->_ptr 0x55e94c0c8ed8
| |     |   `-CXXThisExpr 0x55e94c0ee1d8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55e94c0ee338 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55e94c0ee320 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55e94c0ee228 <col:26> 'char *' lvalue ->_slot 0x55e94c0c8f40
| |     |     `-CXXThisExpr 0x55e94c0ee218 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55e94c0ee350 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55e94c0ee268 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55e94c0c8fa0
| |         `-CXXThisExpr 0x55e94c0ee258 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55e94c0c8ed8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55e94c0c8f40 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55e94c0c8fa0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55e94c0c9198 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e94c0c9198
| | `-ParmVarDecl 0x55e94c0c92a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55e94c0c9348 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55e94c0c9348
|   `-ParmVarDecl 0x55e94c0c9458 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55e94c0c95f8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55e94c0c94c8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55e94c0c9568 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55e94c0c9890 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55e94c0c9a88 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55e94c0c9958 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55e94c0c9c08 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55e94c0ee3a0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55e94c0ee380 <col:20> 'T *' lvalue ParmVar 0x55e94c0c9958 'ptr' 'T *'
|   | `-CompoundStmt 0x55e94c0ee3f0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55e94c0c9b58 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55e94c0c85f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55e94c0ee5a0 <col:22, line:857:9>
|   |   `-CallExpr 0x55e94c0ee570 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55e94c0ee400 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55e94bdf4198 0x55e94bd9e4c8
|   |     |-CXXOperatorCallExpr 0x55e94c0ee500 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55e94c0ee490 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55e94c001368 0x55e94c000f88 0x55e94c000bb8 0x55e94c0007d8 0x55e94c0003f8 0x55e94c000028
|   |     | `-MemberExpr 0x55e94c0ee460 <col:29> 'T *' lvalue ->_ptr 0x55e94c0c9c08
|   |     |   `-CXXThisExpr 0x55e94c0ee450 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55e94c0ee540 <col:35> 'T' lvalue ->_slot 0x55e94c0c9c68
|   |       `-CXXThisExpr 0x55e94c0ee530 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55e94c0c9c08 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55e94c0c9c68 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55e94c0c9cd0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55e94c0c9dd0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55e94c0c9e20 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c0c9db0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55e94c0c9d90 <col:31> 'int' 48
|-FieldDecl 0x55e94c0c9e48 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55e94c0c9ea8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55e94c0c9f08 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e94c0ca040 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55e94c0dc150 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55e94c0dc1b0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55e94c0dc260 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55e94c0dc488 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55e94c0dc390 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55e94c0dc5d8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55e94c0dc548 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55e94c0dc8a8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55e94c0dc698 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55e94c0dc718 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55e94c0dc7c0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55e94c0dcab8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55e94c0dc970 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55e94c0dc9e8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55e94c0dcb88 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55e94c0dccd8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55e94c0dcc40 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55e94c0dd068 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55e94c0dcd98 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55e94c0dce18 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55e94c0dcec0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55e94c0dcf78 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55e94c0dd290 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55e94c0dd140 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55e94c0dd1b8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55e94c0dd5a8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55e94c0dd340 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55e94c0dd508 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55e94c0dd418 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c016cc8 prev 0x55e94c00bed0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94c016dc0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55e94c016eb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55e94c016fd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55e94c017158 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55e94c0172d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55e94c017458 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55e94c028288 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e94c028af8 <col:11>
|-CXXDestructorDecl 0x55e94c028360 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e94c028498 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e94c028498
| `-ParmVarDecl 0x55e94c0285a8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55e94c028648 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e94c028648
| `-ParmVarDecl 0x55e94c028758 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55e94c02b518 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e94c02b628 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55e94c02b8a8 <col:11>
|   `-ReturnStmt 0x55e94c02b898 <col:11>
|     `-UnaryOperator 0x55e94c02b880 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55e94c02b870 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55e94c02b698 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e94c02b698
  `-ParmVarDecl 0x55e94c02b7a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c0174c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94c0175d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55e94c017678 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55e94c0176e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55e94c017748 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55e94c0177b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55e94c017810 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55e94c0178d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55e94c017930 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55e94c017990 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55e94c028198 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55e94c017678 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55e94c028b08 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55e94c028b60 <col:12>
|-CXXConstructorDecl 0x55e94c0287c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e94c0287c8
| `-ParmVarDecl 0x55e94c0288d8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55e94c028978 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e94c028978
| `-ParmVarDecl 0x55e94c028a88 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55e94c02ac00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c0055e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55e94c0056f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55e94c005788 <col:16, col:22> col:16 public
|-EnumDecl 0x55e94c0057b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55e94c0058b0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55e94c005990 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c005890 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55e94c005870 <col:21> 'int' 28
| `-EnumConstantDecl 0x55e94c005940 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55e94c0059a8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c005920 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55e94c005900 <col:22> 'int' 64
|-CXXMethodDecl 0x55e94c005ce8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e94c0059d0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e94c005a50 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55e94c005ac8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e94c005b40 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e94c005da8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e94c005fa8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55e94c005e20 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55e94c005e98 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e94c006058 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e94c0061b8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55e94c0060c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e94c006260 <col:72> warn_unused_result ""
|-TypedefDecl 0x55e94c0065c0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55e94c006550 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55e94c0064f0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55e94c0064b0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55e94badd4e0 'void'
|       |-PointerType 0x55e94bd85760 'unsigned char *'
|       | `-BuiltinType 0x55e94badd5e0 'unsigned char'
|       |-TypedefType 0x55e94bb81d30 'size_t' sugar
|       | |-Typedef 0x55e94bb4dbe0 'size_t'
|       | `-BuiltinType 0x55e94badd640 'unsigned long'
|       `-PointerType 0x55e94baddce0 'void *'
|         `-BuiltinType 0x55e94badd4e0 'void'
|-CXXMethodDecl 0x55e94c006a38 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55e94c006630 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55e94c0066a8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e94c006740 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55e94c0067c0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55e94c021130 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55e94c021118 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55e94c0210e0 <col:58> 'int' 0
| |-ParmVarDecl 0x55e94c006840 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55e94c021158 <col:76> 'int' 0
| |-ParmVarDecl 0x55e94c0068c0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55e94c021178 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55e94c006b08 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55e94c006b88 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55e94c006c48 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55e94c006ce8 <col:20>
| `-OptimizeNoneAttr 0x55e94c006d40 <col:30>
|-CXXMethodDecl 0x55e94c006db8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55e94c006e58 <col:20>
| `-OptimizeNoneAttr 0x55e94c006eb0 <col:30>
|-CXXMethodDecl 0x55e94c006f28 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55e94c006fc8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55e94c007078 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55e94c007118 <col:20>
| |-OptimizeNoneAttr 0x55e94c007170 <col:30>
| `-WarnUnusedResultAttr 0x55e94c007198 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55e94c0071f0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e94c007290 <col:20>
| `-OptimizeNoneAttr 0x55e94c0072e8 <col:30>
|-CXXMethodDecl 0x55e94c007338 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55e94c0073d8 <col:20>
| `-OptimizeNoneAttr 0x55e94c007430 <col:30>
|-CXXMethodDecl 0x55e94c007478 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55e94c007518 <col:20>
| `-OptimizeNoneAttr 0x55e94c007570 <col:30>
|-CXXMethodDecl 0x55e94c0075b8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94c007678 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94c007740 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e94c007808 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e94c0078c8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94c0079e8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55e94c021240 <col:54, line:99:5>
|   `-ReturnStmt 0x55e94c021230 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55e94c021218 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55e94c0211e8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e94c017cc8
|         `-CXXThisExpr 0x55e94c0211d8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e94c007b88 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55e94c007a98 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55e94c0212f0 <col:67, line:103:5>
|   `-BinaryOperator 0x55e94c0212d0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e94c021268 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e94c017cc8
|     | `-CXXThisExpr 0x55e94c021258 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e94c0212b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55e94c021298 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55e94c007a98 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55e94c007c80 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55e94c021370 <col:33, line:107:5>
|   `-ReturnStmt 0x55e94c021360 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55e94c021348 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55e94c021318 <col:16> 'void *' lvalue ->_destructor_argument 0x55e94c017d30
|         `-CXXThisExpr 0x55e94c021308 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e94c007d40 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55e94c0219a0 <col:25, line:113:5>
|   |-ParenExpr 0x55e94c0216e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55e94c0216b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c021428 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55e94c021400 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55e94c0213c8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55e94c021398 <col:24> '<bound member function type>' ->shared 0x55e94c006db8
|   |   |       `-ImplicitCastExpr 0x55e94c0213e8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55e94c021388 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55e94c021488 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c021468 <col:42> 'int' 0
|   |   `-CallExpr 0x55e94c021618 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55e94c021600 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c0215e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c021658 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c0214f8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55e94c021670 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c021520 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c021688 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c021558 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55e94c0216a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c0215c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c0215b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c021578 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55e94c0218e8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55e94c021718 <col:2> 'unsigned char *' lvalue ->_head 0x55e94c017ad0
|   | | `-CXXThisExpr 0x55e94c021708 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55e94c0218d0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55e94c0218b0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55e94c021758 <col:10> 'unsigned char *' lvalue ->_data 0x55e94c017b38
|   |     | `-CXXThisExpr 0x55e94c021748 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55e94c021898 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55e94c021878 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55e94c021798 <col:18> 'unsigned char *' lvalue ->_tail 0x55e94c017ba0
|   |         | `-CXXThisExpr 0x55e94c021788 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55e94c021860 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55e94c021840 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55e94c0217d8 <col:26> 'unsigned char *' lvalue ->_end 0x55e94c017c08
|   |             | `-CXXThisExpr 0x55e94c0217c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55e94c021828 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55e94c021808 <col:33> 'int' 0
|   `-BinaryOperator 0x55e94c021980 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55e94c021918 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55e94c017cc8
|     | `-CXXThisExpr 0x55e94c021908 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55e94c021968 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55e94c021948 <col:16> 'int' 0
|-CXXMethodDecl 0x55e94c007e80 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e94c007df0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e94c007f28 <col:20>
| |-OptimizeNoneAttr 0x55e94c007f80 <col:30>
| `-WarnUnusedResultAttr 0x55e94c007fa8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55e94c008078 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e94c007fe8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e94c008120 <col:20>
| |-OptimizeNoneAttr 0x55e94c008178 <col:30>
| `-WarnUnusedResultAttr 0x55e94c0081a0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55e94c0082d8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e94c0081e0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e94c008380 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55e94c008480 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55e94c0083f0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e94c008528 <col:20>
| `-OptimizeNoneAttr 0x55e94c008580 <col:30>
|-CXXMethodDecl 0x55e94c008648 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55e94c0085b8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e94c0086f0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55e94c0087f0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55e94c008760 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55e94c008898 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55e94c008998 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55e94c008908 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e94c008a40 <col:20>
| `-OptimizeNoneAttr 0x55e94c008a98 <col:30>
|-CXXMethodDecl 0x55e94c008c28 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55e94c008ad8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55e94c008b50 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55e94c021198 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55e94c008cd8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55e94c008ed8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e94c008d50 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55e94c008dc8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c0090e8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55e94c008f98 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e94c009010 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c0092f8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55e94c0091a8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55e94c009228 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55e94c0211a8 <col:39> 'int' 0
|-CXXMethodDecl 0x55e94c0093c8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55e94c009490 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e94c009558 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e94c009618 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94c0096e0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55e94c009828 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55e94c009798 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55e94c0099f8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e94c0098e8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55e94c009960 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c009ac8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55e94c009b88 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55e94c009c28 <col:20>
| `-OptimizeNoneAttr 0x55e94c009c80 <col:30>
|-CXXMethodDecl 0x55e94c009cd0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e94c009d70 <col:20>
| `-OptimizeNoneAttr 0x55e94c009dc8 <col:30>
|-CXXMethodDecl 0x55e94c009e18 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e94c009ed8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94c009fa0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55e94c00a040 <col:20>
| `-OptimizeNoneAttr 0x55e94c00a098 <col:30>
|-CXXMethodDecl 0x55e94c00a1e8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55e94c00a0d8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55e94c00a150 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c00a338 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55e94c00a2a8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c00a410 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55e94c00a4d0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55e94c00a570 <col:20>
| `-OptimizeNoneAttr 0x55e94c00a5c8 <col:30>
|-CXXMethodDecl 0x55e94c00a618 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55e94c00a6b8 <col:20>
| `-OptimizeNoneAttr 0x55e94c00a710 <col:30>
|-CXXMethodDecl 0x55e94c00a760 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e94c00a828 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55e94c00a8c8 <col:20>
| `-OptimizeNoneAttr 0x55e94c00a920 <col:30>
|-CXXMethodDecl 0x55e94c00a968 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55e94c00aa88 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55e94c00abf8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55e94c00ab38 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55e94c00ace8 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55e94c00ad88 <col:20>
| `-OptimizeNoneAttr 0x55e94c00ade0 <col:30>
|-CXXMethodDecl 0x55e94c00ae30 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55e94c00aef0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94c00b128 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55e94c00afa0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55e94c00b018 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e94c00b1d8 <col:20>
| `-OptimizeNoneAttr 0x55e94c00b230 <col:30>
|-CXXMethodDecl 0x55e94c00b2d8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55e94c00b378 <col:20>
| `-OptimizeNoneAttr 0x55e94c00b3d0 <col:30>
|-CXXMethodDecl 0x55e94c00b420 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55e94c00b4c0 <col:20>
| `-OptimizeNoneAttr 0x55e94c00b518 <col:30>
|-CXXMethodDecl 0x55e94c00b560 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55e94c00b600 <col:20>
| `-OptimizeNoneAttr 0x55e94c00b658 <col:30>
|-CXXMethodDecl 0x55e94c00b758 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55e94c00b690 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55e94c00b800 <col:20>
| `-OptimizeNoneAttr 0x55e94c00b858 <col:30>
|-CXXMethodDecl 0x55e94c00ba18 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55e94c00b890 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55e94c00b908 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e94c00bac8 <col:20>
| `-OptimizeNoneAttr 0x55e94c00bb20 <col:30>
|-CXXMethodDecl 0x55e94c00bbc8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55e94c00bce8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55e94c00be08 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55e94c00bea8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55e94c00bed0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55e94c00bff8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55e94c00c098 <col:20>
| `-OptimizeNoneAttr 0x55e94c00c0f0 <col:30>
|-CXXMethodDecl 0x55e94c00c198 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55e94c00c238 <col:20>
| `-OptimizeNoneAttr 0x55e94c00c290 <col:30>
|-AccessSpecDecl 0x55e94c00c2b8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55e94c00c2e0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55e94c00c3e0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55e94c00c430 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c00c3c0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55e94c00c3a0 <col:14> 'int' 48
|-CXXMethodDecl 0x55e94c00c498 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55e94c00c538 <col:20>
| `-OptimizeNoneAttr 0x55e94c00c590 <col:30>
|-CXXMethodDecl 0x55e94c00c608 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55e94c00c6a8 <col:20>
| `-OptimizeNoneAttr 0x55e94c00c700 <col:30>
|-CXXMethodDecl 0x55e94c00c7c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55e94c00c738 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55e94c00c968 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55e94c00cb08 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55e94c00ca18 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55e94c00cbb0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55e94c00ccb0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e94c00d060 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00cc90 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55e94c00cc70 <col:9> 'int' 0
| |-EnumConstantDecl 0x55e94c00cd40 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e94c00d078 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00cd20 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55e94c00cd00 <col:14> 'int' 1
| |-EnumConstantDecl 0x55e94c00cdd0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e94c00d090 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00cdb0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55e94c00cd90 <col:14> 'int' 2
| |-EnumConstantDecl 0x55e94c00ce60 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e94c00d0a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00ce40 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55e94c00ce20 <col:14> 'int' 3
| |-EnumConstantDecl 0x55e94c00cef0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e94c00d0c0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00ced0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55e94c00ceb0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55e94c00cf80 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55e94c00d0d8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00cf60 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55e94c00cf40 <col:13> 'int' 5
| `-EnumConstantDecl 0x55e94c00d010 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55e94c00d0f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c00cff0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55e94c00cfd0 <col:14> 'int' 6
|-CXXMethodDecl 0x55e94c00d158 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55e94c00d1f8 <col:20>
| `-OptimizeNoneAttr 0x55e94c00d250 <col:30>
|-CXXMethodDecl 0x55e94c00d348 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55e94c00d288 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55e94c00d3f0 <col:20>
| `-OptimizeNoneAttr 0x55e94c00d448 <col:30>
|-CXXMethodDecl 0x55e94c00d4b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55e94c00d5e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55e94c00d758 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55e94c00d690 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55e94c00d820 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55e94c00d8e8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55e94c00da28 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55e94c00d998 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55e94c00dad0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55e94c00dbd0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e94c00ddd0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00dbb0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55e94c00db90 <col:23> 'int' 0
| |-EnumConstantDecl 0x55e94c00dc60 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e94c00dde8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00dc40 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55e94c00dc20 <col:45> 'int' 4
| |-EnumConstantDecl 0x55e94c00dcf0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55e94c00de00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c00dcd0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55e94c00dcb0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55e94c00dd80 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55e94c00de18 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c00dd60 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55e94c00dd40 <col:47> 'int' 16
|-CXXMethodDecl 0x55e94c00de78 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55e94c00dfe8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55e94c00df28 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55e94c00e090 <col:20>
| `-OptimizeNoneAttr 0x55e94c00e0e8 <col:30>
|-CXXMethodDecl 0x55e94c00e138 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55e94c021ac0 <col:18, col:36>
|   `-ReturnStmt 0x55e94c021ab0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55e94c021a98 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e94c021a78 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55e94c021a48 <col:27> '<bound member function type>' ->xanno 0x55e94c00c198
|           `-CXXThisExpr 0x55e94c021a38 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55e94c00e230 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55e94c021bd0 <col:30, col:48>
|   `-ReturnStmt 0x55e94c021bc0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55e94c021ba8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55e94c021b88 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55e94c021b58 <col:39> '<bound member function type>' ->xanno 0x55e94c00bff8
|           `-CXXThisExpr 0x55e94c021b48 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55e94c00e318 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55e94c021d68 <col:24, col:50>
|   `-ReturnStmt 0x55e94c021d58 <col:26, col:47>
|     `-UnaryOperator 0x55e94c021d40 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e94c021d20 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e94c021d08 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e94c021cb8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55e94c016fd8
|         |   `-CXXMemberCallExpr 0x55e94c021c98 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e94c021c68 <col:34> '<bound member function type>' ->xanno 0x55e94c00c198
|         |       `-CXXThisExpr 0x55e94c021c58 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e94c021ce8 <col:46> 'int' 0
|-CXXMethodDecl 0x55e94c00e420 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55e94c021f38 <col:36, col:62>
|   `-ReturnStmt 0x55e94c021f28 <col:38, col:59>
|     `-UnaryOperator 0x55e94c021f10 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e94c021ef0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e94c021ed8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e94c021e50 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55e94c016fd8
|         |   `-CXXMemberCallExpr 0x55e94c021e30 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e94c021e00 <col:46> '<bound member function type>' ->xanno 0x55e94c00bff8
|         |       `-CXXThisExpr 0x55e94c021df0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e94c021e80 <col:58> 'int' 0
|-CXXMethodDecl 0x55e94c00e538 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55e94c0220d0 <col:26, col:53>
|   `-ReturnStmt 0x55e94c0220c0 <col:28, col:50>
|     `-UnaryOperator 0x55e94c0220a8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e94c022088 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e94c022070 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e94c022020 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55e94c0172d8
|         |   `-CXXMemberCallExpr 0x55e94c022000 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55e94c021fd0 <col:36> '<bound member function type>' ->xanno 0x55e94c00c198
|         |       `-CXXThisExpr 0x55e94c021fc0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55e94c022050 <col:49> 'int' 0
|-CXXMethodDecl 0x55e94c00e658 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55e94c0222a8 <col:38, col:65>
|   `-ReturnStmt 0x55e94c022298 <col:40, col:62>
|     `-UnaryOperator 0x55e94c022280 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55e94c022260 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55e94c022248 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e94c0221b8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55e94c0172d8
|         |   `-CXXMemberCallExpr 0x55e94c022198 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e94c022168 <col:48> '<bound member function type>' ->xanno 0x55e94c00bff8
|         |       `-CXXThisExpr 0x55e94c022158 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55e94c0221e8 <col:61> 'int' 0
|-CXXMethodDecl 0x55e94c00e808 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55e94c00e710 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55e94c022978 <col:34, line:463:5>
|   |-ParenExpr 0x55e94c0227c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e94c022790 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c0223f8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c0223c8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c022318 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c022300 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c0222c0 <col:23> 'int' lvalue ParmVar 0x55e94c00e710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c0222e0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c0223a8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c022378 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c022338 <col:33> 'int' lvalue ParmVar 0x55e94c00e710 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e94c022390 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e94c022358 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e94c022458 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c022438 <col:56> 'int' 0
|   |   `-CallExpr 0x55e94c0226f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e94c0226d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c0226b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c022730 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c022548 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e94c022748 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c022578 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c022760 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c0225b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55e94c022778 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c0226a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c022688 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c022648 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55e94c022968 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55e94c022950 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55e94c022930 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55e94c022900 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55e94c0228b0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55e94c016fd8
|         |   `-CXXMemberCallExpr 0x55e94c022890 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55e94c022860 <col:9> '<bound member function type>' ->xanno 0x55e94c00bff8
|         |       `-CXXThisExpr 0x55e94c022850 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55e94c022918 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55e94c0228e0 <col:21> 'int' lvalue ParmVar 0x55e94c00e710 'i' 'int'
|-CXXMethodDecl 0x55e94c00ea58 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55e94c00e8c8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55e94c00e940 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55e94c023008 <col:40, line:472:5>
|   |-ParenExpr 0x55e94c022e20 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55e94c022df0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c022ad0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c022aa0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c0229f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c0229d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c022998 <col:23> 'int' lvalue ParmVar 0x55e94c00e8c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c0229b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c022a80 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c022a50 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c022a10 <col:33> 'int' lvalue ParmVar 0x55e94c00e8c8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55e94c022a68 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55e94c022a30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55e94c022b30 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c022b10 <col:56> 'int' 0
|   |   `-CallExpr 0x55e94c022d50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55e94c022d38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c022d18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c022d90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c022ba0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55e94c022da8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c022bd0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c022dc0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c022c08 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55e94c022dd8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c022d00 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c022ce8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c022ca8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55e94c022fe8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55e94c022f90 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55e94c022f60 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55e94c022f10 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55e94c016fd8
|     | |   `-CXXMemberCallExpr 0x55e94c022ef0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55e94c022ec0 <col:2> '<bound member function type>' ->xanno 0x55e94c00c198
|     | |       `-CXXThisExpr 0x55e94c022eb0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55e94c022f78 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55e94c022f40 <col:14> 'int' lvalue ParmVar 0x55e94c00e8c8 'i' 'int'
|     `-ImplicitCastExpr 0x55e94c022fd0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55e94c022fb0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55e94c00e940 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55e94c00ec18 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55e94c00eb20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e94c023788 <col:36, line:485:5>
|   |-ParenExpr 0x55e94c0234f0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c0234c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c0231a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c023170 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c023080 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c023068 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c023028 <col:23> 'int' lvalue ParmVar 0x55e94c00eb20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c023048 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c023150 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c023138 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c0230a0 <col:33> 'int' lvalue ParmVar 0x55e94c00eb20 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c023118 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c023100 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c0230c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c0230e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e94c023200 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c0231e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c023420 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c023408 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c0233e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c023460 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c023270 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e94c023478 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c0232a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c023490 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c0232e0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55e94c0234a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c0233d0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c0233b8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c023378 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55e94c023778 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55e94c023760 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55e94c023748 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e94c023718 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55e94c0236b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e94c023688 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e94c023600 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e94c016eb0
|             |   `-CXXMemberCallExpr 0x55e94c0235e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e94c0235b0 <col:61> '<bound member function type>' ->xanno 0x55e94c00bff8
|             |       `-CXXThisExpr 0x55e94c0235a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e94c0236a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e94c023630 <col:74> 'int' lvalue ParmVar 0x55e94c00eb20 'i' 'int'
|-CXXMethodDecl 0x55e94c00ee68 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55e94c00ecd8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e94c00ed50 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55e94c023ed8 <col:42, line:500:5>
|   |-ParenExpr 0x55e94c023c70 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c023c40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c023920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c0238f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c023800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c0237e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c0237a8 <col:23> 'int' lvalue ParmVar 0x55e94c00ecd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c0237c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c0238d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c0238b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c023820 <col:33> 'int' lvalue ParmVar 0x55e94c00ecd8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c023898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c023880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c023840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c023860 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e94c023980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c023960 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c023ba0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c023b88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c023b68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c023be0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c0239f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e94c023bf8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c023a28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c023c10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c023a60 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55e94c023c28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c023b50 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c023b38 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c023af8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55e94c023eb8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55e94c023e68 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e94c023e38 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e94c023de0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e94c023db0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e94c023d60 <col:48, col:57> 'char [48]' lvalue ->c 0x55e94c016eb0
|     |     |   `-CXXMemberCallExpr 0x55e94c023d40 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e94c023d10 <col:48> '<bound member function type>' ->xanno 0x55e94c00c198
|     |     |       `-CXXThisExpr 0x55e94c023d00 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e94c023dc8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e94c023d90 <col:61> 'int' lvalue ParmVar 0x55e94c00ecd8 'i' 'int'
|     `-ImplicitCastExpr 0x55e94c023ea0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55e94c023e80 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55e94c00ed50 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55e94c00f028 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55e94c00ef30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e94c024638 <col:35, line:513:5>
|   |-ParenExpr 0x55e94c024348 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c024318 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c024070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c024040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c023f50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c023f38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c023ef8 <col:23> 'int' lvalue ParmVar 0x55e94c00ef30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c023f18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c024020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c024008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c023f70 <col:33> 'int' lvalue ParmVar 0x55e94c00ef30 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c023fe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c023fd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c023f90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c023fb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e94c0240d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c0240b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c024278 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c024260 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c024240 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c0242b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c024140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e94c0242d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c024178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c0242e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c0241b0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55e94c024300 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c024228 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c024210 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c0241d0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55e94c024628 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55e94c024610 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55e94c0245f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e94c0245c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55e94c024540 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e94c024510 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e94c0244c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e94c016eb0
|             |   `-CXXMemberCallExpr 0x55e94c0244a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e94c024470 <col:60> '<bound member function type>' ->xanno 0x55e94c00bff8
|             |       `-CXXThisExpr 0x55e94c024460 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e94c024528 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e94c0244f0 <col:73> 'int' lvalue ParmVar 0x55e94c00ef30 'i' 'int'
|-CXXMethodDecl 0x55e94c00f278 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55e94c00f0e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e94c00f160 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55e94c024d58 <col:41, line:528:5>
|   |-ParenExpr 0x55e94c024ae0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c024ab0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c0247d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c0247a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c0246b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c024698 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c024658 <col:23> 'int' lvalue ParmVar 0x55e94c00f0e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c024678 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c024780 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c024768 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c0246d0 <col:33> 'int' lvalue ParmVar 0x55e94c00f0e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c024748 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c024730 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c0246f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c024710 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55e94c024830 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c024810 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c024a10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c0249f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c0249d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c024a50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c0248a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55e94c024a68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c0248d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c024a80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c024910 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55e94c024a98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c0249c0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c0249a8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c024968 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55e94c024d38 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55e94c024ce8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e94c024cb8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55e94c024c60 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e94c024c20 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e94c024bd0 <col:47, col:56> 'char [48]' lvalue ->c 0x55e94c016eb0
|     |     |   `-CXXMemberCallExpr 0x55e94c024bb0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e94c024b80 <col:47> '<bound member function type>' ->xanno 0x55e94c00c198
|     |     |       `-CXXThisExpr 0x55e94c024b70 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e94c024c38 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e94c024c00 <col:60> 'int' lvalue ParmVar 0x55e94c00f0e8 'i' 'int'
|     `-ImplicitCastExpr 0x55e94c024d20 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55e94c024d00 <col:65> 'int16_t':'short' lvalue ParmVar 0x55e94c00f160 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55e94c00f438 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55e94c00f340 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e94c025428 <col:36, line:541:5>
|   |-ParenExpr 0x55e94c0251c8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c025198 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c024ef0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c024ec0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c024dd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c024db8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c024d78 <col:23> 'int' lvalue ParmVar 0x55e94c00f340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c024d98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c024ea0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c024e88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c024df0 <col:33> 'int' lvalue ParmVar 0x55e94c00f340 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c024e68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c024e50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c024e10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c024e30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e94c024f50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c024f30 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c0250f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c0250e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c0250c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c025138 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c024fc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e94c025150 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c024ff8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c025168 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c025030 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55e94c025180 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c0250a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c025090 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c025050 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55e94c025418 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55e94c025400 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e94c0253e8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e94c0253b8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55e94c025360 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e94c025330 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e94c0252e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e94c016eb0
|             |   `-CXXMemberCallExpr 0x55e94c0252c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e94c025290 <col:61> '<bound member function type>' ->xanno 0x55e94c00bff8
|             |       `-CXXThisExpr 0x55e94c025280 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e94c025348 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e94c025310 <col:74> 'int' lvalue ParmVar 0x55e94c00f340 'i' 'int'
|-CXXMethodDecl 0x55e94c00f608 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55e94c00f4f8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55e94c00f570 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55e94c00f6b8 <col:20>
| `-OptimizeNoneAttr 0x55e94c00f710 <col:30>
|-CXXMethodDecl 0x55e94c00f848 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55e94c00f750 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55e94c025af8 <col:35, line:562:5>
|   |-ParenExpr 0x55e94c025898 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c025868 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c0255c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c025590 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c0254a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c025488 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c025448 <col:23> 'int' lvalue ParmVar 0x55e94c00f750 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c025468 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c025570 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c025558 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c0254c0 <col:33> 'int' lvalue ParmVar 0x55e94c00f750 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c025538 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c025520 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c0254e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c025500 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e94c025620 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c025600 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c0257c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c0257b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c025790 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c025808 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c025690 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e94c025820 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c0256c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c025838 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c025700 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55e94c025850 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c025778 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c025760 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c025720 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55e94c025ae8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55e94c025ad0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55e94c025ab8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e94c025a88 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55e94c025a30 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e94c025a00 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e94c0259b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55e94c016eb0
|             |   `-CXXMemberCallExpr 0x55e94c025990 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e94c025960 <col:60> '<bound member function type>' ->xanno 0x55e94c00bff8
|             |       `-CXXThisExpr 0x55e94c025950 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e94c025a18 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e94c0259e0 <col:73> 'int' lvalue ParmVar 0x55e94c00f750 'i' 'int'
|-CXXMethodDecl 0x55e94c00fa58 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55e94c00f908 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e94c00f980 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55e94c0261d8 <col:41, line:577:5>
|   |-ParenExpr 0x55e94c025f68 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c025f38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c025c90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c025c60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c025b70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c025b58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c025b18 <col:23> 'int' lvalue ParmVar 0x55e94c00f908 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c025b38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c025c40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c025c28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c025b90 <col:33> 'int' lvalue ParmVar 0x55e94c00f908 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c025c08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c025bf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c025bb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c025bd0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55e94c025cf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c025cd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c025e98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c025e80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c025e60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c025ed8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c025d60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55e94c025ef0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c025d98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c025f08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c025dd0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55e94c025f20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c025e48 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c025e30 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c025df0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55e94c0261b8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55e94c026168 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e94c026138 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55e94c0260d8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e94c0260a8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e94c026058 <col:47, col:56> 'char [48]' lvalue ->c 0x55e94c016eb0
|     |     |   `-CXXMemberCallExpr 0x55e94c026038 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e94c026008 <col:47> '<bound member function type>' ->xanno 0x55e94c00c198
|     |     |       `-CXXThisExpr 0x55e94c025ff8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e94c0260c0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e94c026088 <col:60> 'int' lvalue ParmVar 0x55e94c00f908 'i' 'int'
|     `-ImplicitCastExpr 0x55e94c0261a0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55e94c026180 <col:65> 'int32_t':'int' lvalue ParmVar 0x55e94c00f980 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55e94c00fc18 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55e94c00fb20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55e94c026908 <col:36, line:591:5>
|   |-ParenExpr 0x55e94c026648 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c026618 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c026370 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c026340 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c026250 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c026238 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c0261f8 <col:23> 'int' lvalue ParmVar 0x55e94c00fb20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c026218 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c026320 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c026308 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c026270 <col:33> 'int' lvalue ParmVar 0x55e94c00fb20 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c0262e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c0262d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c026290 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c0262b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e94c0263d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c0263b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c026578 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c026560 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c026540 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c0265b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c026440 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e94c0265d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c026478 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c0265e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c0264b0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55e94c026600 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c026528 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c026510 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c0264d0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55e94c0268f8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55e94c0268e0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55e94c0268c8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e94c026898 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55e94c026810 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e94c0267e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e94c026790 <col:61, col:70> 'char const[48]' lvalue ->c 0x55e94c016eb0
|             |   `-CXXMemberCallExpr 0x55e94c026770 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e94c026740 <col:61> '<bound member function type>' ->xanno 0x55e94c00bff8
|             |       `-CXXThisExpr 0x55e94c026730 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e94c0267f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e94c0267c0 <col:74> 'int' lvalue ParmVar 0x55e94c00fb20 'i' 'int'
|-CXXMethodDecl 0x55e94c00fe68 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55e94c00fcd8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e94c00fd50 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55e94c026fe8 <col:42, line:606:5>
|   |-ParenExpr 0x55e94c026d78 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55e94c026d48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c026aa0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c026a70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c026980 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c026968 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c026928 <col:23> 'int' lvalue ParmVar 0x55e94c00fcd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c026948 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c026a50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55e94c026a38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c0269a0 <col:33> 'int' lvalue ParmVar 0x55e94c00fcd8 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c026a18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c026a00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c0269c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55e94c0269e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55e94c026b00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c026ae0 <col:60> 'int' 0
|   |   `-CallExpr 0x55e94c026ca8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55e94c026c90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c026c70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c026ce8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c026b70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55e94c026d00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c026ba8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c026d18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c026be0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55e94c026d30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c026c58 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c026c40 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c026c00 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55e94c026fc8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55e94c026f78 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e94c026f48 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55e94c026ee8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e94c026eb8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e94c026e68 <col:48, col:57> 'char [48]' lvalue ->c 0x55e94c016eb0
|     |     |   `-CXXMemberCallExpr 0x55e94c026e48 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e94c026e18 <col:48> '<bound member function type>' ->xanno 0x55e94c00c198
|     |     |       `-CXXThisExpr 0x55e94c026e08 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e94c026ed0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e94c026e98 <col:61> 'int' lvalue ParmVar 0x55e94c00fcd8 'i' 'int'
|     `-ImplicitCastExpr 0x55e94c026fb0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55e94c026f90 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55e94c00fd50 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55e94c010000 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55e94c00ff30 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55e94c027858 <col:33, line:620:5>
|   |-ParenExpr 0x55e94c0275d0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e94c0275a0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c0271f0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c0271c0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c027060 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c027048 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c027008 <col:23> 'int' lvalue ParmVar 0x55e94c00ff30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c027028 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c0271a0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e94c027188 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c027080 <col:33> 'int' lvalue ParmVar 0x55e94c00ff30 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c027168 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c027150 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c0270a0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e94c027128 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e94c027110 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e94c0270d8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e94c027250 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c027230 <col:79> 'int' 0
|   |   `-CallExpr 0x55e94c027500 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e94c0274e8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c0274c8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c027540 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c027338 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e94c027558 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c027380 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c027570 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c0273b8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55e94c027588 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c0274b0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c027498 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c027458 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55e94c027848 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55e94c027830 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55e94c027818 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55e94c0277e8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55e94c027760 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55e94c027730 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55e94c0276e0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55e94c016eb0
|             |   `-CXXMemberCallExpr 0x55e94c0276c0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55e94c027690 <col:67> '<bound member function type>' ->xanno 0x55e94c00bff8
|             |       `-CXXThisExpr 0x55e94c027680 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55e94c027748 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55e94c027710 <col:80> 'int' lvalue ParmVar 0x55e94c00ff30 'i' 'int'
|-CXXMethodDecl 0x55e94c010218 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55e94c0100c0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55e94c010140 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55e94c028080 <col:45, line:635:5>
|   |-ParenExpr 0x55e94c027dc8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55e94c027d98 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55e94c027a60 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55e94c027a30 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55e94c0278d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55e94c0278b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55e94c027878 <col:23> 'int' lvalue ParmVar 0x55e94c0100c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55e94c027898 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55e94c027a10 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55e94c0279f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55e94c0278f0 <col:33> 'int' lvalue ParmVar 0x55e94c0100c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55e94c0279d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55e94c0279c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55e94c027910 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55e94c00c3e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55e94c027998 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55e94c027980 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55e94c027948 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55e94c027ac0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55e94c027aa0 <col:79> 'int' 0
|   |   `-CallExpr 0x55e94c027cf8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55e94c027ce0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55e94c027cc0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55e94bb78a90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55e94c027d38 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c027b30 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55e94c027d50 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55e94c027b78 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55e94c027d68 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55e94c027bb0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55e94c027d80 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55e94c027ca8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55e94c027c90 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55e94c027c48 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55e94c028060 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55e94c027fc8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55e94c027f98 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55e94c027f38 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55e94c027f08 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55e94c027eb8 <col:54, col:63> 'char [48]' lvalue ->c 0x55e94c016eb0
|     |     |   `-CXXMemberCallExpr 0x55e94c027e98 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55e94c027e68 <col:54> '<bound member function type>' ->xanno 0x55e94c00c198
|     |     |       `-CXXThisExpr 0x55e94c027e58 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55e94c027f20 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55e94c027ee8 <col:67> 'int' lvalue ParmVar 0x55e94c0100c0 'i' 'int'
|     `-CXXConstCastExpr 0x55e94c028030 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55e94c028018 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55e94c027fe0 <col:91> 'const void *' lvalue ParmVar 0x55e94c010140 'x' 'const void *'
|-CXXMethodDecl 0x55e94c0102e8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55e94c028108 <col:34, line:640:5>
|   `-ReturnStmt 0x55e94c0280f8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55e94c0280e0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55e94c0280b0 <col:16> 'Packet *' lvalue ->_data_packet 0x55e94c017a68
|         `-CXXThisExpr 0x55e94c0280a0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55e94c010428 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55e94c010398 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55e94c0211c8 <col:46> 'bool' true
|-CXXMethodDecl 0x55e94c0105a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55e94c0104e0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55e94c010650 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55e94c010e00 <line:660:22> "" ""
| |-EnumConstantDecl 0x55e94c010750 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010e70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010730 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55e94c010710 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e94c0058b0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e94c0107e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010e88 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c0107c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55e94c0107a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55e94c005940 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55e94c010870 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010ea0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010850 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55e94c010830 <col:21> 'int' 0
| |-EnumConstantDecl 0x55e94c010900 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010eb8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c0108e0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55e94c0108c0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55e94c010990 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010ed0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010970 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55e94c010950 <col:21> 'int' 16
| |-EnumConstantDecl 0x55e94c010a20 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010ee8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010a00 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55e94c0109e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55e94c010ab0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010f00 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010a90 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55e94c010a70 <col:19> 'int' EnumConstant 0x55e94c010900 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e94c010b40 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010f18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010b20 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55e94c010b00 <col:19> 'int' EnumConstant 0x55e94c010a20 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55e94c010c10 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010f30 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010bf0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55e94c010bd0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e94c010b90 <col:23> 'int' EnumConstant 0x55e94c010b40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e94c010bb0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55e94c010ce0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55e94c010f48 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55e94c010cc0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55e94c010ca0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55e94c010c60 <col:23> 'int' EnumConstant 0x55e94c010b40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55e94c010c80 <col:40> 'int' 4
| `-EnumConstantDecl 0x55e94c010db0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55e94c010f60 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55e94c010d90 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55e94c010d70 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55e94c010d30 <col:23> 'int' EnumConstant 0x55e94c010b40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55e94c010d50 <col:40> 'int' 8
|-CXXMethodDecl 0x55e94c010fa0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55e94c011040 <col:68> "" ""
|-CXXMethodDecl 0x55e94c0110d8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55e94c011178 <col:45> "" ""
|-CXXMethodDecl 0x55e94c011210 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e94c0112b0 <col:57> "" ""
|-CXXMethodDecl 0x55e94c011348 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55e94c0113e8 <col:45> "" ""
|-CXXMethodDecl 0x55e94c011480 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55e94c011520 <col:57> "" ""
|-CXXMethodDecl 0x55e94c0115b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e94c011650 <col:51> "" ""
|-CXXMethodDecl 0x55e94c0116e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e94c011780 <col:63> "" ""
|-CXXMethodDecl 0x55e94c011810 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e94c0118b0 <col:53> "" ""
|-CXXMethodDecl 0x55e94c011940 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e94c0119e0 <col:65> "" ""
|-CXXMethodDecl 0x55e94c011af8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e94c011a68 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55e94c011ba0 <col:61> "" ""
|-CXXMethodDecl 0x55e94c011d38 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e94c011c28 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55e94c011ca0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e94c011de8 <col:67> "" ""
|-CXXMethodDecl 0x55e94c011f00 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e94c011e70 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e94c011fa8 <col:63> "" ""
|-CXXMethodDecl 0x55e94c012140 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e94c012030 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e94c0120a8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e94c0121f0 <col:69> "" ""
|-CXXMethodDecl 0x55e94c012308 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e94c012278 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e94c0123b0 <col:63> "" ""
|-CXXMethodDecl 0x55e94c014a88 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e94c014978 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e94c0149f0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e94c014b38 <col:69> "" ""
|-CXXMethodDecl 0x55e94c014c50 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e94c014bc0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55e94c014cf8 <col:62> "" ""
|-CXXMethodDecl 0x55e94c014e90 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e94c014d80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e94c014df8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55e94c014f40 <col:68> "" ""
|-CXXMethodDecl 0x55e94c015058 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55e94c014fc8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55e94c015100 <col:63> "" ""
|-CXXMethodDecl 0x55e94c015298 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55e94c015188 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55e94c015200 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55e94c015348 <col:69> "" ""
|-CXXMethodDecl 0x55e94c0153d8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55e94c015478 <col:64> "" ""
|-CXXMethodDecl 0x55e94c015508 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55e94c0155a8 <col:52> "" ""
|-CXXMethodDecl 0x55e94c015638 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55e94c0156d8 <col:67> "" ""
|-CXXMethodDecl 0x55e94c015768 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55e94c015808 <col:55> "" ""
|-CXXMethodDecl 0x55e94c015920 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55e94c015890 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e94c0159c8 <col:58> "" ""
|-CXXMethodDecl 0x55e94c015b60 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55e94c015a50 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e94c015ac8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55e94c015c10 <col:62> "" ""
|-CXXMethodDecl 0x55e94c015d28 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55e94c015c98 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e94c015dd0 <col:58> "" ""
|-CXXMethodDecl 0x55e94c015f68 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55e94c015e58 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e94c015ed0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55e94c016018 <col:62> "" ""
|-CXXMethodDecl 0x55e94c016130 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55e94c0160a0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55e94c0161d8 <col:60> "" ""
|-CXXMethodDecl 0x55e94c016370 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55e94c016260 <col:34> col:37 'int'
| |-ParmVarDecl 0x55e94c0162d8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55e94c016420 <col:64> "" ""
|-CXXMethodDecl 0x55e94c016538 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55e94c0164a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55e94c0165e0 <col:58> "" ""
|-CXXMethodDecl 0x55e94c016778 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55e94c016668 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e94c0166e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55e94c016828 <col:62> "" ""
|-CXXMethodDecl 0x55e94c016940 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55e94c0168b0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55e94c0169e8 <col:59> "" ""
|-CXXMethodDecl 0x55e94c016b80 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55e94c016a70 <col:33> col:36 'int'
| |-ParmVarDecl 0x55e94c016ae8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55e94c016c30 <col:63> "" ""
|-AccessSpecDecl 0x55e94c016ca0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55e94c016cc8 prev 0x55e94c00bed0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e94c016dc0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55e94c016eb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55e94c016fd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55e94c017158 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55e94c0172d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55e94c017458 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55e94c028288 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55e94c028af8 <col:11>
| |-CXXDestructorDecl 0x55e94c028360 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55e94c028498 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55e94c028498
| | `-ParmVarDecl 0x55e94c0285a8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55e94c028648 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e94c028648
| | `-ParmVarDecl 0x55e94c028758 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55e94c02b518 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55e94c02b628 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55e94c02b8a8 <col:11>
| |   `-ReturnStmt 0x55e94c02b898 <col:11>
| |     `-UnaryOperator 0x55e94c02b880 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55e94c02b870 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55e94c02b698 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55e94c02b698
|   `-ParmVarDecl 0x55e94c02b7a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55e94c0174c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55e94c0175d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55e94c017678 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55e94c0176e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55e94c017748 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55e94c0177b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55e94c017810 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55e94c0178d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55e94c017930 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55e94c017990 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55e94c028198 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55e94c017678 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55e94c028b08 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55e94c028b60 <col:12>
| |-CXXConstructorDecl 0x55e94c0287c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55e94c0287c8
| | `-ParmVarDecl 0x55e94c0288d8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55e94c028978 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55e94c028978
| | `-ParmVarDecl 0x55e94c028a88 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55e94c02ac00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55e94c017a08 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55e94c017a68 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55e94c017ad0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55e94c017b38 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55e94c017ba0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55e94c017c08 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55e94c017c68 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55e94c017cc8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55e94c017d30 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55e94c017db8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55e94c017a08 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55e94c028130 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55e94c017c68 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55e94c028b70 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55e94c028bd0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55e94c017f58 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55e94c017e98 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55e94c018050 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55e94c018238 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55e94c018140 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55e94c018508 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55e94c0182f0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e94c018368 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e94c0183e0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c018728 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55e94c0185d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55e94c018650 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55e94c020d08 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55e94c0187e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55e94c018860 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55e94c0188d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55e94c020e60 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e94c020dd0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c020fa8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55e94c020f18 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55e94c0210a0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94bd72fe8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94bd73108 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55e94bd731d0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55e94be437a0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55e94be48ab8 <col:8>
|-CXXConstructorDecl 0x55e94be438a8 <col:8> col:8 implicit used constexpr in_addr 'void (const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55e94be439b8 <col:8> col:8 used 'const in_addr &'
| |-CXXCtorInitializer Field 0x55e94bd731d0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94c111f10 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55e94c111ee0 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x55e94bd731d0
| |     `-DeclRefExpr 0x55e94c111ec0 <col:8> 'const in_addr' lvalue ParmVar 0x55e94be439b8 '' 'const in_addr &'
| `-CompoundStmt 0x55e94c111f58 <col:8>
|-CXXConstructorDecl 0x55e94be43a58 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e94be43b68 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55e94bd731d0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be48cd0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55e94be48ca0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55e94bd731d0
| |     `-CXXStaticCastExpr 0x55e94be48c70 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55e94be48c40 <col:8> 'in_addr' lvalue ParmVar 0x55e94be43b68 '' 'in_addr &&'
| `-CompoundStmt 0x55e94be48d18 <col:8>
`-CXXDestructorDecl 0x55e94be48f50 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94be3b488 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55e94be3b5a8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55e94be3b690 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55e94be3b670 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55e94be3b638 <col:22> 'int' 4
|-FieldDecl 0x55e94be3b738 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55e94be3b718 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55e94be3b6e0 <col:21> 'int' 4
|-FieldDecl 0x55e94be3b798 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55e94be3b7f8 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55e94be3b858 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55e94be3b8b8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55e94be3b918 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55e94be3b978 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55e94be3b9d8 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55e94be3ba48 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55e94be3bab8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94be3e3d0 prev 0x55e94bda4418 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94be3e4c8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55e94be3e558 <col:19, col:25> col:19 public
|-TypedefDecl 0x55e94be3e590 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55e94bc31cf0 'uninitialized_type'
|   `-CXXRecord 0x55e94bc31c58 'uninitialized_type'
|-CXXConstructorDecl 0x55e94be3e650 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55e94be42db0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be42e58 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55e94be42e18 <col:10> 'int' 0
| `-CompoundStmt 0x55e94be42ea0 <col:13, line:22:5>
|-CXXConstructorDecl 0x55e94be3e7a0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55e94be3e710 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55e94be42db0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be42ef0 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55e94be42eb0 <col:10> 'unsigned int' lvalue ParmVar 0x55e94be3e710 'x' 'unsigned int'
| `-CompoundStmt 0x55e94be42f38 <col:13, line:27:5>
|-CXXConstructorDecl 0x55e94be3e8f8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55e94be3e868 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55e94be42db0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be42fa0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55e94be42f88 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55e94be42f48 <col:10> 'int' lvalue ParmVar 0x55e94be3e868 'x' 'int'
| `-CompoundStmt 0x55e94be42fe8 <col:13, line:31:5>
|-CXXConstructorDecl 0x55e94be3ea50 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55e94be3e9c0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55e94be42db0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be43050 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55e94be43038 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55e94be42ff8 <col:10> 'unsigned long' lvalue ParmVar 0x55e94be3e9c0 'x' 'unsigned long'
| `-CompoundStmt 0x55e94be43098 <col:13, line:35:5>
|-CXXConstructorDecl 0x55e94be3eba8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55e94be3eb18 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55e94be42db0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be43100 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55e94be430e8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55e94be430a8 <col:10> 'long' lvalue ParmVar 0x55e94be3eb18 'x' 'long'
| `-CompoundStmt 0x55e94be43148 <col:13, line:39:5>
|-CXXConstructorDecl 0x55e94be3ed68 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55e94be3ec78 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55e94be42db0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be431c8 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55e94be43178 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55e94bd731d0
| |     `-DeclRefExpr 0x55e94be43158 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55e94be3ec78 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55e94be43210 <col:20, line:44:5>
|-CXXConstructorDecl 0x55e94be3eef8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55e94be3ee30 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55e94be43378 <col:51, line:56:5>
|   `-BinaryOperator 0x55e94be43358 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55e94be43230 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55e94be42db0
|     | `-CXXThisExpr 0x55e94be43220 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55e94be43340 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55e94be43328 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55e94be43308 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55e94be432d8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55e94be432c0 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55e94be43260 <col:47> 'const unsigned char *' lvalue ParmVar 0x55e94be3ee30 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55e94be3f048 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55e94be3efb8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55e94be3f1f8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55e94be3f138 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55e94be433e8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55e94be433c0 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55e94be43390 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55e94be3f138 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55e94be3f388 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55e94be3f2c0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55e94be3f478 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55e94be443a8 <col:46, line:83:5>
|   `-ReturnStmt 0x55e94be44398 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55e94be44380 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55e94be44350 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55e94be44208 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55e94be440f0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55e94be43fd8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55e94be43410 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55e94be3f568 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55e94be44458 <col:31, line:88:5>
|   `-ReturnStmt 0x55e94be44448 <line:87:2, col:10>
|     `-UnaryOperator 0x55e94be44430 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55e94be44418 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55e94be44400 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55e94be443d0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e94be42db0
|             `-CXXThisExpr 0x55e94be443c0 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55e94be3f628 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55e94be444d8 <col:34, line:93:5>
|   `-ReturnStmt 0x55e94be444c8 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55e94be444b0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55e94be44480 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e94be42db0
|         `-CXXThisExpr 0x55e94be44470 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55e94be3f6f8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55e94be44558 <col:38, line:101:5>
|   `-ReturnStmt 0x55e94be44548 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55e94be44530 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55e94be44500 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e94be42db0
|         `-CXXThisExpr 0x55e94be444f0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55e94be3f7c8 <line:106:5, line:108:5> line:106:17 used is_multicast 'bool () const' inline
| `-CompoundStmt 0x55e94be44828 <col:38, line:108:5>
|   `-ReturnStmt 0x55e94be44818 <line:107:2, col:58>
|     `-BinaryOperator 0x55e94be447f8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55e94be44710 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55e94be446f0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55e94be446d8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55e94be44580 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e94be42db0
|       |   |   `-CXXThisExpr 0x55e94be44570 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55e94be446b0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55e94be44698 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e94be44618 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e94bd81708 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55e94be445f8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55e94be447d0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55e94be447b8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55e94be44798 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e94bd81708 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55e94be44778 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55e94be3f888 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55e94be44a98 <col:39, line:112:5>
|   `-ReturnStmt 0x55e94be44a88 <line:111:2, col:56>
|     `-BinaryOperator 0x55e94be44a68 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55e94be44980 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55e94be44960 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55e94be44948 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55e94be44850 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55e94be42db0
|       |   |   `-CXXThisExpr 0x55e94be44840 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55e94be44920 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55e94be44908 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55e94be448e8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e94bd81708 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55e94be448c8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55e94be44a40 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55e94be44a28 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55e94be44a08 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55e94bd81708 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55e94be449e8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55e94be3f9b8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55e94be3fac0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55e94be3fbd0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55e94be41ca8 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55e94be41d68 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55e94be41e30 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55e94be42028 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55e94be41ee0 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55e94be41f58 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55e94be421a8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55e94be420e8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55e94be422f0 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55e94be42260 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55e94be42498 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55e94be423a8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55e94be425e0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55e94be42550 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55e94be42728 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55e94be42698 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55e94be427f0 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55e94be428b0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55e94be42a28 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55e94be42960 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55e94be42af0 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55e94be42bd8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55e94be42c80 <col:51> "" ""
|-TypedefDecl 0x55e94be42d20 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55e94bda44b0 'IPAddress'
|   `-CXXRecord 0x55e94be3e3d0 'IPAddress'
|-AccessSpecDecl 0x55e94be42d78 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55e94be42db0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55e94be43458 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55e94be43458
| `-ParmVarDecl 0x55e94be43568 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55e94be43608 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e94be43718 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55e94be42db0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55e94be442f8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55e94be442b0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55e94be42db0
| |     `-CXXStaticCastExpr 0x55e94be44280 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55e94be44250 <col:7> 'IPAddress' lvalue ParmVar 0x55e94be43718 '' 'IPAddress &&'
| `-CompoundStmt 0x55e94be44340 <col:7>
`-CXXDestructorDecl 0x55e94be44008 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c028c70 prev 0x55e94c005530 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55e94c028da8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55e94c028e38 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55e94c028ee0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55e94c028f80 <col:20>
| `-OptimizeNoneAttr 0x55e94c028fd8 <col:30>
|-CXXMethodDecl 0x55e94c029028 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55e94c0290c8 <col:20>
| `-OptimizeNoneAttr 0x55e94c029120 <col:30>
|-CXXMethodDecl 0x55e94c029170 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e94c029238 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e94c029300 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e94c029418 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55e94c0294e0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55e94c029580 <col:20>
| `-OptimizeNoneAttr 0x55e94c0295d8 <col:30>
|-CXXMethodDecl 0x55e94c029648 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55e94c0296e8 <col:20>
| `-OptimizeNoneAttr 0x55e94c029740 <col:30>
|-CXXMethodDecl 0x55e94c0297e8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55e94c029888 <col:20>
| `-OptimizeNoneAttr 0x55e94c0298e0 <col:30>
|-CXXMethodDecl 0x55e94c029930 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55e94c029a48 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55e94c029b68 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55e94c029c88 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55e94c029d50 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55e94c029df0 <col:62> "" ""
|-AccessSpecDecl 0x55e94c029e60 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55e94c029ec0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55e94c02aab8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55e94c02ace0 <col:29, col:31>
|-CXXMethodDecl 0x55e94c029f88 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55e94c02a0c8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55e94c02a038 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55e94c02a1c0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55e94c02acf0 <col:23, col:25>
|-CXXMethodDecl 0x55e94c02a378 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55e94c02a2b0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55e94c02a648 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55e94c02a430 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55e94c02a4a8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55e94c02a520 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55e94c02a7d8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55e94c02a710 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55e94c02a8d0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55e94c02a938 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55e94c02a938
  `-ParmVarDecl 0x55e94c02aa48 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55e94c106370 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55e94c106488 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55e94c106518 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55e94c106758 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55e94c106550 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55e94c1065d0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55e94c106648 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55e94c106970 <col:81> 'const ArgContext' lvalue Var 0x55e94c0ee5c8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55e94c1068b0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55e94c106820 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55e94c106ac8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55e94c106ab8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55e94c106aa0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55e94c106a70 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55e94c106a58 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55e94c106a30 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55e94c106a10 <col:16, col:24> 'String' (CXXTemporary 0x55e94c106a10)
|               `-CXXConstructExpr 0x55e94c1069d8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55e94c1069c0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55e94c1069a0 <col:23> 'bool' lvalue ParmVar 0x55e94c106820 'x' 'bool'
|-CXXConstructorDecl 0x55e94c14d2f8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55e94c14d3d0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e94c14d508 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55e94c14d508
| `-ParmVarDecl 0x55e94c14d618 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55e94c14d6b8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55e94c14d7c8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55e94c14e420 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55e94c106b08 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55e94c106d68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55e94c14d208 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55e94c14d838 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55e94c14d838
| `-ParmVarDecl 0x55e94c14d948 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55e94c14d9e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55e94c14daf8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55e94c14e430 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55e94c14e400 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55e94c14e3d0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55e94c14e3a0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55e94c14daf8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55e94c14e4a0 <col:19>
`-CXXDestructorDecl 0x55e94c14db98 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
