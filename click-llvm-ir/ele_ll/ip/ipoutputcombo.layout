
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3570c68 prev 0x5600e3568408 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e3570d60 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5600e3570df0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5600e3570e68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5600e3570f28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5600e3570ff0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5600e3571168 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5600e35710a0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5600e3571210 <col:24>
| `-OptimizeNoneAttr 0x5600e3571268 <col:34>
|-CXXMethodDecl 0x5600e35712b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5600e3571568 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5600e3571360 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5600e35713d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5600e3571458 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5600e3571620 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5600e3571658 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5600e35716c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5600e3571748 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5600e3571a68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5600e3571800 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5600e3571878 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5600e35718f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5600e3571970 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5600e3571b80 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5600e35794f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5600e35794f8
| `-ParmVarDecl 0x5600e3579608 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5600e35796a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5600e35796a8
| `-ParmVarDecl 0x5600e35797b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5600e3646568 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3563c80 prev 0x5600e3563a00 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5600e3563d78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5600e3563e08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5600e3563e68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5600e3563f58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5600e3564058 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5600e3564228 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5600e35640d8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5600e3564150 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5600e35643b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5600e35642f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5600e3564460 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5600e3564598 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5600e35644d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5600e3564738 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5600e3564678 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5600e35648d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5600e3564818 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5600e3564980 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5600e3564a80 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5600e3564b60 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3564a60 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5600e3564a40 <col:26> 'int' 1
| `-EnumConstantDecl 0x5600e3564b10 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5600e3564b78 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e3564af0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5600e3564ad0 <col:44> 'int' 2
|-CXXMethodDecl 0x5600e3564cc0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5600e3564ba8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5600e3564c28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5600e3564e18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5600e3564d88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5600e3565058 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5600e3564ed8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5600e3564f50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5600e3565108 <col:20>
| `-OptimizeNoneAttr 0x5600e3565160 <col:30>
|-CXXMethodDecl 0x5600e3565268 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5600e35651a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5600e3565310 <col:20>
| `-OptimizeNoneAttr 0x5600e3565368 <col:30>
|-CXXMethodDecl 0x5600e35653b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5600e3565480 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5600e3565598 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5600e3565620 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5600e35656a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5600e3565730 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5600e35657b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5600e3565848 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5600e3565908 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5600e3565990 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5600e3565a18 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5600e3565aa0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5600e3565b28 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5600e3565bb0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5600e3565c40 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5600e3565d00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5600e3565d90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5600e3565ee0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5600e3565e48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5600e3566070 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5600e3565fa0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5600e3566320 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5600e3566128 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5600e35661a8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5600e3566228 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5600e35663d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5600e35664e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5600e3566770 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e35664c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5600e35664a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5600e3566570 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5600e3566788 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3566550 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5600e3566530 <col:32> 'int' 20
| |-EnumConstantDecl 0x5600e3566600 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5600e35667a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e35665e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5600e35665c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5600e3566690 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5600e35667b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3566670 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5600e3566650 <col:35> 'int' 100
| `-EnumConstantDecl 0x5600e3566720 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5600e35667d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e3566700 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5600e35666e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5600e3566810 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5600e3566c50 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5600e3566ac0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5600e3566b38 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5600e3566d20 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5600e3566ea0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5600e3566dd0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5600e35670a8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5600e3566f58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5600e3566fd0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5600e35671a8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5600e3567248 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5600e3567310 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5600e35673a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5600e35675d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3567380 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5600e3567360 <col:36> 'int' EnumConstant 0x5600e3567310 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5600e35673f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5600e3567440 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5600e3567490 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5600e35674e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5600e3567530 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5600e3567580 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5600e35676b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5600e35675f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5600e3567780 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5600e3567840 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5600e3567900 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5600e35679c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5600e3567ad8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5600e3567ba0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5600e3567d20 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5600e3567c50 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5600e3567e48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5600e3568048 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5600e3567ef8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5600e3567f78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5600e3575998 <col:54, line:127:5>
|   |-ParenExpr 0x5600e3575848 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5600e3575818 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5600e3575508 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5600e35754e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5600e35754c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5600e35754b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5600e3575480 <col:31> 'Router *' lvalue ->_router 0x5600e3573360
|   |   |         `-CXXThisExpr 0x5600e3575470 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5600e3575568 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3575548 <col:48> 'int' 0
|   |   `-CallExpr 0x5600e3575778 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5600e3575760 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e3575740 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e35757b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e35755d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5600e35757d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e35755f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5600e35757e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e3575630 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5600e3575800 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e3575728 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3575710 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e35756c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5600e35758e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5600e3575878 <col:9> 'Router *' lvalue ->_router 0x5600e3573360
|   | | `-CXXThisExpr 0x5600e3575868 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5600e35758c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5600e35758a8 <col:19> 'Router *' lvalue ParmVar 0x5600e3567ef8 'r' 'Router *'
|   `-BinaryOperator 0x5600e3575978 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5600e3575910 <col:9> 'int' lvalue ->_eindex 0x5600e35733c8
|     | `-CXXThisExpr 0x5600e3575900 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5600e3575960 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5600e3575940 <col:19> 'int' lvalue ParmVar 0x5600e3567f78 'eindex' 'int'
|-CXXMethodDecl 0x5600e35681d0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5600e3568108 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5600e35682a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5600e3568368 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5600e3568408 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5600e3568658 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5600e35684d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5600e3568550 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5600e3568708 <col:20>
| `-OptimizeNoneAttr 0x5600e3568760 <col:30>
|-CXXMethodDecl 0x5600e3568868 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5600e35687a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5600e3568910 <col:20>
| `-OptimizeNoneAttr 0x5600e3568968 <col:30>
|-CXXMethodDecl 0x5600e3568a38 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5600e35689a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5600e3568ae0 <col:20>
| `-OptimizeNoneAttr 0x5600e3568b38 <col:30>
|-CXXMethodDecl 0x5600e3568cc8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5600e3568b70 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5600e3568bf0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5600e3568e58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5600e3568d90 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5600e3568fa8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5600e3568f18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5600e35690f8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5600e3569068 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5600e3569248 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5600e35691b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5600e3569508 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5600e3569300 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5600e3569380 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5600e3569428 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5600e35695e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5600e35696a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5600e3569970 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5600e3569820 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5600e3569898 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5600e3569a98 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5600e3569c70 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5600e3569b50 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5600e3569bd0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5600e3569e58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5600e3569d38 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5600e3569db8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5600e356a1c8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5600e3569f18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5600e3569f90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5600e356a010 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5600e3574f80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5600e3574f60 <col:106> 'int' 0
| `-ParmVarDecl 0x5600e356a088 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5600e3574fb8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5600e3574f98 <col:126> 'int' 0
|-CXXMethodDecl 0x5600e356a568 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5600e356a298 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5600e356a330 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5600e356a3b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5600e356a428 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5600e3574ff0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5600e3574fd0 <col:114> 'int' 0
|-CXXMethodDecl 0x5600e356a8f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5600e356a640 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5600e356a6b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5600e356a738 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5600e3575008 <col:96> 'int' 0
| `-ParmVarDecl 0x5600e356a7b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5600e3575048 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5600e3575028 <col:116> 'int' 0
|-CXXMethodDecl 0x5600e356ac78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5600e356a9c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5600e356aa40 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e356aac0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5600e3575080 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5600e3575060 <col:109> 'int' 0
| `-ParmVarDecl 0x5600e356ab38 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5600e35750b8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5600e3575098 <col:129> 'int' 0
|-CXXMethodDecl 0x5600e356aff8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5600e356ad48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5600e356adc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e356ae40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5600e356aeb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5600e35750f0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5600e35750d0 <col:117> 'int' 0
|-CXXMethodDecl 0x5600e356b388 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5600e356b0d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356b148 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e356b1c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5600e3575108 <col:99> 'int' 0
| `-ParmVarDecl 0x5600e356b240 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5600e3575148 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5600e3575128 <col:119> 'int' 0
|-CXXMethodDecl 0x5600e356b7a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5600e356b458 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5600e356b4d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5600e356b550 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e356b5d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5600e3575180 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5600e3575160 <col:108> 'int' 0
| `-ParmVarDecl 0x5600e356b650 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5600e35751b8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5600e3575198 <col:141> 'int' 0
|-CXXMethodDecl 0x5600e356bbc8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5600e356b880 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5600e356b900 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5600e356b978 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e356b9f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5600e356ba78 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5600e35751d0 <col:121> 'int' 0
|-CXXMethodDecl 0x5600e356bff8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5600e356bca8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5600e356bd28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5600e356bda0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e356be20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5600e35751f0 <col:98> 'int' 0
| `-ParmVarDecl 0x5600e356bea0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5600e3575210 <col:123> 'int' 0
|-CXXMethodDecl 0x5600e356c2c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5600e356c0d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5600e356c150 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5600e356c1d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5600e3575230 <col:80> 'int' 0
|-EnumDecl 0x5600e356c378 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5600e356c480 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5600e356c710 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e356c460 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5600e356c440 <col:42> 'int' 1
| |-EnumConstantDecl 0x5600e356c510 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5600e356c728 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e356c4f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5600e356c4d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5600e356c5a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5600e356c740 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e356c580 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5600e356c560 <col:44> 'int' 4
| |-EnumConstantDecl 0x5600e356c630 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5600e356c758 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e356c610 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5600e356c5f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5600e356c6c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5600e356c770 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e356c6a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5600e356c680 <col:34> 'int' 6
|-CXXMethodDecl 0x5600e356ca28 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5600e356c798 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5600e356c838 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5600e356c8b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5600e356c930 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5600e35752e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5600e35752d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5600e35752b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5600e3575298 <col:98, col:105> 'String' (CXXTemporary 0x5600e3575298)
|           `-CXXTemporaryObjectExpr 0x5600e3575260 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5600e356ccc8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5600e356caf8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5600e356cb70 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5600e356cbe8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5600e3575398 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5600e3575380 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5600e3575368 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5600e3575348 <col:94, col:101> 'String' (CXXTemporary 0x5600e3575348)
| |         `-CXXTemporaryObjectExpr 0x5600e3575310 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5600e3575b80 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5600e3575af8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5600e3575ac8 <col:9> '<bound member function type>' ->add_task_handlers 0x5600e356ca28
|     | `-CXXThisExpr 0x5600e3575ab8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5600e3575b38 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e3575a38 <col:27> 'Task *' lvalue ParmVar 0x5600e356caf8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5600e3575b50 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e3575a58 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5600e356cb70 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5600e3575b68 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5600e3575a78 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5600e356c6c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5600e3575a98 <col:62> 'const String' lvalue ParmVar 0x5600e356cbe8 'prefix' 'const String &'
|-CXXMethodDecl 0x5600e356ced8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5600e356cd90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5600e356ce08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5600e3575448 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5600e3575430 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5600e3575418 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5600e35753f8 <col:70, col:77> 'String' (CXXTemporary 0x5600e35753f8)
| |         `-CXXTemporaryObjectExpr 0x5600e35753c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5600e3575d58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5600e3575cd0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5600e3575ca0 <col:9> '<bound member function type>' ->add_task_handlers 0x5600e356ca28
|     | `-CXXThisExpr 0x5600e3575c90 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5600e3575d10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e3575c10 <col:27> 'Task *' lvalue ParmVar 0x5600e356cd90 'task' 'Task *'
|     |-ImplicitCastExpr 0x5600e3575d28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5600e3575c30 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5600e3575d40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5600e3575c50 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5600e356c6c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5600e3575c70 <col:57> 'const String' lvalue ParmVar 0x5600e356ce08 'prefix' 'const String &'
|-CXXMethodDecl 0x5600e356d1b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5600e356cfa0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356d020 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356d098 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5600e356d468 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5600e356d288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356d308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356d388 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5600e356d758 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5600e356d538 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356d5b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356d630 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5600e356da08 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5600e356d828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356d8a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356d928 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5600e356dcb8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5600e356dad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356db58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356dbd8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5600e356df68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5600e356dd88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356de08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356de80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5600e356e218 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5600e356e038 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356e0b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356e138 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5600e356e528 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5600e356e340 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356e3c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356e440 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5600e356e808 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5600e356e5f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356e678 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356e720 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5600e356eae8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5600e356e8d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356e958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356ea00 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5600e356ed50 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5600e356ebb8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5600e356ec38 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5600e356ecb0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5600e356eff8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5600e356ee20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5600e356eea0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5600e356ef18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5600e356f2a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5600e356f0c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356f148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356f1c8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5600e356f558 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5600e356f378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356f3f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356f470 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5600e356f808 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5600e356f628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356f6a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356f720 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5600e356fad8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5600e356f8d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356f958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5600e356f9f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5600e356fe08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5600e356fba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5600e356fc28 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5600e356fca0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5600e356fd18 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5600e3575460 <col:93> 'bool' false
|-CXXMethodDecl 0x5600e356fff0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5600e356fed8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5600e356ff58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5600e35701c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5600e35700b0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5600e3570130 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5600e35704a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5600e3570288 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5600e3570300 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5600e3570380 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5600e35703f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5600e3570798 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5600e3570578 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5600e35705f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5600e3570670 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5600e35706e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5600e35709d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5600e3570870 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5600e35708f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5600e3570bb8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5600e3570a98 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5600e3570b18 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5600e3570c68 prev 0x5600e3568408 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5600e3570d60 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5600e3570df0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5600e3570e68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5600e3570f28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5600e3570ff0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5600e3571168 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5600e35710a0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5600e3571210 <col:24>
| | `-OptimizeNoneAttr 0x5600e3571268 <col:34>
| |-CXXMethodDecl 0x5600e35712b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5600e3571568 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5600e3571360 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5600e35713d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5600e3571458 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5600e3571620 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5600e3571658 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5600e35716c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5600e3571748 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5600e3571a68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5600e3571800 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5600e3571878 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5600e35718f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5600e3571970 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5600e3571b80 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5600e35794f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5600e35794f8
| | `-ParmVarDecl 0x5600e3579608 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5600e35796a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5600e35796a8
| | `-ParmVarDecl 0x5600e35797b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5600e3646568 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5600e3571bf8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5600e3571c98 <col:38> "" ""
|-CXXMethodDecl 0x5600e3571d28 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5600e3571dc8 <col:44> "" ""
|-AccessSpecDecl 0x5600e3571e38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5600e3571e60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5600e3571f60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5600e3571fb0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e3571f40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5600e3571f20 <col:27> 'int' 4
|-FieldDecl 0x5600e3572068 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5600e3572218 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5600e35722d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5600e3573360 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5600e35733c8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5600e3573518 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5600e3573458 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5600e35736c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5600e35735d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5600e35738a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5600e3573788 <col:20> col:23 'int'
| `-ParmVarDecl 0x5600e3573808 <col:25> col:28 'int'
|-CXXMethodDecl 0x5600e3573b50 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5600e3573970 <col:23> col:26 'int'
| |-ParmVarDecl 0x5600e35739f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5600e3573a68 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5600e3573c08 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5600e3573cd0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5600e3573d20 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5600e3573d70 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5600e3573f50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5600e3573e00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5600e3573e78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5600e35741f8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5600e3574018 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5600e3574098 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5600e3574110 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5600e3574418 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5600e35742c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5600e3574348 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5600e3574750 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5600e35744d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5600e3574558 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5600e35745d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5600e3574650 <col:57> col:60 'int'
|-CXXMethodDecl 0x5600e3574938 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5600e3574820 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5600e35748a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5600e3574a88 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5600e35749f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5600e3574e08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5600e3574b48 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5600e3574bc8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5600e3574c40 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5600e3574cc0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5600e3574f20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPOutputCombo
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _color
       112 |   struct in_addr _my_ip
       112 |     in_addr_t s_addr
       116 |   unsigned int _mtu
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3298858 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e3298978 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5600e3298a40 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5600e3369010 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5600e336e328 <col:8>
|-CXXConstructorDecl 0x5600e3369118 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5600e3369118
| `-ParmVarDecl 0x5600e3369228 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5600e33692c8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e33693d8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5600e3298a40 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e336e540 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5600e336e510 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5600e3298a40
| |     `-CXXStaticCastExpr 0x5600e336e4e0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5600e336e4b0 <col:8> 'in_addr' lvalue ParmVar 0x5600e33693d8 '' 'in_addr &&'
| `-CompoundStmt 0x5600e336e588 <col:8>
`-CXXDestructorDecl 0x5600e336e7c0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e357c668 <../elements/ip/ipoutputcombo.hh:43:1, line:64:1> line:43:7 class IPOutputCombo definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5600e357c7c8 <col:1, col:7> col:7 implicit referenced class IPOutputCombo
|-AccessSpecDecl 0x5600e357c858 <line:45:2, col:8> col:2 public
|-CXXConstructorDecl 0x5600e357c8e0 <line:47:3, col:17> col:3 IPOutputCombo 'void ()'
|-CXXDestructorDecl 0x5600e357c9d0 <line:48:3, col:18> col:3 ~IPOutputCombo 'void ()' noexcept-unevaluated 0x5600e357c9d0
| `-Overrides: [ 0x5600e3563f58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5600e357cb00 <line:50:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5600e35653b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5600e357d6f8 <col:34, col:60>
|   `-ReturnStmt 0x5600e357d6e8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5600e357d6d0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5600e357d6a8 <col:43> 'const char [14]' lvalue "IPOutputCombo"
|-CXXMethodDecl 0x5600e357cbc8 <line:51:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5600e3565480 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5600e357d758 <col:34, col:50>
|   `-ReturnStmt 0x5600e357d748 <col:36, col:43>
|     `-ImplicitCastExpr 0x5600e357d730 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5600e357d710 <col:43> 'const char [4]' lvalue "1/5"
|-CXXMethodDecl 0x5600e357cc90 <line:52:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5600e3565848 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5600e357d7b8 <col:34, col:49>
|   `-ReturnStmt 0x5600e357d7a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5600e357d790 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5600e357d770 <col:43> 'const char []' lvalue Var 0x5600e3565990 'PUSH' 'const char []'
|-CXXMethodDecl 0x5600e357cf60 <line:54:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5600e3566c50 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5600e357ce10 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5600e357ce88 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5600e357d138 <line:56:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5600e3564228 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5600e357d028 <col:13> col:16 'int'
| `-ParmVarDecl 0x5600e357d0a0 <col:18, col:25> col:26 'Packet *'
|-AccessSpecDecl 0x5600e357d1e8 <line:58:2, col:9> col:2 private
|-FieldDecl 0x5600e357d228 <line:60:3, col:7> col:7 _color 'int'
|-FieldDecl 0x5600e357d298 <line:61:3, col:18> col:18 _my_ip 'struct in_addr':'in_addr'
|-FieldDecl 0x5600e357d300 <line:62:3, col:12> col:12 _mtu 'unsigned int'
|-CXXConstructorDecl 0x5600e357d378 <line:43:7> col:7 implicit IPOutputCombo 'void (const IPOutputCombo &)' inline default_delete noexcept-unevaluated 0x5600e357d378
| `-ParmVarDecl 0x5600e357d488 <col:7> col:7 'const IPOutputCombo &'
`-CXXMethodDecl 0x5600e357d528 <col:7> col:7 implicit operator= 'IPOutputCombo &(const IPOutputCombo &)' inline default_delete noexcept-unevaluated 0x5600e357d528
  `-ParmVarDecl 0x5600e357d638 <col:7> col:7 'const IPOutputCombo &'

Layout: <CGRecordLayout
  LLVMType:%class.IPOutputCombo = type { %class.Element.base, i32, %struct.in_addr, i32 }
  NonVirtualBaseLLVMType:%class.IPOutputCombo = type { %class.Element.base, i32, %struct.in_addr, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3336b10 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5600e3336c28 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5600e3336cc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5600e3336d28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5600e3336d88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5600e3336e38 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3337140 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e3337258 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5600e3337300 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5600e3337368 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5600e33373f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5600e333d490 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5600e333d8c8 <col:12>
|-CXXConstructorDecl 0x5600e333d598 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e333d6a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5600e3337300 'data' 'const char *'
| | `-ImplicitCastExpr 0x5600e333fe50 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5600e333fe20 <col:12> 'const char *const' lvalue .data 0x5600e3337300
| |     `-DeclRefExpr 0x5600e333fe00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e333d6a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5600e3337368 'length' 'int'
| | `-ImplicitCastExpr 0x5600e333fee0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5600e333feb0 <col:12> 'const int' lvalue .length 0x5600e3337368
| |     `-DeclRefExpr 0x5600e333fe90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e333d6a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5600e33373f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5600e333ff70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5600e333ff40 <col:12> 'String::memo_t *const' lvalue .memo 0x5600e33373f8
| |     `-DeclRefExpr 0x5600e333ff20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e333d6a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5600e333ffc8 <col:12>
|-CXXConstructorDecl 0x5600e333d748 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5600e333d748
| `-ParmVarDecl 0x5600e333d858 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5600e3342db0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5600e334e7c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e334e8d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5600e334edf0 <col:12>
|   |-BinaryOperator 0x5600e334ec08 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5600e334ebc0 <col:12> 'const char *' lvalue ->data 0x5600e3337300
|   | | `-CXXThisExpr 0x5600e334ebb0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5600e334ebf0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5600e334eb80 <col:12> 'const char *const' lvalue .data 0x5600e3337300
|   |     `-DeclRefExpr 0x5600e334eb60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e334e8d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5600e334ecd0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5600e334ec88 <col:12> 'int' lvalue ->length 0x5600e3337368
|   | | `-CXXThisExpr 0x5600e334ec78 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5600e334ecb8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5600e334ec48 <col:12> 'const int' lvalue .length 0x5600e3337368
|   |     `-DeclRefExpr 0x5600e334ec28 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e334e8d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5600e334ed98 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5600e334ed50 <col:12> 'String::memo_t *' lvalue ->memo 0x5600e33373f8
|   | | `-CXXThisExpr 0x5600e334ed40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5600e334ed80 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5600e334ed10 <col:12> 'String::memo_t *const' lvalue .memo 0x5600e33373f8
|   |     `-DeclRefExpr 0x5600e334ecf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e334e8d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5600e334ede0 <col:12>
|     `-UnaryOperator 0x5600e334edc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e334edb8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5600e334e948 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5600e334e948
  `-ParmVarDecl 0x5600e334ea58 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e332e080 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5600e332e198 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5600e332e228 <col:16, col:22> col:16 public
|-TypedefDecl 0x5600e332e268 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5600e3002fd0 'const char *'
|   `-QualType 0x5600e3002521 'const char' const
|     `-BuiltinType 0x5600e3002520 'char'
|-TypedefDecl 0x5600e332e2f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5600e332e2c0 'String::const_iterator' sugar
|   |-Typedef 0x5600e332e268 'const_iterator'
|   `-PointerType 0x5600e3002fd0 'const char *'
|     `-QualType 0x5600e3002521 'const char' const
|       `-BuiltinType 0x5600e3002520 'char'
|-TypedefDecl 0x5600e332e460 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5600e332e3d0 'int (String::*)() const'
|   |-RecordType 0x5600e332e110 'String'
|   | `-CXXRecord 0x5600e332e080 'String'
|   `-ParenType 0x5600e332e370 'int () const' sugar
|     `-FunctionProtoType 0x5600e3302f10 'int () const' const cdecl
|       `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e332e4c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5600e3157af0 'int64_t' sugar
|   |-Typedef 0x5600e306b390 'int64_t'
|   `-TypedefType 0x5600e3044630 '__int64_t' sugar
|     |-Typedef 0x5600e3044208 '__int64_t'
|     `-BuiltinType 0x5600e30025a0 'long'
|-TypedefDecl 0x5600e332e530 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5600e3157a10 'uint64_t' sugar
|   |-Typedef 0x5600e306b530 'uint64_t'
|   `-TypedefType 0x5600e30446c0 '__uint64_t' sugar
|     |-Typedef 0x5600e3044278 '__uint64_t'
|     `-BuiltinType 0x5600e3002640 'unsigned long'
|-TypedefDecl 0x5600e332e5c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5600e332e590 'String::intmax_t' sugar
|   |-Typedef 0x5600e332e4c8 'intmax_t'
|   `-TypedefType 0x5600e3157af0 'int64_t' sugar
|     |-Typedef 0x5600e306b390 'int64_t'
|     `-TypedefType 0x5600e3044630 '__int64_t' sugar
|       |-Typedef 0x5600e3044208 '__int64_t'
|       `-BuiltinType 0x5600e30025a0 'long'
|-TypedefDecl 0x5600e332e650 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5600e332e620 'String::uintmax_t' sugar
|   |-Typedef 0x5600e332e530 'uintmax_t'
|   `-TypedefType 0x5600e3157a10 'uint64_t' sugar
|     |-Typedef 0x5600e306b530 'uint64_t'
|     `-TypedefType 0x5600e30446c0 '__uint64_t' sugar
|       |-Typedef 0x5600e3044278 '__uint64_t'
|       `-BuiltinType 0x5600e3002640 'unsigned long'
|-CXXConstructorDecl 0x5600e332e710 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5600e332e8b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5600e332e7f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5600e332ea68 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5600e332e9a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5600e332ebc0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5600e332eb30 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5600e332edd8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5600e332ec88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5600e332ed08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5600e332eff8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5600e332eea8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5600e332ef28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5600e332f218 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5600e332f0c8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5600e332f148 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5600e332f438 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5600e332f2e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5600e332f368 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5600e332f5c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5600e332f500 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5600e332f748 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5600e332f688 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5600e332f8d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5600e332f810 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5600e332fa30 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5600e332f9a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5600e332fb88 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5600e332faf8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5600e332fce0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5600e332fc50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5600e332fe68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5600e332fda8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5600e332fff8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5600e332ff30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5600e3330188 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5600e33300c0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5600e3330318 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5600e3330250 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5600e3330410 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5600e3330538 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5600e33306b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5600e33305f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5600e3330808 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5600e3330778 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5600e33308c0 <col:63> "" ""
|-CXXMethodDecl 0x5600e3330a08 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5600e3330948 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5600e3330c18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5600e3330ac8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5600e3330b48 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5600e3330e38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5600e3330ce0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5600e3330d60 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5600e3331118 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5600e3330ef8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5600e3330f78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5600e333cf60 <col:55> 'int' 10
| `-ParmVarDecl 0x5600e3330ff0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5600e333cf80 <col:76> 'bool' true
|-CXXMethodDecl 0x5600e33313f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5600e33311e0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5600e3331260 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5600e333cf90 <col:56> 'int' 10
| `-ParmVarDecl 0x5600e33312d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5600e333cfb0 <col:77> 'bool' true
|-CXXMethodDecl 0x5600e3331500 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5600e33315c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5600e3331690 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5600e3331730 <col:20>
| `-OptimizeNoneAttr 0x5600e3331788 <col:30>
|-CXXConversionDecl 0x5600e3331878 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5600e3331948 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5600e3331a08 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5600e3331af8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5600e3331bb8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5600e3331d38 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5600e3331c70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5600e3331e88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5600e3331df8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5600e3331f78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5600e3332038 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5600e3332288 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5600e33320f0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5600e3332170 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5600e33324e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5600e3332350 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5600e33323d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5600e33325b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e33327c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5600e3332670 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5600e33326f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5600e33329e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5600e3332890 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5600e3332910 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5600e3332b78 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5600e3332ab0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5600e3332c68 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5600e3332dd8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5600e3332d18 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5600e3332fe8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5600e3332e98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5600e3332f18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5600e3333200 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5600e33330a8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5600e3333120 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5600e3333390 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5600e33332c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5600e33335b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5600e3333450 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5600e33334d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5600e3333700 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5600e3333670 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5600e33338d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5600e33337c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5600e3333840 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5600e3333a28 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5600e3333998 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5600e3333c40 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5600e3333ae0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5600e3333b60 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5600e333cfc0 <col:39> 'int' 0
|-CXXMethodDecl 0x5600e3333e60 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5600e3333d00 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5600e3333d80 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5600e333cfe0 <col:48> 'int' 0
|-CXXMethodDecl 0x5600e3334040 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5600e3333f20 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5600e3333fa0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5600e333d000 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5600e3334110 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5600e33341d0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5600e3334290 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5600e3334350 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5600e3334410 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5600e33345b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5600e33344c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5600e3334738 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5600e3334670 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5600e3334910 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5600e33347f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5600e3334a88 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5600e33349c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5600e3334bd0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5600e3334b40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5600e3334d20 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5600e3334c90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5600e3334ef8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5600e3334de0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5600e3334e60 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5600e33350d8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5600e3334fc0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5600e3335040 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5600e3335228 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5600e3335198 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5600e3335438 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5600e33352e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5600e3335368 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5600e3335598 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5600e3335500 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5600e33356f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5600e3335658 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5600e3335798 <col:57> "" ""
|-CXXMethodDecl 0x5600e33358a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5600e3335818 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5600e33359f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5600e3335968 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5600e3335b78 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5600e3335ab0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5600e3335c40 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5600e3335d00 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5600e3335dc0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5600e3335e60 <col:49> "" ""
|-CXXMethodDecl 0x5600e3335ef0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5600e3335fb0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5600e33360a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5600e3336168 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5600e3336228 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5600e33362e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5600e33363e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5600e33364a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5600e3336570 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5600e3336748 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5600e3336628 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5600e33366a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5600e3336970 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5600e3336810 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5600e3336890 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5600e3336a80 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5600e3336ae8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5600e3336b10 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5600e3336c28 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5600e3336cc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5600e3336d28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5600e3336d88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5600e3336e38 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5600e3336ea0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5600e33370d8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5600e3337128 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e33370b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5600e3336fc8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5600e3336f70 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5600e3336fb0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5600e3336f90 <col:32> 'int' 8
|-CXXRecordDecl 0x5600e3337140 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5600e3337258 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5600e3337300 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5600e3337368 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5600e33373f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5600e333d490 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5600e333d8c8 <col:12>
| |-CXXConstructorDecl 0x5600e333d598 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5600e333d6a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5600e3337300 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5600e333fe50 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5600e333fe20 <col:12> 'const char *const' lvalue .data 0x5600e3337300
| | |     `-DeclRefExpr 0x5600e333fe00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e333d6a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5600e3337368 'length' 'int'
| | | `-ImplicitCastExpr 0x5600e333fee0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5600e333feb0 <col:12> 'const int' lvalue .length 0x5600e3337368
| | |     `-DeclRefExpr 0x5600e333fe90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e333d6a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5600e33373f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5600e333ff70 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5600e333ff40 <col:12> 'String::memo_t *const' lvalue .memo 0x5600e33373f8
| | |     `-DeclRefExpr 0x5600e333ff20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e333d6a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5600e333ffc8 <col:12>
| |-CXXConstructorDecl 0x5600e333d748 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5600e333d748
| | `-ParmVarDecl 0x5600e333d858 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5600e3342db0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5600e334e7c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5600e334e8d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5600e334edf0 <col:12>
| |   |-BinaryOperator 0x5600e334ec08 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5600e334ebc0 <col:12> 'const char *' lvalue ->data 0x5600e3337300
| |   | | `-CXXThisExpr 0x5600e334ebb0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5600e334ebf0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5600e334eb80 <col:12> 'const char *const' lvalue .data 0x5600e3337300
| |   |     `-DeclRefExpr 0x5600e334eb60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e334e8d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5600e334ecd0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5600e334ec88 <col:12> 'int' lvalue ->length 0x5600e3337368
| |   | | `-CXXThisExpr 0x5600e334ec78 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5600e334ecb8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5600e334ec48 <col:12> 'const int' lvalue .length 0x5600e3337368
| |   |     `-DeclRefExpr 0x5600e334ec28 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e334e8d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5600e334ed98 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5600e334ed50 <col:12> 'String::memo_t *' lvalue ->memo 0x5600e33373f8
| |   | | `-CXXThisExpr 0x5600e334ed40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5600e334ed80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5600e334ed10 <col:12> 'String::memo_t *const' lvalue .memo 0x5600e33373f8
| |   |     `-DeclRefExpr 0x5600e334ecf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5600e334e8d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5600e334ede0 <col:12>
| |     `-UnaryOperator 0x5600e334edc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5600e334edb8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5600e334e948 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5600e334e948
|   `-ParmVarDecl 0x5600e334ea58 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5600e3337470 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5600e33376b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5600e33374d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5600e3337558 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5600e33375d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5600e333d450 <col:79, line:261:5>
|   |-BinaryOperator 0x5600e333d0c8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5600e333d060 <col:2, col:5> 'const char *' lvalue .data 0x5600e3337300
|   | | `-MemberExpr 0x5600e333d030 <col:2> 'String::rep_t' lvalue ->_r 0x5600e3337470
|   | |   `-CXXThisExpr 0x5600e333d020 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5600e333d0b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5600e333d090 <col:12> 'const char *' lvalue ParmVar 0x5600e33374d8 'data' 'const char *'
|   |-BinaryOperator 0x5600e333d190 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5600e333d128 <col:2, col:5> 'int' lvalue .length 0x5600e3337368
|   | | `-MemberExpr 0x5600e333d0f8 <col:2> 'String::rep_t' lvalue ->_r 0x5600e3337470
|   | |   `-CXXThisExpr 0x5600e333d0e8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5600e333d178 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5600e333d158 <col:14> 'int' lvalue ParmVar 0x5600e3337558 'length' 'int'
|   `-IfStmt 0x5600e333d438 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5600e333d2b0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5600e333d298 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5600e333d278 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5600e333d258 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5600e333d1f0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5600e33373f8
|     |       | `-MemberExpr 0x5600e333d1c0 <col:7> 'String::rep_t' lvalue ->_r 0x5600e3337470
|     |       |   `-CXXThisExpr 0x5600e333d1b0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5600e333d240 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5600e333d220 <col:17> 'String::memo_t *' lvalue ParmVar 0x5600e33375d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5600e333d410 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5600e333d3f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5600e333d300 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5600e33260e8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5600e333d368 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5600e3336cc8
|         `-ImplicitCastExpr 0x5600e333d350 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5600e333d330 <col:27> 'String::memo_t *' lvalue ParmVar 0x5600e33375d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5600e3337968 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5600e3337788 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5600e3337808 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5600e3337880 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5600e3337470 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5600e333d8d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5600e333da68 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5600e333d9d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5600e333d940 <col:2> '<bound member function type>' ->assign_memo 0x5600e33376b8
|     | `-ImplicitCastExpr 0x5600e333da08 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5600e333d930 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5600e333da20 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e333d970 <col:14> 'const char *' lvalue ParmVar 0x5600e3337788 'data' 'const char *'
|     |-ImplicitCastExpr 0x5600e333da38 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e333d990 <col:20> 'int' lvalue ParmVar 0x5600e3337808 'length' 'int'
|     `-ImplicitCastExpr 0x5600e333da50 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5600e333d9b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5600e3337880 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5600e3337af8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5600e3337a38 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5600e333dcc0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5600e333dc40 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5600e333da90 <col:2> '<bound member function type>' ->assign_memo 0x5600e33376b8
|     | `-CXXThisExpr 0x5600e333da80 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5600e333dc78 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5600e333db10 <col:14, col:19> 'const char *' lvalue .data 0x5600e3337300
|     |   `-MemberExpr 0x5600e333dae0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5600e3337470
|     |     `-DeclRefExpr 0x5600e333dac0 <col:14> 'const String' lvalue ParmVar 0x5600e3337a38 'x' 'const String &'
|     |-ImplicitCastExpr 0x5600e333dc90 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5600e333db90 <col:25, col:30> 'int' lvalue .length 0x5600e3337368
|     |   `-MemberExpr 0x5600e333db60 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5600e3337470
|     |     `-DeclRefExpr 0x5600e333db40 <col:25> 'const String' lvalue ParmVar 0x5600e3337a38 'x' 'const String &'
|     `-ImplicitCastExpr 0x5600e333dca8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5600e333dc10 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5600e33373f8
|         `-MemberExpr 0x5600e333dbe0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5600e3337470
|           `-DeclRefExpr 0x5600e333dbc0 <col:38> 'const String' lvalue ParmVar 0x5600e3337a38 'x' 'const String &'
|-CXXMethodDecl 0x5600e3337bc0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5600e333e680 <col:31, line:278:5>
|   `-IfStmt 0x5600e333e668 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5600e333dd60 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5600e333dd48 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5600e333dd18 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5600e33373f8
|     |     `-MemberExpr 0x5600e333dce8 <col:6> 'String::rep_t' lvalue ->_r 0x5600e3337470
|     |       `-CXXThisExpr 0x5600e333dcd8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5600e333e640 <col:15, line:277:2>
|       |-ParenExpr 0x5600e333e210 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5600e333e1e0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5600e333de70 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5600e333de58 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5600e333de40 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5600e333de00 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5600e3336cc8
|       |   |       `-ImplicitCastExpr 0x5600e333dde8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5600e333ddb8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5600e33373f8
|       |   |           `-MemberExpr 0x5600e333dd88 <col:27> 'String::rep_t' lvalue ->_r 0x5600e3337470
|       |   |             `-CXXThisExpr 0x5600e333dd78 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5600e333ded0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5600e333deb0 <col:54> 'int' 0
|       |   `-CallExpr 0x5600e333e140 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5600e333e128 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5600e333e0a8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5600e333e180 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5600e333dfb8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5600e333e198 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5600e333dfe8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5600e333e1b0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5600e333e020 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5600e333e1c8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5600e333e090 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5600e333e078 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5600e333e040 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5600e333e560 <line:274:6, line:275:22>
|       | |-CallExpr 0x5600e333e420 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5600e333e408 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5600e333e380 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5600e3327530 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5600e333e350 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5600e3336cc8
|       | |   `-ImplicitCastExpr 0x5600e333e338 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5600e333e308 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5600e33373f8
|       | |       `-MemberExpr 0x5600e333e2d8 <col:40> 'String::rep_t' lvalue ->_r 0x5600e3337470
|       | |         `-CXXThisExpr 0x5600e333e2c8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5600e333e520 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5600e333e508 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5600e333e448 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5600e333c3a0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5600e333e548 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5600e333e4a8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5600e33373f8
|       |       `-MemberExpr 0x5600e333e478 <col:15> 'String::rep_t' lvalue ->_r 0x5600e3337470
|       |         `-CXXThisExpr 0x5600e333e468 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5600e333e620 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5600e333e5b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5600e33373f8
|         | `-MemberExpr 0x5600e333e588 <col:6> 'String::rep_t' lvalue ->_r 0x5600e3337470
|         |   `-CXXThisExpr 0x5600e333e578 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5600e333e608 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5600e333e5e8 <col:16> 'int' 0
|-CXXMethodDecl 0x5600e3337e58 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5600e3337c78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5600e3337cf8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5600e3337d70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5600e3337f30 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5600e3338180 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5600e3337fe8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5600e3338068 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5600e33380e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5600e3338368 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5600e3338250 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5600e33382d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5600e3338468 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5600e333e758 <col:41, line:286:5>
|   `-ReturnStmt 0x5600e333e748 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5600e333e718 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5600e333e6e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5600e333e6c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5600e333e6a8 <col:46> 'int' 1
|-CXXMethodDecl 0x5600e3338708 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5600e3338520 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5600e33385a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5600e3338620 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5600e333c3a0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5600e33387d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5600e333c470 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5600e333c640 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5600e333c528 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5600e333c5a8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5600e333c700 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5600e333c7c8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5600e333c8c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5600e333c940 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5600e333c9b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5600e333ca20 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5600e333cb20 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5600e333cb70 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e333cb00 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5600e333cae0 <col:22> 'int' 14
|-CXXMethodDecl 0x5600e333cd88 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5600e333cba0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5600e333cc20 <col:38> col:41 'int'
| `-ParmVarDecl 0x5600e333cca0 <col:43> col:46 'int'
|-FriendDecl 0x5600e333ce90 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5600e333cf20 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5600e33ffab0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5600e33ffc88 prev 0x5600e33ffab0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5600e33ffd18 <col:46, col:52> col:46 public
|-TypedefDecl 0x5600e33ffd40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e34016a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5600e3401650 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5600e3401630 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5600e33fff58 'type'
|     `-SubstTemplateTypeParmType 0x5600e33fff20 'String' sugar
|       |-TemplateTypeParmType 0x5600e32f2930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32f28e0 'T'
|       `-RecordType 0x5600e332e110 'String'
|         `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e3401758 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5600e3401720 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5600e3401700 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5600e34016a0 'type'
|     `-ElaboratedType 0x5600e3401650 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5600e3401630 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5600e33fff58 'type'
|         `-SubstTemplateTypeParmType 0x5600e33fff20 'String' sugar
|           |-TemplateTypeParmType 0x5600e32f2930 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5600e32f28e0 'T'
|           `-RecordType 0x5600e332e110 'String'
|             `-CXXRecord 0x5600e332e080 'String'
|-CXXMethodDecl 0x5600e34018d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5600e34017e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5600e34019c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5600e3401aa8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5600e3401aa8
|-CXXMethodDecl 0x5600e3401d78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5600e3401c80 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5600e3401fb8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5600e3401e30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5600e3401ea8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5600e3402188 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5600e3402078 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5600e34020f0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5600e34022e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5600e34023b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5600e35ae5a8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5600e3402478 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5600e35ae490 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5600e35ae808 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5600e35ae678 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5600e35ae6f0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5600e35ae9c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5600e35ae8d8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5600e35aeb88 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5600e35aea90 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5600e35aec40 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5600e35aecf0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5600e35aef28 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5600e35aeda0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5600e35aee18 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5600e35af1c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5600e35af0d0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5600e35af290 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5600e35af2e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5600e35af330 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5600e35668c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5600e33fe518 prev 0x5600e35668c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5600e33ffa20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5600e33ff9d0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5600e33ff9b0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5600e33ff860 'type'
|     `-SubstTemplateTypeParmType 0x5600e33ff6f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5600e32c86e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5600e32c8688 'F'
|       `-RecordType 0x5600e33ff350 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5600e33ff270 'typed_array_memory'
|-FieldDecl 0x5600e35af380 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5600e35af3d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5600e35af408 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|   |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|   `-RecordType 0x5600e332e110 'String'
|     `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35af498 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5600e35af460 'String &'
|   `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|     |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|     `-RecordType 0x5600e332e110 'String'
|       `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35af528 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5600e35af4f0 'const String &'
|   `-QualType 0x5600e33fe5b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-RecordType 0x5600e332e110 'String'
|         `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35af5b8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5600e35af580 'String *'
|   `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|     |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|     `-RecordType 0x5600e332e110 'String'
|       `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35af648 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5600e35af610 'const String *'
|   `-QualType 0x5600e33fe5b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-RecordType 0x5600e332e110 'String'
|         `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35b02a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5600e35b0250 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5600e35b0230 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5600e35b0168 'type'
|     `-LValueReferenceType 0x5600e35b0130 'const String &'
|       `-QualType 0x5600e35afed1 'const String' const
|         `-SubstTemplateTypeParmType 0x5600e35afed0 'String' sugar
|           |-TemplateTypeParmType 0x5600e32d2630 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5600e32d25d8 'T'
|           `-RecordType 0x5600e332e110 'String'
|             `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35b0308 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5600e35af4f0 'const String &'
|   `-QualType 0x5600e33fe5b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-RecordType 0x5600e332e110 'String'
|         `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35b0360 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35b03c8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5600e35af580 'String *'
|   `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|     |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|     `-RecordType 0x5600e332e110 'String'
|       `-CXXRecord 0x5600e332e080 'String'
|-TypedefDecl 0x5600e35b0430 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5600e35af610 'const String *'
|   `-QualType 0x5600e33fe5b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5600e33fe5b0 'String' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-RecordType 0x5600e332e110 'String'
|         `-CXXRecord 0x5600e332e080 'String'
|-EnumDecl 0x5600e35b0488 <line:134:5> col:5
| `-EnumConstantDecl 0x5600e35b0580 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5600e35b0560 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5600e33012d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5600e33012b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5600e3301290 <col:40> 'int' 1
|-CXXConstructorDecl 0x5600e35b0608 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5600e35b0898 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e35b06c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5600e35b0760 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5600e35b0b28 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5600e35b0a10 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5600e35b0de8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5600e35b0cd0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5600e35b1100 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5600e35b0fe0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5600e35b1410 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5600e35b12f0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5600e35b1700 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e35b1548 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5600e35b15c0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5600e35b1828 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5600e35b18d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35b1930 <col:30> Inherited
|-CXXMethodDecl 0x5600e35b1978 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5600e35b1a28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35b1a80 <col:30> Inherited
|-CXXMethodDecl 0x5600e35b1b48 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5600e35b1bf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35b1c50 <col:30> Inherited
|-CXXMethodDecl 0x5600e35b1c98 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5600e35b1d48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35b1da0 <col:30> Inherited
|-CXXMethodDecl 0x5600e35b1de8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5600e35b1e98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35b1ef0 <col:30> Inherited
|-CXXMethodDecl 0x5600e35b1f38 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5600e35b1fe8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35b2040 <col:30> Inherited
|-CXXMethodDecl 0x5600e35b2068 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5600e35b2118 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5600e35b21c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5600e35b2388 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e35b2278 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5600e35b22f0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5600e35b24d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5600e35b2448 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e35b2688 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5600e35b2590 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5600e35b2740 <col:20>
| `-OptimizeNoneAttr 0x5600e35b2798 <col:30>
|-CXXMethodDecl 0x5600e35b28b8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5600e35b27c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5600e35b2970 <col:20>
| `-OptimizeNoneAttr 0x5600e35b29c8 <col:30>
|-CXXMethodDecl 0x5600e35b2a80 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5600e35b29f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e35b2bc8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5600e35b2b38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e35b2cf8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5600e35b2df8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5600e35b2ec8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5600e35b2f98 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5600e35b30d8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5600e35b3048 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e35b3220 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5600e35b3190 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e35b3368 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5600e35b32d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5600e35b3420 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5600e35b3520 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5600e35b3490 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5600e35b35d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5600e35b3698 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5600e35b3798 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5600e35b3918 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5600e35b3858 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5600e35b40d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5600e35b39d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5600e35b4038 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5600e35b3f38 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5600e35b41b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5600e35b4308 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5600e35b4278 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5600e35b43c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5600e35b4608 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e35b4480 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5600e35b44f8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5600e35b4798 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5600e35b46d8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5600e35b49a8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5600e35b4860 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5600e35b48d8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5600e35b4a68 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5600e35b4cc8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5600e35b4bd0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5600e35b4d98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5600e35b4d98

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e36345a8 prev 0x5600e34e42e8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5600e36346a0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5600e3634730 <col:22, col:28> col:22 public
|-EnumDecl 0x5600e3634758 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5600e3634878 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634858 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5600e3634840 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5600e3634820 <col:14> 'int' 999
| |-EnumConstantDecl 0x5600e3634920 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634900 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5600e36348e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5600e36348c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5600e36349b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634990 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5600e3634970 <col:17> 'int' 0
| |-EnumConstantDecl 0x5600e3634a40 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634a20 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5600e3634a00 <col:13> 'int' 1
| |-EnumConstantDecl 0x5600e3634ad0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634ab0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5600e3634a90 <col:16> 'int' 2
| |-EnumConstantDecl 0x5600e3634b60 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634b40 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5600e3634b20 <col:13> 'int' 3
| |-EnumConstantDecl 0x5600e3634bf0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634bd0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5600e3634bb0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5600e3634c80 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634c60 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5600e3634c40 <col:14> 'int' 5
| |-EnumConstantDecl 0x5600e3634d10 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5600e3634cf0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5600e3634cd0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5600e3634da0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5600e3634d80 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5600e3634d60 <col:13> 'int' 7
|-VarDecl 0x5600e3634e10 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5600e3634e98 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5600e3634f20 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5600e3634fa8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5600e3635030 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5600e36350b8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5600e3635140 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5600e36351c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5600e3635250 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5600e36352d8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5600e3635360 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5600e3635460 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5600e363a788 '_nerrors' 'int'
| | `-IntegerLiteral 0x5600e363af18 <line:128:13> 'int' 0
| `-CompoundStmt 0x5600e363af88 <col:16, line:129:5>
|-CXXDestructorDecl 0x5600e3635550 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5600e363af98 <col:29, line:132:5>
|-CXXMethodDecl 0x5600e3635708 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5600e3635640 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5600e36357d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5600e36358b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5600e363aff0 <col:44, line:161:5>
|   `-ReturnStmt 0x5600e363afe0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5600e363afc8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5600e363afa8 <col:9> 'ErrorHandler *' lvalue Var 0x5600e363a7e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5600e36359f8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5600e3635968 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5600e3635ac0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5600e363b050 <col:43, line:173:5>
|   `-ReturnStmt 0x5600e363b040 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5600e363b028 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5600e363b008 <col:9> 'ErrorHandler *' lvalue Var 0x5600e363a860 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5600e3635b78 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5600e3635bf8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5600e3635d08 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5600e3635c78 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5600e3635e58 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5600e3635dc8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5600e3635fb0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5600e3635f18 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636108 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5600e3636070 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636260 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5600e36361c8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636470 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5600e3636318 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5600e3636398 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636648 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5600e3636530 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5600e36365b0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636868 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5600e3636708 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5600e3636788 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636a48 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5600e3636928 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5600e36369a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636c28 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5600e3636b08 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5600e3636b88 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5600e3636db0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5600e3636ce8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5600e3636f80 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5600e3636e68 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5600e3636ee0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5600e363b2a8 <col:57, line:234:5>
|   `-ReturnStmt 0x5600e363b298 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5600e363b280 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5600e363b228 <col:9, col:41> 'int'
|         |-MemberExpr 0x5600e363b1f8 <col:9> '<bound member function type>' ->xmessage 0x5600e3636db0
|         | `-CXXThisExpr 0x5600e363b1e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5600e363b268 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5600e363b250 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5600e363b1c8 <col:18, col:40> 'String' (CXXTemporary 0x5600e363b1c8)
|               `-CallExpr 0x5600e363b190 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5600e363b178 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5600e363b0f0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5600e3638f78 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5600e363b110 <col:31> 'const String' lvalue ParmVar 0x5600e3636ee0 'str' 'const String &'
|                 `-DeclRefExpr 0x5600e363b130 <col:36> 'const String' lvalue ParmVar 0x5600e3636e68 'anno' 'const String &'
|-CXXMethodDecl 0x5600e3637260 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5600e3637040 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5600e36370c0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5600e3637138 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5600e363b538 <col:68, line:243:5>
|   `-ReturnStmt 0x5600e363b528 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5600e363b510 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5600e363b4b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5600e363b480 <col:9> '<bound member function type>' ->xmessage 0x5600e3636f80
|         | `-CXXThisExpr 0x5600e363b470 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5600e363b348 <col:18> 'const String' lvalue ParmVar 0x5600e3637040 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5600e363b4f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5600e363b4e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5600e363b450 <col:24, col:40> 'String' (CXXTemporary 0x5600e363b450)
|               `-CXXMemberCallExpr 0x5600e363b3e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5600e363b378 <col:24> '<bound member function type>' ->vformat 0x5600e3638440
|                 | `-CXXThisExpr 0x5600e363b368 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5600e363b418 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5600e363b3a8 <col:32> 'const char *' lvalue ParmVar 0x5600e36370c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5600e363b430 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5600e363b3c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5600e3637138 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5600e3637500 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5600e3637328 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5600e36373a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5600e3637418 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5600e363b878 <col:23, line:254:5>
|   `-ReturnStmt 0x5600e363b868 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5600e363b850 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5600e363b7f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5600e363b7c0 <col:9> '<bound member function type>' ->xmessage 0x5600e3636f80
|         | `-CXXThisExpr 0x5600e363b7b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5600e363b838 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5600e363b820 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5600e363b770 <col:18, col:65> 'String' (CXXTemporary 0x5600e363b770)
|         |     `-CallExpr 0x5600e363b708 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5600e363b6f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5600e363b5d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5600e3638f78 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5600e363b5f8 <col:31> 'const String' lvalue ParmVar 0x5600e36373a0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5600e363b750 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5600e363b738 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5600e363b6d0 <col:37, col:64> 'String' (CXXTemporary 0x5600e363b6d0)
|         |             `-CallExpr 0x5600e363b6a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5600e363b688 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5600e363b618 <col:37> 'String (const String &)' lvalue CXXMethod 0x5600e36395c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5600e363b638 <col:56> 'const String' lvalue ParmVar 0x5600e3637328 'landmark' 'const String &'
|         `-DeclRefExpr 0x5600e363b790 <col:68> 'const String' lvalue ParmVar 0x5600e3637418 'str' 'const String &'
|-CXXMethodDecl 0x5600e3637880 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5600e36375c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5600e3637640 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5600e36376c0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5600e3637738 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5600e363bb30 <col:34, line:267:5>
|   `-ReturnStmt 0x5600e363bb20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5600e363bb08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5600e363baa0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5600e363ba70 <col:9> '<bound member function type>' ->xmessage 0x5600e3637500
|         | `-CXXThisExpr 0x5600e363ba60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5600e363b918 <col:18> 'const String' lvalue ParmVar 0x5600e36375c8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5600e363b938 <col:28> 'const String' lvalue ParmVar 0x5600e3637640 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5600e363baf0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5600e363bad8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5600e363ba40 <col:34, col:50> 'String' (CXXTemporary 0x5600e363ba40)
|               `-CXXMemberCallExpr 0x5600e363b9d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5600e363b968 <col:34> '<bound member function type>' ->vformat 0x5600e3638440
|                 | `-CXXThisExpr 0x5600e363b958 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5600e363ba08 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5600e363b998 <col:42> 'const char *' lvalue ParmVar 0x5600e36376c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5600e363ba20 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5600e363b9b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5600e3637738 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5600e3637990 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5600e363bbb0 <col:25, line:288:5>
|   `-ReturnStmt 0x5600e363bba0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5600e363bb88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5600e363bb58 <col:9> 'const int' lvalue ->_nerrors 0x5600e363a788
|         `-CXXThisExpr 0x5600e363bb48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5600e3637ba0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5600e3637a48 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5600e3637ac8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5600e3637e88 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5600e3637c68 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5600e3637ce8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5600e3637d60 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5600e3638020 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5600e3637f58 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5600e3638268 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5600e36380e0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5600e3638158 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5600e363be10 <col:58, line:357:5>
|   `-ReturnStmt 0x5600e363be00 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5600e363bde8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5600e363bdb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5600e363bda0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5600e363bd80 <col:9, col:29> 'String' (CXXTemporary 0x5600e363bd80)
|             `-CallExpr 0x5600e363bd10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5600e363bcf8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5600e363bc78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5600e3637e88 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5600e363bc18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5600e363bd48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5600e363bc38 <col:21> 'const char *' lvalue ParmVar 0x5600e36380e0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5600e363bd60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5600e363bc58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5600e3638158 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5600e3638440 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5600e3638330 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5600e36383a8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5600e3638598 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5600e3638508 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5600e36386e0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5600e3638650 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5600e3638980 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5600e3638798 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5600e3638818 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5600e3638890 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5600e3638ae0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5600e3638a50 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5600e363bf28 <col:37, line:441:5>
|   `-IfStmt 0x5600e363bf10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5600e363be98 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5600e363be68 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5600e363be28 <col:6> 'int' lvalue ParmVar 0x5600e3638a50 'level' 'int'
|     | `-ImplicitCastExpr 0x5600e363be80 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5600e363be48 <col:15> 'ErrorHandler::Level' EnumConstant 0x5600e3634b60 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5600e363bef8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5600e363bec8 <col:8> 'int' lvalue ->_nerrors 0x5600e363a788
|         `-CXXThisExpr 0x5600e363beb8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5600e3638ba8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5600e363bfc0 <col:26, line:448:5>
|   `-BinaryOperator 0x5600e363bfa0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5600e363bf50 <col:2> 'int' lvalue ->_nerrors 0x5600e363a788
|     | `-CXXThisExpr 0x5600e363bf40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5600e363bf80 <col:13> 'int' 0
|-CXXMethodDecl 0x5600e3638d70 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5600e3638c60 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5600e3638cd8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5600e3638f78 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5600e3638e30 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5600e3638ea8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5600e3639228 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5600e3639038 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5600e36390b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5600e3639138 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5600e36392e0 <col:59> 0 0
|-CXXMethodDecl 0x5600e3639478 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5600e3639358 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5600e36393d8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5600e363c630 <col:70, line:534:5>
|   |-DeclStmt 0x5600e363c130 <line:528:2, col:20>
|   | |-VarDecl 0x5600e363bfe8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5600e363c050 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5600e363c088 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5600e363c0f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5600e363c200 <line:529:2, col:23>
|   | `-VarDecl 0x5600e363c160 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5600e363c1e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5600e363c1c8 <col:18> 'const char *' lvalue ParmVar 0x5600e3639358 'begin' 'const char *'
|   |-DoStmt 0x5600e363c5c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5600e363c4f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5600e363c4e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5600e363c4c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5600e363c218 <col:6> 'const char *' lvalue Var 0x5600e363c160 'x' 'const char *'
|   | |     `-CallExpr 0x5600e363c410 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5600e363c3f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5600e363c3b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5600e363ac60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5600e363c478 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5600e363c460 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5600e363c2d0 <col:20, col:27> 'String' (CXXTemporary 0x5600e363c2d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5600e363c298 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5600e363c490 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5600e363c2f0 <col:30> 'const char *' lvalue Var 0x5600e363c160 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5600e363c4a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5600e363c310 <col:33> 'const char *' lvalue ParmVar 0x5600e36393d8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5600e363c350 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5600e363c330 <col:39> 'String' lvalue Var 0x5600e363bfe8 'name' 'String'
|   | |       |-UnaryOperator 0x5600e363c388 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5600e363c368 <col:46> 'String' lvalue Var 0x5600e363c088 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5600e363c3a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5600e363c5b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5600e363c598 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5600e363c578 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5600e363c548 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|   |         `-ImplicitCastExpr 0x5600e363c530 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5600e363c510 <col:11> 'String' lvalue Var 0x5600e363bfe8 'name' 'String'
|   `-ReturnStmt 0x5600e363c620 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5600e363c608 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5600e363c5e8 <col:9> 'const char *' lvalue Var 0x5600e363c160 'x' 'const char *'
|-CXXMethodDecl 0x5600e36395c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5600e3639538 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5600e363cc38 <col:55, line:550:5>
|   `-IfStmt 0x5600e363cc10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5600e363c870 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5600e363c858 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5600e363c840 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5600e363c820 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5600e363c7f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|     | |       `-DeclRefExpr 0x5600e363c690 <col:6> 'const String' lvalue ParmVar 0x5600e3639538 'x' 'const String &'
|     | `-BinaryOperator 0x5600e363c7d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5600e363c7a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5600e363c750 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5600e363c738 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5600e363c6f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5600e334b0b0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5600e363c6b0 <col:11> 'const String' lvalue ParmVar 0x5600e3639538 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5600e363c6d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5600e363c7b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5600e363c788 <col:19> 'char' 123
|     |-ReturnStmt 0x5600e363c8e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5600e363c8b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5600e363c890 <col:13> 'const String' lvalue ParmVar 0x5600e3639538 'x' 'const String &'
|     `-IfStmt 0x5600e363cbe8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5600e363c978 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5600e363c960 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5600e363c940 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5600e363c910 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|       |       `-DeclRefExpr 0x5600e363c8f0 <col:11> 'const String' lvalue ParmVar 0x5600e3639538 'x' 'const String &'
|       |-ReturnStmt 0x5600e363cb00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5600e363cae8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5600e363cab8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5600e363caa0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5600e363ca80 <col:13, col:29> 'String' (CXXTemporary 0x5600e363ca80)
|       |         `-CallExpr 0x5600e363ca30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5600e363ca18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5600e363c990 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5600e3638d70 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5600e363ca60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5600e363c9b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5600e363c9d0 <col:28> 'const String' lvalue ParmVar 0x5600e3639538 'x' 'const String &'
|       `-ReturnStmt 0x5600e363cbd8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5600e363cbc0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5600e363cb90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5600e363cb78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5600e363cb58 <col:13, col:20> 'String' (CXXTemporary 0x5600e363cb58)
|                 `-CXXTemporaryObjectExpr 0x5600e363cb20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5600e3639790 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5600e3639680 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5600e36396f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5600e363af08 <col:71> 'bool' false
|-CXXRecordDecl 0x5600e3639840 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5600e3639b38 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5600e3639ad0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5600e3639a70 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5600e3639a30 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5600e332e110 'String'
|       | `-CXXRecord 0x5600e332e080 'String'
|       |-BuiltinType 0x5600e3002580 'int'
|       `-DecayedType 0x5600e34e5330 '__va_list_tag *' sugar
|         |-TypedefType 0x5600e34e5300 'va_list' sugar
|         | |-Typedef 0x5600e32201d0 'va_list'
|         | `-TypedefType 0x5600e3220180 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5600e3157da8 '__gnuc_va_list'
|         |   `-TypedefType 0x5600e3157d10 '__builtin_va_list' sugar
|         |     |-Typedef 0x5600e3043d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5600e3043ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5600e30032d0 '__va_list_tag'
|         |         `-CXXRecord 0x5600e3003238 '__va_list_tag'
|         `-PointerType 0x5600e3225a70 '__va_list_tag *'
|           `-RecordType 0x5600e30032d0 '__va_list_tag'
|             `-CXXRecord 0x5600e3003238 '__va_list_tag'
|-EnumDecl 0x5600e3639b90 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5600e3639c90 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a230 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3639c70 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5600e3639c50 <col:16> 'int' 1
| |-EnumConstantDecl 0x5600e3639d20 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a248 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3639d00 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5600e3639ce0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5600e3639db0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a260 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3639d90 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5600e3639d70 <col:22> 'int' 4
| |-EnumConstantDecl 0x5600e3639e40 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a278 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3639e20 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5600e3639e00 <col:17> 'int' 8
| |-EnumConstantDecl 0x5600e3639ed0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a290 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3639eb0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5600e3639e90 <col:22> 'int' 16
| |-EnumConstantDecl 0x5600e3639f60 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a2a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3639f40 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5600e3639f20 <col:19> 'int' 32
| |-EnumConstantDecl 0x5600e363a030 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a2c0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3639fd0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5600e3639fb0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5600e363a0c0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a2d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e363a0a0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5600e363a080 <col:14> 'int' 128
| |-EnumConstantDecl 0x5600e363a150 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5600e363a2f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e363a130 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5600e363a110 <col:16> 'int' 256
| `-EnumConstantDecl 0x5600e363a1e0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5600e363a308 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e363a1c0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5600e363a1a0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5600e363a518 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5600e363a330 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5600e363a3d0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5600e363a6a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5600e363a5d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5600e363a748 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5600e363a788 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5600e363a7e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5600e363a860 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5600e363ac60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5600e363a8d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5600e363a958 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5600e363a9d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5600e363aa50 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5600e363aac8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5600e363ab40 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5600e363ad88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5600e363ad88
| `-ParmVarDecl 0x5600e363ae98 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5600e363cf98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5600e363cf98
  `-ParmVarDecl 0x5600e363d0a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e34e4378 prev 0x5600e3529368 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e34e4470 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5600e34e4500 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5600e34e4638 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5600e34e4538 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5600e34e5a60 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5600e34e5a40 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34e55d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5600e34e5af0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5600e34e5ab0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5600e34e4538 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5600e34e5640 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5600e34e5b70 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5600e34e5b30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34e56a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5600e34e5bb0 <col:54> 'bool' false
| `-CompoundStmt 0x5600e34e5cb8 <col:61, line:38:5>
|   `-BinaryOperator 0x5600e34e5c98 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5600e34e5c30 <col:9> 'const Element *' lvalue ->_context 0x5600e34e5578
|     | `-CXXThisExpr 0x5600e34e5c20 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5600e34e5c80 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5600e34e5c60 <col:20> 'int' 0
|-CXXConstructorDecl 0x5600e34e4848 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e34e46f8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5600e34e4770 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5600e34e5a98 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5600e34e5a78 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34e5578 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5600e34e5d10 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5600e34e5cd0 <col:20> 'const Element *' lvalue ParmVar 0x5600e34e46f8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5600e34e55d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5600e34e5d90 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5600e34e5d50 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5600e34e4770 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5600e34e5640 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5600e34e5e10 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5600e34e5dd0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34e56a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5600e34e5e50 <col:73> 'bool' false
| `-CompoundStmt 0x5600e34e5ec8 <col:80, line:46:5>
|-CXXMethodDecl 0x5600e34e4978 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5600e34e5f40 <col:36, line:51:5>
|   `-ReturnStmt 0x5600e34e5f30 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5600e34e5f18 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5600e34e5ee8 <col:16> 'const Element *const' lvalue ->_context 0x5600e34e5578
|         `-CXXThisExpr 0x5600e34e5ed8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5600e34e4a68 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5600e34e5fc0 <col:32, line:57:5>
|   `-ReturnStmt 0x5600e34e5fb0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5600e34e5f98 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5600e34e5f68 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5600e34e55d8
|         `-CXXThisExpr 0x5600e34e5f58 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5600e34e4b28 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5600e34e4cb0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5600e34e4be0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5600e34e4e00 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5600e34e4d70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5600e34e4f50 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5600e34e4ec0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5600e34e5158 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5600e34e5008 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5600e34e5080 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5600e34e5488 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5600e34e5218 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5600e34e5298 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5600e34e5360 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5600e34e5540 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5600e34e5578 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5600e34e55d8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5600e34e5640 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5600e34e56a0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5600e34e56f0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5600e34e56f0
| `-ParmVarDecl 0x5600e34e5808 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5600e34e58a8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5600e34e58a8
| `-ParmVarDecl 0x5600e34e59b8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5600e3646fe8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5600e35f0dd0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5600e35f0fa8 prev 0x5600e35f0dd0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5600e35f1038 <col:46, col:52> col:46 public
|-TypedefDecl 0x5600e35f1060 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35f2c30 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5600e35f2be0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5600e35f1510 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5600e35f1410 'type'
|     `-TemplateSpecializationType 0x5600e35f13a0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5600e35f1280 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5600e35f1260 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5600e35f1240 <col:24> 'unsigned long' 4
|       `-RecordType 0x5600e35f1380 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5600e35f12a0 'char_array'
|-TypedefDecl 0x5600e35f2ce8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5600e35f2cb0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5600e35f2c90 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5600e35f2c30 'type'
|     `-ElaboratedType 0x5600e35f2be0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5600e35f1510 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5600e35f1410 'type'
|         `-TemplateSpecializationType 0x5600e35f13a0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5600e35f1280 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5600e35f1260 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5600e35f1240 <col:24> 'unsigned long' 4
|           `-RecordType 0x5600e35f1380 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5600e35f12a0 'char_array'
|-CXXMethodDecl 0x5600e35f2e68 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5600e35f2d78 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5600e35f2f58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5600e35f3038 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5600e35f3308 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5600e35f3210 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5600e35f3548 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5600e35f33c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5600e35f3438 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5600e35f3718 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5600e35f3608 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5600e35f3680 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5600e35f3878 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5600e35f3948 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5600e35f3b98 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5600e35f3a08 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5600e35f3a80 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5600e35f3df8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5600e35f3c68 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5600e35f3ce0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5600e35f3fb8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5600e35f3ec8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5600e35f4178 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5600e35f4080 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5600e35f4230 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5600e35f42e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5600e35f4518 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5600e35f4390 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5600e35f4408 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5600e35fcb28 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5600e35fca30 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5600e35fcbf0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5600e35fcc40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5600e35fcc90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5600e35ef7d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5600e35ef9e8 prev 0x5600e35ef7d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5600e35f0d40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5600e35f0cf0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5600e35f0cd0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5600e35f0b80 'type'
|     `-SubstTemplateTypeParmType 0x5600e35f09a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5600e32c7f60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32c7f08 'T'
|       `-RecordType 0x5600e35f04f0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5600e35f0408 'sized_array_memory'
|-FieldDecl 0x5600e35fcce0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5600e35fcd30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5600e35fcd68 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|   |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|   `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fcdf8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5600e35fcdc0 'int &'
|   `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|     |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|     `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fceb8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5600e35fce80 'const int &'
|   `-QualType 0x5600e35efa81 'const int' const
|     `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fcf48 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5600e35fcf10 'int *'
|   `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|     |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|     `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fcfd8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5600e35fcfa0 'const int *'
|   `-QualType 0x5600e35efa81 'const int' const
|     `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fdbc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5600e35fdb70 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5600e35fdb50 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5600e35fdae0 'type'
|     `-SubstTemplateTypeParmType 0x5600e35fd8a0 'int' sugar
|       |-TemplateTypeParmType 0x5600e32d2d60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32d2d10 'T'
|       `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fdc28 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5600e35fce80 'const int &'
|   `-QualType 0x5600e35efa81 'const int' const
|     `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fdc80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fdce8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5600e35fcf10 'int *'
|   `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|     |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|     `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e35fdd50 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5600e35fcfa0 'const int *'
|   `-QualType 0x5600e35efa81 'const int' const
|     `-SubstTemplateTypeParmType 0x5600e35efa80 'int' sugar
|       |-TemplateTypeParmType 0x5600e32ffc50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5600e32ffbf8 'T'
|       `-BuiltinType 0x5600e3002580 'int'
|-EnumDecl 0x5600e35fdda8 <line:134:5> col:5
| `-EnumConstantDecl 0x5600e35fdea0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5600e35fde80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5600e33012d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5600e33012b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5600e3301290 <col:40> 'int' 1
|-CXXConstructorDecl 0x5600e35fdf28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5600e35fe178 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e35fdfe0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5600e35fe080 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5600e35fe438 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5600e35fe320 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5600e35fe6f8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5600e35fe5e0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5600e35fea40 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5600e35fe920 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5600e35fed50 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5600e35fec30 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5600e35ff040 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e35fee88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5600e35fef00 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5600e35ff168 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5600e35ff248 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35ff2a0 <col:30> Inherited
|-CXXMethodDecl 0x5600e35ff2e8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5600e35ff398 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35ff3f0 <col:30> Inherited
|-CXXMethodDecl 0x5600e35ff4b8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5600e35ff568 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35ff5c0 <col:30> Inherited
|-CXXMethodDecl 0x5600e35ff608 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5600e35ff6b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35ff710 <col:30> Inherited
|-CXXMethodDecl 0x5600e35ff758 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5600e35ff808 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35ff860 <col:30> Inherited
|-CXXMethodDecl 0x5600e35ff8a8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5600e35ff958 <col:20> Inherited
| `-OptimizeNoneAttr 0x5600e35ff9b0 <col:30> Inherited
|-CXXMethodDecl 0x5600e35ff9d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5600e35ffa88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5600e35ffb38 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5600e35ffcf8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e35ffbe8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5600e35ffc60 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5600e35ffe48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5600e35ffdb8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e35ffff8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5600e35fff00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5600e36000b0 <col:20>
| `-OptimizeNoneAttr 0x5600e3600108 <col:30>
|-CXXMethodDecl 0x5600e3600228 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5600e3600130 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5600e36002e0 <col:20>
| `-OptimizeNoneAttr 0x5600e3600338 <col:30>
|-CXXMethodDecl 0x5600e36003f0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5600e3600360 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e3600538 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5600e36004a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e3600668 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5600e3600798 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5600e3600868 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5600e3600938 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5600e3600a78 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5600e36009e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e3600bc0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5600e3600b30 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5600e3600d08 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5600e3600c78 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5600e3600dc0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5600e3600ec0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5600e3600e30 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5600e3600f78 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5600e3601038 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5600e3601138 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5600e36012b8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5600e36011f8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5600e3601a78 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5600e3601370 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5600e36019d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5600e36018d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5600e3601b58 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5600e3601ca8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5600e3601c18 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5600e3601d60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5600e3601fa8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5600e3601e20 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5600e3601e98 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5600e3602168 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5600e3602078 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5600e36023b8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5600e3602230 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5600e36022a8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5600e3602478 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5600e36026d8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5600e36025e0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5600e36027a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e35ed948 prev 0x5600e35d0588 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5600e35eda40 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5600e35edb30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5600e36145c0 <col:16, line:828:9>
|-CXXDestructorDecl 0x5600e35edc20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5600e36145d0 <col:25, line:830:9>
|-CXXMethodDecl 0x5600e35edd20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5600e35eddd0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5600e35ede78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5600e35ede78
| `-ParmVarDecl 0x5600e35edf88 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5600e35ee748 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5600e35ee748
  `-ParmVarDecl 0x5600e35ee858 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e34eace8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5600e35d04f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5600e35d0588 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5600e35d0640 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5600e35d0748 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5600e35d0678 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5600e3603d68 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5600e3603d48 <col:31> 'int' 0
|-CXXConstructorDecl 0x5600e35d0a68 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5600e35d08e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5600e35d0958 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5600e3603da0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5600e3603d80 <col:59> 'int' 0
|-CXXConstructorDecl 0x5600e35d0c40 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e35d0b30 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5600e35d0ba8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5600e3603dd8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5600e3603db8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5600e35d0ff8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5600e35d0de0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5600e35d0e58 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5600e35d0ed0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5600e3603e10 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5600e3603df0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5600e35d11b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5600e35d10f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5600e35d12b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5600e35d1498 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5600e35d13a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5600e35d1588 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5600e36041c0 <col:24, line:291:5>
|   `-ReturnStmt 0x5600e36041b0 <line:290:9, col:79>
|     `-BinaryOperator 0x5600e3604190 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5600e3604068 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5600e3603fc0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5600e3603fa0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5600e3603e98 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5600e3603e80 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5600e3603e68 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5600e3603e38 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5600e35ef770
|       | |   |       `-CXXThisExpr 0x5600e3603e28 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5600e3603f88 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5600e3603f70 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5600e3603f38 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5600e3603f08 <col:28, col:35> '<bound member function type>' ->size 0x5600e35b2068
|       | |           `-ImplicitCastExpr 0x5600e3603f58 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5600e3603ef0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5600e3603ec0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5600e35ef770
|       | |                 `-CXXThisExpr 0x5600e3603eb0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5600e3604050 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5600e3604038 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5600e3604020 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5600e3603ff0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5600e36028f0
|       |         `-CXXThisExpr 0x5600e3603fe0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5600e3604170 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5600e3604158 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5600e3604140 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5600e3604100 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5600e36040e8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5600e3604098 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5600e36029a0
|         |     |   `-CXXThisExpr 0x5600e3604088 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5600e36040c8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5600e3604120 <col:79> 'int' 0
|-CXXMethodDecl 0x5600e35d1648 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5600e3604398 <col:32, line:296:5>
|   `-ReturnStmt 0x5600e3604388 <line:295:9, col:49>
|     `-BinaryOperator 0x5600e3604368 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5600e3604248 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5600e3604230 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5600e3604218 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5600e36041e8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5600e36028f0
|       |       `-CXXThisExpr 0x5600e36041d8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5600e3604348 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5600e3604330 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5600e3604318 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5600e36042d8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5600e36042c0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5600e3604270 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5600e36029a0
|         |     |   `-CXXThisExpr 0x5600e3604260 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5600e36042a0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5600e36042f8 <col:49> 'int' 0
|-CXXMethodDecl 0x5600e35d1738 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5600e36045a8 <col:19, line:306:5>
|   |-IfStmt 0x5600e36044c8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5600e3604408 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5600e36043f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5600e36043c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5600e35ef770
|   | |     `-CXXThisExpr 0x5600e36043b0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5600e36044a8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5600e3604478 <col:13, col:20> '<bound member function type>' ->clear 0x5600e35b4a68
|   |     `-ImplicitCastExpr 0x5600e3604460 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5600e3604430 <col:13> 'Vector<String> *' lvalue ->_conf 0x5600e35ef770
|   |         `-CXXThisExpr 0x5600e3604420 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5600e3604550 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5600e3604520 <col:9, col:16> '<bound member function type>' .clear 0x5600e3602478
|   |   `-MemberExpr 0x5600e36044f0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5600e3602890
|   |     `-CXXThisExpr 0x5600e36044e0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5600e3604598 <line:305:9, col:17>
|     `-UnaryOperator 0x5600e3604580 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e3604570 <col:17> 'Args *' this
|-CXXMethodDecl 0x5600e35d19b8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5600e35d18c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5600e35d1b38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5600e35d1a70 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5600e35d1eb8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5600e35d1be0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5600e35d1e18 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5600e35d1c88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5600e35d1d00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5600e36048c8 <col:67, line:327:5>
|     |-WhileStmt 0x5600e3604878 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5600e3604690 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5600e3604610 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5600e3521838 0x5600e336ae18 0x5600e336aaf0 0x5600e335b2c0 0x5600e335af70 0x5600e335a860 0x5600e332d1d0 0x5600e32ba6a0
|     | | |-DeclRefExpr 0x5600e36045d0 <col:16> 'Iter' lvalue ParmVar 0x5600e35d1c88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5600e36045f0 <col:25> 'Iter' lvalue ParmVar 0x5600e35d1d00 'end' 'Iter'
|     | `-CompoundStmt 0x5600e3604858 <col:30, line:325:9>
|     |   |-CallExpr 0x5600e36047f8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5600e36046d8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5600e36047c8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5600e3604758 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|     |   |   `-DeclRefExpr 0x5600e3604738 <col:24> 'Iter' lvalue ParmVar 0x5600e35d1c88 'begin' 'Iter'
|     |   `-UnaryOperator 0x5600e3604840 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5600e3604820 <col:15> 'Iter' lvalue ParmVar 0x5600e35d1c88 'begin' 'Iter'
|     `-ReturnStmt 0x5600e36048b8 <line:326:9, col:17>
|       `-UnaryOperator 0x5600e36048a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3604890 <col:17> 'Args *' this
|-CXXMethodDecl 0x5600e35d1fc0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5600e35d1f30 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5600e35d2108 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5600e35d2078 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5600e35d21d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5600e3606310 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5600e36062b0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5600e36048f8 <col:9> '<bound member function type>' ->reset_from 0x5600e3602d18
|   | | `-CXXThisExpr 0x5600e36048e8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5600e3606290 <col:20> 'int' 0
|   `-ReturnStmt 0x5600e3606300 <line:352:9, col:17>
|     `-UnaryOperator 0x5600e36062e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e36062d8 <col:17> 'Args *' this
|-VarDecl 0x5600e35d2288 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5600e35d22f0 <col:38> 'int' 1
|-VarDecl 0x5600e35d2380 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5600e35d23e8 <col:39> 'int' 2
|-VarDecl 0x5600e35d2478 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5600e35d24e0 <col:39> 'int' 4
|-VarDecl 0x5600e35d2570 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5600e35d25d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5600e35d2958 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5600e35d2650 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35d28b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5600e35d2700 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d27a8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5600e3606468 <col:43, line:371:5>
|     `-ReturnStmt 0x5600e3606458 <line:370:9, col:34>
|       `-CallExpr 0x5600e3606420 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3606340 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36063c0 <col:21> 'const char *' lvalue ParmVar 0x5600e35d2700 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e36063e0 <col:30> 'int' 0
|         `-DeclRefExpr 0x5600e3606400 <col:33> 'T' lvalue ParmVar 0x5600e35d27a8 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35d2c88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5600e35d29c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35d2be8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5600e35d2a70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d2b18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5600e36065b8 <col:45, line:375:5>
|     `-ReturnStmt 0x5600e36065a8 <line:374:9, col:42>
|       `-CallExpr 0x5600e3606570 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3606490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3606510 <col:21> 'const char *' lvalue ParmVar 0x5600e35d2a70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3606530 <col:30> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int'
|         `-DeclRefExpr 0x5600e3606550 <col:41> 'T' lvalue ParmVar 0x5600e35d2b18 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35d2fb8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5600e35d2cf0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35d2f18 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5600e35d2da0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d2e48 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5600e3606708 <col:45, line:379:5>
|     `-ReturnStmt 0x5600e36066f8 <line:378:9, col:43>
|       `-CallExpr 0x5600e36066c0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e36065e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3606660 <col:21> 'const char *' lvalue ParmVar 0x5600e35d2da0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3606680 <col:30> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int'
|         `-DeclRefExpr 0x5600e36066a0 <col:42> 'T' lvalue ParmVar 0x5600e35d2e48 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35d32e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5600e35d3020 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5600e35d3248 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5600e35d30d0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5600e35d3178 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5600e3606908 <col:46, line:383:5>
| |   `-ReturnStmt 0x5600e36068f8 <line:382:9, col:55>
| |     `-CallExpr 0x5600e36068c0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5600e3606730 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5600e36067b0 <col:21> 'const char *' lvalue ParmVar 0x5600e35d30d0 'keyword' 'const char *'
| |       |-BinaryOperator 0x5600e3606880 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5600e3606830 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5600e3606810 <col:30> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5600e3606868 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5600e3606848 <col:42> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5600e36068a0 <col:54> 'T' lvalue ParmVar 0x5600e35d3178 'x' 'T &'
| |-CXXMethodDecl 0x5600e3647478 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5600e3647298 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x5600e3647368 <col:40, col:43> col:43 x 'int &'
| |-CXXMethodDecl 0x5600e36478f8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
| | |-TemplateArgument type 'in_addr'
| | |-ParmVarDecl 0x5600e3647710 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x5600e36477e8 <col:40, col:43> col:43 x 'in_addr &'
| `-CXXMethodDecl 0x5600e3647d78 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5600e3647b98 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5600e3647c68 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x5600e35d36e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5600e35d3350 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35d3648 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5600e35d3400 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d3480 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35d3528 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5600e3606a48 <col:54, line:388:5>
|     |-CallExpr 0x5600e36069d0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e3606920 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5600e3606960 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5600e3606970 <col:30> 'const char *' lvalue ParmVar 0x5600e35d3400 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5600e3606990 <col:39> 'int' lvalue ParmVar 0x5600e35d3480 'flags' 'int'
|     | `-DeclRefExpr 0x5600e36069b0 <col:46> 'T' lvalue ParmVar 0x5600e35d3528 'x' 'T &'
|     `-ReturnStmt 0x5600e3606a38 <line:387:9, col:17>
|       `-UnaryOperator 0x5600e3606a20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3606a10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35d3b98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5600e35d3758 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5600e35d37d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5600e35d3af8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5600e35d3898 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d3938 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5600e35d39d8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5600e3606bb8 <col:74, line:403:5>
|     `-ReturnStmt 0x5600e3606ba8 <line:402:9, col:56>
|       `-CallExpr 0x5600e3606b68 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3606a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3606ae8 <col:28> 'const char *' lvalue ParmVar 0x5600e35d3898 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e3606b08 <col:37> 'int' 0
|         |-DeclRefExpr 0x5600e3606b28 <col:40> 'T' lvalue ParmVar 0x5600e35d3938 'x' 'T &'
|         `-DeclRefExpr 0x5600e3606b48 <col:43> 'const V' lvalue ParmVar 0x5600e35d39d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5600e35d4008 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5600e35d3c08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5600e35d3c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5600e35d3f68 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5600e35d3d48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d3de8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5600e35d3e88 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5600e3606d20 <col:76, line:407:5>
|     `-ReturnStmt 0x5600e3606d10 <line:406:9, col:65>
|       `-CallExpr 0x5600e3606cd0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3606be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3606c50 <col:28> 'const char *' lvalue ParmVar 0x5600e35d3d48 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3606c70 <col:37> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int'
|         |-DeclRefExpr 0x5600e3606c90 <col:49> 'T' lvalue ParmVar 0x5600e35d3de8 'x' 'T &'
|         `-DeclRefExpr 0x5600e3606cb0 <col:52> 'const V' lvalue ParmVar 0x5600e35d3e88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5600e35d4558 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5600e35d4078 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5600e35d40f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5600e35d44b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5600e35d41b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d4238 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35d42d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5600e35d4378 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5600e3606e88 <col:85, line:412:5>
|     |-CallExpr 0x5600e3606e08 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e3606d38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5600e3606d78 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5600e3606d88 <col:37> 'const char *' lvalue ParmVar 0x5600e35d41b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5600e3606da8 <col:46> 'int' lvalue ParmVar 0x5600e35d4238 'flags' 'int'
|     | |-DeclRefExpr 0x5600e3606dc8 <col:53> 'T' lvalue ParmVar 0x5600e35d42d8 'x' 'T &'
|     | `-DeclRefExpr 0x5600e3606de8 <col:56> 'const V' lvalue ParmVar 0x5600e35d4378 'default_value' 'const V &'
|     `-ReturnStmt 0x5600e3606e78 <line:411:9, col:17>
|       `-UnaryOperator 0x5600e3606e60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3606e50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35d49e8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5600e35d45d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d4648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35d4948 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35d4708 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d4780 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d4828 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5600e3607008 <col:53, line:425:5>
|     `-ReturnStmt 0x5600e3606ff8 <line:424:9, col:42>
|       `-CallExpr 0x5600e3606fb8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3606eb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3606f38 <col:21> 'const char *' lvalue ParmVar 0x5600e35d4708 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e3606f58 <col:30> 'int' 0
|         |-DeclRefExpr 0x5600e3606f78 <col:33> 'P' lvalue ParmVar 0x5600e35d4780 'parser' 'P'
|         `-DeclRefExpr 0x5600e3606f98 <col:41> 'T' lvalue ParmVar 0x5600e35d4828 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35d4e38 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5600e35d4a58 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d4ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35d4d98 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35d4b98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d4c10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d4cb8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5600e3607180 <col:55, line:429:5>
|     `-ReturnStmt 0x5600e3607170 <line:428:9, col:50>
|       `-CallExpr 0x5600e3607130 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3607030 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36070b0 <col:21> 'const char *' lvalue ParmVar 0x5600e35d4b98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e36070d0 <col:30> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int'
|         |-DeclRefExpr 0x5600e36070f0 <col:41> 'P' lvalue ParmVar 0x5600e35d4c10 'parser' 'P'
|         `-DeclRefExpr 0x5600e3607110 <col:49> 'T' lvalue ParmVar 0x5600e35d4cb8 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35d5288 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5600e35d4ea8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d4f28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35d51e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35d4fe8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d5060 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d5108 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5600e36072f8 <col:55, line:433:5>
|     `-ReturnStmt 0x5600e36072e8 <line:432:9, col:51>
|       `-CallExpr 0x5600e36072a8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e36071a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3607228 <col:21> 'const char *' lvalue ParmVar 0x5600e35d4fe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3607248 <col:30> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int'
|         |-DeclRefExpr 0x5600e3607268 <col:42> 'P' lvalue ParmVar 0x5600e35d5060 'parser' 'P'
|         `-DeclRefExpr 0x5600e3607288 <col:50> 'T' lvalue ParmVar 0x5600e35d5108 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35d56d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5600e35d52f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d5378 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35d5638 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35d5438 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d54b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d5558 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5600e3607520 <col:56, line:437:5>
|     `-ReturnStmt 0x5600e3607510 <line:436:9, col:63>
|       `-CallExpr 0x5600e36074d0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3607320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36073a0 <col:21> 'const char *' lvalue ParmVar 0x5600e35d5438 'keyword' 'const char *'
|         |-BinaryOperator 0x5600e3607470 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5600e3607420 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5600e3607400 <col:30> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5600e3607458 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5600e3607438 <col:42> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5600e3607490 <col:54> 'P' lvalue ParmVar 0x5600e35d54b0 'parser' 'P'
|         `-DeclRefExpr 0x5600e36074b0 <col:62> 'T' lvalue ParmVar 0x5600e35d5558 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35d5c08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5600e35d5748 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d57c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35d5b68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5600e35d5888 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d5908 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35d5980 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d5a28 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5600e3607688 <col:64, line:442:5>
|     |-CallExpr 0x5600e3607608 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e3607538 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5600e3607578 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5600e3607588 <col:30> 'const char *' lvalue ParmVar 0x5600e35d5888 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5600e36075a8 <col:39> 'int' lvalue ParmVar 0x5600e35d5908 'flags' 'int'
|     | |-DeclRefExpr 0x5600e36075c8 <col:46> 'P' lvalue ParmVar 0x5600e35d5980 'parser' 'P'
|     | `-DeclRefExpr 0x5600e36075e8 <col:54> 'T' lvalue ParmVar 0x5600e35d5a28 'x' 'T &'
|     `-ReturnStmt 0x5600e3607678 <line:441:9, col:17>
|       `-UnaryOperator 0x5600e3607660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3607650 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35d6208 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5600e35d5c80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d5cf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5600e35d5d78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5600e35d6168 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5600e35d5e40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d5eb8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d5f58 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5600e35d6028 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5600e3607820 <col:84, line:458:5>
|     `-ReturnStmt 0x5600e3607810 <line:457:9, col:64>
|       `-CallExpr 0x5600e36077c8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e36076b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3607728 <col:28> 'const char *' lvalue ParmVar 0x5600e35d5e40 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e3607748 <col:37> 'int' 0
|         |-DeclRefExpr 0x5600e3607768 <col:40> 'P' lvalue ParmVar 0x5600e35d5eb8 'parser' 'P'
|         |-DeclRefExpr 0x5600e3607788 <col:48> 'T' lvalue ParmVar 0x5600e35d5f58 'x' 'T &'
|         `-DeclRefExpr 0x5600e36077a8 <col:51> 'const V' lvalue ParmVar 0x5600e35d6028 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5600e35d6788 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5600e35d6280 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d62f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5600e35d6378 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5600e35d66e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5600e35d6440 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d64b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d6558 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5600e35d65f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5600e36079b0 <col:86, line:462:5>
|     `-ReturnStmt 0x5600e36079a0 <line:461:9, col:73>
|       `-CallExpr 0x5600e3607958 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3607848 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36078b8 <col:28> 'const char *' lvalue ParmVar 0x5600e35d6440 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e36078d8 <col:37> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int'
|         |-DeclRefExpr 0x5600e36078f8 <col:49> 'P' lvalue ParmVar 0x5600e35d64b8 'parser' 'P'
|         |-DeclRefExpr 0x5600e3607918 <col:57> 'T' lvalue ParmVar 0x5600e35d6558 'x' 'T &'
|         `-DeclRefExpr 0x5600e3607938 <col:60> 'const V' lvalue ParmVar 0x5600e35d65f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5600e35d6de8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5600e35d6800 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d6878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5600e35d68f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5600e35d6d48 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5600e35d69c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d6a40 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35d6ab8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d6b58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5600e35d6bf8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5600e3607b40 <col:95, line:467:5>
|     |-CallExpr 0x5600e3607ab8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e36079c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5600e3607a08 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5600e3607a18 <col:37> 'const char *' lvalue ParmVar 0x5600e35d69c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5600e3607a38 <col:46> 'int' lvalue ParmVar 0x5600e35d6a40 'flags' 'int'
|     | |-DeclRefExpr 0x5600e3607a58 <col:53> 'P' lvalue ParmVar 0x5600e35d6ab8 'parser' 'P'
|     | |-DeclRefExpr 0x5600e3607a78 <col:61> 'T' lvalue ParmVar 0x5600e35d6b58 'x' 'T &'
|     | `-DeclRefExpr 0x5600e3607a98 <col:64> 'const V' lvalue ParmVar 0x5600e35d6bf8 'default_value' 'const V &'
|     `-ReturnStmt 0x5600e3607b30 <line:466:9, col:17>
|       `-UnaryOperator 0x5600e3607b18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3607b08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35d73c8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5600e35d6e68 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d6ee8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5600e35d6f68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5600e35d7328 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5600e35d7030 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d70a8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d7148 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5600e35d71e8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5600e3607ce8 <col:63, line:481:5>
|     `-ReturnStmt 0x5600e3607cd8 <line:480:9, col:47>
|       `-CallExpr 0x5600e3607c90 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3607b70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3607bf0 <col:21> 'const char *' lvalue ParmVar 0x5600e35d7030 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e3607c10 <col:30> 'int' 0
|         |-DeclRefExpr 0x5600e3607c30 <col:33> 'P' lvalue ParmVar 0x5600e35d70a8 'parser' 'P'
|         |-DeclRefExpr 0x5600e3607c50 <col:41> 'T1' lvalue ParmVar 0x5600e35d7148 'x1' 'T1 &'
|         `-DeclRefExpr 0x5600e3607c70 <col:45> 'T2' lvalue ParmVar 0x5600e35d71e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5600e35d7948 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5600e35d7440 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d74b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5600e35d7538 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5600e35d78a8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5600e35d7600 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d7678 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d7718 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5600e35d77b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5600e3607e88 <col:65, line:485:5>
|     `-ReturnStmt 0x5600e3607e78 <line:484:9, col:55>
|       `-CallExpr 0x5600e3607e30 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3607d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3607d90 <col:21> 'const char *' lvalue ParmVar 0x5600e35d7600 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3607db0 <col:30> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int'
|         |-DeclRefExpr 0x5600e3607dd0 <col:41> 'P' lvalue ParmVar 0x5600e35d7678 'parser' 'P'
|         |-DeclRefExpr 0x5600e3607df0 <col:49> 'T1' lvalue ParmVar 0x5600e35d7718 'x1' 'T1 &'
|         `-DeclRefExpr 0x5600e3607e10 <col:53> 'T2' lvalue ParmVar 0x5600e35d77b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5600e35d7ec8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5600e35d79c0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d7a38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5600e35d7ab8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5600e35d7e28 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5600e35d7b80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d7bf8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d7c98 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5600e35d7d38 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5600e3608028 <col:65, line:489:5>
|     `-ReturnStmt 0x5600e3608018 <line:488:9, col:56>
|       `-CallExpr 0x5600e3607fd0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3607eb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3607f30 <col:21> 'const char *' lvalue ParmVar 0x5600e35d7b80 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3607f50 <col:30> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int'
|         |-DeclRefExpr 0x5600e3607f70 <col:42> 'P' lvalue ParmVar 0x5600e35d7bf8 'parser' 'P'
|         |-DeclRefExpr 0x5600e3607f90 <col:50> 'T1' lvalue ParmVar 0x5600e35d7c98 'x1' 'T1 &'
|         `-DeclRefExpr 0x5600e3607fb0 <col:54> 'T2' lvalue ParmVar 0x5600e35d7d38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5600e35d8448 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5600e35d7f40 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35d7fb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5600e35d8038 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5600e35d83a8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5600e35d8100 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35d8178 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35d8218 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5600e35d82b8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5600e3608278 <col:66, line:493:5>
|     `-ReturnStmt 0x5600e3608268 <line:492:9, col:68>
|       `-CallExpr 0x5600e3608220 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3608050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36080d0 <col:21> 'const char *' lvalue ParmVar 0x5600e35d8100 'keyword' 'const char *'
|         |-BinaryOperator 0x5600e36081a0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5600e3608150 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5600e3608130 <col:30> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5600e3608188 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5600e3608168 <col:42> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5600e36081c0 <col:54> 'P' lvalue ParmVar 0x5600e35d8178 'parser' 'P'
|         |-DeclRefExpr 0x5600e36081e0 <col:62> 'T1' lvalue ParmVar 0x5600e35d8218 'x1' 'T1 &'
|         `-DeclRefExpr 0x5600e3608200 <col:66> 'T2' lvalue ParmVar 0x5600e35d82b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5600e35dd1c8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5600e35dcbe0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35dcc58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5600e35dccd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5600e35dd128 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5600e35dcda0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35dce20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35dce98 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35dcf38 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5600e35dcfd8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5600e3608408 <col:74, line:498:5>
|     |-CallExpr 0x5600e3608380 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e3608290 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5600e36082d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5600e36082e0 <col:30> 'const char *' lvalue ParmVar 0x5600e35dcda0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5600e3608300 <col:39> 'int' lvalue ParmVar 0x5600e35dce20 'flags' 'int'
|     | |-DeclRefExpr 0x5600e3608320 <col:46> 'P' lvalue ParmVar 0x5600e35dce98 'parser' 'P'
|     | |-DeclRefExpr 0x5600e3608340 <col:54> 'T1' lvalue ParmVar 0x5600e35dcf38 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5600e3608360 <col:58> 'T2' lvalue ParmVar 0x5600e35dcfd8 'x2' 'T2 &'
|     `-ReturnStmt 0x5600e36083f8 <line:497:9, col:17>
|       `-UnaryOperator 0x5600e36083e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e36083d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35dd528 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5600e35dd248 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35dd488 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5600e35dd300 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35dd378 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5600e3608550 <col:52, line:509:5>
|     `-ReturnStmt 0x5600e3608540 <line:508:9, col:44>
|       `-CallExpr 0x5600e3608508 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3608438 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36084a8 <col:26> 'const char *' lvalue ParmVar 0x5600e35dd300 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e36084c8 <col:35> 'int' 0
|         `-DeclRefExpr 0x5600e36084e8 <col:38> 'P' lvalue ParmVar 0x5600e35dd378 'parser' 'P'
|-FunctionTemplateDecl 0x5600e35dd828 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5600e35dd590 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35dd788 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5600e35dd640 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35dd6b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5600e3608690 <col:54, line:513:5>
|     `-ReturnStmt 0x5600e3608680 <line:512:9, col:52>
|       `-CallExpr 0x5600e3608648 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3608578 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36085e8 <col:26> 'const char *' lvalue ParmVar 0x5600e35dd640 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3608608 <col:35> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int'
|         `-DeclRefExpr 0x5600e3608628 <col:46> 'P' lvalue ParmVar 0x5600e35dd6b8 'parser' 'P'
|-FunctionTemplateDecl 0x5600e35ddb28 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5600e35dd890 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35dda88 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5600e35dd940 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35dd9b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5600e36087d0 <col:54, line:517:5>
|     `-ReturnStmt 0x5600e36087c0 <line:516:9, col:53>
|       `-CallExpr 0x5600e3608788 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e36086b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3608728 <col:26> 'const char *' lvalue ParmVar 0x5600e35dd940 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3608748 <col:35> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int'
|         `-DeclRefExpr 0x5600e3608768 <col:47> 'P' lvalue ParmVar 0x5600e35dd9b8 'parser' 'P'
|-FunctionTemplateDecl 0x5600e35dde28 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5600e35ddb90 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35ddd88 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5600e35ddc40 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35ddcb8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5600e36089c0 <col:55, line:521:5>
|     `-ReturnStmt 0x5600e36089b0 <line:520:9, col:65>
|       `-CallExpr 0x5600e3608978 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e36087f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3608868 <col:26> 'const char *' lvalue ParmVar 0x5600e35ddc40 'keyword' 'const char *'
|         |-BinaryOperator 0x5600e3608938 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5600e36088e8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5600e36088c8 <col:35> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5600e3608920 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5600e3608900 <col:47> 'const int' lvalue Var 0x5600e35d2380 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5600e3608958 <col:59> 'P' lvalue ParmVar 0x5600e35ddcb8 'parser' 'P'
|-FunctionTemplateDecl 0x5600e35de1f8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5600e35dde90 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35de158 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5600e35ddf40 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35ddfc0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35de038 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5600e3608b00 <col:63, line:526:5>
|     |-CallExpr 0x5600e3608a88 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e36089d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5600e3608a18 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5600e3608a28 <col:35> 'const char *' lvalue ParmVar 0x5600e35ddf40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5600e3608a48 <col:44> 'int' lvalue ParmVar 0x5600e35ddfc0 'flags' 'int'
|     | `-DeclRefExpr 0x5600e3608a68 <col:51> 'P' lvalue ParmVar 0x5600e35de038 'parser' 'P'
|     `-ReturnStmt 0x5600e3608af0 <line:525:9, col:17>
|       `-UnaryOperator 0x5600e3608ad8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3608ac8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35de648 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5600e35de268 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35de2e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35de5a8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35de3a8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35de420 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35de4c8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5600e3608c58 <col:58, line:541:5>
|     `-ReturnStmt 0x5600e3608c48 <line:540:9, col:39>
|       `-CallExpr 0x5600e3608c10 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3608b30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3608bb0 <col:21> 'const char *' lvalue ParmVar 0x5600e35de3a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3608bd0 <col:30> 'P' lvalue ParmVar 0x5600e35de420 'parser' 'P'
|         `-DeclRefExpr 0x5600e3608bf0 <col:38> 'T' lvalue ParmVar 0x5600e35de4c8 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35dea98 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5600e35de6b8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35de738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35de9f8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35de7f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35de870 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35de918 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5600e3608d90 <col:60, line:545:5>
|     `-ReturnStmt 0x5600e3608d80 <line:544:9, col:41>
|       `-CallExpr 0x5600e3608d48 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3608c80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3608ce8 <col:23> 'const char *' lvalue ParmVar 0x5600e35de7f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3608d08 <col:32> 'P' lvalue ParmVar 0x5600e35de870 'parser' 'P'
|         `-DeclRefExpr 0x5600e3608d28 <col:40> 'T' lvalue ParmVar 0x5600e35de918 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35deee8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5600e35deb08 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35deb88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35dee48 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35dec48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35decc0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35ded68 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5600e3608ec8 <col:60, line:549:5>
|     `-ReturnStmt 0x5600e3608eb8 <line:548:9, col:41>
|       `-CallExpr 0x5600e3608e80 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3608db8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3608e20 <col:23> 'const char *' lvalue ParmVar 0x5600e35dec48 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3608e40 <col:32> 'P' lvalue ParmVar 0x5600e35decc0 'parser' 'P'
|         `-DeclRefExpr 0x5600e3608e60 <col:40> 'T' lvalue ParmVar 0x5600e35ded68 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35df338 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5600e35def58 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35defd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35df298 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35df098 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35df110 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35df1b8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5600e3609000 <col:61, line:553:5>
|     `-ReturnStmt 0x5600e3608ff0 <line:552:9, col:42>
|       `-CallExpr 0x5600e3608fb8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3608ef0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3608f58 <col:24> 'const char *' lvalue ParmVar 0x5600e35df098 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3608f78 <col:33> 'P' lvalue ParmVar 0x5600e35df110 'parser' 'P'
|         `-DeclRefExpr 0x5600e3608f98 <col:41> 'T' lvalue ParmVar 0x5600e35df1b8 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35df818 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5600e35df3a8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35df428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35df778 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5600e35df4e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35df568 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35df5e0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35df688 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5600e3609178 <col:69, line:557:5>
|     `-ReturnStmt 0x5600e3609168 <line:556:9, col:46>
|       `-CallExpr 0x5600e3609128 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3609028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36090a8 <col:21> 'const char *' lvalue ParmVar 0x5600e35df4e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e36090c8 <col:30> 'int' lvalue ParmVar 0x5600e35df568 'flags' 'int'
|         |-DeclRefExpr 0x5600e36090e8 <col:37> 'P' lvalue ParmVar 0x5600e35df5e0 'parser' 'P'
|         `-DeclRefExpr 0x5600e3609108 <col:45> 'T' lvalue ParmVar 0x5600e35df688 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35dfb28 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5600e35df890 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35dfa88 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5600e35df940 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35df9b8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5600e36092b8 <col:56, line:571:5>
|     `-ReturnStmt 0x5600e36092a8 <line:570:9, col:48>
|       `-CallExpr 0x5600e3609270 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e36091a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3609210 <col:30> 'const char *' lvalue ParmVar 0x5600e35df940 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e3609230 <col:39> 'int' 0
|         `-DeclRefExpr 0x5600e3609250 <col:42> 'P' lvalue ParmVar 0x5600e35df9b8 'parser' 'P'
|-FunctionTemplateDecl 0x5600e35dfeb8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5600e35dfb90 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35dfe18 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5600e35dfc40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35dfcc0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35dfd38 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5600e3609488 <col:67, line:576:5>
|     |-CallExpr 0x5600e3609410 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e36092d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5600e3609310 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5600e3609320 <col:39> 'const char *' lvalue ParmVar 0x5600e35dfc40 'keyword' 'const char *'
|     | |-BinaryOperator 0x5600e36093d0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5600e3609380 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5600e3609340 <col:48> 'int' lvalue ParmVar 0x5600e35dfcc0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5600e36093b8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5600e3609398 <col:56> 'const int' lvalue Var 0x5600e35d2570 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5600e36093f0 <col:68> 'P' lvalue ParmVar 0x5600e35dfd38 'parser' 'P'
|     `-ReturnStmt 0x5600e3609478 <line:575:9, col:17>
|       `-UnaryOperator 0x5600e3609460 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3609450 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35e0308 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5600e35dff28 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35dffa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35e0268 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5600e35e0068 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e00e0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35e0188 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5600e36095f8 <col:62, line:592:5>
|     `-ReturnStmt 0x5600e36095e8 <line:591:9, col:51>
|       `-CallExpr 0x5600e36095a8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e36094b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3609528 <col:30> 'const char *' lvalue ParmVar 0x5600e35e0068 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e3609548 <col:39> 'int' 0
|         |-DeclRefExpr 0x5600e3609568 <col:42> 'P' lvalue ParmVar 0x5600e35e00e0 'parser' 'P'
|         `-DeclRefExpr 0x5600e3609588 <col:50> 'T' lvalue ParmVar 0x5600e35e0188 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35e07e8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5600e35e0378 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35e03f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35e0748 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5600e35e04b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e0538 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e05b0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35e0658 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5600e36097f0 <col:73, line:597:5>
|     |-CallExpr 0x5600e3609770 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e3609610 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5600e3609650 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5600e3609660 <col:39> 'const char *' lvalue ParmVar 0x5600e35e04b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5600e3609710 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5600e36096c0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5600e3609680 <col:48> 'int' lvalue ParmVar 0x5600e35e0538 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5600e36096f8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5600e36096d8 <col:56> 'const int' lvalue Var 0x5600e35d2570 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5600e3609730 <col:68> 'P' lvalue ParmVar 0x5600e35e05b0 'parser' 'P'
|     | `-DeclRefExpr 0x5600e3609750 <col:76> 'T' lvalue ParmVar 0x5600e35e0658 'x' 'T &'
|     `-ReturnStmt 0x5600e36097e0 <line:596:9, col:17>
|       `-UnaryOperator 0x5600e36097c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e36097b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35e0d98 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5600e35e0860 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35e08d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35e0cf8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5600e35e0998 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e0a10 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35e0bd0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5600e3609960 <col:65, line:614:5>
|     `-ReturnStmt 0x5600e3609950 <line:613:9, col:46>
|       `-CallExpr 0x5600e3609910 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3609820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3609890 <col:25> 'const char *' lvalue ParmVar 0x5600e35e0998 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e36098b0 <col:34> 'int' 0
|         |-DeclRefExpr 0x5600e36098d0 <col:37> 'P' lvalue ParmVar 0x5600e35e0a10 'parser' 'P'
|         `-DeclRefExpr 0x5600e36098f0 <col:45> 'Vector<T>' lvalue ParmVar 0x5600e35e0bd0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5600e35e11c8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5600e35e0e08 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35e1128 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5600e35e0ec0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e1010 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5600e3609b80 <col:55, line:618:5>
|     `-ReturnStmt 0x5600e3609b70 <line:617:9, col:55>
|       `-CallExpr 0x5600e3609b30 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3609988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e36099f8 <col:25> 'const char *' lvalue ParmVar 0x5600e35e0ec0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5600e3609a18 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5600e3609af0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5600e3609b10 <col:54> 'Vector<T>' lvalue ParmVar 0x5600e35e1010 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5600e35e1798 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5600e35e1230 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35e12a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35e16f8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5600e35e1368 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e13e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e1460 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35e15b0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5600e3609d78 <col:76, line:623:5>
|     |-CallExpr 0x5600e3609cf8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5600e3609b98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5600e3609bd8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5600e3609be8 <col:34> 'const char *' lvalue ParmVar 0x5600e35e1368 'keyword' 'const char *'
|     | |-BinaryOperator 0x5600e3609c98 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5600e3609c48 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5600e3609c08 <col:43> 'int' lvalue ParmVar 0x5600e35e13e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5600e3609c80 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5600e3609c60 <col:51> 'const int' lvalue Var 0x5600e35d2570 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5600e3609cb8 <col:63> 'P' lvalue ParmVar 0x5600e35e1460 'parser' 'P'
|     | `-DeclRefExpr 0x5600e3609cd8 <col:71> 'Vector<T>' lvalue ParmVar 0x5600e35e15b0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5600e3609d68 <line:622:9, col:17>
|       `-UnaryOperator 0x5600e3609d50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3609d40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35e1cd8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5600e35e1810 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35e1888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35e1c38 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5600e35e1948 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e19c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e1b10 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5600e3609fe0 <col:66, line:627:5>
|     `-ReturnStmt 0x5600e3609fd0 <line:626:9, col:59>
|       `-CallExpr 0x5600e3609f90 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5600e3609da8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5600e3609e18 <col:25> 'const char *' lvalue ParmVar 0x5600e35e1948 'keyword' 'const char *'
|         |-DeclRefExpr 0x5600e3609e38 <col:34> 'int' lvalue ParmVar 0x5600e35e19c8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5600e3609f50 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5600e3609f70 <col:58> 'Vector<T>' lvalue ParmVar 0x5600e35e1b10 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5600e35e1d68 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5600e360a060 <col:25, line:633:5>
|   `-ReturnStmt 0x5600e360a050 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5600e360a038 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5600e360a008 <col:16> 'const bool' lvalue ->_status 0x5600e35ef5d8
|         `-CXXThisExpr 0x5600e3609ff8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5600e35e1ee8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5600e35e1e20 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5600e360a148 <col:27, line:639:5>
|   |-BinaryOperator 0x5600e360a0f0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5600e360a078 <col:9> 'bool' lvalue ParmVar 0x5600e35e1e20 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5600e360a0d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5600e360a0a8 <col:13> 'bool' lvalue ->_status 0x5600e35ef5d8
|   |     `-CXXThisExpr 0x5600e360a098 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5600e360a138 <line:638:9, col:17>
|     `-UnaryOperator 0x5600e360a120 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e360a110 <col:17> 'Args *' this
|-CXXMethodDecl 0x5600e35e2068 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5600e35e1fa8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5600e360a238 <col:39, line:644:5>
|   |-BinaryOperator 0x5600e360a1e0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5600e360a168 <col:9> 'bool' lvalue ParmVar 0x5600e35e1fa8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5600e360a1c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5600e360a198 <col:13> 'const bool' lvalue ->_status 0x5600e35ef5d8
|   |     `-CXXThisExpr 0x5600e360a188 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5600e360a228 <line:643:9, col:17>
|     `-UnaryOperator 0x5600e360a210 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e360a200 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5600e35e2130 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5600e360a2e0 <col:30, line:651:5>
|   `-ReturnStmt 0x5600e360a2d0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5600e360a2b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5600e360a288 <col:16> 'bool' lvalue ->_read_status 0x5600e34e56a0
|         `-ImplicitCastExpr 0x5600e360a268 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5600e360a258 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5600e35e2278 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5600e35e21e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5600e360a3e8 <col:32, line:658:5>
|   |-BinaryOperator 0x5600e360a390 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5600e360a2f8 <col:9> 'bool' lvalue ParmVar 0x5600e35e21e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5600e360a378 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5600e360a348 <col:13> 'bool' lvalue ->_read_status 0x5600e34e56a0
|   |     `-ImplicitCastExpr 0x5600e360a328 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5600e360a318 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5600e360a3d8 <line:657:9, col:17>
|     `-UnaryOperator 0x5600e360a3c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e360a3b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5600e35e23c8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5600e35e2338 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5600e360a4f8 <col:44, line:663:5>
|   |-BinaryOperator 0x5600e360a4a0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5600e360a408 <col:9> 'bool' lvalue ParmVar 0x5600e35e2338 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5600e360a488 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5600e360a458 <col:13> 'bool' lvalue ->_read_status 0x5600e34e56a0
|   |     `-ImplicitCastExpr 0x5600e360a438 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5600e360a428 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5600e360a4e8 <line:662:9, col:17>
|     `-UnaryOperator 0x5600e360a4d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e360a4c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5600e35e2490 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5600e35e2558 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5600e35e2620 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5600e35e26e8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5600e35e29f8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5600e35e2788 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35e2958 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5600e35e2868 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5600e360a8b0 <col:19, line:706:5>
|     `-IfStmt 0x5600e360a888 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5600e360a5f8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5600e360a7b8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5600e360a788 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5600e360a748 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5600e360a650 <col:42> '<bound member function type>' ->simple_slot 0x5600e36039d0
|       |     | `-CXXThisExpr 0x5600e360a640 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5600e360a6e8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5600e360a6a0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5600e336f8b8
|       |     | `-DeclRefExpr 0x5600e360a680 <col:55> 'T' lvalue ParmVar 0x5600e35e2868 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5600e360a728 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5600e360a878 <line:705:13, col:34>
|         `-CallExpr 0x5600e360a850 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5600e360a7d8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5600e360a830 <col:33> 'T' lvalue ParmVar 0x5600e35e2868 'x' 'T &'
|-FunctionTemplateDecl 0x5600e35e2cc8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5600e35e2a58 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35e2c28 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5600e35e2b38 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5600e360ac90 <col:31, line:717:5>
|     |-DeclStmt 0x5600e360a9f0 <line:713:9, col:23>
|     | `-VarDecl 0x5600e360a8d8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5600e360a9c8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5600e360a950 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5600e360a9a8 <col:21> 'T' lvalue ParmVar 0x5600e35e2b38 'x' 'T &'
|     |-IfStmt 0x5600e360ac40 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5600e360aae8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5600e360ac20 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5600e360abc0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5600e360ab50 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|     |   | `-DeclRefExpr 0x5600e360ab30 <col:14> 'T *' lvalue Var 0x5600e360a8d8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5600e360ac00 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5600e360ac78 <line:716:9, col:16>
|       `-DeclRefExpr 0x5600e360ac58 <col:16> 'T *' lvalue Var 0x5600e360a8d8 's' 'T *'
|-FunctionTemplateDecl 0x5600e35e30d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5600e35e2d28 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5600e35e2da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5600e35e3038 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5600e35e2e88 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5600e35e2f28 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5600e360afa0 <col:37, line:726:5>
|     |-IfStmt 0x5600e360af30 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5600e360af50 <line:723:13, col:26>
|     | | `-VarDecl 0x5600e360acf8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5600e360ade8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5600e360ad70 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5600e360adc8 <col:25> 'T' lvalue ParmVar 0x5600e35e2e88 'x' 'T &'
|     | |-DeclRefExpr 0x5600e360ae10 <col:16> 'T *' lvalue Var 0x5600e360acf8 's' 'T *'
|     | `-BinaryOperator 0x5600e360af10 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5600e360aec0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5600e360ae50 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|     |   | `-DeclRefExpr 0x5600e360ae30 <col:14> 'T *' lvalue Var 0x5600e360acf8 's' 'T *'
|     |   `-DeclRefExpr 0x5600e360aef0 <col:18> 'const V' lvalue ParmVar 0x5600e35e2f28 'value' 'const V &'
|     `-ReturnStmt 0x5600e360af90 <line:725:9, col:17>
|       `-UnaryOperator 0x5600e360af78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e360af68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5600e35e34d8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5600e35e3140 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5600e35e3438 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5600e35e31f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e3270 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e3318 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5600e360bdc0 <col:65, line:737:5>
|     |-DeclStmt 0x5600e360b038 <line:732:9, col:26>
|     | `-VarDecl 0x5600e360afd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5600e360bd88 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5600e360bda8 <line:733:13, col:58>
|       | `-VarDecl 0x5600e360b060 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5600e360b240 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5600e360b210 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5600e360b1f8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5600e360b1d8 <col:26, col:58> 'String' (CXXTemporary 0x5600e360b1d8)
|       |           `-CXXMemberCallExpr 0x5600e360b168 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5600e360b0d8 <col:26> '<bound member function type>' ->find 0x5600e3602fe8
|       |             | `-CXXThisExpr 0x5600e360b0c8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5600e360b1a0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e360b108 <col:31> 'const char *' lvalue ParmVar 0x5600e35e31f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5600e360b1b8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e360b128 <col:40> 'int' lvalue ParmVar 0x5600e35e3270 'flags' 'int'
|       |             `-DeclRefExpr 0x5600e360b148 <col:47> 'Args::Slot *' lvalue Var 0x5600e360afd0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5600e360b2f8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5600e360b2e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5600e360b2c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5600e360b290 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|       |       `-ImplicitCastExpr 0x5600e360b278 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5600e360b258 <col:20> 'String' lvalue Var 0x5600e360b060 'str' 'String'
|       `-CompoundStmt 0x5600e360bd68 <col:61, line:736:9>
|         |-DeclStmt 0x5600e360b7b0 <line:734:13, col:76>
|         | `-VarDecl 0x5600e360b348 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5600e360b780 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5600e360b6f0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5600e360b738 <col:60> 'T' lvalue ParmVar 0x5600e35e3318 'variable' 'T &'
|         |     `-UnaryOperator 0x5600e360b768 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5600e360b758 <col:71> 'Args *' this
|         `-CallExpr 0x5600e360bd38 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5600e360b7d8 <col:13> '<bound member function type>' ->postparse 0x5600e36031f8
|           | `-CXXThisExpr 0x5600e360b7c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5600e360bcf8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5600e360b808 <col:23> 'T *' lvalue Var 0x5600e360b348 's' 'T *'
|           | `-CallExpr 0x5600e360bcb8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5600e360ba90 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5600e360bb90 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5600e360bbb0 <col:86> 'String' lvalue Var 0x5600e360b060 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5600e360bc60 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5600e360bbf0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|           |   | `-DeclRefExpr 0x5600e360bbd0 <col:92> 'T *' lvalue Var 0x5600e360b348 's' 'T *'
|           |   `-UnaryOperator 0x5600e360bca0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5600e360bc90 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5600e360bd18 <col:103> 'Args::Slot *' lvalue Var 0x5600e360afd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5600e35e3a28 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5600e35e3548 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5600e35e35c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5600e35e3988 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5600e35e3688 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e3708 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e37a8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5600e35e3848 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5600e360cc60 <col:88, line:745:5>
|     |-DeclStmt 0x5600e360be58 <line:741:9, col:26>
|     | `-VarDecl 0x5600e360bdf0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5600e360c078 <line:742:9, col:55>
|     | `-VarDecl 0x5600e360be80 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5600e360c060 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5600e360c030 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5600e360c018 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5600e360bff8 <col:22, col:54> 'String' (CXXTemporary 0x5600e360bff8)
|     |           `-CXXMemberCallExpr 0x5600e360bf88 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5600e360bef8 <col:22> '<bound member function type>' ->find 0x5600e3602fe8
|     |             | `-CXXThisExpr 0x5600e360bee8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5600e360bfc0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5600e360bf28 <col:27> 'const char *' lvalue ParmVar 0x5600e35e3688 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5600e360bfd8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5600e360bf48 <col:36> 'int' lvalue ParmVar 0x5600e35e3708 'flags' 'int'
|     |             `-DeclRefExpr 0x5600e360bf68 <col:43> 'Args::Slot *' lvalue Var 0x5600e360bdf0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5600e360c450 <line:743:9, col:72>
|     | `-VarDecl 0x5600e360c0c8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5600e360c420 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5600e360c390 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5600e360c3d8 <col:56> 'T' lvalue ParmVar 0x5600e35e37a8 'variable' 'T &'
|     |     `-UnaryOperator 0x5600e360c408 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5600e360c3f8 <col:67> 'Args *' this
|     `-CallExpr 0x5600e360cc30 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5600e360c478 <col:9> '<bound member function type>' ->postparse 0x5600e36031f8
|       | `-CXXThisExpr 0x5600e360c468 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5600e360cbf0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5600e360c4a8 <col:19> 'T *' lvalue Var 0x5600e360c0c8 's' 'T *'
|       | `-ParenExpr 0x5600e360cbd0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5600e360cba0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5600e360cb88 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5600e360cb70 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5600e360cb50 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5600e360cb20 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|       |     |       `-ImplicitCastExpr 0x5600e360cb08 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5600e360c4c8 <col:25> 'String' lvalue Var 0x5600e360be80 'str' 'String'
|       |     |-CallExpr 0x5600e360c978 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5600e360c750 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5600e360c850 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5600e360c870 <col:89> 'String' lvalue Var 0x5600e360be80 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5600e360c920 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5600e360c8b0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|       |     | | `-DeclRefExpr 0x5600e360c890 <col:95> 'T *' lvalue Var 0x5600e360c0c8 's' 'T *'
|       |     | `-UnaryOperator 0x5600e360c960 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5600e360c950 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5600e360cae8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5600e360cac8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5600e360ca98 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5600e360ca48 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5600e360c9d8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|       |         | | `-DeclRefExpr 0x5600e360c9b8 <col:109> 'T *' lvalue Var 0x5600e360c0c8 's' 'T *'
|       |         | `-DeclRefExpr 0x5600e360ca78 <col:113> 'const V' lvalue ParmVar 0x5600e35e3848 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5600e360cab8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5600e360cc10 <col:128> 'Args::Slot *' lvalue Var 0x5600e360bdf0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5600e35e3f58 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5600e35e3aa0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35e3b18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35e3eb8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5600e35e3bd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e3c58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e3cd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35e3d78 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5600e360d858 <col:75, line:754:5>
|     |-DeclStmt 0x5600e360cd08 <line:749:9, col:26>
|     | `-VarDecl 0x5600e360cca0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5600e360d820 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5600e360d840 <line:750:13, col:58>
|       | `-VarDecl 0x5600e360cd30 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5600e360cf10 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5600e360cee0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5600e360cec8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5600e360cea8 <col:26, col:58> 'String' (CXXTemporary 0x5600e360cea8)
|       |           `-CXXMemberCallExpr 0x5600e360ce38 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5600e360cda8 <col:26> '<bound member function type>' ->find 0x5600e3602fe8
|       |             | `-CXXThisExpr 0x5600e360cd98 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5600e360ce70 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e360cdd8 <col:31> 'const char *' lvalue ParmVar 0x5600e35e3bd8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5600e360ce88 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e360cdf8 <col:40> 'int' lvalue ParmVar 0x5600e35e3c58 'flags' 'int'
|       |             `-DeclRefExpr 0x5600e360ce18 <col:47> 'Args::Slot *' lvalue Var 0x5600e360cca0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5600e360cfc8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5600e360cfb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5600e360cf90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5600e360cf60 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|       |       `-ImplicitCastExpr 0x5600e360cf48 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5600e360cf28 <col:20> 'String' lvalue Var 0x5600e360cd30 'str' 'String'
|       `-CompoundStmt 0x5600e360d800 <col:61, line:753:9>
|         |-DeclStmt 0x5600e360d3a0 <line:751:13, col:63>
|         | `-VarDecl 0x5600e360d018 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5600e360d370 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5600e360d2e0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5600e360d328 <col:47> 'T' lvalue ParmVar 0x5600e35e3d78 'variable' 'T &'
|         |     `-UnaryOperator 0x5600e360d358 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5600e360d348 <col:58> 'Args *' this
|         `-CallExpr 0x5600e360d7d0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5600e360d3c8 <col:13> '<bound member function type>' ->postparse 0x5600e36031f8
|           | `-CXXThisExpr 0x5600e360d3b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5600e360d790 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5600e360d3f8 <col:23> 'T *' lvalue Var 0x5600e360d018 's' 'T *'
|           | `-CallExpr 0x5600e360d750 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5600e360d5e0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5600e360d628 <col:56> 'P' lvalue ParmVar 0x5600e35e3cd0 'parser' 'P'
|           |   |-DeclRefExpr 0x5600e360d648 <col:64> 'String' lvalue Var 0x5600e360cd30 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5600e360d6f8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5600e360d688 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|           |   | `-DeclRefExpr 0x5600e360d668 <col:70> 'T *' lvalue Var 0x5600e360d018 's' 'T *'
|           |   `-UnaryOperator 0x5600e360d738 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5600e360d728 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5600e360d7b0 <col:81> 'Args::Slot *' lvalue Var 0x5600e360cca0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5600e35e45b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5600e35e3fd0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5600e35e4048 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5600e35e40c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5600e35e4518 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5600e35e4190 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e4210 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e4288 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35e4328 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5600e35e43c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5600e3610990 <col:98, line:762:5>
|     |-DeclStmt 0x5600e360d8f0 <line:758:9, col:26>
|     | `-VarDecl 0x5600e360d888 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5600e360db10 <line:759:9, col:55>
|     | `-VarDecl 0x5600e360d918 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5600e360daf8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5600e360dac8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5600e360dab0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5600e360da90 <col:22, col:54> 'String' (CXXTemporary 0x5600e360da90)
|     |           `-CXXMemberCallExpr 0x5600e360da20 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5600e360d990 <col:22> '<bound member function type>' ->find 0x5600e3602fe8
|     |             | `-CXXThisExpr 0x5600e360d980 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5600e360da58 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5600e360d9c0 <col:27> 'const char *' lvalue ParmVar 0x5600e35e4190 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5600e360da70 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5600e360d9e0 <col:36> 'int' lvalue ParmVar 0x5600e35e4210 'flags' 'int'
|     |             `-DeclRefExpr 0x5600e360da00 <col:43> 'Args::Slot *' lvalue Var 0x5600e360d888 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5600e360df30 <line:760:9, col:59>
|     | `-VarDecl 0x5600e360db68 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5600e360df00 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5600e360de70 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5600e360deb8 <col:43> 'T' lvalue ParmVar 0x5600e35e4328 'variable' 'T &'
|     |     `-UnaryOperator 0x5600e360dee8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5600e360ded8 <col:54> 'Args *' this
|     `-CallExpr 0x5600e3610960 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5600e360df58 <col:9> '<bound member function type>' ->postparse 0x5600e36031f8
|       | `-CXXThisExpr 0x5600e360df48 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5600e3610920 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5600e360df88 <col:19> 'T *' lvalue Var 0x5600e360db68 's' 'T *'
|       | `-ParenExpr 0x5600e3610900 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5600e36108d0 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5600e36108b8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5600e36108a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5600e3610880 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5600e3610850 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|       |     |       `-ImplicitCastExpr 0x5600e3610838 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5600e360dfa8 <col:25> 'String' lvalue Var 0x5600e360d918 'str' 'String'
|       |     |-CallExpr 0x5600e36106a8 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5600e360e190 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5600e360e1d8 <col:59> 'P' lvalue ParmVar 0x5600e35e4288 'parser' 'P'
|       |     | |-DeclRefExpr 0x5600e360e1f8 <col:67> 'String' lvalue Var 0x5600e360d918 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5600e3610650 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5600e36105e0 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|       |     | | `-DeclRefExpr 0x5600e360e218 <col:73> 'T *' lvalue Var 0x5600e360db68 's' 'T *'
|       |     | `-UnaryOperator 0x5600e3610690 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5600e3610680 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5600e3610818 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5600e36107f8 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5600e36107c8 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5600e3610778 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5600e3610708 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|       |         | | `-DeclRefExpr 0x5600e36106e8 <col:87> 'T *' lvalue Var 0x5600e360db68 's' 'T *'
|       |         | `-DeclRefExpr 0x5600e36107a8 <col:91> 'const V' lvalue ParmVar 0x5600e35e43c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5600e36107e8 <col:98> 'bool' true
|       `-DeclRefExpr 0x5600e3610940 <col:106> 'Args::Slot *' lvalue Var 0x5600e360d888 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5600e35ec660 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5600e35e4638 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35e46b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5600e35e4738 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5600e35ec5c0 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5600e35e4800 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35e4880 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35e48f8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35e4998 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5600e35e4a38 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5600e3611968 <col:60, line:773:5>
|     |-DeclStmt 0x5600e3610a38 <line:767:9, col:26>
|     | `-VarDecl 0x5600e36109d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5600e3611930 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5600e3611950 <line:768:13, col:58>
|       | `-VarDecl 0x5600e3610a60 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5600e3610c40 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5600e3610c10 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5600e3610bf8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5600e3610bd8 <col:26, col:58> 'String' (CXXTemporary 0x5600e3610bd8)
|       |           `-CXXMemberCallExpr 0x5600e3610b68 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5600e3610ad8 <col:26> '<bound member function type>' ->find 0x5600e3602fe8
|       |             | `-CXXThisExpr 0x5600e3610ac8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5600e3610ba0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e3610b08 <col:31> 'const char *' lvalue ParmVar 0x5600e35e4800 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5600e3610bb8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e3610b28 <col:40> 'int' lvalue ParmVar 0x5600e35e4880 'flags' 'int'
|       |             `-DeclRefExpr 0x5600e3610b48 <col:47> 'Args::Slot *' lvalue Var 0x5600e36109d0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5600e3610cf8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5600e3610ce0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5600e3610cc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5600e3610c90 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|       |       `-ImplicitCastExpr 0x5600e3610c78 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5600e3610c58 <col:20> 'String' lvalue Var 0x5600e3610a60 'str' 'String'
|       `-CompoundStmt 0x5600e3611908 <col:61, line:772:9>
|         |-DeclStmt 0x5600e3611030 <line:769:13, col:66>
|         | `-VarDecl 0x5600e3610d48 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5600e3611000 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5600e3610f70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5600e3610fb8 <col:49> 'T1' lvalue ParmVar 0x5600e35e4998 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5600e3610fe8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5600e3610fd8 <col:61> 'Args *' this
|         |-DeclStmt 0x5600e36113a0 <line:770:13, col:66>
|         | `-VarDecl 0x5600e36110b8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5600e3611370 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5600e36112e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5600e3611328 <col:49> 'T2' lvalue ParmVar 0x5600e35e4a38 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5600e3611358 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5600e3611348 <col:61> 'Args *' this
|         `-CallExpr 0x5600e36118d8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5600e36113c8 <col:13> '<bound member function type>' ->postparse 0x5600e36031f8
|           | `-CXXThisExpr 0x5600e36113b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5600e3611898 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5600e3611438 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5600e36113f8 <col:23> 'T1 *' lvalue Var 0x5600e3610d48 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5600e3611418 <col:29> 'T2 *' lvalue Var 0x5600e36110b8 's2' 'T2 *'
|           | `-CallExpr 0x5600e3611850 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5600e3611620 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5600e3611668 <col:63> 'P' lvalue ParmVar 0x5600e35e48f8 'parser' 'P'
|           |   |-DeclRefExpr 0x5600e3611688 <col:71> 'String' lvalue Var 0x5600e3610a60 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5600e3611738 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5600e36116c8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|           |   | `-DeclRefExpr 0x5600e36116a8 <col:77> 'T1 *' lvalue Var 0x5600e3610d48 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5600e36117f8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5600e3611788 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|           |   | `-DeclRefExpr 0x5600e3611768 <col:82> 'T2 *' lvalue Var 0x5600e36110b8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5600e3611838 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5600e3611828 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5600e36118b8 <col:94> 'Args::Slot *' lvalue Var 0x5600e36109d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5600e35eca48 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5600e35ec6e0 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35ec9a8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5600e35ec790 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35ec810 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35ec888 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5600e3611e80 <col:67, line:780:5>
|     |-DeclStmt 0x5600e3611a00 <line:777:9, col:26>
|     | `-VarDecl 0x5600e3611998 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5600e3611e48 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5600e3611e68 <line:778:13, col:58>
|       | `-VarDecl 0x5600e3611a28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5600e3611c08 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5600e3611bd8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5600e3611bc0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5600e3611ba0 <col:26, col:58> 'String' (CXXTemporary 0x5600e3611ba0)
|       |           `-CXXMemberCallExpr 0x5600e3611b30 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5600e3611aa0 <col:26> '<bound member function type>' ->find 0x5600e3602fe8
|       |             | `-CXXThisExpr 0x5600e3611a90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5600e3611b68 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e3611ad0 <col:31> 'const char *' lvalue ParmVar 0x5600e35ec790 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5600e3611b80 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5600e3611af0 <col:40> 'int' lvalue ParmVar 0x5600e35ec810 'flags' 'int'
|       |             `-DeclRefExpr 0x5600e3611b10 <col:47> 'Args::Slot *' lvalue Var 0x5600e3611998 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5600e3611cc0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5600e3611ca8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5600e3611c88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5600e3611c58 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|       |       `-ImplicitCastExpr 0x5600e3611c40 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5600e3611c20 <col:20> 'String' lvalue Var 0x5600e3611a28 'str' 'String'
|       `-CallExpr 0x5600e3611e18 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5600e3611ce8 <col:13> '<bound member function type>' ->postparse 0x5600e36031f8
|         | `-CXXThisExpr 0x5600e3611cd8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5600e3611dc8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5600e3611d38 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5600e3611d18 <col:23> 'P' lvalue ParmVar 0x5600e35ec888 'parser' 'P'
|         | |-DeclRefExpr 0x5600e3611d80 <col:36> 'String' lvalue Var 0x5600e3611a28 'str' 'String'
|         | `-UnaryOperator 0x5600e3611db0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5600e3611da0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5600e3611df8 <col:49> 'Args::Slot *' lvalue Var 0x5600e3611998 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5600e35ecde8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5600e35ecab8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5600e35ecd48 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5600e35ecb70 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35ecbf0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35ecc68 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5600e36127f0 <col:71, line:792:5>
|     |-DeclStmt 0x5600e3611f18 <line:784:9, col:26>
|     | `-VarDecl 0x5600e3611eb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5600e3611fe8 <line:785:9, col:29>
|     | `-VarDecl 0x5600e3611f48 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5600e3611fd0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5600e3611fb0 <col:28> 'int' 1
|     |-WhileStmt 0x5600e36126a0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5600e36126c0 <line:786:16, col:61>
|     | | `-VarDecl 0x5600e3612010 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5600e36121f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5600e36121c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5600e36121a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5600e3612188 <col:29, col:61> 'String' (CXXTemporary 0x5600e3612188)
|     | |           `-CXXMemberCallExpr 0x5600e3612118 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5600e3612088 <col:29> '<bound member function type>' ->find 0x5600e3602fe8
|     | |             | `-CXXThisExpr 0x5600e3612078 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5600e3612150 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5600e36120b8 <col:34> 'const char *' lvalue ParmVar 0x5600e35ecb70 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5600e3612168 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5600e36120d8 <col:43> 'int' lvalue ParmVar 0x5600e35ecbf0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5600e36120f8 <col:50> 'Args::Slot *' lvalue Var 0x5600e3611eb0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5600e36122a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5600e3612290 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5600e3612270 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5600e3612240 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|     | |       `-ImplicitCastExpr 0x5600e3612228 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5600e3612208 <col:23> 'String' lvalue Var 0x5600e3612010 'str' 'String'
|     | `-CompoundStmt 0x5600e3612678 <col:64, line:790:9>
|     |   |-CallExpr 0x5600e3612400 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5600e36122d0 <col:13> '<bound member function type>' ->postparse 0x5600e36031f8
|     |   | | `-CXXThisExpr 0x5600e36122c0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5600e36123b0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5600e3612320 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5600e3612300 <col:23> 'P' lvalue ParmVar 0x5600e35ecc68 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5600e3612368 <col:36> 'String' lvalue Var 0x5600e3612010 'str' 'String'
|     |   | | `-UnaryOperator 0x5600e3612398 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5600e3612388 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5600e36123e0 <col:49> 'Args::Slot *' lvalue Var 0x5600e3611eb0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5600e3612598 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5600e3612430 <col:13> 'int' lvalue Var 0x5600e3611f48 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5600e3612580 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5600e3612560 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5600e36124c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5600e36124a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5600e3612490 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5600e3612450 <col:28> 'int' lvalue Var 0x5600e3611f48 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5600e3612470 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5600e3612548 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5600e3612518 <col:49> 'bool' lvalue ->_read_status 0x5600e34e56a0
|     |   |         `-ImplicitCastExpr 0x5600e36124f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5600e36124e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5600e3612648 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5600e36125b8 <col:13> 'int' lvalue ParmVar 0x5600e35ecbf0 'flags' 'int'
|     |     `-UnaryOperator 0x5600e3612630 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5600e3612618 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5600e36125f8 <col:23> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5600e36127d0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5600e3612708 <col:9> 'bool' lvalue ->_read_status 0x5600e34e56a0
|       | `-ImplicitCastExpr 0x5600e36126e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5600e36126d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5600e36127b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5600e3612790 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5600e3612778 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5600e3612738 <col:25> 'int' lvalue Var 0x5600e3611f48 'read_status' 'int'
|           `-IntegerLiteral 0x5600e3612758 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5600e35ed2c8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5600e35ece58 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35eced8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35ed228 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5600e35ecf98 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35ed018 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35ed090 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35ed138 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5600e3613780 <col:84, line:805:5>
|     |-DeclStmt 0x5600e3612898 <line:796:9, col:26>
|     | `-VarDecl 0x5600e3612830 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5600e3612968 <line:797:9, col:29>
|     | `-VarDecl 0x5600e36128c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5600e3612950 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5600e3612930 <col:28> 'int' 1
|     |-DeclStmt 0x5600e3612ca0 <line:798:9, col:71>
|     | `-VarDecl 0x5600e36129b8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5600e3612c70 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5600e3612be0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5600e3612c28 <col:55> 'T' lvalue ParmVar 0x5600e35ed138 'variable' 'T &'
|     |     `-UnaryOperator 0x5600e3612c58 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5600e3612c48 <col:66> 'Args *' this
|     |-WhileStmt 0x5600e3613630 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5600e3613650 <line:799:16, col:61>
|     | | `-VarDecl 0x5600e3612cc8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5600e3612ea8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5600e3612e78 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5600e3612e60 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5600e3612e40 <col:29, col:61> 'String' (CXXTemporary 0x5600e3612e40)
|     | |           `-CXXMemberCallExpr 0x5600e3612dd0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5600e3612d40 <col:29> '<bound member function type>' ->find 0x5600e3602fe8
|     | |             | `-CXXThisExpr 0x5600e3612d30 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5600e3612e08 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5600e3612d70 <col:34> 'const char *' lvalue ParmVar 0x5600e35ecf98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5600e3612e20 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5600e3612d90 <col:43> 'int' lvalue ParmVar 0x5600e35ed018 'flags' 'int'
|     | |             `-DeclRefExpr 0x5600e3612db0 <col:50> 'Args::Slot *' lvalue Var 0x5600e3612830 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5600e3612f60 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5600e3612f48 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5600e3612f28 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5600e3612ef8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|     | |       `-ImplicitCastExpr 0x5600e3612ee0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5600e3612ec0 <col:23> 'String' lvalue Var 0x5600e3612cc8 'str' 'String'
|     | `-CompoundStmt 0x5600e3613608 <col:64, line:803:9>
|     |   |-CallExpr 0x5600e3613390 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5600e3612f88 <col:13> '<bound member function type>' ->postparse 0x5600e36031f8
|     |   | | `-CXXThisExpr 0x5600e3612f78 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5600e3613350 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5600e3612fb8 <col:23> 'T *' lvalue Var 0x5600e36129b8 's' 'T *'
|     |   | | `-CallExpr 0x5600e3613310 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5600e36131a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5600e36131e8 <col:56> 'P' lvalue ParmVar 0x5600e35ed090 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5600e3613208 <col:64> 'String' lvalue Var 0x5600e3612cc8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5600e36132b8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5600e3613248 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|     |   | |   | `-DeclRefExpr 0x5600e3613228 <col:70> 'T *' lvalue Var 0x5600e36129b8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5600e36132f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5600e36132e8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5600e3613370 <col:81> 'Args::Slot *' lvalue Var 0x5600e3612830 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5600e3613528 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5600e36133c0 <col:13> 'int' lvalue Var 0x5600e36128c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5600e3613510 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5600e36134f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5600e3613458 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5600e3613438 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5600e3613420 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5600e36133e0 <col:28> 'int' lvalue Var 0x5600e36128c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5600e3613400 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5600e36134d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5600e36134a8 <col:49> 'bool' lvalue ->_read_status 0x5600e34e56a0
|     |   |         `-ImplicitCastExpr 0x5600e3613488 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5600e3613478 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5600e36135d8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5600e3613548 <col:13> 'int' lvalue ParmVar 0x5600e35ed018 'flags' 'int'
|     |     `-UnaryOperator 0x5600e36135c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5600e36135a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5600e3613588 <col:23> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5600e3613760 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5600e3613698 <col:9> 'bool' lvalue ->_read_status 0x5600e34e56a0
|       | `-ImplicitCastExpr 0x5600e3613678 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5600e3613668 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5600e3613740 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5600e3613720 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5600e3613708 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5600e36136c8 <col:25> 'int' lvalue Var 0x5600e36128c8 'read_status' 'int'
|           `-IntegerLiteral 0x5600e36136e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5600e35ed8a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5600e35ed340 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5600e35ed3b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5600e35ed808 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5600e35ed478 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5600e35ed4f8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5600e35ed570 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5600e35ed6c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5600e3614588 <col:87, line:821:5>
|     |-DeclStmt 0x5600e3613830 <line:809:9, col:26>
|     | `-VarDecl 0x5600e36137c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5600e3613900 <line:810:9, col:29>
|     | `-VarDecl 0x5600e3613860 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5600e36138e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5600e36138c8 <col:28> 'int' 1
|     |-DeclStmt 0x5600e3613b48 <line:811:9, col:38>
|     | `-VarDecl 0x5600e3613a30 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5600e3613b20 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5600e3613aa8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5600e3613b00 <col:29> 'Vector<T>' lvalue ParmVar 0x5600e35ed6c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5600e3614438 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5600e3614458 <line:812:16, col:61>
|     | | `-VarDecl 0x5600e3613b70 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5600e3613d50 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5600e3613d20 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5600e3613d08 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5600e3613ce8 <col:29, col:61> 'String' (CXXTemporary 0x5600e3613ce8)
|     | |           `-CXXMemberCallExpr 0x5600e3613c78 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5600e3613be8 <col:29> '<bound member function type>' ->find 0x5600e3602fe8
|     | |             | `-CXXThisExpr 0x5600e3613bd8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5600e3613cb0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5600e3613c18 <col:34> 'const char *' lvalue ParmVar 0x5600e35ed478 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5600e3613cc8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5600e3613c38 <col:43> 'int' lvalue ParmVar 0x5600e35ed4f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5600e3613c58 <col:50> 'Args::Slot *' lvalue Var 0x5600e36137c8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5600e3613e08 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5600e3613df0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5600e3613dd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5600e3613da0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5600e3331878
|     | |       `-ImplicitCastExpr 0x5600e3613d88 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5600e3613d68 <col:23> 'String' lvalue Var 0x5600e3613b70 'str' 'String'
|     | `-CompoundStmt 0x5600e3614400 <col:64, line:819:9>
|     |   |-DeclStmt 0x5600e3613ec8 <line:813:13, col:23>
|     |   | `-VarDecl 0x5600e3613e30 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5600e3613ea8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5600e3614048 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5600e3613ef0 <col:13> '<bound member function type>' ->postparse 0x5600e36031f8
|     |   | | `-CXXThisExpr 0x5600e3613ee0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5600e3613ff0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5600e3613f40 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5600e3613f20 <col:23> 'P' lvalue ParmVar 0x5600e35ed570 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5600e3613f88 <col:36> 'String' lvalue Var 0x5600e3613b70 'str' 'String'
|     |   | | |-DeclRefExpr 0x5600e3613fa8 <col:41> 'T' lvalue Var 0x5600e3613e30 'sx' 'T'
|     |   | | `-UnaryOperator 0x5600e3613fd8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5600e3613fc8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5600e3614028 <col:53> 'Args::Slot *' lvalue Var 0x5600e36137c8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5600e36141a0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5600e36140d8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5600e36140a8 <col:17> 'bool' lvalue ->_read_status 0x5600e34e56a0
|     |   | |   `-ImplicitCastExpr 0x5600e3614088 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5600e3614078 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5600e3614178 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5600e3614110 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5600e36140f0 <col:17> 'Vector<T> *' lvalue Var 0x5600e3613a30 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5600e3614158 <col:30> 'T' lvalue Var 0x5600e3613e30 'sx' 'T'
|     |   |-BinaryOperator 0x5600e3614320 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5600e36141b8 <col:13> 'int' lvalue Var 0x5600e3613860 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5600e3614308 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5600e36142e8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5600e3614250 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5600e3614230 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5600e3614218 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5600e36141d8 <col:28> 'int' lvalue Var 0x5600e3613860 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5600e36141f8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5600e36142d0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5600e36142a0 <col:49> 'bool' lvalue ->_read_status 0x5600e34e56a0
|     |   |         `-ImplicitCastExpr 0x5600e3614280 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5600e3614270 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5600e36143d0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5600e3614340 <col:13> 'int' lvalue ParmVar 0x5600e35ed4f8 'flags' 'int'
|     |     `-UnaryOperator 0x5600e36143b8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5600e36143a0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5600e3614380 <col:23> 'const int' lvalue Var 0x5600e35d2288 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5600e3614568 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5600e36144a0 <col:9> 'bool' lvalue ->_read_status 0x5600e34e56a0
|       | `-ImplicitCastExpr 0x5600e3614480 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5600e3614470 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5600e3614548 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5600e3614528 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5600e3614510 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5600e36144d0 <col:25> 'int' lvalue Var 0x5600e3613860 'read_status' 'int'
|           `-IntegerLiteral 0x5600e36144f0 <col:40> 'int' 1
|-AccessSpecDecl 0x5600e35ed920 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5600e35ed948 prev 0x5600e35d0588 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5600e35eda40 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5600e35edb30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5600e36145c0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5600e35edc20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5600e36145d0 <col:25, line:830:9>
| |-CXXMethodDecl 0x5600e35edd20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5600e35eddd0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5600e35ede78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5600e35ede78
| | `-ParmVarDecl 0x5600e35edf88 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5600e35ee748 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5600e35ee748
|   `-ParmVarDecl 0x5600e35ee858 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5600e35edff8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5600e35ee158 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5600e35ee350 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5600e35ee200 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5600e35ee278 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5600e36147b0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5600e35ee608 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5600e3614620 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5600e36145e0 <col:20> 'void *' lvalue ParmVar 0x5600e35ee200 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5600e35ee670 '_slot' 'char *'
| | | `-CXXNewExpr 0x5600e36146a8 <col:32, col:45> 'char *' array Function 0x5600e31554f8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5600e3614690 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5600e3614660 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5600e35ee278 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5600e35ee6d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5600e3614770 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5600e3614730 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5600e35ee278 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5600e3614830 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5600e35ee450 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5600e35edc20 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5600e36148b8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5600e3614898 <line:840:13, col:22> 'void' array Function 0x5600e3155858 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5600e3614880 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5600e3614850 <col:22> 'char *' lvalue ->_slot 0x5600e35ee670
| |         `-CXXThisExpr 0x5600e3614840 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5600e35ee550 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5600e35edd20 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5600e3614aa8 <col:22, line:844:9>
| |   `-CallExpr 0x5600e3614a10 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5600e36149f8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5600e36149d8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5600e32612d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5600e3614a48 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5600e3614928 <col:20> 'void *' lvalue ->_ptr 0x5600e35ee608
| |     |   `-CXXThisExpr 0x5600e3614918 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5600e3614a78 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5600e3614a60 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5600e3614968 <col:26> 'char *' lvalue ->_slot 0x5600e35ee670
| |     |     `-CXXThisExpr 0x5600e3614958 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5600e3614a90 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5600e36149a8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5600e35ee6d0
| |         `-CXXThisExpr 0x5600e3614998 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5600e35ee608 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5600e35ee670 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5600e35ee6d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5600e35ee8c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5600e35ee8c8
| | `-ParmVarDecl 0x5600e35ee9d8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5600e35eea78 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5600e35eea78
|   `-ParmVarDecl 0x5600e35eeb88 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5600e35eed28 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5600e35eebf8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5600e35eec98 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5600e35eefc0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5600e35ef1b8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5600e35ef088 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5600e35ef338 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5600e3614ae0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5600e3614ac0 <col:20> 'T *' lvalue ParmVar 0x5600e35ef088 'ptr' 'T *'
|   | `-CompoundStmt 0x5600e3614b30 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5600e35ef288 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5600e35edd20 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5600e3614ce0 <col:22, line:857:9>
|   |   `-CallExpr 0x5600e3614cb0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5600e3614b40 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5600e3319a08 0x5600e32c3d38
|   |     |-CXXOperatorCallExpr 0x5600e3614c40 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5600e3614bd0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5600e35269b8 0x5600e35265d8 0x5600e3526208 0x5600e3525e28 0x5600e3525a48 0x5600e3525678
|   |     | `-MemberExpr 0x5600e3614ba0 <col:29> 'T *' lvalue ->_ptr 0x5600e35ef338
|   |     |   `-CXXThisExpr 0x5600e3614b90 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5600e3614c80 <col:35> 'T' lvalue ->_slot 0x5600e35ef398
|   |       `-CXXThisExpr 0x5600e3614c70 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5600e35ef338 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5600e35ef398 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5600e35ef400 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5600e35ef500 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5600e35ef550 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e35ef4e0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5600e35ef4c0 <col:31> 'int' 48
|-FieldDecl 0x5600e35ef578 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5600e35ef5d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5600e35ef638 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5600e35ef770 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5600e3602890 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5600e36028f0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5600e36029a0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5600e3602bc8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5600e3602ad0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5600e3602d18 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5600e3602c88 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5600e3602fe8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5600e3602dd8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5600e3602e58 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5600e3602f00 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5600e36031f8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5600e36030b0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5600e3603128 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5600e36032c8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5600e3603418 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5600e3603380 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5600e36037a8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5600e36034d8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5600e3603558 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5600e3603600 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5600e36036b8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5600e36039d0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5600e3603880 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5600e36038f8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5600e3603ce8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5600e3603a80 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5600e3603c48 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5600e3603b58 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3322730 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e3322848 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5600e33228d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5600e33229a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5600e3322a90 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e3322ca8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5600e3322b50 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e3322e58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5600e3322d60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5600e3322fa0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5600e3322f10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5600e33230e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5600e3323058 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e3323230 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5600e33231a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e33232f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5600e3323440 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5600e33233b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5600e3323508 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5600e3323650 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5600e33235c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5600e33237c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5600e3323708 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e3323910 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5600e3323880 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e33239d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5600e3323b98 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5600e3323a88 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5600e3323b00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e3323de8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5600e3323c58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5600e3323cd0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5600e3323e98 <col:86> "" ""
|-CXXMethodDecl 0x5600e3324108 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5600e3323f78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5600e3323ff0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e33242b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5600e33241c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5600e3324468 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5600e3324370 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5600e3324738 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5600e3324520 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5600e3324598 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5600e3324610 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e3324a18 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5600e3324800 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5600e3324878 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5600e33248f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5600e3324ad0 <col:115> "" ""
|-AccessSpecDecl 0x5600e3324b40 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5600e3324b78 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e3325080 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5600e3325080
| `-ParmVarDecl 0x5600e3325188 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5600e3325228 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5600e3325228
| `-ParmVarDecl 0x5600e3325338 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5600e335a968 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5600e354d770 <col:7>
|-CXXConstructorDecl 0x5600e335aa40 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5600e335aa40
| `-ParmVarDecl 0x5600e335ab58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5600e335abc8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5600e335abc8
| `-ParmVarDecl 0x5600e335acd8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5600e3550170 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e353c318 prev 0x5600e3531520 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e353c410 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5600e353c500 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5600e353c628 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5600e353c7a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5600e353c928 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5600e353caa8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5600e354d8d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5600e354e148 <col:11>
|-CXXDestructorDecl 0x5600e354d9b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5600e354dae8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5600e354dae8
| `-ParmVarDecl 0x5600e354dbf8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5600e354dc98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5600e354dc98
| `-ParmVarDecl 0x5600e354dda8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5600e3550b68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e3550c78 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5600e3550ef8 <col:11>
|   `-ReturnStmt 0x5600e3550ee8 <col:11>
|     `-UnaryOperator 0x5600e3550ed0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e3550ec0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5600e3550ce8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5600e3550ce8
  `-ParmVarDecl 0x5600e3550df8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e353cb10 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e353cc28 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5600e353ccc8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5600e353cd30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5600e353cd98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5600e353ce00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5600e353ce60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5600e353cf20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5600e353cf80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5600e353cfe0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5600e354d7e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5600e353ccc8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5600e354e158 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5600e354e1b0 <col:12>
|-CXXConstructorDecl 0x5600e354de18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5600e354de18
| `-ParmVarDecl 0x5600e354df28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5600e354dfc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5600e354dfc8
| `-ParmVarDecl 0x5600e354e0d8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5600e3550250 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e352ac30 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5600e352ad48 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5600e352add8 <col:16, col:22> col:16 public
|-EnumDecl 0x5600e352ae00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5600e352af00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5600e352afe0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e352aee0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5600e352aec0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5600e352af90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5600e352aff8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e352af70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5600e352af50 <col:22> 'int' 64
|-CXXMethodDecl 0x5600e352b338 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5600e352b020 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5600e352b0a0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5600e352b118 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5600e352b190 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5600e352b3f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5600e352b5f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5600e352b470 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5600e352b4e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5600e352b6a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5600e352b808 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5600e352b718 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5600e352b8b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5600e352bc10 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5600e352bba0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5600e352bb40 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5600e352bb00 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5600e30024e0 'void'
|       |-PointerType 0x5600e32aafd0 'unsigned char *'
|       | `-BuiltinType 0x5600e30025e0 'unsigned char'
|       |-TypedefType 0x5600e30a75a0 'size_t' sugar
|       | |-Typedef 0x5600e3072be0 'size_t'
|       | `-BuiltinType 0x5600e3002640 'unsigned long'
|       `-PointerType 0x5600e3002ce0 'void *'
|         `-BuiltinType 0x5600e30024e0 'void'
|-CXXMethodDecl 0x5600e352c088 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5600e352bc80 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5600e352bcf8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5600e352bd90 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5600e352be10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5600e3546780 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5600e3546768 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5600e3546730 <col:58> 'int' 0
| |-ParmVarDecl 0x5600e352be90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5600e35467a8 <col:76> 'int' 0
| |-ParmVarDecl 0x5600e352bf10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5600e35467c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5600e352c158 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5600e352c1d8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5600e352c298 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5600e352c338 <col:20>
| `-OptimizeNoneAttr 0x5600e352c390 <col:30>
|-CXXMethodDecl 0x5600e352c408 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5600e352c4a8 <col:20>
| `-OptimizeNoneAttr 0x5600e352c500 <col:30>
|-CXXMethodDecl 0x5600e352c578 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5600e352c618 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5600e352c6c8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5600e352c768 <col:20>
| |-OptimizeNoneAttr 0x5600e352c7c0 <col:30>
| `-WarnUnusedResultAttr 0x5600e352c7e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5600e352c840 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5600e352c8e0 <col:20>
| `-OptimizeNoneAttr 0x5600e352c938 <col:30>
|-CXXMethodDecl 0x5600e352c988 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5600e352ca28 <col:20>
| `-OptimizeNoneAttr 0x5600e352ca80 <col:30>
|-CXXMethodDecl 0x5600e352cac8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5600e352cb68 <col:20>
| `-OptimizeNoneAttr 0x5600e352cbc0 <col:30>
|-CXXMethodDecl 0x5600e352cc08 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e352ccc8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e352cd90 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5600e352ce58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5600e352cf18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e352d038 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5600e3546890 <col:54, line:99:5>
|   `-ReturnStmt 0x5600e3546880 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5600e3546868 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5600e3546838 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5600e353d318
|         `-CXXThisExpr 0x5600e3546828 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5600e352d1d8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5600e352d0e8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5600e3546940 <col:67, line:103:5>
|   `-BinaryOperator 0x5600e3546920 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5600e35468b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5600e353d318
|     | `-CXXThisExpr 0x5600e35468a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5600e3546908 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5600e35468e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5600e352d0e8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5600e352d2d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5600e35469c0 <col:33, line:107:5>
|   `-ReturnStmt 0x5600e35469b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5600e3546998 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5600e3546968 <col:16> 'void *' lvalue ->_destructor_argument 0x5600e353d380
|         `-CXXThisExpr 0x5600e3546958 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5600e352d390 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5600e3546ff0 <col:25, line:113:5>
|   |-ParenExpr 0x5600e3546d38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5600e3546d08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5600e3546a78 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5600e3546a50 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5600e3546a18 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5600e35469e8 <col:24> '<bound member function type>' ->shared 0x5600e352c408
|   |   |       `-ImplicitCastExpr 0x5600e3546a38 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5600e35469d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5600e3546ad8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3546ab8 <col:42> 'int' 0
|   |   `-CallExpr 0x5600e3546c68 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5600e3546c50 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e3546c30 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e3546ca8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3546b48 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5600e3546cc0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3546b70 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e3546cd8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e3546ba8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5600e3546cf0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e3546c18 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3546c00 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e3546bc8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5600e3546f38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5600e3546d68 <col:2> 'unsigned char *' lvalue ->_head 0x5600e353d120
|   | | `-CXXThisExpr 0x5600e3546d58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5600e3546f20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5600e3546f00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5600e3546da8 <col:10> 'unsigned char *' lvalue ->_data 0x5600e353d188
|   |     | `-CXXThisExpr 0x5600e3546d98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5600e3546ee8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5600e3546ec8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5600e3546de8 <col:18> 'unsigned char *' lvalue ->_tail 0x5600e353d1f0
|   |         | `-CXXThisExpr 0x5600e3546dd8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5600e3546eb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5600e3546e90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5600e3546e28 <col:26> 'unsigned char *' lvalue ->_end 0x5600e353d258
|   |             | `-CXXThisExpr 0x5600e3546e18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5600e3546e78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5600e3546e58 <col:33> 'int' 0
|   `-BinaryOperator 0x5600e3546fd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5600e3546f68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5600e353d318
|     | `-CXXThisExpr 0x5600e3546f58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5600e3546fb8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5600e3546f98 <col:16> 'int' 0
|-CXXMethodDecl 0x5600e352d4d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5600e352d440 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5600e352d578 <col:20>
| |-OptimizeNoneAttr 0x5600e352d5d0 <col:30>
| `-WarnUnusedResultAttr 0x5600e352d5f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5600e352d6c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5600e352d638 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5600e352d770 <col:20>
| |-OptimizeNoneAttr 0x5600e352d7c8 <col:30>
| `-WarnUnusedResultAttr 0x5600e352d7f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5600e352d928 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5600e352d830 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5600e352d9d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5600e352dad0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5600e352da40 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5600e352db78 <col:20>
| `-OptimizeNoneAttr 0x5600e352dbd0 <col:30>
|-CXXMethodDecl 0x5600e352dc98 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5600e352dc08 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5600e352dd40 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5600e352de40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5600e352ddb0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5600e352dee8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5600e352dfe8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5600e352df58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5600e352e090 <col:20>
| `-OptimizeNoneAttr 0x5600e352e0e8 <col:30>
|-CXXMethodDecl 0x5600e352e278 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5600e352e128 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5600e352e1a0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5600e35467e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5600e352e328 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5600e352e528 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5600e352e3a0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5600e352e418 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e352e738 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5600e352e5e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5600e352e660 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e352e948 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5600e352e7f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5600e352e878 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5600e35467f8 <col:39> 'int' 0
|-CXXMethodDecl 0x5600e352ea18 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5600e352eae0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5600e352eba8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5600e352ec68 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e352ed30 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5600e352ee78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5600e352ede8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5600e352f048 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5600e352ef38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5600e352efb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e352f118 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5600e352f1d8 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x5600e352f278 <col:20>
| `-OptimizeNoneAttr 0x5600e352f2d0 <col:30>
|-CXXMethodDecl 0x5600e352f320 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5600e352f3c0 <col:20>
| `-OptimizeNoneAttr 0x5600e352f418 <col:30>
|-CXXMethodDecl 0x5600e352f468 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5600e352f528 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e352f5f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5600e352f690 <col:20>
| `-OptimizeNoneAttr 0x5600e352f6e8 <col:30>
|-CXXMethodDecl 0x5600e352f838 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5600e352f728 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5600e352f7a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e352f988 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5600e352f8f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e352fa60 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5600e352fb20 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5600e352fbc0 <col:20>
| `-OptimizeNoneAttr 0x5600e352fc18 <col:30>
|-CXXMethodDecl 0x5600e352fc68 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5600e352fd08 <col:20>
| `-OptimizeNoneAttr 0x5600e352fd60 <col:30>
|-CXXMethodDecl 0x5600e352fdb0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5600e352fe78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5600e352ff18 <col:20>
| `-OptimizeNoneAttr 0x5600e352ff70 <col:30>
|-CXXMethodDecl 0x5600e352ffb8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5600e35300d8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5600e3530248 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5600e3530188 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5600e3530338 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5600e35303d8 <col:20>
| `-OptimizeNoneAttr 0x5600e3530430 <col:30>
|-CXXMethodDecl 0x5600e3530480 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5600e3530540 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e3530778 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5600e35305f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5600e3530668 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5600e3530828 <col:20>
| `-OptimizeNoneAttr 0x5600e3530880 <col:30>
|-CXXMethodDecl 0x5600e3530928 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5600e35309c8 <col:20>
| `-OptimizeNoneAttr 0x5600e3530a20 <col:30>
|-CXXMethodDecl 0x5600e3530a70 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5600e3530b10 <col:20>
| `-OptimizeNoneAttr 0x5600e3530b68 <col:30>
|-CXXMethodDecl 0x5600e3530bb0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5600e3530c50 <col:20>
| `-OptimizeNoneAttr 0x5600e3530ca8 <col:30>
|-CXXMethodDecl 0x5600e3530da8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5600e3530ce0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5600e3530e50 <col:20>
| `-OptimizeNoneAttr 0x5600e3530ea8 <col:30>
|-CXXMethodDecl 0x5600e3531068 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5600e3530ee0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5600e3530f58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5600e3531118 <col:20>
| `-OptimizeNoneAttr 0x5600e3531170 <col:30>
|-CXXMethodDecl 0x5600e3531218 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5600e3531338 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5600e3531458 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5600e35314f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5600e3531520 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5600e3531648 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5600e35316e8 <col:20>
| `-OptimizeNoneAttr 0x5600e3531740 <col:30>
|-CXXMethodDecl 0x5600e35317e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5600e3531888 <col:20>
| `-OptimizeNoneAttr 0x5600e35318e0 <col:30>
|-AccessSpecDecl 0x5600e3531908 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5600e3531930 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5600e3531a30 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5600e3531a80 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e3531a10 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5600e35319f0 <col:14> 'int' 48
|-CXXMethodDecl 0x5600e3531ae8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5600e3531b88 <col:20>
| `-OptimizeNoneAttr 0x5600e3531be0 <col:30>
|-CXXMethodDecl 0x5600e3531c58 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5600e3531cf8 <col:20>
| `-OptimizeNoneAttr 0x5600e3531d50 <col:30>
|-CXXMethodDecl 0x5600e3531e18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5600e3531d88 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5600e3531fb8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5600e3532158 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5600e3532068 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5600e3532200 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5600e3532300 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5600e35326b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e35322e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5600e35322c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5600e3532390 <line:370:2, col:14> col:2 referenced BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5600e35326c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3532370 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5600e3532350 <col:14> 'int' 1
| |-EnumConstantDecl 0x5600e3532420 <line:372:2, col:14> col:2 referenced MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5600e35326e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3532400 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5600e35323e0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5600e35324b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5600e35326f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3532490 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5600e3532470 <col:14> 'int' 3
| |-EnumConstantDecl 0x5600e3532540 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5600e3532710 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3532520 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5600e3532500 <col:13> 'int' 4
| |-EnumConstantDecl 0x5600e35325d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5600e3532728 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e35325b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5600e3532590 <col:13> 'int' 5
| `-EnumConstantDecl 0x5600e3532660 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5600e3532740 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e3532640 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5600e3532620 <col:14> 'int' 6
|-CXXMethodDecl 0x5600e35327a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5600e3532848 <col:20>
| `-OptimizeNoneAttr 0x5600e35328a0 <col:30>
|-CXXMethodDecl 0x5600e3532998 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5600e35328d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5600e3532a40 <col:20>
| `-OptimizeNoneAttr 0x5600e3532a98 <col:30>
|-CXXMethodDecl 0x5600e3532b08 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5600e3532c30 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5600e3532da8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5600e3532ce0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5600e3532e70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5600e3532f38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5600e3533078 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5600e3532fe8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5600e3533120 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5600e3533220 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5600e3533420 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3533200 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5600e35331e0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5600e35332b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5600e3533438 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3533290 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5600e3533270 <col:45> 'int' 4
| |-EnumConstantDecl 0x5600e3533340 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5600e3533450 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3533320 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5600e3533300 <col:24> 'int' 0
| `-EnumConstantDecl 0x5600e35333d0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5600e3533468 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e35333b0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5600e3533390 <col:47> 'int' 16
|-CXXMethodDecl 0x5600e35334c8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5600e3533638 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5600e3533578 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5600e35336e0 <col:20>
| `-OptimizeNoneAttr 0x5600e3533738 <col:30>
|-CXXMethodDecl 0x5600e3533788 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5600e3547110 <col:18, col:36>
|   `-ReturnStmt 0x5600e3547100 <col:20, col:33>
|     `-ImplicitCastExpr 0x5600e35470e8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5600e35470c8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5600e3547098 <col:27> '<bound member function type>' ->xanno 0x5600e35317e8
|           `-CXXThisExpr 0x5600e3547088 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5600e3533880 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5600e3547220 <col:30, col:48>
|   `-ReturnStmt 0x5600e3547210 <col:32, col:45>
|     `-ImplicitCastExpr 0x5600e35471f8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5600e35471d8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5600e35471a8 <col:39> '<bound member function type>' ->xanno 0x5600e3531648
|           `-CXXThisExpr 0x5600e3547198 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5600e3533968 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5600e35473b8 <col:24, col:50>
|   `-ReturnStmt 0x5600e35473a8 <col:26, col:47>
|     `-UnaryOperator 0x5600e3547390 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5600e3547370 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5600e3547358 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5600e3547308 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5600e353c628
|         |   `-CXXMemberCallExpr 0x5600e35472e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5600e35472b8 <col:34> '<bound member function type>' ->xanno 0x5600e35317e8
|         |       `-CXXThisExpr 0x5600e35472a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5600e3547338 <col:46> 'int' 0
|-CXXMethodDecl 0x5600e3533a70 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5600e3547588 <col:36, col:62>
|   `-ReturnStmt 0x5600e3547578 <col:38, col:59>
|     `-UnaryOperator 0x5600e3547560 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5600e3547540 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5600e3547528 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5600e35474a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5600e353c628
|         |   `-CXXMemberCallExpr 0x5600e3547480 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5600e3547450 <col:46> '<bound member function type>' ->xanno 0x5600e3531648
|         |       `-CXXThisExpr 0x5600e3547440 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5600e35474d0 <col:58> 'int' 0
|-CXXMethodDecl 0x5600e3533b88 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5600e3547720 <col:26, col:53>
|   `-ReturnStmt 0x5600e3547710 <col:28, col:50>
|     `-UnaryOperator 0x5600e35476f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5600e35476d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5600e35476c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5600e3547670 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5600e353c928
|         |   `-CXXMemberCallExpr 0x5600e3547650 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5600e3547620 <col:36> '<bound member function type>' ->xanno 0x5600e35317e8
|         |       `-CXXThisExpr 0x5600e3547610 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5600e35476a0 <col:49> 'int' 0
|-CXXMethodDecl 0x5600e3533ca8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5600e35478f8 <col:38, col:65>
|   `-ReturnStmt 0x5600e35478e8 <col:40, col:62>
|     `-UnaryOperator 0x5600e35478d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5600e35478b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5600e3547898 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5600e3547808 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5600e353c928
|         |   `-CXXMemberCallExpr 0x5600e35477e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5600e35477b8 <col:48> '<bound member function type>' ->xanno 0x5600e3531648
|         |       `-CXXThisExpr 0x5600e35477a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5600e3547838 <col:61> 'int' 0
|-CXXMethodDecl 0x5600e3533e58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5600e3533d60 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5600e3547fc8 <col:34, line:463:5>
|   |-ParenExpr 0x5600e3547e10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5600e3547de0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5600e3547a48 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e3547a18 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e3547968 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e3547950 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e3547910 <col:23> 'int' lvalue ParmVar 0x5600e3533d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e3547930 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e35479f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e35479c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e3547988 <col:33> 'int' lvalue ParmVar 0x5600e3533d60 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5600e35479e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5600e35479a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5600e3547aa8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3547a88 <col:56> 'int' 0
|   |   `-CallExpr 0x5600e3547d40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5600e3547d28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e3547d08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e3547d80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3547b98 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5600e3547d98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3547bc8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e3547db0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e3547c00 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5600e3547dc8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e3547cf0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3547cd8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e3547c98 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5600e3547fb8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5600e3547fa0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5600e3547f80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5600e3547f50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5600e3547f00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5600e353c628
|         |   `-CXXMemberCallExpr 0x5600e3547ee0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5600e3547eb0 <col:9> '<bound member function type>' ->xanno 0x5600e3531648
|         |       `-CXXThisExpr 0x5600e3547ea0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5600e3547f68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5600e3547f30 <col:21> 'int' lvalue ParmVar 0x5600e3533d60 'i' 'int'
|-CXXMethodDecl 0x5600e35340a8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5600e3533f18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5600e3533f90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5600e3548658 <col:40, line:472:5>
|   |-ParenExpr 0x5600e3548470 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5600e3548440 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5600e3548120 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e35480f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e3548040 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e3548028 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e3547fe8 <col:23> 'int' lvalue ParmVar 0x5600e3533f18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e3548008 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e35480d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e35480a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e3548060 <col:33> 'int' lvalue ParmVar 0x5600e3533f18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5600e35480b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5600e3548080 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5600e3548180 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3548160 <col:56> 'int' 0
|   |   `-CallExpr 0x5600e35483a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5600e3548388 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e3548368 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e35483e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e35481f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5600e35483f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3548220 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e3548410 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e3548258 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5600e3548428 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e3548350 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3548338 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e35482f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5600e3548638 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5600e35485e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5600e35485b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5600e3548560 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5600e353c628
|     | |   `-CXXMemberCallExpr 0x5600e3548540 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5600e3548510 <col:2> '<bound member function type>' ->xanno 0x5600e35317e8
|     | |       `-CXXThisExpr 0x5600e3548500 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5600e35485c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5600e3548590 <col:14> 'int' lvalue ParmVar 0x5600e3533f18 'i' 'int'
|     `-ImplicitCastExpr 0x5600e3548620 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5600e3548600 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5600e3533f90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5600e3534268 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5600e3534170 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5600e3548dd8 <col:36, line:485:5>
|   |-ParenExpr 0x5600e3548b40 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e3548b10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e35487f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e35487c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e35486d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e35486b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e3548678 <col:23> 'int' lvalue ParmVar 0x5600e3534170 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e3548698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e35487a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e3548788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e35486f0 <col:33> 'int' lvalue ParmVar 0x5600e3534170 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e3548768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e3548750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e3548710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e3548730 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5600e3548850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3548830 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e3548a70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e3548a58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e3548a38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e3548ab0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e35488c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5600e3548ac8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e35488f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e3548ae0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e3548930 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5600e3548af8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e3548a20 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3548a08 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e35489c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5600e3548dc8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5600e3548db0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5600e3548d98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5600e3548d68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5600e3548d08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5600e3548cd8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5600e3548c50 <col:61, col:70> 'char const[48]' lvalue ->c 0x5600e353c500
|             |   `-CXXMemberCallExpr 0x5600e3548c30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5600e3548c00 <col:61> '<bound member function type>' ->xanno 0x5600e3531648
|             |       `-CXXThisExpr 0x5600e3548bf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5600e3548cf0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5600e3548c80 <col:74> 'int' lvalue ParmVar 0x5600e3534170 'i' 'int'
|-CXXMethodDecl 0x5600e35344b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5600e3534328 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5600e35343a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5600e3549528 <col:42, line:500:5>
|   |-ParenExpr 0x5600e35492c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e3549290 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e3548f70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e3548f40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e3548e50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e3548e38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e3548df8 <col:23> 'int' lvalue ParmVar 0x5600e3534328 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e3548e18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e3548f20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e3548f08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e3548e70 <col:33> 'int' lvalue ParmVar 0x5600e3534328 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e3548ee8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e3548ed0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e3548e90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e3548eb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5600e3548fd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3548fb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e35491f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e35491d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e35491b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e3549230 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3549040 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5600e3549248 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3549078 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e3549260 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e35490b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5600e3549278 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e35491a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3549188 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e3549148 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5600e3549508 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5600e35494b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5600e3549488 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5600e3549430 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5600e3549400 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5600e35493b0 <col:48, col:57> 'char [48]' lvalue ->c 0x5600e353c500
|     |     |   `-CXXMemberCallExpr 0x5600e3549390 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5600e3549360 <col:48> '<bound member function type>' ->xanno 0x5600e35317e8
|     |     |       `-CXXThisExpr 0x5600e3549350 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5600e3549418 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5600e35493e0 <col:61> 'int' lvalue ParmVar 0x5600e3534328 'i' 'int'
|     `-ImplicitCastExpr 0x5600e35494f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5600e35494d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5600e35343a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5600e3534678 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5600e3534580 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5600e3549c88 <col:35, line:513:5>
|   |-ParenExpr 0x5600e3549998 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e3549968 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e35496c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e3549690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e35495a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e3549588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e3549548 <col:23> 'int' lvalue ParmVar 0x5600e3534580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e3549568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e3549670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e3549658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e35495c0 <col:33> 'int' lvalue ParmVar 0x5600e3534580 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e3549638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e3549620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e35495e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e3549600 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5600e3549720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3549700 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e35498c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e35498b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e3549890 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e3549908 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3549790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5600e3549920 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e35497c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e3549938 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e3549800 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5600e3549950 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e3549878 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3549860 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e3549820 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5600e3549c78 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5600e3549c60 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5600e3549c48 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5600e3549c18 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5600e3549b90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5600e3549b60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5600e3549b10 <col:60, col:69> 'char const[48]' lvalue ->c 0x5600e353c500
|             |   `-CXXMemberCallExpr 0x5600e3549af0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5600e3549ac0 <col:60> '<bound member function type>' ->xanno 0x5600e3531648
|             |       `-CXXThisExpr 0x5600e3549ab0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5600e3549b78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5600e3549b40 <col:73> 'int' lvalue ParmVar 0x5600e3534580 'i' 'int'
|-CXXMethodDecl 0x5600e35348c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5600e3534738 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5600e35347b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5600e354a3a8 <col:41, line:528:5>
|   |-ParenExpr 0x5600e354a130 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e354a100 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e3549e20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e3549df0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e3549d00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e3549ce8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e3549ca8 <col:23> 'int' lvalue ParmVar 0x5600e3534738 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e3549cc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e3549dd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e3549db8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e3549d20 <col:33> 'int' lvalue ParmVar 0x5600e3534738 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e3549d98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e3549d80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e3549d40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e3549d60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5600e3549e80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e3549e60 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e354a060 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e354a048 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354a028 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354a0a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3549ef0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5600e354a0b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e3549f28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354a0d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e3549f60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5600e354a0e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354a010 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e3549ff8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e3549fb8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5600e354a388 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5600e354a338 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5600e354a308 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5600e354a2b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5600e354a270 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5600e354a220 <col:47, col:56> 'char [48]' lvalue ->c 0x5600e353c500
|     |     |   `-CXXMemberCallExpr 0x5600e354a200 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5600e354a1d0 <col:47> '<bound member function type>' ->xanno 0x5600e35317e8
|     |     |       `-CXXThisExpr 0x5600e354a1c0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5600e354a288 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5600e354a250 <col:60> 'int' lvalue ParmVar 0x5600e3534738 'i' 'int'
|     `-ImplicitCastExpr 0x5600e354a370 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5600e354a350 <col:65> 'int16_t':'short' lvalue ParmVar 0x5600e35347b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5600e3534a88 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5600e3534990 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5600e354aa78 <col:36, line:541:5>
|   |-ParenExpr 0x5600e354a818 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e354a7e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e354a540 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e354a510 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e354a420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e354a408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e354a3c8 <col:23> 'int' lvalue ParmVar 0x5600e3534990 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e354a3e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e354a4f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e354a4d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e354a440 <col:33> 'int' lvalue ParmVar 0x5600e3534990 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e354a4b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e354a4a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e354a460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e354a480 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5600e354a5a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e354a580 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e354a748 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e354a730 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354a710 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354a788 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354a610 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5600e354a7a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354a648 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354a7b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e354a680 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5600e354a7d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354a6f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e354a6e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e354a6a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5600e354aa68 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5600e354aa50 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5600e354aa38 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5600e354aa08 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5600e354a9b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5600e354a980 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5600e354a930 <col:61, col:70> 'char const[48]' lvalue ->c 0x5600e353c500
|             |   `-CXXMemberCallExpr 0x5600e354a910 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5600e354a8e0 <col:61> '<bound member function type>' ->xanno 0x5600e3531648
|             |       `-CXXThisExpr 0x5600e354a8d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5600e354a998 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5600e354a960 <col:74> 'int' lvalue ParmVar 0x5600e3534990 'i' 'int'
|-CXXMethodDecl 0x5600e3534c58 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5600e3534b48 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5600e3534bc0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5600e3534d08 <col:20>
| `-OptimizeNoneAttr 0x5600e3534d60 <col:30>
|-CXXMethodDecl 0x5600e3534e98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5600e3534da0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5600e354b148 <col:35, line:562:5>
|   |-ParenExpr 0x5600e354aee8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e354aeb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e354ac10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e354abe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e354aaf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e354aad8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e354aa98 <col:23> 'int' lvalue ParmVar 0x5600e3534da0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e354aab8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e354abc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e354aba8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e354ab10 <col:33> 'int' lvalue ParmVar 0x5600e3534da0 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e354ab88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e354ab70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e354ab30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e354ab50 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5600e354ac70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e354ac50 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e354ae18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e354ae00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354ade0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354ae58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354ace0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5600e354ae70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354ad18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354ae88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e354ad50 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5600e354aea0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354adc8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e354adb0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e354ad70 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5600e354b138 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5600e354b120 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5600e354b108 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5600e354b0d8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5600e354b080 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5600e354b050 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5600e354b000 <col:60, col:69> 'char const[48]' lvalue ->c 0x5600e353c500
|             |   `-CXXMemberCallExpr 0x5600e354afe0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5600e354afb0 <col:60> '<bound member function type>' ->xanno 0x5600e3531648
|             |       `-CXXThisExpr 0x5600e354afa0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5600e354b068 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5600e354b030 <col:73> 'int' lvalue ParmVar 0x5600e3534da0 'i' 'int'
|-CXXMethodDecl 0x5600e35350a8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5600e3534f58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5600e3534fd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5600e354b828 <col:41, line:577:5>
|   |-ParenExpr 0x5600e354b5b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e354b588 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e354b2e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e354b2b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e354b1c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e354b1a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e354b168 <col:23> 'int' lvalue ParmVar 0x5600e3534f58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e354b188 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e354b290 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e354b278 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e354b1e0 <col:33> 'int' lvalue ParmVar 0x5600e3534f58 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e354b258 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e354b240 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e354b200 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e354b220 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5600e354b340 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e354b320 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e354b4e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e354b4d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354b4b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354b528 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354b3b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5600e354b540 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354b3e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354b558 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e354b420 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5600e354b570 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354b498 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e354b480 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e354b440 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5600e354b808 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5600e354b7b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5600e354b788 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5600e354b728 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5600e354b6f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5600e354b6a8 <col:47, col:56> 'char [48]' lvalue ->c 0x5600e353c500
|     |     |   `-CXXMemberCallExpr 0x5600e354b688 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5600e354b658 <col:47> '<bound member function type>' ->xanno 0x5600e35317e8
|     |     |       `-CXXThisExpr 0x5600e354b648 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5600e354b710 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5600e354b6d8 <col:60> 'int' lvalue ParmVar 0x5600e3534f58 'i' 'int'
|     `-ImplicitCastExpr 0x5600e354b7f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5600e354b7d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5600e3534fd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5600e3535268 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5600e3535170 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5600e354bf58 <col:36, line:591:5>
|   |-ParenExpr 0x5600e354bc98 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e354bc68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e354b9c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e354b990 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e354b8a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e354b888 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e354b848 <col:23> 'int' lvalue ParmVar 0x5600e3535170 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e354b868 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e354b970 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e354b958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e354b8c0 <col:33> 'int' lvalue ParmVar 0x5600e3535170 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e354b938 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e354b920 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e354b8e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e354b900 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5600e354ba20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e354ba00 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e354bbc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e354bbb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354bb90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354bc08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354ba90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5600e354bc20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354bac8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354bc38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e354bb00 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5600e354bc50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354bb78 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e354bb60 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e354bb20 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5600e354bf48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5600e354bf30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5600e354bf18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5600e354bee8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5600e354be60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5600e354be30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5600e354bde0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5600e353c500
|             |   `-CXXMemberCallExpr 0x5600e354bdc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5600e354bd90 <col:61> '<bound member function type>' ->xanno 0x5600e3531648
|             |       `-CXXThisExpr 0x5600e354bd80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5600e354be48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5600e354be10 <col:74> 'int' lvalue ParmVar 0x5600e3535170 'i' 'int'
|-CXXMethodDecl 0x5600e35354b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5600e3535328 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5600e35353a0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5600e354c638 <col:42, line:606:5>
|   |-ParenExpr 0x5600e354c3c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5600e354c398 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5600e354c0f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e354c0c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e354bfd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e354bfb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e354bf78 <col:23> 'int' lvalue ParmVar 0x5600e3535328 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e354bf98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e354c0a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5600e354c088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e354bff0 <col:33> 'int' lvalue ParmVar 0x5600e3535328 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e354c068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e354c050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e354c010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5600e354c030 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5600e354c150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e354c130 <col:60> 'int' 0
|   |   `-CallExpr 0x5600e354c2f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5600e354c2e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354c2c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354c338 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354c1c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5600e354c350 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354c1f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354c368 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e354c230 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5600e354c380 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354c2a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e354c290 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e354c250 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5600e354c618 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5600e354c5c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5600e354c598 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5600e354c538 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5600e354c508 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5600e354c4b8 <col:48, col:57> 'char [48]' lvalue ->c 0x5600e353c500
|     |     |   `-CXXMemberCallExpr 0x5600e354c498 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5600e354c468 <col:48> '<bound member function type>' ->xanno 0x5600e35317e8
|     |     |       `-CXXThisExpr 0x5600e354c458 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5600e354c520 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5600e354c4e8 <col:61> 'int' lvalue ParmVar 0x5600e3535328 'i' 'int'
|     `-ImplicitCastExpr 0x5600e354c600 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5600e354c5e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5600e35353a0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5600e3535650 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5600e3535580 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5600e354cea8 <col:33, line:620:5>
|   |-ParenExpr 0x5600e354cc20 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5600e354cbf0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5600e354c840 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e354c810 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e354c6b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e354c698 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e354c658 <col:23> 'int' lvalue ParmVar 0x5600e3535580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e354c678 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e354c7f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5600e354c7d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e354c6d0 <col:33> 'int' lvalue ParmVar 0x5600e3535580 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e354c7b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e354c7a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e354c6f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5600e354c778 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5600e354c760 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5600e354c728 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5600e354c8a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e354c880 <col:79> 'int' 0
|   |   `-CallExpr 0x5600e354cb50 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5600e354cb38 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354cb18 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354cb90 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354c988 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5600e354cba8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354c9d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354cbc0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e354ca08 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5600e354cbd8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354cb00 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e354cae8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e354caa8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5600e354ce98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5600e354ce80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5600e354ce68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5600e354ce38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5600e354cdb0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5600e354cd80 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5600e354cd30 <col:67, col:76> 'char const[48]' lvalue ->c 0x5600e353c500
|             |   `-CXXMemberCallExpr 0x5600e354cd10 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5600e354cce0 <col:67> '<bound member function type>' ->xanno 0x5600e3531648
|             |       `-CXXThisExpr 0x5600e354ccd0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5600e354cd98 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5600e354cd60 <col:80> 'int' lvalue ParmVar 0x5600e3535580 'i' 'int'
|-CXXMethodDecl 0x5600e3535868 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5600e3535710 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5600e3535790 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5600e354d6d0 <col:45, line:635:5>
|   |-ParenExpr 0x5600e354d418 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5600e354d3e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5600e354d0b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5600e354d080 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5600e354cf20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5600e354cf08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5600e354cec8 <col:23> 'int' lvalue ParmVar 0x5600e3535710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5600e354cee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5600e354d060 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5600e354d048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5600e354cf40 <col:33> 'int' lvalue ParmVar 0x5600e3535710 'i' 'int'
|   |   |     `-BinaryOperator 0x5600e354d028 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5600e354d010 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5600e354cf60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5600e3531a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5600e354cfe8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5600e354cfd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5600e354cf98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5600e354d110 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5600e354d0f0 <col:79> 'int' 0
|   |   `-CallExpr 0x5600e354d348 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5600e354d330 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e354d310 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5600e309e300 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5600e354d388 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354d180 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5600e354d3a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5600e354d1c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5600e354d3b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5600e354d200 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5600e354d3d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5600e354d2f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5600e354d2e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5600e354d298 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5600e354d6b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5600e354d618 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5600e354d5e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5600e354d588 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5600e354d558 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5600e354d508 <col:54, col:63> 'char [48]' lvalue ->c 0x5600e353c500
|     |     |   `-CXXMemberCallExpr 0x5600e354d4e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5600e354d4b8 <col:54> '<bound member function type>' ->xanno 0x5600e35317e8
|     |     |       `-CXXThisExpr 0x5600e354d4a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5600e354d570 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5600e354d538 <col:67> 'int' lvalue ParmVar 0x5600e3535710 'i' 'int'
|     `-CXXConstCastExpr 0x5600e354d680 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5600e354d668 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5600e354d630 <col:91> 'const void *' lvalue ParmVar 0x5600e3535790 'x' 'const void *'
|-CXXMethodDecl 0x5600e3535938 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5600e354d758 <col:34, line:640:5>
|   `-ReturnStmt 0x5600e354d748 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5600e354d730 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5600e354d700 <col:16> 'Packet *' lvalue ->_data_packet 0x5600e353d0b8
|         `-CXXThisExpr 0x5600e354d6f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5600e3535a78 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5600e35359e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5600e3546818 <col:46> 'bool' true
|-CXXMethodDecl 0x5600e3535bf8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5600e3535b30 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5600e3535ca0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5600e3536450 <line:660:22> "" ""
| |-EnumConstantDecl 0x5600e3535da0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e35364c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3535d80 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5600e3535d60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5600e352af00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5600e3535e30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e35364d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3535e10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5600e3535df0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5600e352af90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5600e3535ec0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e35364f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3535ea0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5600e3535e80 <col:21> 'int' 0
| |-EnumConstantDecl 0x5600e3535f50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e3536508 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3535f30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5600e3535f10 <col:19> 'int' 16
| |-EnumConstantDecl 0x5600e3535fe0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e3536520 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3535fc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5600e3535fa0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5600e3536070 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e3536538 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3536050 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5600e3536030 <col:19> 'int' 32
| |-EnumConstantDecl 0x5600e3536100 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e3536550 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e35360e0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5600e35360c0 <col:19> 'int' EnumConstant 0x5600e3535f50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5600e3536190 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e3536568 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3536170 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5600e3536150 <col:19> 'int' EnumConstant 0x5600e3536070 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5600e3536260 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e3536580 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3536240 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5600e3536220 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5600e35361e0 <col:23> 'int' EnumConstant 0x5600e3536190 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5600e3536200 <col:40> 'int' 2
| |-EnumConstantDecl 0x5600e3536330 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5600e3536598 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e3536310 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5600e35362f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5600e35362b0 <col:23> 'int' EnumConstant 0x5600e3536190 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5600e35362d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5600e3536400 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5600e35365b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e35363e0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5600e35363c0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5600e3536380 <col:23> 'int' EnumConstant 0x5600e3536190 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5600e35363a0 <col:40> 'int' 8
|-CXXMethodDecl 0x5600e35365f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5600e3536690 <col:68> "" ""
|-CXXMethodDecl 0x5600e3536728 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5600e35367c8 <col:45> "" ""
|-CXXMethodDecl 0x5600e3536860 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5600e3536900 <col:57> "" ""
|-CXXMethodDecl 0x5600e3536998 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5600e3536a38 <col:45> "" ""
|-CXXMethodDecl 0x5600e3536ad0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5600e3536b70 <col:57> "" ""
|-CXXMethodDecl 0x5600e3536c00 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5600e3536ca0 <col:51> "" ""
|-CXXMethodDecl 0x5600e3536d30 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5600e3536dd0 <col:63> "" ""
|-CXXMethodDecl 0x5600e3536e60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5600e3536f00 <col:53> "" ""
|-CXXMethodDecl 0x5600e3536f90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5600e3537030 <col:65> "" ""
|-CXXMethodDecl 0x5600e3537148 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5600e35370b8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5600e35371f0 <col:61> "" ""
|-CXXMethodDecl 0x5600e3537388 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5600e3537278 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5600e35372f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5600e3537438 <col:67> "" ""
|-CXXMethodDecl 0x5600e3537550 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5600e35374c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5600e35375f8 <col:63> "" ""
|-CXXMethodDecl 0x5600e3537790 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5600e3537680 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5600e35376f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5600e3537840 <col:69> "" ""
|-CXXMethodDecl 0x5600e3537958 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5600e35378c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5600e3537a00 <col:63> "" ""
|-CXXMethodDecl 0x5600e353a0d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5600e3539fc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5600e353a040 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5600e353a188 <col:69> "" ""
|-CXXMethodDecl 0x5600e353a2a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5600e353a210 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5600e353a348 <col:62> "" ""
|-CXXMethodDecl 0x5600e353a4e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5600e353a3d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5600e353a448 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5600e353a590 <col:68> "" ""
|-CXXMethodDecl 0x5600e353a6a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5600e353a618 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5600e353a750 <col:63> "" ""
|-CXXMethodDecl 0x5600e353a8e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5600e353a7d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5600e353a850 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5600e353a998 <col:69> "" ""
|-CXXMethodDecl 0x5600e353aa28 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5600e353aac8 <col:64> "" ""
|-CXXMethodDecl 0x5600e353ab58 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5600e353abf8 <col:52> "" ""
|-CXXMethodDecl 0x5600e353ac88 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5600e353ad28 <col:67> "" ""
|-CXXMethodDecl 0x5600e353adb8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5600e353ae58 <col:55> "" ""
|-CXXMethodDecl 0x5600e353af70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5600e353aee0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5600e353b018 <col:58> "" ""
|-CXXMethodDecl 0x5600e353b1b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5600e353b0a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5600e353b118 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5600e353b260 <col:62> "" ""
|-CXXMethodDecl 0x5600e353b378 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5600e353b2e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5600e353b420 <col:58> "" ""
|-CXXMethodDecl 0x5600e353b5b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5600e353b4a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5600e353b520 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5600e353b668 <col:62> "" ""
|-CXXMethodDecl 0x5600e353b780 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5600e353b6f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5600e353b828 <col:60> "" ""
|-CXXMethodDecl 0x5600e353b9c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5600e353b8b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5600e353b928 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5600e353ba70 <col:64> "" ""
|-CXXMethodDecl 0x5600e353bb88 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5600e353baf8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5600e353bc30 <col:58> "" ""
|-CXXMethodDecl 0x5600e353bdc8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5600e353bcb8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5600e353bd30 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5600e353be78 <col:62> "" ""
|-CXXMethodDecl 0x5600e353bf90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5600e353bf00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5600e353c038 <col:59> "" ""
|-CXXMethodDecl 0x5600e353c1d0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5600e353c0c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5600e353c138 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5600e353c280 <col:63> "" ""
|-AccessSpecDecl 0x5600e353c2f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5600e353c318 prev 0x5600e3531520 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5600e353c410 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5600e353c500 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5600e353c628 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5600e353c7a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5600e353c928 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5600e353caa8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5600e354d8d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5600e354e148 <col:11>
| |-CXXDestructorDecl 0x5600e354d9b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5600e354dae8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5600e354dae8
| | `-ParmVarDecl 0x5600e354dbf8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5600e354dc98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5600e354dc98
| | `-ParmVarDecl 0x5600e354dda8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5600e3550b68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5600e3550c78 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5600e3550ef8 <col:11>
| |   `-ReturnStmt 0x5600e3550ee8 <col:11>
| |     `-UnaryOperator 0x5600e3550ed0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5600e3550ec0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5600e3550ce8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5600e3550ce8
|   `-ParmVarDecl 0x5600e3550df8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5600e353cb10 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5600e353cc28 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5600e353ccc8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5600e353cd30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5600e353cd98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5600e353ce00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5600e353ce60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5600e353cf20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5600e353cf80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5600e353cfe0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5600e354d7e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5600e353ccc8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5600e354e158 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5600e354e1b0 <col:12>
| |-CXXConstructorDecl 0x5600e354de18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5600e354de18
| | `-ParmVarDecl 0x5600e354df28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5600e354dfc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5600e354dfc8
| | `-ParmVarDecl 0x5600e354e0d8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5600e3550250 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5600e353d058 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5600e353d0b8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5600e353d120 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5600e353d188 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5600e353d1f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5600e353d258 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5600e353d2b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5600e353d318 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5600e353d380 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5600e353d408 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5600e353d058 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5600e354d780 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5600e353d2b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5600e354e1c0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5600e354e220 <col:21, line:755:5>
|-CXXConstructorDecl 0x5600e353d5a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5600e353d4e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5600e353d6a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5600e353d888 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5600e353d790 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5600e353db58 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5600e353d940 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5600e353d9b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5600e353da30 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e353dd78 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5600e353dc28 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5600e353dca0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5600e3546358 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5600e353de38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5600e353deb0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5600e353df28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5600e35464b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5600e3546420 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e35465f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5600e3546568 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5600e35466f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e354e2c0 prev 0x5600e352ab80 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5600e354e3f8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5600e354e488 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5600e354e530 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5600e354e5d0 <col:20>
| `-OptimizeNoneAttr 0x5600e354e628 <col:30>
|-CXXMethodDecl 0x5600e354e678 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5600e354e718 <col:20>
| `-OptimizeNoneAttr 0x5600e354e770 <col:30>
|-CXXMethodDecl 0x5600e354e7c0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5600e354e888 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5600e354e950 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5600e354ea68 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5600e354eb30 <line:786:5, col:72> col:55 used network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5600e354ebd0 <col:20>
| `-OptimizeNoneAttr 0x5600e354ec28 <col:30>
|-CXXMethodDecl 0x5600e354ec98 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5600e354ed38 <col:20>
| `-OptimizeNoneAttr 0x5600e354ed90 <col:30>
|-CXXMethodDecl 0x5600e354ee38 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5600e354eed8 <col:20>
| `-OptimizeNoneAttr 0x5600e354ef30 <col:30>
|-CXXMethodDecl 0x5600e354ef80 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5600e354f098 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5600e354f1b8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5600e354f2d8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5600e354f3a0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5600e354f440 <col:62> "" ""
|-AccessSpecDecl 0x5600e354f4b0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5600e354f510 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5600e3550108 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5600e3550330 <col:29, col:31>
|-CXXMethodDecl 0x5600e354f5d8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5600e354f718 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5600e354f688 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5600e354f810 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5600e3550340 <col:23, col:25>
|-CXXMethodDecl 0x5600e354f9c8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5600e354f900 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5600e354fc98 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5600e354fa80 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5600e354faf8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5600e354fb70 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e354fe28 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5600e354fd60 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5600e354ff20 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5600e354ff88 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5600e354ff88
  `-ParmVarDecl 0x5600e3550098 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3360cf8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5600e3360e18 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5600e3360f00 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5600e3360ee0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5600e3360ea8 <col:22> 'int' 4
|-FieldDecl 0x5600e3360fa8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x5600e3360f88 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5600e3360f50 <col:21> 'int' 4
|-FieldDecl 0x5600e3361008 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5600e3361068 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5600e33610c8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5600e3361128 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5600e3361188 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5600e33611e8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5600e3361248 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5600e33612b8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5600e3361328 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e34fc5b0 prev 0x5600e34f33f0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e34fc6a8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5600e34fc748 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5600e3503510 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5600e35038f8 <col:11>
|-CXXConstructorDecl 0x5600e35035f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e35036d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5600e3504040 <col:11>
|-CXXConstructorDecl 0x5600e3503778 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e3503888 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5600e3505898 <col:11>
|-CXXDestructorDecl 0x5600e3504ba8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5600e320b758 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e320b868 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5600e320c130 <col:11>
|   `-ReturnStmt 0x5600e320c120 <col:11>
|     `-UnaryOperator 0x5600e320c108 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e320c0f8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5600e320b8d8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x5600e320b8d8
  `-ParmVarDecl 0x5600e320b9e8 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e34f25a8 prev 0x5600e34f22b8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e34f26a0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5600e34f2730 <col:19, col:25> col:19 public
|-TypedefDecl 0x5600e34f2768 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5600e3157930 'int32_t' sugar
|   |-Typedef 0x5600e306b328 'int32_t'
|   `-TypedefType 0x5600e3044510 '__int32_t' sugar
|     |-Typedef 0x5600e3044128 '__int32_t'
|     `-BuiltinType 0x5600e3002580 'int'
|-TypedefDecl 0x5600e34f27d0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5600e3157af0 'int64_t' sugar
|   |-Typedef 0x5600e306b390 'int64_t'
|   `-TypedefType 0x5600e3044630 '__int64_t' sugar
|     |-Typedef 0x5600e3044208 '__int64_t'
|     `-BuiltinType 0x5600e30025a0 'long'
|-EnumDecl 0x5600e34f2828 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5600e34f29a0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5600e34f2980 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5600e34f2958 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5600e34f2940 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5600e34f2910 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5600e34f2a98 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5600e34f2a78 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5600e34f2a50 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5600e34f2a38 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5600e34f2a10 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5600e34f29f0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5600e34f2ae8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5600e34f2bf0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f3140 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f2bd0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5600e34f2bb0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5600e34f2c80 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f3158 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f2c60 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5600e34f2c40 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5600e34f2d10 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f3170 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f2cf0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5600e34f2cd0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5600e34f2da0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f3188 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f2d80 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5600e34f2d60 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5600e34f2e30 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f31a0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f2e10 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5600e34f2df0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5600e34f2ec0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f31b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f2ea0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5600e34f2e80 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5600e34f2f50 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f31d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f2f30 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5600e34f2f10 <col:26> 'int' EnumConstant 0x5600e34f2bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5600e34f3020 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5600e34f31e8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34f3000 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5600e34f2fe0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5600e34f2fa0 <col:27> 'int' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5600e34f2fc0 <col:44> 'int' EnumConstant 0x5600e34f2ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5600e34f30f0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5600e34f3200 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e34f30d0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5600e34f30b0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5600e34f3070 <col:27> 'int' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5600e34f3090 <col:44> 'int' EnumConstant 0x5600e34f2da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5600e34f3218 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5600e34f3320 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5600e34f3370 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e34f3300 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5600e34f32e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5600e34f3398 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5600e3157560 'uninitialized_type'
|   `-CXXRecord 0x5600e31574c8 'uninitialized_type'
|-CXXRecordDecl 0x5600e34f33f0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5600e34f3500 <line:174:5, line:176:5> line:174:12 Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e3503908 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5600e3503a28 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5600e35039e0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5600e3503970 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e3503960 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5600e35039a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5600e3503a10 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5600e35039c0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5600e34f3748 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f35c0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5600e34f3638 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5600e34ff240 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5600e34ff220 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e3503a40 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5600e3503b90 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5600e3503b18 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5600e3503aa8 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e3503a98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5600e3503b60 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5600e3503b48 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5600e3503ad8 <col:16> 'long' lvalue ParmVar 0x5600e34f35c0 'sec' 'long'
|     `-ImplicitCastExpr 0x5600e3503b78 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5600e3503af8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f3638 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5600e34f39a8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f3818 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5600e34f3890 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5600e34ff278 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5600e34ff258 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e3503ba8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5600e3503ce0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5600e3503c80 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5600e3503c10 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e3503c00 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5600e3503cb0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e3503c40 <col:16> 'int' lvalue ParmVar 0x5600e34f3818 'sec' 'int'
|     `-ImplicitCastExpr 0x5600e3503cc8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5600e3503c60 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f3890 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5600e34f3c08 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f3a78 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5600e34f3af0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5600e34ff2b0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5600e34ff290 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e3503cf8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5600e3503e48 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5600e3503dd0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5600e3503d60 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e3503d50 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5600e3503e18 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5600e3503e00 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5600e3503d90 <col:16> 'unsigned long' lvalue ParmVar 0x5600e34f3a78 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5600e3503e30 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5600e3503db0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f3af0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5600e34f4da0 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f3cd8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5600e34f3d50 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5600e34ff2e8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5600e34ff2c8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e3503e60 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5600e3503fb0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5600e3503f38 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5600e3503ec8 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e3503eb8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5600e3503f80 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5600e3503f68 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5600e3503ef8 <col:16> 'unsigned int' lvalue ParmVar 0x5600e34f3cd8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5600e3503f98 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5600e3503f18 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f3d50 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5600e34f4f00 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5600e34f4e70 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5600e34f5098 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5600e34f4fd8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5600e34f52c8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5600e34f51d0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5600e34f5478 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5600e34f53b8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e3504050 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5600e3503fc8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5600e34f53b8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5600e35040b0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5600e34f5648 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5600e34f5588 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e35040c0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5600e3504170 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5600e3504148 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5600e3504118 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5600e34f5588 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5600e34f5838 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5600e34f57b0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5600e34f2350 'Timestamp'
|   | `-CXXRecord 0x5600e34f25a8 'Timestamp'
|   `-ParenType 0x5600e34f5750 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5600e34f5720 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5600e34f28f0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5600e34f2768 'seconds_type'
|         `-TypedefType 0x5600e3157930 'int32_t' sugar
|           |-Typedef 0x5600e306b328 'int32_t'
|           `-TypedefType 0x5600e3044510 '__int32_t' sugar
|             |-Typedef 0x5600e3044128 '__int32_t'
|             `-BuiltinType 0x5600e3002580 'int'
|-CXXConversionDecl 0x5600e34f5978 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5600e34f5a48 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5600e3504278 <col:37, line:231:5>
|   `-ReturnStmt 0x5600e3504268 <line:227:9, col:23>
|     `-BinaryOperator 0x5600e3504248 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5600e3504218 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5600e35041c8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5600e34fc748
|       |   `-MemberExpr 0x5600e3504198 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5600e34fd6f8
|       |     `-CXXThisExpr 0x5600e3504188 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5600e3504230 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5600e35041f8 <col:23> 'int' 0
|-CXXMethodDecl 0x5600e34f5b08 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5600e34f5bc8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e34f5c88 <line:235:5, col:28> col:21 used msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e34f5d48 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e34f5e08 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e34f5f78 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5600e34f5eb8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5600e34f60c0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5600e34f6030 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f6188 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5600e34f6228 <col:54> "" ""
|-CXXMethodDecl 0x5600e34f62b8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5600e34f6358 <col:54> "" ""
|-CXXMethodDecl 0x5600e34f63e8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5600e34f6488 <col:54> "" ""
|-CXXMethodDecl 0x5600e34f6588 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5600e34f6658 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5600e34f6788 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5600e34f6880 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5600e34f69b8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5600e3504490 <col:39, line:271:5>
|   `-ReturnStmt 0x5600e3504480 <line:267:9, col:61>
|     `-CallExpr 0x5600e3504420 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5600e3504408 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5600e3504290 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5600e34fda28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5600e3504450 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5600e35042f0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5600e34fc748
|       |   `-MemberExpr 0x5600e35042c0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5600e34fd6f8
|       |     `-CXXThisExpr 0x5600e35042b0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5600e3504468 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5600e3504390 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5600e3504360 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5600e3504320 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5600e3504378 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5600e3504340 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34f6a78 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5600e3504650 <col:39, line:279:5>
|   `-ReturnStmt 0x5600e3504640 <line:275:9, col:61>
|     `-CallExpr 0x5600e35045e0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5600e35045c8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5600e35044a8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5600e34fda28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5600e3504610 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5600e3504508 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5600e34fc748
|       |   `-MemberExpr 0x5600e35044d8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5600e34fd6f8
|       |     `-CXXThisExpr 0x5600e35044c8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5600e3504628 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5600e35045a8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5600e3504578 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5600e3504538 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5600e3504590 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5600e3504558 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34f6b38 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5600e35047e8 <col:39, line:287:5>
|   `-ReturnStmt 0x5600e35047d8 <line:283:9, col:53>
|     `-BinaryOperator 0x5600e35047b8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5600e3504788 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5600e35046a8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5600e34fc748
|       |   `-MemberExpr 0x5600e3504678 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5600e34fd6f8
|       |     `-CXXThisExpr 0x5600e3504668 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5600e35047a0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5600e3504768 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5600e3504748 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5600e3504718 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5600e35046d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5600e3504730 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5600e35046f8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34f6c28 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5600e3505a80 <col:40, line:293:5>
|   |-DeclStmt 0x5600e3504930 <line:291:9, col:48>
|   | `-VarDecl 0x5600e3504810 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5600e3504910 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5600e35048b8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5600e3504888 <col:22> '<bound member function type>' ->subsec 0x5600e34f5bc8
|   |     |   `-CXXThisExpr 0x5600e3504878 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5600e35048f8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5600e35048d8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f3020 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5600e3505a70 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5600e3505a58 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5600e3505a28 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3505a10 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5600e35059f0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5600e35059c0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5600e3505758 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5600e3505740 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5600e3504948 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5600e3504810 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5600e3505960 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5600e3505948 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5600e3505918 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5600e3505770 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5600e35056e0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5600e35056c8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5600e3505678 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5600e34f24f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5600e3505618 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5600e3504978 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5600e3504968 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5600e3505660 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5600e3505648 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5600e3504e38 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5600e35049a0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5600e3504a30 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5600e3504a00 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5600e35049c0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f3020 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5600e3504a18 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5600e35049e0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5600e3504810 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5600e3505990 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5600e3505728 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5600e3505718 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5600e34f6ce8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5600e3505fd8 <col:40, line:302:5>
|   |-DeclStmt 0x5600e3505bd0 <line:297:9, col:48>
|   | `-VarDecl 0x5600e3505ab0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5600e3505bb0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5600e3505b58 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5600e3505b28 <col:22> '<bound member function type>' ->subsec 0x5600e34f5bc8
|   |     |   `-CXXThisExpr 0x5600e3505b18 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5600e3505b98 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5600e3505b78 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f30f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5600e3505fc8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5600e3505fb0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5600e3505f80 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3505f68 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5600e3505f48 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5600e3505f18 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5600e3505e40 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5600e3505e28 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5600e3505be8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5600e3505ab0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5600e3505eb8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5600e3505ea0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5600e3505e70 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5600e3505e58 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5600e3505dc8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5600e3505db0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5600e3505d90 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5600e34f24f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5600e3505d30 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5600e3505c18 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5600e3505c08 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5600e3505d78 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5600e3505d60 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5600e3505cf0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5600e3505c40 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5600e3505cd0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5600e3505ca0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5600e3505c60 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f30f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5600e3505cb8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5600e3505c80 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5600e3505ab0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5600e3505ee8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5600e3505e10 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5600e3505e00 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5600e34f6da8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5600e3506060 <col:40, line:306:5>
|   `-ReturnStmt 0x5600e3506050 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5600e3506020 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5600e3506008 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5600e3505ff8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5600e34f6f48 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5600e34f6e58 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f7118 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5600e34f7020 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5600e34f7208 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5600e34f7378 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5600e34f72b8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5600e35061a8 <col:56, line:320:5>
|   `-ReturnStmt 0x5600e3506198 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5600e3506180 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5600e3506150 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3506138 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5600e35060f8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5600e35060c8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5600e3506088 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5600e34f72b8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5600e35060e0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5600e35060a8 <col:31> 'int' 0
|-CXXMethodDecl 0x5600e34f75b8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5600e34f7430 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f74a8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3506378 <col:72, line:326:5>
|   `-ReturnStmt 0x5600e3506368 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5600e3506350 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5600e3506320 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3506308 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5600e35062c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5600e35062b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5600e35061d0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5600e34f7430 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5600e3506270 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5600e3506258 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5600e35061f0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5600e34fbea0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5600e3506298 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5600e3506210 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f74a8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f7768 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5600e34f7678 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5600e3506a40 <col:56, line:337:5>
|   |-DeclStmt 0x5600e3506678 <line:329:9, col:51>
|   | `-VarDecl 0x5600e35063a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5600e3506660 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5600e3506630 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5600e3506618 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5600e3506600 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5600e35065d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5600e35065b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5600e35065a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5600e3506490 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5600e3506830 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5600e35066e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5600e34fc748
|   | | `-MemberExpr 0x5600e35066b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5600e34fd6f8
|   | |   `-DeclRefExpr 0x5600e3506690 <col:9> 'Timestamp' lvalue Var 0x5600e35063a0 't' 'Timestamp'
|   | `-BinaryOperator 0x5600e3506810 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5600e35067e0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5600e3506710 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5600e34f7678 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5600e35067f8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5600e35067c0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5600e35067a0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5600e3506770 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5600e3506730 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5600e3506788 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5600e3506750 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5600e3506a28 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5600e35069f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5600e35069e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5600e35069c0 <col:16> 'Timestamp' lvalue Var 0x5600e35063a0 't' 'Timestamp'
|-CXXMethodDecl 0x5600e34f7930 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5600e34f7820 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f7898 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3506bf8 <col:72, line:343:5>
|   `-ReturnStmt 0x5600e3506be8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5600e3506bd0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5600e3506ba0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3506b88 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5600e3506b48 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5600e3506b30 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5600e3506a78 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5600e34f7820 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5600e3506af0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5600e3506ad8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5600e3506a98 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5600e34fbfe8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5600e3506b18 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5600e3506ab8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f7898 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f7a80 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5600e34f79f0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5600e3507040 <col:56, line:354:5>
|   |-DeclStmt 0x5600e3506de8 <line:346:9, col:51>
|   | `-VarDecl 0x5600e3506c20 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5600e3506dd0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5600e3506da0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5600e3506d88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5600e3506d70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5600e3506d40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5600e3506d28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5600e3506d10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5600e3506ce0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5600e3506fa0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5600e3506e50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5600e34fc748
|   | | `-MemberExpr 0x5600e3506e20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5600e34fd6f8
|   | |   `-DeclRefExpr 0x5600e3506e00 <col:9> 'Timestamp' lvalue Var 0x5600e3506c20 't' 'Timestamp'
|   | `-BinaryOperator 0x5600e3506f80 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5600e3506f50 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5600e3506e80 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5600e34f79f0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5600e3506f68 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5600e3506f30 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5600e3506f10 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5600e3506ee0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5600e3506ea0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5600e3506ef8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5600e3506ec0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5600e3507028 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5600e3506ff8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5600e3506fe0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5600e3506fc0 <col:16> 'Timestamp' lvalue Var 0x5600e3506c20 't' 'Timestamp'
|-CXXMethodDecl 0x5600e34f7c48 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5600e34f7b38 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f7bb0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e35071f8 <col:72, line:360:5>
|   `-ReturnStmt 0x5600e35071e8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5600e35071d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5600e35071a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3507188 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5600e3507148 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5600e3507130 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5600e3507078 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5600e34f7b38 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5600e35070f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5600e35070d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5600e3507098 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5600e34fc130 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5600e3507118 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5600e35070b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f7bb0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f7d98 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5600e34f7d08 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5600e3513b68 <col:56, line:371:5>
|   |-DeclStmt 0x5600e35073e8 <line:363:9, col:51>
|   | `-VarDecl 0x5600e3507220 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5600e35073d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5600e35073a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5600e3507388 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5600e3507370 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5600e3507340 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5600e3507328 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5600e3507310 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5600e35072e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5600e3513ac8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5600e3507450 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5600e34fc748
|   | | `-MemberExpr 0x5600e3507420 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5600e34fd6f8
|   | |   `-DeclRefExpr 0x5600e3507400 <col:9> 'Timestamp' lvalue Var 0x5600e3507220 't' 'Timestamp'
|   | `-CallExpr 0x5600e3513a68 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5600e3513a50 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5600e3507480 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5600e34fda28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5600e3513a98 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5600e35074a0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5600e34f7d08 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5600e3513ab0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5600e3513a30 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5600e3513a00 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5600e35074c0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5600e3513a18 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5600e35074e0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5600e3513b50 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5600e3513b20 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5600e3513b08 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5600e3513ae8 <col:16> 'Timestamp' lvalue Var 0x5600e3507220 't' 'Timestamp'
|-CXXMethodDecl 0x5600e34f7e88 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5600e3513ca8 <col:39, line:377:5>
|   `-ReturnStmt 0x5600e3513c98 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5600e3513c80 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5600e3513c50 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3513c38 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5600e3513bf8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5600e3513ba0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5600e3513be0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5600e3513bc0 <col:29> 'int' 1
|-CXXMethodDecl 0x5600e34f7f48 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5600e3513d88 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5600e3513d40 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5600e3513cd0 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e3513cc0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5600e3513d00 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5600e3513d70 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5600e3513d20 <col:19> 'int' 0
|-CXXMethodDecl 0x5600e34f8148 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f7ff8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f8070 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5600e34ff320 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5600e34ff300 <col:60> 'int' 0
| `-CompoundStmt 0x5600e3513f80 <col:63, line:395:5>
|   `-BinaryOperator 0x5600e3513f60 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5600e3513de0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5600e34fc748
|     | `-MemberExpr 0x5600e3513db0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5600e34fd6f8
|     |   `-CXXThisExpr 0x5600e3513da0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5600e3513f40 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5600e3513ed0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5600e3513e70 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5600e3513e58 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5600e3513e40 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5600e3513e10 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5600e34f7ff8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5600e3513eb8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5600e3513e98 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5600e3513f28 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5600e3513f10 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5600e3513ef0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f8070 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f8318 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f8208 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f8280 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e35140d8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5600e3514090 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5600e3513fa8 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e3513f98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5600e35140c0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e3513fd8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5600e34f8208 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5600e3514050 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5600e3514038 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5600e3513ff8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5600e34fbfe8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5600e3514078 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5600e3514018 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f8280 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f84e8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f83d8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f8450 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3514230 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5600e35141e8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5600e3514100 <col:9> '<bound member function type>' ->assign 0x5600e34f8148
|     | `-CXXThisExpr 0x5600e35140f0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5600e3514218 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5600e3514130 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5600e34f83d8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5600e35141a8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5600e3514190 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5600e3514150 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5600e34fc130 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5600e35141d0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5600e3514170 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34f8450 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34f86b8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f85a8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f8620 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5600e34ff358 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5600e34ff338 <col:57> 'int' 0
| `-DeprecatedAttr 0x5600e34f8768 <col:75> "" ""
|-CXXMethodDecl 0x5600e34f88f8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f87e8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f8860 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5600e34f89a8 <col:74> "" ""
|-CXXMethodDecl 0x5600e34f8b38 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5600e34f8a28 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5600e34f8aa0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5600e34f8be8 <col:74> "" ""
|-CXXMethodDecl 0x5600e34f8c78 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5600e34f8d18 <col:42> "" ""
|-CXXMethodDecl 0x5600e34fb550 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5600e34fb430 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5600e34fb4b0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5600e34fb620 <line:432:5, col:33> col:29 used now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5600e34fb6e0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5600e34fb780 <col:20>
| `-OptimizeNoneAttr 0x5600e34fb7d8 <col:30>
|-CXXMethodDecl 0x5600e34fb820 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5600e34fb8e0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5600e34fb9a0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5600e34fba60 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5600e34fbb20 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5600e34fbbe0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5600e34fbca0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5600e34fbd60 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5600e34fbea0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fbe10 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3514378 <col:58, line:512:5>
|   `-ReturnStmt 0x5600e3514368 <line:511:9, col:53>
|     `-BinaryOperator 0x5600e3514348 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5600e3514318 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5600e3514248 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fbe10 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5600e3514330 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5600e35142f8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5600e35142d8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5600e35142a8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5600e3514268 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5600e35142c0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5600e3514288 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34fbfe8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fbf58 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e35144c0 <col:58, line:516:5>
|   `-ReturnStmt 0x5600e35144b0 <line:515:9, col:53>
|     `-BinaryOperator 0x5600e3514490 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5600e3514460 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5600e3514390 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fbf58 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5600e3514478 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5600e3514440 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5600e3514420 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5600e35143f0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5600e35143b0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5600e3514408 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5600e35143d0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34fc130 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fc0a0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3514608 <col:58, line:520:5>
|   `-ReturnStmt 0x5600e35145f8 <line:519:9, col:53>
|     `-BinaryOperator 0x5600e35145d8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5600e35145a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5600e35144d8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fc0a0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5600e35145c0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5600e3514588 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5600e3514568 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5600e3514538 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5600e35144f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5600e3514550 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5600e3514518 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34fc278 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fc1e8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3514750 <col:60, line:524:5>
|   `-ReturnStmt 0x5600e3514740 <line:523:9, col:55>
|     `-BinaryOperator 0x5600e3514720 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5600e35146f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5600e3514620 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fc1e8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5600e3514708 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5600e35146d0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5600e35146b0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5600e3514680 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5600e3514640 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5600e3514698 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5600e3514660 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34fc3c0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fc330 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3514898 <col:60, line:528:5>
|   `-ReturnStmt 0x5600e3514888 <line:527:9, col:55>
|     `-BinaryOperator 0x5600e3514868 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5600e3514838 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5600e3514768 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fc330 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5600e3514850 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5600e3514818 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5600e35147f8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5600e35147c8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5600e3514788 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5600e35147e0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5600e35147a8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5600e34fc508 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fc478 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e35149e0 <col:60, line:532:5>
|   `-ReturnStmt 0x5600e35149d0 <line:531:9, col:55>
|     `-BinaryOperator 0x5600e35149b0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5600e3514980 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5600e35148b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fc478 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5600e3514998 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5600e3514960 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5600e3514940 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5600e3514910 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5600e35148d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5600e3514928 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5600e35148f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5600e34f2f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5600e34fc5b0 prev 0x5600e34f33f0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5600e34fc6a8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5600e34fc748 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5600e3503510 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5600e35038f8 <col:11>
| |-CXXConstructorDecl 0x5600e35035f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5600e35036d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5600e3504040 <col:11>
| |-CXXConstructorDecl 0x5600e3503778 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5600e3503888 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5600e3505898 <col:11>
| |-CXXDestructorDecl 0x5600e3504ba8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5600e320b758 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5600e320b868 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5600e320c130 <col:11>
| |   `-ReturnStmt 0x5600e320c120 <col:11>
| |     `-UnaryOperator 0x5600e320c108 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5600e320c0f8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5600e320b8d8 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x5600e320b8d8
|   `-ParmVarDecl 0x5600e320b9e8 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x5600e34fc7b0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5600e34fc8b0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5600e34fcab0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34fc890 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5600e34fc870 <col:21> 'int' 0
| |-EnumConstantDecl 0x5600e34fc940 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5600e34fcac8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34fc920 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5600e34fc900 <col:23> 'int' 1
| |-EnumConstantDecl 0x5600e34fc9d0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5600e34fcae0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e34fc9b0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5600e34fc990 <col:23> 'int' 2
| `-EnumConstantDecl 0x5600e34fca60 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5600e34fcaf8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5600e34fca40 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5600e34fca20 <col:27> 'int' 3
|-CXXMethodDecl 0x5600e34fcb38 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5600e34fcc00 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5600e34fce08 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5600e34fccb0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5600e34fcd30 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5600e34ff370 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5600e34fd018 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5600e34fcec8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5600e34fcf40 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5600e34fd0e8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5600e34fd1a8 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5600e34fd318 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5600e34fd258 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5600e34fd3e0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5600e34fd4a0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5600e34fd560 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5600e34fd620 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5600e34fd6c0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5600e34fd6f8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5600e34fd768 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5600e35149f8 <col:27, line:684:5>
|-CXXMethodDecl 0x5600e34fd828 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5600e3514a08 <col:27, line:696:5>
|-CXXMethodDecl 0x5600e34fda28 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fd8d8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5600e34fd950 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3514b90 <col:66, line:700:5>
|   `-ReturnStmt 0x5600e3514b80 <line:699:9, col:31>
|     `-CallExpr 0x5600e3514b20 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5600e3514b08 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5600e3514ab8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5600e337fdd8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5600e3514b50 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5600e3514a78 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5600e34fd8d8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5600e3514b68 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5600e3514a98 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fd950 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5600e34fdd98 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5600e34fdae8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5600e34fdb60 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5600e34fdbd8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5600e34fdc50 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5600e3514ee0 <col:64, line:707:5>
|   |-DeclStmt 0x5600e3514c20 <line:704:9, col:24>
|   | `-VarDecl 0x5600e3514bb8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5600e3514e30 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5600e3514c38 <col:9> 'int32_t':'int' lvalue ParmVar 0x5600e34fdb60 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5600e3514e18 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5600e3514db0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5600e3514d98 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5600e3514d18 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5600e33850a8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5600e3514de8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5600e3514cb8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5600e34fdbd8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5600e3514e00 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5600e3514cd8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5600e34fdc50 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5600e3514cf8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5600e3514bb8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5600e3514ec0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5600e3514e50 <col:9> 'int32_t':'int' lvalue ParmVar 0x5600e34fdae8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5600e3514ea8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5600e3514e90 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5600e3514e70 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5600e3514bb8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5600e34fe038 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5600e34fde68 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5600e34fdee0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5600e34fdf58 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5600e34fe2d8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5600e34fe100 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5600e34fe178 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5600e34fe1f0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5600e34fe468 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5600e34fe3a0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5600e34fe668 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5600e34fe520 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5600e34fe598 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5600e34fe938 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5600e34fe878 parent 0x5600e3002488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5600e34fe728 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5600e34fe7a0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5600e34feb58 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5600e34fea98 parent 0x5600e3002488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5600e34fe988 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5600e34fea00 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5600e34fed20 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5600e34fec68 parent 0x5600e3002488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5600e34feba8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5600e34fefa8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5600e34feee8 parent 0x5600e3002488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5600e34fed98 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5600e34fee10 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5600e34ff1c8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5600e34ff108 parent 0x5600e3002488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5600e34feff8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5600e34ff070 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5600e3504a50 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e3504b38 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e35055a8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5600e3505560 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5600e34fd6f8
| |     `-DeclRefExpr 0x5600e3505540 <col:7> 'const Timestamp' lvalue ParmVar 0x5600e3504b38 '' 'const Timestamp &'
| `-CompoundStmt 0x5600e3505608 <col:7>
|-CXXConstructorDecl 0x5600e3504cb8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e3504dc8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5600e34fd6f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5600e35058a8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5600e3505850 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5600e34fd6f8
| |     `-CXXStaticCastExpr 0x5600e3505820 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5600e35057f0 <col:7> 'Timestamp' lvalue ParmVar 0x5600e3504dc8 '' 'Timestamp &&'
| `-CompoundStmt 0x5600e3505908 <col:7>
|-CXXDestructorDecl 0x5600e3504e78 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5600e320b5a8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e320b6b8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5600e320c1a8 <col:7>
|   |-CXXMemberCallExpr 0x5600e320c148 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5600e320c088 <col:7> '<bound member function type>' .operator= 0x5600e320b758
|   | | `-MemberExpr 0x5600e320bf98 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5600e34fd6f8
|   | |   `-CXXThisExpr 0x5600e320bf88 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5600e320c058 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5600e34fd6f8
|   |   `-DeclRefExpr 0x5600e320c038 <col:7> 'const Timestamp' lvalue ParmVar 0x5600e320b6b8 '' 'const Timestamp &'
|   `-ReturnStmt 0x5600e320c198 <col:7>
|     `-UnaryOperator 0x5600e320c180 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5600e320c170 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5600e320ba58 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x5600e320ba58
  `-ParmVarDecl 0x5600e320bb68 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e31574c8 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e31575e8 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x5600e3369460 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5600e3369540 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x5600e3369540
| `-ParmVarDecl 0x5600e3369628 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5600e33696c8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5600e33696c8
| `-ParmVarDecl 0x5600e33697d8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x5600e35064c0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e361ee50 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e361ef68 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5600e361eff8 <col:16, col:22> col:16 public
|-EnumDecl 0x5600e361f020 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5600e361f120 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5600e361f370 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e361f100 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5600e361f0e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5600e361f1b0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5600e361f388 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e361f190 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5600e361f170 <col:24> 'int' 22
| |-EnumConstantDecl 0x5600e361f240 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5600e361f3a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e361f220 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5600e361f200 <col:24> 'int' 34
| |-EnumConstantDecl 0x5600e361f2d0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5600e361f3b8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5600e361f2b0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5600e361f290 <col:25> 'int' 95
| `-EnumConstantDecl 0x5600e361f320 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5600e3620d30 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5600e3621168 <col:7>
|-CXXConstructorDecl 0x5600e3620e38 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5600e3620e38
| `-ParmVarDecl 0x5600e3620f48 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5600e3620fe8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e36210f8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5600e36a8060 <col:7>
`-CXXDestructorDecl 0x5600e3623278 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e361f3e8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5600e361f548 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5600e361f5d8 <col:32, col:38> col:32 public
|-TypedefDecl 0x5600e361f610 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5600e3157850 'uint32_t' sugar
|   |-Typedef 0x5600e306b4c8 'uint32_t'
|   `-TypedefType 0x5600e30445a0 '__uint32_t' sugar
|     |-Typedef 0x5600e3044198 '__uint32_t'
|     `-BuiltinType 0x5600e3002620 'unsigned int'
|-CXXConstructorDecl 0x5600e361f758 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5600e361f680 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5600e3620c38 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5600e3621178 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5600e36204f0 'base' 'int'
| | `-ImplicitCastExpr 0x5600e3620cd8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5600e3620c98 <col:16> 'int' lvalue ParmVar 0x5600e361f680 'b' 'int'
| `-CompoundStmt 0x5600e36211e8 <col:19, line:1046:5>
|-CXXMethodDecl 0x5600e361fc50 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5600e361f820 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5600e361f8a0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5600e361f918 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5600e361f998 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5600e361fa58 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5600e361fad8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5600e36200a8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5600e361fd20 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5600e3620008 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5600e361fdc8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5600e361fe68 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5600e361fee0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5600e3620c58 <col:82> 'const ArgContext' lvalue Var 0x5600e3614d08 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5600e3622128 <col:94, line:1067:5>
| |   |-DeclStmt 0x5600e3621378 <line:1054:9, col:64>
| |   | `-VarDecl 0x5600e3621208 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5600e3621330 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5600e3621598 <line:1055:9, col:91>
| |   | `-VarDecl 0x5600e36213a8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5600e3621570 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5600e3621550 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5600e3621500 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5600e36214e0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5600e3621488 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5600e3621438 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5600e3621468 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5600e36214c8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5600e36214a8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5600e3621530 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5600e36216f8 <line:1056:9, col:27>
| |   | `-VarDecl 0x5600e3621690 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5600e3621b40 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5600e3621a70 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5600e36219f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5600e3521838 0x5600e336ae18 0x5600e336aaf0 0x5600e335b2c0 0x5600e335af70 0x5600e335a860 0x5600e332d1d0 0x5600e32ba6a0
| |   | | |-CallExpr 0x5600e3621930 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5600e3621720 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5600e36217d0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5600e36217a0 <col:19, col:23> '<bound member function type>' .begin 0x5600e334a4c8
| |   | | | |   `-DeclRefExpr 0x5600e3621780 <col:19> 'const String' lvalue ParmVar 0x5600e361fdc8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5600e3621840 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5600e3621810 <col:32, col:36> '<bound member function type>' .end 0x5600e334a6e0
| |   | | | |   `-DeclRefExpr 0x5600e36217f0 <col:32> 'const String' lvalue ParmVar 0x5600e361fdc8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5600e3621860 <col:43> 'const bool' lvalue Var 0x5600e3621208 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5600e36218c8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5600e36218a8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5600e36218f0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5600e3621690 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5600e3621910 <col:73> 'const int' lvalue Var 0x5600e36213a8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5600e36219d0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5600e36219a0 <col:16, col:20> '<bound member function type>' .end 0x5600e334a6e0
| |   | |     `-DeclRefExpr 0x5600e3621980 <col:16> 'const String' lvalue ParmVar 0x5600e361fdc8 'str' 'const String &'
| |   | `-BinaryOperator 0x5600e3621b20 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5600e3621ab8 <col:13> 'int' lvalue ->status 0x5600e3620558
| |   |   | `-CXXThisExpr 0x5600e3621aa8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5600e3621b08 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5600e3621ae8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f1b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5600e3621d90 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5600e3621c78 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5600e3621c60 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5600e3621c48 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5600e3621b68 <col:13> 'int' lvalue ->status 0x5600e3620558
| |   | | |     `-CXXThisExpr 0x5600e3621b58 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5600e3621c28 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5600e3621bf8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5600e3621ba8 <col:23> 'int' lvalue ->status 0x5600e3620558
| |   | |   |   `-CXXThisExpr 0x5600e3621b98 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5600e3621c10 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5600e3621bd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5600e3621d70 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5600e3621d10 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5600e3621cb8 <col:13, col:18> '<bound member function type>' .error 0x5600e34e4cb0
| |   |   | | `-DeclRefExpr 0x5600e3621c98 <col:13> 'const ArgContext' lvalue ParmVar 0x5600e361fee0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5600e3621d38 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5600e3621ce8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5600e3621d60 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5600e3621d50 <col:20> 'bool' false
| |   |-DeclStmt 0x5600e3621f68 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5600e3621f10 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5600e3621ea0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5600e36220d8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5600e3621f80 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5600e32ee668
| |   | |-DeclRefExpr 0x5600e3621fc8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5600e3621690 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5600e36220a8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5600e3622020 <col:64> 'V' lvalue ParmVar 0x5600e361fe68 'result' 'V &'
| |   `-ReturnStmt 0x5600e3622118 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5600e3622108 <col:16> 'bool' true
| |-CXXMethodDecl 0x5600e36ab7e8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5600e36ab5c0 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x5600e36ab698 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x5600e36ab700 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x5600e36b4950 <col:94, line:1067:5>
| |   |-DeclStmt 0x5600e36abff8 <line:1054:9, col:64>
| |   | `-VarDecl 0x5600e36abe18 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x5600e36abf88 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5600e36abf58 <col:36, col:55> 'const bool' lvalue Var 0x5600e32de5d8 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x5600e36ac1d8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5600e36ac010 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5600e36ac158 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x5600e36ac140 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x5600e36ac120 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x5600e36ac100 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x5600e36ac0e0 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x5600e36ac0a8 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x5600e36ac088 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x5600e3621468 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x5600e36ac0c8 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x5600e36214a8 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x5600e3621530 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5600e36ac370 <line:1056:9, col:27>
| |   | `-VarDecl 0x5600e36ac308 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x5600e36b3bc8 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x5600e36b3b70 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x5600e36ac658 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x5600e36ac628 <col:13> '<bound member function type>' ->parse 0x5600e361fc50
| |   | | | | `-CXXThisExpr 0x5600e36ac618 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x5600e36ac4b8 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5600e36ac488 <col:19, col:23> '<bound member function type>' .begin 0x5600e334a4c8
| |   | | | |   `-DeclRefExpr 0x5600e36ac468 <col:19> 'const String' lvalue ParmVar 0x5600e36ab5c0 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5600e36ac528 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5600e36ac4f8 <col:32, col:36> '<bound member function type>' .end 0x5600e334a6e0
| |   | | | |   `-DeclRefExpr 0x5600e36ac4d8 <col:32> 'const String' lvalue ParmVar 0x5600e36ab5c0 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x5600e36ac6c8 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x5600e36ac6a8 <col:43> 'const bool' lvalue Var 0x5600e36abe18 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x5600e36ac5b0 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x5600e36ac598 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x5600e36ac578 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x5600e36ac6e0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x5600e36ac5d8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5600e36ac308 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x5600e36ac718 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x5600e36ac6f8 <col:73> 'const int' lvalue Var 0x5600e36ac010 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x5600e36b3b50 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5600e36b3b20 <col:16, col:20> '<bound member function type>' .end 0x5600e334a6e0
| |   | |     `-DeclRefExpr 0x5600e36ac730 <col:16> 'const String' lvalue ParmVar 0x5600e36ab5c0 'str' 'const String &'
| |   | `-BinaryOperator 0x5600e36b3ba8 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5600e3621ab8 <col:13> 'int' lvalue ->status 0x5600e3620558
| |   |   | `-CXXThisExpr 0x5600e3621aa8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5600e36b3b90 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5600e3621ae8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f1b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5600e36b3d40 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5600e36b3c60 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5600e36b3c48 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5600e36b3c30 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5600e3621b68 <col:13> 'int' lvalue ->status 0x5600e3620558
| |   | | |     `-CXXThisExpr 0x5600e3621b58 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5600e36b3c10 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5600e36b3be0 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5600e3621ba8 <col:23> 'int' lvalue ->status 0x5600e3620558
| |   | |   |   `-CXXThisExpr 0x5600e3621b98 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5600e36b3bf8 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5600e3621bd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5600e36b3d20 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5600e36b3cd0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5600e36b3ca0 <col:13, col:18> '<bound member function type>' .error 0x5600e34e4cb0
| |   |   | | `-DeclRefExpr 0x5600e36b3c80 <col:13> 'const ArgContext' lvalue ParmVar 0x5600e36ab700 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5600e36b3cf8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5600e3621ce8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5600e36b3d10 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5600e3621d50 <col:20> 'bool' false
| |   |-DeclStmt 0x5600e36b4288 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5600e36b4230 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x5600e36b41e0 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x5600e36b41c0 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x5600e36b4150 'type'
| |   |       `-ElaboratedType 0x5600e36b4100 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x5600e36b40e0 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x5600e32de730 'unsigned_type'
| |   |           `-BuiltinType 0x5600e3002620 'unsigned int'
| |   |-CallExpr 0x5600e36b48e0 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x5600e36b48c8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x5600e36b4848 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5600e36b4728 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5600e32ee668 'extract_integer')
| |   | |-ImplicitCastExpr 0x5600e36b4928 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x5600e36b4910 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x5600e36b42e8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5600e36ac308 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x5600e36b43b8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x5600e36b4368 <col:64> 'int':'int' lvalue ParmVar 0x5600e36ab698 'result' 'int &'
| |   `-ReturnStmt 0x5600e36b4940 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5600e3622108 <col:16> 'bool' true
| `-CXXMethodDecl 0x5600e36cc3d8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5600e36cc1b0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5600e36cc288 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5600e36cc2f0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5600e36cdca8 <col:94, line:1067:5>
|     |-DeclStmt 0x5600e36ccbe8 <line:1054:9, col:64>
|     | `-VarDecl 0x5600e36cca08 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5600e36ccb78 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5600e36ccb48 <col:36, col:55> 'const bool' lvalue Var 0x5600e32dd880 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5600e36ccdc8 <line:1055:9, col:91>
|     | `-VarDecl 0x5600e36ccc00 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5600e36ccd48 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5600e36ccd30 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5600e36ccd10 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5600e36cccf0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5600e36cccd0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5600e36ccc98 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5600e36ccc78 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5600e3621468 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5600e36cccb8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5600e36214a8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5600e3621530 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5600e36ccee0 <line:1056:9, col:27>
|     | `-VarDecl 0x5600e36cce78 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5600e36cd368 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5600e36cd310 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5600e36cd1c8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5600e36cd198 <col:13> '<bound member function type>' ->parse 0x5600e361fc50
|     | | | | `-CXXThisExpr 0x5600e36cd188 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5600e36cd028 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5600e36ccff8 <col:19, col:23> '<bound member function type>' .begin 0x5600e334a4c8
|     | | | |   `-DeclRefExpr 0x5600e36ccfd8 <col:19> 'const String' lvalue ParmVar 0x5600e36cc1b0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5600e36cd098 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5600e36cd068 <col:32, col:36> '<bound member function type>' .end 0x5600e334a6e0
|     | | | |   `-DeclRefExpr 0x5600e36cd048 <col:32> 'const String' lvalue ParmVar 0x5600e36cc1b0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5600e36cd238 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5600e36cd218 <col:43> 'const bool' lvalue Var 0x5600e36cca08 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5600e36cd120 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5600e36cd108 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5600e36cd0e8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x5600e36cd250 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5600e36cd148 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5600e36cce78 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5600e36cd288 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5600e36cd268 <col:73> 'const int' lvalue Var 0x5600e36ccc00 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5600e36cd2f0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5600e36cd2c0 <col:16, col:20> '<bound member function type>' .end 0x5600e334a6e0
|     | |     `-DeclRefExpr 0x5600e36cd2a0 <col:16> 'const String' lvalue ParmVar 0x5600e36cc1b0 'str' 'const String &'
|     | `-BinaryOperator 0x5600e36cd348 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5600e3621ab8 <col:13> 'int' lvalue ->status 0x5600e3620558
|     |   | `-CXXThisExpr 0x5600e3621aa8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5600e36cd330 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5600e3621ae8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f1b0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5600e36cd4e0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5600e36cd400 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5600e36cd3e8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5600e36cd3d0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5600e3621b68 <col:13> 'int' lvalue ->status 0x5600e3620558
|     | | |     `-CXXThisExpr 0x5600e3621b58 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5600e36cd3b0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5600e36cd380 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5600e3621ba8 <col:23> 'int' lvalue ->status 0x5600e3620558
|     | |   |   `-CXXThisExpr 0x5600e3621b98 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5600e36cd398 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5600e3621bd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5600e36cd4c0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5600e36cd470 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5600e36cd440 <col:13, col:18> '<bound member function type>' .error 0x5600e34e4cb0
|     |   | | `-DeclRefExpr 0x5600e36cd420 <col:13> 'const ArgContext' lvalue ParmVar 0x5600e36cc2f0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5600e36cd498 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5600e3621ce8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5600e36cd4b0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5600e3621d50 <col:20> 'bool' false
|     |-DeclStmt 0x5600e36cda28 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5600e36cd9d0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5600e36cd980 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x5600e36cd960 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x5600e36cd8f0 'type'
|     |       `-ElaboratedType 0x5600e36cd8a0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x5600e36cd880 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x5600e32dd9d8 'unsigned_type'
|     |           `-BuiltinType 0x5600e3002620 'unsigned int'
|     |-CallExpr 0x5600e36cdc38 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5600e36cdc20 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5600e36cdbf8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5600e36b4728 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5600e32ee668 'extract_integer')
|     | |-ImplicitCastExpr 0x5600e36cdc80 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5600e36cdc68 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5600e36cda88 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5600e36cce78 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5600e36cdb58 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5600e36cdb08 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5600e36cc288 'result' 'unsigned int &'
|     `-ReturnStmt 0x5600e36cdc98 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5600e3622108 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5600e3620468 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5600e3620118 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5600e36203c8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5600e36201c8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5600e3620268 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5600e36202e0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5600e3620c78 <col:71> 'const ArgContext' lvalue Var 0x5600e3614d08 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5600e3622898 <col:83, line:1083:5>
| |   |-DeclStmt 0x5600e36221f0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5600e3622188 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5600e3622870 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5600e3622480 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5600e3622308 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5600e36222d0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5600e3622218 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5600e3622270 <col:31> 'const String' lvalue ParmVar 0x5600e36201c8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5600e3622290 <col:36> 'V' lvalue Var 0x5600e3622188 'x' 'V'
| |     | |   `-DeclRefExpr 0x5600e36222b0 <col:39> 'const ArgContext' lvalue ParmVar 0x5600e36202e0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5600e3622460 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5600e3622440 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5600e3622428 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5600e3622410 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5600e3622330 <col:17> 'int' lvalue ->status 0x5600e3620558
| |     |     |     `-CXXThisExpr 0x5600e3622320 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5600e36223f0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5600e36223c0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5600e3622370 <col:27> 'int' lvalue ->status 0x5600e3620558
| |     |       |   `-CXXThisExpr 0x5600e3622360 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5600e36223d8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5600e36223a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5600e36224b0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5600e36224a0 <col:20> 'bool' false
| |     `-IfStmt 0x5600e3622848 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5600e3622550 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5600e3622520 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5600e36224d0 <col:18> 'int' lvalue ->status 0x5600e3620558
| |       | |   `-CXXThisExpr 0x5600e36224c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5600e3622538 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5600e3622500 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5600e3622788 <col:42, line:1079:9>
| |       | |-CallExpr 0x5600e3622730 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5600e3622580 <line:1076:13> '<bound member function type>' ->range_error 0x5600e3620b68
| |       | | | `-CXXThisExpr 0x5600e3622570 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5600e36225b0 <col:25> 'const ArgContext' lvalue ParmVar 0x5600e36202e0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5600e3622690 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5600e3622708 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5600e36226e8 <col:43> 'V' lvalue Var 0x5600e3622188 'x' 'V'
| |       | `-ReturnStmt 0x5600e3622778 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5600e3622768 <col:20> 'bool' false
| |       `-CompoundStmt 0x5600e3622828 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5600e36227e8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5600e36227a8 <col:13> 'V' lvalue ParmVar 0x5600e3620268 'result' 'V &'
| |         | `-DeclRefExpr 0x5600e36227c8 <col:22> 'V' lvalue Var 0x5600e3622188 'x' 'V'
| |         `-ReturnStmt 0x5600e3622818 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5600e3622808 <col:20> 'bool' true
| |-CXXMethodDecl 0x5600e36ab1a8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5600e36aaf80 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x5600e36ab058 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x5600e36ab0c0 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x5600e36abdf8 <col:83, line:1083:5>
| |   |-DeclStmt 0x5600e36ab430 <line:1071:9, col:12>
| |   | `-VarDecl 0x5600e36ab3c8 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x5600e36abdd0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5600e36aba60 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x5600e36ab988 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x5600e36ab950 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x5600e36ab908 <col:14> '<bound member function type>' ->parse_saturating 0x5600e36ab7e8
| |     | |   | `-CXXThisExpr 0x5600e36ab8f8 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x5600e36ab4a0 <col:31> 'const String' lvalue ParmVar 0x5600e36aaf80 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5600e36ab4c0 <col:36> 'int':'int' lvalue Var 0x5600e36ab3c8 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x5600e36ab4e0 <col:39> 'const ArgContext' lvalue ParmVar 0x5600e36ab0c0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5600e36aba40 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5600e36aba20 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5600e36aba08 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5600e36ab9f0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5600e3622330 <col:17> 'int' lvalue ->status 0x5600e3620558
| |     |     |     `-CXXThisExpr 0x5600e3622320 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5600e36ab9d0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5600e36ab9a0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5600e3622370 <col:27> 'int' lvalue ->status 0x5600e3620558
| |     |       |   `-CXXThisExpr 0x5600e3622360 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5600e36ab9b8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5600e36223a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5600e36aba80 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5600e36224a0 <col:20> 'bool' false
| |     `-IfStmt 0x5600e36abda8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5600e36abac0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5600e36aba90 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5600e36224d0 <col:18> 'int' lvalue ->status 0x5600e3620558
| |       | |   `-CXXThisExpr 0x5600e36224c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5600e36abaa8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5600e3622500 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5600e36abce0 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x5600e36abc50 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x5600e3622580 <line:1076:13> '<bound member function type>' ->range_error 0x5600e3620b68
| |       | | | `-CXXThisExpr 0x5600e3622570 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5600e36abae0 <col:25> 'const ArgContext' lvalue ParmVar 0x5600e36ab0c0 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x5600e36abcb8 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x5600e36abc88 <col:31, col:50> 'const bool' lvalue Var 0x5600e32de5d8 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x5600e36abc28 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x5600e36abc10 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x5600e36abbf8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x5600e36abbd8 <col:43> 'int':'int' lvalue Var 0x5600e36ab3c8 'x' 'int':'int'
| |       | `-ReturnStmt 0x5600e36abcd0 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5600e3622768 <col:20> 'bool' false
| |       `-CompoundStmt 0x5600e36abd88 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5600e36abd58 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x5600e36abd00 <col:13> 'int':'int' lvalue ParmVar 0x5600e36ab058 'result' 'int &'
| |         | `-ImplicitCastExpr 0x5600e36abd40 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x5600e36abd20 <col:22> 'int':'int' lvalue Var 0x5600e36ab3c8 'x' 'int':'int'
| |         `-ReturnStmt 0x5600e36abd78 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5600e3622808 <col:20> 'bool' true
| `-CXXMethodDecl 0x5600e36cbe18 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5600e36cbbf0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5600e36cbcc8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x5600e36cbd30 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5600e36cc9e8 <col:83, line:1083:5>
|     |-DeclStmt 0x5600e36cc0a0 <line:1071:9, col:12>
|     | `-VarDecl 0x5600e36cc038 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x5600e36cc9c0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5600e36cc650 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5600e36cc578 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5600e36cc540 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5600e36cc4f8 <col:14> '<bound member function type>' ->parse_saturating 0x5600e36cc3d8
|       | |   | `-CXXThisExpr 0x5600e36cc4e8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5600e36cc110 <col:31> 'const String' lvalue ParmVar 0x5600e36cbbf0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5600e36cc130 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5600e36cc038 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x5600e36cc150 <col:39> 'const ArgContext' lvalue ParmVar 0x5600e36cbd30 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5600e36cc630 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5600e36cc610 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5600e36cc5f8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5600e36cc5e0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5600e3622330 <col:17> 'int' lvalue ->status 0x5600e3620558
|       |     |     `-CXXThisExpr 0x5600e3622320 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5600e36cc5c0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5600e36cc590 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5600e3622370 <col:27> 'int' lvalue ->status 0x5600e3620558
|       |       |   `-CXXThisExpr 0x5600e3622360 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5600e36cc5a8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5600e36223a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5600e36cc670 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5600e36224a0 <col:20> 'bool' false
|       `-IfStmt 0x5600e36cc998 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5600e36cc6b0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5600e36cc680 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5600e36224d0 <col:18> 'int' lvalue ->status 0x5600e3620558
|         | |   `-CXXThisExpr 0x5600e36224c0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5600e36cc698 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5600e3622500 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5600e361f240 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5600e36cc8d0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5600e36cc840 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5600e3622580 <line:1076:13> '<bound member function type>' ->range_error 0x5600e3620b68
|         | | | `-CXXThisExpr 0x5600e3622570 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5600e36cc6d0 <col:25> 'const ArgContext' lvalue ParmVar 0x5600e36cbd30 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5600e36cc8a8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5600e36cc878 <col:31, col:50> 'const bool' lvalue Var 0x5600e32dd880 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5600e36cc818 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5600e36cc800 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5600e36cc7e8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5600e36cc7c8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5600e36cc038 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x5600e36cc8c0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5600e3622768 <col:20> 'bool' false
|         `-CompoundStmt 0x5600e36cc978 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5600e36cc948 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5600e36cc8f0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5600e36cbcc8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x5600e36cc930 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5600e36cc910 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5600e36cc038 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5600e36cc968 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5600e3622808 <col:20> 'bool' true
|-FieldDecl 0x5600e36204f0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5600e3620558 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5600e36205a8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5600e3620860 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5600e36205e8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5600e3620668 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5600e36206e0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5600e3620760 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5600e3620b68 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5600e3620930 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5600e36209a8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5600e3620a40 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5600e36230f8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5600e36230f8
| `-ParmVarDecl 0x5600e3623208 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5600e3623388 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e3623498 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5600e36a8070 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5600e36a8040 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5600e36a8010 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5600e36a7fe0 <col:7> 'IntArg' lvalue ParmVar 0x5600e3623498 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5600e36204f0 'base' 'int'
| | `-ImplicitCastExpr 0x5600e36a8168 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5600e36a8138 <col:7> 'int' xvalue .base 0x5600e36204f0
| |     `-CXXStaticCastExpr 0x5600e36a8108 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5600e36a80d8 <col:7> 'IntArg' lvalue ParmVar 0x5600e3623498 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5600e3620558 'status' 'int'
| | `-ImplicitCastExpr 0x5600e36a8238 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5600e36a8208 <col:7> 'int' xvalue .status 0x5600e3620558
| |     `-CXXStaticCastExpr 0x5600e36a81d8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5600e36a81a8 <col:7> 'IntArg' lvalue ParmVar 0x5600e3623498 '' 'IntArg &&'
| `-CompoundStmt 0x5600e36a8290 <col:7>
`-CXXDestructorDecl 0x5600e36a71d0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5600e36279c0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5600e3627c18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5600e36a70f8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5600e36a7670 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5600e36a7650 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5600e36a76e0 <col:19>
|-CXXConstructorDecl 0x5600e36a72d8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x5600e36a72d8
| `-ParmVarDecl 0x5600e36a73e8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x5600e36a7488 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e36a7598 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5600e36a82a0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5600e36a7fc0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5600e36a7f90 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5600e36a7f60 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x5600e36a7598 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x5600e36a8310 <col:19>
`-CXXDestructorDecl 0x5600e36a7720 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3371620 prev 0x5600e3363a08 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e3371718 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x5600e33717a8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5600e3371bd0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5600e33717e8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x5600e3371868 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x5600e33719a0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5600e3371a50 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x5600e3371e98 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x5600e3371ca0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5600e3371d18 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x5600e3371db8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5600e3376838 <col:34> 'const ArgContext' lvalue Var 0x5600e33639a0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5600e3376290 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5600e3371f60 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5600e3372050 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x5600e33720c8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5600e3376858 <col:34> 'const ArgContext' lvalue Var 0x5600e33639a0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5600e3376a38 <col:46, line:375:5>
|   `-ReturnStmt 0x5600e3376a28 <line:374:2, col:63>
|     `-CallExpr 0x5600e33769f0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5600e33769d8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5600e3376990 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x5600e3371e98 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5600e33768f0 <col:15> 'const String' lvalue ParmVar 0x5600e3371f60 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5600e3376940 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5600e3376910 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5600e3372050 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x5600e3376970 <col:59> 'const ArgContext' lvalue ParmVar 0x5600e33720c8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5600e3376768 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x5600e3376358 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5600e33765d0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5600e3376648 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5600e3376878 <col:34> 'const ArgContext' lvalue Var 0x5600e33639a0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x5600e36b9ed8 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5600e36b9fb0 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5600e36ba0e8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x5600e36ba0e8
| `-ParmVarDecl 0x5600e36ba1f8 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x5600e36ba298 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5600e36ba3a8 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x5600e36bb000 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5600e3377ba8 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x5600e3377e08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5600e36b9de8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5600e36ba418 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x5600e36ba418
| `-ParmVarDecl 0x5600e36ba528 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x5600e36ba5c8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e36ba6d8 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x5600e36bb010 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5600e36bafe0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x5600e36bafb0 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x5600e36baf80 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x5600e36ba6d8 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x5600e36bb080 <col:19>
`-CXXDestructorDecl 0x5600e36ba778 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5600e3363c40 prev 0x5600e32c9c88 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5600e3363d38 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5600e3363dc8 <col:19, col:25> col:19 public
|-TypedefDecl 0x5600e3363e00 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5600e3157560 'uninitialized_type'
|   `-CXXRecord 0x5600e31574c8 'uninitialized_type'
|-CXXConstructorDecl 0x5600e3363ec0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5600e3368620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e33686c8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5600e3368688 <col:10> 'int' 0
| `-CompoundStmt 0x5600e3368710 <col:13, line:22:5>
|-CXXConstructorDecl 0x5600e3364010 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5600e3363f80 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5600e3368620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e3368760 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5600e3368720 <col:10> 'unsigned int' lvalue ParmVar 0x5600e3363f80 'x' 'unsigned int'
| `-CompoundStmt 0x5600e33687a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x5600e3364168 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5600e33640d8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5600e3368620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e3368810 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5600e33687f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5600e33687b8 <col:10> 'int' lvalue ParmVar 0x5600e33640d8 'x' 'int'
| `-CompoundStmt 0x5600e3368858 <col:13, line:31:5>
|-CXXConstructorDecl 0x5600e33642c0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5600e3364230 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5600e3368620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e33688c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5600e33688a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5600e3368868 <col:10> 'unsigned long' lvalue ParmVar 0x5600e3364230 'x' 'unsigned long'
| `-CompoundStmt 0x5600e3368908 <col:13, line:35:5>
|-CXXConstructorDecl 0x5600e3364418 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5600e3364388 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5600e3368620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e3368970 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5600e3368958 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5600e3368918 <col:10> 'long' lvalue ParmVar 0x5600e3364388 'x' 'long'
| `-CompoundStmt 0x5600e33689b8 <col:13, line:39:5>
|-CXXConstructorDecl 0x5600e33645d8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5600e33644e8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5600e3368620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e3368a38 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5600e33689e8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5600e3298a40
| |     `-DeclRefExpr 0x5600e33689c8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5600e33644e8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5600e3368a80 <col:20, line:44:5>
|-CXXConstructorDecl 0x5600e3364768 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5600e33646a0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5600e3368be8 <col:51, line:56:5>
|   `-BinaryOperator 0x5600e3368bc8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5600e3368aa0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5600e3368620
|     | `-CXXThisExpr 0x5600e3368a90 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5600e3368bb0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5600e3368b98 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5600e3368b78 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5600e3368b48 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5600e3368b30 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5600e3368ad0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5600e33646a0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5600e33648b8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5600e3364828 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5600e3364a68 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5600e33649a8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5600e3368c58 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5600e3368c30 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5600e3368c00 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5600e33649a8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5600e3364bf8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5600e3364b30 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5600e3364ce8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5600e3369c18 <col:46, line:83:5>
|   `-ReturnStmt 0x5600e3369c08 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5600e3369bf0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5600e3369bc0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5600e3369a78 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5600e3369960 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5600e3369848 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5600e3368c80 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5600e3364dd8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5600e3369cc8 <col:31, line:88:5>
|   `-ReturnStmt 0x5600e3369cb8 <line:87:2, col:10>
|     `-UnaryOperator 0x5600e3369ca0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5600e3369c88 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5600e3369c70 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5600e3369c40 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5600e3368620
|             `-CXXThisExpr 0x5600e3369c30 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5600e3364e98 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5600e3369d48 <col:34, line:93:5>
|   `-ReturnStmt 0x5600e3369d38 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5600e3369d20 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5600e3369cf0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5600e3368620
|         `-CXXThisExpr 0x5600e3369ce0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5600e3364f68 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5600e3369dc8 <col:38, line:101:5>
|   `-ReturnStmt 0x5600e3369db8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5600e3369da0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5600e3369d70 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5600e3368620
|         `-CXXThisExpr 0x5600e3369d60 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5600e3365038 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5600e336a098 <col:38, line:108:5>
|   `-ReturnStmt 0x5600e336a088 <line:107:2, col:58>
|     `-BinaryOperator 0x5600e336a068 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5600e3369f80 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5600e3369f60 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5600e3369f48 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5600e3369df0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5600e3368620
|       |   |   `-CXXThisExpr 0x5600e3369de0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5600e3369f20 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5600e3369f08 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5600e3369e88 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5600e32a6f78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5600e3369e68 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5600e336a040 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5600e336a028 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5600e336a008 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5600e32a6f78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5600e3369fe8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5600e33650f8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5600e336a308 <col:39, line:112:5>
|   `-ReturnStmt 0x5600e336a2f8 <line:111:2, col:56>
|     `-BinaryOperator 0x5600e336a2d8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5600e336a1f0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5600e336a1d0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5600e336a1b8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5600e336a0c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5600e3368620
|       |   |   `-CXXThisExpr 0x5600e336a0b0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5600e336a190 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5600e336a178 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5600e336a158 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5600e32a6f78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5600e336a138 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5600e336a2b0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5600e336a298 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5600e336a278 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5600e32a6f78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5600e336a258 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5600e3365228 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5600e3365330 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5600e3365440 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5600e3367518 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5600e33675d8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5600e33676a0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5600e3367898 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5600e3367750 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5600e33677c8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5600e3367a18 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5600e3367958 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5600e3367b60 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5600e3367ad0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5600e3367d08 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5600e3367c18 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5600e3367e50 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5600e3367dc0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5600e3367f98 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5600e3367f08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5600e3368060 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5600e3368120 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5600e3368298 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5600e33681d0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5600e3368360 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5600e3368448 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5600e33684f0 <col:51> "" ""
|-TypedefDecl 0x5600e3368590 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5600e32c9d20 'IPAddress'
|   `-CXXRecord 0x5600e3363c40 'IPAddress'
|-AccessSpecDecl 0x5600e33685e8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5600e3368620 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5600e3368cc8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5600e3368cc8
| `-ParmVarDecl 0x5600e3368dd8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x5600e3368e78 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e3368f88 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5600e3368620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5600e3369b68 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5600e3369b20 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5600e3368620
| |     `-CXXStaticCastExpr 0x5600e3369af0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5600e3369ac0 <col:7> 'IPAddress' lvalue ParmVar 0x5600e3368f88 '' 'IPAddress &&'
| `-CompoundStmt 0x5600e3369bb0 <col:7>
`-CXXDestructorDecl 0x5600e3369878 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5600e3627690 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5600e36278e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5600e36c3268 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5600e36c3700 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5600e36c36e0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5600e36c3770 <col:19>
|-CXXConstructorDecl 0x5600e36c3368 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5600e36c3368
| `-ParmVarDecl 0x5600e36c3478 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5600e36c3518 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5600e36c3628 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5600e36c4010 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5600e36c3ff0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5600e36c3fc0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5600e36c3f90 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5600e36c3628 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5600e36c4080 <col:19>
`-CXXDestructorDecl 0x5600e36c37b0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
