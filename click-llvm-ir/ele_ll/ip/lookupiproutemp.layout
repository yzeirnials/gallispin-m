
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IPTable::Entry
         0 |   class IPAddress dst
         0 |     uint32_t _addr
         4 |   class IPAddress mask
         4 |     uint32_t _addr
         8 |   class IPAddress gw
         8 |     uint32_t _addr
        12 |   int index
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct LookupIPRouteMP::cache_entry
         0 |   class IPAddress _last_addr_1
         0 |     uint32_t _addr
         4 |   class IPAddress _last_gw_1
         4 |     uint32_t _addr
         8 |   int _last_output_1
        12 |   class IPAddress _last_addr_2
        12 |     uint32_t _addr
        16 |   class IPAddress _last_gw_2
        16 |     uint32_t _addr
        20 |   int _last_output_2
           | [sizeof=64, dsize=24, align=64,
           |  nvsize=24, nvalign=64]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4542c78 prev 0x5643b453a418 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b4542d70 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5643b4542e00 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5643b4542e78 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5643b4542f38 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5643b4543000 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5643b4543178 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5643b45430b0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5643b4543220 <col:24>
| `-OptimizeNoneAttr 0x5643b4543278 <col:34>
|-CXXMethodDecl 0x5643b45432c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5643b4543578 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5643b4543370 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5643b45433e8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5643b4543468 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5643b4543630 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5643b4543668 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5643b45436d0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5643b4543758 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5643b4543a78 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5643b4543810 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5643b4543888 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5643b4543900 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5643b4543980 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5643b4543b90 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5643b454b508 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5643b454b508
| `-ParmVarDecl 0x5643b454b618 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5643b454b6b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5643b454b6b8
| `-ParmVarDecl 0x5643b454b7c8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5643b4628310 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4535c90 prev 0x5643b4535a10 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643b4535d88 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5643b4535e18 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5643b4535e78 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5643b4535f68 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5643b4536068 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5643b4536238 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5643b45360e8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5643b4536160 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5643b45363c8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5643b4536300 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5643b4536470 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5643b45365a8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5643b45364e0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5643b4536748 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5643b4536688 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5643b45368e8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5643b4536828 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5643b4536990 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5643b4536a90 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5643b4536b70 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4536a70 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5643b4536a50 <col:26> 'int' 1
| `-EnumConstantDecl 0x5643b4536b20 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5643b4536b88 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b4536b00 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5643b4536ae0 <col:44> 'int' 2
|-CXXMethodDecl 0x5643b4536cd0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5643b4536bb8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5643b4536c38 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5643b4536e28 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5643b4536d98 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5643b4537068 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5643b4536ee8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5643b4536f60 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5643b4537118 <col:20>
| `-OptimizeNoneAttr 0x5643b4537170 <col:30>
|-CXXMethodDecl 0x5643b4537278 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5643b45371b0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5643b4537320 <col:20>
| `-OptimizeNoneAttr 0x5643b4537378 <col:30>
|-CXXMethodDecl 0x5643b45373c8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5643b4537490 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5643b45375a8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5643b4537630 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5643b45376b8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5643b4537740 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5643b45377c8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5643b4537858 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5643b4537918 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5643b45379a0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5643b4537a28 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5643b4537ab0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5643b4537b38 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5643b4537bc0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5643b4537c50 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5643b4537d10 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5643b4537da0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5643b4537ef0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5643b4537e58 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5643b4538080 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5643b4537fb0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5643b4538330 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5643b4538138 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5643b45381b8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5643b4538238 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5643b45383e8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5643b45384f0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643b4538780 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b45384d0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5643b45384b0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5643b4538580 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643b4538798 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4538560 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5643b4538540 <col:32> 'int' 20
| |-EnumConstantDecl 0x5643b4538610 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643b45387b0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b45385f0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5643b45385d0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5643b45386a0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643b45387c8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4538680 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5643b4538660 <col:35> 'int' 100
| `-EnumConstantDecl 0x5643b4538730 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5643b45387e0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b4538710 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5643b45386f0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5643b4538820 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5643b4538c60 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5643b4538ad0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5643b4538b48 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643b4538d30 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5643b4538eb0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5643b4538de0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643b45390b8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5643b4538f68 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5643b4538fe0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643b45391b8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5643b4539258 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5643b4539320 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643b45393b0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5643b45395e0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4539390 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5643b4539370 <col:36> 'int' EnumConstant 0x5643b4539320 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643b4539400 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643b4539450 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643b45394a0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643b45394f0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643b4539540 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5643b4539590 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5643b45396c8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5643b4539608 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5643b4539790 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5643b4539850 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5643b4539910 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5643b45399d0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5643b4539ae8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5643b4539bb0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5643b4539d30 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5643b4539c60 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5643b4539e58 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5643b453a058 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5643b4539f08 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5643b4539f88 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5643b45479a8 <col:54, line:127:5>
|   |-ParenExpr 0x5643b4547858 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5643b4547828 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5643b4547518 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5643b45474f0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5643b45474d8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5643b45474c0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5643b4547490 <col:31> 'Router *' lvalue ->_router 0x5643b4545370
|   |   |         `-CXXThisExpr 0x5643b4547480 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5643b4547578 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b4547558 <col:48> 'int' 0
|   |   `-CallExpr 0x5643b4547788 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5643b4547770 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b4547750 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b45477c8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b45475e8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5643b45477e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b4547608 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5643b45477f8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b4547640 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5643b4547810 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b4547738 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b4547720 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b45476d8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5643b45478f0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5643b4547888 <col:9> 'Router *' lvalue ->_router 0x5643b4545370
|   | | `-CXXThisExpr 0x5643b4547878 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5643b45478d8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5643b45478b8 <col:19> 'Router *' lvalue ParmVar 0x5643b4539f08 'r' 'Router *'
|   `-BinaryOperator 0x5643b4547988 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5643b4547920 <col:9> 'int' lvalue ->_eindex 0x5643b45453d8
|     | `-CXXThisExpr 0x5643b4547910 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5643b4547970 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5643b4547950 <col:19> 'int' lvalue ParmVar 0x5643b4539f88 'eindex' 'int'
|-CXXMethodDecl 0x5643b453a1e0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5643b453a118 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5643b453a2b0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5643b453a378 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5643b453a418 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5643b453a668 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5643b453a4e0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5643b453a560 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5643b453a718 <col:20>
| `-OptimizeNoneAttr 0x5643b453a770 <col:30>
|-CXXMethodDecl 0x5643b453a878 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5643b453a7b0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5643b453a920 <col:20>
| `-OptimizeNoneAttr 0x5643b453a978 <col:30>
|-CXXMethodDecl 0x5643b453aa48 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5643b453a9b8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5643b453aaf0 <col:20>
| `-OptimizeNoneAttr 0x5643b453ab48 <col:30>
|-CXXMethodDecl 0x5643b453acd8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5643b453ab80 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5643b453ac00 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5643b453ae68 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5643b453ada0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5643b453afb8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5643b453af28 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5643b453b108 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5643b453b078 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5643b453b258 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5643b453b1c8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5643b453b518 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5643b453b310 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5643b453b390 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5643b453b438 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5643b453b5f0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5643b453b6b0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5643b453b980 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5643b453b830 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5643b453b8a8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5643b453baa8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5643b453bc80 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5643b453bb60 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5643b453bbe0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5643b453be68 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5643b453bd48 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5643b453bdc8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5643b453c1d8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5643b453bf28 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5643b453bfa0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5643b453c020 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5643b4546f90 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5643b4546f70 <col:106> 'int' 0
| `-ParmVarDecl 0x5643b453c098 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643b4546fc8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643b4546fa8 <col:126> 'int' 0
|-CXXMethodDecl 0x5643b453c578 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643b453c2a8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5643b453c340 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5643b453c3c0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5643b453c438 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643b4547000 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643b4546fe0 <col:114> 'int' 0
|-CXXMethodDecl 0x5643b453c908 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643b453c650 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5643b453c6c8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5643b453c748 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5643b4547018 <col:96> 'int' 0
| `-ParmVarDecl 0x5643b453c7c0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643b4547058 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643b4547038 <col:116> 'int' 0
|-CXXMethodDecl 0x5643b453cc88 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5643b453c9d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5643b453ca50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5643b453cad0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5643b4547090 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5643b4547070 <col:109> 'int' 0
| `-ParmVarDecl 0x5643b453cb48 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643b45470c8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643b45470a8 <col:129> 'int' 0
|-CXXMethodDecl 0x5643b453d008 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643b453cd58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5643b453cdd0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5643b453ce50 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5643b453cec8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643b4547100 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643b45470e0 <col:117> 'int' 0
|-CXXMethodDecl 0x5643b453d398 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643b453d0e0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b453d158 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5643b453d1d8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5643b4547118 <col:99> 'int' 0
| `-ParmVarDecl 0x5643b453d250 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643b4547158 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643b4547138 <col:119> 'int' 0
|-CXXMethodDecl 0x5643b453d7b8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5643b453d468 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5643b453d4e8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5643b453d560 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5643b453d5e0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5643b4547190 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5643b4547170 <col:108> 'int' 0
| `-ParmVarDecl 0x5643b453d660 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5643b45471c8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5643b45471a8 <col:141> 'int' 0
|-CXXMethodDecl 0x5643b453dbd8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5643b453d890 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5643b453d910 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5643b453d988 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5643b453da08 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5643b453da88 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5643b45471e0 <col:121> 'int' 0
|-CXXMethodDecl 0x5643b453e008 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5643b453dcb8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5643b453dd38 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5643b453ddb0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5643b453de30 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5643b4547200 <col:98> 'int' 0
| `-ParmVarDecl 0x5643b453deb0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5643b4547220 <col:123> 'int' 0
|-CXXMethodDecl 0x5643b453e2d0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5643b453e0e0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5643b453e160 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5643b453e1e0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5643b4547240 <col:80> 'int' 0
|-EnumDecl 0x5643b453e388 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5643b453e490 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643b453e720 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b453e470 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5643b453e450 <col:42> 'int' 1
| |-EnumConstantDecl 0x5643b453e520 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643b453e738 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b453e500 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5643b453e4e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5643b453e5b0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643b453e750 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b453e590 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5643b453e570 <col:44> 'int' 4
| |-EnumConstantDecl 0x5643b453e640 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643b453e768 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b453e620 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5643b453e600 <col:36> 'int' 7
| `-EnumConstantDecl 0x5643b453e6d0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5643b453e780 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b453e6b0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5643b453e690 <col:34> 'int' 6
|-CXXMethodDecl 0x5643b453ea38 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5643b453e7a8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5643b453e848 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5643b453e8c8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5643b453e940 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5643b45472f8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5643b45472e0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5643b45472c8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5643b45472a8 <col:98, col:105> 'String' (CXXTemporary 0x5643b45472a8)
|           `-CXXTemporaryObjectExpr 0x5643b4547270 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5643b453ecd8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5643b453eb08 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5643b453eb80 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5643b453ebf8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5643b45473a8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5643b4547390 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5643b4547378 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5643b4547358 <col:94, col:101> 'String' (CXXTemporary 0x5643b4547358)
| |         `-CXXTemporaryObjectExpr 0x5643b4547320 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5643b4547b90 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5643b4547b08 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5643b4547ad8 <col:9> '<bound member function type>' ->add_task_handlers 0x5643b453ea38
|     | `-CXXThisExpr 0x5643b4547ac8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5643b4547b48 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5643b4547a48 <col:27> 'Task *' lvalue ParmVar 0x5643b453eb08 'task' 'Task *'
|     |-ImplicitCastExpr 0x5643b4547b60 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5643b4547a68 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5643b453eb80 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5643b4547b78 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5643b4547a88 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5643b453e6d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5643b4547aa8 <col:62> 'const String' lvalue ParmVar 0x5643b453ebf8 'prefix' 'const String &'
|-CXXMethodDecl 0x5643b453eee8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5643b453eda0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5643b453ee18 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5643b4547458 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5643b4547440 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5643b4547428 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5643b4547408 <col:70, col:77> 'String' (CXXTemporary 0x5643b4547408)
| |         `-CXXTemporaryObjectExpr 0x5643b45473d0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5643b4547d68 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5643b4547ce0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5643b4547cb0 <col:9> '<bound member function type>' ->add_task_handlers 0x5643b453ea38
|     | `-CXXThisExpr 0x5643b4547ca0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5643b4547d20 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5643b4547c20 <col:27> 'Task *' lvalue ParmVar 0x5643b453eda0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5643b4547d38 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5643b4547c40 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5643b4547d50 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5643b4547c60 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5643b453e6d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5643b4547c80 <col:57> 'const String' lvalue ParmVar 0x5643b453ee18 'prefix' 'const String &'
|-CXXMethodDecl 0x5643b453f1c8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5643b453efb0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b453f030 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b453f0a8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5643b453f478 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5643b453f298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b453f318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b453f398 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5643b453f768 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5643b453f548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b453f5c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b453f640 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5643b453fa18 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5643b453f838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b453f8b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b453f938 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5643b453fcc8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5643b453fae8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b453fb68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b453fbe8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5643b453ff78 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5643b453fd98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b453fe18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b453fe90 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5643b4540228 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5643b4540048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b45400c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b4540148 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5643b4540538 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5643b4540350 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b45403d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b4540450 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5643b4540818 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5643b4540608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b4540688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b4540730 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5643b4540af8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5643b45408e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b4540968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b4540a10 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5643b4540d60 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5643b4540bc8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5643b4540c48 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5643b4540cc0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5643b4541008 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5643b4540e30 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5643b4540eb0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5643b4540f28 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5643b45412b8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5643b45410d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b4541158 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b45411d8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5643b4541568 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5643b4541388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b4541408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b4541480 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5643b4541818 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5643b4541638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b45416b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b4541730 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5643b4541ae8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5643b45418e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b4541968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643b4541a08 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5643b4541e18 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5643b4541bb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643b4541c38 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5643b4541cb0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5643b4541d28 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5643b4547470 <col:93> 'bool' false
|-CXXMethodDecl 0x5643b4542000 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5643b4541ee8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5643b4541f68 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5643b45421d8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5643b45420c0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5643b4542140 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5643b45424b8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5643b4542298 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5643b4542310 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5643b4542390 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5643b4542408 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5643b45427a8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5643b4542588 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5643b4542600 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5643b4542680 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5643b45426f8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5643b45429e0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5643b4542880 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5643b4542900 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5643b4542bc8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5643b4542aa8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5643b4542b28 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5643b4542c78 prev 0x5643b453a418 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5643b4542d70 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5643b4542e00 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5643b4542e78 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5643b4542f38 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5643b4543000 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5643b4543178 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5643b45430b0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5643b4543220 <col:24>
| | `-OptimizeNoneAttr 0x5643b4543278 <col:34>
| |-CXXMethodDecl 0x5643b45432c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5643b4543578 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5643b4543370 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5643b45433e8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5643b4543468 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5643b4543630 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5643b4543668 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5643b45436d0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5643b4543758 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5643b4543a78 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5643b4543810 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5643b4543888 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5643b4543900 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5643b4543980 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5643b4543b90 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5643b454b508 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5643b454b508
| | `-ParmVarDecl 0x5643b454b618 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5643b454b6b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5643b454b6b8
| | `-ParmVarDecl 0x5643b454b7c8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5643b4628310 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5643b4543c08 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5643b4543ca8 <col:38> "" ""
|-CXXMethodDecl 0x5643b4543d38 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5643b4543dd8 <col:44> "" ""
|-AccessSpecDecl 0x5643b4543e48 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5643b4543e70 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5643b4543f70 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5643b4543fc0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b4543f50 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5643b4543f30 <col:27> 'int' 4
|-FieldDecl 0x5643b4544078 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5643b4544228 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5643b45442e0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5643b4545370 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5643b45453d8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5643b4545528 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5643b4545468 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5643b45456d8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5643b45455e8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5643b45458b8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5643b4545798 <col:20> col:23 'int'
| `-ParmVarDecl 0x5643b4545818 <col:25> col:28 'int'
|-CXXMethodDecl 0x5643b4545b60 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5643b4545980 <col:23> col:26 'int'
| |-ParmVarDecl 0x5643b4545a00 <col:28> col:31 'int'
| `-ParmVarDecl 0x5643b4545a78 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5643b4545c18 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5643b4545ce0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5643b4545d30 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5643b4545d80 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5643b4545f60 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5643b4545e10 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5643b4545e88 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643b4546208 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5643b4546028 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5643b45460a8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5643b4546120 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5643b4546428 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5643b45462d8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5643b4546358 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5643b4546760 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5643b45464e8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5643b4546568 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5643b45465e0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5643b4546660 <col:57> col:60 'int'
|-CXXMethodDecl 0x5643b4546948 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5643b4546830 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5643b45468b0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5643b4546a98 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5643b4546a08 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5643b4546e18 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5643b4546b58 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5643b4546bd8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5643b4546c50 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5643b4546cd0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5643b4546f30 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct IPTable::Entry>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPTable
         0 |   class Vector<struct IPTable::Entry> _v
         0 |     class vector_memory<class sized_array_memory<16> > vm_
         0 |       vector_memory<class sized_array_memory<16> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class LookupIPRouteMP
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       128 |   struct cache_entry [1] _cache
       192 |   class IPTable _t
       192 |     class Vector<struct IPTable::Entry> _v
       192 |       class vector_memory<class sized_array_memory<16> > vm_
       192 |         vector_memory<class sized_array_memory<16> >::type * l_
       200 |         vector_memory::size_type n_
       204 |         vector_memory::size_type capacity_
           | [sizeof=256, dsize=208, align=64,
           |  nvsize=208, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4336a60 prev 0x5643b429ba98 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b4336b58 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5643b4336be8 <col:19, col:25> col:19 public
|-TypedefDecl 0x5643b4336c20 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5643b4129370 'uninitialized_type'
|   `-CXXRecord 0x5643b41292d8 'uninitialized_type'
|-CXXConstructorDecl 0x5643b4336ce0 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5643b433a430 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5643b433a4d8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5643b433a498 <col:10> 'int' 0
| `-CompoundStmt 0x5643b433a520 <col:13, line:22:5>
|-CXXConstructorDecl 0x5643b4336e30 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5643b4336da0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5643b433a430 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5643b433a570 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5643b433a530 <col:10> 'unsigned int' lvalue ParmVar 0x5643b4336da0 'x' 'unsigned int'
| `-CompoundStmt 0x5643b433a5b8 <col:13, line:27:5>
|-CXXConstructorDecl 0x5643b4336f88 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5643b4336ef8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5643b433a430 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5643b433a620 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5643b433a608 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5643b433a5c8 <col:10> 'int' lvalue ParmVar 0x5643b4336ef8 'x' 'int'
| `-CompoundStmt 0x5643b433a668 <col:13, line:31:5>
|-CXXConstructorDecl 0x5643b43370e0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5643b4337050 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5643b433a430 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5643b433a6d0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5643b433a6b8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5643b433a678 <col:10> 'unsigned long' lvalue ParmVar 0x5643b4337050 'x' 'unsigned long'
| `-CompoundStmt 0x5643b433a718 <col:13, line:35:5>
|-CXXConstructorDecl 0x5643b4337238 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5643b43371a8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5643b433a430 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5643b433a780 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5643b433a768 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5643b433a728 <col:10> 'long' lvalue ParmVar 0x5643b43371a8 'x' 'long'
| `-CompoundStmt 0x5643b433a7c8 <col:13, line:39:5>
|-CXXConstructorDecl 0x5643b43373f8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5643b4337308 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5643b433a430 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5643b433a848 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5643b433a7f8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5643b426a850
| |     `-DeclRefExpr 0x5643b433a7d8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5643b4337308 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5643b433a890 <col:20, line:44:5>
|-CXXConstructorDecl 0x5643b4337588 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5643b43374c0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5643b433a9f8 <col:51, line:56:5>
|   `-BinaryOperator 0x5643b433a9d8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5643b433a8b0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5643b433a430
|     | `-CXXThisExpr 0x5643b433a8a0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5643b433a9c0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5643b433a9a8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5643b433a988 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5643b433a958 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5643b433a940 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5643b433a8e0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5643b43374c0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5643b43376d8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5643b4337648 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5643b4337888 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5643b43377c8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5643b433aa68 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5643b433aa40 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5643b433aa10 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5643b43377c8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5643b4337a18 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5643b4337950 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5643b4337b08 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5643b433ba28 <col:46, line:83:5>
|   `-ReturnStmt 0x5643b433ba18 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5643b433ba00 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5643b433b9d0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5643b433b888 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5643b433b770 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5643b433b658 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5643b433aa90 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5643b4337bf8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5643b433bad8 <col:31, line:88:5>
|   `-ReturnStmt 0x5643b433bac8 <line:87:2, col:10>
|     `-UnaryOperator 0x5643b433bab0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5643b433ba98 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5643b433ba80 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5643b433ba50 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5643b433a430
|             `-CXXThisExpr 0x5643b433ba40 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5643b4337cb8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5643b433bb58 <col:34, line:93:5>
|   `-ReturnStmt 0x5643b433bb48 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5643b433bb30 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5643b433bb00 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5643b433a430
|         `-CXXThisExpr 0x5643b433baf0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5643b4337d88 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5643b433bbd8 <col:38, line:101:5>
|   `-ReturnStmt 0x5643b433bbc8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5643b433bbb0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5643b433bb80 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5643b433a430
|         `-CXXThisExpr 0x5643b433bb70 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5643b4337e58 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5643b433bea8 <col:38, line:108:5>
|   `-ReturnStmt 0x5643b433be98 <line:107:2, col:58>
|     `-BinaryOperator 0x5643b433be78 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5643b433bd90 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5643b433bd70 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5643b433bd58 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5643b433bc00 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5643b433a430
|       |   |   `-CXXThisExpr 0x5643b433bbf0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5643b433bd30 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5643b433bd18 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5643b433bc98 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5643b4278d88 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5643b433bc78 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5643b433be50 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5643b433be38 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5643b433be18 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5643b4278d88 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5643b433bdf8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5643b4337f18 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5643b433c118 <col:39, line:112:5>
|   `-ReturnStmt 0x5643b433c108 <line:111:2, col:56>
|     `-BinaryOperator 0x5643b433c0e8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5643b433c000 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5643b433bfe0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5643b433bfc8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5643b433bed0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5643b433a430
|       |   |   `-CXXThisExpr 0x5643b433bec0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5643b433bfa0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5643b433bf88 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5643b433bf68 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5643b4278d88 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5643b433bf48 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5643b433c0c0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5643b433c0a8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5643b433c088 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5643b4278d88 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5643b433c068 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5643b4338048 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5643b4338150 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5643b4338260 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5643b4339328 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5643b43393e8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b43394b0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5643b43396a8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5643b4339560 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5643b43395d8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5643b4339828 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5643b4339768 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5643b4339970 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5643b43398e0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5643b4339b18 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5643b4339a28 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5643b4339c60 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5643b4339bd0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5643b4339da8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5643b4339d18 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5643b4339e70 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5643b4339f30 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5643b433a0a8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5643b4339fe0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5643b433a170 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5643b433a258 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5643b433a300 <col:51> "" ""
|-TypedefDecl 0x5643b433a3a0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5643b429bb30 'IPAddress'
|   `-CXXRecord 0x5643b4336a60 'IPAddress'
|-AccessSpecDecl 0x5643b433a3f8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5643b433a430 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5643b433aad8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5643b433aad8
| `-ParmVarDecl 0x5643b433abe8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x5643b433ac88 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5643b433ad98 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5643b433a430 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5643b433b978 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5643b433b930 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5643b433a430
| |     `-CXXStaticCastExpr 0x5643b433b900 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5643b433b8d0 <col:7> 'IPAddress' lvalue ParmVar 0x5643b433ad98 '' 'IPAddress &&'
| `-CompoundStmt 0x5643b433b9c0 <col:7>
`-CXXDestructorDecl 0x5643b433b688 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b455b1e8 <../elements/ip/lookupiproutemp.hh:22:3, line:29:3> line:22:10 struct cache_entry definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-AlignedAttr 0x5643b455b628 <line:29:20, col:30> aligned
| `-ConstantExpr 0x5643b455b608 <col:28> 'int' Int: 64
|   `-IntegerLiteral 0x5643b455b5e8 <col:28> 'int' 64
|-CXXRecordDecl 0x5643b455b308 <line:22:3, col:10> col:10 implicit struct cache_entry
|-FieldDecl 0x5643b455b3a8 <line:23:5, col:15> col:15 _last_addr_1 'IPAddress'
|-FieldDecl 0x5643b455b408 <line:24:5, col:15> col:15 _last_gw_1 'IPAddress'
|-FieldDecl 0x5643b455b470 <line:25:5, col:9> col:9 _last_output_1 'int'
|-FieldDecl 0x5643b455b4d0 <line:26:5, col:15> col:15 _last_addr_2 'IPAddress'
|-FieldDecl 0x5643b455b530 <line:27:5, col:15> col:15 _last_gw_2 'IPAddress'
|-FieldDecl 0x5643b455b598 <line:28:5, col:9> col:9 _last_output_2 'int'
|-CXXConstructorDecl 0x5643b4627b50 <line:22:10> col:10 implicit used cache_entry 'void () noexcept(false)' inline default
| |-CXXCtorInitializer Field 0x5643b455b3a8 '_last_addr_1' 'IPAddress'
| | `-CXXConstructExpr 0x5643b4628000 <col:10> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5643b455b408 '_last_gw_1' 'IPAddress'
| | `-CXXConstructExpr 0x5643b4628050 <col:10> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5643b455b4d0 '_last_addr_2' 'IPAddress'
| | `-CXXConstructExpr 0x5643b46280a0 <col:10> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5643b455b530 '_last_gw_2' 'IPAddress'
| | `-CXXConstructExpr 0x5643b46280f0 <col:10> 'IPAddress' 'void ()'
| `-CompoundStmt 0x5643b4628160 <col:10>
|-CXXConstructorDecl 0x5643b4627c58 <col:10> col:10 implicit constexpr cache_entry 'void (const LookupIPRouteMP::cache_entry &)' inline default trivial noexcept-unevaluated 0x5643b4627c58
| `-ParmVarDecl 0x5643b4627d68 <col:10> col:10 'const LookupIPRouteMP::cache_entry &'
|-CXXConstructorDecl 0x5643b4627e08 <col:10> col:10 implicit constexpr cache_entry 'void (LookupIPRouteMP::cache_entry &&)' inline default trivial noexcept-unevaluated 0x5643b4627e08
| `-ParmVarDecl 0x5643b4627f48 <col:10> col:10 'LookupIPRouteMP::cache_entry &&'
`-CXXDestructorDecl 0x5643b4628198 <col:10> col:10 implicit referenced ~cache_entry 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.LookupIPRouteMP::cache_entry" = type { %class.IPAddress, %class.IPAddress, i32, %class.IPAddress, %class.IPAddress, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%"struct.LookupIPRouteMP::cache_entry.base" = type { %class.IPAddress, %class.IPAddress, i32, %class.IPAddress, %class.IPAddress, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643b4550eb0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5643b4551088 prev 0x5643b4550eb0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5643b4551118 <col:46, col:52> col:46 public
|-TypedefDecl 0x5643b4551140 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5643b3fd4370 'int'
|-TypedefDecl 0x5643b4552d10 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5643b4552cc0 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5643b45515f0 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5643b45514f0 'type'
|     `-TemplateSpecializationType 0x5643b4551480 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5643b4551360 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5643b4551340 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5643b4551320 <col:24> 'unsigned long' 16
|       `-RecordType 0x5643b4551460 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5643b4551380 'char_array'
|-TypedefDecl 0x5643b4552dc8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5643b4552d90 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5643b4552d70 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5643b4552d10 'type'
|     `-ElaboratedType 0x5643b4552cc0 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5643b45515f0 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5643b45514f0 'type'
|         `-TemplateSpecializationType 0x5643b4551480 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5643b4551360 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5643b4551340 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5643b4551320 <col:24> 'unsigned long' 16
|           `-RecordType 0x5643b4551460 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5643b4551380 'char_array'
|-CXXMethodDecl 0x5643b4552f48 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5643b4552e58 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5643b4553038 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5643b4553118 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5643b45533e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5643b45532f0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5643b4553628 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643b45534a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643b4553518 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643b45537f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643b45536e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643b4553760 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643b4553958 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5643b4553a28 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5643b4553c78 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643b4553ae8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5643b4553b60 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643b4553ed8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5643b4553d48 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5643b4553dc0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643b4554098 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5643b4553fa8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643b4554258 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5643b4554160 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643b4554310 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643b45543c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5643b45545f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643b4554470 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643b45544e8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643b4554898 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5643b45547a0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x5643b4554960 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5643b45549b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5643b4554a00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643b454f7c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPTable::Entry'
|-CXXRecordDecl 0x5643b454f9c8 prev 0x5643b454f7c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5643b4550e20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Entry>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5643b4550dd0 'typename array_memory<Entry>::type' sugar
|   `-TypedefType 0x5643b4550db0 'conditional<true, sized_array_memory<16>, typed_array_memory<IPTable::Entry> >::type' sugar
|     |-Typedef 0x5643b4550c60 'type'
|     `-SubstTemplateTypeParmType 0x5643b4550a80 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5643b4299d70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b4299d18 'T'
|       `-RecordType 0x5643b45505d0 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5643b45504e8 'sized_array_memory'
|-FieldDecl 0x5643b4554a50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPTable::Entry>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5643b4554aa0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5643b4554ad8 <line:118:5, col:15> col:15 value_type 'IPTable::Entry':'IPTable::Entry'
| `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|   |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643b42d1a08 'T'
|   `-RecordType 0x5643b454f410 'IPTable::Entry'
|     `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4554b98 <line:119:5, col:16> col:16 reference 'IPTable::Entry &'
| `-LValueReferenceType 0x5643b4554b60 'IPTable::Entry &'
|   `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|     |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643b42d1a08 'T'
|     `-RecordType 0x5643b454f410 'IPTable::Entry'
|       `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4554c58 <line:120:5, col:22> col:22 const_reference 'const IPTable::Entry &'
| `-LValueReferenceType 0x5643b4554c20 'const IPTable::Entry &'
|   `-QualType 0x5643b454fa61 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b454f410 'IPTable::Entry'
|         `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4554d18 <line:121:5, col:16> col:16 pointer 'IPTable::Entry *'
| `-PointerType 0x5643b4554ce0 'IPTable::Entry *'
|   `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|     |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643b42d1a08 'T'
|     `-RecordType 0x5643b454f410 'IPTable::Entry'
|       `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4554da8 <line:122:5, col:22> col:22 const_pointer 'const IPTable::Entry *'
| `-PointerType 0x5643b4554d70 'const IPTable::Entry *'
|   `-QualType 0x5643b454fa61 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b454f410 'IPTable::Entry'
|         `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4555c30 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Entry>::type':'const IPTable::Entry &'
| `-ElaboratedType 0x5643b4555be0 'typename fast_argument<Entry>::type' sugar
|   `-TypedefType 0x5643b4555bc0 'fast_argument<IPTable::Entry, true>::type' sugar
|     |-Typedef 0x5643b4555af8 'type'
|     `-LValueReferenceType 0x5643b4555ac0 'const IPTable::Entry &'
|       `-QualType 0x5643b4555861 'const IPTable::Entry' const
|         `-SubstTemplateTypeParmType 0x5643b4555860 'IPTable::Entry' sugar
|           |-TemplateTypeParmType 0x5643b42a4440 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5643b42a43e8 'T'
|           `-RecordType 0x5643b454f410 'IPTable::Entry'
|             `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4555c98 <line:126:5, col:22> col:22 const_access_type 'const IPTable::Entry &'
| `-LValueReferenceType 0x5643b4554c20 'const IPTable::Entry &'
|   `-QualType 0x5643b454fa61 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b454f410 'IPTable::Entry'
|         `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4555cf0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5643b3fd4370 'int'
|-TypedefDecl 0x5643b4555d58 <line:130:5, col:16> col:16 iterator 'IPTable::Entry *'
| `-PointerType 0x5643b4554ce0 'IPTable::Entry *'
|   `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|     |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643b42d1a08 'T'
|     `-RecordType 0x5643b454f410 'IPTable::Entry'
|       `-CXXRecord 0x5643b454f380 'Entry'
|-TypedefDecl 0x5643b4555dc0 <line:131:5, col:22> col:22 const_iterator 'const IPTable::Entry *'
| `-PointerType 0x5643b4554d70 'const IPTable::Entry *'
|   `-QualType 0x5643b454fa61 'const IPTable::Entry' const
|     `-SubstTemplateTypeParmType 0x5643b454fa60 'IPTable::Entry' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b454f410 'IPTable::Entry'
|         `-CXXRecord 0x5643b454f380 'Entry'
|-EnumDecl 0x5643b4555e18 <line:134:5> col:5
| `-EnumConstantDecl 0x5643b4555f10 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPTable::Entry>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5643b4555ef0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5643b42d30e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5643b42d30c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5643b42d30a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5643b4555f98 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5643b4556228 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b4556050 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643b45560f0 <col:41, col:61> col:61 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXConstructorDecl 0x5643b45564e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPTable::Entry> &)' inline
| `-ParmVarDecl 0x5643b45563d0 <col:19, col:36> col:36 x 'const Vector<IPTable::Entry> &'
|-CXXConstructorDecl 0x5643b45567a8 <line:141:5, col:32> col:12 Vector 'void (Vector<IPTable::Entry> &&)' inline
| `-ParmVarDecl 0x5643b4556690 <col:19, col:31> col:31 x 'Vector<IPTable::Entry> &&'
|-CXXMethodDecl 0x5643b4556af0 <line:144:5, col:51> col:23 operator= 'Vector<IPTable::Entry> &(const Vector<IPTable::Entry> &)' inline
| `-ParmVarDecl 0x5643b45569d0 <col:33, col:50> col:50 x 'const Vector<IPTable::Entry> &'
|-CXXMethodDecl 0x5643b4556e00 <line:146:5, col:46> col:23 operator= 'Vector<IPTable::Entry> &(Vector<IPTable::Entry> &&)' inline
| `-ParmVarDecl 0x5643b4556ce0 <col:33, col:45> col:45 x 'Vector<IPTable::Entry> &&'
|-CXXMethodDecl 0x5643b45570f0 <line:148:5, col:70> col:23 assign 'Vector<IPTable::Entry> &(Vector::size_type, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b4556f38 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643b4556fb0 <col:43, col:69> col:63 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5643b4557248 <line:150:5, col:55> col:49 begin 'Vector<IPTable::Entry>::iterator ()'
| |-NoInlineAttr 0x5643b4557328 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b4557380 <col:30> Inherited
|-CXXMethodDecl 0x5643b45573c8 <line:151:5, col:53> col:49 end 'Vector<IPTable::Entry>::iterator ()'
| |-NoInlineAttr 0x5643b4557478 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b45574d0 <col:30> Inherited
|-CXXMethodDecl 0x5643b4557598 <line:152:5, col:63> col:55 begin 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5643b4557648 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b45576a0 <col:30> Inherited
|-CXXMethodDecl 0x5643b45576e8 <line:153:5, col:61> col:55 end 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5643b4557798 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b45577f0 <col:30> Inherited
|-CXXMethodDecl 0x5643b4557838 <line:154:5, col:64> col:55 cbegin 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5643b45578e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b4557940 <col:30> Inherited
|-CXXMethodDecl 0x5643b4557988 <line:155:5, col:62> col:55 cend 'Vector<IPTable::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5643b4557a38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b4557a90 <col:30> Inherited
|-CXXMethodDecl 0x5643b4557ab8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643b4557b68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643b4557c18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5643b4557dd8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b4557cc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643b4557d40 <col:37, col:63> col:57 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5643b4557f28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5643b4557e98 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b45580d8 <line:163:5, col:65> col:43 operator[] 'IPTable::Entry &(Vector::size_type)'
| |-ParmVarDecl 0x5643b4557fe0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643b4558190 <col:20>
| `-OptimizeNoneAttr 0x5643b45581e8 <col:30>
|-CXXMethodDecl 0x5643b4558308 <line:164:5, col:73> col:49 operator[] 'const IPTable::Entry &(Vector::size_type) const'
| |-ParmVarDecl 0x5643b4558210 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643b45583c0 <col:20>
| `-OptimizeNoneAttr 0x5643b4558418 <col:30>
|-CXXMethodDecl 0x5643b45584d0 <line:165:5, col:29> col:15 at 'IPTable::Entry &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643b4558440 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b4558618 <line:166:5, col:37> col:21 at 'const IPTable::Entry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643b4558588 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b4558748 <line:167:5, col:21> col:15 front 'IPTable::Entry &()' inline
|-CXXMethodDecl 0x5643b4558878 <line:168:5, col:29> col:21 front 'const IPTable::Entry &() const' inline
|-CXXMethodDecl 0x5643b4558948 <line:169:5, col:20> col:15 back 'IPTable::Entry &()' inline
|-CXXMethodDecl 0x5643b4558a18 <line:170:5, col:28> col:21 back 'const IPTable::Entry &() const' inline
|-CXXMethodDecl 0x5643b4558b58 <line:172:5, col:39> col:15 unchecked_at 'IPTable::Entry &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643b4558ac8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b4558ca0 <line:173:5, col:47> col:21 unchecked_at 'const IPTable::Entry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643b4558c10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b4558de8 <line:174:5, col:59> col:15 at_u 'IPTable::Entry &(Vector::size_type)' inline
| |-ParmVarDecl 0x5643b4558d58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643b4558ea0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5643b4558fa0 <line:175:5, col:71> col:21 at_u 'const IPTable::Entry &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5643b4558f10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643b4559058 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5643b4559118 <line:177:5, col:20> col:15 data 'IPTable::Entry *()' inline
|-CXXMethodDecl 0x5643b4559218 <line:178:5, col:28> col:21 data 'const IPTable::Entry *() const' inline
|-CXXMethodDecl 0x5643b45593c8 <line:180:5, col:48> col:17 push_back 'void (Vector<IPTable::Entry>::value_argument_type)' inline
| `-ParmVarDecl 0x5643b45592d8 <col:27, col:47> col:47 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-FunctionTemplateDecl 0x5643b4559bb8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5643b4559480 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPTable::Entry>':'fast_argument<IPTable::Entry, true>'
| `-CXXMethodDecl 0x5643b4559b18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPTable::Entry &&)' inline
|   `-ParmVarDecl 0x5643b4559a18 <col:58, col:62> col:62 v 'IPTable::Entry &&'
|-CXXMethodDecl 0x5643b4559c98 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643b4559de8 <line:186:5, col:49> col:17 push_front 'void (Vector<IPTable::Entry>::value_argument_type)' inline
| `-ParmVarDecl 0x5643b4559d58 <col:28, col:48> col:48 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5643b4559ea0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5643b455a0e8 <line:189:5, col:62> col:21 insert 'Vector<IPTable::Entry>::iterator (Vector<IPTable::Entry>::iterator, Vector<IPTable::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b4559f60 <col:28, col:37> col:37 it 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
| `-ParmVarDecl 0x5643b4559fd8 <col:41, col:61> col:61 v 'Vector<IPTable::Entry>::value_argument_type':'const IPTable::Entry &'
|-CXXMethodDecl 0x5643b455a2a8 <line:190:5, col:38> col:21 erase 'Vector<IPTable::Entry>::iterator (Vector<IPTable::Entry>::iterator)' inline
| `-ParmVarDecl 0x5643b455a1b8 <col:27, col:36> col:36 it 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
|-CXXMethodDecl 0x5643b455a4f8 <line:191:5, col:49> col:21 erase 'Vector<IPTable::Entry>::iterator (Vector<IPTable::Entry>::iterator, Vector<IPTable::Entry>::iterator)' inline
| |-ParmVarDecl 0x5643b455a370 <col:27, col:36> col:36 a 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
| `-ParmVarDecl 0x5643b455a3e8 <col:39, col:48> col:48 b 'Vector<IPTable::Entry>::iterator':'IPTable::Entry *'
|-CXXMethodDecl 0x5643b455a5b8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5643b455a818 <line:195:5, col:34> col:17 swap 'void (Vector<IPTable::Entry> &)' inline
| `-ParmVarDecl 0x5643b455a720 <col:22, col:33> col:33 x 'Vector<IPTable::Entry> &'
`-CXXDestructorDecl 0x5643b455a8e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b454e678 <../dummy_inc/click/iptable.hh:13:1, line:35:1> line:13:7 referenced class IPTable definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643b454e798 <col:1, col:7> col:7 implicit referenced class IPTable
|-AccessSpecDecl 0x5643b454e828 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5643b454e8b0 <line:15:3, col:11> col:3 used IPTable 'void ()'
|-CXXDestructorDecl 0x5643b454e9a0 <line:16:3, col:12> col:3 used ~IPTable 'void () noexcept'
|-CXXMethodDecl 0x5643b454ec98 <line:18:3, col:57> col:8 lookup 'bool (IPAddress, IPAddress &, int &) const'
| |-ParmVarDecl 0x5643b454ea90 <col:15, col:25> col:25 dst 'IPAddress'
| |-ParmVarDecl 0x5643b454eb08 <col:30, col:41> col:41 gw 'IPAddress &'
| `-ParmVarDecl 0x5643b454eb88 <col:45, col:50> col:50 index 'int &'
|-CXXMethodDecl 0x5643b454efc8 <line:20:3, col:66> col:8 add 'void (IPAddress, IPAddress, IPAddress, int)'
| |-ParmVarDecl 0x5643b454ed60 <col:12, col:22> col:22 dst 'IPAddress'
| |-ParmVarDecl 0x5643b454edd8 <col:27, col:37> col:37 mask 'IPAddress'
| |-ParmVarDecl 0x5643b454ee50 <col:43, col:53> col:53 gw 'IPAddress'
| `-ParmVarDecl 0x5643b454eed0 <col:57, col:61> col:61 index 'int'
|-CXXMethodDecl 0x5643b454f1e8 <line:21:3, col:41> col:8 del 'void (IPAddress, IPAddress)'
| |-ParmVarDecl 0x5643b454f098 <col:12, col:22> col:22 dst 'IPAddress'
| `-ParmVarDecl 0x5643b454f110 <col:27, col:37> col:37 mask 'IPAddress'
|-CXXMethodDecl 0x5643b454f2b8 <line:22:3, col:30> col:8 clear 'void ()'
| `-CompoundStmt 0x5643b455ae08 <col:16, col:30>
|   `-CXXMemberCallExpr 0x5643b455ade8 <col:18, col:27> 'void'
|     `-MemberExpr 0x5643b455adb8 <col:18, col:21> '<bound member function type>' .clear 0x5643b455a5b8
|       `-MemberExpr 0x5643b455ad88 <col:18> 'Vector<IPTable::Entry>':'Vector<IPTable::Entry>' lvalue ->_v 0x5643b455a9d0
|         `-CXXThisExpr 0x5643b455ad78 <col:18> 'IPTable *' implicit this
|-AccessSpecDecl 0x5643b454f358 <line:24:2, col:9> col:2 private
|-CXXRecordDecl 0x5643b454f380 <line:26:3, line:32:3> line:26:10 referenced struct Entry definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5643b454f498 <col:3, col:10> col:10 implicit struct Entry
| |-FieldDecl 0x5643b454f538 <line:27:5, col:15> col:15 referenced dst 'IPAddress'
| |-FieldDecl 0x5643b454f598 <line:28:5, col:15> col:15 referenced mask 'IPAddress'
| |-FieldDecl 0x5643b454f5f8 <line:29:5, col:15> col:15 gw 'IPAddress'
| |-FieldDecl 0x5643b454f660 <line:30:5, col:9> col:9 index 'int'
| `-CXXMethodDecl 0x5643b454f6f8 <line:31:5, col:47> col:10 valid 'bool () const'
|   `-CompoundStmt 0x5643b455afe8 <col:24, col:47>
|     `-ReturnStmt 0x5643b455afd8 <col:26, col:42>
|       `-BinaryOperator 0x5643b455afb8 <col:33, col:42> 'bool' '||'
|         |-ImplicitCastExpr 0x5643b455afa0 <col:33> 'bool' <IntegralToBoolean>
|         | `-ImplicitCastExpr 0x5643b455af88 <col:33> 'uint32_t':'unsigned int' <UserDefinedConversion>
|         |   `-CXXMemberCallExpr 0x5643b455af68 <col:33> 'uint32_t':'unsigned int'
|         |     `-MemberExpr 0x5643b455af38 <col:33> '<bound member function type>' .operator unsigned int 0x5643b4337d88
|         |       `-MemberExpr 0x5643b455ae30 <col:33> 'const IPAddress' lvalue ->mask 0x5643b454f598
|         |         `-CXXThisExpr 0x5643b455ae20 <col:33> 'const IPTable::Entry *' implicit this
|         `-UnaryOperator 0x5643b455af20 <col:41, col:42> 'bool' prefix '!' cannot overflow
|           `-ImplicitCastExpr 0x5643b455af08 <col:42> 'bool' <IntegralToBoolean>
|             `-ImplicitCastExpr 0x5643b455aef0 <col:42> 'uint32_t':'unsigned int' <UserDefinedConversion>
|               `-CXXMemberCallExpr 0x5643b455aed0 <col:42> 'uint32_t':'unsigned int'
|                 `-MemberExpr 0x5643b455aea0 <col:42> '<bound member function type>' .operator unsigned int 0x5643b4337d88
|                   `-MemberExpr 0x5643b455ae70 <col:42> 'const IPAddress' lvalue ->dst 0x5643b454f538
|                     `-CXXThisExpr 0x5643b455ae60 <col:42> 'const IPTable::Entry *' implicit this
|-FieldDecl 0x5643b455a9d0 <line:33:3, col:17> col:17 referenced _v 'Vector<IPTable::Entry>':'Vector<IPTable::Entry>'
|-CXXConstructorDecl 0x5643b455aa48 <line:13:7> col:7 implicit IPTable 'void (const IPTable &)' inline default noexcept-unevaluated 0x5643b455aa48
| `-ParmVarDecl 0x5643b455ab58 <col:7> col:7 'const IPTable &'
`-CXXMethodDecl 0x5643b455abf8 <col:7> col:7 implicit operator= 'IPTable &(const IPTable &)' inline default noexcept-unevaluated 0x5643b455abf8
  `-ParmVarDecl 0x5643b455ad08 <col:7> col:7 'const IPTable &'

Layout: <CGRecordLayout
  LLVMType:%class.IPTable = type { %class.Vector }
  NonVirtualBaseLLVMType:%class.IPTable = type { %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b455b000 <../elements/ip/lookupiproutemp.hh:21:1, line:51:1> line:21:7 class LookupIPRouteMP definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5643b455b158 <col:1, col:7> col:7 implicit referenced class LookupIPRouteMP
|-CXXRecordDecl 0x5643b455b1e8 <line:22:3, line:29:3> line:22:10 struct cache_entry definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-AlignedAttr 0x5643b455b628 <line:29:20, col:30> aligned
| | `-ConstantExpr 0x5643b455b608 <col:28> 'int' Int: 64
| |   `-IntegerLiteral 0x5643b455b5e8 <col:28> 'int' 64
| |-CXXRecordDecl 0x5643b455b308 <line:22:3, col:10> col:10 implicit struct cache_entry
| |-FieldDecl 0x5643b455b3a8 <line:23:5, col:15> col:15 _last_addr_1 'IPAddress'
| |-FieldDecl 0x5643b455b408 <line:24:5, col:15> col:15 _last_gw_1 'IPAddress'
| |-FieldDecl 0x5643b455b470 <line:25:5, col:9> col:9 _last_output_1 'int'
| |-FieldDecl 0x5643b455b4d0 <line:26:5, col:15> col:15 _last_addr_2 'IPAddress'
| |-FieldDecl 0x5643b455b530 <line:27:5, col:15> col:15 _last_gw_2 'IPAddress'
| |-FieldDecl 0x5643b455b598 <line:28:5, col:9> col:9 _last_output_2 'int'
| |-CXXConstructorDecl 0x5643b4627b50 <line:22:10> col:10 implicit used cache_entry 'void () noexcept(false)' inline default
| | |-CXXCtorInitializer Field 0x5643b455b3a8 '_last_addr_1' 'IPAddress'
| | | `-CXXConstructExpr 0x5643b4628000 <col:10> 'IPAddress' 'void ()'
| | |-CXXCtorInitializer Field 0x5643b455b408 '_last_gw_1' 'IPAddress'
| | | `-CXXConstructExpr 0x5643b4628050 <col:10> 'IPAddress' 'void ()'
| | |-CXXCtorInitializer Field 0x5643b455b4d0 '_last_addr_2' 'IPAddress'
| | | `-CXXConstructExpr 0x5643b46280a0 <col:10> 'IPAddress' 'void ()'
| | |-CXXCtorInitializer Field 0x5643b455b530 '_last_gw_2' 'IPAddress'
| | | `-CXXConstructExpr 0x5643b46280f0 <col:10> 'IPAddress' 'void ()'
| | `-CompoundStmt 0x5643b4628160 <col:10>
| |-CXXConstructorDecl 0x5643b4627c58 <col:10> col:10 implicit constexpr cache_entry 'void (const LookupIPRouteMP::cache_entry &)' inline default trivial noexcept-unevaluated 0x5643b4627c58
| | `-ParmVarDecl 0x5643b4627d68 <col:10> col:10 'const LookupIPRouteMP::cache_entry &'
| |-CXXConstructorDecl 0x5643b4627e08 <col:10> col:10 implicit constexpr cache_entry 'void (LookupIPRouteMP::cache_entry &&)' inline default trivial noexcept-unevaluated 0x5643b4627e08
| | `-ParmVarDecl 0x5643b4627f48 <col:10> col:10 'LookupIPRouteMP::cache_entry &&'
| `-CXXDestructorDecl 0x5643b4628198 <col:10> col:10 implicit referenced ~cache_entry 'void () noexcept' inline default trivial
|-FieldDecl 0x5643b455b898 <line:34:3, col:30> col:22 _cache 'struct cache_entry [1]'
|-FieldDecl 0x5643b455b8f8 <line:37:3, col:11> col:11 _t 'IPTable'
|-AccessSpecDecl 0x5643b455b948 <line:39:1, col:7> col:1 public
|-CXXConstructorDecl 0x5643b455b9d0 <line:40:3, col:19> col:3 LookupIPRouteMP 'void ()'
|-CXXDestructorDecl 0x5643b455bac0 <line:41:3, col:20> col:3 ~LookupIPRouteMP 'void ()' noexcept-unevaluated 0x5643b455bac0
| `-Overrides: [ 0x5643b4535f68 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5643b455bbf0 <line:43:3, col:62> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5643b45373c8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5643b455c858 <col:34, col:62>
|   `-ReturnStmt 0x5643b455c848 <col:36, col:43>
|     `-ImplicitCastExpr 0x5643b455c830 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5643b455c808 <col:43> 'const char [16]' lvalue "LookupIPRouteMP"
|-CXXMethodDecl 0x5643b455bcb8 <line:44:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5643b4537490 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5643b455c8b8 <col:34, col:50>
|   `-ReturnStmt 0x5643b455c8a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5643b455c890 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5643b455c870 <col:43> 'const char [4]' lvalue "1/-"
|-CXXMethodDecl 0x5643b455bf90 <line:46:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5643b4538c60 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5643b455be40 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5643b455beb8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5643b455c0e8 <line:47:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5643b4538eb0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5643b455c050 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5643b455c230 <line:48:3, col:34> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5643b45396c8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5643b455c1a0 <col:16, col:29> col:29 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5643b455c400 <line:50:3, col:32> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5643b4536238 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5643b455c2f0 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x5643b455c368 <col:23, col:31> col:31 p 'Packet *'
|-CXXConstructorDecl 0x5643b455c4d8 <line:21:7> col:7 implicit LookupIPRouteMP 'void (const LookupIPRouteMP &)' inline default_delete noexcept-unevaluated 0x5643b455c4d8
| `-ParmVarDecl 0x5643b455c5e8 <col:7> col:7 'const LookupIPRouteMP &'
`-CXXMethodDecl 0x5643b455c688 <col:7> col:7 implicit operator= 'LookupIPRouteMP &(const LookupIPRouteMP &)' inline default_delete noexcept-unevaluated 0x5643b455c688
  `-ParmVarDecl 0x5643b455c798 <col:7> col:7 'const LookupIPRouteMP &'

Layout: <CGRecordLayout
  LLVMType:%class.LookupIPRouteMP = type { %class.Element.base, [20 x i8], [1 x %"struct.LookupIPRouteMP::cache_entry"], %class.IPTable, [48 x i8] }
  NonVirtualBaseLLVMType:%class.LookupIPRouteMP.base = type { %class.Element.base, [20 x i8], [1 x %"struct.LookupIPRouteMP::cache_entry"], %class.IPTable }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4309930 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5643b4309a48 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5643b4309ae8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5643b4309b48 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5643b4309ba8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5643b4309c58 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4309f60 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b430a078 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5643b430a120 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5643b430a188 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5643b430a218 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5643b43102b0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5643b43106e8 <col:12>
|-CXXConstructorDecl 0x5643b43103b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5643b43104c8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5643b430a120 'data' 'const char *'
| | `-ImplicitCastExpr 0x5643b4312c70 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5643b4312c40 <col:12> 'const char *const' lvalue .data 0x5643b430a120
| |     `-DeclRefExpr 0x5643b4312c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43104c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5643b430a188 'length' 'int'
| | `-ImplicitCastExpr 0x5643b4312d00 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5643b4312cd0 <col:12> 'const int' lvalue .length 0x5643b430a188
| |     `-DeclRefExpr 0x5643b4312cb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43104c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5643b430a218 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5643b4312d90 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5643b4312d60 <col:12> 'String::memo_t *const' lvalue .memo 0x5643b430a218
| |     `-DeclRefExpr 0x5643b4312d40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43104c8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5643b4312de8 <col:12>
|-CXXConstructorDecl 0x5643b4310568 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5643b4310568
| `-ParmVarDecl 0x5643b4310678 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5643b4315bd0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5643b43215e8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5643b43216f8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5643b4321c10 <col:12>
|   |-BinaryOperator 0x5643b4321a28 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5643b43219e0 <col:12> 'const char *' lvalue ->data 0x5643b430a120
|   | | `-CXXThisExpr 0x5643b43219d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5643b4321a10 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5643b43219a0 <col:12> 'const char *const' lvalue .data 0x5643b430a120
|   |     `-DeclRefExpr 0x5643b4321980 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43216f8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5643b4321af0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5643b4321aa8 <col:12> 'int' lvalue ->length 0x5643b430a188
|   | | `-CXXThisExpr 0x5643b4321a98 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5643b4321ad8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5643b4321a68 <col:12> 'const int' lvalue .length 0x5643b430a188
|   |     `-DeclRefExpr 0x5643b4321a48 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43216f8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5643b4321bb8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5643b4321b70 <col:12> 'String::memo_t *' lvalue ->memo 0x5643b430a218
|   | | `-CXXThisExpr 0x5643b4321b60 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5643b4321ba0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5643b4321b30 <col:12> 'String::memo_t *const' lvalue .memo 0x5643b430a218
|   |     `-DeclRefExpr 0x5643b4321b10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43216f8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5643b4321c00 <col:12>
|     `-UnaryOperator 0x5643b4321be8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5643b4321bd8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5643b4321768 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5643b4321768
  `-ParmVarDecl 0x5643b4321878 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4300ea0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643b4300fb8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5643b4301048 <col:16, col:22> col:16 public
|-TypedefDecl 0x5643b4301088 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5643b3fd4dc0 'const char *'
|   `-QualType 0x5643b3fd4311 'const char' const
|     `-BuiltinType 0x5643b3fd4310 'char'
|-TypedefDecl 0x5643b4301110 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5643b43010e0 'String::const_iterator' sugar
|   |-Typedef 0x5643b4301088 'const_iterator'
|   `-PointerType 0x5643b3fd4dc0 'const char *'
|     `-QualType 0x5643b3fd4311 'const char' const
|       `-BuiltinType 0x5643b3fd4310 'char'
|-TypedefDecl 0x5643b4301280 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5643b43011f0 'int (String::*)() const'
|   |-RecordType 0x5643b4300f30 'String'
|   | `-CXXRecord 0x5643b4300ea0 'String'
|   `-ParenType 0x5643b4301190 'int () const' sugar
|     `-FunctionProtoType 0x5643b42d4d20 'int () const' const cdecl
|       `-BuiltinType 0x5643b3fd4370 'int'
|-TypedefDecl 0x5643b43012e8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5643b4129900 'int64_t' sugar
|   |-Typedef 0x5643b403d2d0 'int64_t'
|   `-TypedefType 0x5643b40164d0 '__int64_t' sugar
|     |-Typedef 0x5643b40160a8 '__int64_t'
|     `-BuiltinType 0x5643b3fd4390 'long'
|-TypedefDecl 0x5643b4301350 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5643b4129820 'uint64_t' sugar
|   |-Typedef 0x5643b403d470 'uint64_t'
|   `-TypedefType 0x5643b4016560 '__uint64_t' sugar
|     |-Typedef 0x5643b4016118 '__uint64_t'
|     `-BuiltinType 0x5643b3fd4430 'unsigned long'
|-TypedefDecl 0x5643b43013e0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5643b43013b0 'String::intmax_t' sugar
|   |-Typedef 0x5643b43012e8 'intmax_t'
|   `-TypedefType 0x5643b4129900 'int64_t' sugar
|     |-Typedef 0x5643b403d2d0 'int64_t'
|     `-TypedefType 0x5643b40164d0 '__int64_t' sugar
|       |-Typedef 0x5643b40160a8 '__int64_t'
|       `-BuiltinType 0x5643b3fd4390 'long'
|-TypedefDecl 0x5643b4301470 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5643b4301440 'String::uintmax_t' sugar
|   |-Typedef 0x5643b4301350 'uintmax_t'
|   `-TypedefType 0x5643b4129820 'uint64_t' sugar
|     |-Typedef 0x5643b403d470 'uint64_t'
|     `-TypedefType 0x5643b4016560 '__uint64_t' sugar
|       |-Typedef 0x5643b4016118 '__uint64_t'
|       `-BuiltinType 0x5643b3fd4430 'unsigned long'
|-CXXConstructorDecl 0x5643b4301530 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5643b43016d8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5643b4301618 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5643b4301888 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5643b43017c8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5643b43019e0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5643b4301950 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5643b4301bf8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5643b4301aa8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5643b4301b28 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5643b4301e18 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5643b4301cc8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5643b4301d48 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5643b4302038 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5643b4301ee8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5643b4301f68 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5643b4302258 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5643b4302108 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5643b4302188 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5643b43023e8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5643b4302320 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5643b4302568 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5643b43024a8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5643b43026f8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5643b4302630 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5643b4302850 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5643b43027c0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5643b43029a8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5643b4302918 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5643b4302b00 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5643b4302a70 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5643b4302c88 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5643b4302bc8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5643b4302e18 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5643b4302d50 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5643b4302fa8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5643b4302ee0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5643b4303138 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5643b4303070 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5643b4303230 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5643b4303358 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5643b43034d8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5643b4303410 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5643b4303628 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5643b4303598 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5643b43036e0 <col:63> "" ""
|-CXXMethodDecl 0x5643b4303828 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5643b4303768 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5643b4303a38 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5643b43038e8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5643b4303968 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5643b4303c58 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5643b4303b00 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5643b4303b80 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5643b4303f38 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5643b4303d18 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5643b4303d98 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5643b430fd80 <col:55> 'int' 10
| `-ParmVarDecl 0x5643b4303e10 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5643b430fda0 <col:76> 'bool' true
|-CXXMethodDecl 0x5643b4304218 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5643b4304000 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5643b4304080 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5643b430fdb0 <col:56> 'int' 10
| `-ParmVarDecl 0x5643b43040f8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5643b430fdd0 <col:77> 'bool' true
|-CXXMethodDecl 0x5643b4304320 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5643b43043e8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5643b43044b0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5643b4304550 <col:20>
| `-OptimizeNoneAttr 0x5643b43045a8 <col:30>
|-CXXConversionDecl 0x5643b4304698 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5643b4304768 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5643b4304828 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5643b4304918 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5643b43049d8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5643b4304b58 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5643b4304a90 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5643b4304ca8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5643b4304c18 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5643b4304d98 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5643b4304e58 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5643b43050a8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5643b4304f10 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5643b4304f90 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5643b4305308 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5643b4305170 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5643b43051f0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5643b43053d8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b43055e8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5643b4305490 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5643b4305510 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5643b4305808 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5643b43056b0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5643b4305730 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5643b4305998 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5643b43058d0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5643b4305a88 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5643b4305bf8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5643b4305b38 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5643b4305e08 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5643b4305cb8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5643b4305d38 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5643b4306020 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5643b4305ec8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5643b4305f40 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5643b43061b0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5643b43060e0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5643b43063d0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5643b4306270 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5643b43062f0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5643b4306520 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5643b4306490 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5643b43066f8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5643b43065e0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5643b4306660 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5643b4306848 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5643b43067b8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5643b4306a60 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5643b4306900 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5643b4306980 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5643b430fde0 <col:39> 'int' 0
|-CXXMethodDecl 0x5643b4306c80 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5643b4306b20 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5643b4306ba0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5643b430fe00 <col:48> 'int' 0
|-CXXMethodDecl 0x5643b4306e60 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5643b4306d40 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5643b4306dc0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5643b430fe20 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5643b4306f30 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5643b4306ff0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5643b43070b0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5643b4307170 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5643b4307230 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5643b43073d8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5643b43072e0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5643b4307558 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5643b4307490 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5643b4307730 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5643b4307618 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5643b43078a8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5643b43077e8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5643b43079f0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5643b4307960 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5643b4307b40 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5643b4307ab0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5643b4307d18 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5643b4307c00 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5643b4307c80 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5643b4307ef8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5643b4307de0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5643b4307e60 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5643b4308048 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5643b4307fb8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5643b4308258 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5643b4308108 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5643b4308188 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5643b43083b8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5643b4308320 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5643b4308510 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5643b4308478 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5643b43085b8 <col:57> "" ""
|-CXXMethodDecl 0x5643b43086c8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5643b4308638 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5643b4308818 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5643b4308788 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5643b4308998 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5643b43088d0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5643b4308a60 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5643b4308b20 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5643b4308be0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5643b4308c80 <col:49> "" ""
|-CXXMethodDecl 0x5643b4308d10 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5643b4308dd0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5643b4308ec0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5643b4308f88 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5643b4309048 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5643b4309108 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5643b4309200 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5643b43092c8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5643b4309390 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5643b4309568 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5643b4309448 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5643b43094c8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5643b4309790 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5643b4309630 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5643b43096b0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5643b43098a0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5643b4309908 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5643b4309930 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5643b4309a48 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5643b4309ae8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5643b4309b48 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5643b4309ba8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5643b4309c58 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5643b4309cc0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5643b4309ef8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5643b4309f48 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b4309ed8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5643b4309de8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5643b4309d90 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5643b4309dd0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5643b4309db0 <col:32> 'int' 8
|-CXXRecordDecl 0x5643b4309f60 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5643b430a078 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5643b430a120 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5643b430a188 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5643b430a218 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5643b43102b0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5643b43106e8 <col:12>
| |-CXXConstructorDecl 0x5643b43103b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5643b43104c8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5643b430a120 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5643b4312c70 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5643b4312c40 <col:12> 'const char *const' lvalue .data 0x5643b430a120
| | |     `-DeclRefExpr 0x5643b4312c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43104c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5643b430a188 'length' 'int'
| | | `-ImplicitCastExpr 0x5643b4312d00 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5643b4312cd0 <col:12> 'const int' lvalue .length 0x5643b430a188
| | |     `-DeclRefExpr 0x5643b4312cb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43104c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5643b430a218 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5643b4312d90 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5643b4312d60 <col:12> 'String::memo_t *const' lvalue .memo 0x5643b430a218
| | |     `-DeclRefExpr 0x5643b4312d40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43104c8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5643b4312de8 <col:12>
| |-CXXConstructorDecl 0x5643b4310568 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5643b4310568
| | `-ParmVarDecl 0x5643b4310678 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5643b4315bd0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5643b43215e8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5643b43216f8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5643b4321c10 <col:12>
| |   |-BinaryOperator 0x5643b4321a28 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5643b43219e0 <col:12> 'const char *' lvalue ->data 0x5643b430a120
| |   | | `-CXXThisExpr 0x5643b43219d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5643b4321a10 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5643b43219a0 <col:12> 'const char *const' lvalue .data 0x5643b430a120
| |   |     `-DeclRefExpr 0x5643b4321980 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43216f8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5643b4321af0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5643b4321aa8 <col:12> 'int' lvalue ->length 0x5643b430a188
| |   | | `-CXXThisExpr 0x5643b4321a98 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5643b4321ad8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5643b4321a68 <col:12> 'const int' lvalue .length 0x5643b430a188
| |   |     `-DeclRefExpr 0x5643b4321a48 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43216f8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5643b4321bb8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5643b4321b70 <col:12> 'String::memo_t *' lvalue ->memo 0x5643b430a218
| |   | | `-CXXThisExpr 0x5643b4321b60 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5643b4321ba0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5643b4321b30 <col:12> 'String::memo_t *const' lvalue .memo 0x5643b430a218
| |   |     `-DeclRefExpr 0x5643b4321b10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5643b43216f8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5643b4321c00 <col:12>
| |     `-UnaryOperator 0x5643b4321be8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5643b4321bd8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5643b4321768 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5643b4321768
|   `-ParmVarDecl 0x5643b4321878 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5643b430a290 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5643b430a4d8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5643b430a2f8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5643b430a378 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5643b430a3f0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5643b4310270 <col:79, line:261:5>
|   |-BinaryOperator 0x5643b430fee8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5643b430fe80 <col:2, col:5> 'const char *' lvalue .data 0x5643b430a120
|   | | `-MemberExpr 0x5643b430fe50 <col:2> 'String::rep_t' lvalue ->_r 0x5643b430a290
|   | |   `-CXXThisExpr 0x5643b430fe40 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5643b430fed0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5643b430feb0 <col:12> 'const char *' lvalue ParmVar 0x5643b430a2f8 'data' 'const char *'
|   |-BinaryOperator 0x5643b430ffb0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5643b430ff48 <col:2, col:5> 'int' lvalue .length 0x5643b430a188
|   | | `-MemberExpr 0x5643b430ff18 <col:2> 'String::rep_t' lvalue ->_r 0x5643b430a290
|   | |   `-CXXThisExpr 0x5643b430ff08 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5643b430ff98 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5643b430ff78 <col:14> 'int' lvalue ParmVar 0x5643b430a378 'length' 'int'
|   `-IfStmt 0x5643b4310258 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5643b43100d0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5643b43100b8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5643b4310098 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5643b4310078 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5643b4310010 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5643b430a218
|     |       | `-MemberExpr 0x5643b430ffe0 <col:7> 'String::rep_t' lvalue ->_r 0x5643b430a290
|     |       |   `-CXXThisExpr 0x5643b430ffd0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5643b4310060 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5643b4310040 <col:17> 'String::memo_t *' lvalue ParmVar 0x5643b430a3f0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5643b4310230 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5643b4310218 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5643b4310120 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5643b42f8f08 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5643b4310188 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5643b4309ae8
|         `-ImplicitCastExpr 0x5643b4310170 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5643b4310150 <col:27> 'String::memo_t *' lvalue ParmVar 0x5643b430a3f0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5643b430a788 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5643b430a5a8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5643b430a628 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5643b430a6a0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5643b430a290 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5643b43106f8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5643b4310888 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5643b43107f0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5643b4310760 <col:2> '<bound member function type>' ->assign_memo 0x5643b430a4d8
|     | `-ImplicitCastExpr 0x5643b4310828 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5643b4310750 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5643b4310840 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5643b4310790 <col:14> 'const char *' lvalue ParmVar 0x5643b430a5a8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5643b4310858 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5643b43107b0 <col:20> 'int' lvalue ParmVar 0x5643b430a628 'length' 'int'
|     `-ImplicitCastExpr 0x5643b4310870 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5643b43107d0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5643b430a6a0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5643b430a918 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5643b430a858 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5643b4310ae0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5643b4310a60 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5643b43108b0 <col:2> '<bound member function type>' ->assign_memo 0x5643b430a4d8
|     | `-CXXThisExpr 0x5643b43108a0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5643b4310a98 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5643b4310930 <col:14, col:19> 'const char *' lvalue .data 0x5643b430a120
|     |   `-MemberExpr 0x5643b4310900 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5643b430a290
|     |     `-DeclRefExpr 0x5643b43108e0 <col:14> 'const String' lvalue ParmVar 0x5643b430a858 'x' 'const String &'
|     |-ImplicitCastExpr 0x5643b4310ab0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5643b43109b0 <col:25, col:30> 'int' lvalue .length 0x5643b430a188
|     |   `-MemberExpr 0x5643b4310980 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5643b430a290
|     |     `-DeclRefExpr 0x5643b4310960 <col:25> 'const String' lvalue ParmVar 0x5643b430a858 'x' 'const String &'
|     `-ImplicitCastExpr 0x5643b4310ac8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5643b4310a30 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5643b430a218
|         `-MemberExpr 0x5643b4310a00 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5643b430a290
|           `-DeclRefExpr 0x5643b43109e0 <col:38> 'const String' lvalue ParmVar 0x5643b430a858 'x' 'const String &'
|-CXXMethodDecl 0x5643b430a9e0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5643b43114a0 <col:31, line:278:5>
|   `-IfStmt 0x5643b4311488 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5643b4310b80 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5643b4310b68 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5643b4310b38 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5643b430a218
|     |     `-MemberExpr 0x5643b4310b08 <col:6> 'String::rep_t' lvalue ->_r 0x5643b430a290
|     |       `-CXXThisExpr 0x5643b4310af8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5643b4311460 <col:15, line:277:2>
|       |-ParenExpr 0x5643b4311030 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5643b4311000 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5643b4310c90 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5643b4310c78 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5643b4310c60 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5643b4310c20 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5643b4309ae8
|       |   |       `-ImplicitCastExpr 0x5643b4310c08 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5643b4310bd8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5643b430a218
|       |   |           `-MemberExpr 0x5643b4310ba8 <col:27> 'String::rep_t' lvalue ->_r 0x5643b430a290
|       |   |             `-CXXThisExpr 0x5643b4310b98 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5643b4310cf0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5643b4310cd0 <col:54> 'int' 0
|       |   `-CallExpr 0x5643b4310f60 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5643b4310f48 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5643b4310ec8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5643b4310fa0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5643b4310dd8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5643b4310fb8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5643b4310e08 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5643b4310fd0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5643b4310e40 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5643b4310fe8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5643b4310eb0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5643b4310e98 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5643b4310e60 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5643b4311380 <line:274:6, line:275:22>
|       | |-CallExpr 0x5643b4311240 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5643b4311228 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5643b43111a0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5643b42fa350 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5643b4311170 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5643b4309ae8
|       | |   `-ImplicitCastExpr 0x5643b4311158 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5643b4311128 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5643b430a218
|       | |       `-MemberExpr 0x5643b43110f8 <col:40> 'String::rep_t' lvalue ->_r 0x5643b430a290
|       | |         `-CXXThisExpr 0x5643b43110e8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5643b4311340 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5643b4311328 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5643b4311268 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5643b430f1c0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5643b4311368 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5643b43112c8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5643b430a218
|       |       `-MemberExpr 0x5643b4311298 <col:15> 'String::rep_t' lvalue ->_r 0x5643b430a290
|       |         `-CXXThisExpr 0x5643b4311288 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5643b4311440 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5643b43113d8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5643b430a218
|         | `-MemberExpr 0x5643b43113a8 <col:6> 'String::rep_t' lvalue ->_r 0x5643b430a290
|         |   `-CXXThisExpr 0x5643b4311398 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5643b4311428 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5643b4311408 <col:16> 'int' 0
|-CXXMethodDecl 0x5643b430ac78 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5643b430aa98 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5643b430ab18 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5643b430ab90 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5643b430ad50 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5643b430afa0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5643b430ae08 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5643b430ae88 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5643b430af00 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5643b430b188 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5643b430b070 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5643b430b0f0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5643b430b288 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5643b4311578 <col:41, line:286:5>
|   `-ReturnStmt 0x5643b4311568 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5643b4311538 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5643b4311500 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5643b43114e8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5643b43114c8 <col:46> 'int' 1
|-CXXMethodDecl 0x5643b430b528 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5643b430b340 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5643b430b3c0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5643b430b440 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5643b430f1c0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5643b430b5f0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5643b430f290 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5643b430f460 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5643b430f348 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5643b430f3c8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5643b430f520 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5643b430f5e8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5643b430f6e8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5643b430f760 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5643b430f7d8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5643b430f840 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5643b430f940 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5643b430f990 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b430f920 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5643b430f900 <col:22> 'int' 14
|-CXXMethodDecl 0x5643b430fba8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5643b430f9c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5643b430fa40 <col:38> col:41 'int'
| `-ParmVarDecl 0x5643b430fac0 <col:43> col:46 'int'
|-FriendDecl 0x5643b430fcb0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5643b430fd40 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643b43ce7d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5643b43ce9a8 prev 0x5643b43ce7d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5643b43cea38 <col:46, col:52> col:46 public
|-TypedefDecl 0x5643b43cea60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5643b3fd4370 'int'
|-TypedefDecl 0x5643b43d03c0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5643b43d0370 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5643b43d0350 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5643b43cec78 'type'
|     `-SubstTemplateTypeParmType 0x5643b43cec40 'String' sugar
|       |-TemplateTypeParmType 0x5643b42c4740 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42c46f0 'T'
|       `-RecordType 0x5643b4300f30 'String'
|         `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d0478 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5643b43d0440 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5643b43d0420 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5643b43d03c0 'type'
|     `-ElaboratedType 0x5643b43d0370 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5643b43d0350 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5643b43cec78 'type'
|         `-SubstTemplateTypeParmType 0x5643b43cec40 'String' sugar
|           |-TemplateTypeParmType 0x5643b42c4740 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5643b42c46f0 'T'
|           `-RecordType 0x5643b4300f30 'String'
|             `-CXXRecord 0x5643b4300ea0 'String'
|-CXXMethodDecl 0x5643b43d05f8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5643b43d0508 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5643b43d06e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5643b43d07c8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5643b43d0a98 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5643b43d09a0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5643b43d0cd8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643b43d0b50 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643b43d0bc8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643b43d0ea8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643b43d0d98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643b43d0e10 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643b43d1008 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5643b43d10d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5643b43d1328 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643b43d1198 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5643b43d1210 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643b43d1588 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5643b43d13f8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5643b43d1470 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643b43d1748 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5643b43d1658 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643b43d1908 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5643b43d1810 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643b43d19c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643b43d1a70 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5643b43d1ca8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643b43d1b20 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643b43d1b98 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643b43d1f48 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5643b43d1e50 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5643b43d2010 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5643b43d2060 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5643b43d20b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643b45388d0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5643b43cd478 prev 0x5643b45388d0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5643b43ce740 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5643b43ce6f0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5643b43ce6d0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5643b43ce580 'type'
|     `-SubstTemplateTypeParmType 0x5643b43ce410 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5643b429a4f0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5643b429a498 'F'
|       `-RecordType 0x5643b43ce070 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5643b43cdf90 'typed_array_memory'
|-FieldDecl 0x5643b43d2100 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5643b43d2150 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5643b43d2188 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|   |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643b42d1a08 'T'
|   `-RecordType 0x5643b4300f30 'String'
|     `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d2218 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5643b43d21e0 'String &'
|   `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|     |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643b42d1a08 'T'
|     `-RecordType 0x5643b4300f30 'String'
|       `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d22a8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5643b43d2270 'const String &'
|   `-QualType 0x5643b43cd511 'const String' const
|     `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b4300f30 'String'
|         `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d2338 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5643b43d2300 'String *'
|   `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|     |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643b42d1a08 'T'
|     `-RecordType 0x5643b4300f30 'String'
|       `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d23c8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5643b43d2390 'const String *'
|   `-QualType 0x5643b43cd511 'const String' const
|     `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b4300f30 'String'
|         `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d3020 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5643b43d2fd0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5643b43d2fb0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5643b43d2ee8 'type'
|     `-LValueReferenceType 0x5643b43d2eb0 'const String &'
|       `-QualType 0x5643b43d2c51 'const String' const
|         `-SubstTemplateTypeParmType 0x5643b43d2c50 'String' sugar
|           |-TemplateTypeParmType 0x5643b42a4440 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5643b42a43e8 'T'
|           `-RecordType 0x5643b4300f30 'String'
|             `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d3088 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5643b43d2270 'const String &'
|   `-QualType 0x5643b43cd511 'const String' const
|     `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b4300f30 'String'
|         `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d30e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5643b3fd4370 'int'
|-TypedefDecl 0x5643b43d3148 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5643b43d2300 'String *'
|   `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|     |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643b42d1a08 'T'
|     `-RecordType 0x5643b4300f30 'String'
|       `-CXXRecord 0x5643b4300ea0 'String'
|-TypedefDecl 0x5643b43d31b0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5643b43d2390 'const String *'
|   `-QualType 0x5643b43cd511 'const String' const
|     `-SubstTemplateTypeParmType 0x5643b43cd510 'String' sugar
|       |-TemplateTypeParmType 0x5643b42d1a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643b42d1a08 'T'
|       `-RecordType 0x5643b4300f30 'String'
|         `-CXXRecord 0x5643b4300ea0 'String'
|-EnumDecl 0x5643b43d3208 <line:134:5> col:5
| `-EnumConstantDecl 0x5643b43d3300 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5643b43d32e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5643b42d30e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5643b42d30c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5643b42d30a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5643b43d3388 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5643b43d3618 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b43d3440 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643b43d34e0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5643b43d38a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5643b43d3790 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5643b43d3b68 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5643b43d3a50 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5643b43d3e80 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5643b43d3d60 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5643b43d4190 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5643b43d4070 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5643b4590460 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b43d42c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643b4590320 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643b4590588 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5643b4590638 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b4590690 <col:30> Inherited
|-CXXMethodDecl 0x5643b45906d8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5643b4590788 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b45907e0 <col:30> Inherited
|-CXXMethodDecl 0x5643b45908a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643b4590958 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b45909b0 <col:30> Inherited
|-CXXMethodDecl 0x5643b45909f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643b4590aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b4590b00 <col:30> Inherited
|-CXXMethodDecl 0x5643b4590b48 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643b4590bf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b4590c50 <col:30> Inherited
|-CXXMethodDecl 0x5643b4590c98 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643b4590d48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643b4590da0 <col:30> Inherited
|-CXXMethodDecl 0x5643b4590dc8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643b4590e78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643b4590f28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5643b45910e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b4590fd8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643b4591050 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643b4591238 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5643b45911a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b45913e8 <line:163:5, col:65> col:43 used operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5643b45912f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643b45914a0 <col:20>
| `-OptimizeNoneAttr 0x5643b45914f8 <col:30>
|-CXXMethodDecl 0x5643b4591618 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5643b4591520 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643b45916d0 <col:20>
| `-OptimizeNoneAttr 0x5643b4591728 <col:30>
|-CXXMethodDecl 0x5643b45917e0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643b4591750 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b4591928 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643b4591898 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b4591a58 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5643b4591b58 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5643b4591c28 <line:169:5, col:20> col:15 used back 'String &()' inline
|-CXXMethodDecl 0x5643b4591cf8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5643b4591e38 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643b4591da8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b4591f80 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643b4591ef0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643b45920c8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5643b4592038 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643b4592180 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5643b4592280 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5643b45921f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643b4592338 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5643b45923f8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5643b45924f8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5643b4592678 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5643b45925b8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5643b4592e08 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5643b4592730 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5643b4592d68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5643b4592c68 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5643b4592ee8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643b4593038 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5643b4592fa8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643b45930f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5643b4593338 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643b45931b0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5643b4593228 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643b45934c8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5643b4593408 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5643b45936d8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5643b4593590 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5643b4593608 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5643b4593798 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5643b45939f8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5643b4593900 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5643b4593ac8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5643b46296b0 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b46170c8 prev 0x5643b44bb188 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643b46171c0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5643b4617250 <col:22, col:28> col:22 public
|-EnumDecl 0x5643b4617278 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5643b4617398 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b4617378 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5643b4617360 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5643b4617340 <col:14> 'int' 999
| |-EnumConstantDecl 0x5643b4617440 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b4617420 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5643b4617408 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5643b46173e8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5643b46174d0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b46174b0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5643b4617490 <col:17> 'int' 0
| |-EnumConstantDecl 0x5643b4617560 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b4617540 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5643b4617520 <col:13> 'int' 1
| |-EnumConstantDecl 0x5643b46175f0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b46175d0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5643b46175b0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5643b4617680 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b4617660 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5643b4617640 <col:13> 'int' 3
| |-EnumConstantDecl 0x5643b4617710 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b46176f0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5643b46176d0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5643b46177a0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b4617780 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5643b4617760 <col:14> 'int' 5
| |-EnumConstantDecl 0x5643b4617830 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5643b4617810 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5643b46177f0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5643b46178c0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5643b46178a0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5643b4617880 <col:13> 'int' 7
|-VarDecl 0x5643b4617930 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5643b46179b8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5643b4617a40 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5643b4617ac8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5643b4617b50 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5643b4617bd8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5643b4617c60 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5643b4617ce8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5643b4617d70 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5643b4617df8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5643b4617ef0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5643b4617ff0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5643b461d2d8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5643b461da68 <line:128:13> 'int' 0
| `-CompoundStmt 0x5643b461dad8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5643b46180e0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5643b461dae8 <col:29, line:132:5>
|-CXXMethodDecl 0x5643b4618298 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5643b46181d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643b4618360 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5643b4618448 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5643b461db40 <col:44, line:161:5>
|   `-ReturnStmt 0x5643b461db30 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5643b461db18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5643b461daf8 <col:9> 'ErrorHandler *' lvalue Var 0x5643b461d338 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5643b4618588 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5643b46184f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643b4618650 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5643b461dba0 <col:43, line:173:5>
|   `-ReturnStmt 0x5643b461db90 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5643b461db78 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5643b461db58 <col:9> 'ErrorHandler *' lvalue Var 0x5643b461d3b0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5643b4618708 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5643b4618788 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5643b4618898 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5643b4618808 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5643b46189e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5643b4618958 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5643b4618b40 <line:193:5, col:37> col:9 used warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5643b4618aa8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5643b4618c98 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5643b4618c00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5643b4618df0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5643b4618d58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5643b4619000 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5643b4618ea8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5643b4618f28 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5643b46191d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5643b46190c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5643b4619140 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5643b46193f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5643b4619298 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5643b4619318 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5643b46195d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5643b46194b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5643b4619538 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5643b46197b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5643b4619698 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5643b4619718 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5643b4619940 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5643b4619878 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5643b4619b10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5643b46199f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5643b4619a70 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5643b461ddf8 <col:57, line:234:5>
|   `-ReturnStmt 0x5643b461dde8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5643b461ddd0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5643b461dd78 <col:9, col:41> 'int'
|         |-MemberExpr 0x5643b461dd48 <col:9> '<bound member function type>' ->xmessage 0x5643b4619940
|         | `-CXXThisExpr 0x5643b461dd38 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5643b461ddb8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5643b461dda0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5643b461dd18 <col:18, col:40> 'String' (CXXTemporary 0x5643b461dd18)
|               `-CallExpr 0x5643b461dce0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5643b461dcc8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5643b461dc40 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5643b461bb08 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5643b461dc60 <col:31> 'const String' lvalue ParmVar 0x5643b4619a70 'str' 'const String &'
|                 `-DeclRefExpr 0x5643b461dc80 <col:36> 'const String' lvalue ParmVar 0x5643b46199f8 'anno' 'const String &'
|-CXXMethodDecl 0x5643b4619df0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5643b4619bd0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5643b4619c50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5643b4619cc8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5643b461e088 <col:68, line:243:5>
|   `-ReturnStmt 0x5643b461e078 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5643b461e060 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5643b461e000 <col:9, col:41> 'int'
|         |-MemberExpr 0x5643b461dfd0 <col:9> '<bound member function type>' ->xmessage 0x5643b4619b10
|         | `-CXXThisExpr 0x5643b461dfc0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5643b461de98 <col:18> 'const String' lvalue ParmVar 0x5643b4619bd0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5643b461e048 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5643b461e030 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5643b461dfa0 <col:24, col:40> 'String' (CXXTemporary 0x5643b461dfa0)
|               `-CXXMemberCallExpr 0x5643b461df38 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5643b461dec8 <col:24> '<bound member function type>' ->vformat 0x5643b461afd0
|                 | `-CXXThisExpr 0x5643b461deb8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5643b461df68 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5643b461def8 <col:32> 'const char *' lvalue ParmVar 0x5643b4619c50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5643b461df80 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5643b461df18 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5643b4619cc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5643b461a090 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5643b4619eb8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5643b4619f30 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5643b4619fa8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5643b461e3c8 <col:23, line:254:5>
|   `-ReturnStmt 0x5643b461e3b8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5643b461e3a0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5643b461e340 <col:9, col:71> 'int'
|         |-MemberExpr 0x5643b461e310 <col:9> '<bound member function type>' ->xmessage 0x5643b4619b10
|         | `-CXXThisExpr 0x5643b461e300 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5643b461e388 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5643b461e370 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5643b461e2c0 <col:18, col:65> 'String' (CXXTemporary 0x5643b461e2c0)
|         |     `-CallExpr 0x5643b461e258 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5643b461e240 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5643b461e128 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5643b461bb08 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5643b461e148 <col:31> 'const String' lvalue ParmVar 0x5643b4619f30 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5643b461e2a0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5643b461e288 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5643b461e220 <col:37, col:64> 'String' (CXXTemporary 0x5643b461e220)
|         |             `-CallExpr 0x5643b461e1f0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5643b461e1d8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5643b461e168 <col:37> 'String (const String &)' lvalue CXXMethod 0x5643b461c158 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5643b461e188 <col:56> 'const String' lvalue ParmVar 0x5643b4619eb8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5643b461e2e0 <col:68> 'const String' lvalue ParmVar 0x5643b4619fa8 'str' 'const String &'
|-CXXMethodDecl 0x5643b461a410 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5643b461a158 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5643b461a1d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5643b461a250 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5643b461a2c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5643b461e680 <col:34, line:267:5>
|   `-ReturnStmt 0x5643b461e670 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5643b461e658 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5643b461e5f0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5643b461e5c0 <col:9> '<bound member function type>' ->xmessage 0x5643b461a090
|         | `-CXXThisExpr 0x5643b461e5b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5643b461e468 <col:18> 'const String' lvalue ParmVar 0x5643b461a158 'landmark' 'const String &'
|         |-DeclRefExpr 0x5643b461e488 <col:28> 'const String' lvalue ParmVar 0x5643b461a1d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5643b461e640 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5643b461e628 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5643b461e590 <col:34, col:50> 'String' (CXXTemporary 0x5643b461e590)
|               `-CXXMemberCallExpr 0x5643b461e528 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5643b461e4b8 <col:34> '<bound member function type>' ->vformat 0x5643b461afd0
|                 | `-CXXThisExpr 0x5643b461e4a8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5643b461e558 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5643b461e4e8 <col:42> 'const char *' lvalue ParmVar 0x5643b461a250 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5643b461e570 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5643b461e508 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5643b461a2c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5643b461a520 <line:286:5, line:288:5> line:286:9 used nerrors 'int () const'
| `-CompoundStmt 0x5643b461e700 <col:25, line:288:5>
|   `-ReturnStmt 0x5643b461e6f0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5643b461e6d8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5643b461e6a8 <col:9> 'const int' lvalue ->_nerrors 0x5643b461d2d8
|         `-CXXThisExpr 0x5643b461e698 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5643b461a730 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5643b461a5d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5643b461a658 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5643b461aa18 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5643b461a7f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5643b461a878 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5643b461a8f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5643b461abb0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5643b461aae8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5643b461adf8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5643b461ac70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5643b461ace8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5643b461e960 <col:58, line:357:5>
|   `-ReturnStmt 0x5643b461e950 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5643b461e938 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5643b461e908 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5643b461e8f0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5643b461e8d0 <col:9, col:29> 'String' (CXXTemporary 0x5643b461e8d0)
|             `-CallExpr 0x5643b461e860 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5643b461e848 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5643b461e7c8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5643b461aa18 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5643b461e768 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5643b461e898 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5643b461e788 <col:21> 'const char *' lvalue ParmVar 0x5643b461ac70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5643b461e8b0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5643b461e7a8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5643b461ace8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5643b461afd0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5643b461aec0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5643b461af38 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5643b461b128 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5643b461b098 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5643b461b270 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5643b461b1e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5643b461b510 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5643b461b328 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5643b461b3a8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5643b461b420 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5643b461b670 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5643b461b5e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5643b461ea78 <col:37, line:441:5>
|   `-IfStmt 0x5643b461ea60 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5643b461e9e8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5643b461e9b8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5643b461e978 <col:6> 'int' lvalue ParmVar 0x5643b461b5e0 'level' 'int'
|     | `-ImplicitCastExpr 0x5643b461e9d0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5643b461e998 <col:15> 'ErrorHandler::Level' EnumConstant 0x5643b4617680 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5643b461ea48 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5643b461ea18 <col:8> 'int' lvalue ->_nerrors 0x5643b461d2d8
|         `-CXXThisExpr 0x5643b461ea08 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5643b461b738 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5643b461eb10 <col:26, line:448:5>
|   `-BinaryOperator 0x5643b461eaf0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5643b461eaa0 <col:2> 'int' lvalue ->_nerrors 0x5643b461d2d8
|     | `-CXXThisExpr 0x5643b461ea90 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5643b461ead0 <col:13> 'int' 0
|-CXXMethodDecl 0x5643b461b900 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5643b461b7f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5643b461b868 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5643b461bb08 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5643b461b9c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5643b461ba38 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5643b461bdb8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5643b461bbc8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5643b461bc48 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5643b461bcc8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5643b461be70 <col:59> 0 0
|-CXXMethodDecl 0x5643b461c008 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5643b461bee8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5643b461bf68 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5643b461f180 <col:70, line:534:5>
|   |-DeclStmt 0x5643b461ec80 <line:528:2, col:20>
|   | |-VarDecl 0x5643b461eb38 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5643b461eba0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5643b461ebd8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5643b461ec40 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5643b461ed50 <line:529:2, col:23>
|   | `-VarDecl 0x5643b461ecb0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5643b461ed38 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5643b461ed18 <col:18> 'const char *' lvalue ParmVar 0x5643b461bee8 'begin' 'const char *'
|   |-DoStmt 0x5643b461f118 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5643b461f048 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5643b461f030 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5643b461f010 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5643b461ed68 <col:6> 'const char *' lvalue Var 0x5643b461ecb0 'x' 'const char *'
|   | |     `-CallExpr 0x5643b461ef60 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5643b461ef48 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5643b461ef00 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5643b461d7b0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5643b461efc8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5643b461efb0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5643b461ee20 <col:20, col:27> 'String' (CXXTemporary 0x5643b461ee20)
|   | |       |     `-CXXTemporaryObjectExpr 0x5643b461ede8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5643b461efe0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5643b461ee40 <col:30> 'const char *' lvalue Var 0x5643b461ecb0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5643b461eff8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5643b461ee60 <col:33> 'const char *' lvalue ParmVar 0x5643b461bf68 'end' 'const char *'
|   | |       |-UnaryOperator 0x5643b461eea0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5643b461ee80 <col:39> 'String' lvalue Var 0x5643b461eb38 'name' 'String'
|   | |       |-UnaryOperator 0x5643b461eed8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5643b461eeb8 <col:46> 'String' lvalue Var 0x5643b461ebd8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5643b461eef0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5643b461f100 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5643b461f0e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5643b461f0c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5643b461f098 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5643b4304698
|   |         `-ImplicitCastExpr 0x5643b461f080 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5643b461f060 <col:11> 'String' lvalue Var 0x5643b461eb38 'name' 'String'
|   `-ReturnStmt 0x5643b461f170 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5643b461f158 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5643b461f138 <col:9> 'const char *' lvalue Var 0x5643b461ecb0 'x' 'const char *'
|-CXXMethodDecl 0x5643b461c158 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5643b461c0c8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5643b461f788 <col:55, line:550:5>
|   `-IfStmt 0x5643b461f760 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5643b461f3c0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5643b461f3a8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5643b461f390 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5643b461f370 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5643b461f340 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5643b4304698
|     | |       `-DeclRefExpr 0x5643b461f1e0 <col:6> 'const String' lvalue ParmVar 0x5643b461c0c8 'x' 'const String &'
|     | `-BinaryOperator 0x5643b461f320 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5643b461f2f0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5643b461f2a0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5643b461f288 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5643b461f240 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5643b431ded0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5643b461f200 <col:11> 'const String' lvalue ParmVar 0x5643b461c0c8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5643b461f220 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5643b461f308 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5643b461f2d8 <col:19> 'char' 123
|     |-ReturnStmt 0x5643b461f430 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5643b461f400 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5643b461f3e0 <col:13> 'const String' lvalue ParmVar 0x5643b461c0c8 'x' 'const String &'
|     `-IfStmt 0x5643b461f738 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5643b461f4c8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5643b461f4b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5643b461f490 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5643b461f460 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5643b4304698
|       |       `-DeclRefExpr 0x5643b461f440 <col:11> 'const String' lvalue ParmVar 0x5643b461c0c8 'x' 'const String &'
|       |-ReturnStmt 0x5643b461f650 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5643b461f638 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5643b461f608 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5643b461f5f0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5643b461f5d0 <col:13, col:29> 'String' (CXXTemporary 0x5643b461f5d0)
|       |         `-CallExpr 0x5643b461f580 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5643b461f568 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5643b461f4e0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5643b461b900 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5643b461f5b0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5643b461f500 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5643b461f520 <col:28> 'const String' lvalue ParmVar 0x5643b461c0c8 'x' 'const String &'
|       `-ReturnStmt 0x5643b461f728 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5643b461f710 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5643b461f6e0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5643b461f6c8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5643b461f6a8 <col:13, col:20> 'String' (CXXTemporary 0x5643b461f6a8)
|                 `-CXXTemporaryObjectExpr 0x5643b461f670 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5643b461c320 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5643b461c210 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5643b461c288 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5643b461da58 <col:71> 'bool' false
|-CXXRecordDecl 0x5643b461c3d0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5643b461c6c8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5643b461c660 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5643b461c600 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5643b461c5c0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5643b4300f30 'String'
|       | `-CXXRecord 0x5643b4300ea0 'String'
|       |-BuiltinType 0x5643b3fd4370 'int'
|       `-DecayedType 0x5643b44bc1d0 '__va_list_tag *' sugar
|         |-TypedefType 0x5643b44bc1a0 'va_list' sugar
|         | |-Typedef 0x5643b41f1fe0 'va_list'
|         | `-TypedefType 0x5643b41f1f90 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5643b4129bb8 '__gnuc_va_list'
|         |   `-TypedefType 0x5643b4129b20 '__builtin_va_list' sugar
|         |     |-Typedef 0x5643b4015bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5643b4015b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5643b3fd50c0 '__va_list_tag'
|         |         `-CXXRecord 0x5643b3fd5028 '__va_list_tag'
|         `-PointerType 0x5643b41f7880 '__va_list_tag *'
|           `-RecordType 0x5643b3fd50c0 '__va_list_tag'
|             `-CXXRecord 0x5643b3fd5028 '__va_list_tag'
|-EnumDecl 0x5643b461c720 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5643b461c820 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461cd80 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461c800 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5643b461c7e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5643b461c8b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461cd98 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461c890 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5643b461c870 <col:21> 'int' 2
| |-EnumConstantDecl 0x5643b461c940 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461cdb0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461c920 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5643b461c900 <col:22> 'int' 4
| |-EnumConstantDecl 0x5643b461c9d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461cdc8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461c9b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5643b461c990 <col:17> 'int' 8
| |-EnumConstantDecl 0x5643b461ca60 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461cde0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461ca40 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5643b461ca20 <col:22> 'int' 16
| |-EnumConstantDecl 0x5643b461caf0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461cdf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461cad0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5643b461cab0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5643b461cb80 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461ce10 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461cb60 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5643b461cb40 <col:17> 'int' 64
| |-EnumConstantDecl 0x5643b461cc10 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461ce28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461cbf0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5643b461cbd0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5643b461cca0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5643b461ce40 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b461cc80 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5643b461cc60 <col:16> 'int' 256
| `-EnumConstantDecl 0x5643b461cd30 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5643b461ce58 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b461cd10 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5643b461ccf0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5643b461d068 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5643b461ce80 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5643b461cf20 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5643b461d1f0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5643b461d128 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5643b461d298 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5643b461d2d8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5643b461d338 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5643b461d3b0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5643b461d7b0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5643b461d428 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5643b461d4a8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5643b461d528 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5643b461d5a0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5643b461d618 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5643b461d690 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5643b461d8d8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5643b461d8d8
| `-ParmVarDecl 0x5643b461d9e8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5643b461fae8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5643b461fae8
  `-ParmVarDecl 0x5643b461fbf8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPrefixArg
         0 |   _Bool allow_bare_address
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4348860 <../dummy_inc/click/ipaddress.hh:382:1, line:396:1> line:382:7 referenced class IPPrefixArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b4348978 <col:1, col:7> col:7 implicit referenced class IPPrefixArg
|-AccessSpecDecl 0x5643b4348a08 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5643b4348b18 <line:383:5, line:385:5> line:383:5 used IPPrefixArg 'void (bool)'
| |-ParmVarDecl 0x5643b4348a40 <col:17, col:44> col:22 used allow_bare_address_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5643b4349350 <col:44> 'bool' false
| |-CXXCtorInitializer Field 0x5643b43492e8 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x5643b43493e0 <line:384:23> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x5643b43493a0 <col:23> 'bool' lvalue ParmVar 0x5643b4348a40 'allow_bare_address_' 'bool'
| `-CompoundStmt 0x5643b4349428 <col:44, line:385:5>
|-CXXMethodDecl 0x5643b4348e68 <line:386:5, line:388:46> line:386:10 used parse 'bool (const String &, IPAddress &, IPAddress &, const ArgContext &) const'
| |-ParmVarDecl 0x5643b4348bd8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5643b4348c50 <line:387:9, col:20> col:20 result_addr 'IPAddress &'
| |-ParmVarDecl 0x5643b4348cc8 <col:33, col:44> col:44 result_mask 'IPAddress &'
| `-ParmVarDecl 0x5643b4348d40 <line:388:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5643b4349360 <col:34> 'const ArgContext' lvalue Var 0x5643b43367c0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5643b4349218 <line:389:5, line:394:5> line:389:10 parse 'bool (const String &, struct in_addr &, struct in_addr &, const ArgContext &) const'
| |-ParmVarDecl 0x5643b4348f38 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5643b4348fc8 <line:390:9, col:25> col:25 used result_addr 'struct in_addr &'
| |-ParmVarDecl 0x5643b4349058 <col:38, col:54> col:54 used result_mask 'struct in_addr &'
| |-ParmVarDecl 0x5643b43490d0 <line:391:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5643b4349380 <col:34> 'const ArgContext' lvalue Var 0x5643b43367c0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5643b4349638 <col:52, line:394:5>
|   `-ReturnStmt 0x5643b4349628 <line:392:2, line:393:56>
|     `-CXXMemberCallExpr 0x5643b43495e8 <line:392:9, line:393:56> 'bool'
|       |-MemberExpr 0x5643b43495b8 <line:392:9> '<bound member function type>' ->parse 0x5643b4348e68
|       | `-CXXThisExpr 0x5643b43495a8 <col:9> 'const IPPrefixArg *' implicit this
|       |-DeclRefExpr 0x5643b43494a8 <col:15> 'const String' lvalue ParmVar 0x5643b4348f38 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5643b43494f8 <col:20, col:61> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5643b43494c8 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5643b4348fc8 'result_addr' 'struct in_addr &'
|       |-CXXReinterpretCastExpr 0x5643b4349558 <line:393:8, col:49> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5643b4349528 <col:38> 'struct in_addr':'in_addr' lvalue ParmVar 0x5643b4349058 'result_mask' 'struct in_addr &'
|       `-DeclRefExpr 0x5643b4349588 <col:52> 'const ArgContext' lvalue ParmVar 0x5643b43490d0 'args' 'const ArgContext &'
|-FieldDecl 0x5643b43492e8 <line:395:5, col:10> col:10 allow_bare_address 'bool'
|-CXXConstructorDecl 0x5643b4629b68 <line:382:7> col:7 implicit constexpr IPPrefixArg 'void (const IPPrefixArg &)' inline default trivial noexcept-unevaluated 0x5643b4629b68
| `-ParmVarDecl 0x5643b4629c78 <col:7> col:7 'const IPPrefixArg &'
|-CXXConstructorDecl 0x5643b4629d18 <col:7> col:7 implicit constexpr IPPrefixArg 'void (IPPrefixArg &&)' inline default trivial noexcept-unevaluated 0x5643b4629d18
| `-ParmVarDecl 0x5643b4629e28 <col:7> col:7 'IPPrefixArg &&'
`-CXXDestructorDecl 0x5643b4629ec8 <col:7> col:7 implicit referenced ~IPPrefixArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPrefixArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPPrefixArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b44bb218 prev 0x5643b44fb378 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b44bb310 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5643b44bb3a0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5643b44bb4d8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5643b44bb3d8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5643b44bc900 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5643b44bc8e0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5643b44bc478 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5643b44bc990 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5643b44bc950 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5643b44bb3d8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5643b44bc4e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5643b44bca10 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5643b44bc9d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5643b44bc540 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5643b44bca50 <col:54> 'bool' false
| `-CompoundStmt 0x5643b44bcb58 <col:61, line:38:5>
|   `-BinaryOperator 0x5643b44bcb38 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5643b44bcad0 <col:9> 'const Element *' lvalue ->_context 0x5643b44bc418
|     | `-CXXThisExpr 0x5643b44bcac0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5643b44bcb20 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5643b44bcb00 <col:20> 'int' 0
|-CXXConstructorDecl 0x5643b44bb6e8 <line:44:5, line:46:5> line:44:5 used ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5643b44bb598 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5643b44bb610 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5643b44bc938 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5643b44bc918 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5643b44bc418 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5643b44bcbb0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5643b44bcb70 <col:20> 'const Element *' lvalue ParmVar 0x5643b44bb598 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5643b44bc478 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5643b44bcc30 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5643b44bcbf0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5643b44bb610 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5643b44bc4e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5643b44bccb0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5643b44bcc70 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5643b44bc540 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5643b44bccf0 <col:73> 'bool' false
| `-CompoundStmt 0x5643b44bcd68 <col:80, line:46:5>
|-CXXMethodDecl 0x5643b44bb818 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5643b44bcde0 <col:36, line:51:5>
|   `-ReturnStmt 0x5643b44bcdd0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5643b44bcdb8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5643b44bcd88 <col:16> 'const Element *const' lvalue ->_context 0x5643b44bc418
|         `-CXXThisExpr 0x5643b44bcd78 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5643b44bb908 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5643b45ab058 <col:32, line:57:5>
|   `-ReturnStmt 0x5643b45ab048 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5643b45ab030 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5643b44bce08 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5643b44bc478
|         `-CXXThisExpr 0x5643b44bcdf8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5643b44bb9c8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5643b44bbb50 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5643b44bba80 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5643b44bbca0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5643b44bbc10 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5643b44bbdf0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5643b44bbd60 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5643b44bbff8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5643b44bbea8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5643b44bbf20 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5643b44bc328 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5643b44bc0b8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5643b44bc138 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5643b44bc200 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5643b44bc3e0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5643b44bc418 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5643b44bc478 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5643b44bc4e0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5643b44bc540 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5643b44bc590 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5643b44bc590
| `-ParmVarDecl 0x5643b44bc6a8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5643b44bc748 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5643b44bc748
| `-ParmVarDecl 0x5643b44bc858 <col:7> col:7 'const ArgContext &'
|-CXXConstructorDecl 0x5643b462a178 <col:7> col:7 implicit constexpr ArgContext 'void (ArgContext &&)' inline default trivial noexcept-unevaluated 0x5643b462a178
| `-ParmVarDecl 0x5643b462a288 <col:7> col:7 'ArgContext &&'
`-CXXDestructorDecl 0x5643b462a410 <col:7> col:7 implicit referenced ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b46019d0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b4601ae8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5643b4601b78 <col:16, col:22> col:16 public
|-EnumDecl 0x5643b4601ba0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5643b4601ca0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5643b4601ef0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4601c80 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5643b4601c60 <col:21> 'int' 0
| |-EnumConstantDecl 0x5643b4601d30 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5643b4601f08 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4601d10 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5643b4601cf0 <col:24> 'int' 22
| |-EnumConstantDecl 0x5643b4601dc0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5643b4601f20 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4601da0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5643b4601d80 <col:24> 'int' 34
| |-EnumConstantDecl 0x5643b4601e50 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5643b4601f38 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4601e30 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5643b4601e10 <col:25> 'int' 95
| `-EnumConstantDecl 0x5643b4601ea0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5643b46038b0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5643b4603ce8 <col:7>
|-CXXConstructorDecl 0x5643b46039b8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5643b46039b8
| `-ParmVarDecl 0x5643b4603ac8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5643b4603b68 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x5643b4603b68
| `-ParmVarDecl 0x5643b4603c78 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x5643b4605de8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4601f68 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5643b46020c8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5643b4602158 <col:32, col:38> col:32 public
|-TypedefDecl 0x5643b4602190 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5643b4129660 'uint32_t' sugar
|   |-Typedef 0x5643b403d408 'uint32_t'
|   `-TypedefType 0x5643b4016440 '__uint32_t' sugar
|     |-Typedef 0x5643b4016038 '__uint32_t'
|     `-BuiltinType 0x5643b3fd4410 'unsigned int'
|-CXXConstructorDecl 0x5643b46022d8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5643b4602200 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5643b46037b8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5643b4603cf8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5643b4603070 'base' 'int'
| | `-ImplicitCastExpr 0x5643b4603858 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5643b4603818 <col:16> 'int' lvalue ParmVar 0x5643b4602200 'b' 'int'
| `-CompoundStmt 0x5643b4603d68 <col:19, line:1046:5>
|-CXXMethodDecl 0x5643b46027d0 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5643b46023a0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5643b4602420 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5643b4602498 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5643b4602518 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5643b46025d8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5643b4602658 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5643b4602c28 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5643b46028a0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x5643b4602b88 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x5643b4602948 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x5643b46029e8 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x5643b4602a60 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x5643b46037d8 <col:82> 'const ArgContext' lvalue Var 0x5643b45f9288 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x5643b4604c98 <col:94, line:1067:5>
|     |-DeclStmt 0x5643b4603ef8 <line:1054:9, col:64>
|     | `-VarDecl 0x5643b4603d88 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x5643b4603eb0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x5643b4604118 <line:1055:9, col:91>
|     | `-VarDecl 0x5643b4603f28 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5643b46040f0 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x5643b46040d0 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x5643b4604080 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x5643b4604060 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x5643b4604008 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x5643b4603fb8 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x5643b4603fe8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x5643b4604048 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x5643b4604028 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x5643b46040b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5643b4604278 <line:1056:9, col:27>
|     | `-VarDecl 0x5643b4604210 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x5643b46046c0 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x5643b46045f0 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5643b4604570 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5643b44f3848 0x5643b433cc28 0x5643b433c900 0x5643b432e0e0 0x5643b432dd90 0x5643b432d680 0x5643b42ffff0 0x5643b428c4b0
|     | | |-CallExpr 0x5643b46044b0 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x5643b46042a0 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x5643b4604350 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5643b4604320 <col:19, col:23> '<bound member function type>' .begin 0x5643b431d2e8
|     | | | |   `-DeclRefExpr 0x5643b4604300 <col:19> 'const String' lvalue ParmVar 0x5643b4602948 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5643b46043c0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5643b4604390 <col:32, col:36> '<bound member function type>' .end 0x5643b431d500
|     | | | |   `-DeclRefExpr 0x5643b4604370 <col:32> 'const String' lvalue ParmVar 0x5643b4602948 'str' 'const String &'
|     | | | |-DeclRefExpr 0x5643b46043e0 <col:43> 'const bool' lvalue Var 0x5643b4603d88 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x5643b4604448 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x5643b4604428 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x5643b4604470 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5643b4604210 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x5643b4604490 <col:73> 'const int' lvalue Var 0x5643b4603f28 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x5643b4604550 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5643b4604520 <col:16, col:20> '<bound member function type>' .end 0x5643b431d500
|     | |     `-DeclRefExpr 0x5643b4604500 <col:16> 'const String' lvalue ParmVar 0x5643b4602948 'str' 'const String &'
|     | `-BinaryOperator 0x5643b46046a0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5643b4604638 <col:13> 'int' lvalue ->status 0x5643b46030d8
|     |   | `-CXXThisExpr 0x5643b4604628 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5643b4604688 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5643b4604668 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5643b4601d30 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5643b4604910 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5643b46047f8 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5643b46047e0 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5643b46047c8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5643b46046e8 <col:13> 'int' lvalue ->status 0x5643b46030d8
|     | | |     `-CXXThisExpr 0x5643b46046d8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5643b46047a8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5643b4604778 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5643b4604728 <col:23> 'int' lvalue ->status 0x5643b46030d8
|     | |   |   `-CXXThisExpr 0x5643b4604718 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5643b4604790 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5643b4604758 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5643b4601dc0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5643b46048f0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5643b4604890 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5643b4604838 <col:13, col:18> '<bound member function type>' .error 0x5643b44bbb50
|     |   | | `-DeclRefExpr 0x5643b4604818 <col:13> 'const ArgContext' lvalue ParmVar 0x5643b4602a60 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5643b46048b8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5643b4604868 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5643b46048e0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5643b46048d0 <col:20> 'bool' false
|     |-DeclStmt 0x5643b4604ae8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5643b4604a90 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x5643b4604a20 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x5643b4604c48 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5643b4604b00 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5643b42c0478
|     | |-DeclRefExpr 0x5643b4604b48 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5643b4604210 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x5643b4604c18 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x5643b4604b90 <col:64> 'V' lvalue ParmVar 0x5643b46029e8 'result' 'V &'
|     `-ReturnStmt 0x5643b4604c88 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5643b4604c78 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5643b4602fe8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5643b4602c98 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5643b4602f48 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5643b4602d48 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5643b4602de8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5643b4602e60 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5643b46037f8 <col:71> 'const ArgContext' lvalue Var 0x5643b45f9288 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5643b4605408 <col:83, line:1083:5>
| |   |-DeclStmt 0x5643b4604d60 <line:1071:9, col:12>
| |   | `-VarDecl 0x5643b4604cf8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5643b46053e0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5643b4604ff0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5643b4604e78 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5643b4604e40 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5643b4604d88 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5643b4604de0 <col:31> 'const String' lvalue ParmVar 0x5643b4602d48 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5643b4604e00 <col:36> 'V' lvalue Var 0x5643b4604cf8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5643b4604e20 <col:39> 'const ArgContext' lvalue ParmVar 0x5643b4602e60 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5643b4604fd0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5643b4604fb0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5643b4604f98 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5643b4604f80 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5643b4604ea0 <col:17> 'int' lvalue ->status 0x5643b46030d8
| |     |     |     `-CXXThisExpr 0x5643b4604e90 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5643b4604f60 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5643b4604f30 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5643b4604ee0 <col:27> 'int' lvalue ->status 0x5643b46030d8
| |     |       |   `-CXXThisExpr 0x5643b4604ed0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5643b4604f48 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5643b4604f10 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5643b4601dc0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5643b4605020 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5643b4605010 <col:20> 'bool' false
| |     `-IfStmt 0x5643b46053b8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5643b46050c0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5643b4605090 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5643b4605040 <col:18> 'int' lvalue ->status 0x5643b46030d8
| |       | |   `-CXXThisExpr 0x5643b4605030 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5643b46050a8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5643b4605070 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5643b4601dc0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5643b46052f8 <col:42, line:1079:9>
| |       | |-CallExpr 0x5643b46052a0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5643b46050f0 <line:1076:13> '<bound member function type>' ->range_error 0x5643b46036e8
| |       | | | `-CXXThisExpr 0x5643b46050e0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5643b4605120 <col:25> 'const ArgContext' lvalue ParmVar 0x5643b4602e60 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5643b4605200 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5643b4605278 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5643b4605258 <col:43> 'V' lvalue Var 0x5643b4604cf8 'x' 'V'
| |       | `-ReturnStmt 0x5643b46052e8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5643b46052d8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5643b4605398 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5643b4605358 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5643b4605318 <col:13> 'V' lvalue ParmVar 0x5643b4602de8 'result' 'V &'
| |         | `-DeclRefExpr 0x5643b4605338 <col:22> 'V' lvalue Var 0x5643b4604cf8 'x' 'V'
| |         `-ReturnStmt 0x5643b4605388 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5643b4605378 <col:20> 'bool' true
| `-CXXMethodDecl 0x5643b462aab8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5643b462a898 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x5643b462a968 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x5643b462a9d0 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x5643b46037f8 <col:71> 'const ArgContext' lvalue Var 0x5643b45f9288 'blank_args' 'const ArgContext'
|-FieldDecl 0x5643b4603070 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x5643b46030d8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5643b4603128 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5643b46033e0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5643b4603168 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5643b46031e8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5643b4603260 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5643b46032e0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5643b46036e8 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5643b46034b0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5643b4603528 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5643b46035c0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5643b4605c68 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5643b4605c68
| `-ParmVarDecl 0x5643b4605d78 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5643b4605ef8 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x5643b4605ef8
| `-ParmVarDecl 0x5643b4606008 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x5643b462a590 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b4343430 prev 0x5643b4336828 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b4343528 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x5643b43435b8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5643b43439e0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5643b43435f8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x5643b4343678 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x5643b43437b0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5643b4343860 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x5643b4343ca8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x5643b4343ab0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5643b4343b28 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x5643b4343bc8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5643b4348648 <col:34> 'const ArgContext' lvalue Var 0x5643b43367c0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5643b43480a0 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5643b4343d70 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5643b4343e60 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x5643b4343ed8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5643b4348668 <col:34> 'const ArgContext' lvalue Var 0x5643b43367c0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5643b4348848 <col:46, line:375:5>
|   `-ReturnStmt 0x5643b4348838 <line:374:2, col:63>
|     `-CallExpr 0x5643b4348800 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5643b43487e8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5643b43487a0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x5643b4343ca8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5643b4348700 <col:15> 'const String' lvalue ParmVar 0x5643b4343d70 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5643b4348750 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5643b4348720 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5643b4343e60 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x5643b4348780 <col:59> 'const ArgContext' lvalue ParmVar 0x5643b4343ed8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5643b4348578 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x5643b4348168 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5643b43483e0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5643b4348458 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5643b4348688 <col:34> 'const ArgContext' lvalue Var 0x5643b43367c0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x5643b462adc8 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5643b462aec8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x5643b462aec8
| `-ParmVarDecl 0x5643b462afd8 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x5643b462b078 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x5643b462b078
| `-ParmVarDecl 0x5643b462b188 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x5643b462b228 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b42f4540 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b42f4658 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5643b42f46e8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5643b42f47b8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5643b42f48a0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b42f4ab8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5643b42f4960 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f4c68 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5643b42f4b70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5643b42f4db0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5643b42f4d20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5643b42f4ef8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5643b42f4e68 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f5040 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5643b42f4fb0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f5108 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5643b42f5250 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5643b42f51c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5643b42f5318 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5643b42f5460 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5643b42f53d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5643b42f55d8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5643b42f5518 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f5720 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5643b42f5690 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f57e8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5643b42f59a8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5643b42f5898 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5643b42f5910 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f5bf8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5643b42f5a68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5643b42f5ae0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5643b42f5ca8 <col:86> "" ""
|-CXXMethodDecl 0x5643b42f5f18 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5643b42f5d88 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5643b42f5e00 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f60c8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5643b42f5fd8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5643b42f6278 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5643b42f6180 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5643b42f6548 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5643b42f6330 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5643b42f63a8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5643b42f6420 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f6828 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5643b42f6610 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5643b42f6688 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5643b42f6700 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5643b42f68e0 <col:115> "" ""
|-AccessSpecDecl 0x5643b42f6950 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5643b42f6988 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b42f7ea0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5643b42f7ea0
| `-ParmVarDecl 0x5643b42f7fa8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5643b42f8048 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5643b42f8048
| `-ParmVarDecl 0x5643b42f8158 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5643b432d788 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5643b451f780 <col:7>
|-CXXConstructorDecl 0x5643b432d860 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5643b432d860
| `-ParmVarDecl 0x5643b432d978 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5643b432d9e8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5643b432d9e8
| `-ParmVarDecl 0x5643b432daf8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5643b4522180 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b450e328 prev 0x5643b4503530 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b450e420 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5643b450e510 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5643b450e638 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5643b450e7b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5643b450e938 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5643b450eab8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5643b451f8e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5643b4520158 <col:11>
|-CXXDestructorDecl 0x5643b451f9c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5643b451faf8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5643b451faf8
| `-ParmVarDecl 0x5643b451fc08 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5643b451fca8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5643b451fca8
| `-ParmVarDecl 0x5643b451fdb8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5643b4522b78 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5643b4522c88 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5643b4522f08 <col:11>
|   `-ReturnStmt 0x5643b4522ef8 <col:11>
|     `-UnaryOperator 0x5643b4522ee0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5643b4522ed0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5643b4522cf8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5643b4522cf8
  `-ParmVarDecl 0x5643b4522e08 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b450eb20 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643b450ec38 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5643b450ecd8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5643b450ed40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5643b450eda8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5643b450ee10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5643b450ee70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5643b450ef30 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5643b450ef90 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5643b450eff0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5643b451f7f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5643b450ecd8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5643b4520168 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5643b45201c0 <col:12>
|-CXXConstructorDecl 0x5643b451fe28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5643b451fe28
| `-ParmVarDecl 0x5643b451ff38 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5643b451ffd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5643b451ffd8
| `-ParmVarDecl 0x5643b45200e8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5643b4522260 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643b44fcc40 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643b44fcd58 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5643b44fcde8 <col:16, col:22> col:16 public
|-EnumDecl 0x5643b44fce10 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5643b44fcf10 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5643b44fcff0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b44fcef0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5643b44fced0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5643b44fcfa0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5643b44fd008 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b44fcf80 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5643b44fcf60 <col:22> 'int' 64
|-CXXMethodDecl 0x5643b44fd348 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5643b44fd030 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5643b44fd0b0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5643b44fd128 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5643b44fd1a0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5643b44fd408 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5643b44fd608 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5643b44fd480 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5643b44fd4f8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5643b44fd6b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5643b44fd818 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5643b44fd728 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5643b44fd8c0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5643b44fdc20 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5643b44fdbb0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5643b44fdb50 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5643b44fdb10 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5643b3fd42d0 'void'
|       |-PointerType 0x5643b427cde0 'unsigned char *'
|       | `-BuiltinType 0x5643b3fd43d0 'unsigned char'
|       |-TypedefType 0x5643b4079350 'size_t' sugar
|       | |-Typedef 0x5643b4044b20 'size_t'
|       | `-BuiltinType 0x5643b3fd4430 'unsigned long'
|       `-PointerType 0x5643b3fd4ad0 'void *'
|         `-BuiltinType 0x5643b3fd42d0 'void'
|-CXXMethodDecl 0x5643b44fe098 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5643b44fdc90 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5643b44fdd08 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5643b44fdda0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5643b44fde20 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5643b4518790 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5643b4518778 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5643b4518740 <col:58> 'int' 0
| |-ParmVarDecl 0x5643b44fdea0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5643b45187b8 <col:76> 'int' 0
| |-ParmVarDecl 0x5643b44fdf20 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5643b45187d8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5643b44fe168 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5643b44fe1e8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5643b44fe2a8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5643b44fe348 <col:20>
| `-OptimizeNoneAttr 0x5643b44fe3a0 <col:30>
|-CXXMethodDecl 0x5643b44fe418 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5643b44fe4b8 <col:20>
| `-OptimizeNoneAttr 0x5643b44fe510 <col:30>
|-CXXMethodDecl 0x5643b44fe588 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5643b44fe628 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5643b44fe6d8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5643b44fe778 <col:20>
| |-OptimizeNoneAttr 0x5643b44fe7d0 <col:30>
| `-WarnUnusedResultAttr 0x5643b44fe7f8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5643b44fe850 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5643b44fe8f0 <col:20>
| `-OptimizeNoneAttr 0x5643b44fe948 <col:30>
|-CXXMethodDecl 0x5643b44fe998 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5643b44fea38 <col:20>
| `-OptimizeNoneAttr 0x5643b44fea90 <col:30>
|-CXXMethodDecl 0x5643b44fead8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5643b44feb78 <col:20>
| `-OptimizeNoneAttr 0x5643b44febd0 <col:30>
|-CXXMethodDecl 0x5643b44fec18 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b44fecd8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b44feda0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5643b44fee68 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5643b44fef28 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b44ff048 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5643b45188a0 <col:54, line:99:5>
|   `-ReturnStmt 0x5643b4518890 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5643b4518878 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5643b4518848 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5643b450f328
|         `-CXXThisExpr 0x5643b4518838 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5643b44ff1e8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5643b44ff0f8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5643b4518950 <col:67, line:103:5>
|   `-BinaryOperator 0x5643b4518930 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5643b45188c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5643b450f328
|     | `-CXXThisExpr 0x5643b45188b8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5643b4518918 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5643b45188f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5643b44ff0f8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5643b44ff2e0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5643b45189d0 <col:33, line:107:5>
|   `-ReturnStmt 0x5643b45189c0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5643b45189a8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5643b4518978 <col:16> 'void *' lvalue ->_destructor_argument 0x5643b450f390
|         `-CXXThisExpr 0x5643b4518968 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5643b44ff3a0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5643b4519000 <col:25, line:113:5>
|   |-ParenExpr 0x5643b4518d48 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5643b4518d18 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5643b4518a88 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5643b4518a60 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5643b4518a28 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5643b45189f8 <col:24> '<bound member function type>' ->shared 0x5643b44fe418
|   |   |       `-ImplicitCastExpr 0x5643b4518a48 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5643b45189e8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5643b4518ae8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b4518ac8 <col:42> 'int' 0
|   |   `-CallExpr 0x5643b4518c78 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5643b4518c60 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b4518c40 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b4518cb8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b4518b58 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5643b4518cd0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b4518b80 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b4518ce8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b4518bb8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5643b4518d00 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b4518c28 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b4518c10 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b4518bd8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5643b4518f48 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5643b4518d78 <col:2> 'unsigned char *' lvalue ->_head 0x5643b450f130
|   | | `-CXXThisExpr 0x5643b4518d68 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5643b4518f30 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5643b4518f10 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5643b4518db8 <col:10> 'unsigned char *' lvalue ->_data 0x5643b450f198
|   |     | `-CXXThisExpr 0x5643b4518da8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5643b4518ef8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5643b4518ed8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5643b4518df8 <col:18> 'unsigned char *' lvalue ->_tail 0x5643b450f200
|   |         | `-CXXThisExpr 0x5643b4518de8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5643b4518ec0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5643b4518ea0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5643b4518e38 <col:26> 'unsigned char *' lvalue ->_end 0x5643b450f268
|   |             | `-CXXThisExpr 0x5643b4518e28 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5643b4518e88 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5643b4518e68 <col:33> 'int' 0
|   `-BinaryOperator 0x5643b4518fe0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5643b4518f78 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5643b450f328
|     | `-CXXThisExpr 0x5643b4518f68 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5643b4518fc8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5643b4518fa8 <col:16> 'int' 0
|-CXXMethodDecl 0x5643b44ff4e0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5643b44ff450 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643b44ff588 <col:20>
| |-OptimizeNoneAttr 0x5643b44ff5e0 <col:30>
| `-WarnUnusedResultAttr 0x5643b44ff608 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5643b44ff6d8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5643b44ff648 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643b44ff780 <col:20>
| |-OptimizeNoneAttr 0x5643b44ff7d8 <col:30>
| `-WarnUnusedResultAttr 0x5643b44ff800 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5643b44ff938 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5643b44ff840 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5643b44ff9e0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5643b44ffae0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5643b44ffa50 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643b44ffb88 <col:20>
| `-OptimizeNoneAttr 0x5643b44ffbe0 <col:30>
|-CXXMethodDecl 0x5643b44ffca8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5643b44ffc18 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5643b44ffd50 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5643b44ffe50 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5643b44ffdc0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5643b44ffef8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5643b44ffff8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5643b44fff68 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643b45000a0 <col:20>
| `-OptimizeNoneAttr 0x5643b45000f8 <col:30>
|-CXXMethodDecl 0x5643b4500288 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5643b4500138 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5643b45001b0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5643b45187f8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5643b4500338 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5643b4500538 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5643b45003b0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5643b4500428 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b4500748 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5643b45005f8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5643b4500670 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b4500958 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5643b4500808 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5643b4500888 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5643b4518808 <col:39> 'int' 0
|-CXXMethodDecl 0x5643b4500a28 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5643b4500af0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5643b4500bb8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5643b4500c78 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b4500d40 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5643b4500e88 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5643b4500df8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5643b4501058 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5643b4500f48 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5643b4500fc0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b4501128 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5643b45011e8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5643b4501288 <col:20>
| `-OptimizeNoneAttr 0x5643b45012e0 <col:30>
|-CXXMethodDecl 0x5643b4501330 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5643b45013d0 <col:20>
| `-OptimizeNoneAttr 0x5643b4501428 <col:30>
|-CXXMethodDecl 0x5643b4501478 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5643b4501538 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b4501600 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5643b45016a0 <col:20>
| `-OptimizeNoneAttr 0x5643b45016f8 <col:30>
|-CXXMethodDecl 0x5643b4501848 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5643b4501738 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5643b45017b0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b4501998 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5643b4501908 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b4501a70 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5643b4501b30 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5643b4501bd0 <col:20>
| `-OptimizeNoneAttr 0x5643b4501c28 <col:30>
|-CXXMethodDecl 0x5643b4501c78 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5643b4501d18 <col:20>
| `-OptimizeNoneAttr 0x5643b4501d70 <col:30>
|-CXXMethodDecl 0x5643b4501dc0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5643b4501e88 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5643b4501f28 <col:20>
| `-OptimizeNoneAttr 0x5643b4501f80 <col:30>
|-CXXMethodDecl 0x5643b4501fc8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5643b45020e8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5643b4502258 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5643b4502198 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5643b4502348 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5643b45023e8 <col:20>
| `-OptimizeNoneAttr 0x5643b4502440 <col:30>
|-CXXMethodDecl 0x5643b4502490 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5643b4502550 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5643b4502788 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5643b4502600 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5643b4502678 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643b4502838 <col:20>
| `-OptimizeNoneAttr 0x5643b4502890 <col:30>
|-CXXMethodDecl 0x5643b4502938 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5643b45029d8 <col:20>
| `-OptimizeNoneAttr 0x5643b4502a30 <col:30>
|-CXXMethodDecl 0x5643b4502a80 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5643b4502b20 <col:20>
| `-OptimizeNoneAttr 0x5643b4502b78 <col:30>
|-CXXMethodDecl 0x5643b4502bc0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5643b4502c60 <col:20>
| `-OptimizeNoneAttr 0x5643b4502cb8 <col:30>
|-CXXMethodDecl 0x5643b4502db8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5643b4502cf0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5643b4502e60 <col:20>
| `-OptimizeNoneAttr 0x5643b4502eb8 <col:30>
|-CXXMethodDecl 0x5643b4503078 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5643b4502ef0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5643b4502f68 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643b4503128 <col:20>
| `-OptimizeNoneAttr 0x5643b4503180 <col:30>
|-CXXMethodDecl 0x5643b4503228 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5643b4503348 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5643b4503468 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5643b4503508 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5643b4503530 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5643b4503658 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5643b45036f8 <col:20>
| `-OptimizeNoneAttr 0x5643b4503750 <col:30>
|-CXXMethodDecl 0x5643b45037f8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5643b4503898 <col:20>
| `-OptimizeNoneAttr 0x5643b45038f0 <col:30>
|-AccessSpecDecl 0x5643b4503918 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5643b4503940 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5643b4503a40 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5643b4503a90 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b4503a20 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5643b4503a00 <col:14> 'int' 48
|-CXXMethodDecl 0x5643b4503af8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5643b4503b98 <col:20>
| `-OptimizeNoneAttr 0x5643b4503bf0 <col:30>
|-CXXMethodDecl 0x5643b4503c68 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5643b4503d08 <col:20>
| `-OptimizeNoneAttr 0x5643b4503d60 <col:30>
|-CXXMethodDecl 0x5643b4503e28 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5643b4503d98 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5643b4503fc8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5643b4504168 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5643b4504078 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5643b4504210 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5643b4504310 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5643b45046c0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b45042f0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5643b45042d0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5643b45043a0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5643b45046d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4504380 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5643b4504360 <col:14> 'int' 1
| |-EnumConstantDecl 0x5643b4504430 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5643b45046f0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4504410 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5643b45043f0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5643b45044c0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5643b4504708 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b45044a0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5643b4504480 <col:14> 'int' 3
| |-EnumConstantDecl 0x5643b4504550 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5643b4504720 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4504530 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5643b4504510 <col:13> 'int' 4
| |-EnumConstantDecl 0x5643b45045e0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5643b4504738 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b45045c0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5643b45045a0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5643b4504670 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5643b4504750 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b4504650 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5643b4504630 <col:14> 'int' 6
|-CXXMethodDecl 0x5643b45047b8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5643b4504858 <col:20>
| `-OptimizeNoneAttr 0x5643b45048b0 <col:30>
|-CXXMethodDecl 0x5643b45049a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5643b45048e8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5643b4504a50 <col:20>
| `-OptimizeNoneAttr 0x5643b4504aa8 <col:30>
|-CXXMethodDecl 0x5643b4504b18 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5643b4504c40 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5643b4504db8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5643b4504cf0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5643b4504e80 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5643b4504f48 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5643b4505088 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5643b4504ff8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5643b4505130 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5643b4505230 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5643b4505430 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4505210 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5643b45051f0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5643b45052c0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5643b4505448 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b45052a0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5643b4505280 <col:45> 'int' 4
| |-EnumConstantDecl 0x5643b4505350 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5643b4505460 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4505330 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5643b4505310 <col:24> 'int' 0
| `-EnumConstantDecl 0x5643b45053e0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5643b4505478 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b45053c0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5643b45053a0 <col:47> 'int' 16
|-CXXMethodDecl 0x5643b45054d8 <line:431:5, col:36> col:22 used dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5643b4505648 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5643b4505588 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5643b45056f0 <col:20>
| `-OptimizeNoneAttr 0x5643b4505748 <col:30>
|-CXXMethodDecl 0x5643b4505798 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5643b4519120 <col:18, col:36>
|   `-ReturnStmt 0x5643b4519110 <col:20, col:33>
|     `-ImplicitCastExpr 0x5643b45190f8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5643b45190d8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5643b45190a8 <col:27> '<bound member function type>' ->xanno 0x5643b45037f8
|           `-CXXThisExpr 0x5643b4519098 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5643b4505890 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5643b4519230 <col:30, col:48>
|   `-ReturnStmt 0x5643b4519220 <col:32, col:45>
|     `-ImplicitCastExpr 0x5643b4519208 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5643b45191e8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5643b45191b8 <col:39> '<bound member function type>' ->xanno 0x5643b4503658
|           `-CXXThisExpr 0x5643b45191a8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5643b4505978 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5643b45193c8 <col:24, col:50>
|   `-ReturnStmt 0x5643b45193b8 <col:26, col:47>
|     `-UnaryOperator 0x5643b45193a0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5643b4519380 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5643b4519368 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5643b4519318 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5643b450e638
|         |   `-CXXMemberCallExpr 0x5643b45192f8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5643b45192c8 <col:34> '<bound member function type>' ->xanno 0x5643b45037f8
|         |       `-CXXThisExpr 0x5643b45192b8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5643b4519348 <col:46> 'int' 0
|-CXXMethodDecl 0x5643b4505a80 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5643b4519598 <col:36, col:62>
|   `-ReturnStmt 0x5643b4519588 <col:38, col:59>
|     `-UnaryOperator 0x5643b4519570 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5643b4519550 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5643b4519538 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5643b45194b0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5643b450e638
|         |   `-CXXMemberCallExpr 0x5643b4519490 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5643b4519460 <col:46> '<bound member function type>' ->xanno 0x5643b4503658
|         |       `-CXXThisExpr 0x5643b4519450 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5643b45194e0 <col:58> 'int' 0
|-CXXMethodDecl 0x5643b4505b98 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5643b4519730 <col:26, col:53>
|   `-ReturnStmt 0x5643b4519720 <col:28, col:50>
|     `-UnaryOperator 0x5643b4519708 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5643b45196e8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5643b45196d0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5643b4519680 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5643b450e938
|         |   `-CXXMemberCallExpr 0x5643b4519660 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5643b4519630 <col:36> '<bound member function type>' ->xanno 0x5643b45037f8
|         |       `-CXXThisExpr 0x5643b4519620 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5643b45196b0 <col:49> 'int' 0
|-CXXMethodDecl 0x5643b4505cb8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5643b4519908 <col:38, col:65>
|   `-ReturnStmt 0x5643b45198f8 <col:40, col:62>
|     `-UnaryOperator 0x5643b45198e0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5643b45198c0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5643b45198a8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5643b4519818 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5643b450e938
|         |   `-CXXMemberCallExpr 0x5643b45197f8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5643b45197c8 <col:48> '<bound member function type>' ->xanno 0x5643b4503658
|         |       `-CXXThisExpr 0x5643b45197b8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5643b4519848 <col:61> 'int' 0
|-CXXMethodDecl 0x5643b4505e68 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5643b4505d70 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5643b4519fd8 <col:34, line:463:5>
|   |-ParenExpr 0x5643b4519e20 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5643b4519df0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5643b4519a58 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b4519a28 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b4519978 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b4519960 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b4519920 <col:23> 'int' lvalue ParmVar 0x5643b4505d70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b4519940 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b4519a08 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b45199d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b4519998 <col:33> 'int' lvalue ParmVar 0x5643b4505d70 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5643b45199f0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5643b45199b8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5643b4519ab8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b4519a98 <col:56> 'int' 0
|   |   `-CallExpr 0x5643b4519d50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5643b4519d38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b4519d18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b4519d90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b4519ba8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5643b4519da8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b4519bd8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b4519dc0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b4519c10 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5643b4519dd8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b4519d00 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b4519ce8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b4519ca8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5643b4519fc8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5643b4519fb0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5643b4519f90 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5643b4519f60 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5643b4519f10 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5643b450e638
|         |   `-CXXMemberCallExpr 0x5643b4519ef0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5643b4519ec0 <col:9> '<bound member function type>' ->xanno 0x5643b4503658
|         |       `-CXXThisExpr 0x5643b4519eb0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5643b4519f78 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5643b4519f40 <col:21> 'int' lvalue ParmVar 0x5643b4505d70 'i' 'int'
|-CXXMethodDecl 0x5643b45060b8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5643b4505f28 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5643b4505fa0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5643b451a668 <col:40, line:472:5>
|   |-ParenExpr 0x5643b451a480 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5643b451a450 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451a130 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451a100 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451a050 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451a038 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b4519ff8 <col:23> 'int' lvalue ParmVar 0x5643b4505f28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451a018 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451a0e0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451a0b0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451a070 <col:33> 'int' lvalue ParmVar 0x5643b4505f28 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5643b451a0c8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5643b451a090 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5643b451a190 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451a170 <col:56> 'int' 0
|   |   `-CallExpr 0x5643b451a3b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5643b451a398 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451a378 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451a3f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451a200 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5643b451a408 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451a230 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451a420 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451a268 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5643b451a438 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451a360 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451a348 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451a308 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5643b451a648 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5643b451a5f0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5643b451a5c0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5643b451a570 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5643b450e638
|     | |   `-CXXMemberCallExpr 0x5643b451a550 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5643b451a520 <col:2> '<bound member function type>' ->xanno 0x5643b45037f8
|     | |       `-CXXThisExpr 0x5643b451a510 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5643b451a5d8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5643b451a5a0 <col:14> 'int' lvalue ParmVar 0x5643b4505f28 'i' 'int'
|     `-ImplicitCastExpr 0x5643b451a630 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5643b451a610 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5643b4505fa0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5643b4506278 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5643b4506180 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5643b451ade8 <col:36, line:485:5>
|   |-ParenExpr 0x5643b451ab50 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451ab20 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451a800 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451a7d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451a6e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451a6c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451a688 <col:23> 'int' lvalue ParmVar 0x5643b4506180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451a6a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451a7b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451a798 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451a700 <col:33> 'int' lvalue ParmVar 0x5643b4506180 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451a778 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451a760 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451a720 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451a740 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5643b451a860 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451a840 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451aa80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451aa68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451aa48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451aac0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451a8d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5643b451aad8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451a908 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451aaf0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451a940 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5643b451ab08 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451aa30 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451aa18 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451a9d8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5643b451add8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5643b451adc0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5643b451ada8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5643b451ad78 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5643b451ad18 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5643b451ace8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5643b451ac60 <col:61, col:70> 'char const[48]' lvalue ->c 0x5643b450e510
|             |   `-CXXMemberCallExpr 0x5643b451ac40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5643b451ac10 <col:61> '<bound member function type>' ->xanno 0x5643b4503658
|             |       `-CXXThisExpr 0x5643b451ac00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5643b451ad00 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5643b451ac90 <col:74> 'int' lvalue ParmVar 0x5643b4506180 'i' 'int'
|-CXXMethodDecl 0x5643b45064c8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5643b4506338 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5643b45063b0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5643b451b538 <col:42, line:500:5>
|   |-ParenExpr 0x5643b451b2d0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451b2a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451af80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451af50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451ae60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451ae48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451ae08 <col:23> 'int' lvalue ParmVar 0x5643b4506338 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451ae28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451af30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451af18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451ae80 <col:33> 'int' lvalue ParmVar 0x5643b4506338 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451aef8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451aee0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451aea0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451aec0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5643b451afe0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451afc0 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451b200 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451b1e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451b1c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451b240 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451b050 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5643b451b258 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451b088 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451b270 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451b0c0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5643b451b288 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451b1b0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451b198 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451b158 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5643b451b518 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5643b451b4c8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5643b451b498 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5643b451b440 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5643b451b410 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5643b451b3c0 <col:48, col:57> 'char [48]' lvalue ->c 0x5643b450e510
|     |     |   `-CXXMemberCallExpr 0x5643b451b3a0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5643b451b370 <col:48> '<bound member function type>' ->xanno 0x5643b45037f8
|     |     |       `-CXXThisExpr 0x5643b451b360 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5643b451b428 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5643b451b3f0 <col:61> 'int' lvalue ParmVar 0x5643b4506338 'i' 'int'
|     `-ImplicitCastExpr 0x5643b451b500 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5643b451b4e0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5643b45063b0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5643b4506688 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5643b4506590 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5643b451bc98 <col:35, line:513:5>
|   |-ParenExpr 0x5643b451b9a8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451b978 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451b6d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451b6a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451b5b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451b598 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451b558 <col:23> 'int' lvalue ParmVar 0x5643b4506590 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451b578 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451b680 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451b668 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451b5d0 <col:33> 'int' lvalue ParmVar 0x5643b4506590 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451b648 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451b630 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451b5f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451b610 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5643b451b730 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451b710 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451b8d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451b8c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451b8a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451b918 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451b7a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5643b451b930 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451b7d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451b948 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451b810 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5643b451b960 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451b888 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451b870 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451b830 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5643b451bc88 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5643b451bc70 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5643b451bc58 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5643b451bc28 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5643b451bba0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5643b451bb70 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5643b451bb20 <col:60, col:69> 'char const[48]' lvalue ->c 0x5643b450e510
|             |   `-CXXMemberCallExpr 0x5643b451bb00 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5643b451bad0 <col:60> '<bound member function type>' ->xanno 0x5643b4503658
|             |       `-CXXThisExpr 0x5643b451bac0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5643b451bb88 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5643b451bb50 <col:73> 'int' lvalue ParmVar 0x5643b4506590 'i' 'int'
|-CXXMethodDecl 0x5643b45068d8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5643b4506748 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5643b45067c0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5643b451c3b8 <col:41, line:528:5>
|   |-ParenExpr 0x5643b451c140 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451c110 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451be30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451be00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451bd10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451bcf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451bcb8 <col:23> 'int' lvalue ParmVar 0x5643b4506748 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451bcd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451bde0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451bdc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451bd30 <col:33> 'int' lvalue ParmVar 0x5643b4506748 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451bda8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451bd90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451bd50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451bd70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5643b451be90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451be70 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451c070 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451c058 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451c038 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451c0b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451bf00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5643b451c0c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451bf38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451c0e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451bf70 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5643b451c0f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451c020 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451c008 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451bfc8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5643b451c398 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5643b451c348 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5643b451c318 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5643b451c2c0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5643b451c280 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5643b451c230 <col:47, col:56> 'char [48]' lvalue ->c 0x5643b450e510
|     |     |   `-CXXMemberCallExpr 0x5643b451c210 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5643b451c1e0 <col:47> '<bound member function type>' ->xanno 0x5643b45037f8
|     |     |       `-CXXThisExpr 0x5643b451c1d0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5643b451c298 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5643b451c260 <col:60> 'int' lvalue ParmVar 0x5643b4506748 'i' 'int'
|     `-ImplicitCastExpr 0x5643b451c380 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5643b451c360 <col:65> 'int16_t':'short' lvalue ParmVar 0x5643b45067c0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5643b4506a98 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5643b45069a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5643b451ca88 <col:36, line:541:5>
|   |-ParenExpr 0x5643b451c828 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451c7f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451c550 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451c520 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451c430 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451c418 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451c3d8 <col:23> 'int' lvalue ParmVar 0x5643b45069a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451c3f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451c500 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451c4e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451c450 <col:33> 'int' lvalue ParmVar 0x5643b45069a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451c4c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451c4b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451c470 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451c490 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5643b451c5b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451c590 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451c758 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451c740 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451c720 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451c798 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451c620 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5643b451c7b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451c658 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451c7c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451c690 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5643b451c7e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451c708 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451c6f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451c6b0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5643b451ca78 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5643b451ca60 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5643b451ca48 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5643b451ca18 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5643b451c9c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5643b451c990 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5643b451c940 <col:61, col:70> 'char const[48]' lvalue ->c 0x5643b450e510
|             |   `-CXXMemberCallExpr 0x5643b451c920 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5643b451c8f0 <col:61> '<bound member function type>' ->xanno 0x5643b4503658
|             |       `-CXXThisExpr 0x5643b451c8e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5643b451c9a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5643b451c970 <col:74> 'int' lvalue ParmVar 0x5643b45069a0 'i' 'int'
|-CXXMethodDecl 0x5643b4506c68 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5643b4506b58 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5643b4506bd0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643b4506d18 <col:20>
| `-OptimizeNoneAttr 0x5643b4506d70 <col:30>
|-CXXMethodDecl 0x5643b4506ea8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5643b4506db0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5643b451d158 <col:35, line:562:5>
|   |-ParenExpr 0x5643b451cef8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451cec8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451cc20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451cbf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451cb00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451cae8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451caa8 <col:23> 'int' lvalue ParmVar 0x5643b4506db0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451cac8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451cbd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451cbb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451cb20 <col:33> 'int' lvalue ParmVar 0x5643b4506db0 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451cb98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451cb80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451cb40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451cb60 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5643b451cc80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451cc60 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451ce28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451ce10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451cdf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451ce68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451ccf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5643b451ce80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451cd28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451ce98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451cd60 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5643b451ceb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451cdd8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451cdc0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451cd80 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5643b451d148 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5643b451d130 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5643b451d118 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5643b451d0e8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5643b451d090 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5643b451d060 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5643b451d010 <col:60, col:69> 'char const[48]' lvalue ->c 0x5643b450e510
|             |   `-CXXMemberCallExpr 0x5643b451cff0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5643b451cfc0 <col:60> '<bound member function type>' ->xanno 0x5643b4503658
|             |       `-CXXThisExpr 0x5643b451cfb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5643b451d078 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5643b451d040 <col:73> 'int' lvalue ParmVar 0x5643b4506db0 'i' 'int'
|-CXXMethodDecl 0x5643b45070b8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5643b4506f68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5643b4506fe0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5643b451d838 <col:41, line:577:5>
|   |-ParenExpr 0x5643b451d5c8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451d598 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451d2f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451d2c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451d1d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451d1b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451d178 <col:23> 'int' lvalue ParmVar 0x5643b4506f68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451d198 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451d2a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451d288 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451d1f0 <col:33> 'int' lvalue ParmVar 0x5643b4506f68 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451d268 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451d250 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451d210 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451d230 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5643b451d350 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451d330 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451d4f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451d4e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451d4c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451d538 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451d3c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5643b451d550 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451d3f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451d568 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451d430 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5643b451d580 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451d4a8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451d490 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451d450 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5643b451d818 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5643b451d7c8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5643b451d798 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5643b451d738 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5643b451d708 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5643b451d6b8 <col:47, col:56> 'char [48]' lvalue ->c 0x5643b450e510
|     |     |   `-CXXMemberCallExpr 0x5643b451d698 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5643b451d668 <col:47> '<bound member function type>' ->xanno 0x5643b45037f8
|     |     |       `-CXXThisExpr 0x5643b451d658 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5643b451d720 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5643b451d6e8 <col:60> 'int' lvalue ParmVar 0x5643b4506f68 'i' 'int'
|     `-ImplicitCastExpr 0x5643b451d800 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5643b451d7e0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5643b4506fe0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5643b4507278 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5643b4507180 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5643b451df68 <col:36, line:591:5>
|   |-ParenExpr 0x5643b451dca8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451dc78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451d9d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451d9a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451d8b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451d898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451d858 <col:23> 'int' lvalue ParmVar 0x5643b4507180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451d878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451d980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451d968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451d8d0 <col:33> 'int' lvalue ParmVar 0x5643b4507180 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451d948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451d930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451d8f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451d910 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5643b451da30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451da10 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451dbd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451dbc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451dba0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451dc18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451daa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5643b451dc30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451dad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451dc48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451db10 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5643b451dc60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451db88 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451db70 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451db30 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5643b451df58 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5643b451df40 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5643b451df28 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5643b451def8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5643b451de70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5643b451de40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5643b451ddf0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5643b450e510
|             |   `-CXXMemberCallExpr 0x5643b451ddd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5643b451dda0 <col:61> '<bound member function type>' ->xanno 0x5643b4503658
|             |       `-CXXThisExpr 0x5643b451dd90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5643b451de58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5643b451de20 <col:74> 'int' lvalue ParmVar 0x5643b4507180 'i' 'int'
|-CXXMethodDecl 0x5643b45074c8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5643b4507338 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5643b45073b0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5643b451e648 <col:42, line:606:5>
|   |-ParenExpr 0x5643b451e3d8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5643b451e3a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451e100 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451e0d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451dfe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451dfc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451df88 <col:23> 'int' lvalue ParmVar 0x5643b4507338 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451dfa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451e0b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5643b451e098 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451e000 <col:33> 'int' lvalue ParmVar 0x5643b4507338 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451e078 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451e060 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451e020 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5643b451e040 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5643b451e160 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451e140 <col:60> 'int' 0
|   |   `-CallExpr 0x5643b451e308 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5643b451e2f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451e2d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451e348 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451e1d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5643b451e360 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451e208 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451e378 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451e240 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5643b451e390 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451e2b8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451e2a0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451e260 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5643b451e628 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5643b451e5d8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5643b451e5a8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5643b451e548 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5643b451e518 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5643b451e4c8 <col:48, col:57> 'char [48]' lvalue ->c 0x5643b450e510
|     |     |   `-CXXMemberCallExpr 0x5643b451e4a8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5643b451e478 <col:48> '<bound member function type>' ->xanno 0x5643b45037f8
|     |     |       `-CXXThisExpr 0x5643b451e468 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5643b451e530 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5643b451e4f8 <col:61> 'int' lvalue ParmVar 0x5643b4507338 'i' 'int'
|     `-ImplicitCastExpr 0x5643b451e610 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5643b451e5f0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5643b45073b0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5643b4507660 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5643b4507590 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5643b451eeb8 <col:33, line:620:5>
|   |-ParenExpr 0x5643b451ec30 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5643b451ec00 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451e850 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451e820 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451e6c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451e6a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451e668 <col:23> 'int' lvalue ParmVar 0x5643b4507590 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451e688 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451e800 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5643b451e7e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451e6e0 <col:33> 'int' lvalue ParmVar 0x5643b4507590 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451e7c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451e7b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451e700 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5643b451e788 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5643b451e770 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5643b451e738 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5643b451e8b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451e890 <col:79> 'int' 0
|   |   `-CallExpr 0x5643b451eb60 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5643b451eb48 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451eb28 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451eba0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451e998 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5643b451ebb8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451e9e0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451ebd0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451ea18 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5643b451ebe8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451eb10 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451eaf8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451eab8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5643b451eea8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5643b451ee90 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5643b451ee78 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5643b451ee48 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5643b451edc0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5643b451ed90 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5643b451ed40 <col:67, col:76> 'char const[48]' lvalue ->c 0x5643b450e510
|             |   `-CXXMemberCallExpr 0x5643b451ed20 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5643b451ecf0 <col:67> '<bound member function type>' ->xanno 0x5643b4503658
|             |       `-CXXThisExpr 0x5643b451ece0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5643b451eda8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5643b451ed70 <col:80> 'int' lvalue ParmVar 0x5643b4507590 'i' 'int'
|-CXXMethodDecl 0x5643b4507878 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5643b4507720 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5643b45077a0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5643b451f6e0 <col:45, line:635:5>
|   |-ParenExpr 0x5643b451f428 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5643b451f3f8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5643b451f0c0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5643b451f090 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5643b451ef30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5643b451ef18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5643b451eed8 <col:23> 'int' lvalue ParmVar 0x5643b4507720 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5643b451eef8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5643b451f070 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5643b451f058 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5643b451ef50 <col:33> 'int' lvalue ParmVar 0x5643b4507720 'i' 'int'
|   |   |     `-BinaryOperator 0x5643b451f038 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5643b451f020 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5643b451ef70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643b4503a40 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5643b451eff8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5643b451efe0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5643b451efa8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5643b451f120 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643b451f100 <col:79> 'int' 0
|   |   `-CallExpr 0x5643b451f358 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5643b451f340 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643b451f320 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5643b4070160 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643b451f398 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451f190 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5643b451f3b0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643b451f1d8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5643b451f3c8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643b451f210 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5643b451f3e0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643b451f308 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643b451f2f0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643b451f2a8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5643b451f6c0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5643b451f628 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5643b451f5f8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5643b451f598 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5643b451f568 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5643b451f518 <col:54, col:63> 'char [48]' lvalue ->c 0x5643b450e510
|     |     |   `-CXXMemberCallExpr 0x5643b451f4f8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5643b451f4c8 <col:54> '<bound member function type>' ->xanno 0x5643b45037f8
|     |     |       `-CXXThisExpr 0x5643b451f4b8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5643b451f580 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5643b451f548 <col:67> 'int' lvalue ParmVar 0x5643b4507720 'i' 'int'
|     `-CXXConstCastExpr 0x5643b451f690 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5643b451f678 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5643b451f640 <col:91> 'const void *' lvalue ParmVar 0x5643b45077a0 'x' 'const void *'
|-CXXMethodDecl 0x5643b4507948 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5643b451f768 <col:34, line:640:5>
|   `-ReturnStmt 0x5643b451f758 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5643b451f740 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5643b451f710 <col:16> 'Packet *' lvalue ->_data_packet 0x5643b450f0c8
|         `-CXXThisExpr 0x5643b451f700 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5643b4507a88 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5643b45079f8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5643b4518828 <col:46> 'bool' true
|-CXXMethodDecl 0x5643b4507c08 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5643b4507b40 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5643b4507cb0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5643b4508460 <line:660:22> "" ""
| |-EnumConstantDecl 0x5643b4507db0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b45084d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4507d90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5643b4507d70 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5643b44fcf10 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5643b4507e40 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b45084e8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4507e20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5643b4507e00 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5643b44fcfa0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5643b4507ed0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b4508500 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4507eb0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5643b4507e90 <col:21> 'int' 0
| |-EnumConstantDecl 0x5643b4507f60 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b4508518 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4507f40 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5643b4507f20 <col:19> 'int' 16
| |-EnumConstantDecl 0x5643b4507ff0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b4508530 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4507fd0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5643b4507fb0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5643b4508080 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b4508548 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4508060 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5643b4508040 <col:19> 'int' 32
| |-EnumConstantDecl 0x5643b4508110 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b4508560 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b45080f0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5643b45080d0 <col:19> 'int' EnumConstant 0x5643b4507f60 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5643b45081a0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b4508578 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4508180 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5643b4508160 <col:19> 'int' EnumConstant 0x5643b4508080 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5643b4508270 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b4508590 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4508250 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5643b4508230 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5643b45081f0 <col:23> 'int' EnumConstant 0x5643b45081a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5643b4508210 <col:40> 'int' 2
| |-EnumConstantDecl 0x5643b4508340 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5643b45085a8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643b4508320 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5643b4508300 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5643b45082c0 <col:23> 'int' EnumConstant 0x5643b45081a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5643b45082e0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5643b4508410 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5643b45085c0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643b45083f0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5643b45083d0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5643b4508390 <col:23> 'int' EnumConstant 0x5643b45081a0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5643b45083b0 <col:40> 'int' 8
|-CXXMethodDecl 0x5643b4508600 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5643b45086a0 <col:68> "" ""
|-CXXMethodDecl 0x5643b4508738 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5643b45087d8 <col:45> "" ""
|-CXXMethodDecl 0x5643b4508870 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5643b4508910 <col:57> "" ""
|-CXXMethodDecl 0x5643b45089a8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5643b4508a48 <col:45> "" ""
|-CXXMethodDecl 0x5643b4508ae0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5643b4508b80 <col:57> "" ""
|-CXXMethodDecl 0x5643b4508c10 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5643b4508cb0 <col:51> "" ""
|-CXXMethodDecl 0x5643b4508d40 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5643b4508de0 <col:63> "" ""
|-CXXMethodDecl 0x5643b4508e70 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5643b4508f10 <col:53> "" ""
|-CXXMethodDecl 0x5643b4508fa0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5643b4509040 <col:65> "" ""
|-CXXMethodDecl 0x5643b4509158 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5643b45090c8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5643b4509200 <col:61> "" ""
|-CXXMethodDecl 0x5643b4509398 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5643b4509288 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5643b4509300 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5643b4509448 <col:67> "" ""
|-CXXMethodDecl 0x5643b4509560 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5643b45094d0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5643b4509608 <col:63> "" ""
|-CXXMethodDecl 0x5643b45097a0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5643b4509690 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5643b4509708 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5643b4509850 <col:69> "" ""
|-CXXMethodDecl 0x5643b4509968 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5643b45098d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5643b4509a10 <col:63> "" ""
|-CXXMethodDecl 0x5643b450c0e8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5643b450bfd8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5643b450c050 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5643b450c198 <col:69> "" ""
|-CXXMethodDecl 0x5643b450c2b0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5643b450c220 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5643b450c358 <col:62> "" ""
|-CXXMethodDecl 0x5643b450c4f0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5643b450c3e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5643b450c458 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5643b450c5a0 <col:68> "" ""
|-CXXMethodDecl 0x5643b450c6b8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5643b450c628 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5643b450c760 <col:63> "" ""
|-CXXMethodDecl 0x5643b450c8f8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5643b450c7e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5643b450c860 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5643b450c9a8 <col:69> "" ""
|-CXXMethodDecl 0x5643b450ca38 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5643b450cad8 <col:64> "" ""
|-CXXMethodDecl 0x5643b450cb68 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5643b450cc08 <col:52> "" ""
|-CXXMethodDecl 0x5643b450cc98 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5643b450cd38 <col:67> "" ""
|-CXXMethodDecl 0x5643b450cdc8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5643b450ce68 <col:55> "" ""
|-CXXMethodDecl 0x5643b450cf80 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5643b450cef0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5643b450d028 <col:58> "" ""
|-CXXMethodDecl 0x5643b450d1c0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5643b450d0b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5643b450d128 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5643b450d270 <col:62> "" ""
|-CXXMethodDecl 0x5643b450d388 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5643b450d2f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5643b450d430 <col:58> "" ""
|-CXXMethodDecl 0x5643b450d5c8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5643b450d4b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5643b450d530 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5643b450d678 <col:62> "" ""
|-CXXMethodDecl 0x5643b450d790 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5643b450d700 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5643b450d838 <col:60> "" ""
|-CXXMethodDecl 0x5643b450d9d0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5643b450d8c0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5643b450d938 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5643b450da80 <col:64> "" ""
|-CXXMethodDecl 0x5643b450db98 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5643b450db08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5643b450dc40 <col:58> "" ""
|-CXXMethodDecl 0x5643b450ddd8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5643b450dcc8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5643b450dd40 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5643b450de88 <col:62> "" ""
|-CXXMethodDecl 0x5643b450dfa0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5643b450df10 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5643b450e048 <col:59> "" ""
|-CXXMethodDecl 0x5643b450e1e0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5643b450e0d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5643b450e148 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5643b450e290 <col:63> "" ""
|-AccessSpecDecl 0x5643b450e300 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5643b450e328 prev 0x5643b4503530 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5643b450e420 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5643b450e510 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5643b450e638 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5643b450e7b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5643b450e938 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5643b450eab8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5643b451f8e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5643b4520158 <col:11>
| |-CXXDestructorDecl 0x5643b451f9c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5643b451faf8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5643b451faf8
| | `-ParmVarDecl 0x5643b451fc08 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5643b451fca8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5643b451fca8
| | `-ParmVarDecl 0x5643b451fdb8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5643b4522b78 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5643b4522c88 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5643b4522f08 <col:11>
| |   `-ReturnStmt 0x5643b4522ef8 <col:11>
| |     `-UnaryOperator 0x5643b4522ee0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5643b4522ed0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5643b4522cf8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5643b4522cf8
|   `-ParmVarDecl 0x5643b4522e08 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5643b450eb20 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5643b450ec38 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5643b450ecd8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5643b450ed40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5643b450eda8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5643b450ee10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5643b450ee70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5643b450ef30 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5643b450ef90 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5643b450eff0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5643b451f7f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5643b450ecd8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5643b4520168 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5643b45201c0 <col:12>
| |-CXXConstructorDecl 0x5643b451fe28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5643b451fe28
| | `-ParmVarDecl 0x5643b451ff38 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5643b451ffd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5643b451ffd8
| | `-ParmVarDecl 0x5643b45200e8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5643b4522260 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5643b450f068 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5643b450f0c8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5643b450f130 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5643b450f198 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5643b450f200 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5643b450f268 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5643b450f2c8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5643b450f328 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5643b450f390 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5643b450f418 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5643b450f068 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5643b451f790 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5643b450f2c8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5643b45201d0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5643b4520230 <col:21, line:755:5>
|-CXXConstructorDecl 0x5643b450f5b8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5643b450f4f8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5643b450f6b0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5643b450f898 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5643b450f7a0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5643b450fb68 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5643b450f950 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5643b450f9c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5643b450fa40 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b450fd88 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5643b450fc38 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5643b450fcb0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5643b4518368 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5643b450fe48 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5643b450fec0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5643b450ff38 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5643b45184c0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5643b4518430 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643b4518608 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5643b4518578 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5643b4518700 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>
