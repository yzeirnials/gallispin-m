
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605845c0968 prev 0x5605845b8108 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605845c0a60 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5605845c0af0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5605845c0b68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5605845c0c28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5605845c0cf0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5605845c0e68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5605845c0da0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5605845c0f10 <col:24>
| `-OptimizeNoneAttr 0x5605845c0f68 <col:34>
|-CXXMethodDecl 0x5605845c0fb0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5605845c1268 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5605845c1060 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5605845c10d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5605845c1158 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5605845c1320 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5605845c1358 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5605845c13c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5605845c1448 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5605845c1768 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5605845c1500 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5605845c1578 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5605845c15f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5605845c1670 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5605845c1880 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5605845c91f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5605845c91f8
| `-ParmVarDecl 0x5605845c9308 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5605845c93a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5605845c93a8
| `-ParmVarDecl 0x5605845c94b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5605846cd400 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605845b3980 prev 0x5605845b3700 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5605845b3a78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5605845b3b08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5605845b3b68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5605845b3c58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5605845b3d58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5605845b3f28 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5605845b3dd8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5605845b3e50 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5605845b40b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5605845b3ff0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5605845b4160 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5605845b4298 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5605845b41d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5605845b4438 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5605845b4378 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5605845b45d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5605845b4518 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5605845b4680 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5605845b4780 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5605845b4860 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845b4760 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5605845b4740 <col:26> 'int' 1
| `-EnumConstantDecl 0x5605845b4810 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5605845b4878 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605845b47f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5605845b47d0 <col:44> 'int' 2
|-CXXMethodDecl 0x5605845b49c0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5605845b48a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5605845b4928 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5605845b4b18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5605845b4a88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5605845b4d58 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5605845b4bd8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5605845b4c50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5605845b4e08 <col:20>
| `-OptimizeNoneAttr 0x5605845b4e60 <col:30>
|-CXXMethodDecl 0x5605845b4f68 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5605845b4ea0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5605845b5010 <col:20>
| `-OptimizeNoneAttr 0x5605845b5068 <col:30>
|-CXXMethodDecl 0x5605845b50b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5605845b5180 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5605845b5298 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5605845b5320 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5605845b53a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5605845b5430 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5605845b54b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5605845b5548 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5605845b5608 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5605845b5690 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5605845b5718 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5605845b57a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5605845b5828 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5605845b58b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5605845b5940 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5605845b5a00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5605845b5a90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5605845b5be0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5605845b5b48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5605845b5d70 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5605845b5ca0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5605845b6020 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5605845b5e28 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5605845b5ea8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5605845b5f28 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5605845b60d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5605845b61e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605845b6470 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845b61c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5605845b61a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5605845b6270 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605845b6488 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845b6250 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5605845b6230 <col:32> 'int' 20
| |-EnumConstantDecl 0x5605845b6300 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605845b64a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845b62e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5605845b62c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5605845b6390 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5605845b64b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845b6370 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5605845b6350 <col:35> 'int' 100
| `-EnumConstantDecl 0x5605845b6420 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5605845b64d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605845b6400 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5605845b63e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5605845b6510 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5605845b6950 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5605845b67c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5605845b6838 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605845b6a20 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5605845b6ba0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5605845b6ad0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605845b6da8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5605845b6c58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5605845b6cd0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605845b6ea8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5605845b6f48 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5605845b7010 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605845b70a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5605845b72d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845b7080 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5605845b7060 <col:36> 'int' EnumConstant 0x5605845b7010 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605845b70f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605845b7140 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605845b7190 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605845b71e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5605845b7230 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5605845b7280 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5605845b73b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5605845b72f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5605845b7480 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5605845b7540 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5605845b7600 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5605845b76c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5605845b77d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5605845b78a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5605845b7a20 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5605845b7950 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5605845b7b48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5605845b7d48 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5605845b7bf8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5605845b7c78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5605845c5698 <col:54, line:127:5>
|   |-ParenExpr 0x5605845c5548 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5605845c5518 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5605845c5208 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5605845c51e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5605845c51c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5605845c51b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5605845c5180 <col:31> 'Router *' lvalue ->_router 0x5605845c3060
|   |   |         `-CXXThisExpr 0x5605845c5170 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5605845c5268 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605845c5248 <col:48> 'int' 0
|   |   `-CallExpr 0x5605845c5478 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5605845c5460 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5605845c5440 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605845c54b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605845c52d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5605845c54d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605845c52f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5605845c54e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605845c5330 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5605845c5500 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605845c5428 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605845c5410 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605845c53c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5605845c55e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5605845c5578 <col:9> 'Router *' lvalue ->_router 0x5605845c3060
|   | | `-CXXThisExpr 0x5605845c5568 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5605845c55c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5605845c55a8 <col:19> 'Router *' lvalue ParmVar 0x5605845b7bf8 'r' 'Router *'
|   `-BinaryOperator 0x5605845c5678 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5605845c5610 <col:9> 'int' lvalue ->_eindex 0x5605845c30c8
|     | `-CXXThisExpr 0x5605845c5600 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5605845c5660 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5605845c5640 <col:19> 'int' lvalue ParmVar 0x5605845b7c78 'eindex' 'int'
|-CXXMethodDecl 0x5605845b7ed0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5605845b7e08 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5605845b7fa0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5605845b8068 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5605845b8108 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5605845b8358 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5605845b81d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5605845b8250 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5605845b8408 <col:20>
| `-OptimizeNoneAttr 0x5605845b8460 <col:30>
|-CXXMethodDecl 0x5605845b8568 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5605845b84a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5605845b8610 <col:20>
| `-OptimizeNoneAttr 0x5605845b8668 <col:30>
|-CXXMethodDecl 0x5605845b8738 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5605845b86a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5605845b87e0 <col:20>
| `-OptimizeNoneAttr 0x5605845b8838 <col:30>
|-CXXMethodDecl 0x5605845b89c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5605845b8870 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5605845b88f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5605845b8b58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5605845b8a90 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5605845b8ca8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5605845b8c18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5605845b8df8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5605845b8d68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5605845b8f48 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5605845b8eb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5605845b9208 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5605845b9000 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5605845b9080 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5605845b9128 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5605845b92e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5605845b93a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5605845b9670 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5605845b9520 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5605845b9598 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5605845b9798 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5605845b9970 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5605845b9850 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5605845b98d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5605845b9b58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5605845b9a38 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5605845b9ab8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5605845b9ec8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5605845b9c18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5605845b9c90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5605845b9d10 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5605845c4c80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5605845c4c60 <col:106> 'int' 0
| `-ParmVarDecl 0x5605845b9d88 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605845c4cb8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605845c4c98 <col:126> 'int' 0
|-CXXMethodDecl 0x5605845ba268 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605845b9f98 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5605845ba030 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5605845ba0b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5605845ba128 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605845c4cf0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605845c4cd0 <col:114> 'int' 0
|-CXXMethodDecl 0x5605845ba5f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605845ba340 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5605845ba3b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5605845ba438 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5605845c4d08 <col:96> 'int' 0
| `-ParmVarDecl 0x5605845ba4b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605845c4d48 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605845c4d28 <col:116> 'int' 0
|-CXXMethodDecl 0x5605845ba978 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5605845ba6c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5605845ba740 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5605845ba7c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5605845c4d80 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5605845c4d60 <col:109> 'int' 0
| `-ParmVarDecl 0x5605845ba838 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605845c4db8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605845c4d98 <col:129> 'int' 0
|-CXXMethodDecl 0x5605845bacf8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605845baa48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5605845baac0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5605845bab40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5605845babb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605845c4df0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605845c4dd0 <col:117> 'int' 0
|-CXXMethodDecl 0x5605845bb088 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5605845badd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bae48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5605845baec8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5605845c4e08 <col:99> 'int' 0
| `-ParmVarDecl 0x5605845baf40 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5605845c4e48 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5605845c4e28 <col:119> 'int' 0
|-CXXMethodDecl 0x5605845bb4a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5605845bb158 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5605845bb1d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5605845bb250 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5605845bb2d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5605845c4e80 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5605845c4e60 <col:108> 'int' 0
| `-ParmVarDecl 0x5605845bb350 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5605845c4eb8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5605845c4e98 <col:141> 'int' 0
|-CXXMethodDecl 0x5605845bb8c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5605845bb580 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5605845bb600 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5605845bb678 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5605845bb6f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5605845bb778 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5605845c4ed0 <col:121> 'int' 0
|-CXXMethodDecl 0x5605845bbcf8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5605845bb9a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5605845bba28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5605845bbaa0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5605845bbb20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5605845c4ef0 <col:98> 'int' 0
| `-ParmVarDecl 0x5605845bbba0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5605845c4f10 <col:123> 'int' 0
|-CXXMethodDecl 0x5605845bbfc0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5605845bbdd0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5605845bbe50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5605845bbed0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5605845c4f30 <col:80> 'int' 0
|-EnumDecl 0x5605845bc078 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5605845bc180 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605845bc410 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845bc160 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5605845bc140 <col:42> 'int' 1
| |-EnumConstantDecl 0x5605845bc210 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605845bc428 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845bc1f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5605845bc1d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5605845bc2a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605845bc440 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845bc280 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5605845bc260 <col:44> 'int' 4
| |-EnumConstantDecl 0x5605845bc330 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5605845bc458 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845bc310 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5605845bc2f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5605845bc3c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5605845bc470 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605845bc3a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5605845bc380 <col:34> 'int' 6
|-CXXMethodDecl 0x5605845bc728 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5605845bc498 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5605845bc538 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5605845bc5b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5605845bc630 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5605845c4fe8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5605845c4fd0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5605845c4fb8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5605845c4f98 <col:98, col:105> 'String' (CXXTemporary 0x5605845c4f98)
|           `-CXXTemporaryObjectExpr 0x5605845c4f60 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5605845bc9c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5605845bc7f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5605845bc870 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5605845bc8e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5605845c5098 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5605845c5080 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5605845c5068 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5605845c5048 <col:94, col:101> 'String' (CXXTemporary 0x5605845c5048)
| |         `-CXXTemporaryObjectExpr 0x5605845c5010 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5605845c5880 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5605845c57f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5605845c57c8 <col:9> '<bound member function type>' ->add_task_handlers 0x5605845bc728
|     | `-CXXThisExpr 0x5605845c57b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5605845c5838 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5605845c5738 <col:27> 'Task *' lvalue ParmVar 0x5605845bc7f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5605845c5850 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5605845c5758 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5605845bc870 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5605845c5868 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5605845c5778 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5605845bc3c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5605845c5798 <col:62> 'const String' lvalue ParmVar 0x5605845bc8e8 'prefix' 'const String &'
|-CXXMethodDecl 0x5605845bcbd8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5605845bca90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5605845bcb08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5605845c5148 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5605845c5130 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5605845c5118 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5605845c50f8 <col:70, col:77> 'String' (CXXTemporary 0x5605845c50f8)
| |         `-CXXTemporaryObjectExpr 0x5605845c50c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5605845c5a58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5605845c59d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5605845c59a0 <col:9> '<bound member function type>' ->add_task_handlers 0x5605845bc728
|     | `-CXXThisExpr 0x5605845c5990 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5605845c5a10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5605845c5910 <col:27> 'Task *' lvalue ParmVar 0x5605845bca90 'task' 'Task *'
|     |-ImplicitCastExpr 0x5605845c5a28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5605845c5930 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5605845c5a40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5605845c5950 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5605845bc3c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5605845c5970 <col:57> 'const String' lvalue ParmVar 0x5605845bcb08 'prefix' 'const String &'
|-CXXMethodDecl 0x5605845bceb8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5605845bcca0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bcd20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bcd98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5605845bd168 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5605845bcf88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bd008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bd088 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5605845bd458 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5605845bd238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bd2b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bd330 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5605845bd708 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5605845bd528 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bd5a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bd628 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5605845bd9b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5605845bd7d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bd858 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bd8d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5605845bdc68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5605845bda88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bdb08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bdb80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5605845bdf18 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5605845bdd38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bddb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bde38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5605845be228 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5605845be040 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845be0c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845be140 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5605845be508 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5605845be2f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845be378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845be420 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5605845be7e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5605845be5d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845be658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845be700 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5605845bea50 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5605845be8b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5605845be938 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5605845be9b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5605845becf8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5605845beb20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5605845beba0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5605845bec18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5605845befa8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5605845bedc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bee48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845beec8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5605845bf258 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5605845bf078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bf0f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bf170 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5605845bf508 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5605845bf328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bf3a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bf420 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5605845bf7d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5605845bf5d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bf658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5605845bf6f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5605845bfb08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5605845bf8a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5605845bf928 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5605845bf9a0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5605845bfa18 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5605845c5160 <col:93> 'bool' false
|-CXXMethodDecl 0x5605845bfcf0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5605845bfbd8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5605845bfc58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5605845bfec8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5605845bfdb0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5605845bfe30 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5605845c01a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5605845bff88 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5605845c0000 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5605845c0080 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5605845c00f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5605845c0498 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5605845c0278 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5605845c02f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5605845c0370 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5605845c03e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5605845c06d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5605845c0570 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5605845c05f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5605845c08b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5605845c0798 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5605845c0818 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5605845c0968 prev 0x5605845b8108 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5605845c0a60 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5605845c0af0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5605845c0b68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5605845c0c28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5605845c0cf0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5605845c0e68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5605845c0da0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5605845c0f10 <col:24>
| | `-OptimizeNoneAttr 0x5605845c0f68 <col:34>
| |-CXXMethodDecl 0x5605845c0fb0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5605845c1268 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5605845c1060 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5605845c10d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5605845c1158 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5605845c1320 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5605845c1358 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5605845c13c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5605845c1448 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5605845c1768 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5605845c1500 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5605845c1578 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5605845c15f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5605845c1670 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5605845c1880 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5605845c91f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5605845c91f8
| | `-ParmVarDecl 0x5605845c9308 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5605845c93a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5605845c93a8
| | `-ParmVarDecl 0x5605845c94b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5605846cd400 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5605845c18f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5605845c1998 <col:38> "" ""
|-CXXMethodDecl 0x5605845c1a28 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5605845c1ac8 <col:44> "" ""
|-AccessSpecDecl 0x5605845c1b38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5605845c1b60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5605845c1c60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5605845c1cb0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605845c1c40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5605845c1c20 <col:27> 'int' 4
|-FieldDecl 0x5605845c1d68 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5605845c1f18 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5605845c1fd0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5605845c3060 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5605845c30c8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5605845c3218 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5605845c3158 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5605845c33c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5605845c32d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5605845c35a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5605845c3488 <col:20> col:23 'int'
| `-ParmVarDecl 0x5605845c3508 <col:25> col:28 'int'
|-CXXMethodDecl 0x5605845c3850 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5605845c3670 <col:23> col:26 'int'
| |-ParmVarDecl 0x5605845c36f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5605845c3768 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5605845c3908 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5605845c39d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5605845c3a20 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5605845c3a70 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5605845c3c50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5605845c3b00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5605845c3b78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605845c3ef8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5605845c3d18 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5605845c3d98 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5605845c3e10 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5605845c4118 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5605845c3fc8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5605845c4048 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5605845c4450 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5605845c41d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5605845c4258 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5605845c42d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5605845c4350 <col:57> col:60 'int'
|-CXXMethodDecl 0x5605845c4638 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5605845c4520 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5605845c45a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5605845c4788 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5605845c46f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5605845c4b08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5605845c4848 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5605845c48c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5605845c4940 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5605845c49c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5605845c4c20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct click_ip _iph
   108:0-3 |     unsigned int ip_hl
   108:4-7 |     unsigned int ip_v
       109 |     uint8_t ip_tos
       110 |     uint16_t ip_len
       112 |     uint16_t ip_id
       114 |     uint16_t ip_off
       116 |     uint8_t ip_ttl
       117 |     uint8_t ip_p
       118 |     uint16_t ip_sum
       120 |     struct in_addr ip_src
       120 |       in_addr_t s_addr
       124 |     struct in_addr ip_dst
       124 |       in_addr_t s_addr
       128 |   class atomic_uint32_t _id
       128 |     uint32_t _val
           | [sizeof=136, dsize=132, align=8,
           |  nvsize=132, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605842e8558 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605842e8678 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5605842e8740 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5605843b8d10 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5605843be028 <col:8>
|-CXXConstructorDecl 0x5605843b8e18 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5605843b8e18
| `-ParmVarDecl 0x5605843b8f28 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5605843b8fc8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605843b90d8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5605842e8740 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843be240 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5605843be210 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5605842e8740
| |     `-CXXStaticCastExpr 0x5605843be1e0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5605843be1b0 <col:8> 'in_addr' lvalue ParmVar 0x5605843b90d8 '' 'in_addr &&'
| `-CompoundStmt 0x5605843be288 <col:8>
`-CXXDestructorDecl 0x5605843be4c0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605843b09f8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5605843b0b18 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5605843b0c00 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5605843b0be0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5605843b0ba8 <col:22> 'int' 4
|-FieldDecl 0x5605843b0ca8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x5605843b0c88 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5605843b0c50 <col:21> 'int' 4
|-FieldDecl 0x5605843b0d08 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5605843b0d68 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5605843b0dc8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5605843b0e28 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5605843b0e88 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5605843b0ee8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5605843b0f48 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5605843b0fb8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
|-FieldDecl 0x5605843b1028 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'
|-CXXConstructorDecl 0x5605846cce50 <line:23:8> col:8 implicit used click_ip 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5605843b0fb8 'ip_src' 'struct in_addr':'in_addr'
| | `-CXXConstructExpr 0x5605846cd288 <col:8> 'struct in_addr':'in_addr' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5605843b1028 'ip_dst' 'struct in_addr':'in_addr'
| | `-CXXConstructExpr 0x5605846cd2d8 <col:8> 'struct in_addr':'in_addr' 'void () noexcept'
| `-CompoundStmt 0x5605846cd338 <col:8>
|-CXXConstructorDecl 0x5605846ccf58 <col:8> col:8 implicit constexpr click_ip 'void (const click_ip &)' inline default trivial noexcept-unevaluated 0x5605846ccf58
| `-ParmVarDecl 0x5605846cd068 <col:8> col:8 'const click_ip &'
`-CXXConstructorDecl 0x5605846cd108 <col:8> col:8 implicit constexpr click_ip 'void (click_ip &&)' inline default trivial noexcept-unevaluated 0x5605846cd108
  `-ParmVarDecl 0x5605846cd218 <col:8> col:8 'click_ip &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560584372430 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560584372548 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5605843725d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5605843726a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x560584372790 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5605843729a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560584372850 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584372b58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x560584372a60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x560584372ca0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x560584372c10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x560584372de8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560584372d58 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584372f30 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560584372ea0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584372ff8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x560584373140 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5605843730b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x560584373208 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x560584373350 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5605843732c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5605843734c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x560584373408 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584373610 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x560584373580 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605843736d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x560584373898 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560584373788 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560584373800 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584373ae8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560584373958 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605843739d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560584373b98 <col:86> "" ""
|-CXXMethodDecl 0x560584373e08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x560584373c78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x560584373cf0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584373fb8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x560584373ec8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x560584374168 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x560584374070 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x560584374438 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x560584374220 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x560584374298 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560584374310 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584374718 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x560584374500 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x560584374578 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5605843745f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5605843747d0 <col:115> "" ""
|-AccessSpecDecl 0x560584374840 <line:84:3, col:10> col:3 private
|-FieldDecl 0x560584374878 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560584374d80 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x560584374d80
| `-ParmVarDecl 0x560584374e88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x560584374f28 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x560584374f28
| `-ParmVarDecl 0x560584375038 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5605843aa668 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56058459d470 <col:7>
|-CXXConstructorDecl 0x5605843aa740 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5605843aa740
| `-ParmVarDecl 0x5605843aa858 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5605843aa8c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5605843aa8c8
| `-ParmVarDecl 0x5605843aa9d8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56058459fe70 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605845cc368 <../elements/ip/ipencap.hh:85:1, line:108:1> line:85:7 class IPEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5605845cc4c8 <col:1, col:7> col:7 implicit referenced class IPEncap
|-AccessSpecDecl 0x5605845cc558 <col:34, col:40> col:34 public
|-CXXConstructorDecl 0x5605845cc5e0 <line:87:3, col:11> col:3 IPEncap 'void ()'
|-CXXDestructorDecl 0x5605845cc6d0 <line:88:3, col:12> col:3 ~IPEncap 'void ()' noexcept-unevaluated 0x5605845cc6d0
| `-Overrides: [ 0x5605845b3c58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5605845cc800 <line:90:3, col:54> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5605845b50b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5605845cd8e0 <col:34, col:54>
|   `-ReturnStmt 0x5605845cd8d0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605845cd8b8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5605845cd898 <col:43> 'const char [8]' lvalue "IPEncap"
|-CXXMethodDecl 0x5605845cc8c8 <line:91:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5605845b5180 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5605845cd940 <col:34, col:54>
|   `-ReturnStmt 0x5605845cd930 <col:36, col:43>
|     `-ImplicitCastExpr 0x5605845cd918 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5605845cd8f8 <col:43> 'const char []' lvalue Var 0x5605845b5430 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5605845ccba0 <line:93:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5605845b6950 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5605845cca50 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5605845ccac8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5605845ccc70 <line:94:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5605845b93a0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5605845cd978 <col:37, col:52>
|   `-ReturnStmt 0x5605845cd968 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x5605845cd958 <col:46> 'bool' true
|-CXXMethodDecl 0x5605845ccdb8 <line:95:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5605845b6ba0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5605845ccd20 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5605845cce80 <line:96:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5605845b6a20 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5605845ccfc0 <line:98:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5605845b4298 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5605845ccf30 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x5605845cd068 <line:100:2, col:9> col:2 private
|-FieldDecl 0x5605845cd0a0 <line:102:3, col:12> col:12 _iph 'click_ip'
|-FieldDecl 0x5605845cd100 <line:103:3, col:19> col:19 _id 'atomic_uint32_t'
|-CXXMethodDecl 0x5605845cd2b8 <line:105:3, col:45> col:15 update_cksum 'void (click_ip *, int) const' inline
| |-ParmVarDecl 0x5605845cd160 <col:28, col:37> col:38 'click_ip *'
| `-ParmVarDecl 0x5605845cd1e0 <col:40> col:43 'int'
|-CXXMethodDecl 0x5605845cd490 <line:106:3, col:47> col:17 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5605845cd378 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x5605845cd3f8 <col:41, col:46> col:47 'void *'
|-CXXConstructorDecl 0x5605845cd568 <line:85:7> col:7 implicit IPEncap 'void (const IPEncap &)' inline default_delete noexcept-unevaluated 0x5605845cd568
| `-ParmVarDecl 0x5605845cd678 <col:7> col:7 'const IPEncap &'
`-CXXMethodDecl 0x5605845cd718 <col:7> col:7 implicit operator= 'IPEncap &(const IPEncap &)' inline default_delete noexcept-unevaluated 0x5605845cd718
  `-ParmVarDecl 0x5605845cd828 <col:7> col:7 'const IPEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.IPEncap = type { %class.Element.base, %struct.click_ip, %class.atomic_uint32_t, [4 x i8] }
  NonVirtualBaseLLVMType:%class.IPEncap.base = type { %class.Element.base, %struct.click_ip, %class.atomic_uint32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560584386810 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x560584386928 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5605843869c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x560584386a28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x560584386a88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x560584386b38 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560584386e40 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560584386f58 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x560584387000 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x560584387068 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5605843870f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56058438d190 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56058438d5c8 <col:12>
|-CXXConstructorDecl 0x56058438d298 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56058438d3a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560584387000 'data' 'const char *'
| | `-ImplicitCastExpr 0x56058438fb50 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56058438fb20 <col:12> 'const char *const' lvalue .data 0x560584387000
| |     `-DeclRefExpr 0x56058438fb00 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058438d3a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560584387068 'length' 'int'
| | `-ImplicitCastExpr 0x56058438fbe0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56058438fbb0 <col:12> 'const int' lvalue .length 0x560584387068
| |     `-DeclRefExpr 0x56058438fb90 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058438d3a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5605843870f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56058438fc70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56058438fc40 <col:12> 'String::memo_t *const' lvalue .memo 0x5605843870f8
| |     `-DeclRefExpr 0x56058438fc20 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058438d3a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x56058438fcc8 <col:12>
|-CXXConstructorDecl 0x56058438d448 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56058438d448
| `-ParmVarDecl 0x56058438d558 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x560584392ab0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56058439e4c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56058439e5d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56058439eaf0 <col:12>
|   |-BinaryOperator 0x56058439e908 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56058439e8c0 <col:12> 'const char *' lvalue ->data 0x560584387000
|   | | `-CXXThisExpr 0x56058439e8b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56058439e8f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56058439e880 <col:12> 'const char *const' lvalue .data 0x560584387000
|   |     `-DeclRefExpr 0x56058439e860 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058439e5d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56058439e9d0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56058439e988 <col:12> 'int' lvalue ->length 0x560584387068
|   | | `-CXXThisExpr 0x56058439e978 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56058439e9b8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56058439e948 <col:12> 'const int' lvalue .length 0x560584387068
|   |     `-DeclRefExpr 0x56058439e928 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058439e5d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56058439ea98 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56058439ea50 <col:12> 'String::memo_t *' lvalue ->memo 0x5605843870f8
|   | | `-CXXThisExpr 0x56058439ea40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56058439ea80 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56058439ea10 <col:12> 'String::memo_t *const' lvalue .memo 0x5605843870f8
|   |     `-DeclRefExpr 0x56058439e9f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058439e5d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56058439eae0 <col:12>
|     `-UnaryOperator 0x56058439eac8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56058439eab8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56058439e648 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56058439e648
  `-ParmVarDecl 0x56058439e758 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058437dd80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56058437de98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56058437df28 <col:16, col:22> col:16 public
|-TypedefDecl 0x56058437df68 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x560584051fd0 'const char *'
|   `-QualType 0x560584051521 'const char' const
|     `-BuiltinType 0x560584051520 'char'
|-TypedefDecl 0x56058437dff0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56058437dfc0 'String::const_iterator' sugar
|   |-Typedef 0x56058437df68 'const_iterator'
|   `-PointerType 0x560584051fd0 'const char *'
|     `-QualType 0x560584051521 'const char' const
|       `-BuiltinType 0x560584051520 'char'
|-TypedefDecl 0x56058437e160 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56058437e0d0 'int (String::*)() const'
|   |-RecordType 0x56058437de10 'String'
|   | `-CXXRecord 0x56058437dd80 'String'
|   `-ParenType 0x56058437e070 'int () const' sugar
|     `-FunctionProtoType 0x560584352c10 'int () const' const cdecl
|       `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058437e1c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5605841a77f0 'int64_t' sugar
|   |-Typedef 0x5605840ba390 'int64_t'
|   `-TypedefType 0x560584093630 '__int64_t' sugar
|     |-Typedef 0x560584093208 '__int64_t'
|     `-BuiltinType 0x5605840515a0 'long'
|-TypedefDecl 0x56058437e230 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5605841a7710 'uint64_t' sugar
|   |-Typedef 0x5605840ba530 'uint64_t'
|   `-TypedefType 0x5605840936c0 '__uint64_t' sugar
|     |-Typedef 0x560584093278 '__uint64_t'
|     `-BuiltinType 0x560584051640 'unsigned long'
|-TypedefDecl 0x56058437e2c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56058437e290 'String::intmax_t' sugar
|   |-Typedef 0x56058437e1c8 'intmax_t'
|   `-TypedefType 0x5605841a77f0 'int64_t' sugar
|     |-Typedef 0x5605840ba390 'int64_t'
|     `-TypedefType 0x560584093630 '__int64_t' sugar
|       |-Typedef 0x560584093208 '__int64_t'
|       `-BuiltinType 0x5605840515a0 'long'
|-TypedefDecl 0x56058437e350 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56058437e320 'String::uintmax_t' sugar
|   |-Typedef 0x56058437e230 'uintmax_t'
|   `-TypedefType 0x5605841a7710 'uint64_t' sugar
|     |-Typedef 0x5605840ba530 'uint64_t'
|     `-TypedefType 0x5605840936c0 '__uint64_t' sugar
|       |-Typedef 0x560584093278 '__uint64_t'
|       `-BuiltinType 0x560584051640 'unsigned long'
|-CXXConstructorDecl 0x56058437e410 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56058437e5b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56058437e4f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56058437e768 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56058437e6a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56058437e8c0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56058437e830 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56058437ead8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56058437e988 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56058437ea08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56058437ecf8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56058437eba8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56058437ec28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56058437ef18 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56058437edc8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56058437ee48 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56058437f138 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56058437efe8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56058437f068 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56058437f2c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56058437f200 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56058437f448 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56058437f388 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56058437f5d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56058437f510 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56058437f730 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56058437f6a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56058437f888 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56058437f7f8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56058437f9e0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56058437f950 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56058437fb68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56058437faa8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56058437fcf8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56058437fc30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56058437fe88 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56058437fdc0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x560584380018 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56058437ff50 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x560584380110 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x560584380238 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5605843803b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5605843802f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x560584380508 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x560584380478 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5605843805c0 <col:63> "" ""
|-CXXMethodDecl 0x560584380708 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x560584380648 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x560584380918 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5605843807c8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x560584380848 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x560584380b38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5605843809e0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x560584380a60 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x560584380e18 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x560584380bf8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x560584380c78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56058438cc60 <col:55> 'int' 10
| `-ParmVarDecl 0x560584380cf0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56058438cc80 <col:76> 'bool' true
|-CXXMethodDecl 0x5605843810f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x560584380ee0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x560584380f60 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56058438cc90 <col:56> 'int' 10
| `-ParmVarDecl 0x560584380fd8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56058438ccb0 <col:77> 'bool' true
|-CXXMethodDecl 0x560584381200 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5605843812c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x560584381390 <line:81:5, col:60> col:52 used c_str 'const char *() const'
| |-NoInlineAttr 0x560584381430 <col:20>
| `-OptimizeNoneAttr 0x560584381488 <col:30>
|-CXXConversionDecl 0x560584381578 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x560584381648 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x560584381708 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5605843817f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5605843818b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x560584381a38 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x560584381970 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x560584381b88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x560584381af8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x560584381c78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x560584381d38 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x560584381f88 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x560584381df0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x560584381e70 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5605843821e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x560584382050 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5605843820d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5605843822b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5605843824c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x560584382370 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5605843823f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5605843826e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x560584382590 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x560584382610 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x560584382878 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5605843827b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x560584382968 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x560584382ad8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x560584382a18 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560584382ce8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x560584382b98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x560584382c18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x560584382f00 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x560584382da8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x560584382e20 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x560584383090 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x560584382fc0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5605843832b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x560584383150 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5605843831d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x560584383400 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x560584383370 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5605843835d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5605843834c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x560584383540 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x560584383728 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x560584383698 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x560584383940 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5605843837e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x560584383860 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56058438ccc0 <col:39> 'int' 0
|-CXXMethodDecl 0x560584383b60 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x560584383a00 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x560584383a80 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56058438cce0 <col:48> 'int' 0
|-CXXMethodDecl 0x560584383d40 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x560584383c20 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x560584383ca0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56058438cd00 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x560584383e10 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x560584383ed0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x560584383f90 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x560584384050 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x560584384110 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5605843842b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5605843841c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x560584384438 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x560584384370 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x560584384610 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5605843844f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x560584384788 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5605843846c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5605843848d0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x560584384840 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560584384a20 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x560584384990 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x560584384bf8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x560584384ae0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x560584384b60 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x560584384dd8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x560584384cc0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x560584384d40 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x560584384f28 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x560584384e98 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x560584385138 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x560584384fe8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x560584385068 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x560584385298 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x560584385200 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5605843853f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x560584385358 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x560584385498 <col:57> "" ""
|-CXXMethodDecl 0x5605843855a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x560584385518 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5605843856f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x560584385668 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x560584385878 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5605843857b0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x560584385940 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x560584385a00 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x560584385ac0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x560584385b60 <col:49> "" ""
|-CXXMethodDecl 0x560584385bf0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x560584385cb0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x560584385da0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x560584385e68 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x560584385f28 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x560584385fe8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5605843860e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5605843861a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x560584386270 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x560584386448 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x560584386328 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5605843863a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x560584386670 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x560584386510 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x560584386590 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x560584386780 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5605843867e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x560584386810 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x560584386928 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5605843869c8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x560584386a28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x560584386a88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x560584386b38 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x560584386ba0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x560584386dd8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x560584386e28 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560584386db8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x560584386cc8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x560584386c70 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x560584386cb0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x560584386c90 <col:32> 'int' 8
|-CXXRecordDecl 0x560584386e40 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560584386f58 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x560584387000 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x560584387068 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5605843870f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56058438d190 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56058438d5c8 <col:12>
| |-CXXConstructorDecl 0x56058438d298 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56058438d3a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560584387000 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56058438fb50 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56058438fb20 <col:12> 'const char *const' lvalue .data 0x560584387000
| | |     `-DeclRefExpr 0x56058438fb00 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058438d3a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560584387068 'length' 'int'
| | | `-ImplicitCastExpr 0x56058438fbe0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56058438fbb0 <col:12> 'const int' lvalue .length 0x560584387068
| | |     `-DeclRefExpr 0x56058438fb90 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058438d3a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5605843870f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56058438fc70 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56058438fc40 <col:12> 'String::memo_t *const' lvalue .memo 0x5605843870f8
| | |     `-DeclRefExpr 0x56058438fc20 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058438d3a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56058438fcc8 <col:12>
| |-CXXConstructorDecl 0x56058438d448 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56058438d448
| | `-ParmVarDecl 0x56058438d558 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x560584392ab0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56058439e4c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56058439e5d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56058439eaf0 <col:12>
| |   |-BinaryOperator 0x56058439e908 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56058439e8c0 <col:12> 'const char *' lvalue ->data 0x560584387000
| |   | | `-CXXThisExpr 0x56058439e8b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56058439e8f0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56058439e880 <col:12> 'const char *const' lvalue .data 0x560584387000
| |   |     `-DeclRefExpr 0x56058439e860 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058439e5d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56058439e9d0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56058439e988 <col:12> 'int' lvalue ->length 0x560584387068
| |   | | `-CXXThisExpr 0x56058439e978 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56058439e9b8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56058439e948 <col:12> 'const int' lvalue .length 0x560584387068
| |   |     `-DeclRefExpr 0x56058439e928 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058439e5d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56058439ea98 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56058439ea50 <col:12> 'String::memo_t *' lvalue ->memo 0x5605843870f8
| |   | | `-CXXThisExpr 0x56058439ea40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56058439ea80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56058439ea10 <col:12> 'String::memo_t *const' lvalue .memo 0x5605843870f8
| |   |     `-DeclRefExpr 0x56058439e9f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56058439e5d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56058439eae0 <col:12>
| |     `-UnaryOperator 0x56058439eac8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56058439eab8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56058439e648 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56058439e648
|   `-ParmVarDecl 0x56058439e758 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x560584387170 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5605843873b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5605843871d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x560584387258 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5605843872d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56058438d150 <col:79, line:261:5>
|   |-BinaryOperator 0x56058438cdc8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56058438cd60 <col:2, col:5> 'const char *' lvalue .data 0x560584387000
|   | | `-MemberExpr 0x56058438cd30 <col:2> 'String::rep_t' lvalue ->_r 0x560584387170
|   | |   `-CXXThisExpr 0x56058438cd20 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56058438cdb0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56058438cd90 <col:12> 'const char *' lvalue ParmVar 0x5605843871d8 'data' 'const char *'
|   |-BinaryOperator 0x56058438ce90 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56058438ce28 <col:2, col:5> 'int' lvalue .length 0x560584387068
|   | | `-MemberExpr 0x56058438cdf8 <col:2> 'String::rep_t' lvalue ->_r 0x560584387170
|   | |   `-CXXThisExpr 0x56058438cde8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56058438ce78 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56058438ce58 <col:14> 'int' lvalue ParmVar 0x560584387258 'length' 'int'
|   `-IfStmt 0x56058438d138 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56058438cfb0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56058438cf98 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56058438cf78 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56058438cf58 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56058438cef0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5605843870f8
|     |       | `-MemberExpr 0x56058438cec0 <col:7> 'String::rep_t' lvalue ->_r 0x560584387170
|     |       |   `-CXXThisExpr 0x56058438ceb0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56058438cf40 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56058438cf20 <col:17> 'String::memo_t *' lvalue ParmVar 0x5605843872d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x56058438d110 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56058438d0f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56058438d000 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x560584375de8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56058438d068 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5605843869c8
|         `-ImplicitCastExpr 0x56058438d050 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56058438d030 <col:27> 'String::memo_t *' lvalue ParmVar 0x5605843872d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x560584387668 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x560584387488 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x560584387508 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x560584387580 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x560584387170 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56058438d5d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56058438d768 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56058438d6d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56058438d640 <col:2> '<bound member function type>' ->assign_memo 0x5605843873b8
|     | `-ImplicitCastExpr 0x56058438d708 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56058438d630 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56058438d720 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56058438d670 <col:14> 'const char *' lvalue ParmVar 0x560584387488 'data' 'const char *'
|     |-ImplicitCastExpr 0x56058438d738 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56058438d690 <col:20> 'int' lvalue ParmVar 0x560584387508 'length' 'int'
|     `-ImplicitCastExpr 0x56058438d750 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56058438d6b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x560584387580 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5605843877f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x560584387738 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56058438d9c0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56058438d940 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56058438d790 <col:2> '<bound member function type>' ->assign_memo 0x5605843873b8
|     | `-CXXThisExpr 0x56058438d780 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56058438d978 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56058438d810 <col:14, col:19> 'const char *' lvalue .data 0x560584387000
|     |   `-MemberExpr 0x56058438d7e0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x560584387170
|     |     `-DeclRefExpr 0x56058438d7c0 <col:14> 'const String' lvalue ParmVar 0x560584387738 'x' 'const String &'
|     |-ImplicitCastExpr 0x56058438d990 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56058438d890 <col:25, col:30> 'int' lvalue .length 0x560584387068
|     |   `-MemberExpr 0x56058438d860 <col:25, col:27> 'String::rep_t' lvalue ._r 0x560584387170
|     |     `-DeclRefExpr 0x56058438d840 <col:25> 'const String' lvalue ParmVar 0x560584387738 'x' 'const String &'
|     `-ImplicitCastExpr 0x56058438d9a8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56058438d910 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5605843870f8
|         `-MemberExpr 0x56058438d8e0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x560584387170
|           `-DeclRefExpr 0x56058438d8c0 <col:38> 'const String' lvalue ParmVar 0x560584387738 'x' 'const String &'
|-CXXMethodDecl 0x5605843878c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56058438e380 <col:31, line:278:5>
|   `-IfStmt 0x56058438e368 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56058438da60 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56058438da48 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56058438da18 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5605843870f8
|     |     `-MemberExpr 0x56058438d9e8 <col:6> 'String::rep_t' lvalue ->_r 0x560584387170
|     |       `-CXXThisExpr 0x56058438d9d8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56058438e340 <col:15, line:277:2>
|       |-ParenExpr 0x56058438df10 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56058438dee0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56058438db70 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56058438db58 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56058438db40 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56058438db00 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5605843869c8
|       |   |       `-ImplicitCastExpr 0x56058438dae8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56058438dab8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5605843870f8
|       |   |           `-MemberExpr 0x56058438da88 <col:27> 'String::rep_t' lvalue ->_r 0x560584387170
|       |   |             `-CXXThisExpr 0x56058438da78 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56058438dbd0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56058438dbb0 <col:54> 'int' 0
|       |   `-CallExpr 0x56058438de40 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56058438de28 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56058438dda8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56058438de80 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56058438dcb8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56058438de98 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56058438dce8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56058438deb0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56058438dd20 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56058438dec8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56058438dd90 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56058438dd78 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56058438dd40 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56058438e260 <line:274:6, line:275:22>
|       | |-CallExpr 0x56058438e120 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56058438e108 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56058438e080 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x560584377230 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56058438e050 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5605843869c8
|       | |   `-ImplicitCastExpr 0x56058438e038 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56058438e008 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5605843870f8
|       | |       `-MemberExpr 0x56058438dfd8 <col:40> 'String::rep_t' lvalue ->_r 0x560584387170
|       | |         `-CXXThisExpr 0x56058438dfc8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56058438e220 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56058438e208 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56058438e148 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56058438c0a0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56058438e248 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56058438e1a8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5605843870f8
|       |       `-MemberExpr 0x56058438e178 <col:15> 'String::rep_t' lvalue ->_r 0x560584387170
|       |         `-CXXThisExpr 0x56058438e168 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56058438e320 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56058438e2b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5605843870f8
|         | `-MemberExpr 0x56058438e288 <col:6> 'String::rep_t' lvalue ->_r 0x560584387170
|         |   `-CXXThisExpr 0x56058438e278 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56058438e308 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56058438e2e8 <col:16> 'int' 0
|-CXXMethodDecl 0x560584387b58 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x560584387978 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5605843879f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x560584387a70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x560584387c30 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x560584387e80 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x560584387ce8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x560584387d68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x560584387de0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x560584388068 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x560584387f50 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x560584387fd0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x560584388168 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56058438e458 <col:41, line:286:5>
|   `-ReturnStmt 0x56058438e448 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56058438e418 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56058438e3e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56058438e3c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56058438e3a8 <col:46> 'int' 1
|-CXXMethodDecl 0x560584388408 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x560584388220 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5605843882a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x560584388320 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56058438c0a0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5605843884d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56058438c170 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56058438c340 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56058438c228 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56058438c2a8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56058438c400 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56058438c4c8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56058438c5c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56058438c640 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56058438c6b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56058438c720 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56058438c820 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56058438c870 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56058438c800 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56058438c7e0 <col:22> 'int' 14
|-CXXMethodDecl 0x56058438ca88 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56058438c8a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56058438c920 <col:38> col:41 'int'
| `-ParmVarDecl 0x56058438c9a0 <col:43> col:46 'int'
|-FriendDecl 0x56058438cb90 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56058438cc20 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56058444fc40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56058444fe18 prev 0x56058444fc40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56058444fea8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56058444fed0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x560584451830 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5605844517e0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5605844517c0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5605844500e8 'type'
|     `-SubstTemplateTypeParmType 0x5605844500b0 'String' sugar
|       |-TemplateTypeParmType 0x560584342630 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5605843425e0 'T'
|       `-RecordType 0x56058437de10 'String'
|         `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605844518e8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5605844518b0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x560584451890 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x560584451830 'type'
|     `-ElaboratedType 0x5605844517e0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5605844517c0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5605844500e8 'type'
|         `-SubstTemplateTypeParmType 0x5605844500b0 'String' sugar
|           |-TemplateTypeParmType 0x560584342630 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5605843425e0 'T'
|           `-RecordType 0x56058437de10 'String'
|             `-CXXRecord 0x56058437dd80 'String'
|-CXXMethodDecl 0x560584451a68 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x560584451978 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x560584451b58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x560584451c38 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x560584451f08 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x560584451e10 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x560584452148 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560584451fc0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560584452038 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605845fc8a0 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5605845fc790 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605845fc808 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605845fc9f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5605845fcac8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5605845fcd18 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5605845fcb88 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5605845fcc00 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605845fcf78 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5605845fcde8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5605845fce60 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605845fd138 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5605845fd048 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605845fd2f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5605845fd200 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605845fd3b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5605845fd460 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5605845fd698 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5605845fd510 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605845fd588 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5605845fd938 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5605845fd840 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5605845fda00 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5605845fda50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5605845fdaa0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5605845b65c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56058444e6a8 prev 0x5605845b65c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56058444fbb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56058444fb60 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56058444fb40 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56058444f9f0 'type'
|     `-SubstTemplateTypeParmType 0x56058444f880 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5605843183e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x560584318388 'F'
|       `-RecordType 0x56058444f4e0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56058444f400 'typed_array_memory'
|-FieldDecl 0x5605845fdaf0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5605845fdb40 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5605845fdb78 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|   |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56058434f8f8 'T'
|   `-RecordType 0x56058437de10 'String'
|     `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845fdc08 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5605845fdbd0 'String &'
|   `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|     |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56058434f8f8 'T'
|     `-RecordType 0x56058437de10 'String'
|       `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845fdc98 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5605845fdc60 'const String &'
|   `-QualType 0x56058444e741 'const String' const
|     `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-RecordType 0x56058437de10 'String'
|         `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845fdd28 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5605845fdcf0 'String *'
|   `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|     |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56058434f8f8 'T'
|     `-RecordType 0x56058437de10 'String'
|       `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845fddb8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5605845fdd80 'const String *'
|   `-QualType 0x56058444e741 'const String' const
|     `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-RecordType 0x56058437de10 'String'
|         `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845fea10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5605845fe9c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5605845fe9a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5605845fe8d8 'type'
|     `-LValueReferenceType 0x5605845fe8a0 'const String &'
|       `-QualType 0x5605845fe641 'const String' const
|         `-SubstTemplateTypeParmType 0x5605845fe640 'String' sugar
|           |-TemplateTypeParmType 0x560584322330 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5605843222d8 'T'
|           `-RecordType 0x56058437de10 'String'
|             `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845fea78 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5605845fdc60 'const String &'
|   `-QualType 0x56058444e741 'const String' const
|     `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-RecordType 0x56058437de10 'String'
|         `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845fead0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x5605845feb38 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5605845fdcf0 'String *'
|   `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|     |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56058434f8f8 'T'
|     `-RecordType 0x56058437de10 'String'
|       `-CXXRecord 0x56058437dd80 'String'
|-TypedefDecl 0x5605845feba0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5605845fdd80 'const String *'
|   `-QualType 0x56058444e741 'const String' const
|     `-SubstTemplateTypeParmType 0x56058444e740 'String' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-RecordType 0x56058437de10 'String'
|         `-CXXRecord 0x56058437dd80 'String'
|-EnumDecl 0x5605845febf8 <line:134:5> col:5
| `-EnumConstantDecl 0x5605845fecf0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5605845fecd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x560584350fd8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x560584350fb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560584350f90 <col:40> 'int' 1
|-CXXConstructorDecl 0x5605845fed78 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5605845ff008 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5605845fee30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605845feed0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5605845ff298 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5605845ff180 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5605845ff558 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5605845ff440 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5605845ff870 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5605845ff750 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5605845ffb80 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5605845ffa60 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5605845ffe70 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5605845ffcb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5605845ffd30 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5605845fff98 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x560584600048 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605846000a0 <col:30> Inherited
|-CXXMethodDecl 0x5605846000e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x560584600198 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605846001f0 <col:30> Inherited
|-CXXMethodDecl 0x5605846002b8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560584600368 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605846003c0 <col:30> Inherited
|-CXXMethodDecl 0x560584600408 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5605846004b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560584600510 <col:30> Inherited
|-CXXMethodDecl 0x560584600558 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560584600608 <col:20> Inherited
| `-OptimizeNoneAttr 0x560584600660 <col:30> Inherited
|-CXXMethodDecl 0x5605846006a8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560584600758 <col:20> Inherited
| `-OptimizeNoneAttr 0x5605846007b0 <col:30> Inherited
|-CXXMethodDecl 0x5605846007d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560584600888 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560584600938 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x560584600af8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5605846009e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560584600a60 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560584600c48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x560584600bb8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x560584600df8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x560584600d00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560584600eb0 <col:20>
| `-OptimizeNoneAttr 0x560584600f08 <col:30>
|-CXXMethodDecl 0x560584601028 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x560584600f30 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5605846010e0 <col:20>
| `-OptimizeNoneAttr 0x560584601138 <col:30>
|-CXXMethodDecl 0x5605846011f0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x560584601160 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560584601338 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5605846012a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560584601468 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x560584601568 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x560584601638 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x560584601708 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x560584601848 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5605846017b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560584601990 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560584601900 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560584601ad8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x560584601a48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560584601b90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x560584601c90 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x560584601c00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560584601d48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x560584601e08 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x560584601f08 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x560584602088 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x560584601fc8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x560584602848 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x560584602140 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5605846027a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5605846026a8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x560584602928 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560584602a78 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5605846029e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560584602b30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x560584602d78 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560584602bf0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x560584602c68 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560584602f08 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x560584602e48 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x560584603118 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x560584602fd0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x560584603048 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5605846031d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x560584603438 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x560584603340 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x560584603508 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5605846b36a8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605846b6038 prev 0x56058469c920 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5605846b6130 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5605846b61c0 <col:22, col:28> col:22 public
|-EnumDecl 0x5605846b61e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5605846b6308 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b62e8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5605846b62d0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5605846b62b0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5605846b63b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b6390 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5605846b6378 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5605846b6358 <col:14> 'int' 1
| |-EnumConstantDecl 0x5605846b6440 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b6420 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5605846b6400 <col:17> 'int' 0
| |-EnumConstantDecl 0x5605846b64d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b64b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5605846b6490 <col:13> 'int' 1
| |-EnumConstantDecl 0x5605846b6560 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b6540 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5605846b6520 <col:16> 'int' 2
| |-EnumConstantDecl 0x5605846b65f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b65d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5605846b65b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5605846b6680 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b6660 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5605846b6640 <col:15> 'int' 4
| |-EnumConstantDecl 0x5605846b6710 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b66f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5605846b66d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5605846b67a0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5605846b6780 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5605846b6760 <col:12> 'int' 6
| `-EnumConstantDecl 0x5605846b6830 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5605846b6810 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5605846b67f0 <col:13> 'int' 7
|-VarDecl 0x5605846b68a0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5605846b6928 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5605846b69b0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5605846b6a38 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5605846b6ac0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5605846b6b48 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5605846b6bd0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5605846b6c58 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5605846b6ce0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5605846b6d68 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5605846b6df0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5605846b6ef0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5605846bd7c8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5605846bdf58 <line:128:13> 'int' 0
| `-CompoundStmt 0x5605846bdfc8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5605846b6fe0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5605846bdfd8 <col:29, line:132:5>
|-CXXMethodDecl 0x5605846b7198 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5605846b70d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605846b7260 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5605846b7348 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5605846be030 <col:44, line:161:5>
|   `-ReturnStmt 0x5605846be020 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5605846be008 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5605846bdfe8 <col:9> 'ErrorHandler *' lvalue Var 0x5605846bd828 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5605846b7488 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5605846b73f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5605846b7550 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5605846be090 <col:43, line:173:5>
|   `-ReturnStmt 0x5605846be080 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5605846be068 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5605846be048 <col:9> 'ErrorHandler *' lvalue Var 0x5605846bd8a0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5605846b7608 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5605846b7688 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5605846b7798 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5605846b7708 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5605846b78e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5605846b7858 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5605846b7a40 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5605846b79a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5605846b7b98 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5605846b7b00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5605846b7cf0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5605846b7c58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5605846b7f00 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605846b7da8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5605846b7e28 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5605846b80d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605846b7fc0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5605846b8040 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5605846b82f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605846b8198 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5605846b8218 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5605846b84d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605846b83b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5605846b8438 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5605846b86b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5605846b8598 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5605846b8618 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5605846b8840 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5605846b8778 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5605846b8a10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5605846b88f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5605846b8970 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5605846be2e8 <col:57, line:234:5>
|   `-ReturnStmt 0x5605846be2d8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5605846be2c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5605846be268 <col:9, col:41> 'int'
|         |-MemberExpr 0x5605846be238 <col:9> '<bound member function type>' ->xmessage 0x5605846b8840
|         | `-CXXThisExpr 0x5605846be228 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5605846be2a8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5605846be290 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5605846be208 <col:18, col:40> 'String' (CXXTemporary 0x5605846be208)
|               `-CallExpr 0x5605846be1d0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5605846be1b8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5605846be130 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5605846baa08 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5605846be150 <col:31> 'const String' lvalue ParmVar 0x5605846b8970 'str' 'const String &'
|                 `-DeclRefExpr 0x5605846be170 <col:36> 'const String' lvalue ParmVar 0x5605846b88f8 'anno' 'const String &'
|-CXXMethodDecl 0x5605846b8cf0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5605846b8ad0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5605846b8b50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5605846b8bc8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5605846be578 <col:68, line:243:5>
|   `-ReturnStmt 0x5605846be568 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5605846be550 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5605846be4f0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5605846be4c0 <col:9> '<bound member function type>' ->xmessage 0x5605846b8a10
|         | `-CXXThisExpr 0x5605846be4b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5605846be388 <col:18> 'const String' lvalue ParmVar 0x5605846b8ad0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5605846be538 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5605846be520 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5605846be490 <col:24, col:40> 'String' (CXXTemporary 0x5605846be490)
|               `-CXXMemberCallExpr 0x5605846be428 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5605846be3b8 <col:24> '<bound member function type>' ->vformat 0x5605846b9ed0
|                 | `-CXXThisExpr 0x5605846be3a8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5605846be458 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5605846be3e8 <col:32> 'const char *' lvalue ParmVar 0x5605846b8b50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5605846be470 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5605846be408 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5605846b8bc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605846b8f90 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5605846b8db8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5605846b8e30 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5605846b8ea8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5605846be8b8 <col:23, line:254:5>
|   `-ReturnStmt 0x5605846be8a8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5605846be890 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5605846be830 <col:9, col:71> 'int'
|         |-MemberExpr 0x5605846be800 <col:9> '<bound member function type>' ->xmessage 0x5605846b8a10
|         | `-CXXThisExpr 0x5605846be7f0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5605846be878 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5605846be860 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5605846be7b0 <col:18, col:65> 'String' (CXXTemporary 0x5605846be7b0)
|         |     `-CallExpr 0x5605846be748 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5605846be730 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5605846be618 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5605846baa08 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5605846be638 <col:31> 'const String' lvalue ParmVar 0x5605846b8e30 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5605846be790 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5605846be778 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5605846be710 <col:37, col:64> 'String' (CXXTemporary 0x5605846be710)
|         |             `-CallExpr 0x5605846be6e0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5605846be6c8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5605846be658 <col:37> 'String (const String &)' lvalue CXXMethod 0x5605846bc640 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5605846be678 <col:56> 'const String' lvalue ParmVar 0x5605846b8db8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5605846be7d0 <col:68> 'const String' lvalue ParmVar 0x5605846b8ea8 'str' 'const String &'
|-CXXMethodDecl 0x5605846b9310 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5605846b9058 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5605846b90d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5605846b9150 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5605846b91c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5605846beb70 <col:34, line:267:5>
|   `-ReturnStmt 0x5605846beb60 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5605846beb48 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5605846beae0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5605846beab0 <col:9> '<bound member function type>' ->xmessage 0x5605846b8f90
|         | `-CXXThisExpr 0x5605846beaa0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5605846be958 <col:18> 'const String' lvalue ParmVar 0x5605846b9058 'landmark' 'const String &'
|         |-DeclRefExpr 0x5605846be978 <col:28> 'const String' lvalue ParmVar 0x5605846b90d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5605846beb30 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5605846beb18 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5605846bea80 <col:34, col:50> 'String' (CXXTemporary 0x5605846bea80)
|               `-CXXMemberCallExpr 0x5605846bea18 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5605846be9a8 <col:34> '<bound member function type>' ->vformat 0x5605846b9ed0
|                 | `-CXXThisExpr 0x5605846be998 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5605846bea48 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5605846be9d8 <col:42> 'const char *' lvalue ParmVar 0x5605846b9150 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5605846bea60 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5605846be9f8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5605846b91c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605846b9420 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5605846bebf0 <col:25, line:288:5>
|   `-ReturnStmt 0x5605846bebe0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5605846bebc8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5605846beb98 <col:9> 'const int' lvalue ->_nerrors 0x5605846bd7c8
|         `-CXXThisExpr 0x5605846beb88 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5605846b9630 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5605846b94d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5605846b9558 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5605846b9918 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5605846b96f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5605846b9778 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5605846b97f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605846b9ab0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5605846b99e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5605846b9cf8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5605846b9b70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5605846b9be8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5605846bee50 <col:58, line:357:5>
|   `-ReturnStmt 0x5605846bee40 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5605846bee28 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5605846bedf8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5605846bede0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5605846bedc0 <col:9, col:29> 'String' (CXXTemporary 0x5605846bedc0)
|             `-CallExpr 0x5605846bed50 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5605846bed38 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5605846becb8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5605846b9918 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5605846bec58 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5605846bed88 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5605846bec78 <col:21> 'const char *' lvalue ParmVar 0x5605846b9b70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5605846beda0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5605846bec98 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5605846b9be8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605846b9ed0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5605846b9dc0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5605846b9e38 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5605846ba028 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5605846b9f98 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5605846ba170 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5605846ba0e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5605846ba410 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5605846ba228 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5605846ba2a8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5605846ba320 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5605846ba570 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5605846ba4e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5605846bef68 <col:37, line:441:5>
|   `-IfStmt 0x5605846bef50 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5605846beed8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5605846beea8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5605846bee68 <col:6> 'int' lvalue ParmVar 0x5605846ba4e0 'level' 'int'
|     | `-ImplicitCastExpr 0x5605846beec0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5605846bee88 <col:15> 'ErrorHandler::Level' EnumConstant 0x5605846b65f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5605846bef38 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5605846bef08 <col:8> 'int' lvalue ->_nerrors 0x5605846bd7c8
|         `-CXXThisExpr 0x5605846beef8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5605846ba638 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5605846bf000 <col:26, line:448:5>
|   `-BinaryOperator 0x5605846befe0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5605846bef90 <col:2> 'int' lvalue ->_nerrors 0x5605846bd7c8
|     | `-CXXThisExpr 0x5605846bef80 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5605846befc0 <col:13> 'int' 0
|-CXXMethodDecl 0x5605846ba800 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5605846ba6f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5605846ba768 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5605846baa08 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5605846ba8c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5605846ba938 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5605846bacb8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5605846baac8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5605846bab48 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5605846babc8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5605846bad70 <col:59> 0 0
|-CXXMethodDecl 0x5605846baf08 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5605846bade8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5605846bae68 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5605846bf670 <col:70, line:534:5>
|   |-DeclStmt 0x5605846bf170 <line:528:2, col:20>
|   | |-VarDecl 0x5605846bf028 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5605846bf090 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5605846bf0c8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5605846bf130 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5605846bf240 <line:529:2, col:23>
|   | `-VarDecl 0x5605846bf1a0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5605846bf228 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5605846bf208 <col:18> 'const char *' lvalue ParmVar 0x5605846bade8 'begin' 'const char *'
|   |-DoStmt 0x5605846bf608 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5605846bf538 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5605846bf520 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5605846bf500 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5605846bf258 <col:6> 'const char *' lvalue Var 0x5605846bf1a0 'x' 'const char *'
|   | |     `-CallExpr 0x5605846bf450 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5605846bf438 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5605846bf3f0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5605846bdca0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5605846bf4b8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5605846bf4a0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5605846bf310 <col:20, col:27> 'String' (CXXTemporary 0x5605846bf310)
|   | |       |     `-CXXTemporaryObjectExpr 0x5605846bf2d8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5605846bf4d0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5605846bf330 <col:30> 'const char *' lvalue Var 0x5605846bf1a0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5605846bf4e8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5605846bf350 <col:33> 'const char *' lvalue ParmVar 0x5605846bae68 'end' 'const char *'
|   | |       |-UnaryOperator 0x5605846bf390 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5605846bf370 <col:39> 'String' lvalue Var 0x5605846bf028 'name' 'String'
|   | |       |-UnaryOperator 0x5605846bf3c8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5605846bf3a8 <col:46> 'String' lvalue Var 0x5605846bf0c8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5605846bf3e0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5605846bf5f0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5605846bf5d8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5605846bf5b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5605846bf588 <col:11> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|   |         `-ImplicitCastExpr 0x5605846bf570 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5605846bf550 <col:11> 'String' lvalue Var 0x5605846bf028 'name' 'String'
|   `-ReturnStmt 0x5605846bf660 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5605846bf648 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5605846bf628 <col:9> 'const char *' lvalue Var 0x5605846bf1a0 'x' 'const char *'
|-CXXMethodDecl 0x5605846bc640 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5605846bc5b0 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5605846bfc78 <col:55, line:550:5>
|   `-IfStmt 0x5605846bfc50 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5605846bf8b0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5605846bf898 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5605846bf880 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5605846bf860 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5605846bf830 <col:6> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|     | |       `-DeclRefExpr 0x5605846bf6d0 <col:6> 'const String' lvalue ParmVar 0x5605846bc5b0 'x' 'const String &'
|     | `-BinaryOperator 0x5605846bf810 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5605846bf7e0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5605846bf790 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5605846bf778 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5605846bf730 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56058439adb0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5605846bf6f0 <col:11> 'const String' lvalue ParmVar 0x5605846bc5b0 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5605846bf710 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5605846bf7f8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5605846bf7c8 <col:19> 'char' 123
|     |-ReturnStmt 0x5605846bf920 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5605846bf8f0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5605846bf8d0 <col:13> 'const String' lvalue ParmVar 0x5605846bc5b0 'x' 'const String &'
|     `-IfStmt 0x5605846bfc28 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5605846bf9b8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5605846bf9a0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5605846bf980 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5605846bf950 <col:11> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|       |       `-DeclRefExpr 0x5605846bf930 <col:11> 'const String' lvalue ParmVar 0x5605846bc5b0 'x' 'const String &'
|       |-ReturnStmt 0x5605846bfb40 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5605846bfb28 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5605846bfaf8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5605846bfae0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5605846bfac0 <col:13, col:29> 'String' (CXXTemporary 0x5605846bfac0)
|       |         `-CallExpr 0x5605846bfa70 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5605846bfa58 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5605846bf9d0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5605846ba800 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5605846bfaa0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5605846bf9f0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5605846bfa10 <col:28> 'const String' lvalue ParmVar 0x5605846bc5b0 'x' 'const String &'
|       `-ReturnStmt 0x5605846bfc18 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5605846bfc00 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5605846bfbd0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5605846bfbb8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5605846bfb98 <col:13, col:20> 'String' (CXXTemporary 0x5605846bfb98)
|                 `-CXXTemporaryObjectExpr 0x5605846bfb60 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5605846bc808 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5605846bc6f8 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5605846bc770 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5605846bdf48 <col:71> 'bool' false
|-CXXRecordDecl 0x5605846bc8b8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5605846bcbb8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5605846bcb50 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5605846bcaf0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5605846bcab0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56058437de10 'String'
|       | `-CXXRecord 0x56058437dd80 'String'
|       |-BuiltinType 0x560584051580 'int'
|       `-DecayedType 0x560584535480 '__va_list_tag *' sugar
|         |-TypedefType 0x560584535450 'va_list' sugar
|         | |-Typedef 0x56058426fed0 'va_list'
|         | `-TypedefType 0x56058426fe80 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5605841a7aa8 '__gnuc_va_list'
|         |   `-TypedefType 0x5605841a7a10 '__builtin_va_list' sugar
|         |     |-Typedef 0x560584092d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x560584092ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5605840522d0 '__va_list_tag'
|         |         `-CXXRecord 0x560584052238 '__va_list_tag'
|         `-PointerType 0x560584275770 '__va_list_tag *'
|           `-RecordType 0x5605840522d0 '__va_list_tag'
|             `-CXXRecord 0x560584052238 '__va_list_tag'
|-EnumDecl 0x5605846bcc10 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5605846bcd10 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd270 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bccf0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5605846bccd0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5605846bcda0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd288 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bcd80 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5605846bcd60 <col:21> 'int' 2
| |-EnumConstantDecl 0x5605846bce30 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd2a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bce10 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5605846bcdf0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5605846bcec0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd2b8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bcea0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5605846bce80 <col:17> 'int' 8
| |-EnumConstantDecl 0x5605846bcf50 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd2d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bcf30 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5605846bcf10 <col:22> 'int' 16
| |-EnumConstantDecl 0x5605846bcfe0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd2e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bcfc0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5605846bcfa0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5605846bd070 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd300 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bd050 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5605846bd030 <col:17> 'int' 64
| |-EnumConstantDecl 0x5605846bd100 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd318 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bd0e0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5605846bd0c0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5605846bd190 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5605846bd330 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605846bd170 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5605846bd150 <col:16> 'int' 256
| `-EnumConstantDecl 0x5605846bd220 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5605846bd348 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605846bd200 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5605846bd1e0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5605846bd558 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5605846bd370 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5605846bd410 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5605846bd6e0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5605846bd618 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5605846bd788 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5605846bd7c8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5605846bd828 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5605846bd8a0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5605846bdca0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5605846bd918 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5605846bd998 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5605846bda18 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5605846bda90 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5605846bdb08 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5605846bdb80 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5605846bddc8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5605846bddc8
| `-ParmVarDecl 0x5605846bded8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5605846bffd8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5605846bffd8
  `-ParmVarDecl 0x5605846c00e8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605845344c8 prev 0x560584579068 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605845345c0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x560584534650 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x560584534788 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x560584534688 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560584535bb0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560584535b90 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x560584535728 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560584535c40 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560584535c00 <col:17> 'ErrorHandler *' lvalue ParmVar 0x560584534688 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560584535790 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560584535cc0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560584535c80 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5605845357f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560584535d00 <col:54> 'bool' false
| `-CompoundStmt 0x560584535e08 <col:61, line:38:5>
|   `-BinaryOperator 0x560584535de8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x560584535d80 <col:9> 'const Element *' lvalue ->_context 0x5605845356c8
|     | `-CXXThisExpr 0x560584535d70 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x560584535dd0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x560584535db0 <col:20> 'int' 0
|-CXXConstructorDecl 0x560584534998 <line:44:5, line:46:5> line:44:5 used ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560584534848 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5605845348c0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560584535be8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560584535bc8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5605845356c8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x560584535e60 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x560584535e20 <col:20> 'const Element *' lvalue ParmVar 0x560584534848 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x560584535728 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560584535ee0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560584535ea0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5605845348c0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560584535790 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560584535f60 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560584535f20 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5605845357f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560584535fa0 <col:73> 'bool' false
| `-CompoundStmt 0x560584536018 <col:80, line:46:5>
|-CXXMethodDecl 0x560584534ac8 <line:49:5, line:51:5> line:49:20 used context 'const Element *() const'
| `-CompoundStmt 0x560584536090 <col:36, line:51:5>
|   `-ReturnStmt 0x560584536080 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x560584536068 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x560584536038 <col:16> 'const Element *const' lvalue ->_context 0x5605845356c8
|         `-CXXThisExpr 0x560584536028 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x560584534bb8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x560584536110 <col:32, line:57:5>
|   `-ReturnStmt 0x560584536100 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5605845360e8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5605845360b8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x560584535728
|         `-CXXThisExpr 0x5605845360a8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x560584534c78 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x560584534e00 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x560584534d30 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x560584534f50 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x560584534ec0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5605845350a0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x560584535010 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5605845352a8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x560584535158 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5605845351d0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5605845355d8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x560584535368 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5605845353e8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5605845354b0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x560584535690 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5605845356c8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x560584535728 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x560584535790 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5605845357f0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x560584535840 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x560584535840
| `-ParmVarDecl 0x560584535958 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5605845359f8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5605845359f8
| `-ParmVarDecl 0x560584535b08 <col:7> col:7 'const ArgContext &'
|-CXXDestructorDecl 0x5605846cea48 <col:7> col:7 implicit referenced ~ArgContext 'void () noexcept' inline default trivial
`-CXXConstructorDecl 0x5605846e4c58 <col:7> col:7 implicit constexpr ArgContext 'void (ArgContext &&)' inline default trivial noexcept-unevaluated 0x5605846e4c58
  `-ParmVarDecl 0x5605846e4d68 <col:7> col:7 'ArgContext &&'

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560584641170 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x560584641348 prev 0x560584641170 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5605846413d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x560584641400 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x560584642fd0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x560584642f80 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5605846418b0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5605846417b0 'type'
|     `-TemplateSpecializationType 0x560584641740 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x560584641620 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x560584641600 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5605846415e0 <col:24> 'unsigned long' 4
|       `-RecordType 0x560584641720 'char_array<4>'
|         `-ClassTemplateSpecialization 0x560584641640 'char_array'
|-TypedefDecl 0x560584643088 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x560584643050 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x560584643030 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x560584642fd0 'type'
|     `-ElaboratedType 0x560584642f80 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5605846418b0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5605846417b0 'type'
|         `-TemplateSpecializationType 0x560584641740 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x560584641620 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x560584641600 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5605846415e0 <col:24> 'unsigned long' 4
|           `-RecordType 0x560584641720 'char_array<4>'
|             `-ClassTemplateSpecialization 0x560584641640 'char_array'
|-CXXMethodDecl 0x560584643208 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x560584643118 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5605846432f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5605846433d8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5605846436a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5605846435b0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5605846438e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560584643760 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5605846437d8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560584643ab8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5605846439a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560584643a20 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560584643c18 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x560584643ce8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x560584643f38 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560584643da8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x560584643e20 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560584644198 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x560584644008 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x560584644080 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560584644358 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x560584644268 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56058464b898 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x560584644420 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56058464b950 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56058464ba00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56058464bc38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56058464bab0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56058464bb28 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56058464bed8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56058464bde0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56058464bfa0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56058464bff0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56058464c040 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56058463fb78 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56058463fd88 prev 0x56058463fb78 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5605846410e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x560584641090 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x560584641070 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x560584640f20 'type'
|     `-SubstTemplateTypeParmType 0x560584640d40 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x560584317c60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560584317c08 'T'
|       `-RecordType 0x560584640890 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5605846407a8 'sized_array_memory'
|-FieldDecl 0x56058464c090 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56058464c0e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56058464c118 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|   |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56058434f8f8 'T'
|   `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464c1a8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56058464c170 'int &'
|   `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|     |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56058434f8f8 'T'
|     `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464c268 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56058464c230 'const int &'
|   `-QualType 0x56058463fe21 'const int' const
|     `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464c2f8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56058464c2c0 'int *'
|   `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|     |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56058434f8f8 'T'
|     `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464c388 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56058464c350 'const int *'
|   `-QualType 0x56058463fe21 'const int' const
|     `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464cf70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56058464cf20 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56058464cf00 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56058464ce90 'type'
|     `-SubstTemplateTypeParmType 0x56058464cc50 'int' sugar
|       |-TemplateTypeParmType 0x560584322a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560584322a10 'T'
|       `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464cfd8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56058464c230 'const int &'
|   `-QualType 0x56058463fe21 'const int' const
|     `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464d030 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464d098 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56058464c2c0 'int *'
|   `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|     |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56058434f8f8 'T'
|     `-BuiltinType 0x560584051580 'int'
|-TypedefDecl 0x56058464d100 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56058464c350 'const int *'
|   `-QualType 0x56058463fe21 'const int' const
|     `-SubstTemplateTypeParmType 0x56058463fe20 'int' sugar
|       |-TemplateTypeParmType 0x56058434f950 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56058434f8f8 'T'
|       `-BuiltinType 0x560584051580 'int'
|-EnumDecl 0x56058464d158 <line:134:5> col:5
| `-EnumConstantDecl 0x56058464d250 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56058464d230 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x560584350fd8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x560584350fb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560584350f90 <col:40> 'int' 1
|-CXXConstructorDecl 0x56058464d2d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56058464d528 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56058464d390 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56058464d430 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56058464d7e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56058464d6d0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56058464daa8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56058464d990 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56058464ddf0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56058464dcd0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56058464e100 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56058464dfe0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56058464e3f0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56058464e238 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56058464e2b0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56058464e518 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56058464e5f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56058464e650 <col:30> Inherited
|-CXXMethodDecl 0x56058464e698 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56058464e748 <col:20> Inherited
| `-OptimizeNoneAttr 0x56058464e7a0 <col:30> Inherited
|-CXXMethodDecl 0x56058464e868 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56058464e918 <col:20> Inherited
| `-OptimizeNoneAttr 0x56058464e970 <col:30> Inherited
|-CXXMethodDecl 0x56058464e9b8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56058464ea68 <col:20> Inherited
| `-OptimizeNoneAttr 0x56058464eac0 <col:30> Inherited
|-CXXMethodDecl 0x56058464eb08 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56058464ebb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56058464ec10 <col:30> Inherited
|-CXXMethodDecl 0x56058464ec58 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56058464ed08 <col:20> Inherited
| `-OptimizeNoneAttr 0x56058464ed60 <col:30> Inherited
|-CXXMethodDecl 0x56058464ed88 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56058464ee38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56058464eee8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56058464f0a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56058464ef98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56058464f010 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56058464f1f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56058464f168 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56058464f3a8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56058464f2b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56058464f460 <col:20>
| `-OptimizeNoneAttr 0x56058464f4b8 <col:30>
|-CXXMethodDecl 0x56058464f5d8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56058464f4e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56058464f690 <col:20>
| `-OptimizeNoneAttr 0x56058464f6e8 <col:30>
|-CXXMethodDecl 0x56058464f7a0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56058464f710 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56058464f8e8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56058464f858 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56058464fa18 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56058464fb48 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56058464fc18 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56058464fce8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56058464fe28 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56058464fd98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56058464ff70 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56058464fee0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5605846500b8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x560584650028 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560584650170 <col:48> Inherited "" ""
|-CXXMethodDecl 0x560584650270 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5605846501e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560584650328 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5605846503e8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5605846504e8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x560584650668 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5605846505a8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x560584650e28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x560584650720 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x560584650d88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x560584650c88 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x560584650f08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560584651058 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x560584650fc8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560584651110 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x560584651358 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5605846511d0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x560584651248 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560584651518 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x560584651428 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x560584651768 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5605846515e0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x560584651658 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x560584651828 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x560584651a88 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x560584651990 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x560584651b58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058463dce8 prev 0x56058461f8a8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56058463dde0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56058463ded0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5605846638d0 <col:16, line:828:9>
|-CXXDestructorDecl 0x56058463dfc0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5605846638e0 <col:25, line:830:9>
|-CXXMethodDecl 0x56058463e0c0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56058463e170 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56058463e218 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56058463e218
| `-ParmVarDecl 0x56058463e328 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56058463eae8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56058463eae8
  `-ParmVarDecl 0x56058463ebf8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058461f6b8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56058461f818 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56058461f8a8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56058461f960 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56058461fa68 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56058461f998 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560584653118 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5605846530f8 <col:31> 'int' 0
|-CXXConstructorDecl 0x56058461fd88 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56058461fc00 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56058461fc78 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560584653150 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560584653130 <col:59> 'int' 0
|-CXXConstructorDecl 0x56058461ff60 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56058461fe50 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56058461fec8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560584653188 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560584653168 <col:55> 'int' 0
|-CXXConstructorDecl 0x560584620318 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560584620100 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x560584620178 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5605846201f0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5605846531c0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5605846531a0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5605846204d8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x560584620418 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5605846205d0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5605846207b8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5605846206c0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5605846208a8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x560584653570 <col:24, line:291:5>
|   `-ReturnStmt 0x560584653560 <line:290:9, col:79>
|     `-BinaryOperator 0x560584653540 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x560584653418 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x560584653370 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x560584653350 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x560584653248 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x560584653230 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x560584653218 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5605846531e8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56058463fb10
|       | |   |       `-CXXThisExpr 0x5605846531d8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x560584653338 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x560584653320 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5605846532e8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5605846532b8 <col:28, col:35> '<bound member function type>' ->size 0x5605846007d8
|       | |           `-ImplicitCastExpr 0x560584653308 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5605846532a0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x560584653270 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56058463fb10
|       | |                 `-CXXThisExpr 0x560584653260 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x560584653400 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5605846533e8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5605846533d0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5605846533a0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x560584651ca0
|       |         `-CXXThisExpr 0x560584653390 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x560584653520 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x560584653508 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5605846534f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5605846534b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x560584653498 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x560584653448 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x560584651d50
|         |     |   `-CXXThisExpr 0x560584653438 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x560584653478 <col:73> 'int' 0
|         `-IntegerLiteral 0x5605846534d0 <col:79> 'int' 0
|-CXXMethodDecl 0x560584620968 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x560584653748 <col:32, line:296:5>
|   `-ReturnStmt 0x560584653738 <line:295:9, col:49>
|     `-BinaryOperator 0x560584653718 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5605846535f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5605846535e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5605846535c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x560584653598 <col:17> 'Args::Slot *const' lvalue ->_slots 0x560584651ca0
|       |       `-CXXThisExpr 0x560584653588 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5605846536f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5605846536e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5605846536c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x560584653688 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x560584653670 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x560584653620 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x560584651d50
|         |     |   `-CXXThisExpr 0x560584653610 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x560584653650 <col:43> 'int' 0
|         `-IntegerLiteral 0x5605846536a8 <col:49> 'int' 0
|-CXXMethodDecl 0x560584620a58 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5605846552d0 <col:19, line:306:5>
|   |-IfStmt 0x5605846551f0 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5605846537b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5605846537a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x560584653770 <col:13> 'Vector<String> *' lvalue ->_conf 0x56058463fb10
|   | |     `-CXXThisExpr 0x560584653760 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5605846551d0 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x560584653828 <col:13, col:20> '<bound member function type>' ->clear 0x5605846031d8
|   |     `-ImplicitCastExpr 0x560584653810 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5605846537e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56058463fb10
|   |         `-CXXThisExpr 0x5605846537d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x560584655278 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x560584655248 <col:9, col:16> '<bound member function type>' .clear 0x560584651828
|   |   `-MemberExpr 0x560584655218 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x560584651c40
|   |     `-CXXThisExpr 0x560584655208 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5605846552c0 <line:305:9, col:17>
|     `-UnaryOperator 0x5605846552a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560584655298 <col:17> 'Args *' this
|-CXXMethodDecl 0x560584620cd8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x560584620be0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x560584620e58 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x560584620d90 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5605846211d8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x560584620f00 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x560584621138 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x560584620fa8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x560584621020 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5605846555f0 <col:67, line:327:5>
|     |-WhileStmt 0x5605846555a0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5605846553b8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x560584655338 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x560584571538 0x5605843bab18 0x5605843ba7f0 0x5605843aafc0 0x5605843aac70 0x5605843aa560 0x56058437ced0 0x56058430a3a0
|     | | |-DeclRefExpr 0x5605846552f8 <col:16> 'Iter' lvalue ParmVar 0x560584620fa8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x560584655318 <col:25> 'Iter' lvalue ParmVar 0x560584621020 'end' 'Iter'
|     | `-CompoundStmt 0x560584655580 <col:30, line:325:9>
|     |   |-CallExpr 0x560584655520 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x560584655400 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5605846554f0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x560584655480 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|     |   |   `-DeclRefExpr 0x560584655460 <col:24> 'Iter' lvalue ParmVar 0x560584620fa8 'begin' 'Iter'
|     |   `-UnaryOperator 0x560584655568 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x560584655548 <col:15> 'Iter' lvalue ParmVar 0x560584620fa8 'begin' 'Iter'
|     `-ReturnStmt 0x5605846555e0 <line:326:9, col:17>
|       `-UnaryOperator 0x5605846555c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5605846555b8 <col:17> 'Args *' this
|-CXXMethodDecl 0x5605846212e0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x560584621250 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x560584621428 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x560584621398 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5605846214f0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5605846556d0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x560584655670 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x560584655620 <col:9> '<bound member function type>' ->reset_from 0x5605846520c8
|   | | `-CXXThisExpr 0x560584655610 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x560584655650 <col:20> 'int' 0
|   `-ReturnStmt 0x5605846556c0 <line:352:9, col:17>
|     `-UnaryOperator 0x5605846556a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560584655698 <col:17> 'Args *' this
|-VarDecl 0x5605846215a8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x560584621610 <col:38> 'int' 1
|-VarDecl 0x5605846216a0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x560584621708 <col:39> 'int' 2
|-VarDecl 0x560584621798 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x560584621800 <col:39> 'int' 4
|-VarDecl 0x560584621890 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5605846218f8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x560584621c78 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x560584621970 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x560584621bd8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x560584621a20 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x560584621ac8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x560584655828 <col:43, line:371:5>
| |   `-ReturnStmt 0x560584655818 <line:370:9, col:34>
| |     `-CallExpr 0x5605846557e0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x560584655700 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x560584655780 <col:21> 'const char *' lvalue ParmVar 0x560584621a20 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5605846557a0 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5605846557c0 <col:33> 'T' lvalue ParmVar 0x560584621ac8 'x' 'T &'
| |-CXXMethodDecl 0x5605846d0ba8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5605846d09c0 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x5605846d0a98 <col:37, col:40> col:40 x 'int &'
| |-CXXMethodDecl 0x5605846d1058 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned char &)'
| | |-TemplateArgument type 'unsigned char'
| | |-ParmVarDecl 0x5605846d0e70 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x5605846d0f48 <col:37, col:40> col:40 x 'unsigned char &'
| `-CXXMethodDecl 0x5605846e3c48 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5605846e3a68 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5605846e3b38 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x560584621fa8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x560584621ce0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560584621f08 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560584621d90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584621e38 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x560584655978 <col:45, line:375:5>
|     `-ReturnStmt 0x560584655968 <line:374:9, col:42>
|       `-CallExpr 0x560584655930 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584655850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846558d0 <col:21> 'const char *' lvalue ParmVar 0x560584621d90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605846558f0 <col:30> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x560584655910 <col:41> 'T' lvalue ParmVar 0x560584621e38 'x' 'T &'
|-FunctionTemplateDecl 0x5605846222d8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x560584622010 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560584622238 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5605846220c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584622168 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x560584655ac8 <col:45, line:379:5>
|     `-ReturnStmt 0x560584655ab8 <line:378:9, col:43>
|       `-CallExpr 0x560584655a80 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605846559a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584655a20 <col:21> 'const char *' lvalue ParmVar 0x5605846220c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584655a40 <col:30> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int'
|         `-DeclRefExpr 0x560584655a60 <col:42> 'T' lvalue ParmVar 0x560584622168 'x' 'T &'
|-FunctionTemplateDecl 0x560584622608 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x560584622340 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x560584622568 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5605846223f0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x560584622498 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x560584655cc8 <col:46, line:383:5>
| |   `-ReturnStmt 0x560584655cb8 <line:382:9, col:55>
| |     `-CallExpr 0x560584655c80 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x560584655af0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x560584655b70 <col:21> 'const char *' lvalue ParmVar 0x5605846223f0 'keyword' 'const char *'
| |       |-BinaryOperator 0x560584655c40 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x560584655bf0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x560584655bd0 <col:30> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x560584655c28 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x560584655c08 <col:42> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x560584655c60 <col:54> 'T' lvalue ParmVar 0x560584622498 'x' 'T &'
| `-CXXMethodDecl 0x5605846cfb48 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x5605846cf968 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5605846cfa38 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x560584622a08 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x560584622670 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560584622968 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x560584622720 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605846227a0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560584622848 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x560584655e08 <col:54, line:388:5>
|     |-CallExpr 0x560584655d90 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560584655ce0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560584655d20 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560584655d30 <col:30> 'const char *' lvalue ParmVar 0x560584622720 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560584655d50 <col:39> 'int' lvalue ParmVar 0x5605846227a0 'flags' 'int'
|     | `-DeclRefExpr 0x560584655d70 <col:46> 'T' lvalue ParmVar 0x560584622848 'x' 'T &'
|     `-ReturnStmt 0x560584655df8 <line:387:9, col:17>
|       `-UnaryOperator 0x560584655de0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584655dd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560584622eb8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x560584622a78 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560584622af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560584622e18 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x560584622bb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584622c58 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x560584622cf8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x560584655f78 <col:74, line:403:5>
|     `-ReturnStmt 0x560584655f68 <line:402:9, col:56>
|       `-CallExpr 0x560584655f28 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584655e38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584655ea8 <col:28> 'const char *' lvalue ParmVar 0x560584622bb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x560584655ec8 <col:37> 'int' 0
|         |-DeclRefExpr 0x560584655ee8 <col:40> 'T' lvalue ParmVar 0x560584622c58 'x' 'T &'
|         `-DeclRefExpr 0x560584655f08 <col:43> 'const V' lvalue ParmVar 0x560584622cf8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560584623328 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x560584622f28 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560584622fa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560584623288 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x560584623068 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584623108 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5605846231a8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5605846560e0 <col:76, line:407:5>
|     `-ReturnStmt 0x5605846560d0 <line:406:9, col:65>
|       `-CallExpr 0x560584656090 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584655fa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584656010 <col:28> 'const char *' lvalue ParmVar 0x560584623068 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584656030 <col:37> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int'
|         |-DeclRefExpr 0x560584656050 <col:49> 'T' lvalue ParmVar 0x560584623108 'x' 'T &'
|         `-DeclRefExpr 0x560584656070 <col:52> 'const V' lvalue ParmVar 0x5605846231a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560584623878 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x560584623398 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560584623418 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5605846237d8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5605846234d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584623558 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5605846235f8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x560584623698 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x560584656248 <col:85, line:412:5>
|     |-CallExpr 0x5605846561c8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605846560f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x560584656138 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x560584656148 <col:37> 'const char *' lvalue ParmVar 0x5605846234d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560584656168 <col:46> 'int' lvalue ParmVar 0x560584623558 'flags' 'int'
|     | |-DeclRefExpr 0x560584656188 <col:53> 'T' lvalue ParmVar 0x5605846235f8 'x' 'T &'
|     | `-DeclRefExpr 0x5605846561a8 <col:56> 'const V' lvalue ParmVar 0x560584623698 'default_value' 'const V &'
|     `-ReturnStmt 0x560584656238 <line:411:9, col:17>
|       `-UnaryOperator 0x560584656220 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584656210 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560584623d08 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5605846238f0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584623968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x560584623c68 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x560584623a28 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x560584623aa0 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x560584623b48 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x5605846563c8 <col:53, line:425:5>
| |   `-ReturnStmt 0x5605846563b8 <line:424:9, col:42>
| |     `-CallExpr 0x560584656378 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x560584656278 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5605846562f8 <col:21> 'const char *' lvalue ParmVar 0x560584623a28 'keyword' 'const char *'
| |       |-IntegerLiteral 0x560584656318 <col:30> 'int' 0
| |       |-DeclRefExpr 0x560584656338 <col:33> 'P' lvalue ParmVar 0x560584623aa0 'parser' 'P'
| |       `-DeclRefExpr 0x560584656358 <col:41> 'T' lvalue ParmVar 0x560584623b48 'x' 'T &'
| `-CXXMethodDecl 0x5605846e3728 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, KeywordArg, String &)'
|   |-TemplateArgument type 'KeywordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5605846e3490 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5605846e3538 <col:37, col:39> col:39 parser 'KeywordArg':'KeywordArg'
|   `-ParmVarDecl 0x5605846e3608 <col:47, col:50> col:50 x 'String &'
|-FunctionTemplateDecl 0x560584624158 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x560584623d78 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584623df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605846240b8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560584623eb8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584623f30 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560584623fd8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x560584656540 <col:55, line:429:5>
|     `-ReturnStmt 0x560584656530 <line:428:9, col:50>
|       `-CallExpr 0x5605846564f0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605846563f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584656470 <col:21> 'const char *' lvalue ParmVar 0x560584623eb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584656490 <col:30> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5605846564b0 <col:41> 'P' lvalue ParmVar 0x560584623f30 'parser' 'P'
|         `-DeclRefExpr 0x5605846564d0 <col:49> 'T' lvalue ParmVar 0x560584623fd8 'x' 'T &'
|-FunctionTemplateDecl 0x5605846245a8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5605846241c8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584624248 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560584624508 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560584624308 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584624380 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560584624428 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5605846566b8 <col:55, line:433:5>
|     `-ReturnStmt 0x5605846566a8 <line:432:9, col:51>
|       `-CallExpr 0x560584656668 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584656568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846565e8 <col:21> 'const char *' lvalue ParmVar 0x560584624308 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584656608 <col:30> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int'
|         |-DeclRefExpr 0x560584656628 <col:42> 'P' lvalue ParmVar 0x560584624380 'parser' 'P'
|         `-DeclRefExpr 0x560584656648 <col:50> 'T' lvalue ParmVar 0x560584624428 'x' 'T &'
|-FunctionTemplateDecl 0x5605846249f8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x560584624618 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584624698 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x560584624958 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x560584624758 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5605846247d0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x560584624878 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5605846568e0 <col:56, line:437:5>
| |   `-ReturnStmt 0x5605846568d0 <line:436:9, col:63>
| |     `-CallExpr 0x560584656890 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5605846566e0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x560584656760 <col:21> 'const char *' lvalue ParmVar 0x560584624758 'keyword' 'const char *'
| |       |-BinaryOperator 0x560584656830 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5605846567e0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5605846567c0 <col:30> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x560584656818 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5605846567f8 <col:42> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x560584656850 <col:54> 'P' lvalue ParmVar 0x5605846247d0 'parser' 'P'
| |       `-DeclRefExpr 0x560584656870 <col:62> 'T' lvalue ParmVar 0x560584624878 'x' 'T &'
| |-CXXMethodDecl 0x5605846cf4b8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, NamedIntArg, int &)'
| | |-TemplateArgument type 'NamedIntArg'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5605846cf220 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x5605846cf2c8 <col:40, col:42> col:42 parser 'NamedIntArg':'NamedIntArg'
| | `-ParmVarDecl 0x5605846cf398 <col:50, col:53> col:53 x 'int &'
| `-CXXMethodDecl 0x5605846d05f8 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnyArg, String &)'
|   |-TemplateArgument type 'AnyArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5605846d0360 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5605846d0408 <col:40, col:42> col:42 parser 'AnyArg':'AnyArg'
|   `-ParmVarDecl 0x5605846d04d8 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x560584624f28 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x560584624a68 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584624ae8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560584624e88 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560584624ba8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584624c28 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560584624ca0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x560584624d48 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x560584656a48 <col:64, line:442:5>
|     |-CallExpr 0x5605846569c8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605846568f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560584656938 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560584656948 <col:30> 'const char *' lvalue ParmVar 0x560584624ba8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560584656968 <col:39> 'int' lvalue ParmVar 0x560584624c28 'flags' 'int'
|     | |-DeclRefExpr 0x560584656988 <col:46> 'P' lvalue ParmVar 0x560584624ca0 'parser' 'P'
|     | `-DeclRefExpr 0x5605846569a8 <col:54> 'T' lvalue ParmVar 0x560584624d48 'x' 'T &'
|     `-ReturnStmt 0x560584656a38 <line:441:9, col:17>
|       `-UnaryOperator 0x560584656a20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584656a10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560584625528 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x560584624fa0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584625018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560584625098 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560584625488 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560584625160 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605846251d8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560584625278 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x560584625348 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x560584656be0 <col:84, line:458:5>
|     `-ReturnStmt 0x560584656bd0 <line:457:9, col:64>
|       `-CallExpr 0x560584656b88 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584656a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584656ae8 <col:28> 'const char *' lvalue ParmVar 0x560584625160 'keyword' 'const char *'
|         |-IntegerLiteral 0x560584656b08 <col:37> 'int' 0
|         |-DeclRefExpr 0x560584656b28 <col:40> 'P' lvalue ParmVar 0x5605846251d8 'parser' 'P'
|         |-DeclRefExpr 0x560584656b48 <col:48> 'T' lvalue ParmVar 0x560584625278 'x' 'T &'
|         `-DeclRefExpr 0x560584656b68 <col:51> 'const V' lvalue ParmVar 0x560584625348 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560584625aa8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5605846255a0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584625618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560584625698 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560584625a08 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560584625760 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605846257d8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x560584625878 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x560584625918 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x560584656d70 <col:86, line:462:5>
|     `-ReturnStmt 0x560584656d60 <line:461:9, col:73>
|       `-CallExpr 0x560584656d18 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584656c08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584656c78 <col:28> 'const char *' lvalue ParmVar 0x560584625760 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584656c98 <col:37> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int'
|         |-DeclRefExpr 0x560584656cb8 <col:49> 'P' lvalue ParmVar 0x5605846257d8 'parser' 'P'
|         |-DeclRefExpr 0x560584656cd8 <col:57> 'T' lvalue ParmVar 0x560584625878 'x' 'T &'
|         `-DeclRefExpr 0x560584656cf8 <col:60> 'const V' lvalue ParmVar 0x560584625918 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560584626108 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x560584625b20 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584625b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560584625c18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560584626068 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x560584625ce0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584625d60 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x560584625dd8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x560584625e78 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x560584625f18 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x560584656f00 <col:95, line:467:5>
|     |-CallExpr 0x560584656e78 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560584656d88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x560584656dc8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x560584656dd8 <col:37> 'const char *' lvalue ParmVar 0x560584625ce0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560584656df8 <col:46> 'int' lvalue ParmVar 0x560584625d60 'flags' 'int'
|     | |-DeclRefExpr 0x560584656e18 <col:53> 'P' lvalue ParmVar 0x560584625dd8 'parser' 'P'
|     | |-DeclRefExpr 0x560584656e38 <col:61> 'T' lvalue ParmVar 0x560584625e78 'x' 'T &'
|     | `-DeclRefExpr 0x560584656e58 <col:64> 'const V' lvalue ParmVar 0x560584625f18 'default_value' 'const V &'
|     `-ReturnStmt 0x560584656ef0 <line:466:9, col:17>
|       `-UnaryOperator 0x560584656ed8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584656ec8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5605846266e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x560584626188 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584626208 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560584626288 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560584626648 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560584626350 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605846263c8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x560584626468 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560584626508 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605846570a8 <col:63, line:481:5>
|     `-ReturnStmt 0x560584657098 <line:480:9, col:47>
|       `-CallExpr 0x560584657050 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584656f30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584656fb0 <col:21> 'const char *' lvalue ParmVar 0x560584626350 'keyword' 'const char *'
|         |-IntegerLiteral 0x560584656fd0 <col:30> 'int' 0
|         |-DeclRefExpr 0x560584656ff0 <col:33> 'P' lvalue ParmVar 0x5605846263c8 'parser' 'P'
|         |-DeclRefExpr 0x560584657010 <col:41> 'T1' lvalue ParmVar 0x560584626468 'x1' 'T1 &'
|         `-DeclRefExpr 0x560584657030 <col:45> 'T2' lvalue ParmVar 0x560584626508 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560584626c68 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x560584626760 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605846267d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560584626858 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560584626bc8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560584626920 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584626998 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560584626a38 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560584626ad8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x560584657248 <col:65, line:485:5>
|     `-ReturnStmt 0x560584657238 <line:484:9, col:55>
|       `-CallExpr 0x5605846571f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605846570d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584657150 <col:21> 'const char *' lvalue ParmVar 0x560584626920 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584657170 <col:30> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x560584657190 <col:41> 'P' lvalue ParmVar 0x560584626998 'parser' 'P'
|         |-DeclRefExpr 0x5605846571b0 <col:49> 'T1' lvalue ParmVar 0x560584626a38 'x1' 'T1 &'
|         `-DeclRefExpr 0x5605846571d0 <col:53> 'T2' lvalue ParmVar 0x560584626ad8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5605846271e8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x560584626ce0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584626d58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560584626dd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560584627148 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560584626ea0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584626f18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560584626fb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560584627058 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605846573e8 <col:65, line:489:5>
|     `-ReturnStmt 0x5605846573d8 <line:488:9, col:56>
|       `-CallExpr 0x560584657390 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584657270 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846572f0 <col:21> 'const char *' lvalue ParmVar 0x560584626ea0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584657310 <col:30> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int'
|         |-DeclRefExpr 0x560584657330 <col:42> 'P' lvalue ParmVar 0x560584626f18 'parser' 'P'
|         |-DeclRefExpr 0x560584657350 <col:50> 'T1' lvalue ParmVar 0x560584626fb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x560584657370 <col:54> 'T2' lvalue ParmVar 0x560584627058 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56058462ccc8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x560584627260 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605846272d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56058462c8c0 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56058462cc28 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56058462c980 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462c9f8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56058462ca98 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56058462cb38 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x560584657638 <col:66, line:493:5>
|     `-ReturnStmt 0x560584657628 <line:492:9, col:68>
|       `-CallExpr 0x5605846575e0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584657410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584657490 <col:21> 'const char *' lvalue ParmVar 0x56058462c980 'keyword' 'const char *'
|         |-BinaryOperator 0x560584657560 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x560584657510 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5605846574f0 <col:30> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560584657548 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560584657528 <col:42> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x560584657580 <col:54> 'P' lvalue ParmVar 0x56058462c9f8 'parser' 'P'
|         |-DeclRefExpr 0x5605846575a0 <col:62> 'T1' lvalue ParmVar 0x56058462ca98 'x1' 'T1 &'
|         `-DeclRefExpr 0x5605846575c0 <col:66> 'T2' lvalue ParmVar 0x56058462cb38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56058462d328 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56058462cd40 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058462cdb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56058462ce38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56058462d288 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56058462cf00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462cf80 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56058462cff8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56058462d098 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56058462d138 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5605846577c8 <col:74, line:498:5>
|     |-CallExpr 0x560584657740 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560584657650 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560584657690 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5605846576a0 <col:30> 'const char *' lvalue ParmVar 0x56058462cf00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5605846576c0 <col:39> 'int' lvalue ParmVar 0x56058462cf80 'flags' 'int'
|     | |-DeclRefExpr 0x5605846576e0 <col:46> 'P' lvalue ParmVar 0x56058462cff8 'parser' 'P'
|     | |-DeclRefExpr 0x560584657700 <col:54> 'T1' lvalue ParmVar 0x56058462d098 'x1' 'T1 &'
|     | `-DeclRefExpr 0x560584657720 <col:58> 'T2' lvalue ParmVar 0x56058462d138 'x2' 'T2 &'
|     `-ReturnStmt 0x5605846577b8 <line:497:9, col:17>
|       `-UnaryOperator 0x5605846577a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584657790 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56058462d688 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56058462d3a8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058462d5e8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56058462d460 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462d4d8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x560584657910 <col:52, line:509:5>
|     `-ReturnStmt 0x560584657900 <line:508:9, col:44>
|       `-CallExpr 0x5605846578c8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605846577f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584657868 <col:26> 'const char *' lvalue ParmVar 0x56058462d460 'keyword' 'const char *'
|         |-IntegerLiteral 0x560584657888 <col:35> 'int' 0
|         `-DeclRefExpr 0x5605846578a8 <col:38> 'P' lvalue ParmVar 0x56058462d4d8 'parser' 'P'
|-FunctionTemplateDecl 0x56058462d988 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56058462d6f0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058462d8e8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56058462d7a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462d818 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x560584657a50 <col:54, line:513:5>
|     `-ReturnStmt 0x560584657a40 <line:512:9, col:52>
|       `-CallExpr 0x560584657a08 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584657938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846579a8 <col:26> 'const char *' lvalue ParmVar 0x56058462d7a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605846579c8 <col:35> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5605846579e8 <col:46> 'P' lvalue ParmVar 0x56058462d818 'parser' 'P'
|-FunctionTemplateDecl 0x56058462dc88 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56058462d9f0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058462dbe8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56058462daa0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462db18 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x560584657b90 <col:54, line:517:5>
|     `-ReturnStmt 0x560584657b80 <line:516:9, col:53>
|       `-CallExpr 0x560584657b48 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584657a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584657ae8 <col:26> 'const char *' lvalue ParmVar 0x56058462daa0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584657b08 <col:35> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int'
|         `-DeclRefExpr 0x560584657b28 <col:47> 'P' lvalue ParmVar 0x56058462db18 'parser' 'P'
|-FunctionTemplateDecl 0x56058462df88 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56058462dcf0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058462dee8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56058462dda0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462de18 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x560584657d80 <col:55, line:521:5>
|     `-ReturnStmt 0x560584657d70 <line:520:9, col:65>
|       `-CallExpr 0x560584657d38 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584657bb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584657c28 <col:26> 'const char *' lvalue ParmVar 0x56058462dda0 'keyword' 'const char *'
|         |-BinaryOperator 0x560584657cf8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x560584657ca8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560584657c88 <col:35> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560584657ce0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560584657cc0 <col:47> 'const int' lvalue Var 0x5605846216a0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x560584657d18 <col:59> 'P' lvalue ParmVar 0x56058462de18 'parser' 'P'
|-FunctionTemplateDecl 0x56058462e358 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56058462dff0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058462e2b8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56058462e0a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462e120 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56058462e198 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x560584657ec0 <col:63, line:526:5>
|     |-CallExpr 0x560584657e48 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560584657d98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x560584657dd8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x560584657de8 <col:35> 'const char *' lvalue ParmVar 0x56058462e0a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560584657e08 <col:44> 'int' lvalue ParmVar 0x56058462e120 'flags' 'int'
|     | `-DeclRefExpr 0x560584657e28 <col:51> 'P' lvalue ParmVar 0x56058462e198 'parser' 'P'
|     `-ReturnStmt 0x560584657eb0 <line:525:9, col:17>
|       `-UnaryOperator 0x560584657e98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584657e88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56058462e7a8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56058462e3c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058462e448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56058462e708 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56058462e508 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462e580 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56058462e628 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x560584658018 <col:58, line:541:5>
|     `-ReturnStmt 0x560584658008 <line:540:9, col:39>
|       `-CallExpr 0x560584657fd0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584657ef0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584657f70 <col:21> 'const char *' lvalue ParmVar 0x56058462e508 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584657f90 <col:30> 'P' lvalue ParmVar 0x56058462e580 'parser' 'P'
|         `-DeclRefExpr 0x560584657fb0 <col:38> 'T' lvalue ParmVar 0x56058462e628 'x' 'T &'
|-FunctionTemplateDecl 0x56058462ebf8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56058462e818 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058462e898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56058462eb58 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56058462e958 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462e9d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56058462ea78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x560584658150 <col:60, line:545:5>
|     `-ReturnStmt 0x560584658140 <line:544:9, col:41>
|       `-CallExpr 0x560584658108 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584658040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846580a8 <col:23> 'const char *' lvalue ParmVar 0x56058462e958 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605846580c8 <col:32> 'P' lvalue ParmVar 0x56058462e9d0 'parser' 'P'
|         `-DeclRefExpr 0x5605846580e8 <col:40> 'T' lvalue ParmVar 0x56058462ea78 'x' 'T &'
|-FunctionTemplateDecl 0x56058462f048 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56058462ec68 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058462ece8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56058462efa8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56058462eda8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462ee20 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56058462eec8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x560584658288 <col:60, line:549:5>
|     `-ReturnStmt 0x560584658278 <line:548:9, col:41>
|       `-CallExpr 0x560584658240 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584658178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846581e0 <col:23> 'const char *' lvalue ParmVar 0x56058462eda8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584658200 <col:32> 'P' lvalue ParmVar 0x56058462ee20 'parser' 'P'
|         `-DeclRefExpr 0x560584658220 <col:40> 'T' lvalue ParmVar 0x56058462eec8 'x' 'T &'
|-FunctionTemplateDecl 0x56058462f498 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56058462f0b8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058462f138 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56058462f3f8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56058462f1f8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462f270 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56058462f318 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5605846583c0 <col:61, line:553:5>
|     `-ReturnStmt 0x5605846583b0 <line:552:9, col:42>
|       `-CallExpr 0x560584658378 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605846582b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584658318 <col:24> 'const char *' lvalue ParmVar 0x56058462f1f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584658338 <col:33> 'P' lvalue ParmVar 0x56058462f270 'parser' 'P'
|         `-DeclRefExpr 0x560584658358 <col:41> 'T' lvalue ParmVar 0x56058462f318 'x' 'T &'
|-FunctionTemplateDecl 0x56058462f978 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56058462f508 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058462f588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56058462f8d8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56058462f648 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462f6c8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56058462f740 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56058462f7e8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x560584658538 <col:69, line:557:5>
|     `-ReturnStmt 0x560584658528 <line:556:9, col:46>
|       `-CallExpr 0x5605846584e8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5605846583e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584658468 <col:21> 'const char *' lvalue ParmVar 0x56058462f648 'keyword' 'const char *'
|         |-DeclRefExpr 0x560584658488 <col:30> 'int' lvalue ParmVar 0x56058462f6c8 'flags' 'int'
|         |-DeclRefExpr 0x5605846584a8 <col:37> 'P' lvalue ParmVar 0x56058462f740 'parser' 'P'
|         `-DeclRefExpr 0x5605846584c8 <col:45> 'T' lvalue ParmVar 0x56058462f7e8 'x' 'T &'
|-FunctionTemplateDecl 0x56058462fc88 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56058462f9f0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058462fbe8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56058462faa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462fb18 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x560584658678 <col:56, line:571:5>
|     `-ReturnStmt 0x560584658668 <line:570:9, col:48>
|       `-CallExpr 0x560584658630 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584658560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846585d0 <col:30> 'const char *' lvalue ParmVar 0x56058462faa0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5605846585f0 <col:39> 'int' 0
|         `-DeclRefExpr 0x560584658610 <col:42> 'P' lvalue ParmVar 0x56058462fb18 'parser' 'P'
|-FunctionTemplateDecl 0x560584630018 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56058462fcf0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058462ff78 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56058462fda0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058462fe20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56058462fe98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x560584658848 <col:67, line:576:5>
|     |-CallExpr 0x5605846587d0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560584658690 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5605846586d0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5605846586e0 <col:39> 'const char *' lvalue ParmVar 0x56058462fda0 'keyword' 'const char *'
|     | |-BinaryOperator 0x560584658790 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x560584658740 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560584658700 <col:48> 'int' lvalue ParmVar 0x56058462fe20 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560584658778 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560584658758 <col:56> 'const int' lvalue Var 0x560584621890 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5605846587b0 <col:68> 'P' lvalue ParmVar 0x56058462fe98 'parser' 'P'
|     `-ReturnStmt 0x560584658838 <line:575:9, col:17>
|       `-UnaryOperator 0x560584658820 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584658810 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560584630468 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x560584630088 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584630108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605846303c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5605846301c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584630240 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5605846302e8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5605846589b8 <col:62, line:592:5>
|     `-ReturnStmt 0x5605846589a8 <line:591:9, col:51>
|       `-CallExpr 0x560584658968 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584658878 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846588e8 <col:30> 'const char *' lvalue ParmVar 0x5605846301c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x560584658908 <col:39> 'int' 0
|         |-DeclRefExpr 0x560584658928 <col:42> 'P' lvalue ParmVar 0x560584630240 'parser' 'P'
|         `-DeclRefExpr 0x560584658948 <col:50> 'T' lvalue ParmVar 0x5605846302e8 'x' 'T &'
|-FunctionTemplateDecl 0x560584630948 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5605846304d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584630558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5605846308a8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560584630618 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584630698 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560584630710 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5605846307b8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x560584658bb0 <col:73, line:597:5>
|     |-CallExpr 0x560584658b30 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5605846589d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x560584658a10 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x560584658a20 <col:39> 'const char *' lvalue ParmVar 0x560584630618 'keyword' 'const char *'
|     | |-BinaryOperator 0x560584658ad0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x560584658a80 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560584658a40 <col:48> 'int' lvalue ParmVar 0x560584630698 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560584658ab8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560584658a98 <col:56> 'const int' lvalue Var 0x560584621890 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x560584658af0 <col:68> 'P' lvalue ParmVar 0x560584630710 'parser' 'P'
|     | `-DeclRefExpr 0x560584658b10 <col:76> 'T' lvalue ParmVar 0x5605846307b8 'x' 'T &'
|     `-ReturnStmt 0x560584658ba0 <line:596:9, col:17>
|       `-UnaryOperator 0x560584658b88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584658b78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560584630ef8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5605846309c0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584630a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560584630e58 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x560584630af8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584630b70 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x560584630d30 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560584658d20 <col:65, line:614:5>
|     `-ReturnStmt 0x560584658d10 <line:613:9, col:46>
|       `-CallExpr 0x560584658cd0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584658be0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584658c50 <col:25> 'const char *' lvalue ParmVar 0x560584630af8 'keyword' 'const char *'
|         |-IntegerLiteral 0x560584658c70 <col:34> 'int' 0
|         |-DeclRefExpr 0x560584658c90 <col:37> 'P' lvalue ParmVar 0x560584630b70 'parser' 'P'
|         `-DeclRefExpr 0x560584658cb0 <col:45> 'Vector<T>' lvalue ParmVar 0x560584630d30 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x560584631328 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x560584630f68 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560584631288 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x560584631020 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584631170 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560584658f40 <col:55, line:618:5>
|     `-ReturnStmt 0x560584658f30 <line:617:9, col:55>
|       `-CallExpr 0x560584658ef0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584658d48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560584658db8 <col:25> 'const char *' lvalue ParmVar 0x560584631020 'keyword' 'const char *'
|         |-IntegerLiteral 0x560584658dd8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x560584658eb0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x560584658ed0 <col:54> 'Vector<T>' lvalue ParmVar 0x560584631170 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5605846318f8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x560584631390 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584631408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560584631858 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5605846314c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584631548 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5605846315c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x560584631710 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560584659138 <col:76, line:623:5>
|     |-CallExpr 0x5605846590b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560584658f58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x560584658f98 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x560584658fa8 <col:34> 'const char *' lvalue ParmVar 0x5605846314c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x560584659058 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x560584659008 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560584658fc8 <col:43> 'int' lvalue ParmVar 0x560584631548 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560584659040 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560584659020 <col:51> 'const int' lvalue Var 0x560584621890 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x560584659078 <col:63> 'P' lvalue ParmVar 0x5605846315c0 'parser' 'P'
|     | `-DeclRefExpr 0x560584659098 <col:71> 'Vector<T>' lvalue ParmVar 0x560584631710 'x' 'Vector<T> &'
|     `-ReturnStmt 0x560584659128 <line:622:9, col:17>
|       `-UnaryOperator 0x560584659110 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560584659100 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560584631e38 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x560584631970 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5605846319e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560584631d98 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x560584631aa8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584631b28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560584631c70 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5605846593a0 <col:66, line:627:5>
|     `-ReturnStmt 0x560584659390 <line:626:9, col:59>
|       `-CallExpr 0x560584659350 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560584659168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5605846591d8 <col:25> 'const char *' lvalue ParmVar 0x560584631aa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5605846591f8 <col:34> 'int' lvalue ParmVar 0x560584631b28 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x560584659310 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x560584659330 <col:58> 'Vector<T>' lvalue ParmVar 0x560584631c70 'x' 'Vector<T> &'
|-CXXMethodDecl 0x560584631ec8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x560584659420 <col:25, line:633:5>
|   `-ReturnStmt 0x560584659410 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5605846593f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5605846593c8 <col:16> 'const bool' lvalue ->_status 0x56058463f978
|         `-CXXThisExpr 0x5605846593b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x560584632048 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x560584631f80 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x560584659508 <col:27, line:639:5>
|   |-BinaryOperator 0x5605846594b0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560584659438 <col:9> 'bool' lvalue ParmVar 0x560584631f80 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560584659498 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560584659468 <col:13> 'bool' lvalue ->_status 0x56058463f978
|   |     `-CXXThisExpr 0x560584659458 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5605846594f8 <line:638:9, col:17>
|     `-UnaryOperator 0x5605846594e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605846594d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5605846321c8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x560584632108 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5605846595f8 <col:39, line:644:5>
|   |-BinaryOperator 0x5605846595a0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560584659528 <col:9> 'bool' lvalue ParmVar 0x560584632108 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560584659588 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560584659558 <col:13> 'const bool' lvalue ->_status 0x56058463f978
|   |     `-CXXThisExpr 0x560584659548 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5605846595e8 <line:643:9, col:17>
|     `-UnaryOperator 0x5605846595d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605846595c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x560584632290 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5605846596a0 <col:30, line:651:5>
|   `-ReturnStmt 0x560584659690 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x560584659678 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x560584659648 <col:16> 'bool' lvalue ->_read_status 0x5605845357f0
|         `-ImplicitCastExpr 0x560584659628 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x560584659618 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5605846323d8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x560584632348 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5605846597a8 <col:32, line:658:5>
|   |-BinaryOperator 0x560584659750 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5605846596b8 <col:9> 'bool' lvalue ParmVar 0x560584632348 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560584659738 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560584659708 <col:13> 'bool' lvalue ->_read_status 0x5605845357f0
|   |     `-ImplicitCastExpr 0x5605846596e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5605846596d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x560584659798 <line:657:9, col:17>
|     `-UnaryOperator 0x560584659780 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560584659770 <col:17> 'Args *' this
|-CXXMethodDecl 0x560584632528 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x560584632498 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5605846598b8 <col:44, line:663:5>
|   |-BinaryOperator 0x560584659860 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5605846597c8 <col:9> 'bool' lvalue ParmVar 0x560584632498 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560584659848 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560584659818 <col:13> 'bool' lvalue ->_read_status 0x5605845357f0
|   |     `-ImplicitCastExpr 0x5605846597f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5605846597e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5605846598a8 <line:662:9, col:17>
|     `-UnaryOperator 0x560584659890 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560584659880 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5605846325f0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5605846326b8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x560584632780 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x560584632848 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x560584632b58 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5605846328e8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560584632ab8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5605846329c8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x560584659c70 <col:19, line:706:5>
|     `-IfStmt 0x560584659c48 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5605846599b8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x560584659b78 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x560584659b48 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x560584659b08 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x560584659a10 <col:42> '<bound member function type>' ->simple_slot 0x560584652d80
|       |     | `-CXXThisExpr 0x560584659a00 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x560584659aa8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x560584659a60 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5605843bf5b8
|       |     | `-DeclRefExpr 0x560584659a40 <col:55> 'T' lvalue ParmVar 0x5605846329c8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x560584659ae8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x560584659c38 <line:705:13, col:34>
|         `-CallExpr 0x560584659c10 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x560584659b98 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x560584659bf0 <col:33> 'T' lvalue ParmVar 0x5605846329c8 'x' 'T &'
|-FunctionTemplateDecl 0x560584632e28 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x560584632bb8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560584632d88 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x560584632c98 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56058465a050 <col:31, line:717:5>
|     |-DeclStmt 0x560584659db0 <line:713:9, col:23>
|     | `-VarDecl 0x560584659c98 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x560584659d88 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x560584659d10 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x560584659d68 <col:21> 'T' lvalue ParmVar 0x560584632c98 'x' 'T &'
|     |-IfStmt 0x56058465a000 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x560584659ea8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x560584659fe0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x560584659f80 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x560584659f10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|     |   | `-DeclRefExpr 0x560584659ef0 <col:14> 'T *' lvalue Var 0x560584659c98 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x560584659fc0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56058465a038 <line:716:9, col:16>
|       `-DeclRefExpr 0x56058465a018 <col:16> 'T *' lvalue Var 0x560584659c98 's' 'T *'
|-FunctionTemplateDecl 0x560584633238 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x560584632e88 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560584632f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560584633198 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x560584632fe8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x560584633088 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56058465a360 <col:37, line:726:5>
|     |-IfStmt 0x56058465a2f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56058465a310 <line:723:13, col:26>
|     | | `-VarDecl 0x56058465a0b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56058465a1a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56058465a130 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56058465a188 <col:25> 'T' lvalue ParmVar 0x560584632fe8 'x' 'T &'
|     | |-DeclRefExpr 0x56058465a1d0 <col:16> 'T *' lvalue Var 0x56058465a0b8 's' 'T *'
|     | `-BinaryOperator 0x56058465a2d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56058465a280 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56058465a210 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|     |   | `-DeclRefExpr 0x56058465a1f0 <col:14> 'T *' lvalue Var 0x56058465a0b8 's' 'T *'
|     |   `-DeclRefExpr 0x56058465a2b0 <col:18> 'const V' lvalue ParmVar 0x560584633088 'value' 'const V &'
|     `-ReturnStmt 0x56058465a350 <line:725:9, col:17>
|       `-UnaryOperator 0x56058465a338 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56058465a328 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560584633638 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5605846332a0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560584633598 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x560584633350 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5605846333d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560584633478 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56058465b180 <col:65, line:737:5>
|     |-DeclStmt 0x56058465a3f8 <line:732:9, col:26>
|     | `-VarDecl 0x56058465a390 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56058465b148 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56058465b168 <line:733:13, col:58>
|       | `-VarDecl 0x56058465a420 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56058465a600 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56058465a5d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56058465a5b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56058465a598 <col:26, col:58> 'String' (CXXTemporary 0x56058465a598)
|       |           `-CXXMemberCallExpr 0x56058465a528 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56058465a498 <col:26> '<bound member function type>' ->find 0x560584652398
|       |             | `-CXXThisExpr 0x56058465a488 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56058465a560 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56058465a4c8 <col:31> 'const char *' lvalue ParmVar 0x560584633350 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56058465a578 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56058465a4e8 <col:40> 'int' lvalue ParmVar 0x5605846333d0 'flags' 'int'
|       |             `-DeclRefExpr 0x56058465a508 <col:47> 'Args::Slot *' lvalue Var 0x56058465a390 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56058465a6b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56058465a6a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56058465a680 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56058465a650 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|       |       `-ImplicitCastExpr 0x56058465a638 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56058465a618 <col:20> 'String' lvalue Var 0x56058465a420 'str' 'String'
|       `-CompoundStmt 0x56058465b128 <col:61, line:736:9>
|         |-DeclStmt 0x56058465ab70 <line:734:13, col:76>
|         | `-VarDecl 0x56058465a708 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56058465ab40 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56058465aab0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56058465aaf8 <col:60> 'T' lvalue ParmVar 0x560584633478 'variable' 'T &'
|         |     `-UnaryOperator 0x56058465ab28 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56058465ab18 <col:71> 'Args *' this
|         `-CallExpr 0x56058465b0f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56058465ab98 <col:13> '<bound member function type>' ->postparse 0x5605846525a8
|           | `-CXXThisExpr 0x56058465ab88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56058465b0b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56058465abc8 <col:23> 'T *' lvalue Var 0x56058465a708 's' 'T *'
|           | `-CallExpr 0x56058465b078 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56058465ae50 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56058465af50 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56058465af70 <col:86> 'String' lvalue Var 0x56058465a420 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56058465b020 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56058465afb0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|           |   | `-DeclRefExpr 0x56058465af90 <col:92> 'T *' lvalue Var 0x56058465a708 's' 'T *'
|           |   `-UnaryOperator 0x56058465b060 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56058465b050 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56058465b0d8 <col:103> 'Args::Slot *' lvalue Var 0x56058465a390 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560584633b88 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5605846336a8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560584633728 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560584633ae8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5605846337e8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584633868 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x560584633908 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5605846339a8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56058465c020 <col:88, line:745:5>
|     |-DeclStmt 0x56058465b218 <line:741:9, col:26>
|     | `-VarDecl 0x56058465b1b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56058465b438 <line:742:9, col:55>
|     | `-VarDecl 0x56058465b240 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56058465b420 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56058465b3f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56058465b3d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56058465b3b8 <col:22, col:54> 'String' (CXXTemporary 0x56058465b3b8)
|     |           `-CXXMemberCallExpr 0x56058465b348 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56058465b2b8 <col:22> '<bound member function type>' ->find 0x560584652398
|     |             | `-CXXThisExpr 0x56058465b2a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56058465b380 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56058465b2e8 <col:27> 'const char *' lvalue ParmVar 0x5605846337e8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56058465b398 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56058465b308 <col:36> 'int' lvalue ParmVar 0x560584633868 'flags' 'int'
|     |             `-DeclRefExpr 0x56058465b328 <col:43> 'Args::Slot *' lvalue Var 0x56058465b1b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56058465b810 <line:743:9, col:72>
|     | `-VarDecl 0x56058465b488 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56058465b7e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56058465b750 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56058465b798 <col:56> 'T' lvalue ParmVar 0x560584633908 'variable' 'T &'
|     |     `-UnaryOperator 0x56058465b7c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56058465b7b8 <col:67> 'Args *' this
|     `-CallExpr 0x56058465bff0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56058465b838 <col:9> '<bound member function type>' ->postparse 0x5605846525a8
|       | `-CXXThisExpr 0x56058465b828 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56058465bfb0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56058465b868 <col:19> 'T *' lvalue Var 0x56058465b488 's' 'T *'
|       | `-ParenExpr 0x56058465bf90 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56058465bf60 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56058465bf48 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56058465bf30 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56058465bf10 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56058465bee0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|       |     |       `-ImplicitCastExpr 0x56058465bec8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56058465b888 <col:25> 'String' lvalue Var 0x56058465b240 'str' 'String'
|       |     |-CallExpr 0x56058465bd38 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56058465bb10 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56058465bc10 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56058465bc30 <col:89> 'String' lvalue Var 0x56058465b240 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56058465bce0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56058465bc70 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|       |     | | `-DeclRefExpr 0x56058465bc50 <col:95> 'T *' lvalue Var 0x56058465b488 's' 'T *'
|       |     | `-UnaryOperator 0x56058465bd20 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56058465bd10 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56058465bea8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56058465be88 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56058465be58 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56058465be08 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56058465bd98 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|       |         | | `-DeclRefExpr 0x56058465bd78 <col:109> 'T *' lvalue Var 0x56058465b488 's' 'T *'
|       |         | `-DeclRefExpr 0x56058465be38 <col:113> 'const V' lvalue ParmVar 0x5605846339a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56058465be78 <col:120> 'bool' true
|       `-DeclRefExpr 0x56058465bfd0 <col:128> 'Args::Slot *' lvalue Var 0x56058465b1b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5605846340b8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x560584633c00 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584633c78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560584634018 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x560584633d38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584633db8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560584633e30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x560584633ed8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56058465cc18 <col:75, line:754:5>
|     |-DeclStmt 0x56058465c0c8 <line:749:9, col:26>
|     | `-VarDecl 0x56058465c060 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56058465cbe0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56058465cc00 <line:750:13, col:58>
|       | `-VarDecl 0x56058465c0f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56058465c2d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56058465c2a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56058465c288 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56058465c268 <col:26, col:58> 'String' (CXXTemporary 0x56058465c268)
|       |           `-CXXMemberCallExpr 0x56058465c1f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56058465c168 <col:26> '<bound member function type>' ->find 0x560584652398
|       |             | `-CXXThisExpr 0x56058465c158 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56058465c230 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56058465c198 <col:31> 'const char *' lvalue ParmVar 0x560584633d38 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56058465c248 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56058465c1b8 <col:40> 'int' lvalue ParmVar 0x560584633db8 'flags' 'int'
|       |             `-DeclRefExpr 0x56058465c1d8 <col:47> 'Args::Slot *' lvalue Var 0x56058465c060 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56058465c388 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56058465c370 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56058465c350 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56058465c320 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|       |       `-ImplicitCastExpr 0x56058465c308 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56058465c2e8 <col:20> 'String' lvalue Var 0x56058465c0f0 'str' 'String'
|       `-CompoundStmt 0x56058465cbc0 <col:61, line:753:9>
|         |-DeclStmt 0x56058465c760 <line:751:13, col:63>
|         | `-VarDecl 0x56058465c3d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56058465c730 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56058465c6a0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56058465c6e8 <col:47> 'T' lvalue ParmVar 0x560584633ed8 'variable' 'T &'
|         |     `-UnaryOperator 0x56058465c718 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56058465c708 <col:58> 'Args *' this
|         `-CallExpr 0x56058465cb90 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56058465c788 <col:13> '<bound member function type>' ->postparse 0x5605846525a8
|           | `-CXXThisExpr 0x56058465c778 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56058465cb50 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56058465c7b8 <col:23> 'T *' lvalue Var 0x56058465c3d8 's' 'T *'
|           | `-CallExpr 0x56058465cb10 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56058465c9a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56058465c9e8 <col:56> 'P' lvalue ParmVar 0x560584633e30 'parser' 'P'
|           |   |-DeclRefExpr 0x56058465ca08 <col:64> 'String' lvalue Var 0x56058465c0f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56058465cab8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56058465ca48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|           |   | `-DeclRefExpr 0x56058465ca28 <col:70> 'T *' lvalue Var 0x56058465c3d8 's' 'T *'
|           |   `-UnaryOperator 0x56058465caf8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56058465cae8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56058465cb70 <col:81> 'Args::Slot *' lvalue Var 0x56058465c060 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560584634718 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x560584634130 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5605846341a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x560584634228 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560584634678 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5605846342f0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560584634370 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5605846343e8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x560584634488 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x560584634528 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56058465fc98 <col:98, line:762:5>
|     |-DeclStmt 0x56058465ccb0 <line:758:9, col:26>
|     | `-VarDecl 0x56058465cc48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56058465ced0 <line:759:9, col:55>
|     | `-VarDecl 0x56058465ccd8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56058465ceb8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56058465ce88 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56058465ce70 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56058465ce50 <col:22, col:54> 'String' (CXXTemporary 0x56058465ce50)
|     |           `-CXXMemberCallExpr 0x56058465cde0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56058465cd50 <col:22> '<bound member function type>' ->find 0x560584652398
|     |             | `-CXXThisExpr 0x56058465cd40 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56058465ce18 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56058465cd80 <col:27> 'const char *' lvalue ParmVar 0x5605846342f0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56058465ce30 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56058465cda0 <col:36> 'int' lvalue ParmVar 0x560584634370 'flags' 'int'
|     |             `-DeclRefExpr 0x56058465cdc0 <col:43> 'Args::Slot *' lvalue Var 0x56058465cc48 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56058465f5e0 <line:760:9, col:59>
|     | `-VarDecl 0x56058465cf28 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56058465f5b0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56058465f520 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56058465f568 <col:43> 'T' lvalue ParmVar 0x560584634488 'variable' 'T &'
|     |     `-UnaryOperator 0x56058465f598 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56058465f588 <col:54> 'Args *' this
|     `-CallExpr 0x56058465fc68 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56058465f608 <col:9> '<bound member function type>' ->postparse 0x5605846525a8
|       | `-CXXThisExpr 0x56058465f5f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56058465fc28 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56058465f638 <col:19> 'T *' lvalue Var 0x56058465cf28 's' 'T *'
|       | `-ParenExpr 0x56058465fc08 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56058465fbd8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56058465fbc0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56058465fba8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56058465fb88 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56058465fb58 <col:25> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|       |     |       `-ImplicitCastExpr 0x56058465fb40 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56058465f658 <col:25> 'String' lvalue Var 0x56058465ccd8 'str' 'String'
|       |     |-CallExpr 0x56058465f9b0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56058465f840 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56058465f888 <col:59> 'P' lvalue ParmVar 0x5605846343e8 'parser' 'P'
|       |     | |-DeclRefExpr 0x56058465f8a8 <col:67> 'String' lvalue Var 0x56058465ccd8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56058465f958 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56058465f8e8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|       |     | | `-DeclRefExpr 0x56058465f8c8 <col:73> 'T *' lvalue Var 0x56058465cf28 's' 'T *'
|       |     | `-UnaryOperator 0x56058465f998 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56058465f988 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56058465fb20 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56058465fb00 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56058465fad0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56058465fa80 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56058465fa10 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|       |         | | `-DeclRefExpr 0x56058465f9f0 <col:87> 'T *' lvalue Var 0x56058465cf28 's' 'T *'
|       |         | `-DeclRefExpr 0x56058465fab0 <col:91> 'const V' lvalue ParmVar 0x560584634528 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56058465faf0 <col:98> 'bool' true
|       `-DeclRefExpr 0x56058465fc48 <col:106> 'Args::Slot *' lvalue Var 0x56058465cc48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56058463c9f8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x560584634798 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560584634818 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56058463c510 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56058463c958 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56058463c5d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058463c650 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56058463c6c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56058463c768 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56058463c808 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x560584660c78 <col:60, line:773:5>
|     |-DeclStmt 0x56058465fd40 <line:767:9, col:26>
|     | `-VarDecl 0x56058465fcd8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560584660c40 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x560584660c60 <line:768:13, col:58>
|       | `-VarDecl 0x56058465fd68 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56058465ff48 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56058465ff18 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56058465ff00 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56058465fee0 <col:26, col:58> 'String' (CXXTemporary 0x56058465fee0)
|       |           `-CXXMemberCallExpr 0x56058465fe70 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56058465fde0 <col:26> '<bound member function type>' ->find 0x560584652398
|       |             | `-CXXThisExpr 0x56058465fdd0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56058465fea8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56058465fe10 <col:31> 'const char *' lvalue ParmVar 0x56058463c5d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56058465fec0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56058465fe30 <col:40> 'int' lvalue ParmVar 0x56058463c650 'flags' 'int'
|       |             `-DeclRefExpr 0x56058465fe50 <col:47> 'Args::Slot *' lvalue Var 0x56058465fcd8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560584660000 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56058465ffe8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56058465ffc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56058465ff98 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|       |       `-ImplicitCastExpr 0x56058465ff80 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56058465ff60 <col:20> 'String' lvalue Var 0x56058465fd68 'str' 'String'
|       `-CompoundStmt 0x560584660c18 <col:61, line:772:9>
|         |-DeclStmt 0x560584660340 <line:769:13, col:66>
|         | `-VarDecl 0x560584660058 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x560584660310 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560584660280 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5605846602c8 <col:49> 'T1' lvalue ParmVar 0x56058463c768 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5605846602f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5605846602e8 <col:61> 'Args *' this
|         |-DeclStmt 0x5605846606b0 <line:770:13, col:66>
|         | `-VarDecl 0x5605846603c8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x560584660680 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5605846605f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560584660638 <col:49> 'T2' lvalue ParmVar 0x56058463c808 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x560584660668 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560584660658 <col:61> 'Args *' this
|         `-CallExpr 0x560584660be8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5605846606d8 <col:13> '<bound member function type>' ->postparse 0x5605846525a8
|           | `-CXXThisExpr 0x5605846606c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x560584660ba8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x560584660748 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x560584660708 <col:23> 'T1 *' lvalue Var 0x560584660058 's1' 'T1 *'
|           | | `-DeclRefExpr 0x560584660728 <col:29> 'T2 *' lvalue Var 0x5605846603c8 's2' 'T2 *'
|           | `-CallExpr 0x560584660b60 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x560584660930 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x560584660978 <col:63> 'P' lvalue ParmVar 0x56058463c6c8 'parser' 'P'
|           |   |-DeclRefExpr 0x560584660998 <col:71> 'String' lvalue Var 0x56058465fd68 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x560584660a48 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5605846609d8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|           |   | `-DeclRefExpr 0x5605846609b8 <col:77> 'T1 *' lvalue Var 0x560584660058 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x560584660b08 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560584660a98 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|           |   | `-DeclRefExpr 0x560584660a78 <col:82> 'T2 *' lvalue Var 0x5605846603c8 's2' 'T2 *'
|           |   `-UnaryOperator 0x560584660b48 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x560584660b38 <col:87> 'Args *' this
|           `-DeclRefExpr 0x560584660bc8 <col:94> 'Args::Slot *' lvalue Var 0x56058465fcd8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56058463cde8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56058463ca78 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058463cd48 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56058463cb30 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058463cbb0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56058463cc28 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x560584661190 <col:67, line:780:5>
|     |-DeclStmt 0x560584660d10 <line:777:9, col:26>
|     | `-VarDecl 0x560584660ca8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560584661158 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x560584661178 <line:778:13, col:58>
|       | `-VarDecl 0x560584660d38 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560584660f18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560584660ee8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560584660ed0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560584660eb0 <col:26, col:58> 'String' (CXXTemporary 0x560584660eb0)
|       |           `-CXXMemberCallExpr 0x560584660e40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560584660db0 <col:26> '<bound member function type>' ->find 0x560584652398
|       |             | `-CXXThisExpr 0x560584660da0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560584660e78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560584660de0 <col:31> 'const char *' lvalue ParmVar 0x56058463cb30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560584660e90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560584660e00 <col:40> 'int' lvalue ParmVar 0x56058463cbb0 'flags' 'int'
|       |             `-DeclRefExpr 0x560584660e20 <col:47> 'Args::Slot *' lvalue Var 0x560584660ca8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560584660fd0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560584660fb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560584660f98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560584660f68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|       |       `-ImplicitCastExpr 0x560584660f50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560584660f30 <col:20> 'String' lvalue Var 0x560584660d38 'str' 'String'
|       `-CallExpr 0x560584661128 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x560584660ff8 <col:13> '<bound member function type>' ->postparse 0x5605846525a8
|         | `-CXXThisExpr 0x560584660fe8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5605846610d8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x560584661048 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x560584661028 <col:23> 'P' lvalue ParmVar 0x56058463cc28 'parser' 'P'
|         | |-DeclRefExpr 0x560584661090 <col:36> 'String' lvalue Var 0x560584660d38 'str' 'String'
|         | `-UnaryOperator 0x5605846610c0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5605846610b0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x560584661108 <col:49> 'Args::Slot *' lvalue Var 0x560584660ca8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56058463d188 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56058463ce58 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56058463d0e8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56058463cf10 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058463cf90 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56058463d008 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x560584661b00 <col:71, line:792:5>
|     |-DeclStmt 0x560584661228 <line:784:9, col:26>
|     | `-VarDecl 0x5605846611c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5605846612f8 <line:785:9, col:29>
|     | `-VarDecl 0x560584661258 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5605846612e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5605846612c0 <col:28> 'int' 1
|     |-WhileStmt 0x5605846619b0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5605846619d0 <line:786:16, col:61>
|     | | `-VarDecl 0x560584661320 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560584661500 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5605846614d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5605846614b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560584661498 <col:29, col:61> 'String' (CXXTemporary 0x560584661498)
|     | |           `-CXXMemberCallExpr 0x560584661428 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560584661398 <col:29> '<bound member function type>' ->find 0x560584652398
|     | |             | `-CXXThisExpr 0x560584661388 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560584661460 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605846613c8 <col:34> 'const char *' lvalue ParmVar 0x56058463cf10 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560584661478 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605846613e8 <col:43> 'int' lvalue ParmVar 0x56058463cf90 'flags' 'int'
|     | |             `-DeclRefExpr 0x560584661408 <col:50> 'Args::Slot *' lvalue Var 0x5605846611c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5605846615b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5605846615a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560584661580 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560584661550 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|     | |       `-ImplicitCastExpr 0x560584661538 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560584661518 <col:23> 'String' lvalue Var 0x560584661320 'str' 'String'
|     | `-CompoundStmt 0x560584661988 <col:64, line:790:9>
|     |   |-CallExpr 0x560584661710 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5605846615e0 <col:13> '<bound member function type>' ->postparse 0x5605846525a8
|     |   | | `-CXXThisExpr 0x5605846615d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5605846616c0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x560584661630 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x560584661610 <col:23> 'P' lvalue ParmVar 0x56058463d008 'parser' 'P'
|     |   | | |-DeclRefExpr 0x560584661678 <col:36> 'String' lvalue Var 0x560584661320 'str' 'String'
|     |   | | `-UnaryOperator 0x5605846616a8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x560584661698 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5605846616f0 <col:49> 'Args::Slot *' lvalue Var 0x5605846611c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5605846618a8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x560584661740 <col:13> 'int' lvalue Var 0x560584661258 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560584661890 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560584661870 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5605846617d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5605846617b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5605846617a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x560584661760 <col:28> 'int' lvalue Var 0x560584661258 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560584661780 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x560584661858 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x560584661828 <col:49> 'bool' lvalue ->_read_status 0x5605845357f0
|     |   |         `-ImplicitCastExpr 0x560584661808 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5605846617f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x560584661958 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5605846618c8 <col:13> 'int' lvalue ParmVar 0x56058463cf90 'flags' 'int'
|     |     `-UnaryOperator 0x560584661940 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x560584661928 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560584661908 <col:23> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560584661ae0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x560584661a18 <col:9> 'bool' lvalue ->_read_status 0x5605845357f0
|       | `-ImplicitCastExpr 0x5605846619f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5605846619e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560584661ac0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560584661aa0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560584661a88 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x560584661a48 <col:25> 'int' lvalue Var 0x560584661258 'read_status' 'int'
|           `-IntegerLiteral 0x560584661a68 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56058463d668 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56058463d1f8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058463d278 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56058463d5c8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56058463d338 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058463d3b8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56058463d430 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56058463d4d8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x560584662a90 <col:84, line:805:5>
|     |-DeclStmt 0x560584661ba8 <line:796:9, col:26>
|     | `-VarDecl 0x560584661b40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560584661c78 <line:797:9, col:29>
|     | `-VarDecl 0x560584661bd8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560584661c60 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560584661c40 <col:28> 'int' 1
|     |-DeclStmt 0x560584661fb0 <line:798:9, col:71>
|     | `-VarDecl 0x560584661cc8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x560584661f80 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x560584661ef0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x560584661f38 <col:55> 'T' lvalue ParmVar 0x56058463d4d8 'variable' 'T &'
|     |     `-UnaryOperator 0x560584661f68 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x560584661f58 <col:66> 'Args *' this
|     |-WhileStmt 0x560584662940 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x560584662960 <line:799:16, col:61>
|     | | `-VarDecl 0x560584661fd8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5605846621b8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560584662188 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560584662170 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560584662150 <col:29, col:61> 'String' (CXXTemporary 0x560584662150)
|     | |           `-CXXMemberCallExpr 0x5605846620e0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560584662050 <col:29> '<bound member function type>' ->find 0x560584652398
|     | |             | `-CXXThisExpr 0x560584662040 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560584662118 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560584662080 <col:34> 'const char *' lvalue ParmVar 0x56058463d338 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560584662130 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5605846620a0 <col:43> 'int' lvalue ParmVar 0x56058463d3b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5605846620c0 <col:50> 'Args::Slot *' lvalue Var 0x560584661b40 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560584662270 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560584662258 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560584662238 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560584662208 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|     | |       `-ImplicitCastExpr 0x5605846621f0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5605846621d0 <col:23> 'String' lvalue Var 0x560584661fd8 'str' 'String'
|     | `-CompoundStmt 0x560584662918 <col:64, line:803:9>
|     |   |-CallExpr 0x5605846626a0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x560584662298 <col:13> '<bound member function type>' ->postparse 0x5605846525a8
|     |   | | `-CXXThisExpr 0x560584662288 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x560584662660 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5605846622c8 <col:23> 'T *' lvalue Var 0x560584661cc8 's' 'T *'
|     |   | | `-CallExpr 0x560584662620 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5605846624b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5605846624f8 <col:56> 'P' lvalue ParmVar 0x56058463d430 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x560584662518 <col:64> 'String' lvalue Var 0x560584661fd8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5605846625c8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x560584662558 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|     |   | |   | `-DeclRefExpr 0x560584662538 <col:70> 'T *' lvalue Var 0x560584661cc8 's' 'T *'
|     |   | |   `-UnaryOperator 0x560584662608 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5605846625f8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x560584662680 <col:81> 'Args::Slot *' lvalue Var 0x560584661b40 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x560584662838 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5605846626d0 <col:13> 'int' lvalue Var 0x560584661bd8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560584662820 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560584662800 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560584662768 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560584662748 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560584662730 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5605846626f0 <col:28> 'int' lvalue Var 0x560584661bd8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560584662710 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5605846627e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5605846627b8 <col:49> 'bool' lvalue ->_read_status 0x5605845357f0
|     |   |         `-ImplicitCastExpr 0x560584662798 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560584662788 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5605846628e8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560584662858 <col:13> 'int' lvalue ParmVar 0x56058463d3b8 'flags' 'int'
|     |     `-UnaryOperator 0x5605846628d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5605846628b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560584662898 <col:23> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560584662a70 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5605846629a8 <col:9> 'bool' lvalue ->_read_status 0x5605845357f0
|       | `-ImplicitCastExpr 0x560584662988 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560584662978 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560584662a50 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560584662a30 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560584662a18 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5605846629d8 <col:25> 'int' lvalue Var 0x560584661bd8 'read_status' 'int'
|           `-IntegerLiteral 0x5605846629f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56058463dc48 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56058463d6e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56058463d758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56058463dba8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56058463d818 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56058463d898 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56058463d910 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56058463da60 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x560584663898 <col:87, line:821:5>
|     |-DeclStmt 0x560584662b40 <line:809:9, col:26>
|     | `-VarDecl 0x560584662ad8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560584662c10 <line:810:9, col:29>
|     | `-VarDecl 0x560584662b70 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560584662bf8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560584662bd8 <col:28> 'int' 1
|     |-DeclStmt 0x560584662e58 <line:811:9, col:38>
|     | `-VarDecl 0x560584662d40 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x560584662e30 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x560584662db8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x560584662e10 <col:29> 'Vector<T>' lvalue ParmVar 0x56058463da60 'variable' 'Vector<T> &'
|     |-WhileStmt 0x560584663748 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x560584663768 <line:812:16, col:61>
|     | | `-VarDecl 0x560584662e80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560584663060 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560584663030 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560584663018 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560584662ff8 <col:29, col:61> 'String' (CXXTemporary 0x560584662ff8)
|     | |           `-CXXMemberCallExpr 0x560584662f88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560584662ef8 <col:29> '<bound member function type>' ->find 0x560584652398
|     | |             | `-CXXThisExpr 0x560584662ee8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560584662fc0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560584662f28 <col:34> 'const char *' lvalue ParmVar 0x56058463d818 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560584662fd8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560584662f48 <col:43> 'int' lvalue ParmVar 0x56058463d898 'flags' 'int'
|     | |             `-DeclRefExpr 0x560584662f68 <col:50> 'Args::Slot *' lvalue Var 0x560584662ad8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560584663118 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560584663100 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5605846630e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5605846630b0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560584381578
|     | |       `-ImplicitCastExpr 0x560584663098 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560584663078 <col:23> 'String' lvalue Var 0x560584662e80 'str' 'String'
|     | `-CompoundStmt 0x560584663710 <col:64, line:819:9>
|     |   |-DeclStmt 0x5605846631d8 <line:813:13, col:23>
|     |   | `-VarDecl 0x560584663140 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5605846631b8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x560584663358 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x560584663200 <col:13> '<bound member function type>' ->postparse 0x5605846525a8
|     |   | | `-CXXThisExpr 0x5605846631f0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x560584663300 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x560584663250 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x560584663230 <col:23> 'P' lvalue ParmVar 0x56058463d910 'parser' 'P'
|     |   | | |-DeclRefExpr 0x560584663298 <col:36> 'String' lvalue Var 0x560584662e80 'str' 'String'
|     |   | | |-DeclRefExpr 0x5605846632b8 <col:41> 'T' lvalue Var 0x560584663140 'sx' 'T'
|     |   | | `-UnaryOperator 0x5605846632e8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5605846632d8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x560584663338 <col:53> 'Args::Slot *' lvalue Var 0x560584662ad8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5605846634b0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5605846633e8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5605846633b8 <col:17> 'bool' lvalue ->_read_status 0x5605845357f0
|     |   | |   `-ImplicitCastExpr 0x560584663398 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x560584663388 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x560584663488 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x560584663420 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x560584663400 <col:17> 'Vector<T> *' lvalue Var 0x560584662d40 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x560584663468 <col:30> 'T' lvalue Var 0x560584663140 'sx' 'T'
|     |   |-BinaryOperator 0x560584663630 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5605846634c8 <col:13> 'int' lvalue Var 0x560584662b70 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560584663618 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5605846635f8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560584663560 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560584663540 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560584663528 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5605846634e8 <col:28> 'int' lvalue Var 0x560584662b70 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560584663508 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5605846635e0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5605846635b0 <col:49> 'bool' lvalue ->_read_status 0x5605845357f0
|     |   |         `-ImplicitCastExpr 0x560584663590 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560584663580 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5605846636e0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560584663650 <col:13> 'int' lvalue ParmVar 0x56058463d898 'flags' 'int'
|     |     `-UnaryOperator 0x5605846636c8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5605846636b0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560584663690 <col:23> 'const int' lvalue Var 0x5605846215a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560584663878 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5605846637b0 <col:9> 'bool' lvalue ->_read_status 0x5605845357f0
|       | `-ImplicitCastExpr 0x560584663790 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560584663780 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560584663858 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560584663838 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560584663820 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5605846637e0 <col:25> 'int' lvalue Var 0x560584662b70 'read_status' 'int'
|           `-IntegerLiteral 0x560584663800 <col:40> 'int' 1
|-AccessSpecDecl 0x56058463dcc0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56058463dce8 prev 0x56058461f8a8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56058463dde0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56058463ded0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5605846638d0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56058463dfc0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5605846638e0 <col:25, line:830:9>
| |-CXXMethodDecl 0x56058463e0c0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56058463e170 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56058463e218 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56058463e218
| | `-ParmVarDecl 0x56058463e328 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56058463eae8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56058463eae8
|   `-ParmVarDecl 0x56058463ebf8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56058463e398 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56058463e4f8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56058463e6f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56058463e5a0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56058463e618 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x560584663ac0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56058463e9a8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x560584663930 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5605846638f0 <col:20> 'void *' lvalue ParmVar 0x56058463e5a0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56058463ea10 '_slot' 'char *'
| | | `-CXXNewExpr 0x5605846639b8 <col:32, col:45> 'char *' array Function 0x5605841a51f8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5605846639a0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x560584663970 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56058463e618 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56058463ea70 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x560584663a80 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x560584663a40 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56058463e618 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x560584663b40 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56058463e7f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56058463dfc0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x560584663bc8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x560584663ba8 <line:840:13, col:22> 'void' array Function 0x5605841a5558 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x560584663b90 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x560584663b60 <col:22> 'char *' lvalue ->_slot 0x56058463ea10
| |         `-CXXThisExpr 0x560584663b50 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56058463e8f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56058463e0c0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x560584663db8 <col:22, line:844:9>
| |   `-CallExpr 0x560584663d20 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x560584663d08 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x560584663ce8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5605842b0fd8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x560584663d58 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x560584663c38 <col:20> 'void *' lvalue ->_ptr 0x56058463e9a8
| |     |   `-CXXThisExpr 0x560584663c28 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x560584663d88 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x560584663d70 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x560584663c78 <col:26> 'char *' lvalue ->_slot 0x56058463ea10
| |     |     `-CXXThisExpr 0x560584663c68 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x560584663da0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x560584663cb8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56058463ea70
| |         `-CXXThisExpr 0x560584663ca8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56058463e9a8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56058463ea10 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56058463ea70 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56058463ec68 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56058463ec68
| | `-ParmVarDecl 0x56058463ed78 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56058463ee18 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56058463ee18
|   `-ParmVarDecl 0x56058463ef28 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56058463f0c8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56058463ef98 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56058463f038 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56058463f360 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56058463f558 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56058463f428 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56058463f6d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x560584663df0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x560584663dd0 <col:20> 'T *' lvalue ParmVar 0x56058463f428 'ptr' 'T *'
|   | `-CompoundStmt 0x560584663e40 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56058463f628 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56058463e0c0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x560584663ff0 <col:22, line:857:9>
|   |   `-CallExpr 0x560584663fc0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x560584663e50 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x560584369708 0x560584313a38
|   |     |-CXXOperatorCallExpr 0x560584663f50 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x560584663ee0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5605845766b8 0x5605845762d8 0x560584575f08 0x560584575b28 0x560584575748 0x560584575378
|   |     | `-MemberExpr 0x560584663eb0 <col:29> 'T *' lvalue ->_ptr 0x56058463f6d8
|   |     |   `-CXXThisExpr 0x560584663ea0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x560584663f90 <col:35> 'T' lvalue ->_slot 0x56058463f738
|   |       `-CXXThisExpr 0x560584663f80 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56058463f6d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56058463f738 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56058463f7a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56058463f8a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56058463f8f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56058463f880 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56058463f860 <col:31> 'int' 48
|-FieldDecl 0x56058463f918 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56058463f978 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56058463f9d8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56058463fb10 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x560584651c40 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x560584651ca0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x560584651d50 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x560584651f78 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x560584651e80 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5605846520c8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x560584652038 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x560584652398 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x560584652188 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x560584652208 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5605846522b0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5605846525a8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x560584652460 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5605846524d8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x560584652678 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5605846527c8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x560584652730 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x560584652b58 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x560584652888 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x560584652908 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5605846529b0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x560584652a68 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x560584652d80 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x560584652c30 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x560584652ca8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x560584653098 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x560584652e30 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x560584652ff8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x560584652f08 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NamedIntArg
         0 |   int _type
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605846b4f98 <../dummy_inc/click/nameinfo.hh:515:1, line:525:1> line:515:8 referenced struct NamedIntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605846b50b8 <col:1, col:8> col:8 implicit referenced struct NamedIntArg
|-CXXConstructorDecl 0x5605846b5228 <line:516:5, line:518:5> line:516:5 used NamedIntArg 'void (uint32_t)'
| |-ParmVarDecl 0x5605846b5158 <col:17, col:26> col:26 used type 'uint32_t':'unsigned int'
| |-CXXCtorInitializer Field 0x5605846b5550 '_type' 'int'
| | `-ImplicitCastExpr 0x5605846b5610 <line:517:10> 'int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5605846b55f8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5605846b55b8 <col:10> 'uint32_t':'unsigned int' lvalue ParmVar 0x5605846b5158 'type' 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5605846b5658 <col:16, line:518:5>
|-CXXMethodDecl 0x5605846b5480 <line:519:5, line:523:5> line:519:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x5605846b52e8 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5605846b5368 <col:35, col:40> col:40 used value 'int &'
| |-ParmVarDecl 0x5605846b53e0 <col:47, col:65> col:65 used args 'const ArgContext &'
| `-CompoundStmt 0x5605846b6020 <col:71, line:523:5>
|   `-ReturnStmt 0x5605846b6010 <line:520:2, line:522:40>
|     `-ExprWithCleanups 0x5605846b5ff8 <line:520:9, line:522:40> 'bool'
|       `-BinaryOperator 0x5605846b5fd8 <line:520:9, line:522:40> 'bool' '||'
|         |-CallExpr 0x5605846b58b0 <line:520:9, line:521:32> 'bool'
|         | |-ImplicitCastExpr 0x5605846b5898 <line:520:9, col:19> 'bool (*)(uint32_t, const Element *, const String &, void *, size_t)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5605846b56a0 <col:9, col:19> 'bool (uint32_t, const Element *, const String &, void *, size_t)' lvalue CXXMethod 0x56058469ea28 'query' 'bool (uint32_t, const Element *, const String &, void *, size_t)'
|         | |-ImplicitCastExpr 0x5605846b5910 <col:25> 'uint32_t':'unsigned int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x5605846b58f8 <col:25> 'int' <LValueToRValue>
|         | |   `-MemberExpr 0x5605846b56e0 <col:25> 'int' lvalue ->_type 0x5605846b5550
|         | |     `-CXXThisExpr 0x5605846b56d0 <col:25> 'NamedIntArg *' implicit this
|         | |-CXXMemberCallExpr 0x5605846b5760 <col:32, col:45> 'const Element *'
|         | | `-MemberExpr 0x5605846b5730 <col:32, col:37> '<bound member function type>' .context 0x560584534ac8
|         | |   `-DeclRefExpr 0x5605846b5710 <col:32> 'const ArgContext' lvalue ParmVar 0x5605846b53e0 'args' 'const ArgContext &'
|         | |-DeclRefExpr 0x5605846b5780 <col:48> 'const String' lvalue ParmVar 0x5605846b52e8 'str' 'const String &'
|         | |-ImplicitCastExpr 0x5605846b5928 <line:521:11, col:12> 'void *' <BitCast>
|         | | `-UnaryOperator 0x5605846b57c0 <col:11, col:12> 'int *' prefix '&' cannot overflow
|         | |   `-DeclRefExpr 0x5605846b57a0 <col:12> 'int' lvalue ParmVar 0x5605846b5368 'value' 'int &'
|         | `-UnaryExprOrTypeTraitExpr 0x5605846b5818 <col:19, col:31> 'unsigned long' sizeof
|         |   `-ParenExpr 0x5605846b57f8 <col:25, col:31> 'int' lvalue
|         |     `-DeclRefExpr 0x5605846b57d8 <col:26> 'int' lvalue ParmVar 0x5605846b5368 'value' 'int &' non_odr_use_unevaluated
|         `-CXXMemberCallExpr 0x5605846b5fa0 <line:522:9, col:40> 'bool'
|           |-MemberExpr 0x5605846b5f58 <col:9, col:18> '<bound member function type>' .parse 0x5605846b5e48
|           | `-MaterializeTemporaryExpr 0x5605846b5a90 <col:9, col:16> 'IntArg' xvalue
|           |   `-CXXTemporaryObjectExpr 0x5605846b5970 <col:9, col:16> 'IntArg' 'void (int)'
|           |     `-CXXDefaultArgExpr 0x5605846b5950 <<invalid sloc>> 'int'
|           |-DeclRefExpr 0x5605846b5b08 <col:24> 'const String' lvalue ParmVar 0x5605846b52e8 'str' 'const String &'
|           |-DeclRefExpr 0x5605846b5b28 <col:29> 'int' lvalue ParmVar 0x5605846b5368 'value' 'int &'
|           `-DeclRefExpr 0x5605846b5b48 <col:36> 'const ArgContext' lvalue ParmVar 0x5605846b53e0 'args' 'const ArgContext &'
|-FieldDecl 0x5605846b5550 <line:524:5, col:9> col:9 referenced _type 'int'
|-CXXConstructorDecl 0x5605846cec98 <line:515:8> col:8 implicit constexpr NamedIntArg 'void (const NamedIntArg &)' inline default trivial noexcept-unevaluated 0x5605846cec98
| `-ParmVarDecl 0x5605846ceda8 <col:8> col:8 'const NamedIntArg &'
|-CXXConstructorDecl 0x5605846cee48 <col:8> col:8 implicit used constexpr NamedIntArg 'void (NamedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605846cef58 <col:8> col:8 used 'NamedIntArg &&'
| |-CXXCtorInitializer Field 0x5605846b5550 '_type' 'int'
| | `-ImplicitCastExpr 0x5605846cf750 <col:8> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5605846cf720 <col:8> 'int' xvalue ._type 0x5605846b5550
| |     `-CXXStaticCastExpr 0x5605846cf6f0 <col:8> 'NamedIntArg' xvalue static_cast<struct NamedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5605846cf6c0 <col:8> 'NamedIntArg' lvalue ParmVar 0x5605846cef58 '' 'NamedIntArg &&'
| `-CompoundStmt 0x5605846cf798 <col:8>
`-CXXDestructorDecl 0x5605846cf010 <col:8> col:8 implicit referenced ~NamedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.NamedIntArg = type { i32 }
  NonVirtualBaseLLVMType:%struct.NamedIntArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnyArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058467ee70 <../dummy_inc/click/args.hh:1326:1, line:1338:1> line:1326:7 referenced class AnyArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56058467ef88 <col:1, col:7> col:7 implicit class AnyArg
|-AccessSpecDecl 0x56058467f018 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x56058467f1c8 <line:1327:5, line:1329:5> line:1327:17 parse 'bool (const String &, const ArgContext &)' static
| |-ParmVarDecl 0x56058467f050 <col:23, col:36> col:37 'const String &'
| |-ParmVarDecl 0x56058467f0c8 <col:39, col:60> col:58 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56058467f8d8 <col:60> 'const ArgContext' lvalue Var 0x560584664018 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56058467f958 <col:72, line:1329:5>
|   `-ReturnStmt 0x56058467f948 <line:1328:9, col:16>
|     `-CXXBoolLiteralExpr 0x56058467f938 <col:16> 'bool' true
|-CXXMethodDecl 0x56058467f458 <line:1330:5, line:1333:5> line:1330:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x56058467f288 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56058467f300 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x56058467f378 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56058467f8f8 <col:79> 'const ArgContext' lvalue Var 0x560584664018 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56058467fd38 <col:91, line:1333:5>
|   |-CXXOperatorCallExpr 0x56058467fce0 <line:1331:9, col:18> 'String' lvalue
|   | |-ImplicitCastExpr 0x56058467fcc8 <col:16> 'String &(*)(const String &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56058467fca8 <col:16> 'String &(const String &)' lvalue CXXMethod 0x56058439db90 'operator=' 'String &(const String &)'
|   | |-DeclRefExpr 0x56058467f970 <col:9> 'String' lvalue ParmVar 0x56058467f300 'result' 'String &'
|   | `-DeclRefExpr 0x56058467f990 <col:18> 'const String' lvalue ParmVar 0x56058467f288 'str' 'const String &'
|   `-ReturnStmt 0x56058467fd28 <line:1332:9, col:16>
|     `-CXXBoolLiteralExpr 0x56058467fd18 <col:16> 'bool' true
|-CXXMethodDecl 0x56058467f808 <line:1334:5, line:1337:5> line:1334:17 parse 'bool (const String &, Vector<String> &, const ArgContext &)' static
| |-ParmVarDecl 0x56058467f520 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56058467f670 <col:42, col:58> col:58 used result 'Vector<String> &'
| |-ParmVarDecl 0x56058467f6e8 <col:66, col:87> col:85 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56058467f918 <col:87> 'const ArgContext' lvalue Var 0x560584664018 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56058467fe70 <col:99, line:1337:5>
|   |-CXXMemberCallExpr 0x56058467fe28 <line:1335:9, col:29> 'void'
|   | |-MemberExpr 0x56058467fdf8 <col:9, col:16> '<bound member function type>' .push_back 0x560584602088
|   | | `-DeclRefExpr 0x56058467fd58 <col:9> 'Vector<String>':'Vector<String>' lvalue ParmVar 0x56058467f670 'result' 'Vector<String> &'
|   | `-DeclRefExpr 0x56058467fdd8 <col:26> 'const String' lvalue ParmVar 0x56058467f520 'str' 'const String &'
|   `-ReturnStmt 0x56058467fe60 <line:1336:9, col:16>
|     `-CXXBoolLiteralExpr 0x56058467fe50 <col:16> 'bool' true
|-CXXConstructorDecl 0x5605846cfd90 <line:1326:7> col:7 implicit referenced constexpr AnyArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5605846cfe98 <col:7> col:7 implicit constexpr AnyArg 'void (const AnyArg &)' inline default trivial noexcept-unevaluated 0x5605846cfe98
| `-ParmVarDecl 0x5605846cffa8 <col:7> col:7 'const AnyArg &'
|-CXXConstructorDecl 0x5605846d0048 <col:7> col:7 implicit used constexpr AnyArg 'void (AnyArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605846d0158 <col:7> col:7 'AnyArg &&'
| `-CompoundStmt 0x5605846d0800 <col:7>
`-CXXDestructorDecl 0x5605846d01f8 <col:7> col:7 implicit referenced ~AnyArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnyArg = type { i8 }
  NonVirtualBaseLLVMType:%class.AnyArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class KeywordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560584680c98 <../dummy_inc/click/args.hh:1358:1, line:1362:1> line:1358:7 referenced class KeywordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560584680db8 <col:1, col:7> col:7 implicit class KeywordArg
|-AccessSpecDecl 0x560584680e48 <col:20, col:26> col:20 public
|-CXXMethodDecl 0x5605846810a0 <line:1359:5, line:1361:5> line:1359:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x560584680e80 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x560584680f60 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x560584680fd8 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x560584681170 <col:79> 'const ArgContext' lvalue Var 0x560584664018 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5605846812e8 <col:91, line:1361:5>
|   `-ReturnStmt 0x5605846812d8 <line:1360:9, col:42>
|     `-CallExpr 0x560584681288 <col:16, col:42> 'bool'
|       |-ImplicitCastExpr 0x560584681270 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560584681250 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x560584680be0 'cp_keyword' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5605846811d8 <col:27> 'const String' lvalue ParmVar 0x560584680e80 'str' 'const String &'
|       |-UnaryOperator 0x560584681218 <col:32, col:33> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5605846811f8 <col:33> 'String' lvalue ParmVar 0x560584680f60 'result' 'String &'
|       `-ImplicitCastExpr 0x5605846812c0 <col:41> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x560584681230 <col:41> 'int' 0
|-CXXConstructorDecl 0x5605846e2e38 <line:1358:7> col:7 implicit referenced constexpr KeywordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5605846e2f38 <col:7> col:7 implicit constexpr KeywordArg 'void (const KeywordArg &)' inline default trivial noexcept-unevaluated 0x5605846e2f38
| `-ParmVarDecl 0x5605846e3048 <col:7> col:7 'const KeywordArg &'
|-CXXConstructorDecl 0x5605846e30e8 <col:7> col:7 implicit used constexpr KeywordArg 'void (KeywordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605846e31f8 <col:7> col:7 'KeywordArg &&'
| `-CompoundStmt 0x5605846e3930 <col:7>
`-CXXDestructorDecl 0x5605846e3298 <col:7> col:7 implicit referenced ~KeywordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.KeywordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.KeywordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605843c1320 prev 0x5605843b3708 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605843c1418 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x5605843c14a8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5605843c18d0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5605843c14e8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x5605843c1568 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x5605843c16a0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5605843c1750 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x5605843c1b98 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x5605843c19a0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5605843c1a18 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x5605843c1ab8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5605843c6538 <col:34> 'const ArgContext' lvalue Var 0x5605843b36a0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5605843c5f90 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5605843c1c60 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5605843c1d50 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x5605843c1dc8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5605843c6558 <col:34> 'const ArgContext' lvalue Var 0x5605843b36a0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5605843c6738 <col:46, line:375:5>
|   `-ReturnStmt 0x5605843c6728 <line:374:2, col:63>
|     `-CallExpr 0x5605843c66f0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5605843c66d8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5605843c6690 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x5605843c1b98 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5605843c65f0 <col:15> 'const String' lvalue ParmVar 0x5605843c1c60 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5605843c6640 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5605843c6610 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5605843c1d50 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x5605843c6670 <col:59> 'const ArgContext' lvalue ParmVar 0x5605843c1dc8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5605843c6468 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x5605843c6058 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5605843c62d0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5605843c6348 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5605843c6578 <col:34> 'const ArgContext' lvalue Var 0x5605843b36a0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x5605846e45e0 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5605846e46e8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x5605846e46e8
| `-ParmVarDecl 0x5605846e47f8 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x5605846e4898 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x5605846e4898
| `-ParmVarDecl 0x5605846e49a8 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x5605846e4a48 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058467be00 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56058467bf18 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x56058467bfa8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x56058467c1e8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x56058467bfe0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x56058467c060 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x56058467c0d8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x56058467c400 <col:81> 'const ArgContext' lvalue Var 0x560584664018 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x56058467c340 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x56058467c2b0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x56058467c558 <col:35, line:1261:5>
|   `-ReturnStmt 0x56058467c548 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x56058467c530 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x56058467c500 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56058467c4e8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x56058467c4c0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x56058467c4a0 <col:16, col:24> 'String' (CXXTemporary 0x56058467c4a0)
|               `-CXXConstructExpr 0x56058467c468 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x56058467c450 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x56058467c430 <col:23> 'bool' lvalue ParmVar 0x56058467c2b0 'x' 'bool'
|-CXXConstructorDecl 0x5605846e52f8 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5605846e53f8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x5605846e53f8
| `-ParmVarDecl 0x5605846e5508 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x5605846e55a8 <col:7> col:7 implicit constexpr BoolArg 'void (BoolArg &&)' inline default trivial noexcept-unevaluated 0x5605846e55a8
| `-ParmVarDecl 0x5605846e56b8 <col:7> col:7 'BoolArg &&'
`-CXXDestructorDecl 0x5605846e5758 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058458c018 prev 0x560584581220 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56058458c110 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56058458c200 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56058458c328 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56058458c4a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56058458c628 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56058458c7a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56058459d5d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56058459de48 <col:11>
|-CXXDestructorDecl 0x56058459d6b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56058459d7e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56058459d7e8
| `-ParmVarDecl 0x56058459d8f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56058459d998 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56058459d998
| `-ParmVarDecl 0x56058459daa8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5605845a0868 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5605845a0978 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5605845a0bf8 <col:11>
|   `-ReturnStmt 0x5605845a0be8 <col:11>
|     `-UnaryOperator 0x5605845a0bd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5605845a0bc0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5605845a09e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5605845a09e8
  `-ParmVarDecl 0x5605845a0af8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058458c810 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56058458c928 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56058458c9c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56058458ca30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56058458ca98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56058458cb00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56058458cb60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56058458cc20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56058458cc80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56058458cce0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56058459d4e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56058458c9c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56058459de58 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56058459deb0 <col:12>
|-CXXConstructorDecl 0x56058459db18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56058459db18
| `-ParmVarDecl 0x56058459dc28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56058459dcc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56058459dcc8
| `-ParmVarDecl 0x56058459ddd8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56058459ff50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058457a930 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56058457aa48 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56058457aad8 <col:16, col:22> col:16 public
|-EnumDecl 0x56058457ab00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56058457ac00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56058457ace0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56058457abe0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56058457abc0 <col:21> 'int' 28
| `-EnumConstantDecl 0x56058457ac90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56058457acf8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56058457ac70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56058457ac50 <col:22> 'int' 64
|-CXXMethodDecl 0x56058457b038 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56058457ad20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56058457ada0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56058457ae18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56058457ae90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56058457b0f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56058457b2f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56058457b170 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56058457b1e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56058457b3a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56058457b508 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56058457b418 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56058457b5b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x56058457b910 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56058457b8a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56058457b840 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56058457b800 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5605840514e0 'void'
|       |-PointerType 0x5605842facd0 'unsigned char *'
|       | `-BuiltinType 0x5605840515e0 'unsigned char'
|       |-TypedefType 0x5605840f72a0 'size_t' sugar
|       | |-Typedef 0x5605840c1be0 'size_t'
|       | `-BuiltinType 0x560584051640 'unsigned long'
|       `-PointerType 0x560584051ce0 'void *'
|         `-BuiltinType 0x5605840514e0 'void'
|-CXXMethodDecl 0x56058457bd88 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56058457b980 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56058457b9f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56058457ba90 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56058457bb10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x560584596480 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x560584596468 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x560584596430 <col:58> 'int' 0
| |-ParmVarDecl 0x56058457bb90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5605845964a8 <col:76> 'int' 0
| |-ParmVarDecl 0x56058457bc10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5605845964c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56058457be58 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56058457bed8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56058457bf98 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56058457c038 <col:20>
| `-OptimizeNoneAttr 0x56058457c090 <col:30>
|-CXXMethodDecl 0x56058457c108 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56058457c1a8 <col:20>
| `-OptimizeNoneAttr 0x56058457c200 <col:30>
|-CXXMethodDecl 0x56058457c278 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56058457c318 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56058457c3c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56058457c468 <col:20>
| |-OptimizeNoneAttr 0x56058457c4c0 <col:30>
| `-WarnUnusedResultAttr 0x56058457c4e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56058457c540 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56058457c5e0 <col:20>
| `-OptimizeNoneAttr 0x56058457c638 <col:30>
|-CXXMethodDecl 0x56058457c688 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56058457c728 <col:20>
| `-OptimizeNoneAttr 0x56058457c780 <col:30>
|-CXXMethodDecl 0x56058457c7c8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x56058457c868 <col:20>
| `-OptimizeNoneAttr 0x56058457c8c0 <col:30>
|-CXXMethodDecl 0x56058457c908 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56058457c9c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56058457ca90 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56058457cb58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56058457cc18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56058457cd38 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x560584596590 <col:54, line:99:5>
|   `-ReturnStmt 0x560584596580 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x560584596568 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x560584596538 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56058458d018
|         `-CXXThisExpr 0x560584596528 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56058457ced8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56058457cde8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x560584596640 <col:67, line:103:5>
|   `-BinaryOperator 0x560584596620 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5605845965b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56058458d018
|     | `-CXXThisExpr 0x5605845965a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x560584596608 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5605845965e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56058457cde8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56058457cfd0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5605845966c0 <col:33, line:107:5>
|   `-ReturnStmt 0x5605845966b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x560584596698 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x560584596668 <col:16> 'void *' lvalue ->_destructor_argument 0x56058458d080
|         `-CXXThisExpr 0x560584596658 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56058457d090 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x560584596cf0 <col:25, line:113:5>
|   |-ParenExpr 0x560584596a38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x560584596a08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x560584596778 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x560584596750 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x560584596718 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5605845966e8 <col:24> '<bound member function type>' ->shared 0x56058457c108
|   |   |       `-ImplicitCastExpr 0x560584596738 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5605845966d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5605845967d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5605845967b8 <col:42> 'int' 0
|   |   `-CallExpr 0x560584596968 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x560584596950 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560584596930 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605845969a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584596848 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5605845969c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584596870 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605845969d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5605845968a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5605845969f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560584596918 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560584596900 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605845968c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x560584596c38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x560584596a68 <col:2> 'unsigned char *' lvalue ->_head 0x56058458ce20
|   | | `-CXXThisExpr 0x560584596a58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x560584596c20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x560584596c00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x560584596aa8 <col:10> 'unsigned char *' lvalue ->_data 0x56058458ce88
|   |     | `-CXXThisExpr 0x560584596a98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x560584596be8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x560584596bc8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x560584596ae8 <col:18> 'unsigned char *' lvalue ->_tail 0x56058458cef0
|   |         | `-CXXThisExpr 0x560584596ad8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x560584596bb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x560584596b90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x560584596b28 <col:26> 'unsigned char *' lvalue ->_end 0x56058458cf58
|   |             | `-CXXThisExpr 0x560584596b18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x560584596b78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x560584596b58 <col:33> 'int' 0
|   `-BinaryOperator 0x560584596cd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x560584596c68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56058458d018
|     | `-CXXThisExpr 0x560584596c58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x560584596cb8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x560584596c98 <col:16> 'int' 0
|-CXXMethodDecl 0x56058457d1d0 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56058457d140 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56058457d278 <col:20>
| |-OptimizeNoneAttr 0x56058457d2d0 <col:30>
| `-WarnUnusedResultAttr 0x56058457d2f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56058457d3c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56058457d338 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56058457d470 <col:20>
| |-OptimizeNoneAttr 0x56058457d4c8 <col:30>
| `-WarnUnusedResultAttr 0x56058457d4f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56058457d628 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56058457d530 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56058457d6d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56058457d7d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56058457d740 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56058457d878 <col:20>
| `-OptimizeNoneAttr 0x56058457d8d0 <col:30>
|-CXXMethodDecl 0x56058457d998 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56058457d908 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56058457da40 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56058457db40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56058457dab0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56058457dbe8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56058457dce8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56058457dc58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56058457dd90 <col:20>
| `-OptimizeNoneAttr 0x56058457dde8 <col:30>
|-CXXMethodDecl 0x56058457df78 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56058457de28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56058457dea0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5605845964e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56058457e028 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56058457e228 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56058457e0a0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56058457e118 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56058457e438 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56058457e2e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56058457e360 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56058457e648 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56058457e4f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56058457e578 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5605845964f8 <col:39> 'int' 0
|-CXXMethodDecl 0x56058457e718 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56058457e7e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56058457e8a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56058457e968 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56058457ea30 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56058457eb78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56058457eae8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56058457ed48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56058457ec38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56058457ecb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56058457ee18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56058457eed8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56058457ef78 <col:20>
| `-OptimizeNoneAttr 0x56058457efd0 <col:30>
|-CXXMethodDecl 0x56058457f020 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56058457f0c0 <col:20>
| `-OptimizeNoneAttr 0x56058457f118 <col:30>
|-CXXMethodDecl 0x56058457f168 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56058457f228 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56058457f2f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56058457f390 <col:20>
| `-OptimizeNoneAttr 0x56058457f3e8 <col:30>
|-CXXMethodDecl 0x56058457f538 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56058457f428 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56058457f4a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56058457f688 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56058457f5f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56058457f760 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56058457f820 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56058457f8c0 <col:20>
| `-OptimizeNoneAttr 0x56058457f918 <col:30>
|-CXXMethodDecl 0x56058457f968 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56058457fa08 <col:20>
| `-OptimizeNoneAttr 0x56058457fa60 <col:30>
|-CXXMethodDecl 0x56058457fab0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56058457fb78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56058457fc18 <col:20>
| `-OptimizeNoneAttr 0x56058457fc70 <col:30>
|-CXXMethodDecl 0x56058457fcb8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56058457fdd8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56058457ff48 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56058457fe88 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x560584580038 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5605845800d8 <col:20>
| `-OptimizeNoneAttr 0x560584580130 <col:30>
|-CXXMethodDecl 0x560584580180 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x560584580240 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560584580478 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5605845802f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x560584580368 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560584580528 <col:20>
| `-OptimizeNoneAttr 0x560584580580 <col:30>
|-CXXMethodDecl 0x560584580628 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5605845806c8 <col:20>
| `-OptimizeNoneAttr 0x560584580720 <col:30>
|-CXXMethodDecl 0x560584580770 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x560584580810 <col:20>
| `-OptimizeNoneAttr 0x560584580868 <col:30>
|-CXXMethodDecl 0x5605845808b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x560584580950 <col:20>
| `-OptimizeNoneAttr 0x5605845809a8 <col:30>
|-CXXMethodDecl 0x560584580aa8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5605845809e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x560584580b50 <col:20>
| `-OptimizeNoneAttr 0x560584580ba8 <col:30>
|-CXXMethodDecl 0x560584580d68 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x560584580be0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x560584580c58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560584580e18 <col:20>
| `-OptimizeNoneAttr 0x560584580e70 <col:30>
|-CXXMethodDecl 0x560584580f18 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x560584581038 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x560584581158 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5605845811f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x560584581220 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x560584581348 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5605845813e8 <col:20>
| `-OptimizeNoneAttr 0x560584581440 <col:30>
|-CXXMethodDecl 0x5605845814e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x560584581588 <col:20>
| `-OptimizeNoneAttr 0x5605845815e0 <col:30>
|-AccessSpecDecl 0x560584581608 <line:344:3, col:9> col:3 public
|-EnumDecl 0x560584581630 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x560584581730 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x560584581780 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560584581710 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5605845816f0 <col:14> 'int' 48
|-CXXMethodDecl 0x5605845817e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x560584581888 <col:20>
| `-OptimizeNoneAttr 0x5605845818e0 <col:30>
|-CXXMethodDecl 0x560584581958 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5605845819f8 <col:20>
| `-OptimizeNoneAttr 0x560584581a50 <col:30>
|-CXXMethodDecl 0x560584581b18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x560584581a88 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x560584581cb8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x560584581e58 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x560584581d68 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x560584581f00 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x560584582000 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605845823b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584581fe0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x560584581fc0 <col:9> 'int' 0
| |-EnumConstantDecl 0x560584582090 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605845823c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584582070 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x560584582050 <col:14> 'int' 1
| |-EnumConstantDecl 0x560584582120 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605845823e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584582100 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5605845820e0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5605845821b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5605845823f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584582190 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x560584582170 <col:14> 'int' 3
| |-EnumConstantDecl 0x560584582240 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560584582410 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584582220 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x560584582200 <col:13> 'int' 4
| |-EnumConstantDecl 0x5605845822d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560584582428 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5605845822b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x560584582290 <col:13> 'int' 5
| `-EnumConstantDecl 0x560584582360 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x560584582440 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560584582340 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x560584582320 <col:14> 'int' 6
|-CXXMethodDecl 0x5605845824a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x560584582548 <col:20>
| `-OptimizeNoneAttr 0x5605845825a0 <col:30>
|-CXXMethodDecl 0x560584582698 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5605845825d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x560584582740 <col:20>
| `-OptimizeNoneAttr 0x560584582798 <col:30>
|-CXXMethodDecl 0x560584582808 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x560584582930 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x560584582aa8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5605845829e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x560584582b70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x560584582c38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x560584582d78 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x560584582ce8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x560584582e20 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x560584582f20 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560584583120 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584582f00 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x560584582ee0 <col:23> 'int' 0
| |-EnumConstantDecl 0x560584582fb0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560584583138 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584582f90 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x560584582f70 <col:45> 'int' 4
| |-EnumConstantDecl 0x560584583040 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560584583150 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584583020 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x560584583000 <col:24> 'int' 0
| `-EnumConstantDecl 0x5605845830d0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x560584583168 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605845830b0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x560584583090 <col:47> 'int' 16
|-CXXMethodDecl 0x5605845831c8 <line:431:5, col:36> col:22 used dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x560584583338 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x560584583278 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5605845833e0 <col:20>
| `-OptimizeNoneAttr 0x560584583438 <col:30>
|-CXXMethodDecl 0x560584583488 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x560584596e10 <col:18, col:36>
|   `-ReturnStmt 0x560584596e00 <col:20, col:33>
|     `-ImplicitCastExpr 0x560584596de8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x560584596dc8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x560584596d98 <col:27> '<bound member function type>' ->xanno 0x5605845814e8
|           `-CXXThisExpr 0x560584596d88 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x560584583580 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x560584596f20 <col:30, col:48>
|   `-ReturnStmt 0x560584596f10 <col:32, col:45>
|     `-ImplicitCastExpr 0x560584596ef8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x560584596ed8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x560584596ea8 <col:39> '<bound member function type>' ->xanno 0x560584581348
|           `-CXXThisExpr 0x560584596e98 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x560584583668 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5605845970b8 <col:24, col:50>
|   `-ReturnStmt 0x5605845970a8 <col:26, col:47>
|     `-UnaryOperator 0x560584597090 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560584597070 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x560584597058 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560584597008 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56058458c328
|         |   `-CXXMemberCallExpr 0x560584596fe8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x560584596fb8 <col:34> '<bound member function type>' ->xanno 0x5605845814e8
|         |       `-CXXThisExpr 0x560584596fa8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x560584597038 <col:46> 'int' 0
|-CXXMethodDecl 0x560584583770 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x560584597288 <col:36, col:62>
|   `-ReturnStmt 0x560584597278 <col:38, col:59>
|     `-UnaryOperator 0x560584597260 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560584597240 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x560584597228 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5605845971a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56058458c328
|         |   `-CXXMemberCallExpr 0x560584597180 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560584597150 <col:46> '<bound member function type>' ->xanno 0x560584581348
|         |       `-CXXThisExpr 0x560584597140 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5605845971d0 <col:58> 'int' 0
|-CXXMethodDecl 0x560584583888 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x560584597420 <col:26, col:53>
|   `-ReturnStmt 0x560584597410 <col:28, col:50>
|     `-UnaryOperator 0x5605845973f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5605845973d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5605845973c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560584597370 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56058458c628
|         |   `-CXXMemberCallExpr 0x560584597350 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x560584597320 <col:36> '<bound member function type>' ->xanno 0x5605845814e8
|         |       `-CXXThisExpr 0x560584597310 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5605845973a0 <col:49> 'int' 0
|-CXXMethodDecl 0x5605845839a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5605845975f8 <col:38, col:65>
|   `-ReturnStmt 0x5605845975e8 <col:40, col:62>
|     `-UnaryOperator 0x5605845975d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5605845975b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x560584597598 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560584597508 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56058458c628
|         |   `-CXXMemberCallExpr 0x5605845974e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5605845974b8 <col:48> '<bound member function type>' ->xanno 0x560584581348
|         |       `-CXXThisExpr 0x5605845974a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x560584597538 <col:61> 'int' 0
|-CXXMethodDecl 0x560584583b58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x560584583a60 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x560584597cc8 <col:34, line:463:5>
|   |-ParenExpr 0x560584597b10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x560584597ae0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x560584597748 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560584597718 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560584597668 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560584597650 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560584597610 <col:23> 'int' lvalue ParmVar 0x560584583a60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560584597630 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605845976f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5605845976c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560584597688 <col:33> 'int' lvalue ParmVar 0x560584583a60 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5605845976e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5605845976a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5605845977a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560584597788 <col:56> 'int' 0
|   |   `-CallExpr 0x560584597a40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x560584597a28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560584597a08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560584597a80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584597898 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x560584597a98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605845978c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560584597ab0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560584597900 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x560584597ac8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5605845979f0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5605845979d8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560584597998 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x560584597cb8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x560584597ca0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x560584597c80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x560584597c50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560584597c00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56058458c328
|         |   `-CXXMemberCallExpr 0x560584597be0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560584597bb0 <col:9> '<bound member function type>' ->xanno 0x560584581348
|         |       `-CXXThisExpr 0x560584597ba0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x560584597c68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x560584597c30 <col:21> 'int' lvalue ParmVar 0x560584583a60 'i' 'int'
|-CXXMethodDecl 0x560584583da8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x560584583c18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x560584583c90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x560584598358 <col:40, line:472:5>
|   |-ParenExpr 0x560584598170 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x560584598140 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x560584597e20 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560584597df0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560584597d40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560584597d28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560584597ce8 <col:23> 'int' lvalue ParmVar 0x560584583c18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560584597d08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560584597dd0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560584597da0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560584597d60 <col:33> 'int' lvalue ParmVar 0x560584583c18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x560584597db8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x560584597d80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x560584597e80 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560584597e60 <col:56> 'int' 0
|   |   `-CallExpr 0x5605845980a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x560584598088 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560584598068 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605845980e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584597ef0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5605845980f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584597f20 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560584598110 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560584597f58 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x560584598128 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560584598050 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560584598038 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560584597ff8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x560584598338 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5605845982e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5605845982b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x560584598260 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56058458c328
|     | |   `-CXXMemberCallExpr 0x560584598240 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x560584598210 <col:2> '<bound member function type>' ->xanno 0x5605845814e8
|     | |       `-CXXThisExpr 0x560584598200 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5605845982c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x560584598290 <col:14> 'int' lvalue ParmVar 0x560584583c18 'i' 'int'
|     `-ImplicitCastExpr 0x560584598320 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x560584598300 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x560584583c90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x560584583f68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x560584583e70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x560584598ad8 <col:36, line:485:5>
|   |-ParenExpr 0x560584598840 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x560584598810 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605845984f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5605845984c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605845983d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605845983b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560584598378 <col:23> 'int' lvalue ParmVar 0x560584583e70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560584598398 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5605845984a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560584598488 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605845983f0 <col:33> 'int' lvalue ParmVar 0x560584583e70 'i' 'int'
|   |   |     `-BinaryOperator 0x560584598468 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560584598450 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560584598410 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560584598430 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560584598550 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560584598530 <col:60> 'int' 0
|   |   `-CallExpr 0x560584598770 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560584598758 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560584598738 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5605845987b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605845985c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5605845987c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605845985f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5605845987e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560584598630 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5605845987f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560584598720 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560584598708 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5605845986c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x560584598ac8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x560584598ab0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x560584598a98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560584598a68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x560584598a08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5605845989d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560584598950 <col:61, col:70> 'char const[48]' lvalue ->c 0x56058458c200
|             |   `-CXXMemberCallExpr 0x560584598930 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560584598900 <col:61> '<bound member function type>' ->xanno 0x560584581348
|             |       `-CXXThisExpr 0x5605845988f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5605845989f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560584598980 <col:74> 'int' lvalue ParmVar 0x560584583e70 'i' 'int'
|-CXXMethodDecl 0x5605845841b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x560584584028 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605845840a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x560584599228 <col:42, line:500:5>
|   |-ParenExpr 0x560584598fc0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x560584598f90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560584598c70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560584598c40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560584598b50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560584598b38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560584598af8 <col:23> 'int' lvalue ParmVar 0x560584584028 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560584598b18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560584598c20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560584598c08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560584598b70 <col:33> 'int' lvalue ParmVar 0x560584584028 'i' 'int'
|   |   |     `-BinaryOperator 0x560584598be8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560584598bd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560584598b90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560584598bb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560584598cd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560584598cb0 <col:60> 'int' 0
|   |   `-CallExpr 0x560584598ef0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560584598ed8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560584598eb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560584598f30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584598d40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560584598f48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584598d78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560584598f60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560584598db0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x560584598f78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560584598ea0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560584598e88 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560584598e48 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x560584599208 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5605845991b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560584599188 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x560584599130 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560584599100 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5605845990b0 <col:48, col:57> 'char [48]' lvalue ->c 0x56058458c200
|     |     |   `-CXXMemberCallExpr 0x560584599090 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560584599060 <col:48> '<bound member function type>' ->xanno 0x5605845814e8
|     |     |       `-CXXThisExpr 0x560584599050 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560584599118 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5605845990e0 <col:61> 'int' lvalue ParmVar 0x560584584028 'i' 'int'
|     `-ImplicitCastExpr 0x5605845991f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5605845991d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5605845840a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x560584584378 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x560584584280 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x560584599988 <col:35, line:513:5>
|   |-ParenExpr 0x560584599698 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x560584599668 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5605845993c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560584599390 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5605845992a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560584599288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560584599248 <col:23> 'int' lvalue ParmVar 0x560584584280 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560584599268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560584599370 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560584599358 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5605845992c0 <col:33> 'int' lvalue ParmVar 0x560584584280 'i' 'int'
|   |   |     `-BinaryOperator 0x560584599338 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560584599320 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5605845992e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560584599300 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560584599420 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560584599400 <col:60> 'int' 0
|   |   `-CallExpr 0x5605845995c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5605845995b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560584599590 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560584599608 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584599490 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560584599620 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5605845994c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560584599638 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560584599500 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x560584599650 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560584599578 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560584599560 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560584599520 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x560584599978 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x560584599960 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x560584599948 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560584599918 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x560584599890 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x560584599860 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560584599810 <col:60, col:69> 'char const[48]' lvalue ->c 0x56058458c200
|             |   `-CXXMemberCallExpr 0x5605845997f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5605845997c0 <col:60> '<bound member function type>' ->xanno 0x560584581348
|             |       `-CXXThisExpr 0x5605845997b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560584599878 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560584599840 <col:73> 'int' lvalue ParmVar 0x560584584280 'i' 'int'
|-CXXMethodDecl 0x5605845845c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x560584584438 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605845844b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56058459a0a8 <col:41, line:528:5>
|   |-ParenExpr 0x560584599e30 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x560584599e00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560584599b20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560584599af0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560584599a00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5605845999e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5605845999a8 <col:23> 'int' lvalue ParmVar 0x560584584438 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5605845999c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560584599ad0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560584599ab8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560584599a20 <col:33> 'int' lvalue ParmVar 0x560584584438 'i' 'int'
|   |   |     `-BinaryOperator 0x560584599a98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560584599a80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560584599a40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560584599a60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560584599b80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560584599b60 <col:60> 'int' 0
|   |   `-CallExpr 0x560584599d60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560584599d48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560584599d28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560584599da0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584599bf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560584599db8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560584599c28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560584599dd0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560584599c60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x560584599de8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560584599d10 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560584599cf8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560584599cb8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56058459a088 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56058459a038 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56058459a008 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x560584599fb0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560584599f70 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560584599f20 <col:47, col:56> 'char [48]' lvalue ->c 0x56058458c200
|     |     |   `-CXXMemberCallExpr 0x560584599f00 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560584599ed0 <col:47> '<bound member function type>' ->xanno 0x5605845814e8
|     |     |       `-CXXThisExpr 0x560584599ec0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560584599f88 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560584599f50 <col:60> 'int' lvalue ParmVar 0x560584584438 'i' 'int'
|     `-ImplicitCastExpr 0x56058459a070 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56058459a050 <col:65> 'int16_t':'short' lvalue ParmVar 0x5605845844b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x560584584788 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x560584584690 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56058459a778 <col:36, line:541:5>
|   |-ParenExpr 0x56058459a518 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56058459a4e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56058459a240 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56058459a210 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56058459a120 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56058459a108 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56058459a0c8 <col:23> 'int' lvalue ParmVar 0x560584584690 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56058459a0e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56058459a1f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56058459a1d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56058459a140 <col:33> 'int' lvalue ParmVar 0x560584584690 'i' 'int'
|   |   |     `-BinaryOperator 0x56058459a1b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56058459a1a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56058459a160 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56058459a180 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56058459a2a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56058459a280 <col:60> 'int' 0
|   |   `-CallExpr 0x56058459a448 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56058459a430 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56058459a410 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56058459a488 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459a310 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56058459a4a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459a348 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56058459a4b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56058459a380 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56058459a4d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56058459a3f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56058459a3e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56058459a3a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56058459a768 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56058459a750 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56058459a738 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56058459a708 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56058459a6b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56058459a680 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56058459a630 <col:61, col:70> 'char const[48]' lvalue ->c 0x56058458c200
|             |   `-CXXMemberCallExpr 0x56058459a610 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56058459a5e0 <col:61> '<bound member function type>' ->xanno 0x560584581348
|             |       `-CXXThisExpr 0x56058459a5d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56058459a698 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56058459a660 <col:74> 'int' lvalue ParmVar 0x560584584690 'i' 'int'
|-CXXMethodDecl 0x560584584958 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x560584584848 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5605845848c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560584584a08 <col:20>
| `-OptimizeNoneAttr 0x560584584a60 <col:30>
|-CXXMethodDecl 0x560584584b98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x560584584aa0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56058459ae48 <col:35, line:562:5>
|   |-ParenExpr 0x56058459abe8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56058459abb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56058459a910 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56058459a8e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56058459a7f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56058459a7d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56058459a798 <col:23> 'int' lvalue ParmVar 0x560584584aa0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56058459a7b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56058459a8c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56058459a8a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56058459a810 <col:33> 'int' lvalue ParmVar 0x560584584aa0 'i' 'int'
|   |   |     `-BinaryOperator 0x56058459a888 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56058459a870 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56058459a830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56058459a850 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56058459a970 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56058459a950 <col:60> 'int' 0
|   |   `-CallExpr 0x56058459ab18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56058459ab00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56058459aae0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56058459ab58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459a9e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56058459ab70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459aa18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56058459ab88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56058459aa50 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56058459aba0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56058459aac8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56058459aab0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56058459aa70 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56058459ae38 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56058459ae20 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56058459ae08 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56058459add8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56058459ad80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56058459ad50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56058459ad00 <col:60, col:69> 'char const[48]' lvalue ->c 0x56058458c200
|             |   `-CXXMemberCallExpr 0x56058459ace0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56058459acb0 <col:60> '<bound member function type>' ->xanno 0x560584581348
|             |       `-CXXThisExpr 0x56058459aca0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56058459ad68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56058459ad30 <col:73> 'int' lvalue ParmVar 0x560584584aa0 'i' 'int'
|-CXXMethodDecl 0x560584584da8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x560584584c58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560584584cd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56058459b528 <col:41, line:577:5>
|   |-ParenExpr 0x56058459b2b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56058459b288 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56058459afe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56058459afb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56058459aec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56058459aea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56058459ae68 <col:23> 'int' lvalue ParmVar 0x560584584c58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56058459ae88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56058459af90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56058459af78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56058459aee0 <col:33> 'int' lvalue ParmVar 0x560584584c58 'i' 'int'
|   |   |     `-BinaryOperator 0x56058459af58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56058459af40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56058459af00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56058459af20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56058459b040 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56058459b020 <col:60> 'int' 0
|   |   `-CallExpr 0x56058459b1e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56058459b1d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56058459b1b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56058459b228 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459b0b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56058459b240 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459b0e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56058459b258 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56058459b120 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56058459b270 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56058459b198 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56058459b180 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56058459b140 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56058459b508 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56058459b4b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56058459b488 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56058459b428 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56058459b3f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56058459b3a8 <col:47, col:56> 'char [48]' lvalue ->c 0x56058458c200
|     |     |   `-CXXMemberCallExpr 0x56058459b388 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56058459b358 <col:47> '<bound member function type>' ->xanno 0x5605845814e8
|     |     |       `-CXXThisExpr 0x56058459b348 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56058459b410 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56058459b3d8 <col:60> 'int' lvalue ParmVar 0x560584584c58 'i' 'int'
|     `-ImplicitCastExpr 0x56058459b4f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56058459b4d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x560584584cd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x560584584f68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x560584584e70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56058459bc58 <col:36, line:591:5>
|   |-ParenExpr 0x56058459b998 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56058459b968 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56058459b6c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56058459b690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56058459b5a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56058459b588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56058459b548 <col:23> 'int' lvalue ParmVar 0x560584584e70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56058459b568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56058459b670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56058459b658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56058459b5c0 <col:33> 'int' lvalue ParmVar 0x560584584e70 'i' 'int'
|   |   |     `-BinaryOperator 0x56058459b638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56058459b620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56058459b5e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56058459b600 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56058459b720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56058459b700 <col:60> 'int' 0
|   |   `-CallExpr 0x56058459b8c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56058459b8b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56058459b890 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56058459b908 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459b790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56058459b920 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459b7c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56058459b938 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56058459b800 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56058459b950 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56058459b878 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56058459b860 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56058459b820 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56058459bc48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56058459bc30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56058459bc18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56058459bbe8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56058459bb60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56058459bb30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56058459bae0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56058458c200
|             |   `-CXXMemberCallExpr 0x56058459bac0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56058459ba90 <col:61> '<bound member function type>' ->xanno 0x560584581348
|             |       `-CXXThisExpr 0x56058459ba80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56058459bb48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56058459bb10 <col:74> 'int' lvalue ParmVar 0x560584584e70 'i' 'int'
|-CXXMethodDecl 0x5605845851b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x560584585028 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5605845850a0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56058459c338 <col:42, line:606:5>
|   |-ParenExpr 0x56058459c0c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56058459c098 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56058459bdf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56058459bdc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56058459bcd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56058459bcb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56058459bc78 <col:23> 'int' lvalue ParmVar 0x560584585028 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56058459bc98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56058459bda0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56058459bd88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56058459bcf0 <col:33> 'int' lvalue ParmVar 0x560584585028 'i' 'int'
|   |   |     `-BinaryOperator 0x56058459bd68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56058459bd50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56058459bd10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56058459bd30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56058459be50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56058459be30 <col:60> 'int' 0
|   |   `-CallExpr 0x56058459bff8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56058459bfe0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56058459bfc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56058459c038 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459bec0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56058459c050 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459bef8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56058459c068 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56058459bf30 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56058459c080 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56058459bfa8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56058459bf90 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56058459bf50 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56058459c318 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56058459c2c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56058459c298 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56058459c238 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56058459c208 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56058459c1b8 <col:48, col:57> 'char [48]' lvalue ->c 0x56058458c200
|     |     |   `-CXXMemberCallExpr 0x56058459c198 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56058459c168 <col:48> '<bound member function type>' ->xanno 0x5605845814e8
|     |     |       `-CXXThisExpr 0x56058459c158 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56058459c220 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56058459c1e8 <col:61> 'int' lvalue ParmVar 0x560584585028 'i' 'int'
|     `-ImplicitCastExpr 0x56058459c300 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56058459c2e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5605845850a0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x560584585350 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x560584585280 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56058459cba8 <col:33, line:620:5>
|   |-ParenExpr 0x56058459c920 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56058459c8f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56058459c540 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56058459c510 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56058459c3b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56058459c398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56058459c358 <col:23> 'int' lvalue ParmVar 0x560584585280 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56058459c378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56058459c4f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56058459c4d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56058459c3d0 <col:33> 'int' lvalue ParmVar 0x560584585280 'i' 'int'
|   |   |     `-BinaryOperator 0x56058459c4b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56058459c4a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56058459c3f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56058459c478 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56058459c460 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56058459c428 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56058459c5a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56058459c580 <col:79> 'int' 0
|   |   `-CallExpr 0x56058459c850 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56058459c838 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56058459c818 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56058459c890 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459c688 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56058459c8a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459c6d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56058459c8c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56058459c708 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56058459c8d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56058459c800 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56058459c7e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56058459c7a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56058459cb98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56058459cb80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56058459cb68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56058459cb38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56058459cab0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56058459ca80 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56058459ca30 <col:67, col:76> 'char const[48]' lvalue ->c 0x56058458c200
|             |   `-CXXMemberCallExpr 0x56058459ca10 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56058459c9e0 <col:67> '<bound member function type>' ->xanno 0x560584581348
|             |       `-CXXThisExpr 0x56058459c9d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56058459ca98 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56058459ca60 <col:80> 'int' lvalue ParmVar 0x560584585280 'i' 'int'
|-CXXMethodDecl 0x560584585568 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x560584585410 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560584585490 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56058459d3d0 <col:45, line:635:5>
|   |-ParenExpr 0x56058459d118 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56058459d0e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56058459cdb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56058459cd80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56058459cc20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56058459cc08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56058459cbc8 <col:23> 'int' lvalue ParmVar 0x560584585410 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56058459cbe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56058459cd60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56058459cd48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56058459cc40 <col:33> 'int' lvalue ParmVar 0x560584585410 'i' 'int'
|   |   |     `-BinaryOperator 0x56058459cd28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56058459cd10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56058459cc60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560584581730 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56058459cce8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56058459ccd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56058459cc98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56058459ce10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56058459cdf0 <col:79> 'int' 0
|   |   `-CallExpr 0x56058459d048 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56058459d030 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56058459d010 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5605840ee000 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56058459d088 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459ce80 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56058459d0a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56058459cec8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56058459d0b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56058459cf00 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56058459d0d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56058459cff8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56058459cfe0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56058459cf98 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56058459d3b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56058459d318 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56058459d2e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56058459d288 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56058459d258 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56058459d208 <col:54, col:63> 'char [48]' lvalue ->c 0x56058458c200
|     |     |   `-CXXMemberCallExpr 0x56058459d1e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56058459d1b8 <col:54> '<bound member function type>' ->xanno 0x5605845814e8
|     |     |       `-CXXThisExpr 0x56058459d1a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56058459d270 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56058459d238 <col:67> 'int' lvalue ParmVar 0x560584585410 'i' 'int'
|     `-CXXConstCastExpr 0x56058459d380 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56058459d368 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56058459d330 <col:91> 'const void *' lvalue ParmVar 0x560584585490 'x' 'const void *'
|-CXXMethodDecl 0x560584585638 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56058459d458 <col:34, line:640:5>
|   `-ReturnStmt 0x56058459d448 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56058459d430 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56058459d400 <col:16> 'Packet *' lvalue ->_data_packet 0x56058458cdb8
|         `-CXXThisExpr 0x56058459d3f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x560584585778 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5605845856e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560584596518 <col:46> 'bool' true
|-CXXMethodDecl 0x5605845858f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x560584585830 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5605845859a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x560584586150 <line:660:22> "" ""
| |-EnumConstantDecl 0x560584585aa0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605845861c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585a80 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x560584585a60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56058457ac00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x560584585b30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605845861d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585b10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x560584585af0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56058457ac90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x560584585bc0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5605845861f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585ba0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x560584585b80 <col:21> 'int' 0
| |-EnumConstantDecl 0x560584585c50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560584586208 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585c30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x560584585c10 <col:19> 'int' 16
| |-EnumConstantDecl 0x560584585ce0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560584586220 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585cc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x560584585ca0 <col:21> 'int' 16
| |-EnumConstantDecl 0x560584585d70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560584586238 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585d50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x560584585d30 <col:19> 'int' 32
| |-EnumConstantDecl 0x560584585e00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560584586250 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585de0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x560584585dc0 <col:19> 'int' EnumConstant 0x560584585c50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x560584585e90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560584586268 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585e70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x560584585e50 <col:19> 'int' EnumConstant 0x560584585d70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x560584585f60 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560584586280 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584585f40 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x560584585f20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x560584585ee0 <col:23> 'int' EnumConstant 0x560584585e90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x560584585f00 <col:40> 'int' 2
| |-EnumConstantDecl 0x560584586030 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560584586298 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560584586010 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x560584585ff0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x560584585fb0 <col:23> 'int' EnumConstant 0x560584585e90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x560584585fd0 <col:40> 'int' 4
| `-EnumConstantDecl 0x560584586100 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5605845862b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5605845860e0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5605845860c0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x560584586080 <col:23> 'int' EnumConstant 0x560584585e90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5605845860a0 <col:40> 'int' 8
|-CXXMethodDecl 0x5605845862f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x560584586390 <col:68> "" ""
|-CXXMethodDecl 0x560584586428 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5605845864c8 <col:45> "" ""
|-CXXMethodDecl 0x560584586560 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x560584586600 <col:57> "" ""
|-CXXMethodDecl 0x560584586698 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x560584586738 <col:45> "" ""
|-CXXMethodDecl 0x5605845867d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x560584586870 <col:57> "" ""
|-CXXMethodDecl 0x560584586900 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5605845869a0 <col:51> "" ""
|-CXXMethodDecl 0x560584586a30 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x560584586ad0 <col:63> "" ""
|-CXXMethodDecl 0x560584586b60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x560584586c00 <col:53> "" ""
|-CXXMethodDecl 0x560584586c90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x560584586d30 <col:65> "" ""
|-CXXMethodDecl 0x560584586e48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x560584586db8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x560584586ef0 <col:61> "" ""
|-CXXMethodDecl 0x560584587088 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x560584586f78 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x560584586ff0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x560584587138 <col:67> "" ""
|-CXXMethodDecl 0x560584587250 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5605845871c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5605845872f8 <col:63> "" ""
|-CXXMethodDecl 0x560584587490 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x560584587380 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5605845873f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x560584587540 <col:69> "" ""
|-CXXMethodDecl 0x560584587658 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5605845875c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x560584587700 <col:63> "" ""
|-CXXMethodDecl 0x560584589dd8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x560584589cc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560584589d40 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560584589e88 <col:69> "" ""
|-CXXMethodDecl 0x560584589fa0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x560584589f10 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56058458a048 <col:62> "" ""
|-CXXMethodDecl 0x56058458a1e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56058458a0d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56058458a148 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56058458a290 <col:68> "" ""
|-CXXMethodDecl 0x56058458a3a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56058458a318 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56058458a450 <col:63> "" ""
|-CXXMethodDecl 0x56058458a5e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56058458a4d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56058458a550 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56058458a698 <col:69> "" ""
|-CXXMethodDecl 0x56058458a728 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56058458a7c8 <col:64> "" ""
|-CXXMethodDecl 0x56058458a858 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56058458a8f8 <col:52> "" ""
|-CXXMethodDecl 0x56058458a988 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56058458aa28 <col:67> "" ""
|-CXXMethodDecl 0x56058458aab8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56058458ab58 <col:55> "" ""
|-CXXMethodDecl 0x56058458ac70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56058458abe0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56058458ad18 <col:58> "" ""
|-CXXMethodDecl 0x56058458aeb0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56058458ada0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56058458ae18 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56058458af60 <col:62> "" ""
|-CXXMethodDecl 0x56058458b078 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56058458afe8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56058458b120 <col:58> "" ""
|-CXXMethodDecl 0x56058458b2b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56058458b1a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56058458b220 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56058458b368 <col:62> "" ""
|-CXXMethodDecl 0x56058458b480 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56058458b3f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56058458b528 <col:60> "" ""
|-CXXMethodDecl 0x56058458b6c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56058458b5b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x56058458b628 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56058458b770 <col:64> "" ""
|-CXXMethodDecl 0x56058458b888 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56058458b7f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56058458b930 <col:58> "" ""
|-CXXMethodDecl 0x56058458bac8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56058458b9b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56058458ba30 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56058458bb78 <col:62> "" ""
|-CXXMethodDecl 0x56058458bc90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56058458bc00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56058458bd38 <col:59> "" ""
|-CXXMethodDecl 0x56058458bed0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56058458bdc0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56058458be38 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56058458bf80 <col:63> "" ""
|-AccessSpecDecl 0x56058458bff0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56058458c018 prev 0x560584581220 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56058458c110 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56058458c200 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56058458c328 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56058458c4a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56058458c628 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56058458c7a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56058459d5d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56058459de48 <col:11>
| |-CXXDestructorDecl 0x56058459d6b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56058459d7e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56058459d7e8
| | `-ParmVarDecl 0x56058459d8f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56058459d998 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56058459d998
| | `-ParmVarDecl 0x56058459daa8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5605845a0868 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5605845a0978 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5605845a0bf8 <col:11>
| |   `-ReturnStmt 0x5605845a0be8 <col:11>
| |     `-UnaryOperator 0x5605845a0bd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5605845a0bc0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5605845a09e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5605845a09e8
|   `-ParmVarDecl 0x5605845a0af8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56058458c810 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56058458c928 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56058458c9c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56058458ca30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56058458ca98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56058458cb00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56058458cb60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56058458cc20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56058458cc80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56058458cce0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56058459d4e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56058458c9c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56058459de58 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56058459deb0 <col:12>
| |-CXXConstructorDecl 0x56058459db18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56058459db18
| | `-ParmVarDecl 0x56058459dc28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56058459dcc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56058459dcc8
| | `-ParmVarDecl 0x56058459ddd8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56058459ff50 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56058458cd58 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56058458cdb8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56058458ce20 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56058458ce88 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56058458cef0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56058458cf58 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56058458cfb8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56058458d018 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56058458d080 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56058458d108 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56058458cd58 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56058459d480 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56058458cfb8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56058459dec0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56058459df20 <col:21, line:755:5>
|-CXXConstructorDecl 0x56058458d2a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56058458d1e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56058458d3a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56058458d588 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56058458d490 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56058458d858 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56058458d640 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56058458d6b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56058458d730 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56058458da78 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56058458d928 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56058458d9a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x560584596058 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56058458db38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56058458dbb0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56058458dc28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5605845961b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x560584596120 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5605845962f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x560584596268 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5605845963f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058459dfc0 prev 0x56058457a880 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x56058459e0f8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x56058459e188 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x56058459e230 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x56058459e2d0 <col:20>
| `-OptimizeNoneAttr 0x56058459e328 <col:30>
|-CXXMethodDecl 0x56058459e378 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x56058459e418 <col:20>
| `-OptimizeNoneAttr 0x56058459e470 <col:30>
|-CXXMethodDecl 0x56058459e4c0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56058459e588 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56058459e650 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56058459e768 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x56058459e830 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x56058459e8d0 <col:20>
| `-OptimizeNoneAttr 0x56058459e928 <col:30>
|-CXXMethodDecl 0x56058459e998 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x56058459ea38 <col:20>
| `-OptimizeNoneAttr 0x56058459ea90 <col:30>
|-CXXMethodDecl 0x56058459eb38 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x56058459ebd8 <col:20>
| `-OptimizeNoneAttr 0x56058459ec30 <col:30>
|-CXXMethodDecl 0x56058459ec80 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56058459ed98 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x56058459eeb8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x56058459efd8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x56058459f0a0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x56058459f140 <col:62> "" ""
|-AccessSpecDecl 0x56058459f1b0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x56058459f210 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x56058459fe08 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5605845a0030 <col:29, col:31>
|-CXXMethodDecl 0x56058459f2d8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x56058459f418 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x56058459f388 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x56058459f510 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5605845a0040 <col:23, col:25>
|-CXXMethodDecl 0x56058459f6c8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x56058459f600 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x56058459f998 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56058459f780 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56058459f7f8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56058459f870 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56058459fb28 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x56058459fa60 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x56058459fc20 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x56058459fc88 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x56058459fc88
  `-ParmVarDecl 0x56058459fd98 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5605843b3940 prev 0x560584319988 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5605843b3a38 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5605843b3ac8 <col:19, col:25> col:19 public
|-TypedefDecl 0x5605843b3b00 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5605841a7260 'uninitialized_type'
|   `-CXXRecord 0x5605841a71c8 'uninitialized_type'
|-CXXConstructorDecl 0x5605843b3bc0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5605843b8320 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843b83c8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5605843b8388 <col:10> 'int' 0
| `-CompoundStmt 0x5605843b8410 <col:13, line:22:5>
|-CXXConstructorDecl 0x5605843b3d10 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5605843b3c80 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5605843b8320 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843b8460 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5605843b8420 <col:10> 'unsigned int' lvalue ParmVar 0x5605843b3c80 'x' 'unsigned int'
| `-CompoundStmt 0x5605843b84a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x5605843b3e68 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5605843b3dd8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5605843b8320 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843b8510 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5605843b84f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5605843b84b8 <col:10> 'int' lvalue ParmVar 0x5605843b3dd8 'x' 'int'
| `-CompoundStmt 0x5605843b8558 <col:13, line:31:5>
|-CXXConstructorDecl 0x5605843b3fc0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5605843b3f30 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5605843b8320 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843b85c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5605843b85a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5605843b8568 <col:10> 'unsigned long' lvalue ParmVar 0x5605843b3f30 'x' 'unsigned long'
| `-CompoundStmt 0x5605843b8608 <col:13, line:35:5>
|-CXXConstructorDecl 0x5605843b4118 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5605843b4088 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5605843b8320 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843b8670 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5605843b8658 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5605843b8618 <col:10> 'long' lvalue ParmVar 0x5605843b4088 'x' 'long'
| `-CompoundStmt 0x5605843b86b8 <col:13, line:39:5>
|-CXXConstructorDecl 0x5605843b42d8 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5605843b41e8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5605843b8320 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843b8738 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5605843b86e8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5605842e8740
| |     `-DeclRefExpr 0x5605843b86c8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5605843b41e8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5605843b8780 <col:20, line:44:5>
|-CXXConstructorDecl 0x5605843b4468 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5605843b43a0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5605843b88e8 <col:51, line:56:5>
|   `-BinaryOperator 0x5605843b88c8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5605843b87a0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5605843b8320
|     | `-CXXThisExpr 0x5605843b8790 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5605843b88b0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5605843b8898 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5605843b8878 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5605843b8848 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5605843b8830 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5605843b87d0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5605843b43a0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5605843b45b8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5605843b4528 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5605843b4768 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5605843b46a8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5605843b8958 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5605843b8930 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5605843b8900 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5605843b46a8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5605843b48f8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5605843b4830 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5605843b49e8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5605843b9918 <col:46, line:83:5>
|   `-ReturnStmt 0x5605843b9908 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5605843b98f0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5605843b98c0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5605843b9778 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5605843b9660 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5605843b9548 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5605843b8980 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5605843b4ad8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5605843b99c8 <col:31, line:88:5>
|   `-ReturnStmt 0x5605843b99b8 <line:87:2, col:10>
|     `-UnaryOperator 0x5605843b99a0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5605843b9988 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5605843b9970 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5605843b9940 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5605843b8320
|             `-CXXThisExpr 0x5605843b9930 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5605843b4b98 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5605843b9a48 <col:34, line:93:5>
|   `-ReturnStmt 0x5605843b9a38 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5605843b9a20 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5605843b99f0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5605843b8320
|         `-CXXThisExpr 0x5605843b99e0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5605843b4c68 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5605843b9ac8 <col:38, line:101:5>
|   `-ReturnStmt 0x5605843b9ab8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5605843b9aa0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5605843b9a70 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5605843b8320
|         `-CXXThisExpr 0x5605843b9a60 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5605843b4d38 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5605843b9d98 <col:38, line:108:5>
|   `-ReturnStmt 0x5605843b9d88 <line:107:2, col:58>
|     `-BinaryOperator 0x5605843b9d68 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5605843b9c80 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5605843b9c60 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5605843b9c48 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5605843b9af0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5605843b8320
|       |   |   `-CXXThisExpr 0x5605843b9ae0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5605843b9c20 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5605843b9c08 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5605843b9b88 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5605842f6c78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5605843b9b68 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5605843b9d40 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5605843b9d28 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5605843b9d08 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5605842f6c78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5605843b9ce8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5605843b4df8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5605843ba008 <col:39, line:112:5>
|   `-ReturnStmt 0x5605843b9ff8 <line:111:2, col:56>
|     `-BinaryOperator 0x5605843b9fd8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5605843b9ef0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5605843b9ed0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5605843b9eb8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5605843b9dc0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5605843b8320
|       |   |   `-CXXThisExpr 0x5605843b9db0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5605843b9e90 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5605843b9e78 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5605843b9e58 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5605842f6c78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5605843b9e38 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5605843b9fb0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5605843b9f98 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5605843b9f78 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5605842f6c78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5605843b9f58 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5605843b4f28 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5605843b5030 <line:115:5, col:38> col:12 used operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5605843b5140 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5605843b7218 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5605843b72d8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5605843b73a0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5605843b7598 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5605843b7450 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5605843b74c8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5605843b7718 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5605843b7658 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5605843b7860 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5605843b77d0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5605843b7a08 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5605843b7918 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5605843b7b50 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5605843b7ac0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5605843b7c98 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5605843b7c08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5605843b7d60 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5605843b7e20 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5605843b7f98 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5605843b7ed0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5605843b8060 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5605843b8148 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5605843b81f0 <col:51> "" ""
|-TypedefDecl 0x5605843b8290 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x560584319a20 'IPAddress'
|   `-CXXRecord 0x5605843b3940 'IPAddress'
|-AccessSpecDecl 0x5605843b82e8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5605843b8320 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5605843b89c8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5605843b89c8
| `-ParmVarDecl 0x5605843b8ad8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x5605843b8b78 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605843b8c88 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5605843b8320 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5605843b9868 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5605843b9820 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5605843b8320
| |     `-CXXStaticCastExpr 0x5605843b97f0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5605843b97c0 <col:7> 'IPAddress' lvalue ParmVar 0x5605843b8c88 '' 'IPAddress &&'
| `-CompoundStmt 0x5605843b98b0 <col:7>
`-CXXDestructorDecl 0x5605843b9578 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned char>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned char * _ptr
        24 |   unsigned char _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058466e1d0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56058466e2e8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56058466e378 <col:16, col:22> col:16 public
|-EnumDecl 0x56058466e3a0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56058466e4a0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56058466e6f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56058466e480 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56058466e460 <col:21> 'int' 0
| |-EnumConstantDecl 0x56058466e530 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56058466e708 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56058466e510 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56058466e4f0 <col:24> 'int' 22
| |-EnumConstantDecl 0x56058466e5c0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56058466e720 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56058466e5a0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56058466e580 <col:24> 'int' 34
| |-EnumConstantDecl 0x56058466e650 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56058466e738 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56058466e630 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56058466e610 <col:25> 'int' 95
| `-EnumConstantDecl 0x56058466e6a0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5605846700b0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5605846704e8 <col:7>
|-CXXConstructorDecl 0x5605846701b8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5605846701b8
| `-ParmVarDecl 0x5605846702c8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x560584670368 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x560584670478 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5605847704e0 <col:7>
`-CXXDestructorDecl 0x5605846725f8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56058466e768 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56058466e8c8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56058466e958 <col:32, col:38> col:32 public
|-TypedefDecl 0x56058466e990 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5605841a7550 'uint32_t' sugar
|   |-Typedef 0x5605840ba4c8 'uint32_t'
|   `-TypedefType 0x5605840935a0 '__uint32_t' sugar
|     |-Typedef 0x560584093198 '__uint32_t'
|     `-BuiltinType 0x560584051620 'unsigned int'
|-CXXConstructorDecl 0x56058466ead8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56058466ea00 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56058466ffb8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5605846704f8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56058466f870 'base' 'int'
| | `-ImplicitCastExpr 0x560584670058 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x560584670018 <col:16> 'int' lvalue ParmVar 0x56058466ea00 'b' 'int'
| `-CompoundStmt 0x560584670568 <col:19, line:1046:5>
|-CXXMethodDecl 0x56058466efd0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56058466eba0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56058466ec20 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56058466ec98 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56058466ed18 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56058466edd8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56058466ee58 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56058466f428 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56058466f0a0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56058466f388 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56058466f148 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56058466f1e8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56058466f260 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56058466ffd8 <col:82> 'const ArgContext' lvalue Var 0x560584664018 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5605846714a8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5605846706f8 <line:1054:9, col:64>
| |   | `-VarDecl 0x560584670588 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5605846706b0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x560584670918 <line:1055:9, col:91>
| |   | `-VarDecl 0x560584670728 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5605846708f0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5605846708d0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x560584670880 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x560584670860 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x560584670808 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5605846707b8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5605846707e8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x560584670848 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x560584670828 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5605846708b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x560584670a78 <line:1056:9, col:27>
| |   | `-VarDecl 0x560584670a10 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x560584670ec0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x560584670df0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x560584670d70 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x560584571538 0x5605843bab18 0x5605843ba7f0 0x5605843aafc0 0x5605843aac70 0x5605843aa560 0x56058437ced0 0x56058430a3a0
| |   | | |-CallExpr 0x560584670cb0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x560584670aa0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x560584670b50 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x560584670b20 <col:19, col:23> '<bound member function type>' .begin 0x56058439a1c8
| |   | | | |   `-DeclRefExpr 0x560584670b00 <col:19> 'const String' lvalue ParmVar 0x56058466f148 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x560584670bc0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x560584670b90 <col:32, col:36> '<bound member function type>' .end 0x56058439a3e0
| |   | | | |   `-DeclRefExpr 0x560584670b70 <col:32> 'const String' lvalue ParmVar 0x56058466f148 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x560584670be0 <col:43> 'const bool' lvalue Var 0x560584670588 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x560584670c48 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x560584670c28 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x560584670c70 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x560584670a10 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x560584670c90 <col:73> 'const int' lvalue Var 0x560584670728 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x560584670d50 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x560584670d20 <col:16, col:20> '<bound member function type>' .end 0x56058439a3e0
| |   | |     `-DeclRefExpr 0x560584670d00 <col:16> 'const String' lvalue ParmVar 0x56058466f148 'str' 'const String &'
| |   | `-BinaryOperator 0x560584670ea0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x560584670e38 <col:13> 'int' lvalue ->status 0x56058466f8d8
| |   |   | `-CXXThisExpr 0x560584670e28 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x560584670e88 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x560584670e68 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e530 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x560584671128 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x560584671010 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x560584670ff8 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x560584670fe0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x560584670ee8 <col:13> 'int' lvalue ->status 0x56058466f8d8
| |   | | |     `-CXXThisExpr 0x560584670ed8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x560584670fc0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x560584670f90 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x560584670f40 <col:23> 'int' lvalue ->status 0x56058466f8d8
| |   | |   |   `-CXXThisExpr 0x560584670f18 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x560584670fa8 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x560584670f70 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x560584671108 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5605846710a8 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x560584671050 <col:13, col:18> '<bound member function type>' .error 0x560584534e00
| |   |   | | `-DeclRefExpr 0x560584671030 <col:13> 'const ArgContext' lvalue ParmVar 0x56058466f260 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5605846710d0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x560584671080 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5605846710f8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5605846710e8 <col:20> 'bool' false
| |   |-DeclStmt 0x5605846712f8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5605846712a0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x560584671230 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x560584671458 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x560584671310 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56058433e368
| |   | |-DeclRefExpr 0x560584671358 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x560584670a10 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x560584671428 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5605846713a0 <col:64> 'V' lvalue ParmVar 0x56058466f1e8 'result' 'V &'
| |   `-ReturnStmt 0x560584671498 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x560584671488 <col:16> 'bool' true
| |-CXXMethodDecl 0x56058456b928 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x56058456b700 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x56058456b7d8 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x56058456b840 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x56058456d6c0 <col:94, line:1067:5>
| |   |-DeclStmt 0x56058456c138 <line:1054:9, col:64>
| |   | `-VarDecl 0x56058456bf58 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x56058456c0c8 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x56058456c098 <col:36, col:55> 'const bool' lvalue Var 0x56058432e2d8 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x56058456c318 <line:1055:9, col:91>
| |   | `-VarDecl 0x56058456c150 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56058456c298 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x56058456c280 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x56058456c260 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x56058456c240 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x56058456c220 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x56058456c1e8 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x56058456c1c8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x5605846707e8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x56058456c208 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x560584670828 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x5605846708b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56058456c4b0 <line:1056:9, col:27>
| |   | `-VarDecl 0x56058456c448 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x56058456c938 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x56058456c8e0 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x56058456c798 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x56058456c768 <col:13> '<bound member function type>' ->parse 0x56058466efd0
| |   | | | | `-CXXThisExpr 0x56058456c758 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x56058456c5f8 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56058456c5c8 <col:19, col:23> '<bound member function type>' .begin 0x56058439a1c8
| |   | | | |   `-DeclRefExpr 0x56058456c5a8 <col:19> 'const String' lvalue ParmVar 0x56058456b700 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56058456c668 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56058456c638 <col:32, col:36> '<bound member function type>' .end 0x56058439a3e0
| |   | | | |   `-DeclRefExpr 0x56058456c618 <col:32> 'const String' lvalue ParmVar 0x56058456b700 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x56058456c808 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x56058456c7e8 <col:43> 'const bool' lvalue Var 0x56058456bf58 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x56058456c6f0 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x56058456c6d8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x56058456c6b8 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x56058456c820 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x56058456c718 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56058456c448 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x56058456c858 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x56058456c838 <col:73> 'const int' lvalue Var 0x56058456c150 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x56058456c8c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56058456c890 <col:16, col:20> '<bound member function type>' .end 0x56058439a3e0
| |   | |     `-DeclRefExpr 0x56058456c870 <col:16> 'const String' lvalue ParmVar 0x56058456b700 'str' 'const String &'
| |   | `-BinaryOperator 0x56058456c918 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x560584670e38 <col:13> 'int' lvalue ->status 0x56058466f8d8
| |   |   | `-CXXThisExpr 0x560584670e28 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56058456c900 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x560584670e68 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e530 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56058456cab0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56058456c9d0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56058456c9b8 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56058456c9a0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x560584670ee8 <col:13> 'int' lvalue ->status 0x56058466f8d8
| |   | | |     `-CXXThisExpr 0x560584670ed8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56058456c980 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56058456c950 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x560584670f40 <col:23> 'int' lvalue ->status 0x56058466f8d8
| |   | |   |   `-CXXThisExpr 0x560584670f18 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56058456c968 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x560584670f70 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56058456ca90 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56058456ca40 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56058456ca10 <col:13, col:18> '<bound member function type>' .error 0x560584534e00
| |   |   | | `-DeclRefExpr 0x56058456c9f0 <col:13> 'const ArgContext' lvalue ParmVar 0x56058456b840 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56058456ca68 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x560584671080 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56058456ca80 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5605846710e8 <col:20> 'bool' false
| |   |-DeclStmt 0x56058456cff8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56058456cfa0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x56058456cf50 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x56058456cf30 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x56058456cec0 'type'
| |   |       `-ElaboratedType 0x56058456ce70 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x56058456ce50 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x56058432e430 'unsigned_type'
| |   |           `-BuiltinType 0x560584051620 'unsigned int'
| |   |-CallExpr 0x56058456d650 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x56058456d638 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x56058456d5b8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x56058456d498 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x56058433e368 'extract_integer')
| |   | |-ImplicitCastExpr 0x56058456d698 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x56058456d680 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x56058456d058 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56058456c448 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x56058456d128 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x56058456d0d8 <col:64> 'int':'int' lvalue ParmVar 0x56058456b7d8 'result' 'int &'
| |   `-ReturnStmt 0x56058456d6b0 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x560584671488 <col:16> 'bool' true
| `-CXXMethodDecl 0x560584779ff8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x560584779dd0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x560584779ea8 <col:46, col:49> col:49 used result 'unsigned char &'
|   |-ParmVarDecl 0x560584779f10 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x560584782110 <col:94, line:1067:5>
|     |-DeclStmt 0x56058477a808 <line:1054:9, col:64>
|     | `-VarDecl 0x56058477a628 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x56058477a798 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x56058477a768 <col:36, col:55> 'const bool' lvalue Var 0x560584327290 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x56058477a9e8 <line:1055:9, col:91>
|     | `-VarDecl 0x56058477a820 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56058477a968 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x56058477a950 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x56058477a930 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x56058477a910 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x56058477a8f0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x56058477a8b8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x56058477a898 <col:36, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5605846707e8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x56058477a8d8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x560584670828 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5605846708b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56058477ab00 <line:1056:9, col:27>
|     | `-VarDecl 0x56058477aa98 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x56058477af88 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x56058477af30 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x56058477ade8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x56058477adb8 <col:13> '<bound member function type>' ->parse 0x56058466efd0
|     | | | | `-CXXThisExpr 0x56058477ada8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x56058477ac48 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56058477ac18 <col:19, col:23> '<bound member function type>' .begin 0x56058439a1c8
|     | | | |   `-DeclRefExpr 0x56058477abf8 <col:19> 'const String' lvalue ParmVar 0x560584779dd0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56058477acb8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56058477ac88 <col:32, col:36> '<bound member function type>' .end 0x56058439a3e0
|     | | | |   `-DeclRefExpr 0x56058477ac68 <col:32> 'const String' lvalue ParmVar 0x560584779dd0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x56058477ae58 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x56058477ae38 <col:43> 'const bool' lvalue Var 0x56058477a628 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x56058477ad40 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x56058477ad28 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x56058477ad08 <col:58, col:66> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     | | | |-ImplicitCastExpr 0x56058477ae70 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x56058477ad68 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56058477aa98 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x56058477aea8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x56058477ae88 <col:73> 'const int' lvalue Var 0x56058477a820 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x56058477af10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56058477aee0 <col:16, col:20> '<bound member function type>' .end 0x56058439a3e0
|     | |     `-DeclRefExpr 0x56058477aec0 <col:16> 'const String' lvalue ParmVar 0x560584779dd0 'str' 'const String &'
|     | `-BinaryOperator 0x56058477af68 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x560584670e38 <col:13> 'int' lvalue ->status 0x56058466f8d8
|     |   | `-CXXThisExpr 0x560584670e28 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56058477af50 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x560584670e68 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e530 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56058477b100 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56058477b020 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56058477b008 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56058477aff0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x560584670ee8 <col:13> 'int' lvalue ->status 0x56058466f8d8
|     | | |     `-CXXThisExpr 0x560584670ed8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56058477afd0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56058477afa0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x560584670f40 <col:23> 'int' lvalue ->status 0x56058466f8d8
|     | |   |   `-CXXThisExpr 0x560584670f18 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56058477afb8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x560584670f70 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56058477b0e0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56058477b090 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56058477b060 <col:13, col:18> '<bound member function type>' .error 0x560584534e00
|     |   | | `-DeclRefExpr 0x56058477b040 <col:13> 'const ArgContext' lvalue ParmVar 0x560584779f10 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56058477b0b8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x560584671080 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56058477b0d0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5605846710e8 <col:20> 'bool' false
|     |-DeclStmt 0x56058477b648 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56058477b5f0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned char>::type':'unsigned char'
|     |   `-ElaboratedType 0x56058477b5a0 'typename make_unsigned<unsigned char>::type' sugar
|     |     `-TypedefType 0x56058477b580 'make_unsigned<unsigned char>::type' sugar
|     |       |-Typedef 0x56058477b510 'type'
|     |       `-ElaboratedType 0x56058477b4c0 'typename integer_traits<unsigned char>::unsigned_type' sugar
|     |         `-TypedefType 0x56058477b4a0 'integer_traits<unsigned char>::unsigned_type' sugar
|     |           |-Typedef 0x5605843273e8 'unsigned_type'
|     |           `-BuiltinType 0x5605840515e0 'unsigned char'
|     |-CallExpr 0x5605847820a0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x560584782088 <col:9> 'void (*)(const unsigned int *, unsigned char &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x560584782000 <col:9> 'void (const unsigned int *, unsigned char &)' lvalue Function 0x560584781ee0 'extract_integer' 'void (const unsigned int *, unsigned char &)' (FunctionTemplate 0x56058433e368 'extract_integer')
|     | |-ImplicitCastExpr 0x5605847820e8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5605847820d0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x56058477b6a8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56058477aa98 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x56058477b778 <col:28, col:70> 'unsigned_v_type':'unsigned char' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x56058477b728 <col:64> 'unsigned char':'unsigned char' lvalue ParmVar 0x560584779ea8 'result' 'unsigned char &'
|     `-ReturnStmt 0x560584782100 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x560584671488 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56058466f7e8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56058466f498 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56058466f748 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56058466f548 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56058466f5e8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56058466f660 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56058466fff8 <col:71> 'const ArgContext' lvalue Var 0x560584664018 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x560584671c18 <col:83, line:1083:5>
| |   |-DeclStmt 0x560584671570 <line:1071:9, col:12>
| |   | `-VarDecl 0x560584671508 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x560584671bf0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x560584671800 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x560584671688 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x560584671650 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x560584671598 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5605846715f0 <col:31> 'const String' lvalue ParmVar 0x56058466f548 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x560584671610 <col:36> 'V' lvalue Var 0x560584671508 'x' 'V'
| |     | |   `-DeclRefExpr 0x560584671630 <col:39> 'const ArgContext' lvalue ParmVar 0x56058466f660 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5605846717e0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5605846717c0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5605846717a8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x560584671790 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5605846716b0 <col:17> 'int' lvalue ->status 0x56058466f8d8
| |     |     |     `-CXXThisExpr 0x5605846716a0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x560584671770 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x560584671740 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5605846716f0 <col:27> 'int' lvalue ->status 0x56058466f8d8
| |     |       |   `-CXXThisExpr 0x5605846716e0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x560584671758 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x560584671720 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x560584671830 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x560584671820 <col:20> 'bool' false
| |     `-IfStmt 0x560584671bc8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5605846718d0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5605846718a0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x560584671850 <col:18> 'int' lvalue ->status 0x56058466f8d8
| |       | |   `-CXXThisExpr 0x560584671840 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5605846718b8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x560584671880 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x560584671b08 <col:42, line:1079:9>
| |       | |-CallExpr 0x560584671ab0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x560584671900 <line:1076:13> '<bound member function type>' ->range_error 0x56058466fee8
| |       | | | `-CXXThisExpr 0x5605846718f0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x560584671930 <col:25> 'const ArgContext' lvalue ParmVar 0x56058466f660 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x560584671a10 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x560584671a88 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x560584671a68 <col:43> 'V' lvalue Var 0x560584671508 'x' 'V'
| |       | `-ReturnStmt 0x560584671af8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x560584671ae8 <col:20> 'bool' false
| |       `-CompoundStmt 0x560584671ba8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x560584671b68 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x560584671b28 <col:13> 'V' lvalue ParmVar 0x56058466f5e8 'result' 'V &'
| |         | `-DeclRefExpr 0x560584671b48 <col:22> 'V' lvalue Var 0x560584671508 'x' 'V'
| |         `-ReturnStmt 0x560584671b98 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x560584671b88 <col:20> 'bool' true
| |-CXXMethodDecl 0x5605846b5e48 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5605846b5c28 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x5605846b5cf8 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x5605846b5d60 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x56058456bf38 <col:83, line:1083:5>
| |   |-DeclStmt 0x56058456b570 <line:1071:9, col:12>
| |   | `-VarDecl 0x56058456b508 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x56058456bf10 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56058456bba0 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x56058456bac8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x56058456ba90 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x56058456ba48 <col:14> '<bound member function type>' ->parse_saturating 0x56058456b928
| |     | |   | `-CXXThisExpr 0x56058456ba38 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x56058456b5e0 <col:31> 'const String' lvalue ParmVar 0x5605846b5c28 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56058456b600 <col:36> 'int':'int' lvalue Var 0x56058456b508 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x56058456b620 <col:39> 'const ArgContext' lvalue ParmVar 0x5605846b5d60 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56058456bb80 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56058456bb60 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56058456bb48 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56058456bb30 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5605846716b0 <col:17> 'int' lvalue ->status 0x56058466f8d8
| |     |     |     `-CXXThisExpr 0x5605846716a0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56058456bb10 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56058456bae0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5605846716f0 <col:27> 'int' lvalue ->status 0x56058466f8d8
| |     |       |   `-CXXThisExpr 0x5605846716e0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56058456baf8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x560584671720 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56058456bbc0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x560584671820 <col:20> 'bool' false
| |     `-IfStmt 0x56058456bee8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56058456bc00 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56058456bbd0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x560584671850 <col:18> 'int' lvalue ->status 0x56058466f8d8
| |       | |   `-CXXThisExpr 0x560584671840 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56058456bbe8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x560584671880 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56058456be20 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x56058456bd90 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x560584671900 <line:1076:13> '<bound member function type>' ->range_error 0x56058466fee8
| |       | | | `-CXXThisExpr 0x5605846718f0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56058456bc20 <col:25> 'const ArgContext' lvalue ParmVar 0x5605846b5d60 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x56058456bdf8 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x56058456bdc8 <col:31, col:50> 'const bool' lvalue Var 0x56058432e2d8 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x56058456bd68 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x56058456bd50 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x56058456bd38 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x56058456bd18 <col:43> 'int':'int' lvalue Var 0x56058456b508 'x' 'int':'int'
| |       | `-ReturnStmt 0x56058456be10 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x560584671ae8 <col:20> 'bool' false
| |       `-CompoundStmt 0x56058456bec8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56058456be98 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x56058456be40 <col:13> 'int':'int' lvalue ParmVar 0x5605846b5cf8 'result' 'int &'
| |         | `-ImplicitCastExpr 0x56058456be80 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x56058456be60 <col:22> 'int':'int' lvalue Var 0x56058456b508 'x' 'int':'int'
| |         `-ReturnStmt 0x56058456beb8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x560584671b88 <col:20> 'bool' true
| `-CXXMethodDecl 0x560584779a38 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x5605847797d0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5605847798a8 <col:35, col:38> col:38 used result 'unsigned char &'
|   |-ParmVarDecl 0x560584779910 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x56058477a608 <col:83, line:1083:5>
|     |-DeclStmt 0x560584779cc0 <line:1071:9, col:12>
|     | `-VarDecl 0x560584779c58 <col:9, col:11> col:11 used x 'unsigned char':'unsigned char'
|     `-IfStmt 0x56058477a5e0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x56058477a270 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x56058477a198 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x56058477a160 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x56058477a118 <col:14> '<bound member function type>' ->parse_saturating 0x560584779ff8
|       | |   | `-CXXThisExpr 0x56058477a108 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x560584779d30 <col:31> 'const String' lvalue ParmVar 0x5605847797d0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x560584779d50 <col:36> 'unsigned char':'unsigned char' lvalue Var 0x560584779c58 'x' 'unsigned char':'unsigned char'
|       | |   `-DeclRefExpr 0x560584779d70 <col:39> 'const ArgContext' lvalue ParmVar 0x560584779910 'args' 'const ArgContext &'
|       | `-ParenExpr 0x56058477a250 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x56058477a230 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x56058477a218 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x56058477a200 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5605846716b0 <col:17> 'int' lvalue ->status 0x56058466f8d8
|       |     |     `-CXXThisExpr 0x5605846716a0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x56058477a1e0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x56058477a1b0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5605846716f0 <col:27> 'int' lvalue ->status 0x56058466f8d8
|       |       |   `-CXXThisExpr 0x5605846716e0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x56058477a1c8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x560584671720 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x56058477a290 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x560584671820 <col:20> 'bool' false
|       `-IfStmt 0x56058477a5b8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x56058477a2d0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x56058477a2a0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x560584671850 <col:18> 'int' lvalue ->status 0x56058466f8d8
|         | |   `-CXXThisExpr 0x560584671840 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x56058477a2b8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x560584671880 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56058466e5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x56058477a4f0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x56058477a460 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x560584671900 <line:1076:13> '<bound member function type>' ->range_error 0x56058466fee8
|         | | | `-CXXThisExpr 0x5605846718f0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x56058477a2f0 <col:25> 'const ArgContext' lvalue ParmVar 0x560584779910 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x56058477a4c8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x56058477a498 <col:31, col:50> 'const bool' lvalue Var 0x560584327290 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x56058477a438 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x56058477a420 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x56058477a408 <col:43> 'unsigned char':'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x56058477a3e8 <col:43> 'unsigned char':'unsigned char' lvalue Var 0x560584779c58 'x' 'unsigned char':'unsigned char'
|         | `-ReturnStmt 0x56058477a4e0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x560584671ae8 <col:20> 'bool' false
|         `-CompoundStmt 0x56058477a598 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x56058477a568 <line:1080:13, col:22> 'unsigned char':'unsigned char' lvalue '='
|           | |-DeclRefExpr 0x56058477a510 <col:13> 'unsigned char':'unsigned char' lvalue ParmVar 0x5605847798a8 'result' 'unsigned char &'
|           | `-ImplicitCastExpr 0x56058477a550 <col:22> 'unsigned char':'unsigned char' <LValueToRValue>
|           |   `-DeclRefExpr 0x56058477a530 <col:22> 'unsigned char':'unsigned char' lvalue Var 0x560584779c58 'x' 'unsigned char':'unsigned char'
|           `-ReturnStmt 0x56058477a588 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x560584671b88 <col:20> 'bool' true
|-FieldDecl 0x56058466f870 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56058466f8d8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56058466f928 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56058466fbe0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56058466f968 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56058466f9e8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56058466fa60 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56058466fae0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56058466fee8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56058466fcb0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56058466fd28 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56058466fdc0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x560584672478 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x560584672478
| `-ParmVarDecl 0x560584672588 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x560584672708 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x560584672818 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5605847704f0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5605847704c0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x560584770490 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x560584770460 <col:7> 'IntArg' lvalue ParmVar 0x560584672818 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56058466f870 'base' 'int'
| | `-ImplicitCastExpr 0x5605847705e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5605847705b8 <col:7> 'int' xvalue .base 0x56058466f870
| |     `-CXXStaticCastExpr 0x560584770588 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x560584770558 <col:7> 'IntArg' lvalue ParmVar 0x560584672818 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56058466f8d8 'status' 'int'
| | `-ImplicitCastExpr 0x5605847706b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x560584770688 <col:7> 'int' xvalue .status 0x56058466f8d8
| |     `-CXXStaticCastExpr 0x560584770658 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x560584770628 <col:7> 'IntArg' lvalue ParmVar 0x560584672818 '' 'IntArg &&'
| `-CompoundStmt 0x560584770710 <col:7>
`-CXXDestructorDecl 0x5605846b59a8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5605843c78a8 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x5605843c7b08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x560584758418 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x560584758518 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x560584758518
| `-ParmVarDecl 0x560584758628 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x5605847586c8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5605847587d8 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x560584759110 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5605847590e0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x5605847590b0 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x560584759080 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x5605847587d8 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x560584759180 <col:19>
`-CXXDestructorDecl 0x560584758878 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560584766318 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x560584766718 prev 0x560584766318 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x560584766910 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x560584766818 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x560584767858 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x560584766a90 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x560584767818 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x5605847677d8 <col:20> 'String *' lvalue ParmVar 0x560584766818 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x560584766af0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x5605847678b8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x560584663e40 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5605847669d0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x56058463e0c0 Slot::store 'void ()' ]
| `-CompoundStmt 0x560584767f78 <col:22, line:857:9>
|   `-CallExpr 0x560584767f30 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x560584767f18 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x560584767e98 <col:13> 'void (String &, const String &)' lvalue Function 0x560584767d78 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x560584313a38 'assign_consume')
|     |-UnaryOperator 0x560584767a48 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x560584767a30 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x560584767a00 <col:29> 'String *' lvalue ->_ptr 0x560584766a90
|     |     `-CXXThisExpr 0x5605847679f0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x560584767f60 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x560584767a70 <col:35> 'String':'String' lvalue ->_slot 0x560584766af0
|         `-CXXThisExpr 0x560584767a60 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x560584766a90 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x560584766af0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x560584766b68 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x560584766b68
| `-ParmVarDecl 0x560584766c78 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x560584766d18 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x560584766d18
| `-ParmVarDecl 0x560584766e28 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x560584766ec8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x560584766ec8
| `-ParmVarDecl 0x560584766fd8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x560584767048 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x560584767048
| `-ParmVarDecl 0x560584767158 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x5605847671e0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x56058463dfc0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x560584767920 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560584676d40 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x560584676f98 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56058476f658 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56058476faf0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56058476fad0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56058476fb60 <col:19>
|-CXXConstructorDecl 0x56058476f758 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x56058476f758
| `-ParmVarDecl 0x56058476f868 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x56058476f908 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56058476fa18 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x560584770720 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x560584770440 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x560584770410 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5605847703e0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x56058476fa18 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x560584770790 <col:19>
`-CXXDestructorDecl 0x56058476fba0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned char>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560584675a18 <../dummy_inc/click/args.hh:1177:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x560584675c78 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x560584775b68 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x560584776000 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x560584775fe0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x560584776070 <col:19>
|-CXXConstructorDecl 0x560584775c68 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned char> &)' inline default trivial noexcept-unevaluated 0x560584775c68
| `-ParmVarDecl 0x560584775d78 <col:19> col:19 'const DefaultArg<unsigned char> &'
|-CXXConstructorDecl 0x560584775e18 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned char> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x560584775f28 <col:19> col:19 used 'DefaultArg<unsigned char> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x560584776910 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5605847768f0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5605847768c0 <col:19> 'DefaultArg<unsigned char>' xvalue static_cast<struct DefaultArg<unsigned char> &&> <NoOp>
| |       `-DeclRefExpr 0x560584776890 <col:19> 'DefaultArg<unsigned char>' lvalue ParmVar 0x560584775f28 '' 'DefaultArg<unsigned char> &&'
| `-CompoundStmt 0x560584776980 <col:19>
`-CXXDestructorDecl 0x5605847760b0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56058467c598 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x56058467c7f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56058478cd58 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56058478ce58 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x56058478ce58
| `-ParmVarDecl 0x56058478cf68 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x56058478d008 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56058478d118 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x56058478da50 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56058478da20 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x56058478d9f0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x56058478d9c0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x56058478d118 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x56058478dac0 <col:19>
`-CXXDestructorDecl 0x56058478d1b8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
