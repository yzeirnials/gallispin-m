
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IPReassembler::ChunkLink
         0 |   uint16_t off
         2 |   uint16_t lastoff
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c69ad68 prev 0x55d68c692508 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c69ae60 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55d68c69aef0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55d68c69af68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55d68c69b028 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55d68c69b0f0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55d68c69b268 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55d68c69b1a0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55d68c69b310 <col:24>
| `-OptimizeNoneAttr 0x55d68c69b368 <col:34>
|-CXXMethodDecl 0x55d68c69b3b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55d68c69b668 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55d68c69b460 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d68c69b4d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55d68c69b558 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55d68c69b720 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55d68c69b758 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55d68c69b7c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55d68c69b848 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55d68c69bb68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55d68c69b900 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55d68c69b978 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55d68c69b9f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55d68c69ba70 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55d68c69bc80 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55d68c6a35f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d68c6a35f8
| `-ParmVarDecl 0x55d68c6a3708 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55d68c6a37a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d68c6a37a8
| `-ParmVarDecl 0x55d68c6a38b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55d68c7ce628 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c68dd80 prev 0x55d68c68db00 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d68c68de78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55d68c68df08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d68c68df68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55d68c68e058 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55d68c68e158 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55d68c68e328 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55d68c68e1d8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55d68c68e250 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55d68c68e4b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55d68c68e3f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55d68c68e560 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55d68c68e698 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55d68c68e5d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55d68c68e838 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55d68c68e778 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55d68c68e9d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55d68c68e918 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55d68c68ea80 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55d68c68eb80 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55d68c68ec60 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c68eb60 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55d68c68eb40 <col:26> 'int' 1
| `-EnumConstantDecl 0x55d68c68ec10 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55d68c68ec78 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c68ebf0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55d68c68ebd0 <col:44> 'int' 2
|-CXXMethodDecl 0x55d68c68edc0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55d68c68eca8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55d68c68ed28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55d68c68ef18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55d68c68ee88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55d68c68f158 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55d68c68efd8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55d68c68f050 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55d68c68f208 <col:20>
| `-OptimizeNoneAttr 0x55d68c68f260 <col:30>
|-CXXMethodDecl 0x55d68c68f368 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55d68c68f2a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55d68c68f410 <col:20>
| `-OptimizeNoneAttr 0x55d68c68f468 <col:30>
|-CXXMethodDecl 0x55d68c68f4b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55d68c68f580 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55d68c68f698 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55d68c68f720 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55d68c68f7a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55d68c68f830 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55d68c68f8b8 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55d68c68f948 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55d68c68fa08 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55d68c68fa90 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55d68c68fb18 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55d68c68fba0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55d68c68fc28 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55d68c68fcb0 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55d68c68fd40 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55d68c68fe00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55d68c68fe90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55d68c68ffe0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55d68c68ff48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55d68c690170 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55d68c6900a0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55d68c690420 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55d68c690228 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55d68c6902a8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55d68c690328 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55d68c6904d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55d68c6905e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d68c690870 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c6905c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55d68c6905a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55d68c690670 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d68c690888 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c690650 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55d68c690630 <col:32> 'int' 20
| |-EnumConstantDecl 0x55d68c690700 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d68c6908a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c6906e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55d68c6906c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55d68c690790 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55d68c6908b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c690770 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55d68c690750 <col:35> 'int' 100
| `-EnumConstantDecl 0x55d68c690820 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55d68c6908d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c690800 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55d68c6907e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55d68c690910 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55d68c690d50 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d68c690bc0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55d68c690c38 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c690e20 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55d68c690fa0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55d68c690ed0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c6911a8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d68c691058 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55d68c6910d0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c6912a8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55d68c691348 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55d68c691410 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d68c6914a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55d68c6916d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c691480 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55d68c691460 <col:36> 'int' EnumConstant 0x55d68c691410 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d68c6914f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d68c691540 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d68c691590 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d68c6915e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55d68c691630 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55d68c691680 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55d68c6917b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55d68c6916f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55d68c691880 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55d68c691940 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55d68c691a00 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55d68c691ac0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55d68c691bd8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55d68c691ca0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55d68c691e20 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55d68c691d50 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55d68c691f48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55d68c692148 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55d68c691ff8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55d68c692078 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55d68c69fa98 <col:54, line:127:5>
|   |-ParenExpr 0x55d68c69f948 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55d68c69f918 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c69f608 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d68c69f5e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55d68c69f5c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55d68c69f5b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55d68c69f580 <col:31> 'Router *' lvalue ->_router 0x55d68c69d460
|   |   |         `-CXXThisExpr 0x55d68c69f570 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d68c69f668 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c69f648 <col:48> 'int' 0
|   |   `-CallExpr 0x55d68c69f878 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55d68c69f860 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c69f840 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c69f8b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c69f6d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55d68c69f8d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c69f6f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55d68c69f8e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c69f730 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55d68c69f900 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c69f828 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c69f810 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c69f7c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55d68c69f9e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55d68c69f978 <col:9> 'Router *' lvalue ->_router 0x55d68c69d460
|   | | `-CXXThisExpr 0x55d68c69f968 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55d68c69f9c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d68c69f9a8 <col:19> 'Router *' lvalue ParmVar 0x55d68c691ff8 'r' 'Router *'
|   `-BinaryOperator 0x55d68c69fa78 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55d68c69fa10 <col:9> 'int' lvalue ->_eindex 0x55d68c69d4c8
|     | `-CXXThisExpr 0x55d68c69fa00 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55d68c69fa60 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c69fa40 <col:19> 'int' lvalue ParmVar 0x55d68c692078 'eindex' 'int'
|-CXXMethodDecl 0x55d68c6922d0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55d68c692208 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55d68c6923a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55d68c692468 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55d68c692508 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55d68c692758 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55d68c6925d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55d68c692650 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55d68c692808 <col:20>
| `-OptimizeNoneAttr 0x55d68c692860 <col:30>
|-CXXMethodDecl 0x55d68c692968 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d68c6928a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55d68c692a10 <col:20>
| `-OptimizeNoneAttr 0x55d68c692a68 <col:30>
|-CXXMethodDecl 0x55d68c692b38 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55d68c692aa8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55d68c692be0 <col:20>
| `-OptimizeNoneAttr 0x55d68c692c38 <col:30>
|-CXXMethodDecl 0x55d68c692dc8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55d68c692c70 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55d68c692cf0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55d68c692f58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d68c692e90 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d68c6930a8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d68c693018 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55d68c6931f8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55d68c693168 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d68c693348 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55d68c6932b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55d68c693608 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55d68c693400 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55d68c693480 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55d68c693528 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55d68c6936e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55d68c6937a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55d68c693a70 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55d68c693920 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55d68c693998 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c693b98 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55d68c693d70 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55d68c693c50 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55d68c693cd0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55d68c693f58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55d68c693e38 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55d68c693eb8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55d68c6942c8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d68c694018 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d68c694090 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d68c694110 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d68c69f080 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d68c69f060 <col:106> 'int' 0
| `-ParmVarDecl 0x55d68c694188 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d68c69f0b8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d68c69f098 <col:126> 'int' 0
|-CXXMethodDecl 0x55d68c694668 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d68c694398 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d68c694430 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d68c6944b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55d68c694528 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d68c69f0f0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d68c69f0d0 <col:114> 'int' 0
|-CXXMethodDecl 0x55d68c6949f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d68c694740 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55d68c6947b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55d68c694838 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55d68c69f108 <col:96> 'int' 0
| `-ParmVarDecl 0x55d68c6948b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d68c69f148 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d68c69f128 <col:116> 'int' 0
|-CXXMethodDecl 0x55d68c694d78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55d68c694ac8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d68c694b40 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c694bc0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d68c69f180 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d68c69f160 <col:109> 'int' 0
| `-ParmVarDecl 0x55d68c694c38 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d68c69f1b8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d68c69f198 <col:129> 'int' 0
|-CXXMethodDecl 0x55d68c6950f8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d68c694e48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55d68c694ec0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c694f40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55d68c694fb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d68c69f1f0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d68c69f1d0 <col:117> 'int' 0
|-CXXMethodDecl 0x55d68c695488 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55d68c6951d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c695248 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c6952c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55d68c69f208 <col:99> 'int' 0
| `-ParmVarDecl 0x55d68c695340 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55d68c69f248 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55d68c69f228 <col:119> 'int' 0
|-CXXMethodDecl 0x55d68c6958a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55d68c695558 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d68c6955d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d68c695650 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c6956d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55d68c69f280 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55d68c69f260 <col:108> 'int' 0
| `-ParmVarDecl 0x55d68c695750 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55d68c69f2b8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55d68c69f298 <col:141> 'int' 0
|-CXXMethodDecl 0x55d68c695cc8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d68c695980 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55d68c695a00 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55d68c695a78 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c695af8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55d68c695b78 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d68c69f2d0 <col:121> 'int' 0
|-CXXMethodDecl 0x55d68c6960f8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55d68c695da8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55d68c695e28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55d68c695ea0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c695f20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55d68c69f2f0 <col:98> 'int' 0
| `-ParmVarDecl 0x55d68c695fa0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55d68c69f310 <col:123> 'int' 0
|-CXXMethodDecl 0x55d68c6963c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55d68c6961d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55d68c696250 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55d68c6962d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55d68c69f330 <col:80> 'int' 0
|-EnumDecl 0x55d68c696478 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55d68c696580 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d68c696810 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c696560 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55d68c696540 <col:42> 'int' 1
| |-EnumConstantDecl 0x55d68c696610 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d68c696828 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c6965f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55d68c6965d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d68c6966a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d68c696840 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c696680 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55d68c696660 <col:44> 'int' 4
| |-EnumConstantDecl 0x55d68c696730 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55d68c696858 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c696710 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55d68c6966f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55d68c6967c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55d68c696870 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c6967a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55d68c696780 <col:34> 'int' 6
|-CXXMethodDecl 0x55d68c696b28 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55d68c696898 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55d68c696938 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d68c6969b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55d68c696a30 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55d68c69f3e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55d68c69f3d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55d68c69f3b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55d68c69f398 <col:98, col:105> 'String' (CXXTemporary 0x55d68c69f398)
|           `-CXXTemporaryObjectExpr 0x55d68c69f360 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55d68c696dc8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55d68c696bf8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d68c696c70 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55d68c696ce8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d68c69f498 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d68c69f480 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d68c69f468 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d68c69f448 <col:94, col:101> 'String' (CXXTemporary 0x55d68c69f448)
| |         `-CXXTemporaryObjectExpr 0x55d68c69f410 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55d68c69fc80 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55d68c69fbf8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55d68c69fbc8 <col:9> '<bound member function type>' ->add_task_handlers 0x55d68c696b28
|     | `-CXXThisExpr 0x55d68c69fbb8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d68c69fc38 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c69fb38 <col:27> 'Task *' lvalue ParmVar 0x55d68c696bf8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d68c69fc50 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c69fb58 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55d68c696c70 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55d68c69fc68 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d68c69fb78 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d68c6967c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d68c69fb98 <col:62> 'const String' lvalue ParmVar 0x55d68c696ce8 'prefix' 'const String &'
|-CXXMethodDecl 0x55d68c696fd8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55d68c696e90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55d68c696f08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55d68c69f548 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55d68c69f530 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55d68c69f518 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55d68c69f4f8 <col:70, col:77> 'String' (CXXTemporary 0x55d68c69f4f8)
| |         `-CXXTemporaryObjectExpr 0x55d68c69f4c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55d68c69fe58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55d68c69fdd0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55d68c69fda0 <col:9> '<bound member function type>' ->add_task_handlers 0x55d68c696b28
|     | `-CXXThisExpr 0x55d68c69fd90 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55d68c69fe10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c69fd10 <col:27> 'Task *' lvalue ParmVar 0x55d68c696e90 'task' 'Task *'
|     |-ImplicitCastExpr 0x55d68c69fe28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55d68c69fd30 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55d68c69fe40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55d68c69fd50 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55d68c6967c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55d68c69fd70 <col:57> 'const String' lvalue ParmVar 0x55d68c696f08 'prefix' 'const String &'
|-CXXMethodDecl 0x55d68c6972b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55d68c6970a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c697120 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c697198 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55d68c697568 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55d68c697388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c697408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c697488 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55d68c697858 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d68c697638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c6976b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c697730 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55d68c697b08 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55d68c697928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c6979a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c697a28 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55d68c697db8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55d68c697bd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c697c58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c697cd8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55d68c698068 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55d68c697e88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c697f08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c697f80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55d68c698318 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55d68c698138 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c6981b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c698238 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55d68c698628 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55d68c698440 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c6984c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c698540 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55d68c698908 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55d68c6986f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c698778 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c698820 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55d68c698be8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55d68c6989d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c698a58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c698b00 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55d68c698e50 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55d68c698cb8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d68c698d38 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d68c698db0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55d68c6990f8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55d68c698f20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55d68c698fa0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55d68c699018 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55d68c6993a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55d68c6991c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c699248 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c6992c8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55d68c699658 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55d68c699478 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c6994f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c699570 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55d68c699908 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55d68c699728 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c6997a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c699820 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55d68c699bd8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55d68c6999d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c699a58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55d68c699af8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55d68c699f08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55d68c699ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55d68c699d28 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55d68c699da0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55d68c699e18 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c69f560 <col:93> 'bool' false
|-CXXMethodDecl 0x55d68c69a0f0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d68c699fd8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55d68c69a058 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55d68c69a2c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d68c69a1b0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55d68c69a230 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55d68c69a5a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d68c69a388 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55d68c69a400 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55d68c69a480 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55d68c69a4f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c69a898 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55d68c69a678 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55d68c69a6f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55d68c69a770 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55d68c69a7e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c69aad0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55d68c69a970 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55d68c69a9f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55d68c69acb8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55d68c69ab98 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55d68c69ac18 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55d68c69ad68 prev 0x55d68c692508 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d68c69ae60 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55d68c69aef0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55d68c69af68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55d68c69b028 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55d68c69b0f0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55d68c69b268 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55d68c69b1a0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55d68c69b310 <col:24>
| | `-OptimizeNoneAttr 0x55d68c69b368 <col:34>
| |-CXXMethodDecl 0x55d68c69b3b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55d68c69b668 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55d68c69b460 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d68c69b4d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55d68c69b558 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55d68c69b720 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55d68c69b758 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55d68c69b7c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55d68c69b848 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55d68c69bb68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55d68c69b900 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55d68c69b978 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55d68c69b9f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55d68c69ba70 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55d68c69bc80 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55d68c6a35f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55d68c6a35f8
| | `-ParmVarDecl 0x55d68c6a3708 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55d68c6a37a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55d68c6a37a8
| | `-ParmVarDecl 0x55d68c6a38b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55d68c7ce628 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d68c69bcf8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55d68c69bd98 <col:38> "" ""
|-CXXMethodDecl 0x55d68c69be28 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55d68c69bec8 <col:44> "" ""
|-AccessSpecDecl 0x55d68c69bf38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55d68c69bf60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55d68c69c060 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55d68c69c0b0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c69c040 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55d68c69c020 <col:27> 'int' 4
|-FieldDecl 0x55d68c69c168 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55d68c69c318 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55d68c69c3d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55d68c69d460 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55d68c69d4c8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55d68c69d618 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55d68c69d558 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55d68c69d7c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55d68c69d6d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55d68c69d9a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55d68c69d888 <col:20> col:23 'int'
| `-ParmVarDecl 0x55d68c69d908 <col:25> col:28 'int'
|-CXXMethodDecl 0x55d68c69dc50 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c69da70 <col:23> col:26 'int'
| |-ParmVarDecl 0x55d68c69daf0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55d68c69db68 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55d68c69dd08 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55d68c69ddd0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55d68c69de20 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55d68c69de70 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55d68c69e050 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55d68c69df00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55d68c69df78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c69e2f8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55d68c69e118 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55d68c69e198 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55d68c69e210 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c69e518 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55d68c69e3c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55d68c69e448 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55d68c69e850 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55d68c69e5d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55d68c69e658 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55d68c69e6d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55d68c69e750 <col:57> col:60 'int'
|-CXXMethodDecl 0x55d68c69ea38 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d68c69e920 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55d68c69e9a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55d68c69eb88 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55d68c69eaf8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55d68c69ef08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55d68c69ec48 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55d68c69ecc8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55d68c69ed40 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55d68c69edc0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55d68c69f020 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPReassembler
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class WritablePacket *[256] _map
      2160 |   int _reap_time
      2164 |   uint32_t _stat_frags_seen
      2168 |   uint32_t _stat_good_assem
      2172 |   uint32_t _stat_failed_assem
      2176 |   uint32_t _stat_bad_pkts
      2180 |   uint32_t _mem_used
      2184 |   uint32_t _mem_high_thresh
      2188 |   uint32_t _mem_low_thresh
      2192 |   int8_t _mtu_anno
           | [sizeof=2200, dsize=2193, align=8,
           |  nvsize=2193, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c44c830 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c44c948 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55d68c44c9d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55d68c44caa8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55d68c44cb90 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c44cda8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d68c44cc50 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44cf58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d68c44ce60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d68c44d0a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55d68c44d010 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55d68c44d1e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d68c44d158 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44d330 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55d68c44d2a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44d3f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55d68c44d540 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55d68c44d4b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d68c44d608 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55d68c44d750 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55d68c44d6c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55d68c44d8c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d68c44d808 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44da10 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55d68c44d980 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44dad8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55d68c44dc98 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d68c44db88 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d68c44dc00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44dee8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d68c44dd58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d68c44ddd0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c44df98 <col:86> "" ""
|-CXXMethodDecl 0x55d68c44e208 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c44e078 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55d68c44e0f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44e3b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d68c44e2c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d68c44e568 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55d68c44e470 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55d68c44e838 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c44e620 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d68c44e698 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d68c44e710 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44eb18 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c44e900 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55d68c44e978 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d68c44e9f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c44ebd0 <col:115> "" ""
|-AccessSpecDecl 0x55d68c44ec40 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55d68c44ec78 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c44f180 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d68c44f180
| `-ParmVarDecl 0x55d68c44f288 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55d68c44f328 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d68c44f328
| `-ParmVarDecl 0x55d68c44f438 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55d68c484a68 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d68c677870 <col:7>
|-CXXConstructorDecl 0x55d68c484b40 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55d68c484b40
| `-ParmVarDecl 0x55d68c484c58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55d68c484cc8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55d68c484cc8
| `-ParmVarDecl 0x55d68c484dd8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55d68c67a270 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c666418 prev 0x55d68c65b620 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c666510 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55d68c666600 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55d68c666728 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55d68c6668a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55d68c666a28 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55d68c666ba8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55d68c6779d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d68c678248 <col:11>
|-CXXDestructorDecl 0x55d68c677ab0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55d68c677be8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d68c677be8
| `-ParmVarDecl 0x55d68c677cf8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55d68c677d98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d68c677d98
| `-ParmVarDecl 0x55d68c677ea8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55d68c67ac68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c67ad78 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55d68c67aff8 <col:11>
|   `-ReturnStmt 0x55d68c67afe8 <col:11>
|     `-UnaryOperator 0x55d68c67afd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c67afc0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55d68c67ade8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d68c67ade8
  `-ParmVarDecl 0x55d68c67aef8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c666c10 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c666d28 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55d68c666dc8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55d68c666e30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55d68c666e98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55d68c666f00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55d68c666f60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55d68c667020 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55d68c667080 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55d68c6670e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55d68c6778e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55d68c666dc8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55d68c678258 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55d68c6782b0 <col:12>
|-CXXConstructorDecl 0x55d68c677f18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d68c677f18
| `-ParmVarDecl 0x55d68c678028 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55d68c6780c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d68c6780c8
| `-ParmVarDecl 0x55d68c6781d8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55d68c67a350 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c654d30 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d68c654e48 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55d68c654ed8 <col:16, col:22> col:16 public
|-EnumDecl 0x55d68c654f00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55d68c655000 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55d68c6550e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c654fe0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55d68c654fc0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55d68c655090 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55d68c6550f8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c655070 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55d68c655050 <col:22> 'int' 64
|-CXXMethodDecl 0x55d68c655438 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55d68c655120 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d68c6551a0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55d68c655218 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d68c655290 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d68c6554f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d68c6556f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c655570 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55d68c6555e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d68c6557a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d68c655908 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55d68c655818 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d68c6559b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55d68c655d10 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55d68c655ca0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55d68c655c40 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55d68c655c00 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55d68c12a4e0 'void'
|       |-PointerType 0x55d68c3d50d0 'unsigned char *'
|       | `-BuiltinType 0x55d68c12a5e0 'unsigned char'
|       |-TypedefType 0x55d68c1d16a0 'size_t' sugar
|       | |-Typedef 0x55d68c19abe0 'size_t'
|       | `-BuiltinType 0x55d68c12a640 'unsigned long'
|       `-PointerType 0x55d68c12ace0 'void *'
|         `-BuiltinType 0x55d68c12a4e0 'void'
|-CXXMethodDecl 0x55d68c656188 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55d68c655d80 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55d68c655df8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d68c655e90 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55d68c655f10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55d68c670880 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55d68c670868 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55d68c670830 <col:58> 'int' 0
| |-ParmVarDecl 0x55d68c655f90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55d68c6708a8 <col:76> 'int' 0
| |-ParmVarDecl 0x55d68c656010 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55d68c6708c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55d68c656258 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55d68c6562d8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d68c656398 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55d68c656438 <col:20>
| `-OptimizeNoneAttr 0x55d68c656490 <col:30>
|-CXXMethodDecl 0x55d68c656508 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55d68c6565a8 <col:20>
| `-OptimizeNoneAttr 0x55d68c656600 <col:30>
|-CXXMethodDecl 0x55d68c656678 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55d68c656718 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55d68c6567c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55d68c656868 <col:20>
| |-OptimizeNoneAttr 0x55d68c6568c0 <col:30>
| `-WarnUnusedResultAttr 0x55d68c6568e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55d68c656940 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d68c6569e0 <col:20>
| `-OptimizeNoneAttr 0x55d68c656a38 <col:30>
|-CXXMethodDecl 0x55d68c656a88 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55d68c656b28 <col:20>
| `-OptimizeNoneAttr 0x55d68c656b80 <col:30>
|-CXXMethodDecl 0x55d68c656bc8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55d68c656c68 <col:20>
| `-OptimizeNoneAttr 0x55d68c656cc0 <col:30>
|-CXXMethodDecl 0x55d68c656d08 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c656dc8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c656e90 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c656f58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c657018 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c657138 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55d68c670990 <col:54, line:99:5>
|   `-ReturnStmt 0x55d68c670980 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55d68c670968 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55d68c670938 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d68c667418
|         `-CXXThisExpr 0x55d68c670928 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d68c6572d8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55d68c6571e8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55d68c670a40 <col:67, line:103:5>
|   `-BinaryOperator 0x55d68c670a20 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d68c6709b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d68c667418
|     | `-CXXThisExpr 0x55d68c6709a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d68c670a08 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c6709e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55d68c6571e8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55d68c6573d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55d68c670ac0 <col:33, line:107:5>
|   `-ReturnStmt 0x55d68c670ab0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55d68c670a98 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55d68c670a68 <col:16> 'void *' lvalue ->_destructor_argument 0x55d68c667480
|         `-CXXThisExpr 0x55d68c670a58 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d68c657490 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55d68c6710f0 <col:25, line:113:5>
|   |-ParenExpr 0x55d68c670e38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55d68c670e08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c670b78 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55d68c670b50 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55d68c670b18 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55d68c670ae8 <col:24> '<bound member function type>' ->shared 0x55d68c656508
|   |   |       `-ImplicitCastExpr 0x55d68c670b38 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55d68c670ad8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55d68c670bd8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c670bb8 <col:42> 'int' 0
|   |   `-CallExpr 0x55d68c670d68 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55d68c670d50 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c670d30 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c670da8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c670c48 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55d68c670dc0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c670c70 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c670dd8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c670ca8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55d68c670df0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c670d18 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c670d00 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c670cc8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55d68c671038 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55d68c670e68 <col:2> 'unsigned char *' lvalue ->_head 0x55d68c667220
|   | | `-CXXThisExpr 0x55d68c670e58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55d68c671020 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55d68c671000 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55d68c670ea8 <col:10> 'unsigned char *' lvalue ->_data 0x55d68c667288
|   |     | `-CXXThisExpr 0x55d68c670e98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55d68c670fe8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55d68c670fc8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55d68c670ee8 <col:18> 'unsigned char *' lvalue ->_tail 0x55d68c6672f0
|   |         | `-CXXThisExpr 0x55d68c670ed8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55d68c670fb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55d68c670f90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55d68c670f28 <col:26> 'unsigned char *' lvalue ->_end 0x55d68c667358
|   |             | `-CXXThisExpr 0x55d68c670f18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55d68c670f78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55d68c670f58 <col:33> 'int' 0
|   `-BinaryOperator 0x55d68c6710d0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55d68c671068 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55d68c667418
|     | `-CXXThisExpr 0x55d68c671058 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55d68c6710b8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55d68c671098 <col:16> 'int' 0
|-CXXMethodDecl 0x55d68c6575d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d68c657540 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d68c657678 <col:20>
| |-OptimizeNoneAttr 0x55d68c6576d0 <col:30>
| `-WarnUnusedResultAttr 0x55d68c6576f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55d68c6577c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d68c657738 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d68c657870 <col:20>
| |-OptimizeNoneAttr 0x55d68c6578c8 <col:30>
| `-WarnUnusedResultAttr 0x55d68c6578f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55d68c657a28 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d68c657930 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d68c657ad0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55d68c657bd0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55d68c657b40 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d68c657c78 <col:20>
| `-OptimizeNoneAttr 0x55d68c657cd0 <col:30>
|-CXXMethodDecl 0x55d68c657d98 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55d68c657d08 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d68c657e40 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55d68c657f40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55d68c657eb0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55d68c657fe8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55d68c6580e8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55d68c658058 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d68c658190 <col:20>
| `-OptimizeNoneAttr 0x55d68c6581e8 <col:30>
|-CXXMethodDecl 0x55d68c658378 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55d68c658228 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55d68c6582a0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55d68c6708e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55d68c658428 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55d68c658628 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6584a0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55d68c658518 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c658838 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6586e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d68c658760 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c658a48 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55d68c6588f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55d68c658978 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55d68c6708f8 <col:39> 'int' 0
|-CXXMethodDecl 0x55d68c658b18 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55d68c658be0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c658ca8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d68c658d68 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c658e30 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55d68c658f78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55d68c658ee8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55d68c659148 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d68c659038 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55d68c6590b0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c659218 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55d68c6592d8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55d68c659378 <col:20>
| `-OptimizeNoneAttr 0x55d68c6593d0 <col:30>
|-CXXMethodDecl 0x55d68c659420 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d68c6594c0 <col:20>
| `-OptimizeNoneAttr 0x55d68c659518 <col:30>
|-CXXMethodDecl 0x55d68c659568 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d68c659628 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c6596f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55d68c659790 <col:20>
| `-OptimizeNoneAttr 0x55d68c6597e8 <col:30>
|-CXXMethodDecl 0x55d68c659938 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55d68c659828 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55d68c6598a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c659a88 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55d68c6599f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c659b60 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55d68c659c20 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55d68c659cc0 <col:20>
| `-OptimizeNoneAttr 0x55d68c659d18 <col:30>
|-CXXMethodDecl 0x55d68c659d68 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55d68c659e08 <col:20>
| `-OptimizeNoneAttr 0x55d68c659e60 <col:30>
|-CXXMethodDecl 0x55d68c659eb0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d68c659f78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55d68c65a018 <col:20>
| `-OptimizeNoneAttr 0x55d68c65a070 <col:30>
|-CXXMethodDecl 0x55d68c65a0b8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55d68c65a1d8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55d68c65a348 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55d68c65a288 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55d68c65a438 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55d68c65a4d8 <col:20>
| `-OptimizeNoneAttr 0x55d68c65a530 <col:30>
|-CXXMethodDecl 0x55d68c65a580 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55d68c65a640 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c65a878 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55d68c65a6f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55d68c65a768 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d68c65a928 <col:20>
| `-OptimizeNoneAttr 0x55d68c65a980 <col:30>
|-CXXMethodDecl 0x55d68c65aa28 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55d68c65aac8 <col:20>
| `-OptimizeNoneAttr 0x55d68c65ab20 <col:30>
|-CXXMethodDecl 0x55d68c65ab70 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55d68c65ac10 <col:20>
| `-OptimizeNoneAttr 0x55d68c65ac68 <col:30>
|-CXXMethodDecl 0x55d68c65acb0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55d68c65ad50 <col:20>
| `-OptimizeNoneAttr 0x55d68c65ada8 <col:30>
|-CXXMethodDecl 0x55d68c65aea8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55d68c65ade0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55d68c65af50 <col:20>
| `-OptimizeNoneAttr 0x55d68c65afa8 <col:30>
|-CXXMethodDecl 0x55d68c65b168 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55d68c65afe0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55d68c65b058 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d68c65b218 <col:20>
| `-OptimizeNoneAttr 0x55d68c65b270 <col:30>
|-CXXMethodDecl 0x55d68c65b318 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55d68c65b438 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55d68c65b558 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55d68c65b5f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55d68c65b620 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55d68c65b748 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55d68c65b7e8 <col:20>
| `-OptimizeNoneAttr 0x55d68c65b840 <col:30>
|-CXXMethodDecl 0x55d68c65b8e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55d68c65b988 <col:20>
| `-OptimizeNoneAttr 0x55d68c65b9e0 <col:30>
|-AccessSpecDecl 0x55d68c65ba08 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55d68c65ba30 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55d68c65bb30 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55d68c65bb80 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c65bb10 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55d68c65baf0 <col:14> 'int' 48
|-CXXMethodDecl 0x55d68c65bbe8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55d68c65bc88 <col:20>
| `-OptimizeNoneAttr 0x55d68c65bce0 <col:30>
|-CXXMethodDecl 0x55d68c65bd58 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55d68c65bdf8 <col:20>
| `-OptimizeNoneAttr 0x55d68c65be50 <col:30>
|-CXXMethodDecl 0x55d68c65bf18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55d68c65be88 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55d68c65c0b8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55d68c65c258 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55d68c65c168 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55d68c65c300 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55d68c65c400 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d68c65c7b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65c3e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55d68c65c3c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55d68c65c490 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d68c65c7c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65c470 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55d68c65c450 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d68c65c520 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d68c65c7e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65c500 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55d68c65c4e0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55d68c65c5b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d68c65c7f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65c590 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55d68c65c570 <col:14> 'int' 3
| |-EnumConstantDecl 0x55d68c65c640 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d68c65c810 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65c620 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55d68c65c600 <col:13> 'int' 4
| |-EnumConstantDecl 0x55d68c65c6d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55d68c65c828 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65c6b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55d68c65c690 <col:13> 'int' 5
| `-EnumConstantDecl 0x55d68c65c760 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55d68c65c840 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c65c740 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55d68c65c720 <col:14> 'int' 6
|-CXXMethodDecl 0x55d68c65c8a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55d68c65c948 <col:20>
| `-OptimizeNoneAttr 0x55d68c65c9a0 <col:30>
|-CXXMethodDecl 0x55d68c65ca98 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55d68c65c9d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55d68c65cb40 <col:20>
| `-OptimizeNoneAttr 0x55d68c65cb98 <col:30>
|-CXXMethodDecl 0x55d68c65cc08 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55d68c65cd30 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55d68c65cea8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55d68c65cde0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55d68c65cf70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55d68c65d038 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55d68c65d178 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55d68c65d0e8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55d68c65d220 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55d68c65d320 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d68c65d520 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65d300 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55d68c65d2e0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55d68c65d3b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d68c65d538 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65d390 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55d68c65d370 <col:45> 'int' 4
| |-EnumConstantDecl 0x55d68c65d440 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55d68c65d550 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65d420 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55d68c65d400 <col:24> 'int' 0
| `-EnumConstantDecl 0x55d68c65d4d0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55d68c65d568 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c65d4b0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55d68c65d490 <col:47> 'int' 16
|-CXXMethodDecl 0x55d68c65d5c8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55d68c65d738 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55d68c65d678 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55d68c65d7e0 <col:20>
| `-OptimizeNoneAttr 0x55d68c65d838 <col:30>
|-CXXMethodDecl 0x55d68c65d888 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55d68c671210 <col:18, col:36>
|   `-ReturnStmt 0x55d68c671200 <col:20, col:33>
|     `-ImplicitCastExpr 0x55d68c6711e8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d68c6711c8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55d68c671198 <col:27> '<bound member function type>' ->xanno 0x55d68c65b8e8
|           `-CXXThisExpr 0x55d68c671188 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55d68c65d980 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55d68c671320 <col:30, col:48>
|   `-ReturnStmt 0x55d68c671310 <col:32, col:45>
|     `-ImplicitCastExpr 0x55d68c6712f8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55d68c6712d8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55d68c6712a8 <col:39> '<bound member function type>' ->xanno 0x55d68c65b748
|           `-CXXThisExpr 0x55d68c671298 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55d68c65da68 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55d68c6714b8 <col:24, col:50>
|   `-ReturnStmt 0x55d68c6714a8 <col:26, col:47>
|     `-UnaryOperator 0x55d68c671490 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d68c671470 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d68c671458 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d68c671408 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55d68c666728
|         |   `-CXXMemberCallExpr 0x55d68c6713e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d68c6713b8 <col:34> '<bound member function type>' ->xanno 0x55d68c65b8e8
|         |       `-CXXThisExpr 0x55d68c6713a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d68c671438 <col:46> 'int' 0
|-CXXMethodDecl 0x55d68c65db70 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55d68c671688 <col:36, col:62>
|   `-ReturnStmt 0x55d68c671678 <col:38, col:59>
|     `-UnaryOperator 0x55d68c671660 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d68c671640 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d68c671628 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d68c6715a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55d68c666728
|         |   `-CXXMemberCallExpr 0x55d68c671580 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d68c671550 <col:46> '<bound member function type>' ->xanno 0x55d68c65b748
|         |       `-CXXThisExpr 0x55d68c671540 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d68c6715d0 <col:58> 'int' 0
|-CXXMethodDecl 0x55d68c65dc88 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55d68c671820 <col:26, col:53>
|   `-ReturnStmt 0x55d68c671810 <col:28, col:50>
|     `-UnaryOperator 0x55d68c6717f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d68c6717d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d68c6717c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d68c671770 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55d68c666a28
|         |   `-CXXMemberCallExpr 0x55d68c671750 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55d68c671720 <col:36> '<bound member function type>' ->xanno 0x55d68c65b8e8
|         |       `-CXXThisExpr 0x55d68c671710 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55d68c6717a0 <col:49> 'int' 0
|-CXXMethodDecl 0x55d68c65dda8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55d68c6719f8 <col:38, col:65>
|   `-ReturnStmt 0x55d68c6719e8 <col:40, col:62>
|     `-UnaryOperator 0x55d68c6719d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55d68c6719b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55d68c671998 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d68c671908 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55d68c666a28
|         |   `-CXXMemberCallExpr 0x55d68c6718e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d68c6718b8 <col:48> '<bound member function type>' ->xanno 0x55d68c65b748
|         |       `-CXXThisExpr 0x55d68c6718a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55d68c671938 <col:61> 'int' 0
|-CXXMethodDecl 0x55d68c65df58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55d68c65de60 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55d68c6720c8 <col:34, line:463:5>
|   |-ParenExpr 0x55d68c671f10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d68c671ee0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c671b48 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c671b18 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c671a68 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c671a50 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c671a10 <col:23> 'int' lvalue ParmVar 0x55d68c65de60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c671a30 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c671af8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c671ac8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c671a88 <col:33> 'int' lvalue ParmVar 0x55d68c65de60 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d68c671ae0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d68c671aa8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d68c671ba8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c671b88 <col:56> 'int' 0
|   |   `-CallExpr 0x55d68c671e40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d68c671e28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c671e08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c671e80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c671c98 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d68c671e98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c671cc8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c671eb0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c671d00 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55d68c671ec8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c671df0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c671dd8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c671d98 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55d68c6720b8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55d68c6720a0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55d68c672080 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55d68c672050 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55d68c672000 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55d68c666728
|         |   `-CXXMemberCallExpr 0x55d68c671fe0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55d68c671fb0 <col:9> '<bound member function type>' ->xanno 0x55d68c65b748
|         |       `-CXXThisExpr 0x55d68c671fa0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55d68c672068 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55d68c672030 <col:21> 'int' lvalue ParmVar 0x55d68c65de60 'i' 'int'
|-CXXMethodDecl 0x55d68c65e1a8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55d68c65e018 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55d68c65e090 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55d68c672758 <col:40, line:472:5>
|   |-ParenExpr 0x55d68c672570 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55d68c672540 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c672220 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c6721f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c672140 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c672128 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c6720e8 <col:23> 'int' lvalue ParmVar 0x55d68c65e018 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c672108 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c6721d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c6721a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c672160 <col:33> 'int' lvalue ParmVar 0x55d68c65e018 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55d68c6721b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55d68c672180 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55d68c672280 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c672260 <col:56> 'int' 0
|   |   `-CallExpr 0x55d68c6724a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55d68c672488 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c672468 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c6724e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6722f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55d68c6724f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c672320 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c672510 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c672358 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55d68c672528 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c672450 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c672438 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c6723f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55d68c672738 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55d68c6726e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55d68c6726b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55d68c672660 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55d68c666728
|     | |   `-CXXMemberCallExpr 0x55d68c672640 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55d68c672610 <col:2> '<bound member function type>' ->xanno 0x55d68c65b8e8
|     | |       `-CXXThisExpr 0x55d68c672600 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55d68c6726c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d68c672690 <col:14> 'int' lvalue ParmVar 0x55d68c65e018 'i' 'int'
|     `-ImplicitCastExpr 0x55d68c672720 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c672700 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55d68c65e090 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55d68c65e368 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55d68c65e270 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d68c672ed8 <col:36, line:485:5>
|   |-ParenExpr 0x55d68c672c40 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c672c10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c6728f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c6728c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c6727d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c6727b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c672778 <col:23> 'int' lvalue ParmVar 0x55d68c65e270 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c672798 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c6728a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c672888 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c6727f0 <col:33> 'int' lvalue ParmVar 0x55d68c65e270 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c672868 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c672850 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c672810 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c672830 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d68c672950 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c672930 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c672b70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c672b58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c672b38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c672bb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6729c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d68c672bc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6729f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c672be0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c672a30 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55d68c672bf8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c672b20 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c672b08 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c672ac8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55d68c672ec8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55d68c672eb0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55d68c672e98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d68c672e68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55d68c672e08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d68c672dd8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d68c672d50 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d68c666600
|             |   `-CXXMemberCallExpr 0x55d68c672d30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d68c672d00 <col:61> '<bound member function type>' ->xanno 0x55d68c65b748
|             |       `-CXXThisExpr 0x55d68c672cf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d68c672df0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d68c672d80 <col:74> 'int' lvalue ParmVar 0x55d68c65e270 'i' 'int'
|-CXXMethodDecl 0x55d68c65e5b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55d68c65e428 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d68c65e4a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d68c673628 <col:42, line:500:5>
|   |-ParenExpr 0x55d68c6733c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c673390 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c673070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c673040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c672f50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c672f38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c672ef8 <col:23> 'int' lvalue ParmVar 0x55d68c65e428 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c672f18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c673020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c673008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c672f70 <col:33> 'int' lvalue ParmVar 0x55d68c65e428 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c672fe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c672fd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c672f90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c672fb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d68c6730d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c6730b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c6732f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c6732d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c6732b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c673330 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c673140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d68c673348 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c673178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c673360 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c6731b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55d68c673378 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c6732a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c673288 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c673248 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55d68c673608 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55d68c6735b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d68c673588 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d68c673530 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d68c673500 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d68c6734b0 <col:48, col:57> 'char [48]' lvalue ->c 0x55d68c666600
|     |     |   `-CXXMemberCallExpr 0x55d68c673490 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d68c673460 <col:48> '<bound member function type>' ->xanno 0x55d68c65b8e8
|     |     |       `-CXXThisExpr 0x55d68c673450 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d68c673518 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d68c6734e0 <col:61> 'int' lvalue ParmVar 0x55d68c65e428 'i' 'int'
|     `-ImplicitCastExpr 0x55d68c6735f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c6735d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d68c65e4a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d68c65e778 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55d68c65e680 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d68c673d88 <col:35, line:513:5>
|   |-ParenExpr 0x55d68c673a98 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c673a68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c6737c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c673790 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c6736a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c673688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c673648 <col:23> 'int' lvalue ParmVar 0x55d68c65e680 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c673668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c673770 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c673758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c6736c0 <col:33> 'int' lvalue ParmVar 0x55d68c65e680 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c673738 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c673720 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c6736e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c673700 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d68c673820 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c673800 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c6739c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c6739b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c673990 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c673a08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c673890 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d68c673a20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6738c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c673a38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c673900 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55d68c673a50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c673978 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c673960 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c673920 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55d68c673d78 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55d68c673d60 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55d68c673d48 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d68c673d18 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55d68c673c90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d68c673c60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d68c673c10 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d68c666600
|             |   `-CXXMemberCallExpr 0x55d68c673bf0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d68c673bc0 <col:60> '<bound member function type>' ->xanno 0x55d68c65b748
|             |       `-CXXThisExpr 0x55d68c673bb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d68c673c78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d68c673c40 <col:73> 'int' lvalue ParmVar 0x55d68c65e680 'i' 'int'
|-CXXMethodDecl 0x55d68c65e9c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55d68c65e838 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d68c65e8b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55d68c6744a8 <col:41, line:528:5>
|   |-ParenExpr 0x55d68c674230 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c674200 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c673f20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c673ef0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c673e00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c673de8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c673da8 <col:23> 'int' lvalue ParmVar 0x55d68c65e838 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c673dc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c673ed0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c673eb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c673e20 <col:33> 'int' lvalue ParmVar 0x55d68c65e838 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c673e98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c673e80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c673e40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c673e60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55d68c673f80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c673f60 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c674160 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c674148 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c674128 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c6741a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c673ff0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55d68c6741b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c674028 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c6741d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c674060 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55d68c6741e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c674110 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c6740f8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c6740b8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55d68c674488 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55d68c674438 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d68c674408 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55d68c6743b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d68c674370 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d68c674320 <col:47, col:56> 'char [48]' lvalue ->c 0x55d68c666600
|     |     |   `-CXXMemberCallExpr 0x55d68c674300 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d68c6742d0 <col:47> '<bound member function type>' ->xanno 0x55d68c65b8e8
|     |     |       `-CXXThisExpr 0x55d68c6742c0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d68c674388 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d68c674350 <col:60> 'int' lvalue ParmVar 0x55d68c65e838 'i' 'int'
|     `-ImplicitCastExpr 0x55d68c674470 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c674450 <col:65> 'int16_t':'short' lvalue ParmVar 0x55d68c65e8b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55d68c65eb88 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55d68c65ea90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d68c674b78 <col:36, line:541:5>
|   |-ParenExpr 0x55d68c674918 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c6748e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c674640 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c674610 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c674520 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c674508 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c6744c8 <col:23> 'int' lvalue ParmVar 0x55d68c65ea90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c6744e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c6745f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c6745d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c674540 <col:33> 'int' lvalue ParmVar 0x55d68c65ea90 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c6745b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c6745a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c674560 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c674580 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d68c6746a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c674680 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c674848 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c674830 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c674810 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c674888 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c674710 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d68c6748a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c674748 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c6748b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c674780 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55d68c6748d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c6747f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c6747e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c6747a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55d68c674b68 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55d68c674b50 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55d68c674b38 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d68c674b08 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55d68c674ab0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d68c674a80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d68c674a30 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d68c666600
|             |   `-CXXMemberCallExpr 0x55d68c674a10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d68c6749e0 <col:61> '<bound member function type>' ->xanno 0x55d68c65b748
|             |       `-CXXThisExpr 0x55d68c6749d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d68c674a98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d68c674a60 <col:74> 'int' lvalue ParmVar 0x55d68c65ea90 'i' 'int'
|-CXXMethodDecl 0x55d68c65ed58 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55d68c65ec48 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55d68c65ecc0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55d68c65ee08 <col:20>
| `-OptimizeNoneAttr 0x55d68c65ee60 <col:30>
|-CXXMethodDecl 0x55d68c65ef98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55d68c65eea0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55d68c675248 <col:35, line:562:5>
|   |-ParenExpr 0x55d68c674fe8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c674fb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c674d10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c674ce0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c674bf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c674bd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c674b98 <col:23> 'int' lvalue ParmVar 0x55d68c65eea0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c674bb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c674cc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c674ca8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c674c10 <col:33> 'int' lvalue ParmVar 0x55d68c65eea0 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c674c88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c674c70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c674c30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c674c50 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d68c674d70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c674d50 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c674f18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c674f00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c674ee0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c674f58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c674de0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d68c674f70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c674e18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c674f88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c674e50 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55d68c674fa0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c674ec8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c674eb0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c674e70 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55d68c675238 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55d68c675220 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55d68c675208 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d68c6751d8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55d68c675180 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d68c675150 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d68c675100 <col:60, col:69> 'char const[48]' lvalue ->c 0x55d68c666600
|             |   `-CXXMemberCallExpr 0x55d68c6750e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d68c6750b0 <col:60> '<bound member function type>' ->xanno 0x55d68c65b748
|             |       `-CXXThisExpr 0x55d68c6750a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d68c675168 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d68c675130 <col:73> 'int' lvalue ParmVar 0x55d68c65eea0 'i' 'int'
|-CXXMethodDecl 0x55d68c65f1a8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55d68c65f058 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d68c65f0d0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55d68c675928 <col:41, line:577:5>
|   |-ParenExpr 0x55d68c6756b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c675688 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c6753e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c6753b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c6752c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c6752a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c675268 <col:23> 'int' lvalue ParmVar 0x55d68c65f058 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c675288 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c675390 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c675378 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c6752e0 <col:33> 'int' lvalue ParmVar 0x55d68c65f058 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c675358 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c675340 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c675300 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c675320 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55d68c675440 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c675420 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c6755e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c6755d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c6755b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c675628 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6754b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55d68c675640 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6754e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c675658 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c675520 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55d68c675670 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c675598 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c675580 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c675540 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55d68c675908 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55d68c6758b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d68c675888 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55d68c675828 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d68c6757f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d68c6757a8 <col:47, col:56> 'char [48]' lvalue ->c 0x55d68c666600
|     |     |   `-CXXMemberCallExpr 0x55d68c675788 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d68c675758 <col:47> '<bound member function type>' ->xanno 0x55d68c65b8e8
|     |     |       `-CXXThisExpr 0x55d68c675748 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d68c675810 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d68c6757d8 <col:60> 'int' lvalue ParmVar 0x55d68c65f058 'i' 'int'
|     `-ImplicitCastExpr 0x55d68c6758f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c6758d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55d68c65f0d0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55d68c65f368 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55d68c65f270 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55d68c676058 <col:36, line:591:5>
|   |-ParenExpr 0x55d68c675d98 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c675d68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c675ac0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c675a90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c6759a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c675988 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c675948 <col:23> 'int' lvalue ParmVar 0x55d68c65f270 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c675968 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c675a70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c675a58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c6759c0 <col:33> 'int' lvalue ParmVar 0x55d68c65f270 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c675a38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c675a20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c6759e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c675a00 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d68c675b20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c675b00 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c675cc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c675cb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c675c90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c675d08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c675b90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d68c675d20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c675bc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c675d38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c675c00 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55d68c675d50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c675c78 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c675c60 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c675c20 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55d68c676048 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55d68c676030 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55d68c676018 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d68c675fe8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55d68c675f60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d68c675f30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d68c675ee0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55d68c666600
|             |   `-CXXMemberCallExpr 0x55d68c675ec0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d68c675e90 <col:61> '<bound member function type>' ->xanno 0x55d68c65b748
|             |       `-CXXThisExpr 0x55d68c675e80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d68c675f48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d68c675f10 <col:74> 'int' lvalue ParmVar 0x55d68c65f270 'i' 'int'
|-CXXMethodDecl 0x55d68c65f5b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55d68c65f428 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d68c65f4a0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55d68c676738 <col:42, line:606:5>
|   |-ParenExpr 0x55d68c6764c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55d68c676498 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c6761f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c6761c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c6760d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c6760b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c676078 <col:23> 'int' lvalue ParmVar 0x55d68c65f428 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c676098 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c6761a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55d68c676188 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c6760f0 <col:33> 'int' lvalue ParmVar 0x55d68c65f428 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c676168 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c676150 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c676110 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55d68c676130 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55d68c676250 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c676230 <col:60> 'int' 0
|   |   `-CallExpr 0x55d68c6763f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55d68c6763e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c6763c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c676438 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6762c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55d68c676450 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6762f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c676468 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c676330 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55d68c676480 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c6763a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c676390 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c676350 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55d68c676718 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55d68c6766c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d68c676698 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55d68c676638 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d68c676608 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d68c6765b8 <col:48, col:57> 'char [48]' lvalue ->c 0x55d68c666600
|     |     |   `-CXXMemberCallExpr 0x55d68c676598 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d68c676568 <col:48> '<bound member function type>' ->xanno 0x55d68c65b8e8
|     |     |       `-CXXThisExpr 0x55d68c676558 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d68c676620 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d68c6765e8 <col:61> 'int' lvalue ParmVar 0x55d68c65f428 'i' 'int'
|     `-ImplicitCastExpr 0x55d68c676700 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c6766e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55d68c65f4a0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55d68c65f750 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55d68c65f680 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55d68c676fa8 <col:33, line:620:5>
|   |-ParenExpr 0x55d68c676d20 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d68c676cf0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c676940 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c676910 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c6767b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c676798 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c676758 <col:23> 'int' lvalue ParmVar 0x55d68c65f680 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c676778 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c6768f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d68c6768d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c6767d0 <col:33> 'int' lvalue ParmVar 0x55d68c65f680 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c6768b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c6768a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c6767f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d68c676878 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d68c676860 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d68c676828 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d68c6769a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c676980 <col:79> 'int' 0
|   |   `-CallExpr 0x55d68c676c50 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d68c676c38 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c676c18 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c676c90 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c676a88 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d68c676ca8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c676ad0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c676cc0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c676b08 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55d68c676cd8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c676c00 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c676be8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c676ba8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55d68c676f98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55d68c676f80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55d68c676f68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55d68c676f38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55d68c676eb0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55d68c676e80 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55d68c676e30 <col:67, col:76> 'char const[48]' lvalue ->c 0x55d68c666600
|             |   `-CXXMemberCallExpr 0x55d68c676e10 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55d68c676de0 <col:67> '<bound member function type>' ->xanno 0x55d68c65b748
|             |       `-CXXThisExpr 0x55d68c676dd0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55d68c676e98 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55d68c676e60 <col:80> 'int' lvalue ParmVar 0x55d68c65f680 'i' 'int'
|-CXXMethodDecl 0x55d68c65f968 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55d68c65f810 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55d68c65f890 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55d68c6777d0 <col:45, line:635:5>
|   |-ParenExpr 0x55d68c677518 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55d68c6774e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55d68c6771b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55d68c677180 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55d68c677020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55d68c677008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55d68c676fc8 <col:23> 'int' lvalue ParmVar 0x55d68c65f810 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55d68c676fe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55d68c677160 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55d68c677148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55d68c677040 <col:33> 'int' lvalue ParmVar 0x55d68c65f810 'i' 'int'
|   |   |     `-BinaryOperator 0x55d68c677128 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55d68c677110 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55d68c677060 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55d68c65bb30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55d68c6770e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55d68c6770d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55d68c677098 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55d68c677210 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55d68c6771f0 <col:79> 'int' 0
|   |   `-CallExpr 0x55d68c677448 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55d68c677430 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c677410 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55d68c677488 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c677280 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55d68c6774a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55d68c6772c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55d68c6774b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55d68c677300 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55d68c6774d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55d68c6773f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55d68c6773e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55d68c677398 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55d68c6777b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55d68c677718 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55d68c6776e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55d68c677688 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55d68c677658 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55d68c677608 <col:54, col:63> 'char [48]' lvalue ->c 0x55d68c666600
|     |     |   `-CXXMemberCallExpr 0x55d68c6775e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55d68c6775b8 <col:54> '<bound member function type>' ->xanno 0x55d68c65b8e8
|     |     |       `-CXXThisExpr 0x55d68c6775a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55d68c677670 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55d68c677638 <col:67> 'int' lvalue ParmVar 0x55d68c65f810 'i' 'int'
|     `-CXXConstCastExpr 0x55d68c677780 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55d68c677768 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55d68c677730 <col:91> 'const void *' lvalue ParmVar 0x55d68c65f890 'x' 'const void *'
|-CXXMethodDecl 0x55d68c65fa38 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55d68c677858 <col:34, line:640:5>
|   `-ReturnStmt 0x55d68c677848 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55d68c677830 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55d68c677800 <col:16> 'Packet *' lvalue ->_data_packet 0x55d68c6671b8
|         `-CXXThisExpr 0x55d68c6777f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55d68c65fb78 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55d68c65fae8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c670918 <col:46> 'bool' true
|-CXXMethodDecl 0x55d68c65fcf8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55d68c65fc30 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55d68c65fda0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55d68c660550 <line:660:22> "" ""
| |-EnumConstantDecl 0x55d68c65fea0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c6605c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65fe80 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55d68c65fe60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d68c655000 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d68c65ff30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c6605d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65ff10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55d68c65fef0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55d68c655090 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55d68c65ffc0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c6605f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c65ffa0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d68c65ff80 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d68c660050 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c660608 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c660030 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55d68c660010 <col:19> 'int' 16
| |-EnumConstantDecl 0x55d68c6600e0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c660620 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c6600c0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55d68c6600a0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55d68c660170 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c660638 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c660150 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d68c660130 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d68c660200 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c660650 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c6601e0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55d68c6601c0 <col:19> 'int' EnumConstant 0x55d68c660050 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d68c660290 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c660668 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c660270 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55d68c660250 <col:19> 'int' EnumConstant 0x55d68c660170 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55d68c660360 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c660680 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c660340 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55d68c660320 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d68c6602e0 <col:23> 'int' EnumConstant 0x55d68c660290 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d68c660300 <col:40> 'int' 2
| |-EnumConstantDecl 0x55d68c660430 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55d68c660698 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c660410 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55d68c6603f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55d68c6603b0 <col:23> 'int' EnumConstant 0x55d68c660290 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55d68c6603d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55d68c660500 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55d68c6606b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c6604e0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55d68c6604c0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55d68c660480 <col:23> 'int' EnumConstant 0x55d68c660290 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55d68c6604a0 <col:40> 'int' 8
|-CXXMethodDecl 0x55d68c6606f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55d68c660790 <col:68> "" ""
|-CXXMethodDecl 0x55d68c660828 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55d68c6608c8 <col:45> "" ""
|-CXXMethodDecl 0x55d68c660960 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d68c660a00 <col:57> "" ""
|-CXXMethodDecl 0x55d68c660a98 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55d68c660b38 <col:45> "" ""
|-CXXMethodDecl 0x55d68c660bd0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55d68c660c70 <col:57> "" ""
|-CXXMethodDecl 0x55d68c660d00 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d68c660da0 <col:51> "" ""
|-CXXMethodDecl 0x55d68c660e30 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d68c660ed0 <col:63> "" ""
|-CXXMethodDecl 0x55d68c660f60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d68c661000 <col:53> "" ""
|-CXXMethodDecl 0x55d68c661090 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d68c661130 <col:65> "" ""
|-CXXMethodDecl 0x55d68c661248 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d68c6611b8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55d68c6612f0 <col:61> "" ""
|-CXXMethodDecl 0x55d68c661488 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d68c661378 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55d68c6613f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d68c661538 <col:67> "" ""
|-CXXMethodDecl 0x55d68c661650 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d68c6615c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d68c6616f8 <col:63> "" ""
|-CXXMethodDecl 0x55d68c661890 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d68c661780 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d68c6617f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d68c661940 <col:69> "" ""
|-CXXMethodDecl 0x55d68c661a58 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d68c6619c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d68c661b00 <col:63> "" ""
|-CXXMethodDecl 0x55d68c6641d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6640c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d68c664140 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c664288 <col:69> "" ""
|-CXXMethodDecl 0x55d68c6643a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d68c664310 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55d68c664448 <col:62> "" ""
|-CXXMethodDecl 0x55d68c6645e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d68c6644d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d68c664548 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55d68c664690 <col:68> "" ""
|-CXXMethodDecl 0x55d68c6647a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55d68c664718 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55d68c664850 <col:63> "" ""
|-CXXMethodDecl 0x55d68c6649e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55d68c6648d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55d68c664950 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55d68c664a98 <col:69> "" ""
|-CXXMethodDecl 0x55d68c664b28 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55d68c664bc8 <col:64> "" ""
|-CXXMethodDecl 0x55d68c664c58 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55d68c664cf8 <col:52> "" ""
|-CXXMethodDecl 0x55d68c664d88 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55d68c664e28 <col:67> "" ""
|-CXXMethodDecl 0x55d68c664eb8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55d68c664f58 <col:55> "" ""
|-CXXMethodDecl 0x55d68c665070 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55d68c664fe0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d68c665118 <col:58> "" ""
|-CXXMethodDecl 0x55d68c6652b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55d68c6651a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d68c665218 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55d68c665360 <col:62> "" ""
|-CXXMethodDecl 0x55d68c665478 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55d68c6653e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d68c665520 <col:58> "" ""
|-CXXMethodDecl 0x55d68c6656b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55d68c6655a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d68c665620 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55d68c665768 <col:62> "" ""
|-CXXMethodDecl 0x55d68c665880 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55d68c6657f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55d68c665928 <col:60> "" ""
|-CXXMethodDecl 0x55d68c665ac0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55d68c6659b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55d68c665a28 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55d68c665b70 <col:64> "" ""
|-CXXMethodDecl 0x55d68c665c88 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55d68c665bf8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55d68c665d30 <col:58> "" ""
|-CXXMethodDecl 0x55d68c665ec8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55d68c665db8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d68c665e30 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55d68c665f78 <col:62> "" ""
|-CXXMethodDecl 0x55d68c666090 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55d68c666000 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55d68c666138 <col:59> "" ""
|-CXXMethodDecl 0x55d68c6662d0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6661c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55d68c666238 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c666380 <col:63> "" ""
|-AccessSpecDecl 0x55d68c6663f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55d68c666418 prev 0x55d68c65b620 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d68c666510 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55d68c666600 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55d68c666728 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55d68c6668a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55d68c666a28 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55d68c666ba8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55d68c6779d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d68c678248 <col:11>
| |-CXXDestructorDecl 0x55d68c677ab0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55d68c677be8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55d68c677be8
| | `-ParmVarDecl 0x55d68c677cf8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55d68c677d98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d68c677d98
| | `-ParmVarDecl 0x55d68c677ea8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55d68c67ac68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d68c67ad78 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55d68c67aff8 <col:11>
| |   `-ReturnStmt 0x55d68c67afe8 <col:11>
| |     `-UnaryOperator 0x55d68c67afd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d68c67afc0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55d68c67ade8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55d68c67ade8
|   `-ParmVarDecl 0x55d68c67aef8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55d68c666c10 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d68c666d28 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55d68c666dc8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55d68c666e30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55d68c666e98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55d68c666f00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55d68c666f60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55d68c667020 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55d68c667080 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55d68c6670e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55d68c6778e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55d68c666dc8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55d68c678258 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55d68c6782b0 <col:12>
| |-CXXConstructorDecl 0x55d68c677f18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55d68c677f18
| | `-ParmVarDecl 0x55d68c678028 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55d68c6780c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55d68c6780c8
| | `-ParmVarDecl 0x55d68c6781d8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55d68c67a350 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55d68c667158 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55d68c6671b8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55d68c667220 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55d68c667288 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55d68c6672f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55d68c667358 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55d68c6673b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55d68c667418 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55d68c667480 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55d68c667508 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55d68c667158 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55d68c677880 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d68c6673b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55d68c6782c0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55d68c678320 <col:21, line:755:5>
|-CXXConstructorDecl 0x55d68c6676a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55d68c6675e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55d68c6677a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55d68c667988 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55d68c667890 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55d68c667c58 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55d68c667a40 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d68c667ab8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d68c667b30 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c667e78 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55d68c667d28 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55d68c667da0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55d68c670458 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55d68c667f38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55d68c667fb0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55d68c668028 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55d68c6705b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d68c670520 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c6706f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55d68c670668 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55d68c6707f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c6783c0 prev 0x55d68c654c80 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55d68c6784f8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55d68c678588 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55d68c678630 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55d68c6786d0 <col:20>
| `-OptimizeNoneAttr 0x55d68c678728 <col:30>
|-CXXMethodDecl 0x55d68c678778 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55d68c678818 <col:20>
| `-OptimizeNoneAttr 0x55d68c678870 <col:30>
|-CXXMethodDecl 0x55d68c6788c0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c678988 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c678a50 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c678b68 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55d68c678c30 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55d68c678cd0 <col:20>
| `-OptimizeNoneAttr 0x55d68c678d28 <col:30>
|-CXXMethodDecl 0x55d68c678d98 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55d68c678e38 <col:20>
| `-OptimizeNoneAttr 0x55d68c678e90 <col:30>
|-CXXMethodDecl 0x55d68c678f38 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55d68c678fd8 <col:20>
| `-OptimizeNoneAttr 0x55d68c679030 <col:30>
|-CXXMethodDecl 0x55d68c679080 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c679198 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55d68c6792b8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55d68c6793d8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55d68c6794a0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55d68c679540 <col:62> "" ""
|-AccessSpecDecl 0x55d68c6795b0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55d68c679610 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55d68c67a208 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55d68c67a430 <col:29, col:31>
|-CXXMethodDecl 0x55d68c6796d8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55d68c679818 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55d68c679788 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55d68c679910 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55d68c67a440 <col:23, col:25>
|-CXXMethodDecl 0x55d68c679ac8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55d68c679a00 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55d68c679d98 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55d68c679b80 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55d68c679bf8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55d68c679c70 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c679f28 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55d68c679e60 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55d68c67a020 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55d68c67a088 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55d68c67a088
  `-ParmVarDecl 0x55d68c67a198 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c6c54a0 <../elements/ip/ipreassembler.hh:65:1, line:122:1> line:65:7 class IPReassembler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55d68c6c55f8 <col:1, col:7> col:7 implicit referenced class IPReassembler
|-AccessSpecDecl 0x55d68c6c5688 <col:40, col:46> col:40 public
|-CXXConstructorDecl 0x55d68c6c5710 <line:67:5, col:19> col:5 IPReassembler 'void ()'
|-CXXDestructorDecl 0x55d68c6c5800 <line:68:5, col:20> col:5 ~IPReassembler 'void ()' noexcept-unevaluated 0x55d68c6c5800
| `-Overrides: [ 0x55d68c68e058 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55d68c6c5930 <line:70:5, col:62> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55d68c68f4b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55d68c6c8800 <col:36, col:62>
|   `-ReturnStmt 0x55d68c6c87f0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55d68c6c87d8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55d68c6c87b0 <col:45> 'const char [14]' lvalue "IPReassembler"
|-CXXMethodDecl 0x55d68c6c59f8 <line:71:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55d68c68f580 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55d68c6c8860 <col:36, col:58>
|   `-ReturnStmt 0x55d68c6c8850 <col:38, col:45>
|     `-ImplicitCastExpr 0x55d68c6c8838 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55d68c6c8818 <col:45> 'const char []' lvalue Var 0x55d68c68f8b8 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55d68c6c5ac0 <line:72:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55d68c68f948 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55d68c6c88c0 <col:36, col:62>
|   `-ReturnStmt 0x55d68c6c88b0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55d68c6c8898 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55d68c6c8878 <col:45> 'const char []' lvalue Var 0x55d68c68fcb0 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55d68c6c5d90 <line:74:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55d68c690d50 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55d68c6c5c40 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55d68c6c5cb8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c6c5ee8 <line:75:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55d68c690fa0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55d68c6c5e50 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c6c6030 <line:76:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55d68c6917b8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55d68c6c5fa0 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x55d68c6c6180 <line:78:5, col:33> col:9 check 'int (ErrorHandler *)'
| `-ParmVarDecl 0x55d68c6c60e8 <col:15, col:32> col:30 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d68c6c8798 <col:32> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d68c6c8778 <col:32> 'int' 0
|-CXXMethodDecl 0x55d68c6c62c8 <line:80:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55d68c68e698 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55d68c6c6238 <col:27, col:34> col:35 'Packet *'
|-CXXMethodDecl 0x55d68c6c6390 <line:82:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55d68c690e20 Element::add_handlers 'void ()' ]
|-CXXRecordDecl 0x55d68c6c6430 <line:84:5, line:87:5> line:84:12 referenced struct ChunkLink definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55d68c6c6548 <col:5, col:12> col:12 implicit struct ChunkLink
| |-FieldDecl 0x55d68c6c65e8 <line:85:2, col:11> col:11 off 'uint16_t':'unsigned short'
| `-FieldDecl 0x55d68c6c6648 <line:86:2, col:11> col:11 lastoff 'uint16_t':'unsigned short'
|-AccessSpecDecl 0x55d68c6c66b0 <line:89:3, col:10> col:3 private
|-EnumDecl 0x55d68c6c66d8 <line:91:5, line:93:23> line:91:5
| |-EnumConstantDecl 0x55d68c6c67e0 <col:12, col:27> col:12 REAP_TIMEOUT 'IPReassembler::(anonymous enum at ../elements/ip/ipreassembler.hh:91:5)'
| | `-ImplicitCastExpr 0x55d68c6c6950 <col:27> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c6c67c0 <col:27> 'int' Int: 30
| |     `-IntegerLiteral 0x55d68c6c67a0 <col:27> 'int' 30
| |-EnumConstantDecl 0x55d68c6c6870 <line:92:5, col:21> col:5 REAP_INTERVAL 'IPReassembler::(anonymous enum at ../elements/ip/ipreassembler.hh:91:5)'
| | `-ImplicitCastExpr 0x55d68c6c6968 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c6c6850 <col:21> 'int' Int: 10
| |     `-IntegerLiteral 0x55d68c6c6830 <col:21> 'int' 10
| `-EnumConstantDecl 0x55d68c6c6900 <line:93:5, col:20> col:5 IPH_MEM_USED 'IPReassembler::(anonymous enum at ../elements/ip/ipreassembler.hh:91:5)'
|   `-ImplicitCastExpr 0x55d68c6c6980 <col:20> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c6c68e0 <col:20> 'int' Int: 40
|       `-IntegerLiteral 0x55d68c6c68c0 <col:20> 'int' 40
|-EnumDecl 0x55d68c6c6998 <line:95:5, col:23> col:5
| `-EnumConstantDecl 0x55d68c6c6aa0 <col:12, col:19> col:12 referenced NMAP 'IPReassembler::(anonymous enum at ../elements/ip/ipreassembler.hh:95:5)'
|   `-ImplicitCastExpr 0x55d68c6c6af0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c6c6a80 <col:19> 'int' Int: 256
|       `-IntegerLiteral 0x55d68c6c6a60 <col:19> 'int' 256
|-FieldDecl 0x55d68c6c6ba8 <line:96:5, col:30> col:21 referenced _map 'WritablePacket *[256]'
|-FieldDecl 0x55d68c6c6c10 <line:98:5, col:9> col:9 _reap_time 'int'
|-FieldDecl 0x55d68c6c6c70 <line:100:5, col:14> col:14 _stat_frags_seen 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c6c6cd0 <line:101:5, col:14> col:14 _stat_good_assem 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c6c6d30 <line:102:5, col:14> col:14 _stat_failed_assem 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c6c6d90 <line:103:5, col:14> col:14 _stat_bad_pkts 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c6c6df0 <line:105:5, col:14> col:14 _mem_used 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c6c6e50 <line:106:5, col:14> col:14 _mem_high_thresh 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c6c6eb0 <line:107:5, col:14> col:14 _mem_low_thresh 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c6c6f10 <line:108:5, col:12> col:12 _mtu_anno 'int8_t':'signed char'
|-CXXMethodDecl 0x55d68c6c7040 <line:110:5, col:48> col:23 bucketno 'int (const click_ip *)' static inline
| `-ParmVarDecl 0x55d68c6c6f70 <col:32, col:47> col:48 'const click_ip *'
|-CXXMethodDecl 0x55d68c6c7248 <line:111:5, col:71> col:24 same_segment 'bool (const click_ip *, const click_ip *)' static inline
| |-ParmVarDecl 0x55d68c6c70f8 <col:37, col:52> col:53 'const click_ip *'
| `-ParmVarDecl 0x55d68c6c7170 <col:55, col:70> col:71 'const click_ip *'
|-CXXMethodDecl 0x55d68c6c7420 <line:112:5, col:48> col:19 debug_dump 'String (Element *, void *)' static
| |-ParmVarDecl 0x55d68c6c7308 <col:30, col:39> col:39 e 'Element *'
| `-ParmVarDecl 0x55d68c6c7388 <col:42, col:47> col:48 'void *'
|-CXXMethodDecl 0x55d68c6c76a8 <line:114:5, col:60> col:21 find_queue 'WritablePacket *(Packet *, WritablePacket ***)'
| |-ParmVarDecl 0x55d68c6c74f0 <col:32, col:39> col:40 'Packet *'
| `-ParmVarDecl 0x55d68c6c75d0 <col:42, col:59> col:60 'WritablePacket ***'
|-CXXMethodDecl 0x55d68c6c78b8 <line:115:5, col:48> col:10 make_queue 'void (Packet *, WritablePacket **)'
| |-ParmVarDecl 0x55d68c6c7768 <col:21, col:28> col:29 'Packet *'
| `-ParmVarDecl 0x55d68c6c77e8 <col:31, col:47> col:48 'WritablePacket **'
|-CXXMethodDecl 0x55d68c6c7ae8 <line:116:5, col:63> col:23 next_chunk 'IPReassembler::ChunkLink *(WritablePacket *, IPReassembler::ChunkLink *)' static
| |-ParmVarDecl 0x55d68c6c7978 <col:34, col:49> col:50 'WritablePacket *'
| `-ParmVarDecl 0x55d68c6c7a18 <col:52, col:62> col:63 'IPReassembler::ChunkLink *'
|-CXXMethodDecl 0x55d68c6c7d88 <line:117:5, col:76> col:13 emit_whole_packet 'Packet *(WritablePacket *, WritablePacket **, Packet *)'
| |-ParmVarDecl 0x55d68c6c7ba8 <col:31, col:46> col:47 'WritablePacket *'
| |-ParmVarDecl 0x55d68c6c7c28 <col:49, col:65> col:66 'WritablePacket **'
| `-ParmVarDecl 0x55d68c6c7ca0 <col:68, col:75> col:76 'Packet *'
|-CXXMethodDecl 0x55d68c6c7ee8 <line:118:5, col:27> col:10 reap_overfull 'void (int)'
| `-ParmVarDecl 0x55d68c6c7e58 <col:24> col:27 'int'
|-CXXMethodDecl 0x55d68c6c8038 <line:119:5, col:18> col:10 reap 'void (int)'
| `-ParmVarDecl 0x55d68c6c7fa8 <col:15> col:18 'int'
|-CXXMethodDecl 0x55d68c6c8360 <line:120:5, col:83> col:17 check_error 'void (ErrorHandler *, int, const Packet *, const char *, ...)' static
| |-ParmVarDecl 0x55d68c6c80f0 <col:29, col:42> col:43 'ErrorHandler *'
| |-ParmVarDecl 0x55d68c6c8170 <col:45> col:48 'int'
| |-ParmVarDecl 0x55d68c6c81e8 <col:50, col:63> col:64 'const Packet *'
| `-ParmVarDecl 0x55d68c6c8268 <col:66, col:77> col:78 'const char *'
|-CXXConstructorDecl 0x55d68c6c8448 <line:65:7> col:7 implicit IPReassembler 'void (const IPReassembler &)' inline default_delete noexcept-unevaluated 0x55d68c6c8448
| `-ParmVarDecl 0x55d68c6c8558 <col:7> col:7 'const IPReassembler &'
`-CXXMethodDecl 0x55d68c6c85f8 <col:7> col:7 implicit operator= 'IPReassembler &(const IPReassembler &)' inline default_delete noexcept-unevaluated 0x55d68c6c85f8
  `-ParmVarDecl 0x55d68c6c8708 <col:7> col:7 'const IPReassembler &'

Layout: <CGRecordLayout
  LLVMType:%class.IPReassembler = type <{ %class.Element.base, [4 x i8], [256 x %class.WritablePacket*], i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.IPReassembler.base = type <{ %class.Element.base, [4 x i8], [256 x %class.WritablePacket*], i32, i32, i32, i32, i32, i32, i32, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c460c10 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d68c460d28 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55d68c460dc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55d68c460e28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55d68c460e88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55d68c460f38 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c461240 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c461358 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55d68c461400 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55d68c461468 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55d68c4614f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55d68c467590 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d68c4679c8 <col:12>
|-CXXConstructorDecl 0x55d68c467698 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c4677a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d68c461400 'data' 'const char *'
| | `-ImplicitCastExpr 0x55d68c469f50 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55d68c469f20 <col:12> 'const char *const' lvalue .data 0x55d68c461400
| |     `-DeclRefExpr 0x55d68c469f00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4677a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d68c461468 'length' 'int'
| | `-ImplicitCastExpr 0x55d68c469fe0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c469fb0 <col:12> 'const int' lvalue .length 0x55d68c461468
| |     `-DeclRefExpr 0x55d68c469f90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4677a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55d68c4614f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55d68c46a070 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55d68c46a040 <col:12> 'String::memo_t *const' lvalue .memo 0x55d68c4614f8
| |     `-DeclRefExpr 0x55d68c46a020 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4677a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55d68c46a0c8 <col:12>
|-CXXConstructorDecl 0x55d68c467848 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d68c467848
| `-ParmVarDecl 0x55d68c467958 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55d68c46ceb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d68c4788c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c4789d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55d68c478ef0 <col:12>
|   |-BinaryOperator 0x55d68c478d08 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d68c478cc0 <col:12> 'const char *' lvalue ->data 0x55d68c461400
|   | | `-CXXThisExpr 0x55d68c478cb0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d68c478cf0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c478c80 <col:12> 'const char *const' lvalue .data 0x55d68c461400
|   |     `-DeclRefExpr 0x55d68c478c60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4789d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d68c478dd0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55d68c478d88 <col:12> 'int' lvalue ->length 0x55d68c461468
|   | | `-CXXThisExpr 0x55d68c478d78 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d68c478db8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c478d48 <col:12> 'const int' lvalue .length 0x55d68c461468
|   |     `-DeclRefExpr 0x55d68c478d28 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4789d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55d68c478e98 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55d68c478e50 <col:12> 'String::memo_t *' lvalue ->memo 0x55d68c4614f8
|   | | `-CXXThisExpr 0x55d68c478e40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55d68c478e80 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c478e10 <col:12> 'String::memo_t *const' lvalue .memo 0x55d68c4614f8
|   |     `-DeclRefExpr 0x55d68c478df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4789d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55d68c478ee0 <col:12>
|     `-UnaryOperator 0x55d68c478ec8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c478eb8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55d68c478a48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d68c478a48
  `-ParmVarDecl 0x55d68c478b58 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c458180 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d68c458298 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55d68c458328 <col:16, col:22> col:16 public
|-TypedefDecl 0x55d68c458368 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55d68c12afd0 'const char *'
|   `-QualType 0x55d68c12a521 'const char' const
|     `-BuiltinType 0x55d68c12a520 'char'
|-TypedefDecl 0x55d68c4583f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55d68c4583c0 'String::const_iterator' sugar
|   |-Typedef 0x55d68c458368 'const_iterator'
|   `-PointerType 0x55d68c12afd0 'const char *'
|     `-QualType 0x55d68c12a521 'const char' const
|       `-BuiltinType 0x55d68c12a520 'char'
|-TypedefDecl 0x55d68c458560 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55d68c4584d0 'int (String::*)() const'
|   |-RecordType 0x55d68c458210 'String'
|   | `-CXXRecord 0x55d68c458180 'String'
|   `-ParenType 0x55d68c458470 'int () const' sugar
|     `-FunctionProtoType 0x55d68c42d010 'int () const' const cdecl
|       `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c4585c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55d68c281bf0 'int64_t' sugar
|   |-Typedef 0x55d68c193390 'int64_t'
|   `-TypedefType 0x55d68c16c630 '__int64_t' sugar
|     |-Typedef 0x55d68c16c208 '__int64_t'
|     `-BuiltinType 0x55d68c12a5a0 'long'
|-TypedefDecl 0x55d68c458630 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55d68c281b10 'uint64_t' sugar
|   |-Typedef 0x55d68c193530 'uint64_t'
|   `-TypedefType 0x55d68c16c6c0 '__uint64_t' sugar
|     |-Typedef 0x55d68c16c278 '__uint64_t'
|     `-BuiltinType 0x55d68c12a640 'unsigned long'
|-TypedefDecl 0x55d68c4586c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55d68c458690 'String::intmax_t' sugar
|   |-Typedef 0x55d68c4585c8 'intmax_t'
|   `-TypedefType 0x55d68c281bf0 'int64_t' sugar
|     |-Typedef 0x55d68c193390 'int64_t'
|     `-TypedefType 0x55d68c16c630 '__int64_t' sugar
|       |-Typedef 0x55d68c16c208 '__int64_t'
|       `-BuiltinType 0x55d68c12a5a0 'long'
|-TypedefDecl 0x55d68c458750 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55d68c458720 'String::uintmax_t' sugar
|   |-Typedef 0x55d68c458630 'uintmax_t'
|   `-TypedefType 0x55d68c281b10 'uint64_t' sugar
|     |-Typedef 0x55d68c193530 'uint64_t'
|     `-TypedefType 0x55d68c16c6c0 '__uint64_t' sugar
|       |-Typedef 0x55d68c16c278 '__uint64_t'
|       `-BuiltinType 0x55d68c12a640 'unsigned long'
|-CXXConstructorDecl 0x55d68c458810 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55d68c4589b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55d68c4588f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55d68c458b68 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55d68c458aa8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55d68c458cc0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55d68c458c30 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55d68c458ed8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d68c458d88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55d68c458e08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55d68c4590f8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55d68c458fa8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55d68c459028 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55d68c459318 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d68c4591c8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55d68c459248 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55d68c459538 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55d68c4593e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55d68c459468 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55d68c4596c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55d68c459600 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55d68c459848 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55d68c459788 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55d68c4599d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55d68c459910 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55d68c459b30 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55d68c459aa0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55d68c459c88 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55d68c459bf8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55d68c459de0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55d68c459d50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55d68c459f68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55d68c459ea8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55d68c45a0f8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55d68c45a030 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55d68c45a288 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55d68c45a1c0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55d68c45a418 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55d68c45a350 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55d68c45a510 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55d68c45a638 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55d68c45a7b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55d68c45a6f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55d68c45a908 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55d68c45a878 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55d68c45a9c0 <col:63> "" ""
|-CXXMethodDecl 0x55d68c45ab08 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55d68c45aa48 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55d68c45ad18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55d68c45abc8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55d68c45ac48 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55d68c45af38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55d68c45ade0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55d68c45ae60 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55d68c45b218 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55d68c45aff8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55d68c45b078 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55d68c467060 <col:55> 'int' 10
| `-ParmVarDecl 0x55d68c45b0f0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c467080 <col:76> 'bool' true
|-CXXMethodDecl 0x55d68c45b4f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55d68c45b2e0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55d68c45b360 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55d68c467090 <col:56> 'int' 10
| `-ParmVarDecl 0x55d68c45b3d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c4670b0 <col:77> 'bool' true
|-CXXMethodDecl 0x55d68c45b600 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55d68c45b6c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55d68c45b790 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55d68c45b830 <col:20>
| `-OptimizeNoneAttr 0x55d68c45b888 <col:30>
|-CXXConversionDecl 0x55d68c45b978 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d68c45ba48 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55d68c45bb08 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55d68c45bbf8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d68c45bcb8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55d68c45be38 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55d68c45bd70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55d68c45bf88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55d68c45bef8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55d68c45c078 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55d68c45c138 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55d68c45c388 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55d68c45c1f0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55d68c45c270 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55d68c45c5e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55d68c45c450 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55d68c45c4d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55d68c45c6b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c45c8c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55d68c45c770 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55d68c45c7f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55d68c45cae8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55d68c45c990 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55d68c45ca10 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55d68c45cc78 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55d68c45cbb0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55d68c45cd68 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55d68c45ced8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d68c45ce18 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d68c45d0e8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55d68c45cf98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d68c45d018 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d68c45d300 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55d68c45d1a8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55d68c45d220 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55d68c45d490 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55d68c45d3c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d68c45d6b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55d68c45d550 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55d68c45d5d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d68c45d800 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55d68c45d770 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55d68c45d9d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d68c45d8c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d68c45d940 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55d68c45db28 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55d68c45da98 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55d68c45dd40 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55d68c45dbe0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55d68c45dc60 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55d68c4670c0 <col:39> 'int' 0
|-CXXMethodDecl 0x55d68c45df60 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55d68c45de00 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55d68c45de80 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55d68c4670e0 <col:48> 'int' 0
|-CXXMethodDecl 0x55d68c45e140 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55d68c45e020 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55d68c45e0a0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55d68c467100 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55d68c45e210 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55d68c45e2d0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55d68c45e390 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55d68c45e450 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55d68c45e510 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55d68c45e6b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d68c45e5c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55d68c45e838 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55d68c45e770 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55d68c45ea10 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d68c45e8f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55d68c45eb88 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55d68c45eac8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55d68c45ecd0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55d68c45ec40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55d68c45ee20 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55d68c45ed90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55d68c45eff8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d68c45eee0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d68c45ef60 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d68c45f1d8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d68c45f0c0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55d68c45f140 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55d68c45f328 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55d68c45f298 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55d68c45f538 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55d68c45f3e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55d68c45f468 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55d68c45f698 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55d68c45f600 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55d68c45f7f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55d68c45f758 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55d68c45f898 <col:57> "" ""
|-CXXMethodDecl 0x55d68c45f9a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55d68c45f918 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55d68c45faf8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55d68c45fa68 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55d68c45fc78 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55d68c45fbb0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55d68c45fd40 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55d68c45fe00 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55d68c45fec0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55d68c45ff60 <col:49> "" ""
|-CXXMethodDecl 0x55d68c45fff0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55d68c4600b0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55d68c4601a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55d68c460268 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55d68c460328 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55d68c4603e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55d68c4604e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55d68c4605a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55d68c460670 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55d68c460848 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55d68c460728 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55d68c4607a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55d68c460a70 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55d68c460910 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55d68c460990 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55d68c460b80 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55d68c460be8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55d68c460c10 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55d68c460d28 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55d68c460dc8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55d68c460e28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55d68c460e88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55d68c460f38 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55d68c460fa0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55d68c4611d8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55d68c461228 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c4611b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55d68c4610c8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55d68c461070 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55d68c4610b0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55d68c461090 <col:32> 'int' 8
|-CXXRecordDecl 0x55d68c461240 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d68c461358 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55d68c461400 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55d68c461468 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55d68c4614f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55d68c467590 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d68c4679c8 <col:12>
| |-CXXConstructorDecl 0x55d68c467698 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d68c4677a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d68c461400 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55d68c469f50 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55d68c469f20 <col:12> 'const char *const' lvalue .data 0x55d68c461400
| | |     `-DeclRefExpr 0x55d68c469f00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4677a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d68c461468 'length' 'int'
| | | `-ImplicitCastExpr 0x55d68c469fe0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55d68c469fb0 <col:12> 'const int' lvalue .length 0x55d68c461468
| | |     `-DeclRefExpr 0x55d68c469f90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4677a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55d68c4614f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55d68c46a070 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55d68c46a040 <col:12> 'String::memo_t *const' lvalue .memo 0x55d68c4614f8
| | |     `-DeclRefExpr 0x55d68c46a020 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4677a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55d68c46a0c8 <col:12>
| |-CXXConstructorDecl 0x55d68c467848 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d68c467848
| | `-ParmVarDecl 0x55d68c467958 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55d68c46ceb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55d68c4788c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d68c4789d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55d68c478ef0 <col:12>
| |   |-BinaryOperator 0x55d68c478d08 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55d68c478cc0 <col:12> 'const char *' lvalue ->data 0x55d68c461400
| |   | | `-CXXThisExpr 0x55d68c478cb0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d68c478cf0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d68c478c80 <col:12> 'const char *const' lvalue .data 0x55d68c461400
| |   |     `-DeclRefExpr 0x55d68c478c60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4789d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d68c478dd0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55d68c478d88 <col:12> 'int' lvalue ->length 0x55d68c461468
| |   | | `-CXXThisExpr 0x55d68c478d78 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d68c478db8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55d68c478d48 <col:12> 'const int' lvalue .length 0x55d68c461468
| |   |     `-DeclRefExpr 0x55d68c478d28 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4789d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55d68c478e98 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55d68c478e50 <col:12> 'String::memo_t *' lvalue ->memo 0x55d68c4614f8
| |   | | `-CXXThisExpr 0x55d68c478e40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55d68c478e80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55d68c478e10 <col:12> 'String::memo_t *const' lvalue .memo 0x55d68c4614f8
| |   |     `-DeclRefExpr 0x55d68c478df0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55d68c4789d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55d68c478ee0 <col:12>
| |     `-UnaryOperator 0x55d68c478ec8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d68c478eb8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55d68c478a48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d68c478a48
|   `-ParmVarDecl 0x55d68c478b58 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55d68c461570 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55d68c4617b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55d68c4615d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55d68c461658 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55d68c4616d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55d68c467550 <col:79, line:261:5>
|   |-BinaryOperator 0x55d68c4671c8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55d68c467160 <col:2, col:5> 'const char *' lvalue .data 0x55d68c461400
|   | | `-MemberExpr 0x55d68c467130 <col:2> 'String::rep_t' lvalue ->_r 0x55d68c461570
|   | |   `-CXXThisExpr 0x55d68c467120 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d68c4671b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d68c467190 <col:12> 'const char *' lvalue ParmVar 0x55d68c4615d8 'data' 'const char *'
|   |-BinaryOperator 0x55d68c467290 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55d68c467228 <col:2, col:5> 'int' lvalue .length 0x55d68c461468
|   | | `-MemberExpr 0x55d68c4671f8 <col:2> 'String::rep_t' lvalue ->_r 0x55d68c461570
|   | |   `-CXXThisExpr 0x55d68c4671e8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55d68c467278 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d68c467258 <col:14> 'int' lvalue ParmVar 0x55d68c461658 'length' 'int'
|   `-IfStmt 0x55d68c467538 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55d68c4673b0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d68c467398 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55d68c467378 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55d68c467358 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55d68c4672f0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55d68c4614f8
|     |       | `-MemberExpr 0x55d68c4672c0 <col:7> 'String::rep_t' lvalue ->_r 0x55d68c461570
|     |       |   `-CXXThisExpr 0x55d68c4672b0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55d68c467340 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d68c467320 <col:17> 'String::memo_t *' lvalue ParmVar 0x55d68c4616d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55d68c467510 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55d68c4674f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d68c467400 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55d68c4501e8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55d68c467468 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d68c460dc8
|         `-ImplicitCastExpr 0x55d68c467450 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55d68c467430 <col:27> 'String::memo_t *' lvalue ParmVar 0x55d68c4616d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55d68c461a68 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55d68c461888 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55d68c461908 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55d68c461980 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55d68c461570 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55d68c4679d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d68c467b68 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55d68c467ad0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55d68c467a40 <col:2> '<bound member function type>' ->assign_memo 0x55d68c4617b8
|     | `-ImplicitCastExpr 0x55d68c467b08 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55d68c467a30 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55d68c467b20 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c467a70 <col:14> 'const char *' lvalue ParmVar 0x55d68c461888 'data' 'const char *'
|     |-ImplicitCastExpr 0x55d68c467b38 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c467a90 <col:20> 'int' lvalue ParmVar 0x55d68c461908 'length' 'int'
|     `-ImplicitCastExpr 0x55d68c467b50 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c467ab0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55d68c461980 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55d68c461bf8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55d68c461b38 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55d68c467dc0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55d68c467d40 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55d68c467b90 <col:2> '<bound member function type>' ->assign_memo 0x55d68c4617b8
|     | `-CXXThisExpr 0x55d68c467b80 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55d68c467d78 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55d68c467c10 <col:14, col:19> 'const char *' lvalue .data 0x55d68c461400
|     |   `-MemberExpr 0x55d68c467be0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55d68c461570
|     |     `-DeclRefExpr 0x55d68c467bc0 <col:14> 'const String' lvalue ParmVar 0x55d68c461b38 'x' 'const String &'
|     |-ImplicitCastExpr 0x55d68c467d90 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55d68c467c90 <col:25, col:30> 'int' lvalue .length 0x55d68c461468
|     |   `-MemberExpr 0x55d68c467c60 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55d68c461570
|     |     `-DeclRefExpr 0x55d68c467c40 <col:25> 'const String' lvalue ParmVar 0x55d68c461b38 'x' 'const String &'
|     `-ImplicitCastExpr 0x55d68c467da8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55d68c467d10 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55d68c4614f8
|         `-MemberExpr 0x55d68c467ce0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55d68c461570
|           `-DeclRefExpr 0x55d68c467cc0 <col:38> 'const String' lvalue ParmVar 0x55d68c461b38 'x' 'const String &'
|-CXXMethodDecl 0x55d68c461cc0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55d68c468780 <col:31, line:278:5>
|   `-IfStmt 0x55d68c468768 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55d68c467e60 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55d68c467e48 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55d68c467e18 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d68c4614f8
|     |     `-MemberExpr 0x55d68c467de8 <col:6> 'String::rep_t' lvalue ->_r 0x55d68c461570
|     |       `-CXXThisExpr 0x55d68c467dd8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55d68c468740 <col:15, line:277:2>
|       |-ParenExpr 0x55d68c468310 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55d68c4682e0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55d68c467f70 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55d68c467f58 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55d68c467f40 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55d68c467f00 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d68c460dc8
|       |   |       `-ImplicitCastExpr 0x55d68c467ee8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55d68c467eb8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55d68c4614f8
|       |   |           `-MemberExpr 0x55d68c467e88 <col:27> 'String::rep_t' lvalue ->_r 0x55d68c461570
|       |   |             `-CXXThisExpr 0x55d68c467e78 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55d68c467fd0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55d68c467fb0 <col:54> 'int' 0
|       |   `-CallExpr 0x55d68c468240 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55d68c468228 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d68c4681a8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55d68c1c8400 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55d68c468280 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d68c4680b8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55d68c468298 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55d68c4680e8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55d68c4682b0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55d68c468120 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55d68c4682c8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55d68c468190 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55d68c468178 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55d68c468140 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55d68c468660 <line:274:6, line:275:22>
|       | |-CallExpr 0x55d68c468520 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55d68c468508 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55d68c468480 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55d68c451630 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55d68c468450 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55d68c460dc8
|       | |   `-ImplicitCastExpr 0x55d68c468438 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55d68c468408 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55d68c4614f8
|       | |       `-MemberExpr 0x55d68c4683d8 <col:40> 'String::rep_t' lvalue ->_r 0x55d68c461570
|       | |         `-CXXThisExpr 0x55d68c4683c8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55d68c468620 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55d68c468608 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55d68c468548 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55d68c4664a0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55d68c468648 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55d68c4685a8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55d68c4614f8
|       |       `-MemberExpr 0x55d68c468578 <col:15> 'String::rep_t' lvalue ->_r 0x55d68c461570
|       |         `-CXXThisExpr 0x55d68c468568 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55d68c468720 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55d68c4686b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55d68c4614f8
|         | `-MemberExpr 0x55d68c468688 <col:6> 'String::rep_t' lvalue ->_r 0x55d68c461570
|         |   `-CXXThisExpr 0x55d68c468678 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55d68c468708 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55d68c4686e8 <col:16> 'int' 0
|-CXXMethodDecl 0x55d68c461f58 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55d68c461d78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d68c461df8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d68c461e70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55d68c462030 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55d68c462280 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55d68c4620e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55d68c462168 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55d68c4621e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d68c462468 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55d68c462350 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55d68c4623d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55d68c462568 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55d68c468858 <col:41, line:286:5>
|   `-ReturnStmt 0x55d68c468848 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55d68c468818 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55d68c4687e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55d68c4687c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55d68c4687a8 <col:46> 'int' 1
|-CXXMethodDecl 0x55d68c462808 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55d68c462620 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55d68c4626a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55d68c462720 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55d68c4664a0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55d68c4628d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55d68c466570 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55d68c466740 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55d68c466628 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d68c4666a8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55d68c466800 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55d68c4668c8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55d68c4669c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55d68c466a40 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55d68c466ab8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55d68c466b20 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55d68c466c20 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55d68c466c70 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c466c00 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55d68c466be0 <col:22> 'int' 14
|-CXXMethodDecl 0x55d68c466e88 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55d68c466ca0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55d68c466d20 <col:38> col:41 'int'
| `-ParmVarDecl 0x55d68c466da0 <col:43> col:46 'int'
|-FriendDecl 0x55d68c466f90 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55d68c467020 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d68c6f45d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55d68c6f47a8 prev 0x55d68c6f45d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d68c6f4838 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d68c6f4860 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c6f61c0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55d68c6f6170 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55d68c6f6150 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55d68c6f4a78 'type'
|     `-SubstTemplateTypeParmType 0x55d68c6f4a40 'String' sugar
|       |-TemplateTypeParmType 0x55d68c41ca30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c41c9e0 'T'
|       `-RecordType 0x55d68c458210 'String'
|         `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f6278 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55d68c6f6240 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55d68c6f6220 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d68c6f61c0 'type'
|     `-ElaboratedType 0x55d68c6f6170 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55d68c6f6150 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55d68c6f4a78 'type'
|         `-SubstTemplateTypeParmType 0x55d68c6f4a40 'String' sugar
|           |-TemplateTypeParmType 0x55d68c41ca30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d68c41c9e0 'T'
|           `-RecordType 0x55d68c458210 'String'
|             `-CXXRecord 0x55d68c458180 'String'
|-CXXMethodDecl 0x55d68c6f63f8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55d68c6f6308 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55d68c6f64e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d68c6f65c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55d68c6f65c8
|-CXXMethodDecl 0x55d68c6f6898 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d68c6f67a0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55d68c6f6ad8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d68c6f6950 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d68c6f69c8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d68c6f6ca8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d68c6f6b98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d68c6f6c10 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d68c6f6e08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d68c6f6ed8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55d68c6f7128 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d68c6f6f98 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d68c6f7010 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d68c6f7388 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55d68c6f71f8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55d68c6f7270 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d68c6f7578 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d68c6f7458 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d68c6f7738 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55d68c6f7640 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d68c6f77f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d68c6f78a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d68c6f7ad8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55d68c6f7950 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d68c6f79c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55d68c6f7d78 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55d68c6f7c80 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55d68c6f7e40 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55d68c6f7e90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d68c6f7ee0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d68c6909c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55d68c6f3038 prev 0x55d68c6909c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d68c6f4540 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55d68c6f44f0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55d68c6f44d0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55d68c6f4380 'type'
|     `-SubstTemplateTypeParmType 0x55d68c6f4210 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55d68c3f27e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55d68c3f2788 'F'
|       `-RecordType 0x55d68c6f3e70 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55d68c6f3d90 'typed_array_memory'
|-FieldDecl 0x55d68c6f7f30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55d68c6f7f80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d68c6f7fb8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|   |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d68c429cf8 'T'
|   `-RecordType 0x55d68c458210 'String'
|     `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f8048 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55d68c6f8010 'String &'
|   `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|     |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d68c429cf8 'T'
|     `-RecordType 0x55d68c458210 'String'
|       `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f80d8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55d68c6f80a0 'const String &'
|   `-QualType 0x55d68c6f30d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-RecordType 0x55d68c458210 'String'
|         `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f8168 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55d68c6f8130 'String *'
|   `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|     |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d68c429cf8 'T'
|     `-RecordType 0x55d68c458210 'String'
|       `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f81f8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55d68c6f81c0 'const String *'
|   `-QualType 0x55d68c6f30d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-RecordType 0x55d68c458210 'String'
|         `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f8e50 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55d68c6f8e00 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55d68c6f8de0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55d68c6f8d18 'type'
|     `-LValueReferenceType 0x55d68c6f8ce0 'const String &'
|       `-QualType 0x55d68c6f8a81 'const String' const
|         `-SubstTemplateTypeParmType 0x55d68c6f8a80 'String' sugar
|           |-TemplateTypeParmType 0x55d68c3fc730 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55d68c3fc6d8 'T'
|           `-RecordType 0x55d68c458210 'String'
|             `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f8eb8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55d68c6f80a0 'const String &'
|   `-QualType 0x55d68c6f30d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-RecordType 0x55d68c458210 'String'
|         `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f8f10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c6f8f78 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55d68c6f8130 'String *'
|   `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|     |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d68c429cf8 'T'
|     `-RecordType 0x55d68c458210 'String'
|       `-CXXRecord 0x55d68c458180 'String'
|-TypedefDecl 0x55d68c6f8fe0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55d68c6f81c0 'const String *'
|   `-QualType 0x55d68c6f30d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55d68c6f30d0 'String' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-RecordType 0x55d68c458210 'String'
|         `-CXXRecord 0x55d68c458180 'String'
|-EnumDecl 0x55d68c6f9038 <line:134:5> col:5
| `-EnumConstantDecl 0x55d68c6f9130 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d68c6f9110 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d68c42b3d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d68c42b3b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d68c42b390 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d68c6f91b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d68c6f9448 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c6f9270 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d68c6f9310 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55d68c6f96d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55d68c6f95c0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55d68c6f9998 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55d68c6f9880 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d68c6f9cb0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55d68c6f9b90 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55d68c6f9fc0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55d68c6f9ea0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55d68c6fa2b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c6fa0f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d68c6fa170 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d68c6fa3d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d68c6fa488 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c6fa4e0 <col:30> Inherited
|-CXXMethodDecl 0x55d68c6fa528 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55d68c6fa5d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c6fa630 <col:30> Inherited
|-CXXMethodDecl 0x55d68c6fa6f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d68c6fa7a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c6fa800 <col:30> Inherited
|-CXXMethodDecl 0x55d68c6fa848 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d68c6fa8f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c6fa950 <col:30> Inherited
|-CXXMethodDecl 0x55d68c6fa998 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d68c6faa48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c6faaa0 <col:30> Inherited
|-CXXMethodDecl 0x55d68c6faae8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55d68c6fab98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c6fabf0 <col:30> Inherited
|-CXXMethodDecl 0x55d68c6fac18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d68c6facc8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d68c6fad78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d68c6faf38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c6fae28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d68c6faea0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d68c6fb088 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d68c6faff8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c6fb238 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55d68c6fb140 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d68c6fb2f0 <col:20>
| `-OptimizeNoneAttr 0x55d68c6fb348 <col:30>
|-CXXMethodDecl 0x55d68c6fb468 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55d68c6fb370 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d68c6fb520 <col:20>
| `-OptimizeNoneAttr 0x55d68c6fb578 <col:30>
|-CXXMethodDecl 0x55d68c6fb630 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d68c6fb5a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c6fb778 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d68c6fb6e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c6fb8a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55d68c6fb9a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55d68c6fba78 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55d68c6fbb48 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55d68c6fbc88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d68c6fbbf8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c6fbdd0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d68c6fbd40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c6fbf18 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d68c6fbe88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d68c6fbfd0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d68c6fc0d0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d68c6fc040 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d68c6fc188 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d68c6fc248 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55d68c6fc348 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55d68c6fc4c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d68c6fc408 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55d68c6fcc88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d68c6fc580 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55d68c6fcbe8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55d68c6fcae8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55d68c6fcd68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d68c6fceb8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55d68c6fce28 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d68c6fcf70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d68c6fd1b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c6fd030 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d68c6fd0a8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55d68c6fd348 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55d68c6fd288 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d68c6fd558 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55d68c6fd410 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55d68c6fd488 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55d68c6fd618 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d68c6fd878 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55d68c6fd780 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55d68c6fd948 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55d68c6fd948

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c7865e0 prev 0x55d68c708508 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d68c7866d8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55d68c786768 <col:22, col:28> col:22 public
|-EnumDecl 0x55d68c786790 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55d68c7868a8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786888 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55d68c786870 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d68c786850 <col:14> 'int' 999
| |-EnumConstantDecl 0x55d68c786950 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786930 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55d68c786918 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55d68c7868f8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55d68c7869e0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c7869c0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55d68c7869a0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55d68c786a70 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786a50 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55d68c786a30 <col:13> 'int' 1
| |-EnumConstantDecl 0x55d68c786b00 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786ae0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55d68c786ac0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55d68c786b90 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786b70 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55d68c786b50 <col:13> 'int' 3
| |-EnumConstantDecl 0x55d68c786c20 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786c00 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55d68c786be0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55d68c786cb0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786c90 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55d68c786c70 <col:14> 'int' 5
| |-EnumConstantDecl 0x55d68c786d40 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55d68c786d20 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55d68c786d00 <col:12> 'int' 6
| `-EnumConstantDecl 0x55d68c786dd0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55d68c786db0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55d68c786d90 <col:13> 'int' 7
|-VarDecl 0x55d68c786e40 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55d68c786ec8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55d68c786f50 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55d68c786fd8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55d68c787060 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55d68c7870e8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55d68c787170 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55d68c7871f8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55d68c787280 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55d68c787308 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55d68c787390 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55d68c787490 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55d68c78c778 '_nerrors' 'int'
| | `-IntegerLiteral 0x55d68c78cf18 <line:128:13> 'int' 0
| `-CompoundStmt 0x55d68c78cf88 <col:16, line:129:5>
|-CXXDestructorDecl 0x55d68c787580 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55d68c78cf98 <col:29, line:132:5>
|-CXXMethodDecl 0x55d68c787738 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55d68c787670 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c787800 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55d68c7878e8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d68c78cff0 <col:44, line:161:5>
|   `-ReturnStmt 0x55d68c78cfe0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55d68c78cfc8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c78cfa8 <col:9> 'ErrorHandler *' lvalue Var 0x55d68c78c7d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c787a28 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55d68c787998 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55d68c787af0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55d68c78d050 <col:43, line:173:5>
|   `-ReturnStmt 0x55d68c78d040 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55d68c78d028 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c78d008 <col:9> 'ErrorHandler *' lvalue Var 0x55d68c78c850 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55d68c787ba8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55d68c787c28 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55d68c787d38 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55d68c787ca8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d68c787e88 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55d68c787df8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d68c787fe0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55d68c787f48 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55d68c788138 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55d68c7880a0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d68c788290 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55d68c7881f8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55d68c7884a0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d68c788348 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55d68c7883c8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55d68c788678 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d68c788560 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55d68c7885e0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55d68c788898 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d68c788738 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55d68c7887b8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55d68c788a78 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d68c788958 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d68c7889d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d68c788c58 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55d68c788b38 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55d68c788bb8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55d68c788de0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55d68c788d18 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55d68c788fb0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55d68c788e98 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d68c788f10 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55d68c78d2a8 <col:57, line:234:5>
|   `-ReturnStmt 0x55d68c78d298 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55d68c78d280 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d68c78d228 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d68c78d1f8 <col:9> '<bound member function type>' ->xmessage 0x55d68c788de0
|         | `-CXXThisExpr 0x55d68c78d1e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55d68c78d268 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d68c78d250 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d68c78d1c8 <col:18, col:40> 'String' (CXXTemporary 0x55d68c78d1c8)
|               `-CallExpr 0x55d68c78d190 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55d68c78d178 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55d68c78d0f0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d68c78afa8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55d68c78d110 <col:31> 'const String' lvalue ParmVar 0x55d68c788f10 'str' 'const String &'
|                 `-DeclRefExpr 0x55d68c78d130 <col:36> 'const String' lvalue ParmVar 0x55d68c788e98 'anno' 'const String &'
|-CXXMethodDecl 0x55d68c789290 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d68c789070 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55d68c7890f0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55d68c789168 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d68c78d538 <col:68, line:243:5>
|   `-ReturnStmt 0x55d68c78d528 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55d68c78d510 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55d68c78d4b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55d68c78d480 <col:9> '<bound member function type>' ->xmessage 0x55d68c788fb0
|         | `-CXXThisExpr 0x55d68c78d470 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d68c78d348 <col:18> 'const String' lvalue ParmVar 0x55d68c789070 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d68c78d4f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d68c78d4e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d68c78d450 <col:24, col:40> 'String' (CXXTemporary 0x55d68c78d450)
|               `-CXXMemberCallExpr 0x55d68c78d3e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55d68c78d378 <col:24> '<bound member function type>' ->vformat 0x55d68c78a470
|                 | `-CXXThisExpr 0x55d68c78d368 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d68c78d418 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d68c78d3a8 <col:32> 'const char *' lvalue ParmVar 0x55d68c7890f0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d68c78d430 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d68c78d3c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d68c789168 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d68c789530 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55d68c789358 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d68c7893d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d68c789448 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55d68c78d878 <col:23, line:254:5>
|   `-ReturnStmt 0x55d68c78d868 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55d68c78d850 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55d68c78d7f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55d68c78d7c0 <col:9> '<bound member function type>' ->xmessage 0x55d68c788fb0
|         | `-CXXThisExpr 0x55d68c78d7b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55d68c78d838 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55d68c78d820 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55d68c78d770 <col:18, col:65> 'String' (CXXTemporary 0x55d68c78d770)
|         |     `-CallExpr 0x55d68c78d708 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55d68c78d6f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55d68c78d5d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55d68c78afa8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55d68c78d5f8 <col:31> 'const String' lvalue ParmVar 0x55d68c7893d0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55d68c78d750 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55d68c78d738 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55d68c78d6d0 <col:37, col:64> 'String' (CXXTemporary 0x55d68c78d6d0)
|         |             `-CallExpr 0x55d68c78d6a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55d68c78d688 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55d68c78d618 <col:37> 'String (const String &)' lvalue CXXMethod 0x55d68c78b5f8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55d68c78d638 <col:56> 'const String' lvalue ParmVar 0x55d68c789358 'landmark' 'const String &'
|         `-DeclRefExpr 0x55d68c78d790 <col:68> 'const String' lvalue ParmVar 0x55d68c789448 'str' 'const String &'
|-CXXMethodDecl 0x55d68c7898b0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55d68c7895f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55d68c789670 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55d68c7896f0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55d68c789768 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d68c78db30 <col:34, line:267:5>
|   `-ReturnStmt 0x55d68c78db20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55d68c78db08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55d68c78daa0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55d68c78da70 <col:9> '<bound member function type>' ->xmessage 0x55d68c789530
|         | `-CXXThisExpr 0x55d68c78da60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55d68c78d918 <col:18> 'const String' lvalue ParmVar 0x55d68c7895f8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55d68c78d938 <col:28> 'const String' lvalue ParmVar 0x55d68c789670 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55d68c78daf0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55d68c78dad8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55d68c78da40 <col:34, col:50> 'String' (CXXTemporary 0x55d68c78da40)
|               `-CXXMemberCallExpr 0x55d68c78d9d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55d68c78d968 <col:34> '<bound member function type>' ->vformat 0x55d68c78a470
|                 | `-CXXThisExpr 0x55d68c78d958 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55d68c78da08 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55d68c78d998 <col:42> 'const char *' lvalue ParmVar 0x55d68c7896f0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55d68c78da20 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55d68c78d9b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d68c789768 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d68c7899c0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55d68c78dbb0 <col:25, line:288:5>
|   `-ReturnStmt 0x55d68c78dba0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55d68c78db88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55d68c78db58 <col:9> 'const int' lvalue ->_nerrors 0x55d68c78c778
|         `-CXXThisExpr 0x55d68c78db48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d68c789bd0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55d68c789a78 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55d68c789af8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55d68c789eb8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d68c789c98 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55d68c789d18 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55d68c789d90 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d68c78a050 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55d68c789f88 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55d68c78a298 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55d68c78a110 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55d68c78a188 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55d68c78de10 <col:58, line:357:5>
|   `-ReturnStmt 0x55d68c78de00 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55d68c78dde8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55d68c78ddb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55d68c78dda0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55d68c78dd80 <col:9, col:29> 'String' (CXXTemporary 0x55d68c78dd80)
|             `-CallExpr 0x55d68c78dd10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55d68c78dcf8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d68c78dc78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55d68c789eb8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55d68c78dc18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55d68c78dd48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55d68c78dc38 <col:21> 'const char *' lvalue ParmVar 0x55d68c78a110 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55d68c78dd60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55d68c78dc58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55d68c78a188 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d68c78a470 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55d68c78a360 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55d68c78a3d8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55d68c78a5c8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55d68c78a538 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55d68c78a710 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55d68c78a680 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55d68c78a9b0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55d68c78a7c8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55d68c78a848 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55d68c78a8c0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55d68c78ab10 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55d68c78aa80 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55d68c78df28 <col:37, line:441:5>
|   `-IfStmt 0x55d68c78df10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55d68c78de98 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55d68c78de68 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55d68c78de28 <col:6> 'int' lvalue ParmVar 0x55d68c78aa80 'level' 'int'
|     | `-ImplicitCastExpr 0x55d68c78de80 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55d68c78de48 <col:15> 'ErrorHandler::Level' EnumConstant 0x55d68c786b90 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55d68c78def8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55d68c78dec8 <col:8> 'int' lvalue ->_nerrors 0x55d68c78c778
|         `-CXXThisExpr 0x55d68c78deb8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55d68c78abd8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55d68c78dfc0 <col:26, line:448:5>
|   `-BinaryOperator 0x55d68c78dfa0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55d68c78df50 <col:2> 'int' lvalue ->_nerrors 0x55d68c78c778
|     | `-CXXThisExpr 0x55d68c78df40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55d68c78df80 <col:13> 'int' 0
|-CXXMethodDecl 0x55d68c78ada0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55d68c78ac90 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55d68c78ad08 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55d68c78afa8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55d68c78ae60 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55d68c78aed8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55d68c78b258 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55d68c78b068 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55d68c78b0e8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55d68c78b168 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55d68c78b310 <col:59> 0 0
|-CXXMethodDecl 0x55d68c78b4a8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55d68c78b388 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55d68c78b408 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55d68c78e630 <col:70, line:534:5>
|   |-DeclStmt 0x55d68c78e130 <line:528:2, col:20>
|   | |-VarDecl 0x55d68c78dfe8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55d68c78e050 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55d68c78e088 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55d68c78e0f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55d68c78e200 <line:529:2, col:23>
|   | `-VarDecl 0x55d68c78e160 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55d68c78e1e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55d68c78e1c8 <col:18> 'const char *' lvalue ParmVar 0x55d68c78b388 'begin' 'const char *'
|   |-DoStmt 0x55d68c78e5c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55d68c78e4f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55d68c78e4e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55d68c78e4c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55d68c78e218 <col:6> 'const char *' lvalue Var 0x55d68c78e160 'x' 'const char *'
|   | |     `-CallExpr 0x55d68c78e410 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55d68c78e3f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55d68c78e3b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55d68c78cc60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55d68c78e478 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55d68c78e460 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55d68c78e2d0 <col:20, col:27> 'String' (CXXTemporary 0x55d68c78e2d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55d68c78e298 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55d68c78e490 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d68c78e2f0 <col:30> 'const char *' lvalue Var 0x55d68c78e160 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55d68c78e4a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55d68c78e310 <col:33> 'const char *' lvalue ParmVar 0x55d68c78b408 'end' 'const char *'
|   | |       |-UnaryOperator 0x55d68c78e350 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d68c78e330 <col:39> 'String' lvalue Var 0x55d68c78dfe8 'name' 'String'
|   | |       |-UnaryOperator 0x55d68c78e388 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55d68c78e368 <col:46> 'String' lvalue Var 0x55d68c78e088 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55d68c78e3a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55d68c78e5b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55d68c78e598 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55d68c78e578 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55d68c78e548 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|   |         `-ImplicitCastExpr 0x55d68c78e530 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55d68c78e510 <col:11> 'String' lvalue Var 0x55d68c78dfe8 'name' 'String'
|   `-ReturnStmt 0x55d68c78e620 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55d68c78e608 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c78e5e8 <col:9> 'const char *' lvalue Var 0x55d68c78e160 'x' 'const char *'
|-CXXMethodDecl 0x55d68c78b5f8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55d68c78b568 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55d68c78ec38 <col:55, line:550:5>
|   `-IfStmt 0x55d68c78ec10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55d68c78e870 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55d68c78e858 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d68c78e840 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d68c78e820 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d68c78e7f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|     | |       `-DeclRefExpr 0x55d68c78e690 <col:6> 'const String' lvalue ParmVar 0x55d68c78b568 'x' 'const String &'
|     | `-BinaryOperator 0x55d68c78e7d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55d68c78e7a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55d68c78e750 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55d68c78e738 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55d68c78e6f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55d68c4751b0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55d68c78e6b0 <col:11> 'const String' lvalue ParmVar 0x55d68c78b568 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55d68c78e6d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55d68c78e7b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55d68c78e788 <col:19> 'char' 123
|     |-ReturnStmt 0x55d68c78e8e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55d68c78e8b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55d68c78e890 <col:13> 'const String' lvalue ParmVar 0x55d68c78b568 'x' 'const String &'
|     `-IfStmt 0x55d68c78ebe8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55d68c78e978 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d68c78e960 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d68c78e940 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d68c78e910 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|       |       `-DeclRefExpr 0x55d68c78e8f0 <col:11> 'const String' lvalue ParmVar 0x55d68c78b568 'x' 'const String &'
|       |-ReturnStmt 0x55d68c78eb00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55d68c78eae8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55d68c78eab8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55d68c78eaa0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55d68c78ea80 <col:13, col:29> 'String' (CXXTemporary 0x55d68c78ea80)
|       |         `-CallExpr 0x55d68c78ea30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55d68c78ea18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55d68c78e990 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55d68c78ada0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55d68c78ea60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55d68c78e9b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55d68c78e9d0 <col:28> 'const String' lvalue ParmVar 0x55d68c78b568 'x' 'const String &'
|       `-ReturnStmt 0x55d68c78ebd8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55d68c78ebc0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55d68c78eb90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55d68c78eb78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55d68c78eb58 <col:13, col:20> 'String' (CXXTemporary 0x55d68c78eb58)
|                 `-CXXTemporaryObjectExpr 0x55d68c78eb20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55d68c78b7c0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55d68c78b6b0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55d68c78b728 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c78cf08 <col:71> 'bool' false
|-CXXRecordDecl 0x55d68c78b870 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55d68c78bb68 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55d68c78bb00 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55d68c78baa0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55d68c78ba60 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55d68c458210 'String'
|       | `-CXXRecord 0x55d68c458180 'String'
|       |-BuiltinType 0x55d68c12a580 'int'
|       `-DecayedType 0x55d68c709550 '__va_list_tag *' sugar
|         |-TypedefType 0x55d68c709520 'va_list' sugar
|         | |-Typedef 0x55d68c34a2d0 'va_list'
|         | `-TypedefType 0x55d68c34a280 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55d68c281ea8 '__gnuc_va_list'
|         |   `-TypedefType 0x55d68c281e10 '__builtin_va_list' sugar
|         |     |-Typedef 0x55d68c16bd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55d68c16bce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55d68c12b2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55d68c12b238 '__va_list_tag'
|         `-PointerType 0x55d68c34fb70 '__va_list_tag *'
|           `-RecordType 0x55d68c12b2d0 '__va_list_tag'
|             `-CXXRecord 0x55d68c12b238 '__va_list_tag'
|-EnumDecl 0x55d68c78bbc0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55d68c78bcc0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c220 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78bca0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55d68c78bc80 <col:16> 'int' 1
| |-EnumConstantDecl 0x55d68c78bd50 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c238 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78bd30 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55d68c78bd10 <col:21> 'int' 2
| |-EnumConstantDecl 0x55d68c78bde0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c250 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78bdc0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55d68c78bda0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55d68c78be70 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c268 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78be50 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55d68c78be30 <col:17> 'int' 8
| |-EnumConstantDecl 0x55d68c78bf00 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c280 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78bee0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55d68c78bec0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55d68c78bf90 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c298 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78bf70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55d68c78bf50 <col:19> 'int' 32
| |-EnumConstantDecl 0x55d68c78c020 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c2b0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78c000 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55d68c78bfe0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55d68c78c0b0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c2c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78c090 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55d68c78c070 <col:14> 'int' 128
| |-EnumConstantDecl 0x55d68c78c140 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55d68c78c2e0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c78c120 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55d68c78c100 <col:16> 'int' 256
| `-EnumConstantDecl 0x55d68c78c1d0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55d68c78c2f8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c78c1b0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55d68c78c190 <col:12> 'int' 1024
|-CXXMethodDecl 0x55d68c78c508 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55d68c78c320 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55d68c78c3c0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55d68c78c690 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55d68c78c5c8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55d68c78c738 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55d68c78c778 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55d68c78c7d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55d68c78c850 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55d68c78cc60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55d68c78c8c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55d68c78c948 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55d68c78c9c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55d68c78ca40 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55d68c78cab8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55d68c78cb30 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55d68c78cd88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55d68c78cd88
| `-ParmVarDecl 0x55d68c78ce98 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55d68c78ef98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55d68c78ef98
  `-ParmVarDecl 0x55d68c78f0a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c708598 prev 0x55d68c653468 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c708690 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55d68c708720 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55d68c708858 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55d68c708758 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d68c709c80 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d68c709c60 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c7097f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d68c709d10 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c709cd0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55d68c708758 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d68c709860 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d68c709d90 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d68c709d50 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c7098c0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d68c709dd0 <col:54> 'bool' false
| `-CompoundStmt 0x55d68c709ed8 <col:61, line:38:5>
|   `-BinaryOperator 0x55d68c709eb8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55d68c709e50 <col:9> 'const Element *' lvalue ->_context 0x55d68c709798
|     | `-CXXThisExpr 0x55d68c709e40 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55d68c709ea0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55d68c709e80 <col:20> 'int' 0
|-CXXConstructorDecl 0x55d68c708a68 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c708918 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55d68c708990 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55d68c709cb8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55d68c709c98 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c709798 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55d68c709f30 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c709ef0 <col:20> 'const Element *' lvalue ParmVar 0x55d68c708918 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55d68c7097f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55d68c709fb0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c709f70 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55d68c708990 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55d68c709860 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55d68c70a030 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55d68c709ff0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c7098c0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55d68c70a070 <col:73> 'bool' false
| `-CompoundStmt 0x55d68c70a0e8 <col:80, line:46:5>
|-CXXMethodDecl 0x55d68c708b98 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55d68c70a160 <col:36, line:51:5>
|   `-ReturnStmt 0x55d68c70a150 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55d68c70a138 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55d68c70a108 <col:16> 'const Element *const' lvalue ->_context 0x55d68c709798
|         `-CXXThisExpr 0x55d68c70a0f8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d68c708c88 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55d68c70a1e0 <col:32, line:57:5>
|   `-ReturnStmt 0x55d68c70a1d0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55d68c70a1b8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55d68c70a188 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55d68c7097f8
|         `-CXXThisExpr 0x55d68c70a178 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55d68c708d48 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55d68c708ed0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d68c708e00 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55d68c709020 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d68c708f90 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d68c709170 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55d68c7090e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55d68c709378 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55d68c709228 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55d68c7092a0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55d68c7096a8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55d68c709438 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55d68c7094b8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55d68c709580 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55d68c709760 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55d68c709798 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55d68c7097f8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55d68c709860 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55d68c7098c0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55d68c709910 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d68c709910
| `-ParmVarDecl 0x55d68c709a28 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55d68c709ac8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55d68c709ac8
| `-ParmVarDecl 0x55d68c709bd8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55d68c7d22d0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d68c731cd0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55d68c731ea8 prev 0x55d68c731cd0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55d68c731f38 <col:46, col:52> col:46 public
|-TypedefDecl 0x55d68c731f60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c733b30 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55d68c733ae0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55d68c732410 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55d68c732310 'type'
|     `-TemplateSpecializationType 0x55d68c7322a0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55d68c732180 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55d68c732160 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55d68c732140 <col:24> 'unsigned long' 4
|       `-RecordType 0x55d68c732280 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55d68c7321a0 'char_array'
|-TypedefDecl 0x55d68c733be8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55d68c733bb0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55d68c733b90 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55d68c733b30 'type'
|     `-ElaboratedType 0x55d68c733ae0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55d68c732410 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55d68c732310 'type'
|         `-TemplateSpecializationType 0x55d68c7322a0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55d68c732180 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55d68c732160 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55d68c732140 <col:24> 'unsigned long' 4
|           `-RecordType 0x55d68c732280 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55d68c7321a0 'char_array'
|-CXXMethodDecl 0x55d68c733d68 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55d68c733c78 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55d68c733e58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55d68c733f38 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55d68c734208 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d68c734110 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55d68c734448 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d68c7342c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d68c734338 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d68c734618 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d68c734508 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d68c734580 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d68c734778 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d68c734848 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55d68c734a98 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d68c734908 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d68c734980 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d68c734cf8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55d68c734b68 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55d68c734be0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d68c734eb8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d68c734dc8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d68c735078 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55d68c734f80 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d68c735130 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d68c7351e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d68c735418 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55d68c735290 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55d68c735308 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55d68c7356b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55d68c7355c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55d68c735780 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55d68c7357d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55d68c735820 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d68c7306d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55d68c7308e8 prev 0x55d68c7306d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55d68c731c40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55d68c731bf0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55d68c731bd0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55d68c731a80 'type'
|     `-SubstTemplateTypeParmType 0x55d68c7318a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55d68c3f2060 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c3f2008 'T'
|       `-RecordType 0x55d68c7313f0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55d68c731308 'sized_array_memory'
|-FieldDecl 0x55d68c735870 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55d68c7358c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55d68c7358f8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|   |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55d68c429cf8 'T'
|   `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c735988 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55d68c735950 'int &'
|   `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|     |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d68c429cf8 'T'
|     `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73bea8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55d68c73be70 'const int &'
|   `-QualType 0x55d68c730981 'const int' const
|     `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73bf38 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55d68c73bf00 'int *'
|   `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|     |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d68c429cf8 'T'
|     `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73bfc8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55d68c73bf90 'const int *'
|   `-QualType 0x55d68c730981 'const int' const
|     `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73cbb0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55d68c73cb60 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55d68c73cb40 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55d68c73cad0 'type'
|     `-SubstTemplateTypeParmType 0x55d68c73c890 'int' sugar
|       |-TemplateTypeParmType 0x55d68c3fce60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c3fce10 'T'
|       `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73cc18 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55d68c73be70 'const int &'
|   `-QualType 0x55d68c730981 'const int' const
|     `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73cc70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73ccd8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55d68c73bf00 'int *'
|   `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|     |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55d68c429cf8 'T'
|     `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c73cd40 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55d68c73bf90 'const int *'
|   `-QualType 0x55d68c730981 'const int' const
|     `-SubstTemplateTypeParmType 0x55d68c730980 'int' sugar
|       |-TemplateTypeParmType 0x55d68c429d50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55d68c429cf8 'T'
|       `-BuiltinType 0x55d68c12a580 'int'
|-EnumDecl 0x55d68c73cd98 <line:134:5> col:5
| `-EnumConstantDecl 0x55d68c73ce90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55d68c73ce70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55d68c42b3d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55d68c42b3b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55d68c42b390 <col:40> 'int' 1
|-CXXConstructorDecl 0x55d68c73cf18 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55d68c73d168 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c73cfd0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d68c73d070 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55d68c73d428 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55d68c73d310 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55d68c73d6e8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55d68c73d5d0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d68c73da30 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55d68c73d910 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55d68c73dd40 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55d68c73dc20 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55d68c73e030 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c73de78 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d68c73def0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d68c73e158 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d68c73e238 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c73e290 <col:30> Inherited
|-CXXMethodDecl 0x55d68c73e2d8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55d68c73e388 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c73e3e0 <col:30> Inherited
|-CXXMethodDecl 0x55d68c73e4a8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d68c73e558 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c73e5b0 <col:30> Inherited
|-CXXMethodDecl 0x55d68c73e5f8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d68c73e6a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c73e700 <col:30> Inherited
|-CXXMethodDecl 0x55d68c73e748 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d68c73e7f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c73e850 <col:30> Inherited
|-CXXMethodDecl 0x55d68c73e898 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55d68c73e948 <col:20> Inherited
| `-OptimizeNoneAttr 0x55d68c73e9a0 <col:30> Inherited
|-CXXMethodDecl 0x55d68c73e9c8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d68c73ea78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55d68c73eb28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d68c73ece8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c73ebd8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55d68c73ec50 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d68c73ee38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55d68c73eda8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c73efe8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55d68c73eef0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d68c73f0a0 <col:20>
| `-OptimizeNoneAttr 0x55d68c73f0f8 <col:30>
|-CXXMethodDecl 0x55d68c73f218 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55d68c73f120 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55d68c73f2d0 <col:20>
| `-OptimizeNoneAttr 0x55d68c73f328 <col:30>
|-CXXMethodDecl 0x55d68c73f3e0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d68c73f350 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c73f528 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d68c73f498 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c73f658 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55d68c73f788 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55d68c73f858 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55d68c73f928 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55d68c73fa68 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55d68c73f9d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c73fbb0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55d68c73fb20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55d68c73fcf8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55d68c73fc68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d68c73fdb0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55d68c73feb0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55d68c73fe20 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55d68c73ff68 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55d68c740028 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55d68c740128 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55d68c7402a8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d68c7401e8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55d68c740a68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55d68c740360 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55d68c7409c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55d68c7408c8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55d68c740b48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55d68c740c98 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55d68c740c08 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d68c740d50 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55d68c740f98 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55d68c740e10 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d68c740e88 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55d68c741158 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55d68c741068 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d68c7413a8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55d68c741220 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55d68c741298 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55d68c741468 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55d68c7416c8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55d68c7415d0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55d68c741798 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c72e848 prev 0x55d68c70f0f8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d68c72e940 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55d68c72ea30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55d68c754190 <col:16, line:828:9>
|-CXXDestructorDecl 0x55d68c72eb20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55d68c7541a0 <col:25, line:830:9>
|-CXXMethodDecl 0x55d68c72ec20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55d68c72ecd0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55d68c72ed78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d68c72ed78
| `-ParmVarDecl 0x55d68c72ee88 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55d68c72f648 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d68c72f648
  `-ParmVarDecl 0x55d68c72f758 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c70ef08 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55d68c70f068 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55d68c70f0f8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55d68c70f1b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55d68c70f2b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55d68c70f1e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d68c742d58 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d68c742d38 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d68c70fe18 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c70f450 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55d68c70f4c8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d68c742d90 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d68c742d70 <col:59> 'int' 0
|-CXXConstructorDecl 0x55d68c70fff0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c70fee0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55d68c70ff58 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d68c742dc8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d68c742da8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55d68c7103a8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55d68c710190 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55d68c710208 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55d68c710280 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55d68c742e00 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55d68c742de0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55d68c710568 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55d68c7104a8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55d68c710660 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55d68c710848 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55d68c710750 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55d68c710938 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55d68c7431b0 <col:24, line:291:5>
|   `-ReturnStmt 0x55d68c7431a0 <line:290:9, col:79>
|     `-BinaryOperator 0x55d68c743180 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55d68c743058 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55d68c742fb0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55d68c742f90 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55d68c742e88 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55d68c742e70 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55d68c742e58 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55d68c742e28 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55d68c730670
|       | |   |       `-CXXThisExpr 0x55d68c742e18 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55d68c742f78 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55d68c742f60 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55d68c742f28 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55d68c742ef8 <col:28, col:35> '<bound member function type>' ->size 0x55d68c6fac18
|       | |           `-ImplicitCastExpr 0x55d68c742f48 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55d68c742ee0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55d68c742eb0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55d68c730670
|       | |                 `-CXXThisExpr 0x55d68c742ea0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55d68c743040 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55d68c743028 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55d68c743010 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55d68c742fe0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55d68c7418e0
|       |         `-CXXThisExpr 0x55d68c742fd0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55d68c743160 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55d68c743148 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d68c743130 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d68c7430f0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d68c7430d8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d68c743088 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d68c741990
|         |     |   `-CXXThisExpr 0x55d68c743078 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d68c7430b8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55d68c743110 <col:79> 'int' 0
|-CXXMethodDecl 0x55d68c7109f8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55d68c743388 <col:32, line:296:5>
|   `-ReturnStmt 0x55d68c743378 <line:295:9, col:49>
|     `-BinaryOperator 0x55d68c743358 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55d68c743238 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55d68c743220 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55d68c743208 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55d68c7431d8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55d68c7418e0
|       |       `-CXXThisExpr 0x55d68c7431c8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55d68c743338 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55d68c743320 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55d68c743308 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55d68c7432c8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55d68c7432b0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55d68c743260 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55d68c741990
|         |     |   `-CXXThisExpr 0x55d68c743250 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55d68c743290 <col:43> 'int' 0
|         `-IntegerLiteral 0x55d68c7432e8 <col:49> 'int' 0
|-CXXMethodDecl 0x55d68c710ae8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55d68c743598 <col:19, line:306:5>
|   |-IfStmt 0x55d68c7434b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55d68c7433f8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55d68c7433e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55d68c7433b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d68c730670
|   | |     `-CXXThisExpr 0x55d68c7433a0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55d68c743498 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55d68c743468 <col:13, col:20> '<bound member function type>' ->clear 0x55d68c6fd618
|   |     `-ImplicitCastExpr 0x55d68c743450 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55d68c743420 <col:13> 'Vector<String> *' lvalue ->_conf 0x55d68c730670
|   |         `-CXXThisExpr 0x55d68c743410 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55d68c743540 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55d68c743510 <col:9, col:16> '<bound member function type>' .clear 0x55d68c741468
|   |   `-MemberExpr 0x55d68c7434e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55d68c741880
|   |     `-CXXThisExpr 0x55d68c7434d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55d68c743588 <line:305:9, col:17>
|     `-UnaryOperator 0x55d68c743570 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c743560 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d68c710d68 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55d68c710c70 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55d68c710ee8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55d68c710e20 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55d68c711268 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55d68c710f90 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55d68c7111c8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55d68c711038 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55d68c7110b0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55d68c7438b8 <col:67, line:327:5>
|     |-WhileStmt 0x55d68c743868 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55d68c743680 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55d68c743600 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d68c64b938 0x55d68c494f18 0x55d68c494bf0 0x55d68c4853c0 0x55d68c485070 0x55d68c484960 0x55d68c4572d0 0x55d68c3e47a0
|     | | |-DeclRefExpr 0x55d68c7435c0 <col:16> 'Iter' lvalue ParmVar 0x55d68c711038 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55d68c7435e0 <col:25> 'Iter' lvalue ParmVar 0x55d68c7110b0 'end' 'Iter'
|     | `-CompoundStmt 0x55d68c743848 <col:30, line:325:9>
|     |   |-CallExpr 0x55d68c7437e8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55d68c7436c8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55d68c7437b8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55d68c743748 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|     |   |   `-DeclRefExpr 0x55d68c743728 <col:24> 'Iter' lvalue ParmVar 0x55d68c711038 'begin' 'Iter'
|     |   `-UnaryOperator 0x55d68c743830 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55d68c743810 <col:15> 'Iter' lvalue ParmVar 0x55d68c711038 'begin' 'Iter'
|     `-ReturnStmt 0x55d68c7438a8 <line:326:9, col:17>
|       `-UnaryOperator 0x55d68c743890 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c743880 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d68c711370 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55d68c7112e0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55d68c7114b8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55d68c711428 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55d68c711580 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55d68c743998 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55d68c743938 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55d68c7438e8 <col:9> '<bound member function type>' ->reset_from 0x55d68c741d08
|   | | `-CXXThisExpr 0x55d68c7438d8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55d68c743918 <col:20> 'int' 0
|   `-ReturnStmt 0x55d68c743988 <line:352:9, col:17>
|     `-UnaryOperator 0x55d68c743970 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c743960 <col:17> 'Args *' this
|-VarDecl 0x55d68c711638 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d68c7116a0 <col:38> 'int' 1
|-VarDecl 0x55d68c711730 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d68c711798 <col:39> 'int' 2
|-VarDecl 0x55d68c711828 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d68c711890 <col:39> 'int' 4
|-VarDecl 0x55d68c711920 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55d68c711988 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55d68c711d08 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55d68c711a00 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55d68c711c68 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55d68c711ab0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d68c711b58 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55d68c743af0 <col:43, line:371:5>
| |   `-ReturnStmt 0x55d68c743ae0 <line:370:9, col:34>
| |     `-CallExpr 0x55d68c743aa8 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d68c7439c8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d68c743a48 <col:21> 'const char *' lvalue ParmVar 0x55d68c711ab0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55d68c743a68 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55d68c743a88 <col:33> 'T' lvalue ParmVar 0x55d68c711b58 'x' 'T &'
| `-CXXMethodDecl 0x55d68c7d2778 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55d68c7d2590 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55d68c7d2668 <col:37, col:40> col:40 x 'unsigned int &'
|-FunctionTemplateDecl 0x55d68c712038 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55d68c711d70 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c711f98 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d68c711e20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c711ec8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d68c743c40 <col:45, line:375:5>
|     `-ReturnStmt 0x55d68c743c30 <line:374:9, col:42>
|       `-CallExpr 0x55d68c743bf8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c743b18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c743b98 <col:21> 'const char *' lvalue ParmVar 0x55d68c711e20 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c743bb8 <col:30> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d68c743bd8 <col:41> 'T' lvalue ParmVar 0x55d68c711ec8 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c712368 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55d68c7120a0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c7122c8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d68c712150 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c7121f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55d68c743d90 <col:45, line:379:5>
|     `-ReturnStmt 0x55d68c743d80 <line:378:9, col:43>
|       `-CallExpr 0x55d68c743d48 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c743c68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c743ce8 <col:21> 'const char *' lvalue ParmVar 0x55d68c712150 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c743d08 <col:30> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int'
|         `-DeclRefExpr 0x55d68c743d28 <col:42> 'T' lvalue ParmVar 0x55d68c7121f8 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c712698 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55d68c7123d0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c7125f8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55d68c712480 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c712528 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55d68c745508 <col:46, line:383:5>
|     `-ReturnStmt 0x55d68c7454f8 <line:382:9, col:55>
|       `-CallExpr 0x55d68c7454c0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c743db8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c743e38 <col:21> 'const char *' lvalue ParmVar 0x55d68c712480 'keyword' 'const char *'
|         |-BinaryOperator 0x55d68c745480 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d68c745430 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d68c745410 <col:30> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d68c745468 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d68c745448 <col:42> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55d68c7454a0 <col:54> 'T' lvalue ParmVar 0x55d68c712528 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c712a98 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55d68c712700 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c7129f8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55d68c7127b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c712830 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c7128d8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55d68c745648 <col:54, line:388:5>
|     |-CallExpr 0x55d68c7455d0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c745520 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d68c745560 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d68c745570 <col:30> 'const char *' lvalue ParmVar 0x55d68c7127b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d68c745590 <col:39> 'int' lvalue ParmVar 0x55d68c712830 'flags' 'int'
|     | `-DeclRefExpr 0x55d68c7455b0 <col:46> 'T' lvalue ParmVar 0x55d68c7128d8 'x' 'T &'
|     `-ReturnStmt 0x55d68c745638 <line:387:9, col:17>
|       `-UnaryOperator 0x55d68c745620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c745610 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c712f48 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55d68c712b08 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d68c712b88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d68c712ea8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d68c712c48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c712ce8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55d68c712d88 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d68c7457b8 <col:74, line:403:5>
|     `-ReturnStmt 0x55d68c7457a8 <line:402:9, col:56>
|       `-CallExpr 0x55d68c745768 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c745678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7456e8 <col:28> 'const char *' lvalue ParmVar 0x55d68c712c48 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c745708 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d68c745728 <col:40> 'T' lvalue ParmVar 0x55d68c712ce8 'x' 'T &'
|         `-DeclRefExpr 0x55d68c745748 <col:43> 'const V' lvalue ParmVar 0x55d68c712d88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d68c7133b8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d68c712fb8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d68c713038 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d68c713318 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55d68c7130f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c713198 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55d68c713238 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d68c745920 <col:76, line:407:5>
|     `-ReturnStmt 0x55d68c745910 <line:406:9, col:65>
|       `-CallExpr 0x55d68c7458d0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c7457e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c745850 <col:28> 'const char *' lvalue ParmVar 0x55d68c7130f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c745870 <col:37> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int'
|         |-DeclRefExpr 0x55d68c745890 <col:49> 'T' lvalue ParmVar 0x55d68c713198 'x' 'T &'
|         `-DeclRefExpr 0x55d68c7458b0 <col:52> 'const V' lvalue ParmVar 0x55d68c713238 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d68c713908 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55d68c713428 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d68c7134a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d68c713868 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d68c713568 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c7135e8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c713688 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55d68c713728 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d68c745a88 <col:85, line:412:5>
|     |-CallExpr 0x55d68c745a08 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c745938 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d68c745978 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d68c745988 <col:37> 'const char *' lvalue ParmVar 0x55d68c713568 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d68c7459a8 <col:46> 'int' lvalue ParmVar 0x55d68c7135e8 'flags' 'int'
|     | |-DeclRefExpr 0x55d68c7459c8 <col:53> 'T' lvalue ParmVar 0x55d68c713688 'x' 'T &'
|     | `-DeclRefExpr 0x55d68c7459e8 <col:56> 'const V' lvalue ParmVar 0x55d68c713728 'default_value' 'const V &'
|     `-ReturnStmt 0x55d68c745a78 <line:411:9, col:17>
|       `-UnaryOperator 0x55d68c745a60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c745a50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c713d98 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55d68c713980 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c7139f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55d68c713cf8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55d68c713ab8 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55d68c713b30 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x55d68c713bd8 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x55d68c745c08 <col:53, line:425:5>
| |   `-ReturnStmt 0x55d68c745bf8 <line:424:9, col:42>
| |     `-CallExpr 0x55d68c745bb8 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55d68c745ab8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55d68c745b38 <col:21> 'const char *' lvalue ParmVar 0x55d68c713ab8 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55d68c745b58 <col:30> 'int' 0
| |       |-DeclRefExpr 0x55d68c745b78 <col:33> 'P' lvalue ParmVar 0x55d68c713b30 'parser' 'P'
| |       `-DeclRefExpr 0x55d68c745b98 <col:41> 'T' lvalue ParmVar 0x55d68c713bd8 'x' 'T &'
| `-CXXMethodDecl 0x55d68c7d3238 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55d68c7d2fa8 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55d68c7d3048 <col:37, col:39> col:39 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x55d68c7d3118 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x55d68c7141e8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55d68c713e08 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c713e88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c714148 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c713f48 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c713fc0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c714068 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d68c745d80 <col:55, line:429:5>
|     `-ReturnStmt 0x55d68c745d70 <line:428:9, col:50>
|       `-CallExpr 0x55d68c745d30 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c745c30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c745cb0 <col:21> 'const char *' lvalue ParmVar 0x55d68c713f48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c745cd0 <col:30> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d68c745cf0 <col:41> 'P' lvalue ParmVar 0x55d68c713fc0 'parser' 'P'
|         `-DeclRefExpr 0x55d68c745d10 <col:49> 'T' lvalue ParmVar 0x55d68c714068 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c714638 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55d68c714258 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c7142d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c714598 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c714398 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c714410 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c7144b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55d68c745ef8 <col:55, line:433:5>
|     `-ReturnStmt 0x55d68c745ee8 <line:432:9, col:51>
|       `-CallExpr 0x55d68c745ea8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c745da8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c745e28 <col:21> 'const char *' lvalue ParmVar 0x55d68c714398 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c745e48 <col:30> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int'
|         |-DeclRefExpr 0x55d68c745e68 <col:42> 'P' lvalue ParmVar 0x55d68c714410 'parser' 'P'
|         `-DeclRefExpr 0x55d68c745e88 <col:50> 'T' lvalue ParmVar 0x55d68c7144b8 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c714a88 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55d68c7146a8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c714728 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c7149e8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c7147e8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c714860 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c714908 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55d68c746120 <col:56, line:437:5>
|     `-ReturnStmt 0x55d68c746110 <line:436:9, col:63>
|       `-CallExpr 0x55d68c7460d0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c745f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c745fa0 <col:21> 'const char *' lvalue ParmVar 0x55d68c7147e8 'keyword' 'const char *'
|         |-BinaryOperator 0x55d68c746070 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d68c746020 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d68c746000 <col:30> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d68c746058 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d68c746038 <col:42> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d68c746090 <col:54> 'P' lvalue ParmVar 0x55d68c714860 'parser' 'P'
|         `-DeclRefExpr 0x55d68c7460b0 <col:62> 'T' lvalue ParmVar 0x55d68c714908 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c714fb8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55d68c714af8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c714b78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c714f18 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d68c714c38 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c714cb8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c714d30 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c714dd8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55d68c746288 <col:64, line:442:5>
|     |-CallExpr 0x55d68c746208 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c746138 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d68c746178 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d68c746188 <col:30> 'const char *' lvalue ParmVar 0x55d68c714c38 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d68c7461a8 <col:39> 'int' lvalue ParmVar 0x55d68c714cb8 'flags' 'int'
|     | |-DeclRefExpr 0x55d68c7461c8 <col:46> 'P' lvalue ParmVar 0x55d68c714d30 'parser' 'P'
|     | `-DeclRefExpr 0x55d68c7461e8 <col:54> 'T' lvalue ParmVar 0x55d68c714dd8 'x' 'T &'
|     `-ReturnStmt 0x55d68c746278 <line:441:9, col:17>
|       `-UnaryOperator 0x55d68c746260 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c746250 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c7155b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55d68c715030 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c7150a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d68c715128 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d68c715518 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d68c7151f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c715268 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c715308 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55d68c7153d8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d68c746420 <col:84, line:458:5>
|     `-ReturnStmt 0x55d68c746410 <line:457:9, col:64>
|       `-CallExpr 0x55d68c7463c8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c7462b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c746328 <col:28> 'const char *' lvalue ParmVar 0x55d68c7151f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c746348 <col:37> 'int' 0
|         |-DeclRefExpr 0x55d68c746368 <col:40> 'P' lvalue ParmVar 0x55d68c715268 'parser' 'P'
|         |-DeclRefExpr 0x55d68c746388 <col:48> 'T' lvalue ParmVar 0x55d68c715308 'x' 'T &'
|         `-DeclRefExpr 0x55d68c7463a8 <col:51> 'const V' lvalue ParmVar 0x55d68c7153d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d68c715b38 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55d68c715630 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c7156a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d68c715728 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d68c715a98 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55d68c7157f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c715868 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c715908 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55d68c7159a8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d68c7465b0 <col:86, line:462:5>
|     `-ReturnStmt 0x55d68c7465a0 <line:461:9, col:73>
|       `-CallExpr 0x55d68c746558 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c746448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7464b8 <col:28> 'const char *' lvalue ParmVar 0x55d68c7157f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c7464d8 <col:37> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int'
|         |-DeclRefExpr 0x55d68c7464f8 <col:49> 'P' lvalue ParmVar 0x55d68c715868 'parser' 'P'
|         |-DeclRefExpr 0x55d68c746518 <col:57> 'T' lvalue ParmVar 0x55d68c715908 'x' 'T &'
|         `-DeclRefExpr 0x55d68c746538 <col:60> 'const V' lvalue ParmVar 0x55d68c7159a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55d68c716198 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55d68c715bb0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c715c28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55d68c715ca8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d68c7160f8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d68c715d70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c715df0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c715e68 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c715f08 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55d68c715fa8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55d68c746740 <col:95, line:467:5>
|     |-CallExpr 0x55d68c7466b8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c7465c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55d68c746608 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55d68c746618 <col:37> 'const char *' lvalue ParmVar 0x55d68c715d70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d68c746638 <col:46> 'int' lvalue ParmVar 0x55d68c715df0 'flags' 'int'
|     | |-DeclRefExpr 0x55d68c746658 <col:53> 'P' lvalue ParmVar 0x55d68c715e68 'parser' 'P'
|     | |-DeclRefExpr 0x55d68c746678 <col:61> 'T' lvalue ParmVar 0x55d68c715f08 'x' 'T &'
|     | `-DeclRefExpr 0x55d68c746698 <col:64> 'const V' lvalue ParmVar 0x55d68c715fa8 'default_value' 'const V &'
|     `-ReturnStmt 0x55d68c746730 <line:466:9, col:17>
|       `-UnaryOperator 0x55d68c746718 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c746708 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c716778 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55d68c716218 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c716298 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d68c716318 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d68c7166d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d68c7163e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c716458 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c7164f8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d68c716598 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d68c7468e8 <col:63, line:481:5>
|     `-ReturnStmt 0x55d68c7468d8 <line:480:9, col:47>
|       `-CallExpr 0x55d68c746890 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c746770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7467f0 <col:21> 'const char *' lvalue ParmVar 0x55d68c7163e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c746810 <col:30> 'int' 0
|         |-DeclRefExpr 0x55d68c746830 <col:33> 'P' lvalue ParmVar 0x55d68c716458 'parser' 'P'
|         |-DeclRefExpr 0x55d68c746850 <col:41> 'T1' lvalue ParmVar 0x55d68c7164f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d68c746870 <col:45> 'T2' lvalue ParmVar 0x55d68c716598 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d68c716cf8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55d68c7167f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c716868 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d68c7168e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d68c716c58 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d68c7169b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c716a28 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c716ac8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d68c716b68 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d68c746a88 <col:65, line:485:5>
|     `-ReturnStmt 0x55d68c746a78 <line:484:9, col:55>
|       `-CallExpr 0x55d68c746a30 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c746910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c746990 <col:21> 'const char *' lvalue ParmVar 0x55d68c7169b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c7469b0 <col:30> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int'
|         |-DeclRefExpr 0x55d68c7469d0 <col:41> 'P' lvalue ParmVar 0x55d68c716a28 'parser' 'P'
|         |-DeclRefExpr 0x55d68c7469f0 <col:49> 'T1' lvalue ParmVar 0x55d68c716ac8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d68c746a10 <col:53> 'T2' lvalue ParmVar 0x55d68c716b68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d68c717278 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55d68c716d70 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c716de8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d68c716e68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d68c7171d8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d68c716f30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c716fa8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c717048 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d68c7170e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d68c746c28 <col:65, line:489:5>
|     `-ReturnStmt 0x55d68c746c18 <line:488:9, col:56>
|       `-CallExpr 0x55d68c746bd0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c746ab0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c746b30 <col:21> 'const char *' lvalue ParmVar 0x55d68c716f30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c746b50 <col:30> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int'
|         |-DeclRefExpr 0x55d68c746b70 <col:42> 'P' lvalue ParmVar 0x55d68c716fa8 'parser' 'P'
|         |-DeclRefExpr 0x55d68c746b90 <col:50> 'T1' lvalue ParmVar 0x55d68c717048 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d68c746bb0 <col:54> 'T2' lvalue ParmVar 0x55d68c7170e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d68c7177f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55d68c7172f0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c717368 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d68c7173e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d68c717758 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d68c7174b0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c717528 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c7175c8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d68c717668 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d68c746e78 <col:66, line:493:5>
|     `-ReturnStmt 0x55d68c746e68 <line:492:9, col:68>
|       `-CallExpr 0x55d68c746e20 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c746c50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c746cd0 <col:21> 'const char *' lvalue ParmVar 0x55d68c7174b0 'keyword' 'const char *'
|         |-BinaryOperator 0x55d68c746da0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55d68c746d50 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d68c746d30 <col:30> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d68c746d88 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d68c746d68 <col:42> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55d68c746dc0 <col:54> 'P' lvalue ParmVar 0x55d68c717528 'parser' 'P'
|         |-DeclRefExpr 0x55d68c746de0 <col:62> 'T1' lvalue ParmVar 0x55d68c7175c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55d68c746e00 <col:66> 'T2' lvalue ParmVar 0x55d68c717668 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55d68c71cd38 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55d68c717870 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c7178e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d68c717968 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d68c71cc98 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d68c717a30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c717ab0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c717b28 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c717bc8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55d68c717c68 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55d68c747008 <col:74, line:498:5>
|     |-CallExpr 0x55d68c746f80 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c746e90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55d68c746ed0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55d68c746ee0 <col:30> 'const char *' lvalue ParmVar 0x55d68c717a30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d68c746f00 <col:39> 'int' lvalue ParmVar 0x55d68c717ab0 'flags' 'int'
|     | |-DeclRefExpr 0x55d68c746f20 <col:46> 'P' lvalue ParmVar 0x55d68c717b28 'parser' 'P'
|     | |-DeclRefExpr 0x55d68c746f40 <col:54> 'T1' lvalue ParmVar 0x55d68c717bc8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55d68c746f60 <col:58> 'T2' lvalue ParmVar 0x55d68c717c68 'x2' 'T2 &'
|     `-ReturnStmt 0x55d68c746ff8 <line:497:9, col:17>
|       `-UnaryOperator 0x55d68c746fe0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c746fd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c71d098 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55d68c71cdb8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c71cff8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d68c71ce70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71cee8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55d68c747150 <col:52, line:509:5>
|     `-ReturnStmt 0x55d68c747140 <line:508:9, col:44>
|       `-CallExpr 0x55d68c747108 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c747038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7470a8 <col:26> 'const char *' lvalue ParmVar 0x55d68c71ce70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c7470c8 <col:35> 'int' 0
|         `-DeclRefExpr 0x55d68c7470e8 <col:38> 'P' lvalue ParmVar 0x55d68c71cee8 'parser' 'P'
|-FunctionTemplateDecl 0x55d68c71d398 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55d68c71d100 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c71d2f8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d68c71d1b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71d228 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d68c747290 <col:54, line:513:5>
|     `-ReturnStmt 0x55d68c747280 <line:512:9, col:52>
|       `-CallExpr 0x55d68c747248 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c747178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7471e8 <col:26> 'const char *' lvalue ParmVar 0x55d68c71d1b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c747208 <col:35> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int'
|         `-DeclRefExpr 0x55d68c747228 <col:46> 'P' lvalue ParmVar 0x55d68c71d228 'parser' 'P'
|-FunctionTemplateDecl 0x55d68c71d698 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55d68c71d400 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c71d5f8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d68c71d4b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71d528 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55d68c7473d0 <col:54, line:517:5>
|     `-ReturnStmt 0x55d68c7473c0 <line:516:9, col:53>
|       `-CallExpr 0x55d68c747388 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c7472b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c747328 <col:26> 'const char *' lvalue ParmVar 0x55d68c71d4b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c747348 <col:35> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int'
|         `-DeclRefExpr 0x55d68c747368 <col:47> 'P' lvalue ParmVar 0x55d68c71d528 'parser' 'P'
|-FunctionTemplateDecl 0x55d68c71d998 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d68c71d700 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c71d8f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d68c71d7b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71d828 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55d68c7475c0 <col:55, line:521:5>
|     `-ReturnStmt 0x55d68c7475b0 <line:520:9, col:65>
|       `-CallExpr 0x55d68c747578 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c7473f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c747468 <col:26> 'const char *' lvalue ParmVar 0x55d68c71d7b0 'keyword' 'const char *'
|         |-BinaryOperator 0x55d68c747538 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55d68c7474e8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55d68c7474c8 <col:35> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55d68c747520 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55d68c747500 <col:47> 'const int' lvalue Var 0x55d68c711730 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55d68c747558 <col:59> 'P' lvalue ParmVar 0x55d68c71d828 'parser' 'P'
|-FunctionTemplateDecl 0x55d68c71dd68 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55d68c71da00 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c71dcc8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d68c71dab0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71db30 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c71dba8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55d68c747700 <col:63, line:526:5>
|     |-CallExpr 0x55d68c747688 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c7475d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55d68c747618 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55d68c747628 <col:35> 'const char *' lvalue ParmVar 0x55d68c71dab0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55d68c747648 <col:44> 'int' lvalue ParmVar 0x55d68c71db30 'flags' 'int'
|     | `-DeclRefExpr 0x55d68c747668 <col:51> 'P' lvalue ParmVar 0x55d68c71dba8 'parser' 'P'
|     `-ReturnStmt 0x55d68c7476f0 <line:525:9, col:17>
|       `-UnaryOperator 0x55d68c7476d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c7476c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c71e1b8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55d68c71ddd8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c71de58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c71e118 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c71df18 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71df90 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c71e038 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55d68c747858 <col:58, line:541:5>
|     `-ReturnStmt 0x55d68c747848 <line:540:9, col:39>
|       `-CallExpr 0x55d68c747810 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c747730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7477b0 <col:21> 'const char *' lvalue ParmVar 0x55d68c71df18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c7477d0 <col:30> 'P' lvalue ParmVar 0x55d68c71df90 'parser' 'P'
|         `-DeclRefExpr 0x55d68c7477f0 <col:38> 'T' lvalue ParmVar 0x55d68c71e038 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c71e608 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55d68c71e228 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c71e2a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c71e568 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c71e368 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71e3e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c71e488 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d68c747990 <col:60, line:545:5>
|     `-ReturnStmt 0x55d68c747980 <line:544:9, col:41>
|       `-CallExpr 0x55d68c747948 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c747880 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7478e8 <col:23> 'const char *' lvalue ParmVar 0x55d68c71e368 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c747908 <col:32> 'P' lvalue ParmVar 0x55d68c71e3e0 'parser' 'P'
|         `-DeclRefExpr 0x55d68c747928 <col:40> 'T' lvalue ParmVar 0x55d68c71e488 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c71ea58 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55d68c71e678 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c71e6f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c71e9b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c71e7b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71e830 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c71e8d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55d68c747ac8 <col:60, line:549:5>
|     `-ReturnStmt 0x55d68c747ab8 <line:548:9, col:41>
|       `-CallExpr 0x55d68c747a80 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c7479b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c747a20 <col:23> 'const char *' lvalue ParmVar 0x55d68c71e7b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c747a40 <col:32> 'P' lvalue ParmVar 0x55d68c71e830 'parser' 'P'
|         `-DeclRefExpr 0x55d68c747a60 <col:40> 'T' lvalue ParmVar 0x55d68c71e8d8 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c71eea8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55d68c71eac8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c71eb48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c71ee08 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c71ec08 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71ec80 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c71ed28 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55d68c747c00 <col:61, line:553:5>
|     `-ReturnStmt 0x55d68c747bf0 <line:552:9, col:42>
|       `-CallExpr 0x55d68c747bb8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c747af0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c747b58 <col:24> 'const char *' lvalue ParmVar 0x55d68c71ec08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c747b78 <col:33> 'P' lvalue ParmVar 0x55d68c71ec80 'parser' 'P'
|         `-DeclRefExpr 0x55d68c747b98 <col:41> 'T' lvalue ParmVar 0x55d68c71ed28 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c71f388 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55d68c71ef18 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c71ef98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c71f2e8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d68c71f058 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71f0d8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c71f150 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c71f1f8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55d68c747d78 <col:69, line:557:5>
|     `-ReturnStmt 0x55d68c747d68 <line:556:9, col:46>
|       `-CallExpr 0x55d68c747d28 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c747c28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c747ca8 <col:21> 'const char *' lvalue ParmVar 0x55d68c71f058 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c747cc8 <col:30> 'int' lvalue ParmVar 0x55d68c71f0d8 'flags' 'int'
|         |-DeclRefExpr 0x55d68c747ce8 <col:37> 'P' lvalue ParmVar 0x55d68c71f150 'parser' 'P'
|         `-DeclRefExpr 0x55d68c747d08 <col:45> 'T' lvalue ParmVar 0x55d68c71f1f8 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c71f698 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55d68c71f400 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c71f5f8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55d68c71f4b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71f528 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55d68c747eb8 <col:56, line:571:5>
|     `-ReturnStmt 0x55d68c747ea8 <line:570:9, col:48>
|       `-CallExpr 0x55d68c747e70 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c747da0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c747e10 <col:30> 'const char *' lvalue ParmVar 0x55d68c71f4b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c747e30 <col:39> 'int' 0
|         `-DeclRefExpr 0x55d68c747e50 <col:42> 'P' lvalue ParmVar 0x55d68c71f528 'parser' 'P'
|-FunctionTemplateDecl 0x55d68c71fa28 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55d68c71f700 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c71f988 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55d68c71f7b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71f830 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c71f8a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d68c748088 <col:67, line:576:5>
|     |-CallExpr 0x55d68c748010 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c747ed0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d68c747f10 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d68c747f20 <col:39> 'const char *' lvalue ParmVar 0x55d68c71f7b0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d68c747fd0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d68c747f80 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d68c747f40 <col:48> 'int' lvalue ParmVar 0x55d68c71f830 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d68c747fb8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d68c747f98 <col:56> 'const int' lvalue Var 0x55d68c711920 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55d68c747ff0 <col:68> 'P' lvalue ParmVar 0x55d68c71f8a8 'parser' 'P'
|     `-ReturnStmt 0x55d68c748078 <line:575:9, col:17>
|       `-UnaryOperator 0x55d68c748060 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c748050 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c71fe78 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55d68c71fa98 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c71fb18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c71fdd8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55d68c71fbd8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c71fc50 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c71fcf8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55d68c7481f8 <col:62, line:592:5>
|     `-ReturnStmt 0x55d68c7481e8 <line:591:9, col:51>
|       `-CallExpr 0x55d68c7481a8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c7480b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c748128 <col:30> 'const char *' lvalue ParmVar 0x55d68c71fbd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c748148 <col:39> 'int' 0
|         |-DeclRefExpr 0x55d68c748168 <col:42> 'P' lvalue ParmVar 0x55d68c71fc50 'parser' 'P'
|         `-DeclRefExpr 0x55d68c748188 <col:50> 'T' lvalue ParmVar 0x55d68c71fcf8 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c720358 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55d68c71fee8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c71ff68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c7202b8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d68c720028 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c7200a8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c720120 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c7201c8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55d68c7483f0 <col:73, line:597:5>
|     |-CallExpr 0x55d68c748370 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c748210 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55d68c748250 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55d68c748260 <col:39> 'const char *' lvalue ParmVar 0x55d68c720028 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d68c748310 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d68c7482c0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d68c748280 <col:48> 'int' lvalue ParmVar 0x55d68c7200a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d68c7482f8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d68c7482d8 <col:56> 'const int' lvalue Var 0x55d68c711920 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d68c748330 <col:68> 'P' lvalue ParmVar 0x55d68c720120 'parser' 'P'
|     | `-DeclRefExpr 0x55d68c748350 <col:76> 'T' lvalue ParmVar 0x55d68c7201c8 'x' 'T &'
|     `-ReturnStmt 0x55d68c7483e0 <line:596:9, col:17>
|       `-UnaryOperator 0x55d68c7483c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c7483b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c720908 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55d68c7203d0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c720448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c720868 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d68c720508 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c720580 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c720740 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d68c748560 <col:65, line:614:5>
|     `-ReturnStmt 0x55d68c748550 <line:613:9, col:46>
|       `-CallExpr 0x55d68c748510 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c748420 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c748490 <col:25> 'const char *' lvalue ParmVar 0x55d68c720508 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c7484b0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55d68c7484d0 <col:37> 'P' lvalue ParmVar 0x55d68c720580 'parser' 'P'
|         `-DeclRefExpr 0x55d68c7484f0 <col:45> 'Vector<T>' lvalue ParmVar 0x55d68c720740 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d68c720d38 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55d68c720978 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c720c98 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55d68c720a30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c720b80 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d68c748780 <col:55, line:618:5>
|     `-ReturnStmt 0x55d68c748770 <line:617:9, col:55>
|       `-CallExpr 0x55d68c748730 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c748588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c7485f8 <col:25> 'const char *' lvalue ParmVar 0x55d68c720a30 'keyword' 'const char *'
|         |-IntegerLiteral 0x55d68c748618 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55d68c7486f0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d68c748710 <col:54> 'Vector<T>' lvalue ParmVar 0x55d68c720b80 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55d68c721308 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55d68c720da0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c720e18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c721268 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d68c720ed8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c720f58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c720fd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c721120 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d68c748978 <col:76, line:623:5>
|     |-CallExpr 0x55d68c7488f8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55d68c748798 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55d68c7487d8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55d68c7487e8 <col:34> 'const char *' lvalue ParmVar 0x55d68c720ed8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55d68c748898 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55d68c748848 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55d68c748808 <col:43> 'int' lvalue ParmVar 0x55d68c720f58 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55d68c748880 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55d68c748860 <col:51> 'const int' lvalue Var 0x55d68c711920 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55d68c7488b8 <col:63> 'P' lvalue ParmVar 0x55d68c720fd0 'parser' 'P'
|     | `-DeclRefExpr 0x55d68c7488d8 <col:71> 'Vector<T>' lvalue ParmVar 0x55d68c721120 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55d68c748968 <line:622:9, col:17>
|       `-UnaryOperator 0x55d68c748950 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c748940 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c721848 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55d68c721380 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c7213f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c7217a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55d68c7214b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c721538 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c721680 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55d68c748be0 <col:66, line:627:5>
|     `-ReturnStmt 0x55d68c748bd0 <line:626:9, col:59>
|       `-CallExpr 0x55d68c748b90 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55d68c7489a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55d68c748a18 <col:25> 'const char *' lvalue ParmVar 0x55d68c7214b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55d68c748a38 <col:34> 'int' lvalue ParmVar 0x55d68c721538 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55d68c748b50 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55d68c748b70 <col:58> 'Vector<T>' lvalue ParmVar 0x55d68c721680 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55d68c7218d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55d68c748c60 <col:25, line:633:5>
|   `-ReturnStmt 0x55d68c748c50 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55d68c748c38 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d68c748c08 <col:16> 'const bool' lvalue ->_status 0x55d68c7304d8
|         `-CXXThisExpr 0x55d68c748bf8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d68c721a58 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55d68c721990 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55d68c748d48 <col:27, line:639:5>
|   |-BinaryOperator 0x55d68c748cf0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d68c748c78 <col:9> 'bool' lvalue ParmVar 0x55d68c721990 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d68c748cd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c748ca8 <col:13> 'bool' lvalue ->_status 0x55d68c7304d8
|   |     `-CXXThisExpr 0x55d68c748c98 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d68c748d38 <line:638:9, col:17>
|     `-UnaryOperator 0x55d68c748d20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c748d10 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d68c721bd8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d68c721b18 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55d68c748e38 <col:39, line:644:5>
|   |-BinaryOperator 0x55d68c748de0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d68c748d68 <col:9> 'bool' lvalue ParmVar 0x55d68c721b18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d68c748dc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c748d98 <col:13> 'const bool' lvalue ->_status 0x55d68c7304d8
|   |     `-CXXThisExpr 0x55d68c748d88 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d68c748e28 <line:643:9, col:17>
|     `-UnaryOperator 0x55d68c748e10 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c748e00 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d68c721ca0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55d68c748ee0 <col:30, line:651:5>
|   `-ReturnStmt 0x55d68c748ed0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55d68c748eb8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55d68c748e88 <col:16> 'bool' lvalue ->_read_status 0x55d68c7098c0
|         `-ImplicitCastExpr 0x55d68c748e68 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55d68c748e58 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55d68c721de8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55d68c721d58 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55d68c748fe8 <col:32, line:658:5>
|   |-BinaryOperator 0x55d68c748f90 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d68c748ef8 <col:9> 'bool' lvalue ParmVar 0x55d68c721d58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d68c748f78 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c748f48 <col:13> 'bool' lvalue ->_read_status 0x55d68c7098c0
|   |     `-ImplicitCastExpr 0x55d68c748f28 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d68c748f18 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55d68c748fd8 <line:657:9, col:17>
|     `-UnaryOperator 0x55d68c748fc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c748fb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55d68c721f38 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55d68c721ea8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55d68c7490f8 <col:44, line:663:5>
|   |-BinaryOperator 0x55d68c7490a0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55d68c749008 <col:9> 'bool' lvalue ParmVar 0x55d68c721ea8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55d68c749088 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c749058 <col:13> 'bool' lvalue ->_read_status 0x55d68c7098c0
|   |     `-ImplicitCastExpr 0x55d68c749038 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55d68c749028 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55d68c7490e8 <line:662:9, col:17>
|     `-UnaryOperator 0x55d68c7490d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c7490c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55d68c722000 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55d68c7220c8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55d68c722190 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55d68c722258 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55d68c722568 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55d68c7222f8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c7224c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55d68c7223d8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55d68c7494b0 <col:19, line:706:5>
|     `-IfStmt 0x55d68c749488 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55d68c7491f8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55d68c7493b8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55d68c749388 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55d68c749348 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55d68c749250 <col:42> '<bound member function type>' ->simple_slot 0x55d68c7429c0
|       |     | `-CXXThisExpr 0x55d68c749240 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55d68c7492e8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55d68c7492a0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55d68c4999b8
|       |     | `-DeclRefExpr 0x55d68c749280 <col:55> 'T' lvalue ParmVar 0x55d68c7223d8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55d68c749328 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55d68c749478 <line:705:13, col:34>
|         `-CallExpr 0x55d68c749450 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55d68c7493d8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55d68c749430 <col:33> 'T' lvalue ParmVar 0x55d68c7223d8 'x' 'T &'
|-FunctionTemplateDecl 0x55d68c722838 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55d68c7225c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c722798 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55d68c7226a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55d68c749890 <col:31, line:717:5>
|     |-DeclStmt 0x55d68c7495f0 <line:713:9, col:23>
|     | `-VarDecl 0x55d68c7494d8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55d68c7495c8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d68c749550 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d68c7495a8 <col:21> 'T' lvalue ParmVar 0x55d68c7226a8 'x' 'T &'
|     |-IfStmt 0x55d68c749840 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55d68c7496e8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55d68c749820 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d68c7497c0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d68c749750 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|     |   | `-DeclRefExpr 0x55d68c749730 <col:14> 'T *' lvalue Var 0x55d68c7494d8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55d68c749800 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55d68c749878 <line:716:9, col:16>
|       `-DeclRefExpr 0x55d68c749858 <col:16> 'T *' lvalue Var 0x55d68c7494d8 's' 'T *'
|-FunctionTemplateDecl 0x55d68c722c48 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55d68c722898 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d68c722918 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d68c722ba8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55d68c7229f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55d68c722a98 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55d68c749ba0 <col:37, line:726:5>
|     |-IfStmt 0x55d68c749b30 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55d68c749b50 <line:723:13, col:26>
|     | | `-VarDecl 0x55d68c7498f8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55d68c7499e8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55d68c749970 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55d68c7499c8 <col:25> 'T' lvalue ParmVar 0x55d68c7229f8 'x' 'T &'
|     | |-DeclRefExpr 0x55d68c749a10 <col:16> 'T *' lvalue Var 0x55d68c7498f8 's' 'T *'
|     | `-BinaryOperator 0x55d68c749b10 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55d68c749ac0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55d68c749a50 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|     |   | `-DeclRefExpr 0x55d68c749a30 <col:14> 'T *' lvalue Var 0x55d68c7498f8 's' 'T *'
|     |   `-DeclRefExpr 0x55d68c749af0 <col:18> 'const V' lvalue ParmVar 0x55d68c722a98 'value' 'const V &'
|     `-ReturnStmt 0x55d68c749b90 <line:725:9, col:17>
|       `-UnaryOperator 0x55d68c749b78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c749b68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55d68c723048 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55d68c722cb0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55d68c722fa8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55d68c722d60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c722de0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c722e88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55d68c74a9c0 <col:65, line:737:5>
|     |-DeclStmt 0x55d68c749c38 <line:732:9, col:26>
|     | `-VarDecl 0x55d68c749bd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d68c74a988 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55d68c74a9a8 <line:733:13, col:58>
|       | `-VarDecl 0x55d68c749c60 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d68c749e40 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d68c749e10 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d68c749df8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d68c749dd8 <col:26, col:58> 'String' (CXXTemporary 0x55d68c749dd8)
|       |           `-CXXMemberCallExpr 0x55d68c749d68 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d68c749cd8 <col:26> '<bound member function type>' ->find 0x55d68c741fd8
|       |             | `-CXXThisExpr 0x55d68c749cc8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d68c749da0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c749d08 <col:31> 'const char *' lvalue ParmVar 0x55d68c722d60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d68c749db8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c749d28 <col:40> 'int' lvalue ParmVar 0x55d68c722de0 'flags' 'int'
|       |             `-DeclRefExpr 0x55d68c749d48 <col:47> 'Args::Slot *' lvalue Var 0x55d68c749bd0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d68c749ef8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d68c749ee0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d68c749ec0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d68c749e90 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|       |       `-ImplicitCastExpr 0x55d68c749e78 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d68c749e58 <col:20> 'String' lvalue Var 0x55d68c749c60 'str' 'String'
|       `-CompoundStmt 0x55d68c74a968 <col:61, line:736:9>
|         |-DeclStmt 0x55d68c74a3b0 <line:734:13, col:76>
|         | `-VarDecl 0x55d68c749f48 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d68c74a380 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d68c74a2f0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d68c74a338 <col:60> 'T' lvalue ParmVar 0x55d68c722e88 'variable' 'T &'
|         |     `-UnaryOperator 0x55d68c74a368 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d68c74a358 <col:71> 'Args *' this
|         `-CallExpr 0x55d68c74a938 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55d68c74a3d8 <col:13> '<bound member function type>' ->postparse 0x55d68c7421e8
|           | `-CXXThisExpr 0x55d68c74a3c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d68c74a8f8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d68c74a408 <col:23> 'T *' lvalue Var 0x55d68c749f48 's' 'T *'
|           | `-CallExpr 0x55d68c74a8b8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d68c74a690 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55d68c74a790 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55d68c74a7b0 <col:86> 'String' lvalue Var 0x55d68c749c60 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d68c74a860 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d68c74a7f0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|           |   | `-DeclRefExpr 0x55d68c74a7d0 <col:92> 'T *' lvalue Var 0x55d68c749f48 's' 'T *'
|           |   `-UnaryOperator 0x55d68c74a8a0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d68c74a890 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55d68c74a918 <col:103> 'Args::Slot *' lvalue Var 0x55d68c749bd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d68c723598 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d68c7230b8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d68c723138 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55d68c7234f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55d68c7231f8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c723278 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c723318 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55d68c7233b8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55d68c74b860 <col:88, line:745:5>
|     |-DeclStmt 0x55d68c74aa58 <line:741:9, col:26>
|     | `-VarDecl 0x55d68c74a9f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d68c74ac78 <line:742:9, col:55>
|     | `-VarDecl 0x55d68c74aa80 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d68c74ac60 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d68c74ac30 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d68c74ac18 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d68c74abf8 <col:22, col:54> 'String' (CXXTemporary 0x55d68c74abf8)
|     |           `-CXXMemberCallExpr 0x55d68c74ab88 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d68c74aaf8 <col:22> '<bound member function type>' ->find 0x55d68c741fd8
|     |             | `-CXXThisExpr 0x55d68c74aae8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d68c74abc0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d68c74ab28 <col:27> 'const char *' lvalue ParmVar 0x55d68c7231f8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d68c74abd8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d68c74ab48 <col:36> 'int' lvalue ParmVar 0x55d68c723278 'flags' 'int'
|     |             `-DeclRefExpr 0x55d68c74ab68 <col:43> 'Args::Slot *' lvalue Var 0x55d68c74a9f0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d68c74b050 <line:743:9, col:72>
|     | `-VarDecl 0x55d68c74acc8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d68c74b020 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d68c74af90 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d68c74afd8 <col:56> 'T' lvalue ParmVar 0x55d68c723318 'variable' 'T &'
|     |     `-UnaryOperator 0x55d68c74b008 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d68c74aff8 <col:67> 'Args *' this
|     `-CallExpr 0x55d68c74b830 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55d68c74b078 <col:9> '<bound member function type>' ->postparse 0x55d68c7421e8
|       | `-CXXThisExpr 0x55d68c74b068 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d68c74b7f0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d68c74b0a8 <col:19> 'T *' lvalue Var 0x55d68c74acc8 's' 'T *'
|       | `-ParenExpr 0x55d68c74b7d0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55d68c74b7a0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d68c74b788 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d68c74b770 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d68c74b750 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d68c74b720 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|       |     |       `-ImplicitCastExpr 0x55d68c74b708 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d68c74b0c8 <col:25> 'String' lvalue Var 0x55d68c74aa80 'str' 'String'
|       |     |-CallExpr 0x55d68c74b578 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d68c74b350 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55d68c74b450 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55d68c74b470 <col:89> 'String' lvalue Var 0x55d68c74aa80 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d68c74b520 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d68c74b4b0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|       |     | | `-DeclRefExpr 0x55d68c74b490 <col:95> 'T *' lvalue Var 0x55d68c74acc8 's' 'T *'
|       |     | `-UnaryOperator 0x55d68c74b560 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d68c74b550 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55d68c74b6e8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55d68c74b6c8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d68c74b698 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d68c74b648 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d68c74b5d8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|       |         | | `-DeclRefExpr 0x55d68c74b5b8 <col:109> 'T *' lvalue Var 0x55d68c74acc8 's' 'T *'
|       |         | `-DeclRefExpr 0x55d68c74b678 <col:113> 'const V' lvalue ParmVar 0x55d68c7233b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d68c74b6b8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55d68c74b810 <col:128> 'Args::Slot *' lvalue Var 0x55d68c74a9f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d68c723ac8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55d68c723610 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c723688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c723a28 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d68c723748 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c7237c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c723840 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c7238e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55d68c74c458 <col:75, line:754:5>
|     |-DeclStmt 0x55d68c74b908 <line:749:9, col:26>
|     | `-VarDecl 0x55d68c74b8a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d68c74c420 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55d68c74c440 <line:750:13, col:58>
|       | `-VarDecl 0x55d68c74b930 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d68c74bb10 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d68c74bae0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d68c74bac8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d68c74baa8 <col:26, col:58> 'String' (CXXTemporary 0x55d68c74baa8)
|       |           `-CXXMemberCallExpr 0x55d68c74ba38 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d68c74b9a8 <col:26> '<bound member function type>' ->find 0x55d68c741fd8
|       |             | `-CXXThisExpr 0x55d68c74b998 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d68c74ba70 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c74b9d8 <col:31> 'const char *' lvalue ParmVar 0x55d68c723748 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d68c74ba88 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c74b9f8 <col:40> 'int' lvalue ParmVar 0x55d68c7237c8 'flags' 'int'
|       |             `-DeclRefExpr 0x55d68c74ba18 <col:47> 'Args::Slot *' lvalue Var 0x55d68c74b8a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d68c74bbc8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d68c74bbb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d68c74bb90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d68c74bb60 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|       |       `-ImplicitCastExpr 0x55d68c74bb48 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d68c74bb28 <col:20> 'String' lvalue Var 0x55d68c74b930 'str' 'String'
|       `-CompoundStmt 0x55d68c74c400 <col:61, line:753:9>
|         |-DeclStmt 0x55d68c74bfa0 <line:751:13, col:63>
|         | `-VarDecl 0x55d68c74bc18 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55d68c74bf70 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d68c74bee0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d68c74bf28 <col:47> 'T' lvalue ParmVar 0x55d68c7238e8 'variable' 'T &'
|         |     `-UnaryOperator 0x55d68c74bf58 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d68c74bf48 <col:58> 'Args *' this
|         `-CallExpr 0x55d68c74c3d0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55d68c74bfc8 <col:13> '<bound member function type>' ->postparse 0x55d68c7421e8
|           | `-CXXThisExpr 0x55d68c74bfb8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d68c74c390 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55d68c74bff8 <col:23> 'T *' lvalue Var 0x55d68c74bc18 's' 'T *'
|           | `-CallExpr 0x55d68c74c350 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d68c74c1e0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d68c74c228 <col:56> 'P' lvalue ParmVar 0x55d68c723840 'parser' 'P'
|           |   |-DeclRefExpr 0x55d68c74c248 <col:64> 'String' lvalue Var 0x55d68c74b930 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d68c74c2f8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d68c74c288 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|           |   | `-DeclRefExpr 0x55d68c74c268 <col:70> 'T *' lvalue Var 0x55d68c74bc18 's' 'T *'
|           |   `-UnaryOperator 0x55d68c74c338 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d68c74c328 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55d68c74c3b0 <col:81> 'Args::Slot *' lvalue Var 0x55d68c74b8a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d68c724128 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55d68c723b40 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55d68c723bb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55d68c723c38 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55d68c724088 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55d68c723d00 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c723d80 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c723df8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c723e98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55d68c723f38 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55d68c74d1e8 <col:98, line:762:5>
|     |-DeclStmt 0x55d68c74c4f0 <line:758:9, col:26>
|     | `-VarDecl 0x55d68c74c488 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d68c74c710 <line:759:9, col:55>
|     | `-VarDecl 0x55d68c74c518 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55d68c74c6f8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55d68c74c6c8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55d68c74c6b0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55d68c74c690 <col:22, col:54> 'String' (CXXTemporary 0x55d68c74c690)
|     |           `-CXXMemberCallExpr 0x55d68c74c620 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55d68c74c590 <col:22> '<bound member function type>' ->find 0x55d68c741fd8
|     |             | `-CXXThisExpr 0x55d68c74c580 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55d68c74c658 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d68c74c5c0 <col:27> 'const char *' lvalue ParmVar 0x55d68c723d00 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55d68c74c670 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55d68c74c5e0 <col:36> 'int' lvalue ParmVar 0x55d68c723d80 'flags' 'int'
|     |             `-DeclRefExpr 0x55d68c74c600 <col:43> 'Args::Slot *' lvalue Var 0x55d68c74c488 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55d68c74cb30 <line:760:9, col:59>
|     | `-VarDecl 0x55d68c74c768 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d68c74cb00 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d68c74ca70 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55d68c74cab8 <col:43> 'T' lvalue ParmVar 0x55d68c723e98 'variable' 'T &'
|     |     `-UnaryOperator 0x55d68c74cae8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d68c74cad8 <col:54> 'Args *' this
|     `-CallExpr 0x55d68c74d1b8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55d68c74cb58 <col:9> '<bound member function type>' ->postparse 0x55d68c7421e8
|       | `-CXXThisExpr 0x55d68c74cb48 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55d68c74d178 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55d68c74cb88 <col:19> 'T *' lvalue Var 0x55d68c74c768 's' 'T *'
|       | `-ParenExpr 0x55d68c74d158 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55d68c74d128 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55d68c74d110 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55d68c74d0f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55d68c74d0d8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55d68c74d0a8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|       |     |       `-ImplicitCastExpr 0x55d68c74d090 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55d68c74cba8 <col:25> 'String' lvalue Var 0x55d68c74c518 'str' 'String'
|       |     |-CallExpr 0x55d68c74cf00 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55d68c74cd90 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55d68c74cdd8 <col:59> 'P' lvalue ParmVar 0x55d68c723df8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55d68c74cdf8 <col:67> 'String' lvalue Var 0x55d68c74c518 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55d68c74cea8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55d68c74ce38 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|       |     | | `-DeclRefExpr 0x55d68c74ce18 <col:73> 'T *' lvalue Var 0x55d68c74c768 's' 'T *'
|       |     | `-UnaryOperator 0x55d68c74cee8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55d68c74ced8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55d68c74d070 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55d68c74d050 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55d68c74d020 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55d68c74cfd0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55d68c74cf60 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|       |         | | `-DeclRefExpr 0x55d68c74cf40 <col:87> 'T *' lvalue Var 0x55d68c74c768 's' 'T *'
|       |         | `-DeclRefExpr 0x55d68c74d000 <col:91> 'const V' lvalue ParmVar 0x55d68c723f38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55d68c74d040 <col:98> 'bool' true
|       `-DeclRefExpr 0x55d68c74d198 <col:106> 'Args::Slot *' lvalue Var 0x55d68c74c488 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d68c724798 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55d68c7241a8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c724228 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55d68c7242a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55d68c7246f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55d68c724370 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c7243f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c724468 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c724508 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55d68c7245a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55d68c751538 <col:60, line:773:5>
|     |-DeclStmt 0x55d68c74d290 <line:767:9, col:26>
|     | `-VarDecl 0x55d68c74d228 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d68c751500 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55d68c751520 <line:768:13, col:58>
|       | `-VarDecl 0x55d68c74d2b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d68c750808 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d68c7507d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d68c7507c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d68c7507a0 <col:26, col:58> 'String' (CXXTemporary 0x55d68c7507a0)
|       |           `-CXXMemberCallExpr 0x55d68c750730 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d68c74d330 <col:26> '<bound member function type>' ->find 0x55d68c741fd8
|       |             | `-CXXThisExpr 0x55d68c74d320 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d68c750768 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c74d360 <col:31> 'const char *' lvalue ParmVar 0x55d68c724370 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d68c750780 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c74d380 <col:40> 'int' lvalue ParmVar 0x55d68c7243f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55d68c74d3a0 <col:47> 'Args::Slot *' lvalue Var 0x55d68c74d228 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d68c7508c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d68c7508a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d68c750888 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d68c750858 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|       |       `-ImplicitCastExpr 0x55d68c750840 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d68c750820 <col:20> 'String' lvalue Var 0x55d68c74d2b8 'str' 'String'
|       `-CompoundStmt 0x55d68c7514d8 <col:61, line:772:9>
|         |-DeclStmt 0x55d68c750c00 <line:769:13, col:66>
|         | `-VarDecl 0x55d68c750918 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55d68c750bd0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d68c750b40 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d68c750b88 <col:49> 'T1' lvalue ParmVar 0x55d68c724508 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55d68c750bb8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d68c750ba8 <col:61> 'Args *' this
|         |-DeclStmt 0x55d68c750f70 <line:770:13, col:66>
|         | `-VarDecl 0x55d68c750c88 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55d68c750f40 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55d68c750eb0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55d68c750ef8 <col:49> 'T2' lvalue ParmVar 0x55d68c7245a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55d68c750f28 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55d68c750f18 <col:61> 'Args *' this
|         `-CallExpr 0x55d68c7514a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55d68c750f98 <col:13> '<bound member function type>' ->postparse 0x55d68c7421e8
|           | `-CXXThisExpr 0x55d68c750f88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55d68c751468 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55d68c751008 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55d68c750fc8 <col:23> 'T1 *' lvalue Var 0x55d68c750918 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55d68c750fe8 <col:29> 'T2 *' lvalue Var 0x55d68c750c88 's2' 'T2 *'
|           | `-CallExpr 0x55d68c751420 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55d68c7511f0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55d68c751238 <col:63> 'P' lvalue ParmVar 0x55d68c724468 'parser' 'P'
|           |   |-DeclRefExpr 0x55d68c751258 <col:71> 'String' lvalue Var 0x55d68c74d2b8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55d68c751308 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d68c751298 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|           |   | `-DeclRefExpr 0x55d68c751278 <col:77> 'T1 *' lvalue Var 0x55d68c750918 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55d68c7513c8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55d68c751358 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|           |   | `-DeclRefExpr 0x55d68c751338 <col:82> 'T2 *' lvalue Var 0x55d68c750c88 's2' 'T2 *'
|           |   `-UnaryOperator 0x55d68c751408 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55d68c7513f8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55d68c751488 <col:94> 'Args::Slot *' lvalue Var 0x55d68c74d228 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d68c724b88 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55d68c724818 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c724ae8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d68c7248d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c724950 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c7249c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55d68c751a50 <col:67, line:780:5>
|     |-DeclStmt 0x55d68c7515d0 <line:777:9, col:26>
|     | `-VarDecl 0x55d68c751568 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55d68c751a18 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55d68c751a38 <line:778:13, col:58>
|       | `-VarDecl 0x55d68c7515f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55d68c7517d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55d68c7517a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55d68c751790 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55d68c751770 <col:26, col:58> 'String' (CXXTemporary 0x55d68c751770)
|       |           `-CXXMemberCallExpr 0x55d68c751700 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55d68c751670 <col:26> '<bound member function type>' ->find 0x55d68c741fd8
|       |             | `-CXXThisExpr 0x55d68c751660 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55d68c751738 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c7516a0 <col:31> 'const char *' lvalue ParmVar 0x55d68c7248d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55d68c751750 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55d68c7516c0 <col:40> 'int' lvalue ParmVar 0x55d68c724950 'flags' 'int'
|       |             `-DeclRefExpr 0x55d68c7516e0 <col:47> 'Args::Slot *' lvalue Var 0x55d68c751568 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55d68c751890 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55d68c751878 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55d68c751858 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55d68c751828 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|       |       `-ImplicitCastExpr 0x55d68c751810 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55d68c7517f0 <col:20> 'String' lvalue Var 0x55d68c7515f8 'str' 'String'
|       `-CallExpr 0x55d68c7519e8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55d68c7518b8 <col:13> '<bound member function type>' ->postparse 0x55d68c7421e8
|         | `-CXXThisExpr 0x55d68c7518a8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55d68c751998 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55d68c751908 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55d68c7518e8 <col:23> 'P' lvalue ParmVar 0x55d68c7249c8 'parser' 'P'
|         | |-DeclRefExpr 0x55d68c751950 <col:36> 'String' lvalue Var 0x55d68c7515f8 'str' 'String'
|         | `-UnaryOperator 0x55d68c751980 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55d68c751970 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55d68c7519c8 <col:49> 'Args::Slot *' lvalue Var 0x55d68c751568 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55d68c72dce8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d68c724bf8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55d68c72dc48 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55d68c72da70 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c72daf0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c72db68 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55d68c7523c0 <col:71, line:792:5>
|     |-DeclStmt 0x55d68c751ae8 <line:784:9, col:26>
|     | `-VarDecl 0x55d68c751a80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d68c751bb8 <line:785:9, col:29>
|     | `-VarDecl 0x55d68c751b18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d68c751ba0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d68c751b80 <col:28> 'int' 1
|     |-WhileStmt 0x55d68c752270 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55d68c752290 <line:786:16, col:61>
|     | | `-VarDecl 0x55d68c751be0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d68c751dc0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d68c751d90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d68c751d78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d68c751d58 <col:29, col:61> 'String' (CXXTemporary 0x55d68c751d58)
|     | |           `-CXXMemberCallExpr 0x55d68c751ce8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d68c751c58 <col:29> '<bound member function type>' ->find 0x55d68c741fd8
|     | |             | `-CXXThisExpr 0x55d68c751c48 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d68c751d20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d68c751c88 <col:34> 'const char *' lvalue ParmVar 0x55d68c72da70 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d68c751d38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d68c751ca8 <col:43> 'int' lvalue ParmVar 0x55d68c72daf0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d68c751cc8 <col:50> 'Args::Slot *' lvalue Var 0x55d68c751a80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d68c751e78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d68c751e60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d68c751e40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d68c751e10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|     | |       `-ImplicitCastExpr 0x55d68c751df8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d68c751dd8 <col:23> 'String' lvalue Var 0x55d68c751be0 'str' 'String'
|     | `-CompoundStmt 0x55d68c752248 <col:64, line:790:9>
|     |   |-CallExpr 0x55d68c751fd0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55d68c751ea0 <col:13> '<bound member function type>' ->postparse 0x55d68c7421e8
|     |   | | `-CXXThisExpr 0x55d68c751e90 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d68c751f80 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d68c751ef0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d68c751ed0 <col:23> 'P' lvalue ParmVar 0x55d68c72db68 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d68c751f38 <col:36> 'String' lvalue Var 0x55d68c751be0 'str' 'String'
|     |   | | `-UnaryOperator 0x55d68c751f68 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d68c751f58 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55d68c751fb0 <col:49> 'Args::Slot *' lvalue Var 0x55d68c751a80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d68c752168 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d68c752000 <col:13> 'int' lvalue Var 0x55d68c751b18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d68c752150 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d68c752130 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d68c752098 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d68c752078 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d68c752060 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d68c752020 <col:28> 'int' lvalue Var 0x55d68c751b18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d68c752040 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d68c752118 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d68c7520e8 <col:49> 'bool' lvalue ->_read_status 0x55d68c7098c0
|     |   |         `-ImplicitCastExpr 0x55d68c7520c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d68c7520b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d68c752218 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d68c752188 <col:13> 'int' lvalue ParmVar 0x55d68c72daf0 'flags' 'int'
|     |     `-UnaryOperator 0x55d68c752200 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d68c7521e8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d68c7521c8 <col:23> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d68c7523a0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d68c7522d8 <col:9> 'bool' lvalue ->_read_status 0x55d68c7098c0
|       | `-ImplicitCastExpr 0x55d68c7522b8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d68c7522a8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d68c752380 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d68c752360 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d68c752348 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d68c752308 <col:25> 'int' lvalue Var 0x55d68c751b18 'read_status' 'int'
|           `-IntegerLiteral 0x55d68c752328 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d68c72e1c8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55d68c72dd58 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c72ddd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c72e128 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55d68c72de98 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c72df18 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c72df90 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c72e038 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55d68c753350 <col:84, line:805:5>
|     |-DeclStmt 0x55d68c752468 <line:796:9, col:26>
|     | `-VarDecl 0x55d68c752400 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d68c752538 <line:797:9, col:29>
|     | `-VarDecl 0x55d68c752498 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d68c752520 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d68c752500 <col:28> 'int' 1
|     |-DeclStmt 0x55d68c752870 <line:798:9, col:71>
|     | `-VarDecl 0x55d68c752588 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55d68c752840 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55d68c7527b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55d68c7527f8 <col:55> 'T' lvalue ParmVar 0x55d68c72e038 'variable' 'T &'
|     |     `-UnaryOperator 0x55d68c752828 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55d68c752818 <col:66> 'Args *' this
|     |-WhileStmt 0x55d68c753200 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55d68c753220 <line:799:16, col:61>
|     | | `-VarDecl 0x55d68c752898 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d68c752a78 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d68c752a48 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d68c752a30 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d68c752a10 <col:29, col:61> 'String' (CXXTemporary 0x55d68c752a10)
|     | |           `-CXXMemberCallExpr 0x55d68c7529a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d68c752910 <col:29> '<bound member function type>' ->find 0x55d68c741fd8
|     | |             | `-CXXThisExpr 0x55d68c752900 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d68c7529d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d68c752940 <col:34> 'const char *' lvalue ParmVar 0x55d68c72de98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d68c7529f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d68c752960 <col:43> 'int' lvalue ParmVar 0x55d68c72df18 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d68c752980 <col:50> 'Args::Slot *' lvalue Var 0x55d68c752400 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d68c752b30 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d68c752b18 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d68c752af8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d68c752ac8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|     | |       `-ImplicitCastExpr 0x55d68c752ab0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d68c752a90 <col:23> 'String' lvalue Var 0x55d68c752898 'str' 'String'
|     | `-CompoundStmt 0x55d68c7531d8 <col:64, line:803:9>
|     |   |-CallExpr 0x55d68c752f60 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55d68c752b58 <col:13> '<bound member function type>' ->postparse 0x55d68c7421e8
|     |   | | `-CXXThisExpr 0x55d68c752b48 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55d68c752f20 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55d68c752b88 <col:23> 'T *' lvalue Var 0x55d68c752588 's' 'T *'
|     |   | | `-CallExpr 0x55d68c752ee0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55d68c752d70 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55d68c752db8 <col:56> 'P' lvalue ParmVar 0x55d68c72df90 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55d68c752dd8 <col:64> 'String' lvalue Var 0x55d68c752898 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55d68c752e88 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55d68c752e18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|     |   | |   | `-DeclRefExpr 0x55d68c752df8 <col:70> 'T *' lvalue Var 0x55d68c752588 's' 'T *'
|     |   | |   `-UnaryOperator 0x55d68c752ec8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55d68c752eb8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55d68c752f40 <col:81> 'Args::Slot *' lvalue Var 0x55d68c752400 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55d68c7530f8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d68c752f90 <col:13> 'int' lvalue Var 0x55d68c752498 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d68c7530e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d68c7530c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d68c753028 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d68c753008 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d68c752ff0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d68c752fb0 <col:28> 'int' lvalue Var 0x55d68c752498 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d68c752fd0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d68c7530a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d68c753078 <col:49> 'bool' lvalue ->_read_status 0x55d68c7098c0
|     |   |         `-ImplicitCastExpr 0x55d68c753058 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d68c753048 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d68c7531a8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d68c753118 <col:13> 'int' lvalue ParmVar 0x55d68c72df18 'flags' 'int'
|     |     `-UnaryOperator 0x55d68c753190 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d68c753178 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d68c753158 <col:23> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d68c753330 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d68c753268 <col:9> 'bool' lvalue ->_read_status 0x55d68c7098c0
|       | `-ImplicitCastExpr 0x55d68c753248 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d68c753238 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d68c753310 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d68c7532f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d68c7532d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d68c753298 <col:25> 'int' lvalue Var 0x55d68c752498 'read_status' 'int'
|           `-IntegerLiteral 0x55d68c7532b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55d68c72e7a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55d68c72e240 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55d68c72e2b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55d68c72e708 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55d68c72e378 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55d68c72e3f8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55d68c72e470 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55d68c72e5c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55d68c754158 <col:87, line:821:5>
|     |-DeclStmt 0x55d68c753400 <line:809:9, col:26>
|     | `-VarDecl 0x55d68c753398 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55d68c7534d0 <line:810:9, col:29>
|     | `-VarDecl 0x55d68c753430 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55d68c7534b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55d68c753498 <col:28> 'int' 1
|     |-DeclStmt 0x55d68c753718 <line:811:9, col:38>
|     | `-VarDecl 0x55d68c753600 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55d68c7536f0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55d68c753678 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55d68c7536d0 <col:29> 'Vector<T>' lvalue ParmVar 0x55d68c72e5c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55d68c754008 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55d68c754028 <line:812:16, col:61>
|     | | `-VarDecl 0x55d68c753740 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55d68c753920 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55d68c7538f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55d68c7538d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55d68c7538b8 <col:29, col:61> 'String' (CXXTemporary 0x55d68c7538b8)
|     | |           `-CXXMemberCallExpr 0x55d68c753848 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55d68c7537b8 <col:29> '<bound member function type>' ->find 0x55d68c741fd8
|     | |             | `-CXXThisExpr 0x55d68c7537a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55d68c753880 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d68c7537e8 <col:34> 'const char *' lvalue ParmVar 0x55d68c72e378 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55d68c753898 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55d68c753808 <col:43> 'int' lvalue ParmVar 0x55d68c72e3f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55d68c753828 <col:50> 'Args::Slot *' lvalue Var 0x55d68c753398 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55d68c7539d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55d68c7539c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55d68c7539a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55d68c753970 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55d68c45b978
|     | |       `-ImplicitCastExpr 0x55d68c753958 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55d68c753938 <col:23> 'String' lvalue Var 0x55d68c753740 'str' 'String'
|     | `-CompoundStmt 0x55d68c753fd0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55d68c753a98 <line:813:13, col:23>
|     |   | `-VarDecl 0x55d68c753a00 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55d68c753a78 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55d68c753c18 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55d68c753ac0 <col:13> '<bound member function type>' ->postparse 0x55d68c7421e8
|     |   | | `-CXXThisExpr 0x55d68c753ab0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55d68c753bc0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55d68c753b10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55d68c753af0 <col:23> 'P' lvalue ParmVar 0x55d68c72e470 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55d68c753b58 <col:36> 'String' lvalue Var 0x55d68c753740 'str' 'String'
|     |   | | |-DeclRefExpr 0x55d68c753b78 <col:41> 'T' lvalue Var 0x55d68c753a00 'sx' 'T'
|     |   | | `-UnaryOperator 0x55d68c753ba8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55d68c753b98 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55d68c753bf8 <col:53> 'Args::Slot *' lvalue Var 0x55d68c753398 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55d68c753d70 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55d68c753ca8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55d68c753c78 <col:17> 'bool' lvalue ->_read_status 0x55d68c7098c0
|     |   | |   `-ImplicitCastExpr 0x55d68c753c58 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55d68c753c48 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55d68c753d48 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55d68c753ce0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55d68c753cc0 <col:17> 'Vector<T> *' lvalue Var 0x55d68c753600 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55d68c753d28 <col:30> 'T' lvalue Var 0x55d68c753a00 'sx' 'T'
|     |   |-BinaryOperator 0x55d68c753ef0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55d68c753d88 <col:13> 'int' lvalue Var 0x55d68c753430 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55d68c753ed8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55d68c753eb8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55d68c753e20 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55d68c753e00 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55d68c753de8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55d68c753da8 <col:28> 'int' lvalue Var 0x55d68c753430 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55d68c753dc8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55d68c753ea0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55d68c753e70 <col:49> 'bool' lvalue ->_read_status 0x55d68c7098c0
|     |   |         `-ImplicitCastExpr 0x55d68c753e50 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55d68c753e40 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55d68c753fa0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55d68c753f10 <col:13> 'int' lvalue ParmVar 0x55d68c72e3f8 'flags' 'int'
|     |     `-UnaryOperator 0x55d68c753f88 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55d68c753f70 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55d68c753f50 <col:23> 'const int' lvalue Var 0x55d68c711638 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55d68c754138 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55d68c754070 <col:9> 'bool' lvalue ->_read_status 0x55d68c7098c0
|       | `-ImplicitCastExpr 0x55d68c754050 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55d68c754040 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55d68c754118 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55d68c7540f8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55d68c7540e0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55d68c7540a0 <col:25> 'int' lvalue Var 0x55d68c753430 'read_status' 'int'
|           `-IntegerLiteral 0x55d68c7540c0 <col:40> 'int' 1
|-AccessSpecDecl 0x55d68c72e820 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55d68c72e848 prev 0x55d68c70f0f8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55d68c72e940 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55d68c72ea30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55d68c754190 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55d68c72eb20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55d68c7541a0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55d68c72ec20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55d68c72ecd0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55d68c72ed78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55d68c72ed78
| | `-ParmVarDecl 0x55d68c72ee88 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55d68c72f648 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55d68c72f648
|   `-ParmVarDecl 0x55d68c72f758 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55d68c72eef8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55d68c72f058 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55d68c72f250 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55d68c72f100 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55d68c72f178 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55d68c754380 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55d68c72f508 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55d68c7541f0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d68c7541b0 <col:20> 'void *' lvalue ParmVar 0x55d68c72f100 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55d68c72f570 '_slot' 'char *'
| | | `-CXXNewExpr 0x55d68c754278 <col:32, col:45> 'char *' array Function 0x55d68c27f5f8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55d68c754260 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55d68c754230 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55d68c72f178 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55d68c72f5d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55d68c754340 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55d68c754300 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55d68c72f178 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55d68c754400 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55d68c72f350 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55d68c72eb20 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55d68c754488 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55d68c754468 <line:840:13, col:22> 'void' array Function 0x55d68c27f958 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55d68c754450 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55d68c754420 <col:22> 'char *' lvalue ->_slot 0x55d68c72f570
| |         `-CXXThisExpr 0x55d68c754410 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55d68c72f450 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55d68c72ec20 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55d68c754678 <col:22, line:844:9>
| |   `-CallExpr 0x55d68c7545e0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55d68c7545c8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55d68c7545a8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55d68c38b3d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55d68c754618 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55d68c7544f8 <col:20> 'void *' lvalue ->_ptr 0x55d68c72f508
| |     |   `-CXXThisExpr 0x55d68c7544e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55d68c754648 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55d68c754630 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55d68c754538 <col:26> 'char *' lvalue ->_slot 0x55d68c72f570
| |     |     `-CXXThisExpr 0x55d68c754528 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55d68c754660 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55d68c754578 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55d68c72f5d0
| |         `-CXXThisExpr 0x55d68c754568 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55d68c72f508 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55d68c72f570 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55d68c72f5d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55d68c72f7c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d68c72f7c8
| | `-ParmVarDecl 0x55d68c72f8d8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55d68c72f978 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55d68c72f978
|   `-ParmVarDecl 0x55d68c72fa88 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55d68c72fc28 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55d68c72faf8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55d68c72fb98 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55d68c72fec0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55d68c7300b8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55d68c72ff88 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55d68c730238 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55d68c7546b0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55d68c754690 <col:20> 'T *' lvalue ParmVar 0x55d68c72ff88 'ptr' 'T *'
|   | `-CompoundStmt 0x55d68c754700 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55d68c730188 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55d68c72ec20 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55d68c7548b0 <col:22, line:857:9>
|   |   `-CallExpr 0x55d68c754880 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55d68c754710 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55d68c443b08 0x55d68c3ede38
|   |     |-CXXOperatorCallExpr 0x55d68c754810 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55d68c7547a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55d68c650ab8 0x55d68c6506d8 0x55d68c650308 0x55d68c64ff28 0x55d68c64fb48 0x55d68c64f778
|   |     | `-MemberExpr 0x55d68c754770 <col:29> 'T *' lvalue ->_ptr 0x55d68c730238
|   |     |   `-CXXThisExpr 0x55d68c754760 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55d68c754850 <col:35> 'T' lvalue ->_slot 0x55d68c730298
|   |       `-CXXThisExpr 0x55d68c754840 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55d68c730238 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55d68c730298 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55d68c730300 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55d68c730400 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55d68c730450 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c7303e0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55d68c7303c0 <col:31> 'int' 48
|-FieldDecl 0x55d68c730478 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55d68c7304d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55d68c730538 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55d68c730670 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55d68c741880 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55d68c7418e0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55d68c741990 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55d68c741bb8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55d68c741ac0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55d68c741d08 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55d68c741c78 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55d68c741fd8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55d68c741dc8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55d68c741e48 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55d68c741ef0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55d68c7421e8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55d68c7420a0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55d68c742118 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55d68c7422b8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55d68c742408 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55d68c742370 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55d68c742798 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55d68c7424c8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55d68c742548 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55d68c7425f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55d68c7426a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55d68c7429c0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55d68c742870 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55d68c7428e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55d68c742cd8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55d68c742a70 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55d68c742c38 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55d68c742b48 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c76e270 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c76e388 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55d68c76e418 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55d68c76e528 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55d68c76e458 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55d68c76e878 'size' 'int'
| | `-ImplicitCastExpr 0x55d68c76e940 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c76e900 <col:16> 'int' lvalue ParmVar 0x55d68c76e458 's' 'int'
| `-CompoundStmt 0x55d68c76e988 <col:19, line:1297:5>
|-CXXMethodDecl 0x55d68c76e780 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55d68c76e5e8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55d68c76e668 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55d68c76e6e0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55d68c76e8e0 <col:73> 'const ArgContext' lvalue Var 0x55d68c7548d8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55d68c76e838 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55d68c76e878 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55d68c7d2a18 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55d68c7d2a18
| `-ParmVarDecl 0x55d68c7d2b28 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55d68c7d2bc8 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c7d2cd8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55d68c76e878 'size' 'int'
| | `-ImplicitCastExpr 0x55d68c7d34e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7d34a0 <col:7> 'int' xvalue .size 0x55d68c76e878
| |     `-CXXStaticCastExpr 0x55d68c7d3470 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c7d3440 <col:7> 'AnnoArg' lvalue ParmVar 0x55d68c7d2cd8 '' 'AnnoArg &&'
| `-CompoundStmt 0x55d68c7d3530 <col:7>
`-CXXDestructorDecl 0x55d68c7d2d78 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct __va_list_tag
         0 |   unsigned int gp_offset
         4 |   unsigned int fp_offset
         8 |   void * overflow_arg_area
        16 |   void * reg_save_area
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c12b238 <<invalid sloc>> <invalid sloc> implicit struct __va_list_tag definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-TypeVisibilityAttr 0x55d68c12b2f0 <<invalid sloc>> Implicit Default
|-FieldDecl 0x55d68c12b3b0 <<invalid sloc>> <invalid sloc> gp_offset 'unsigned int'
|-FieldDecl 0x55d68c12b400 <<invalid sloc>> <invalid sloc> fp_offset 'unsigned int'
|-FieldDecl 0x55d68c16bc40 <<invalid sloc>> <invalid sloc> overflow_arg_area 'void *'
|-FieldDecl 0x55d68c16bc90 <<invalid sloc>> <invalid sloc> reg_save_area 'void *'
|-CXXConstructorDecl 0x55d68c7d6b60 <<invalid sloc>> <invalid sloc> implicit used __va_list_tag 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d68c7d6f98 <<invalid sloc>>
|-CXXConstructorDecl 0x55d68c7d6c68 <<invalid sloc>> <invalid sloc> implicit constexpr __va_list_tag 'void (const __va_list_tag &)' inline default trivial noexcept-unevaluated 0x55d68c7d6c68
| `-ParmVarDecl 0x55d68c7d6d78 <<invalid sloc>> <invalid sloc> 'const __va_list_tag &'
|-CXXConstructorDecl 0x55d68c7d6e18 <<invalid sloc>> <invalid sloc> implicit constexpr __va_list_tag 'void (__va_list_tag &&)' inline default trivial noexcept-unevaluated 0x55d68c7d6e18
| `-ParmVarDecl 0x55d68c7d6f28 <<invalid sloc>> <invalid sloc> '__va_list_tag &&'
`-CXXDestructorDecl 0x55d68c7d6fe8 <<invalid sloc>> <invalid sloc> implicit referenced ~__va_list_tag 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.__va_list_tag = type { i32, i32, i8*, i8* }
  NonVirtualBaseLLVMType:%struct.__va_list_tag = type { i32, i32, i8*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c7a56f0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c7a5808 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55d68c7a58b0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55d68c7a5918 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55d68c7a5980 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55d68c7a5a30 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55d68c7a58b0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55d68c7a68b0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55d68c7a6868 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55d68c7a6830 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55d68c7a6818 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55d68c7a67c0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55d68c47e460 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55d68c7a5918 'len' 'int'
| | `-IntegerLiteral 0x55d68c7a6928 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c7a5980 'cap' 'int'
| | `-IntegerLiteral 0x55d68c7a6990 <col:20> 'int' 0
| `-CompoundStmt 0x55d68c7a6a10 <col:23, line:119:2>
|-CXXConstructorDecl 0x55d68c7a5ba8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55d68c7a5ae8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55d68c7a6a20 <col:37, line:121:2>
|-CXXConstructorDecl 0x55d68c7a8c98 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c7a8da8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55d68c7a58b0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55d68c7aa760 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7aa730 <col:12> 'unsigned char *const' lvalue .s 0x55d68c7a58b0
| |     `-DeclRefExpr 0x55d68c7aa710 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55d68c7a8da8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55d68c7a5918 'len' 'int'
| | `-ImplicitCastExpr 0x55d68c7aa7f0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7aa7c0 <col:12> 'const int' lvalue .len 0x55d68c7a5918
| |     `-DeclRefExpr 0x55d68c7aa7a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55d68c7a8da8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55d68c7a5980 'cap' 'int'
| | `-ImplicitCastExpr 0x55d68c7aa880 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7aa850 <col:12> 'const int' lvalue .cap 0x55d68c7a5980
| |     `-DeclRefExpr 0x55d68c7aa830 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55d68c7a8da8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55d68c7aa8d8 <col:12>
|-CXXConstructorDecl 0x55d68c7a8e48 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d68c7a8e48
| `-ParmVarDecl 0x55d68c7a8f58 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55d68c7aab90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c7a0e98 prev 0x55d68c6c95d0 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d68c7a0f90 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55d68c7a1020 <col:21, col:27> col:21 public
|-TypedefDecl 0x55d68c7a1060 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55d68c12afd0 'const char *'
|   `-QualType 0x55d68c12a521 'const char' const
|     `-BuiltinType 0x55d68c12a520 'char'
|-TypedefDecl 0x55d68c7a10d0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55d68c12b1a0 'char *'
|   `-BuiltinType 0x55d68c12a520 'char'
|-TypedefDecl 0x55d68c7a1210 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55d68c7a1180 'int (StringAccum::*)() const'
|   |-RecordType 0x55d68c3e9d30 'StringAccum'
|   | `-CXXRecord 0x55d68c7a0e98 'StringAccum'
|   `-ParenType 0x55d68c458470 'int () const' sugar
|     `-FunctionProtoType 0x55d68c42d010 'int () const' const cdecl
|       `-BuiltinType 0x55d68c12a580 'int'
|-CXXConstructorDecl 0x55d68c7a12d0 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55d68c7a1420 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55d68c7a1390 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55d68c7a1570 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55d68c7a14e0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55d68c7a1718 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55d68c7a1658 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55d68c7a18c8 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55d68c7a1808 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55d68c7a19c0 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55d68c7a1b78 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55d68c7a1ab0 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55d68c7a1cf8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55d68c7a1c30 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55d68c7a1df0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55d68c7a1eb8 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55d68c7a1f80 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55d68c7a2048 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55d68c7a2110 <line:54:5, col:23> col:17 used c_str 'const char *()'
|-CXXConversionDecl 0x55d68c7a2278 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d68c7a2348 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55d68c7a2408 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55d68c7a2518 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55d68c7a2628 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55d68c7a26e8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55d68c7a27a8 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55d68c7a28f0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55d68c7a2860 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55d68c7a2a80 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55d68c7a29b0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55d68c7a2b48 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55d68c7a2c40 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55d68c7a2d00 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55d68c7a2dc8 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55d68c7a2e88 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55d68c7a2f48 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55d68c7a3008 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55d68c7a3158 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55d68c7a30c0 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55d68c7a32a8 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55d68c7a3218 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55d68c7a3400 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55d68c7a3368 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55d68c7a3550 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55d68c7a34c0 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55d68c7a3770 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55d68c7a3610 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55d68c7a3690 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55d68c7a66e8 <col:53> 'int' 0
|-CXXMethodDecl 0x55d68c7a38c8 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55d68c7a3838 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55d68c7a6708 <col:34> 'int' 1
|-CXXMethodDecl 0x55d68c7a3a10 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55d68c7a3980 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55d68c7a3b60 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55d68c7a3ad0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55d68c7a3cb0 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55d68c7a3c20 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55d68c7a3e00 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55d68c7a3d70 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55d68c7a3fd8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55d68c7a3ec0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55d68c7a3f40 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55d68c7a41b8 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55d68c7a40a0 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55d68c7a4120 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55d68c7a4398 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55d68c7a4280 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55d68c7a4300 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55d68c7a4578 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55d68c7a4460 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55d68c7a44e0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55d68c7a4758 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55d68c7a4640 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55d68c7a46c0 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55d68c7a4ab8 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55d68c7a48a0 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55d68c7a4920 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55d68c7a6728 <col:56> 'int' 10
| `-ParmVarDecl 0x55d68c7a4998 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c7a6748 <col:77> 'bool' true
|-CXXMethodDecl 0x55d68c7a4e18 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55d68c7a4c00 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55d68c7a4c80 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55d68c7a6758 <col:57> 'int' 10
| `-ParmVarDecl 0x55d68c7a4cf8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c7a6778 <col:78> 'bool' true
|-CXXMethodDecl 0x55d68c7a5040 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55d68c7a4ee8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55d68c7a4f68 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55d68c7a5138 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x55d68c7a52a8 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55d68c7a51e8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55d68c7a53f8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55d68c7a5368 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55d68c7a54a0 <col:51> "" ""
|-AccessSpecDecl 0x55d68c7a5510 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55d68c7a5538 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55d68c7a5688 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55d68c7a56d8 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c7a5668 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55d68c7a5638 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55d68c4611d8 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55d68c7a56f0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d68c7a5808 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55d68c7a58b0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55d68c7a5918 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55d68c7a5980 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55d68c7a5a30 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55d68c7a58b0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55d68c7a68b0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55d68c7a6868 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55d68c7a6830 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55d68c7a6818 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55d68c7a67c0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55d68c47e460 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55d68c7a5918 'len' 'int'
| | | `-IntegerLiteral 0x55d68c7a6928 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55d68c7a5980 'cap' 'int'
| | | `-IntegerLiteral 0x55d68c7a6990 <col:20> 'int' 0
| | `-CompoundStmt 0x55d68c7a6a10 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55d68c7a5ba8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55d68c7a5ae8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55d68c7a6a20 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55d68c7a8c98 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d68c7a8da8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55d68c7a58b0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55d68c7aa760 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55d68c7aa730 <col:12> 'unsigned char *const' lvalue .s 0x55d68c7a58b0
| | |     `-DeclRefExpr 0x55d68c7aa710 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55d68c7a8da8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55d68c7a5918 'len' 'int'
| | | `-ImplicitCastExpr 0x55d68c7aa7f0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55d68c7aa7c0 <col:12> 'const int' lvalue .len 0x55d68c7a5918
| | |     `-DeclRefExpr 0x55d68c7aa7a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55d68c7a8da8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55d68c7a5980 'cap' 'int'
| | | `-ImplicitCastExpr 0x55d68c7aa880 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55d68c7aa850 <col:12> 'const int' lvalue .cap 0x55d68c7a5980
| | |     `-DeclRefExpr 0x55d68c7aa830 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55d68c7a8da8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55d68c7aa8d8 <col:12>
| |-CXXConstructorDecl 0x55d68c7a8e48 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55d68c7a8e48
| | `-ParmVarDecl 0x55d68c7a8f58 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55d68c7aab90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55d68c7a5c80 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55d68c7a5d80 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55d68c7a5ce8 <col:16> col:19 'int'
|-CXXMethodDecl 0x55d68c7a5f60 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55d68c7a5e40 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55d68c7a5ec0 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55d68c7a6140 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55d68c7a6028 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55d68c7a60a8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55d68c7a6298 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55d68c7a6208 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55d68c7a63e8 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55d68c7a6358 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55d68c7a66a8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55d68c7a65e8 parent 0x55d68c12a488 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55d68c7a64a0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55d68c7a6518 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c3c2958 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c3c2a78 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55d68c3c2b40 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55d68c493110 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d68c498428 <col:8>
|-CXXConstructorDecl 0x55d68c493218 <col:8> col:8 implicit used constexpr in_addr 'void (const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c493328 <col:8> col:8 used 'const in_addr &'
| |-CXXCtorInitializer Field 0x55d68c3c2b40 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c7d7a10 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7d79e0 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x55d68c3c2b40
| |     `-DeclRefExpr 0x55d68c7d79c0 <col:8> 'const in_addr' lvalue ParmVar 0x55d68c493328 '' 'const in_addr &'
| `-CompoundStmt 0x55d68c7d7a58 <col:8>
|-CXXConstructorDecl 0x55d68c4933c8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c4934d8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55d68c3c2b40 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c498640 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c498610 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55d68c3c2b40
| |     `-CXXStaticCastExpr 0x55d68c4985e0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c4985b0 <col:8> 'in_addr' lvalue ParmVar 0x55d68c4934d8 '' 'in_addr &&'
| `-CompoundStmt 0x55d68c498688 <col:8>
`-CXXDestructorDecl 0x55d68c4988c0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c48adf8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d68c48af18 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55d68c48b000 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55d68c48afe0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55d68c48afa8 <col:22> 'int' 4
|-FieldDecl 0x55d68c48b0a8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55d68c48b088 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55d68c48b050 <col:21> 'int' 4
|-FieldDecl 0x55d68c48b108 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55d68c48b168 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55d68c48b1c8 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55d68c48b228 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55d68c48b288 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55d68c48b2e8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55d68c48b348 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55d68c48b3b8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55d68c48b428 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c48dd40 prev 0x55d68c3f3d88 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c48de38 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55d68c48dec8 <col:19, col:25> col:19 public
|-TypedefDecl 0x55d68c48df00 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55d68c281660 'uninitialized_type'
|   `-CXXRecord 0x55d68c2815c8 'uninitialized_type'
|-CXXConstructorDecl 0x55d68c48dfc0 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c4927c8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c492788 <col:10> 'int' 0
| `-CompoundStmt 0x55d68c492810 <col:13, line:22:5>
|-CXXConstructorDecl 0x55d68c48e110 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55d68c48e080 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c492860 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c492820 <col:10> 'unsigned int' lvalue ParmVar 0x55d68c48e080 'x' 'unsigned int'
| `-CompoundStmt 0x55d68c4928a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x55d68c48e268 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55d68c48e1d8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c492910 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55d68c4928f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55d68c4928b8 <col:10> 'int' lvalue ParmVar 0x55d68c48e1d8 'x' 'int'
| `-CompoundStmt 0x55d68c492958 <col:13, line:31:5>
|-CXXConstructorDecl 0x55d68c48e3c0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55d68c48e330 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c4929c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55d68c4929a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55d68c492968 <col:10> 'unsigned long' lvalue ParmVar 0x55d68c48e330 'x' 'unsigned long'
| `-CompoundStmt 0x55d68c492a08 <col:13, line:35:5>
|-CXXConstructorDecl 0x55d68c48e518 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55d68c48e488 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c492a70 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55d68c492a58 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55d68c492a18 <col:10> 'long' lvalue ParmVar 0x55d68c48e488 'x' 'long'
| `-CompoundStmt 0x55d68c492ab8 <col:13, line:39:5>
|-CXXConstructorDecl 0x55d68c48e6d8 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55d68c48e5e8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c492b38 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c492ae8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55d68c3c2b40
| |     `-DeclRefExpr 0x55d68c492ac8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55d68c48e5e8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55d68c492b80 <col:20, line:44:5>
|-CXXConstructorDecl 0x55d68c48e868 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55d68c48e7a0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55d68c492ce8 <col:51, line:56:5>
|   `-BinaryOperator 0x55d68c492cc8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55d68c492ba0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55d68c492720
|     | `-CXXThisExpr 0x55d68c492b90 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55d68c492cb0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55d68c492c98 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55d68c492c78 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55d68c492c48 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55d68c492c30 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55d68c492bd0 <col:47> 'const unsigned char *' lvalue ParmVar 0x55d68c48e7a0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55d68c48e9b8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55d68c48e928 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55d68c48eb68 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55d68c48eaa8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55d68c492d58 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55d68c492d30 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55d68c492d00 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55d68c48eaa8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55d68c48ecf8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55d68c48ec30 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55d68c48ede8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55d68c493d18 <col:46, line:83:5>
|   `-ReturnStmt 0x55d68c493d08 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55d68c493cf0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55d68c493cc0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c493b78 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55d68c493a60 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55d68c493948 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55d68c492d80 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55d68c48eed8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55d68c493dc8 <col:31, line:88:5>
|   `-ReturnStmt 0x55d68c493db8 <line:87:2, col:10>
|     `-UnaryOperator 0x55d68c493da0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55d68c493d88 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55d68c493d70 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55d68c493d40 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d68c492720
|             `-CXXThisExpr 0x55d68c493d30 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55d68c48ef98 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55d68c493e48 <col:34, line:93:5>
|   `-ReturnStmt 0x55d68c493e38 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55d68c493e20 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55d68c493df0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d68c492720
|         `-CXXThisExpr 0x55d68c493de0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55d68c48f068 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55d68c493ec8 <col:38, line:101:5>
|   `-ReturnStmt 0x55d68c493eb8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55d68c493ea0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55d68c493e70 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d68c492720
|         `-CXXThisExpr 0x55d68c493e60 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55d68c48f138 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55d68c494198 <col:38, line:108:5>
|   `-ReturnStmt 0x55d68c494188 <line:107:2, col:58>
|     `-BinaryOperator 0x55d68c494168 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55d68c494080 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55d68c494060 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55d68c494048 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55d68c493ef0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d68c492720
|       |   |   `-CXXThisExpr 0x55d68c493ee0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55d68c494020 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55d68c494008 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d68c493f88 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d68c3d1078 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55d68c493f68 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55d68c494140 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55d68c494128 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55d68c494108 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d68c3d1078 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55d68c4940e8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55d68c48f1f8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55d68c494408 <col:39, line:112:5>
|   `-ReturnStmt 0x55d68c4943f8 <line:111:2, col:56>
|     `-BinaryOperator 0x55d68c4943d8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55d68c4942f0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55d68c4942d0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55d68c4942b8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55d68c4941c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55d68c492720
|       |   |   `-CXXThisExpr 0x55d68c4941b0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55d68c494290 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55d68c494278 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55d68c494258 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d68c3d1078 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55d68c494238 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55d68c4943b0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55d68c494398 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55d68c494378 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55d68c3d1078 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55d68c494358 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55d68c48f328 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55d68c48f430 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55d68c48f540 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55d68c491618 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55d68c4916d8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c4917a0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55d68c491998 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55d68c491850 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55d68c4918c8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55d68c491b18 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55d68c491a58 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55d68c491c60 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55d68c491bd0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55d68c491e08 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55d68c491d18 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55d68c491f50 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55d68c491ec0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55d68c492098 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55d68c492008 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55d68c492160 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55d68c492220 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55d68c492398 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55d68c4922d0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55d68c492460 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55d68c492548 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55d68c4925f0 <col:51> "" ""
|-TypedefDecl 0x55d68c492690 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55d68c3f3e20 'IPAddress'
|   `-CXXRecord 0x55d68c48dd40 'IPAddress'
|-AccessSpecDecl 0x55d68c4926e8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55d68c492720 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d68c492dc8 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c492ed8 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c7c90c8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7c9080 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x55d68c492720
| |     `-DeclRefExpr 0x55d68c7c9060 <col:7> 'const IPAddress' lvalue ParmVar 0x55d68c492ed8 '' 'const IPAddress &'
| `-CompoundStmt 0x55d68c7c9110 <col:7>
|-CXXConstructorDecl 0x55d68c492f78 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c493088 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55d68c492720 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55d68c493c68 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c493c20 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55d68c492720
| |     `-CXXStaticCastExpr 0x55d68c493bf0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c493bc0 <col:7> 'IPAddress' lvalue ParmVar 0x55d68c493088 '' 'IPAddress &&'
| `-CompoundStmt 0x55d68c493cb0 <col:7>
|-CXXDestructorDecl 0x55d68c493978 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d68c7c99b8 <col:7> col:7 implicit used operator= 'IPAddress &(const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c7c9ac8 <col:7> col:7 used 'const IPAddress &'
| `-CompoundStmt 0x55d68c7c9e20 <col:7>
|   |-BinaryOperator 0x55d68c7c9dc8 <col:7> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x55d68c7c9d80 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x55d68c492720
|   | | `-CXXThisExpr 0x55d68c7c9d70 <col:7> 'IPAddress *' this
|   | `-ImplicitCastExpr 0x55d68c7c9db0 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x55d68c7c9d40 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x55d68c492720
|   |     `-DeclRefExpr 0x55d68c7c9d20 <col:7> 'const IPAddress' lvalue ParmVar 0x55d68c7c9ac8 '' 'const IPAddress &'
|   `-ReturnStmt 0x55d68c7c9e10 <col:7>
|     `-UnaryOperator 0x55d68c7c9df8 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c7c9de8 <col:7> 'IPAddress *' this
`-CXXMethodDecl 0x55d68c7c9b38 <col:7> col:7 implicit operator= 'IPAddress &(IPAddress &&)' inline default trivial noexcept-unevaluated 0x55d68c7c9b38
  `-ParmVarDecl 0x55d68c7c9c48 <col:7> col:7 'IPAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c6c6430 <../elements/ip/ipreassembler.hh:84:5, line:87:5> line:84:12 referenced struct ChunkLink definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55d68c6c6548 <col:5, col:12> col:12 implicit struct ChunkLink
|-FieldDecl 0x55d68c6c65e8 <line:85:2, col:11> col:11 referenced off 'uint16_t':'unsigned short'
`-FieldDecl 0x55d68c6c6648 <line:86:2, col:11> col:11 referenced lastoff 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%"struct.IPReassembler::ChunkLink" = type { i16, i16 }
  NonVirtualBaseLLVMType:%"struct.IPReassembler::ChunkLink" = type { i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPFlowID
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   class IPAddress _daddr
         4 |     uint32_t _addr
         8 |   uint16_t _sport
        10 |   uint16_t _dport
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c649558 <../dummy_inc/click/ipflowid.hh:9:1, line:143:1> line:9:7 referenced class IPFlowID definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c649678 <col:1, col:7> col:7 implicit referenced class IPFlowID
|-AccessSpecDecl 0x55d68c649708 <col:18, col:24> col:18 public
|-TypedefDecl 0x55d68c649740 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55d68c281660 'uninitialized_type'
|   `-CXXRecord 0x55d68c2815c8 'uninitialized_type'
|-CXXConstructorDecl 0x55d68c649800 <line:17:5, line:19:5> line:17:5 IPFlowID 'void ()'
| |-CXXCtorInitializer Field 0x55d68c7c8818 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7c8de8 <line:18:4, col:11> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x55d68c7c8878 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7c8e50 <col:14, col:21> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x55d68c7c88d8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55d68c7c8ee0 <col:31> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c7c8ea0 <col:31> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c7c8938 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55d68c7c8f60 <col:42> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c7c8f20 <col:42> 'int' 0
| `-CompoundStmt 0x55d68c7c8fc0 <col:45, line:19:5>
|-CXXConstructorDecl 0x55d68c7c6c98 <line:26:5, line:28:5> line:26:5 used IPFlowID 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x55d68c6498b8 <col:14, col:24> col:24 used saddr 'IPAddress'
| |-ParmVarDecl 0x55d68c649930 <col:31, col:40> col:40 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x55d68c6499a8 <col:47, col:57> col:57 used daddr 'IPAddress'
| |-ParmVarDecl 0x55d68c649a20 <col:64, col:73> col:73 used dport 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x55d68c7c8818 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7c9120 <line:27:4, col:16> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x55d68c7c9010 <col:11> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x55d68c7c8fd0 <col:11> 'IPAddress' lvalue ParmVar 0x55d68c6498b8 'saddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x55d68c7c8878 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7c91d0 <col:19, col:31> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x55d68c7c91b8 <col:26> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x55d68c7c9178 <col:26> 'IPAddress' lvalue ParmVar 0x55d68c6499a8 'daddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x55d68c7c88d8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55d68c7c9268 <col:41> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c7c9228 <col:41> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d68c649930 'sport' 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x55d68c7c8938 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55d68c7c92e8 <col:56> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c7c92a8 <col:56> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d68c649a20 'dport' 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d68c7c9348 <col:63, line:28:5>
|-CXXConstructorDecl 0x55d68c7c6eb8 <line:37:5, col:60> col:14 IPFlowID 'void (const Packet *, bool)'
| |-ParmVarDecl 0x55d68c7c6d70 <col:23, col:37> col:37 p 'const Packet *'
| `-ParmVarDecl 0x55d68c7c6de8 <col:40, col:55> col:45 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c7c8db0 <col:55> 'bool' false
|-CXXConstructorDecl 0x55d68c7c70c8 <line:47:5, col:64> col:14 used IPFlowID 'void (const click_ip *, bool)'
| |-ParmVarDecl 0x55d68c7c6f80 <col:23, col:39> col:39 iph 'const click_ip *'
| `-ParmVarDecl 0x55d68c7c6ff8 <col:44, col:59> col:49 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c7c8dc0 <col:59> 'bool' false
|-CXXConstructorDecl 0x55d68c7c7220 <line:50:5, line:52:5> line:50:12 IPFlowID 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55d68c7c7190 <col:21, col:47> col:47 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55d68c7c8818 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7c9358 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x55d68c7c8878 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7c93a8 <col:12> 'IPAddress' 'void ()'
| `-CompoundStmt 0x55d68c7c9460 <col:55, line:52:5>
|   `-CStyleCastExpr 0x55d68c7c9438 <line:51:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55d68c7c9408 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55d68c7c7190 'unused' 'const uninitialized_type &'
|-TypedefDecl 0x55d68c7c73d8 <line:55:5, col:60> col:35 referenced unspecified_bool_type 'IPAddress (IPFlowID::*)() const'
| `-MemberPointerType 0x55d68c7c7350 'IPAddress (IPFlowID::*)() const'
|   |-RecordType 0x55d68c6495f0 'IPFlowID'
|   | `-CXXRecord 0x55d68c649558 'IPFlowID'
|   `-ParenType 0x55d68c7c72f0 'IPAddress () const' sugar
|     `-FunctionProtoType 0x55d68c65d580 'IPAddress () const' const cdecl
|       `-RecordType 0x55d68c3f3e20 'IPAddress'
|         `-CXXRecord 0x55d68c48dd40 'IPAddress'
|-CXXConversionDecl 0x55d68c7c7518 <line:57:5, line:59:5> line:57:5 operator IPAddress (IPFlowID::*)() const 'IPFlowID::unspecified_bool_type () const'
| `-CompoundStmt 0x55d68c7c9710 <col:44, line:59:5>
|   `-ReturnStmt 0x55d68c7c9700 <line:58:2, col:47>
|     `-ConditionalOperator 0x55d68c7c96d0 <col:9, col:47> 'IPAddress (IPFlowID::*)() const'
|       |-BinaryOperator 0x55d68c7c95f8 <col:9, col:19> 'bool' '||'
|       | |-ImplicitCastExpr 0x55d68c7c95c8 <col:9> 'bool' <IntegralToBoolean>
|       | | `-ImplicitCastExpr 0x55d68c7c9548 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | |   `-CXXMemberCallExpr 0x55d68c7c9528 <col:9> 'uint32_t':'unsigned int'
|       | |     `-MemberExpr 0x55d68c7c94f8 <col:9> '<bound member function type>' .operator unsigned int 0x55d68c48f068
|       | |       `-MemberExpr 0x55d68c7c9488 <col:9> 'const IPAddress' lvalue ->_saddr 0x55d68c7c8818
|       | |         `-CXXThisExpr 0x55d68c7c9478 <col:9> 'const IPFlowID *' implicit this
|       | `-ImplicitCastExpr 0x55d68c7c95e0 <col:19> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55d68c7c95b0 <col:19> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x55d68c7c9590 <col:19> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x55d68c7c9560 <col:19> '<bound member function type>' .operator unsigned int 0x55d68c48f068
|       |         `-MemberExpr 0x55d68c7c94c8 <col:19> 'const IPAddress' lvalue ->_daddr 0x55d68c7c8878
|       |           `-CXXThisExpr 0x55d68c7c94b8 <col:19> 'const IPFlowID *' implicit this
|       |-UnaryOperator 0x55d68c7c9680 <col:28, col:39> 'IPAddress (IPFlowID::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55d68c7c9650 <col:29, col:39> 'IPAddress () const' CXXMethod 0x55d68c7c75e8 'saddr' 'IPAddress () const'
|       `-ImplicitCastExpr 0x55d68c7c96b8 <col:47> 'IPAddress (IPFlowID::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55d68c7c9698 <col:47> 'int' 0
|-CXXMethodDecl 0x55d68c7c75e8 <line:63:5, line:65:5> line:63:15 used saddr 'IPAddress () const'
| `-CompoundStmt 0x55d68c7c97a8 <col:29, line:65:5>
|   `-ReturnStmt 0x55d68c7c9798 <line:64:2, col:9>
|     `-CXXConstructExpr 0x55d68c7c9768 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x55d68c7c9738 <col:9> 'const IPAddress' lvalue ->_saddr 0x55d68c7c8818
|         `-CXXThisExpr 0x55d68c7c9728 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55d68c7c7708 <line:67:5, line:69:5> line:67:14 used sport 'uint16_t () const'
| `-CompoundStmt 0x55d68c7c9828 <col:28, line:69:5>
|   `-ReturnStmt 0x55d68c7c9818 <line:68:2, col:9>
|     `-ImplicitCastExpr 0x55d68c7c9800 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x55d68c7c97d0 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x55d68c7c88d8
|         `-CXXThisExpr 0x55d68c7c97c0 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55d68c7c77c8 <line:71:5, line:73:5> line:71:15 used daddr 'IPAddress () const'
| `-CompoundStmt 0x55d68c7c98c0 <col:29, line:73:5>
|   `-ReturnStmt 0x55d68c7c98b0 <line:72:2, col:9>
|     `-CXXConstructExpr 0x55d68c7c9880 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x55d68c7c9850 <col:9> 'const IPAddress' lvalue ->_daddr 0x55d68c7c8878
|         `-CXXThisExpr 0x55d68c7c9840 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55d68c7c7888 <line:75:5, line:77:5> line:75:14 used dport 'uint16_t () const'
| `-CompoundStmt 0x55d68c7c9940 <col:28, line:77:5>
|   `-ReturnStmt 0x55d68c7c9930 <line:76:2, col:9>
|     `-ImplicitCastExpr 0x55d68c7c9918 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x55d68c7c98e8 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x55d68c7c8938
|         `-CXXThisExpr 0x55d68c7c98d8 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55d68c7c79c8 <line:80:5, line:82:5> line:80:10 set_saddr 'void (IPAddress)'
| |-ParmVarDecl 0x55d68c7c7938 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x55d68c7c9ee8 <col:33, line:82:5>
|   `-CXXOperatorCallExpr 0x55d68c7c9eb0 <line:81:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x55d68c7c9e98 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55d68c7c9cd0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55d68c7c99b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x55d68c7c9968 <col:2> 'IPAddress' lvalue ->_saddr 0x55d68c7c8818
|     | `-CXXThisExpr 0x55d68c7c9958 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55d68c7c9cb8 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x55d68c7c9998 <col:11> 'IPAddress' lvalue ParmVar 0x55d68c7c7938 'a' 'IPAddress'
|-CXXMethodDecl 0x55d68c7c7b78 <line:85:5, line:87:5> line:85:10 set_sport 'void (uint16_t)'
| |-ParmVarDecl 0x55d68c7c7a80 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d68c7c9f98 <col:32, line:87:5>
|   `-BinaryOperator 0x55d68c7c9f78 <line:86:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x55d68c7c9f10 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x55d68c7c88d8
|     | `-CXXThisExpr 0x55d68c7c9f00 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55d68c7c9f60 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c7c9f40 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d68c7c7a80 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d68c7c7cc0 <line:89:5, line:91:5> line:89:10 set_daddr 'void (IPAddress)'
| |-ParmVarDecl 0x55d68c7c7c30 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x55d68c7ca098 <col:33, line:91:5>
|   `-CXXOperatorCallExpr 0x55d68c7ca060 <line:90:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x55d68c7ca048 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55d68c7ca028 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55d68c7c99b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x55d68c7c9fc0 <col:2> 'IPAddress' lvalue ->_daddr 0x55d68c7c8878
|     | `-CXXThisExpr 0x55d68c7c9fb0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55d68c7ca010 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x55d68c7c9ff0 <col:11> 'IPAddress' lvalue ParmVar 0x55d68c7c7c30 'a' 'IPAddress'
|-CXXMethodDecl 0x55d68c7c7e08 <line:94:5, line:96:5> line:94:10 set_dport 'void (uint16_t)'
| |-ParmVarDecl 0x55d68c7c7d78 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d68c7ca148 <col:32, line:96:5>
|   `-BinaryOperator 0x55d68c7ca128 <line:95:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x55d68c7ca0c0 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x55d68c7c8938
|     | `-CXXThisExpr 0x55d68c7ca0b0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55d68c7ca110 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c7ca0f0 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d68c7c7d78 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d68c7c80d0 <line:103:5, line:108:5> line:103:10 assign 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x55d68c7c7ec0 <col:17, col:27> col:27 used saddr 'IPAddress'
| |-ParmVarDecl 0x55d68c7c7f38 <col:34, col:43> col:43 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x55d68c7c7fb0 <col:50, col:60> col:60 used daddr 'IPAddress'
| |-ParmVarDecl 0x55d68c7c8028 <col:67, col:76> col:76 used dport 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55d68c7ca460 <col:83, line:108:5>
|   |-CXXOperatorCallExpr 0x55d68c7ca210 <line:104:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x55d68c7ca1f8 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55d68c7ca1d8 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55d68c7c99b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x55d68c7ca170 <col:2> 'IPAddress' lvalue ->_saddr 0x55d68c7c8818
|   | | `-CXXThisExpr 0x55d68c7ca160 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x55d68c7ca1c0 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x55d68c7ca1a0 <col:11> 'IPAddress' lvalue ParmVar 0x55d68c7c7ec0 'saddr' 'IPAddress'
|   |-CXXOperatorCallExpr 0x55d68c7ca2f8 <line:105:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x55d68c7ca2e0 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55d68c7ca2c0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55d68c7c99b8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x55d68c7ca258 <col:2> 'IPAddress' lvalue ->_daddr 0x55d68c7c8878
|   | | `-CXXThisExpr 0x55d68c7ca248 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x55d68c7ca2a8 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x55d68c7ca288 <col:11> 'IPAddress' lvalue ParmVar 0x55d68c7c7fb0 'daddr' 'IPAddress'
|   |-BinaryOperator 0x55d68c7ca3a8 <line:106:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x55d68c7ca340 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x55d68c7c88d8
|   | | `-CXXThisExpr 0x55d68c7ca330 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x55d68c7ca390 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d68c7ca370 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d68c7c7f38 'sport' 'uint16_t':'unsigned short'
|   `-BinaryOperator 0x55d68c7ca440 <line:107:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x55d68c7ca3d8 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x55d68c7c8938
|     | `-CXXThisExpr 0x55d68c7ca3c8 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55d68c7ca428 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c7ca408 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55d68c7c8028 'dport' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d68c7c81d8 <line:113:5, line:115:5> line:113:14 used reverse 'IPFlowID () const'
| `-CompoundStmt 0x55d68c7caf98 <col:30, line:115:5>
|   `-ReturnStmt 0x55d68c7caf88 <line:114:2, col:48>
|     `-ExprWithCleanups 0x55d68c7caf70 <col:9, col:48> 'IPFlowID'
|       `-CXXConstructExpr 0x55d68c7caf40 <col:9, col:48> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c7caaf8 <col:9, col:48> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x55d68c7ca968 <col:9, col:48> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x55d68c7ca8d8 <col:18> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x55d68c7ca4b0 <col:18> 'const IPAddress' lvalue ->_daddr 0x55d68c7c8878
|             |   `-CXXThisExpr 0x55d68c7ca4a0 <col:18> 'const IPFlowID *' implicit this
|             |-ImplicitCastExpr 0x55d68c7ca908 <col:26> 'uint16_t':'unsigned short' <LValueToRValue>
|             | `-MemberExpr 0x55d68c7ca4f0 <col:26> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x55d68c7c8938
|             |   `-CXXThisExpr 0x55d68c7ca4e0 <col:26> 'const IPFlowID *' implicit this
|             |-CXXConstructExpr 0x55d68c7ca920 <col:34> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x55d68c7ca530 <col:34> 'const IPAddress' lvalue ->_saddr 0x55d68c7c8818
|             |   `-CXXThisExpr 0x55d68c7ca520 <col:34> 'const IPFlowID *' implicit this
|             `-ImplicitCastExpr 0x55d68c7ca950 <col:42> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-MemberExpr 0x55d68c7ca570 <col:42> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x55d68c7c88d8
|                 `-CXXThisExpr 0x55d68c7ca560 <col:42> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55d68c7c8298 <line:116:5, col:59> col:21 rev 'IPFlowID () const' inline
| `-DeprecatedAttr 0x55d68c7c8338 <col:48> "" ""
|-CXXMethodDecl 0x55d68c7c83f8 <line:122:5, col:34> col:23 hashcode 'hashcode_t () const' inline
|-CXXMethodDecl 0x55d68c7c84b8 <line:127:5, col:22> col:12 used unparse 'String () const'
|-CXXConversionDecl 0x55d68c7c8588 <line:129:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55d68c7c8630 <col:51> "" ""
|-CXXMethodDecl 0x55d68c7c86d0 <line:130:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55d68c7c8770 <col:44> "" ""
|-AccessSpecDecl 0x55d68c7c87e0 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x55d68c7c8818 <line:135:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x55d68c7c8878 <line:136:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x55d68c7c88d8 <line:137:5, col:14> col:14 referenced _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55d68c7c8938 <line:138:5, col:14> col:14 referenced _dport 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55d68c7c8a70 <line:140:5, col:26> col:9 unparse 'int (char *) const'
| `-ParmVarDecl 0x55d68c7c89a0 <col:17, col:23> col:23 s 'char *'
|-FriendDecl 0x55d68c7c8d58 <line:141:5, col:76> col:25
| `-FunctionDecl 0x55d68c7c8c98 parent 0x55d68c12a488 <col:5, col:76> col:25 used operator<< 'StringAccum &(StringAccum &, const IPFlowID &)'
|   |-ParmVarDecl 0x55d68c7c8b28 <col:36, col:49> col:49 sa 'StringAccum &'
|   `-ParmVarDecl 0x55d68c7c8bc8 <col:53, col:69> col:69 flow_id 'const IPFlowID &'
|-CXXConstructorDecl 0x55d68c7ca5a0 <line:9:7> col:7 implicit constexpr IPFlowID 'void (const IPFlowID &)' inline default trivial noexcept-unevaluated 0x55d68c7ca5a0
| `-ParmVarDecl 0x55d68c7ca6b8 <col:7> col:7 'const IPFlowID &'
|-CXXConstructorDecl 0x55d68c7ca758 <col:7> col:7 implicit used constexpr IPFlowID 'void (IPFlowID &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c7ca868 <col:7> col:7 used 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55d68c7c8818 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7cabe8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x55d68c7caba0 <col:7> 'IPAddress' xvalue ._saddr 0x55d68c7c8818
| |     `-CXXStaticCastExpr 0x55d68c7cab70 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c7cab40 <col:7> 'IPFlowID' lvalue ParmVar 0x55d68c7ca868 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55d68c7c8878 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55d68c7cace8 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x55d68c7caca0 <col:7> 'IPAddress' xvalue ._daddr 0x55d68c7c8878
| |     `-CXXStaticCastExpr 0x55d68c7cac70 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c7cac40 <col:7> 'IPFlowID' lvalue ParmVar 0x55d68c7ca868 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55d68c7c88d8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55d68c7cade8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7cada0 <col:7> 'uint16_t':'unsigned short' xvalue ._sport 0x55d68c7c88d8
| |     `-CXXStaticCastExpr 0x55d68c7cad70 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c7cad40 <col:7> 'IPFlowID' lvalue ParmVar 0x55d68c7ca868 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55d68c7c8938 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55d68c7caed0 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x55d68c7cae88 <col:7> 'uint16_t':'unsigned short' xvalue ._dport 0x55d68c7c8938
| |     `-CXXStaticCastExpr 0x55d68c7cae58 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c7cae28 <col:7> 'IPFlowID' lvalue ParmVar 0x55d68c7ca868 '' 'IPFlowID &&'
| `-CompoundStmt 0x55d68c7caf30 <col:7>
`-CXXDestructorDecl 0x55d68c7ca9b8 <col:7> col:7 implicit referenced ~IPFlowID 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  NonVirtualBaseLLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c6266b0 prev 0x55d68c61d4f0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c6267a8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55d68c626848 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55d68c62d610 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d68c62d9f8 <col:11>
|-CXXConstructorDecl 0x55d68c62d6f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c62d7d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55d68c62e140 <col:11>
|-CXXConstructorDecl 0x55d68c62d878 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c62d988 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55d68c62f998 <col:11>
|-CXXDestructorDecl 0x55d68c62eca8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d68c335858 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c335968 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55d68c336230 <col:11>
|   `-ReturnStmt 0x55d68c336220 <col:11>
|     `-UnaryOperator 0x55d68c336208 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c3361f8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55d68c3359d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55d68c335ae8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x55d68c6c3cd0 <col:11>
    `-ReturnStmt 0x55d68c6c3cc0 <col:11>
      `-UnaryOperator 0x55d68c6c3ca8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55d68c6c3c98 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c61c6a8 prev 0x55d68c61c3b8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c61c7a0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55d68c61c830 <col:19, col:25> col:19 public
|-TypedefDecl 0x55d68c61c868 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55d68c281a30 'int32_t' sugar
|   |-Typedef 0x55d68c193328 'int32_t'
|   `-TypedefType 0x55d68c16c510 '__int32_t' sugar
|     |-Typedef 0x55d68c16c128 '__int32_t'
|     `-BuiltinType 0x55d68c12a580 'int'
|-TypedefDecl 0x55d68c61c8d0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55d68c281bf0 'int64_t' sugar
|   |-Typedef 0x55d68c193390 'int64_t'
|   `-TypedefType 0x55d68c16c630 '__int64_t' sugar
|     |-Typedef 0x55d68c16c208 '__int64_t'
|     `-BuiltinType 0x55d68c12a5a0 'long'
|-EnumDecl 0x55d68c61c928 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55d68c61caa0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55d68c61ca80 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55d68c61ca58 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55d68c61ca40 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55d68c61ca10 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55d68c61cb98 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55d68c61cb78 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55d68c61cb50 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55d68c61cb38 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55d68c61cb10 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55d68c61caf0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55d68c61cbe8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55d68c61ccf0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d240 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61ccd0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55d68c61ccb0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55d68c61cd80 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d258 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61cd60 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55d68c61cd40 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55d68c61ce10 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d270 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61cdf0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55d68c61cdd0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55d68c61cea0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d288 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61ce80 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55d68c61ce60 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55d68c61cf30 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d2a0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61cf10 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55d68c61cef0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55d68c61cfc0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d2b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61cfa0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55d68c61cf80 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55d68c61d050 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d2d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61d030 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55d68c61d010 <col:26> 'int' EnumConstant 0x55d68c61ccf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55d68c61d120 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55d68c61d2e8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c61d100 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55d68c61d0e0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55d68c61d0a0 <col:27> 'int' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55d68c61d0c0 <col:44> 'int' EnumConstant 0x55d68c61cfc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55d68c61d1f0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55d68c61d300 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c61d1d0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55d68c61d1b0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55d68c61d170 <col:27> 'int' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55d68c61d190 <col:44> 'int' EnumConstant 0x55d68c61cea0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55d68c61d318 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55d68c61d420 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55d68c61d470 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c61d400 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55d68c61d3e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55d68c61d498 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55d68c281660 'uninitialized_type'
|   `-CXXRecord 0x55d68c2815c8 'uninitialized_type'
|-CXXRecordDecl 0x55d68c61d4f0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55d68c61d600 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62da08 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d68c62db28 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55d68c62dae0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55d68c62da70 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c62da60 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55d68c62daa0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55d68c62db10 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55d68c62dac0 <col:19> 'int' 0
|-CXXConstructorDecl 0x55d68c61d848 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55d68c61d6c0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55d68c61d738 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d68c629340 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c629320 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62db40 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d68c62dc90 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55d68c62dc18 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55d68c62dba8 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c62db98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d68c62dc60 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55d68c62dc48 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d68c62dbd8 <col:16> 'long' lvalue ParmVar 0x55d68c61d6c0 'sec' 'long'
|     `-ImplicitCastExpr 0x55d68c62dc78 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c62dbf8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c61d738 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d68c61daa8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55d68c61d918 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55d68c61d990 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d68c629378 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c629358 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62dca8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d68c62dde0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55d68c62dd80 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55d68c62dd10 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c62dd00 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d68c62ddb0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c62dd40 <col:16> 'int' lvalue ParmVar 0x55d68c61d918 'sec' 'int'
|     `-ImplicitCastExpr 0x55d68c62ddc8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c62dd60 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c61d990 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d68c61dd08 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55d68c61db78 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55d68c61dbf0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d68c6293b0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c629390 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62ddf8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d68c62df48 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55d68c62ded0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55d68c62de60 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c62de50 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d68c62df18 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55d68c62df00 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d68c62de90 <col:16> 'unsigned long' lvalue ParmVar 0x55d68c61db78 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55d68c62df30 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c62deb0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c61dbf0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d68c61eea0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55d68c61ddd8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55d68c61de50 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d68c6293e8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c6293c8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62df60 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d68c62e0b0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55d68c62e038 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55d68c62dfc8 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c62dfb8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d68c62e080 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55d68c62e068 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55d68c62dff8 <col:16> 'unsigned int' lvalue ParmVar 0x55d68c61ddd8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55d68c62e098 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c62e018 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c61de50 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55d68c61f000 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55d68c61ef70 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55d68c61f198 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55d68c61f0d8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55d68c61f3c8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55d68c61f2d0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55d68c61f578 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55d68c61f4b8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62e150 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55d68c62e0c8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55d68c61f4b8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55d68c62e1b0 <col:19, line:214:5>
|-CXXConstructorDecl 0x55d68c61f748 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55d68c61f688 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62e1c0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55d68c62e270 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55d68c62e248 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55d68c62e218 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55d68c61f688 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55d68c61f938 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55d68c61f8b0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55d68c61c450 'Timestamp'
|   | `-CXXRecord 0x55d68c61c6a8 'Timestamp'
|   `-ParenType 0x55d68c61f850 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55d68c61f820 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55d68c61c9f0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55d68c61c868 'seconds_type'
|         `-TypedefType 0x55d68c281a30 'int32_t' sugar
|           |-Typedef 0x55d68c193328 'int32_t'
|           `-TypedefType 0x55d68c16c510 '__int32_t' sugar
|             |-Typedef 0x55d68c16c128 '__int32_t'
|             `-BuiltinType 0x55d68c12a580 'int'
|-CXXConversionDecl 0x55d68c61fa78 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55d68c61fb48 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55d68c62e378 <col:37, line:231:5>
|   `-ReturnStmt 0x55d68c62e368 <line:227:9, col:23>
|     `-BinaryOperator 0x55d68c62e348 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55d68c62e318 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d68c62e2c8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55d68c626848
|       |   `-MemberExpr 0x55d68c62e298 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55d68c6277f8
|       |     `-CXXThisExpr 0x55d68c62e288 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d68c62e330 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55d68c62e2f8 <col:23> 'int' 0
|-CXXMethodDecl 0x55d68c61fc08 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55d68c61fcc8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c61fd88 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c61fe48 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c61ff08 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55d68c620078 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55d68c61ffb8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55d68c6201c0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55d68c620130 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c620288 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55d68c620328 <col:54> "" ""
|-CXXMethodDecl 0x55d68c6203b8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55d68c620458 <col:54> "" ""
|-CXXMethodDecl 0x55d68c6204e8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55d68c620588 <col:54> "" ""
|-CXXMethodDecl 0x55d68c620688 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55d68c620758 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55d68c620888 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55d68c620980 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55d68c620ab8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55d68c62e590 <col:39, line:271:5>
|   `-ReturnStmt 0x55d68c62e580 <line:267:9, col:61>
|     `-CallExpr 0x55d68c62e520 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55d68c62e508 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d68c62e390 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55d68c627b28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55d68c62e550 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d68c62e3f0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55d68c626848
|       |   `-MemberExpr 0x55d68c62e3c0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55d68c6277f8
|       |     `-CXXThisExpr 0x55d68c62e3b0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d68c62e568 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55d68c62e490 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55d68c62e460 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55d68c62e420 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55d68c62e478 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55d68c62e440 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cfc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c620b78 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55d68c62e750 <col:39, line:279:5>
|   `-ReturnStmt 0x55d68c62e740 <line:275:9, col:61>
|     `-CallExpr 0x55d68c62e6e0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55d68c62e6c8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d68c62e5a8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55d68c627b28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55d68c62e710 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d68c62e608 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55d68c626848
|       |   `-MemberExpr 0x55d68c62e5d8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55d68c6277f8
|       |     `-CXXThisExpr 0x55d68c62e5c8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d68c62e728 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55d68c62e6a8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55d68c62e678 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55d68c62e638 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55d68c62e690 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55d68c62e658 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cea0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c620c38 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55d68c62e8e8 <col:39, line:287:5>
|   `-ReturnStmt 0x55d68c62e8d8 <line:283:9, col:53>
|     `-BinaryOperator 0x55d68c62e8b8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55d68c62e888 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55d68c62e7a8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55d68c626848
|       |   `-MemberExpr 0x55d68c62e778 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55d68c6277f8
|       |     `-CXXThisExpr 0x55d68c62e768 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55d68c62e8a0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55d68c62e868 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d68c62e848 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55d68c62e818 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d68c62e7d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61ccf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d68c62e830 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d68c62e7f8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c620d28 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55d68c62fb80 <col:40, line:293:5>
|   |-DeclStmt 0x55d68c62ea30 <line:291:9, col:48>
|   | `-VarDecl 0x55d68c62e910 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55d68c62ea10 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55d68c62e9b8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55d68c62e988 <col:22> '<bound member function type>' ->subsec 0x55d68c61fcc8
|   |     |   `-CXXThisExpr 0x55d68c62e978 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55d68c62e9f8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55d68c62e9d8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d120 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d68c62fb70 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55d68c62fb58 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c62fb28 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c62fb10 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55d68c62faf0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55d68c62fac0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55d68c62f858 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55d68c62f840 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55d68c62ea48 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55d68c62e910 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55d68c62fa60 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55d68c62fa48 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55d68c62fa18 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55d68c62f870 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55d68c62f7e0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55d68c62f7c8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55d68c62f778 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d68c61c5f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55d68c62f718 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55d68c62ea78 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55d68c62ea68 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55d68c62f760 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55d68c62f748 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55d68c62ef38 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55d68c62eaa0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55d68c62eb30 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55d68c62eb00 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55d68c62eac0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d120 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55d68c62eb18 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55d68c62eae0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55d68c62e910 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55d68c62fa90 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55d68c62f828 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55d68c62f818 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55d68c620de8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55d68c6300d8 <col:40, line:302:5>
|   |-DeclStmt 0x55d68c62fcd0 <line:297:9, col:48>
|   | `-VarDecl 0x55d68c62fbb0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55d68c62fcb0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55d68c62fc58 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55d68c62fc28 <col:22> '<bound member function type>' ->subsec 0x55d68c61fcc8
|   |     |   `-CXXThisExpr 0x55d68c62fc18 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55d68c62fc98 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55d68c62fc78 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d1f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d68c6300c8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55d68c6300b0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c630080 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c630068 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55d68c630048 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55d68c630018 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55d68c62ff40 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55d68c62ff28 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55d68c62fce8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55d68c62fbb0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55d68c62ffb8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55d68c62ffa0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55d68c62ff70 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55d68c62ff58 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55d68c62fec8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55d68c62feb0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55d68c62fe90 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d68c61c5f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55d68c62fe30 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55d68c62fd18 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55d68c62fd08 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55d68c62fe78 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55d68c62fe60 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55d68c62fdf0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55d68c62fd40 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55d68c62fdd0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55d68c62fda0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55d68c62fd60 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d1f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55d68c62fdb8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55d68c62fd80 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55d68c62fbb0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55d68c62ffe8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55d68c62ff10 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55d68c62ff00 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55d68c620ea8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55d68c630160 <col:40, line:306:5>
|   `-ReturnStmt 0x55d68c630150 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55d68c630120 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55d68c630108 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c6300f8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55d68c621048 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55d68c620f58 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55d68c621218 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55d68c621120 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55d68c621308 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55d68c621478 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55d68c6213b8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55d68c6302a8 <col:56, line:320:5>
|   `-ReturnStmt 0x55d68c630298 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55d68c630280 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c630250 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c630238 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d68c6301f8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d68c6301c8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d68c630188 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d68c6213b8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55d68c6301e0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55d68c6301a8 <col:31> 'int' 0
|-CXXMethodDecl 0x55d68c6216b8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c621530 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c6215a8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c630478 <col:72, line:326:5>
|   `-ReturnStmt 0x55d68c630468 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55d68c630450 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c630420 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c630408 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d68c6303c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d68c6303b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d68c6302d0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d68c621530 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55d68c630370 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55d68c630358 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d68c6302f0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d68c625fa0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55d68c630398 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55d68c630310 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c6215a8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c621868 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55d68c621778 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55d68c630b40 <col:56, line:337:5>
|   |-DeclStmt 0x55d68c630778 <line:329:9, col:51>
|   | `-VarDecl 0x55d68c6304a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55d68c630760 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55d68c630730 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55d68c630718 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55d68c630700 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55d68c6306d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55d68c6306b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55d68c6306a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55d68c630590 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55d68c630930 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55d68c6307e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55d68c626848
|   | | `-MemberExpr 0x55d68c6307b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55d68c6277f8
|   | |   `-DeclRefExpr 0x55d68c630790 <col:9> 'Timestamp' lvalue Var 0x55d68c6304a0 't' 'Timestamp'
|   | `-BinaryOperator 0x55d68c630910 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55d68c6308e0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55d68c630810 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d68c621778 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55d68c6308f8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55d68c6308c0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55d68c6308a0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55d68c630870 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55d68c630830 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55d68c630888 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55d68c630850 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cfc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d68c630b28 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55d68c630af8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55d68c630ae0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55d68c630ac0 <col:16> 'Timestamp' lvalue Var 0x55d68c6304a0 't' 'Timestamp'
|-CXXMethodDecl 0x55d68c621a30 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c621920 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c621998 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c630cf8 <col:72, line:343:5>
|   `-ReturnStmt 0x55d68c630ce8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55d68c630cd0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c630ca0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c630c88 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d68c630c48 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d68c630c30 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d68c630b78 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d68c621920 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55d68c630bf0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55d68c630bd8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d68c630b98 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d68c6260e8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55d68c630c18 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55d68c630bb8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c621998 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c621b80 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55d68c621af0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55d68c631140 <col:56, line:354:5>
|   |-DeclStmt 0x55d68c630ee8 <line:346:9, col:51>
|   | `-VarDecl 0x55d68c630d20 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55d68c630ed0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55d68c630ea0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55d68c630e88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55d68c630e70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55d68c630e40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55d68c630e28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55d68c630e10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55d68c630de0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55d68c6310a0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55d68c630f50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55d68c626848
|   | | `-MemberExpr 0x55d68c630f20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55d68c6277f8
|   | |   `-DeclRefExpr 0x55d68c630f00 <col:9> 'Timestamp' lvalue Var 0x55d68c630d20 't' 'Timestamp'
|   | `-BinaryOperator 0x55d68c631080 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55d68c631050 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55d68c630f80 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d68c621af0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55d68c631068 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55d68c631030 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55d68c631010 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55d68c630fe0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55d68c630fa0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55d68c630ff8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55d68c630fc0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cea0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d68c631128 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55d68c6310f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55d68c6310e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55d68c6310c0 <col:16> 'Timestamp' lvalue Var 0x55d68c630d20 't' 'Timestamp'
|-CXXMethodDecl 0x55d68c621d48 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c621c38 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c621cb0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c6312f8 <col:72, line:360:5>
|   `-ReturnStmt 0x55d68c6312e8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55d68c6312d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c6312a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c631288 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d68c631248 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55d68c631230 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d68c631178 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d68c621c38 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55d68c6311f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55d68c6311d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55d68c631198 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d68c626230 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55d68c631218 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55d68c6311b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c621cb0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c621e98 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55d68c621e08 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55d68c63dc68 <col:56, line:371:5>
|   |-DeclStmt 0x55d68c6314e8 <line:363:9, col:51>
|   | `-VarDecl 0x55d68c631320 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55d68c6314d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55d68c6314a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55d68c631488 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55d68c631470 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55d68c631440 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55d68c631428 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55d68c631410 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55d68c6313e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55d68c63dbc8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55d68c631550 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55d68c626848
|   | | `-MemberExpr 0x55d68c631520 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55d68c6277f8
|   | |   `-DeclRefExpr 0x55d68c631500 <col:9> 'Timestamp' lvalue Var 0x55d68c631320 't' 'Timestamp'
|   | `-CallExpr 0x55d68c63db68 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55d68c63db50 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55d68c631580 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55d68c627b28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55d68c63db98 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55d68c6315a0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d68c621e08 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55d68c63dbb0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55d68c63db30 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55d68c63db00 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55d68c6315c0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61ccf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55d68c63db18 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55d68c6315e0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55d68c63dc50 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55d68c63dc20 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55d68c63dc08 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55d68c63dbe8 <col:16> 'Timestamp' lvalue Var 0x55d68c631320 't' 'Timestamp'
|-CXXMethodDecl 0x55d68c621f88 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55d68c63dda8 <col:39, line:377:5>
|   `-ReturnStmt 0x55d68c63dd98 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55d68c63dd80 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c63dd50 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c63dd38 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55d68c63dcf8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55d68c63dca0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55d68c63dce0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55d68c63dcc0 <col:29> 'int' 1
|-CXXMethodDecl 0x55d68c622048 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55d68c63de88 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55d68c63de40 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55d68c63ddd0 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c63ddc0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55d68c63de00 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55d68c63de70 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55d68c63de20 <col:19> 'int' 0
|-CXXMethodDecl 0x55d68c622248 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6220f8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c622170 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d68c629420 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c629400 <col:60> 'int' 0
| `-CompoundStmt 0x55d68c63e080 <col:63, line:395:5>
|   `-BinaryOperator 0x55d68c63e060 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55d68c63dee0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55d68c626848
|     | `-MemberExpr 0x55d68c63deb0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55d68c6277f8
|     |   `-CXXThisExpr 0x55d68c63dea0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55d68c63e040 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55d68c63dfd0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55d68c63df70 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55d68c63df58 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55d68c63df40 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55d68c63df10 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d68c6220f8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55d68c63dfb8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55d68c63df98 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55d68c63e028 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55d68c63e010 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55d68c63dff0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c622170 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c622418 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d68c622308 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c622380 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63e1d8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55d68c63e190 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55d68c63e0a8 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c63e098 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d68c63e1c0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c63e0d8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d68c622308 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55d68c63e150 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55d68c63e138 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d68c63e0f8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d68c6260e8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55d68c63e178 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55d68c63e118 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c622380 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c6225e8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6224d8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c622550 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63e330 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55d68c63e2e8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55d68c63e200 <col:9> '<bound member function type>' ->assign 0x55d68c622248
|     | `-CXXThisExpr 0x55d68c63e1f0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55d68c63e318 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55d68c63e230 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55d68c6224d8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55d68c63e2a8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55d68c63e290 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d68c63e250 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55d68c626230 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55d68c63e2d0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55d68c63e270 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c622550 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c6227b8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6226a8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c622720 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55d68c629458 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55d68c629438 <col:57> 'int' 0
| `-DeprecatedAttr 0x55d68c622868 <col:75> "" ""
|-CXXMethodDecl 0x55d68c6229f8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d68c6228e8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c622960 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c622aa8 <col:74> "" ""
|-CXXMethodDecl 0x55d68c622c38 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55d68c622b28 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55d68c622ba0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c622ce8 <col:74> "" ""
|-CXXMethodDecl 0x55d68c622d78 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55d68c622e18 <col:42> "" ""
|-CXXMethodDecl 0x55d68c625650 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55d68c625530 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55d68c6255b0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55d68c625720 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d68c6257e0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55d68c625880 <col:20>
| `-OptimizeNoneAttr 0x55d68c6258d8 <col:30>
|-CXXMethodDecl 0x55d68c625920 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d68c6259e0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55d68c625aa0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d68c625b60 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55d68c625c20 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d68c625ce0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55d68c625da0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55d68c625e60 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55d68c625fa0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d68c625f10 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63e478 <col:58, line:512:5>
|   `-ReturnStmt 0x55d68c63e468 <line:511:9, col:53>
|     `-BinaryOperator 0x55d68c63e448 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55d68c63e418 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d68c63e348 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c625f10 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d68c63e430 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d68c63e3f8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d68c63e3d8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55d68c63e3a8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d68c63e368 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d68c63e3c0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d68c63e388 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cfc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c6260e8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d68c626058 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63e5c0 <col:58, line:516:5>
|   `-ReturnStmt 0x55d68c63e5b0 <line:515:9, col:53>
|     `-BinaryOperator 0x55d68c63e590 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55d68c63e560 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d68c63e490 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c626058 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d68c63e578 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d68c63e540 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d68c63e520 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55d68c63e4f0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d68c63e4b0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d68c63e508 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d68c63e4d0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cea0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c626230 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d68c6261a0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63e708 <col:58, line:520:5>
|   `-ReturnStmt 0x55d68c63e6f8 <line:519:9, col:53>
|     `-BinaryOperator 0x55d68c63e6d8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55d68c63e6a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d68c63e5d8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c6261a0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d68c63e6c0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d68c63e688 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55d68c63e668 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55d68c63e638 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d68c63e5f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61ccf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d68c63e650 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d68c63e618 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c626378 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d68c6262e8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63e850 <col:60, line:524:5>
|   `-ReturnStmt 0x55d68c63e840 <line:523:9, col:55>
|     `-BinaryOperator 0x55d68c63e820 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55d68c63e7f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d68c63e720 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c6262e8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d68c63e808 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d68c63e7d0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55d68c63e7b0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55d68c63e780 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d68c63e740 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d68c63e798 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d68c63e760 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cfc0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c6264c0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d68c626430 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63e998 <col:60, line:528:5>
|   `-ReturnStmt 0x55d68c63e988 <line:527:9, col:55>
|     `-BinaryOperator 0x55d68c63e968 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55d68c63e938 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d68c63e868 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c626430 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d68c63e950 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d68c63e918 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55d68c63e8f8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55d68c63e8c8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d68c63e888 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d68c63e8e0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d68c63e8a8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61cea0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55d68c626608 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55d68c626578 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63eae0 <col:60, line:532:5>
|   `-ReturnStmt 0x55d68c63ead0 <line:531:9, col:55>
|     `-BinaryOperator 0x55d68c63eab0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55d68c63ea80 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55d68c63e9b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c626578 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55d68c63ea98 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55d68c63ea60 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55d68c63ea40 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55d68c63ea10 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55d68c63e9d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61ccf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55d68c63ea28 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55d68c63e9f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55d68c61d050 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55d68c6266b0 prev 0x55d68c61d4f0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55d68c6267a8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55d68c626848 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55d68c62d610 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55d68c62d9f8 <col:11>
| |-CXXConstructorDecl 0x55d68c62d6f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d68c62d7d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55d68c62e140 <col:11>
| |-CXXConstructorDecl 0x55d68c62d878 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d68c62d988 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55d68c62f998 <col:11>
| |-CXXDestructorDecl 0x55d68c62eca8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55d68c335858 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55d68c335968 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55d68c336230 <col:11>
| |   `-ReturnStmt 0x55d68c336220 <col:11>
| |     `-UnaryOperator 0x55d68c336208 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55d68c3361f8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55d68c3359d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x55d68c335ae8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x55d68c6c3cd0 <col:11>
|     `-ReturnStmt 0x55d68c6c3cc0 <col:11>
|       `-UnaryOperator 0x55d68c6c3ca8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55d68c6c3c98 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x55d68c6268b0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55d68c6269b0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55d68c626bb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c626990 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d68c626970 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d68c626a40 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55d68c626bc8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c626a20 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55d68c626a00 <col:23> 'int' 1
| |-EnumConstantDecl 0x55d68c626ad0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55d68c626be0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c626ab0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55d68c626a90 <col:23> 'int' 2
| `-EnumConstantDecl 0x55d68c626b60 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55d68c626bf8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c626b40 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55d68c626b20 <col:27> 'int' 3
|-CXXMethodDecl 0x55d68c626c38 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55d68c626d00 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55d68c626f08 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55d68c626db0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55d68c626e30 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55d68c629470 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55d68c627118 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55d68c626fc8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55d68c627040 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6271e8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55d68c6272a8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55d68c627418 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55d68c627358 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6274e0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d68c6275a0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55d68c627660 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55d68c627720 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55d68c6277c0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55d68c6277f8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55d68c627868 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55d68c63eaf8 <col:27, line:684:5>
|-CXXMethodDecl 0x55d68c627928 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55d68c63eb08 <col:27, line:696:5>
|-CXXMethodDecl 0x55d68c627b28 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c6279d8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55d68c627a50 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63ec90 <col:66, line:700:5>
|   `-ReturnStmt 0x55d68c63ec80 <line:699:9, col:31>
|     `-CallExpr 0x55d68c63ec20 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55d68c63ec08 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d68c63ebb8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55d68c4a9ed8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55d68c63ec50 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55d68c63eb78 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d68c6279d8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55d68c63ec68 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55d68c63eb98 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c627a50 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c627e98 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55d68c627be8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55d68c627c60 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55d68c627cd8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55d68c627d50 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c63efe0 <col:64, line:707:5>
|   |-DeclStmt 0x55d68c63ed20 <line:704:9, col:24>
|   | `-VarDecl 0x55d68c63ecb8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55d68c63ef30 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55d68c63ed38 <col:9> 'int32_t':'int' lvalue ParmVar 0x55d68c627c60 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55d68c63ef18 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55d68c63eeb0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55d68c63ee98 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55d68c63ee18 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55d68c4af1a8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55d68c63eee8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55d68c63edb8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55d68c627cd8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55d68c63ef00 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55d68c63edd8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c627d50 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55d68c63edf8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55d68c63ecb8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55d68c63efc0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55d68c63ef50 <col:9> 'int32_t':'int' lvalue ParmVar 0x55d68c627be8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55d68c63efa8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55d68c63ef90 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55d68c63ef70 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55d68c63ecb8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55d68c628138 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55d68c627f68 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55d68c627fe0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55d68c628058 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55d68c6283d8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55d68c628200 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55d68c628278 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55d68c6282f0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55d68c628568 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55d68c6284a0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55d68c628768 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55d68c628620 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55d68c628698 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55d68c628a38 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55d68c628978 parent 0x55d68c12a488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d68c628828 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55d68c6288a0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55d68c628c58 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55d68c628b98 parent 0x55d68c12a488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d68c628a88 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55d68c628b00 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55d68c628e20 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55d68c628d68 parent 0x55d68c12a488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55d68c628ca8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55d68c6290a8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55d68c628fe8 parent 0x55d68c12a488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d68c628e98 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55d68c628f10 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55d68c6292c8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55d68c629208 parent 0x55d68c12a488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55d68c6290f8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55d68c629170 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55d68c62eb50 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c62ec38 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62f6a8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55d68c62f660 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55d68c6277f8
| |     `-DeclRefExpr 0x55d68c62f640 <col:7> 'const Timestamp' lvalue ParmVar 0x55d68c62ec38 '' 'const Timestamp &'
| `-CompoundStmt 0x55d68c62f708 <col:7>
|-CXXConstructorDecl 0x55d68c62edb8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c62eec8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55d68c6277f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55d68c62f9a8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55d68c62f950 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55d68c6277f8
| |     `-CXXStaticCastExpr 0x55d68c62f920 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c62f8f0 <col:7> 'Timestamp' lvalue ParmVar 0x55d68c62eec8 '' 'Timestamp &&'
| `-CompoundStmt 0x55d68c62fa08 <col:7>
|-CXXDestructorDecl 0x55d68c62ef78 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55d68c3356a8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c3357b8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55d68c3362a8 <col:7>
|   |-CXXMemberCallExpr 0x55d68c336248 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55d68c336188 <col:7> '<bound member function type>' .operator= 0x55d68c335858
|   | | `-MemberExpr 0x55d68c336098 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55d68c6277f8
|   | |   `-CXXThisExpr 0x55d68c336088 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55d68c336158 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55d68c6277f8
|   |   `-DeclRefExpr 0x55d68c336138 <col:7> 'const Timestamp' lvalue ParmVar 0x55d68c3357b8 '' 'const Timestamp &'
|   `-ReturnStmt 0x55d68c336298 <col:7>
|     `-UnaryOperator 0x55d68c336280 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55d68c336270 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55d68c335b58 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55d68c335c68 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x55d68c6c3d48 <col:7>
    |-CXXMemberCallExpr 0x55d68c6c3ce8 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x55d68c6c3c50 <col:7> '<bound member function type>' .operator= 0x55d68c3359d8
    | | `-MemberExpr 0x55d68c6c3b20 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55d68c6277f8
    | |   `-CXXThisExpr 0x55d68c6c3b10 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x55d68c6c3c20 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55d68c6277f8
    |   `-CXXStaticCastExpr 0x55d68c6c3bf0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x55d68c6c3bc0 <col:7> 'Timestamp' lvalue ParmVar 0x55d68c335c68 '' 'Timestamp &&'
    `-ReturnStmt 0x55d68c6c3d38 <col:7>
      `-UnaryOperator 0x55d68c6c3d20 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55d68c6c3d10 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c6c0d28 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55d68c6c0e58 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x55d68c6c1948 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c6ab558 prev 0x55d68c68d9a0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55d68c6ab650 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x55d68c6ab6e0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x55d68c6ab740 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x55d68c6ab7e8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x55d68c6ab908 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x55d68c6abaa8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x55d68c6ab9e8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x55d68c6abcf8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x55d68c6abb68 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x55d68c6abbe8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x55d68c6abe88 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x55d68c6abdc0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x55d68c6ac008 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x55d68c6abf48 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x55d68c6ac1b8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x55d68c6ac0f8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x55d68c6ac2b0 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x55d68c6c1b20 <col:21, line:58:5>
|   `-IfStmt 0x55d68c6c1b08 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x55d68c6c1a70 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x55d68c6c1a40 <col:6> '<bound member function type>' ->scheduled 0x55d68c6acb08
|     |   `-ImplicitCastExpr 0x55d68c6c1a90 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x55d68c6c1a30 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x55d68c6c1ae8 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x55d68c6c1ab8 <col:6> '<bound member function type>' ->unschedule 0x55d68c6c01d0
|         `-CXXThisExpr 0x55d68c6c1aa8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x55d68c6ac3b0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x55d68c6c1cc0 <col:26, line:65:5>
|   |-BinaryOperator 0x55d68c6c1be0 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55d68c6c1b78 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55d68c6c0e58
|   | | `-MemberExpr 0x55d68c6c1b48 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55d68c6c0f18
|   | |   `-CXXThisExpr 0x55d68c6c1b38 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55d68c6c1bc8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55d68c6c1ba8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55d68c6c1378 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55d68c6c1ca0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x55d68c6c1c10 <col:2> 'void *' lvalue ->_thunk 0x55d68c6c0f98
|     | `-CXXThisExpr 0x55d68c6c1c00 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x55d68c6c1c78 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x55d68c6c1c40 <col:20> 'int' 1
|-CXXMethodDecl 0x55d68c6ac4f0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x55d68c6ac460 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x55d68c6c1e20 <col:52, line:71:5>
|   |-CStyleCastExpr 0x55d68c6c1d10 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x55d68c6c1ce0 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x55d68c6ac460 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x55d68c6c1e00 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x55d68c6c1dd0 <col:2> '<bound member function type>' ->assign 0x55d68c6ac3b0
|       `-CXXThisExpr 0x55d68c6c1dc0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x55d68c6ac6c0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x55d68c6ac5a8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x55d68c6ac628 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x55d68c6c1fa0 <col:58, line:79:5>
|   |-BinaryOperator 0x55d68c6c1ee8 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55d68c6c1e80 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55d68c6c0e58
|   | | `-MemberExpr 0x55d68c6c1e50 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55d68c6c0f18
|   | |   `-CXXThisExpr 0x55d68c6c1e40 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55d68c6c1ed0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x55d68c6c1eb0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x55d68c6ac5a8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x55d68c6c1f80 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55d68c6c1f18 <col:2> 'void *' lvalue ->_thunk 0x55d68c6c0f98
|     | `-CXXThisExpr 0x55d68c6c1f08 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55d68c6c1f68 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55d68c6c1f48 <col:11> 'void *' lvalue ParmVar 0x55d68c6ac628 'user_data' 'void *'
|-CXXMethodDecl 0x55d68c6ac810 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x55d68c6ac780 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x55d68c6c2138 <col:35, line:87:5>
|   |-BinaryOperator 0x55d68c6c2068 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55d68c6c2000 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55d68c6c0e58
|   | | `-MemberExpr 0x55d68c6c1fd0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55d68c6c0f18
|   | |   `-CXXThisExpr 0x55d68c6c1fc0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55d68c6c2050 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55d68c6c2030 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55d68c6c1550 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55d68c6c2118 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55d68c6c2098 <col:2> 'void *' lvalue ->_thunk 0x55d68c6c0f98
|     | `-CXXThisExpr 0x55d68c6c2088 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55d68c6c2100 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55d68c6c20e8 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x55d68c6c20c8 <col:11> 'Element *' lvalue ParmVar 0x55d68c6ac780 'element' 'Element *'
|-CXXMethodDecl 0x55d68c6ac958 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x55d68c6ac8c8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x55d68c6c22d0 <col:29, line:94:5>
|   |-BinaryOperator 0x55d68c6c2200 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55d68c6c2198 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55d68c6c0e58
|   | | `-MemberExpr 0x55d68c6c2168 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55d68c6c0f18
|   | |   `-CXXThisExpr 0x55d68c6c2158 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55d68c6c21e8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55d68c6c21c8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55d68c6c1728 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55d68c6c22b0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55d68c6c2230 <col:2> 'void *' lvalue ->_thunk 0x55d68c6c0f98
|     | `-CXXThisExpr 0x55d68c6c2220 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55d68c6c2298 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55d68c6c2280 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x55d68c6c2260 <col:11> 'Task *' lvalue ParmVar 0x55d68c6ac8c8 'task' 'Task *'
|-CXXMethodDecl 0x55d68c6aca48 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x55d68c6c23b0 <col:37, line:100:5>
|   `-ReturnStmt 0x55d68c6c23a0 <line:99:2, col:19>
|     `-BinaryOperator 0x55d68c6c2380 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x55d68c6c2350 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x55d68c6c2300 <col:9> 'Element *const' lvalue ->_owner 0x55d68c6c0ff8
|       |   `-CXXThisExpr 0x55d68c6c22f0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x55d68c6c2368 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x55d68c6c2330 <col:19> 'int' 0
|-CXXMethodDecl 0x55d68c6acb08 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x55d68c6c2470 <col:35, line:105:5>
|   `-ReturnStmt 0x55d68c6c2460 <line:104:2, col:23>
|     `-BinaryOperator 0x55d68c6c2440 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x55d68c6c2428 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x55d68c6c23d8 <col:9> 'const int' lvalue ->_schedpos1 0x55d68c6c0c78
|       |   `-CXXThisExpr 0x55d68c6c23c8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x55d68c6c2408 <col:23> 'int' 0
|-CXXMethodDecl 0x55d68c6acbc8 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x55d68c6c24d8 <col:51, line:118:5>
|   `-ReturnStmt 0x55d68c6c24c8 <line:117:2, col:9>
|     `-MemberExpr 0x55d68c6c2498 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|       `-CXXThisExpr 0x55d68c6c2488 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55d68c6acc88 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x55d68c6c2a30 <col:37, line:136:5>
|   `-IfStmt 0x55d68c6c2a08 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x55d68c6c2598 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x55d68c6c2580 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x55d68c6c2560 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x55d68c6c2530 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x55d68c61fa78
|     |       `-MemberExpr 0x55d68c6c2500 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|     |         `-CXXThisExpr 0x55d68c6c24f0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x55d68c6c2978 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x55d68c6c2960 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x55d68c6c2930 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x55d68c6c2918 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x55d68c6c28e0 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x55d68c6c28c8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x55d68c6c28a8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d68c64e250 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x55d68c6c2848 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x55d68c6c2830 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x55d68c6c2758 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x55d68c6c2740 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x55d68c6c2720 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d68c64df10 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x55d68c6c26c0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x55d68c6c25c0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|     |         |     |   `-CXXThisExpr 0x55d68c6c25b0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x55d68c6c2708 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x55d68c6c26f0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x55d68c6c26a0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x55d68c6c2688 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x55d68c6c2628 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x55d68c641570 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x55d68c6c2890 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x55d68c6c2878 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x55d68c6c2810 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x55d68c6c27f8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x55d68c6c27c8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x55d68c49cac0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x55d68c6c29f8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x55d68c6c29c8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x55d68c6c2998 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|           `-CXXThisExpr 0x55d68c6c2988 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x55d68c6acd48 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x55d68c6c2b18 <col:35, line:141:5>
|   `-ReturnStmt 0x55d68c6c2b08 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x55d68c6c2ad0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x55d68c6c2aa0 <col:9, col:17> '<bound member function type>' ->router 0x55d68c6a0100
|         `-ImplicitCastExpr 0x55d68c6c2af0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x55d68c6c2a88 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x55d68c6c2a58 <col:9> 'Element *const' lvalue ->_owner 0x55d68c6c0ff8
|               `-CXXThisExpr 0x55d68c6c2a48 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55d68c6ace08 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x55d68c6c2b98 <col:37, line:146:5>
|   `-ReturnStmt 0x55d68c6c2b88 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x55d68c6c2b70 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x55d68c6c2b40 <col:9> 'Element *const' lvalue ->_owner 0x55d68c6c0ff8
|         `-CXXThisExpr 0x55d68c6c2b30 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55d68c6acec8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x55d68c6c2c18 <col:41, line:151:5>
|   `-ReturnStmt 0x55d68c6c2c08 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x55d68c6c2bf0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x55d68c6c2bc0 <col:9> 'RouterThread *const' lvalue ->_thread 0x55d68c6c1058
|         `-CXXThisExpr 0x55d68c6c2bb0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55d68c6acf90 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x55d68c6ad188 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x55d68c6ad040 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x55d68c6ad0b8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55d68c6c1938 <col:50> 'bool' false
|-CXXMethodDecl 0x55d68c6ad308 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x55d68c6ad248 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x55d68c6bf4c0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55d68c6ad3c0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6bf608 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55d68c6bf578 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6bf750 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55d68c6bf6c0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6bf898 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55d68c6bf808 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6bf960 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x55d68c6c2d80 <col:32, line:223:5>
|   `-ExprWithCleanups 0x55d68c6c2d68 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x55d68c6c2d10 <col:2, col:47> 'void'
|       |-MemberExpr 0x55d68c6c2c40 <col:2> '<bound member function type>' ->schedule_at_steady 0x55d68c6bf4c0
|       | `-CXXThisExpr 0x55d68c6c2c30 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55d68c6c2d50 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55d68c6c2d38 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55d68c6c2cf0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x55d68c6c2cd8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x55d68c6c2ca8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x55d68c49cac0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x55d68c6bfaa0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x55d68c6bfa10 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6bfbe8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6bfb58 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c6c2f08 <col:56, line:241:5>
|   `-ExprWithCleanups 0x55d68c6c2ef0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x55d68c6c2e98 <col:2, col:40> 'void'
|       |-MemberExpr 0x55d68c6c2da8 <col:2> '<bound member function type>' ->schedule_after 0x55d68c6bfaa0
|       | `-CXXThisExpr 0x55d68c6c2d98 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55d68c6c2ed8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55d68c6c2ec0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55d68c6c2e58 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x55d68c6c2e28 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x55d68c6c2de8 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c6bfb58 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x55d68c6c2e40 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55d68c6c2e08 <col:38> 'int' 0
|-CXXMethodDecl 0x55d68c6bfd30 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6bfca0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c6c3178 <col:58, line:249:5>
|   `-ExprWithCleanups 0x55d68c6c3160 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x55d68c6c3108 <col:2, col:49> 'void'
|       |-MemberExpr 0x55d68c6c2f30 <col:2> '<bound member function type>' ->schedule_after 0x55d68c6bfaa0
|       | `-CXXThisExpr 0x55d68c6c2f20 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55d68c6c3148 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55d68c6c3130 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55d68c6c30b0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x55d68c6c3098 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55d68c6c3008 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55d68c621868 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55d68c6c30f0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x55d68c6c30d8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55d68c6c2fe8 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c6bfca0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c6bfe78 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x55d68c6bfde8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x55d68c6c3358 <col:58, line:261:5>
|   `-ExprWithCleanups 0x55d68c6c3340 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x55d68c6c32e8 <col:2, col:38> 'void'
|       |-MemberExpr 0x55d68c6c31a0 <col:2> '<bound member function type>' ->schedule_at_steady 0x55d68c6bf4c0
|       | `-CXXThisExpr 0x55d68c6c3190 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55d68c6c3328 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55d68c6c3310 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55d68c6c32b0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55d68c6c3298 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55d68c6c3278 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d68c64df10 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55d68c6c3248 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55d68c6c3230 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55d68c6c31e0 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|             |     `-CXXThisExpr 0x55d68c6c31d0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x55d68c6c3210 <col:33> 'const Timestamp' lvalue ParmVar 0x55d68c6bfde8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x55d68c6bffc0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6bff30 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c6c3630 <col:58, line:270:5>
|   `-ExprWithCleanups 0x55d68c6c3618 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x55d68c6c35c0 <col:2, col:79> 'void'
|       |-MemberExpr 0x55d68c6c3380 <col:2> '<bound member function type>' ->schedule_at_steady 0x55d68c6bf4c0
|       | `-CXXThisExpr 0x55d68c6c3370 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55d68c6c3600 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55d68c6c35e8 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55d68c6c3580 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x55d68c6c34b8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x55d68c6c34a0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x55d68c6c3430 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x55d68c6c3400 <col:31, col:41> '<bound member function type>' .sec 0x55d68c49e5b8
|             | |     `-ImplicitCastExpr 0x55d68c6c3450 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x55d68c6c33d0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|             | |         `-CXXThisExpr 0x55d68c6c33c0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x55d68c6c3488 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x55d68c6c3468 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c6bff30 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x55d68c6c3548 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x55d68c6c3518 <col:60, col:70> '<bound member function type>' .subsec 0x55d68c49ecb0
|                 `-ImplicitCastExpr 0x55d68c6c3568 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x55d68c6c34e8 <col:60> 'Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|                     `-CXXThisExpr 0x55d68c6c34d8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x55d68c6c0108 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6c0078 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55d68c6c3968 <col:60, line:279:5>
|   `-ExprWithCleanups 0x55d68c6c3950 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x55d68c6c38f8 <col:2, col:65> 'void'
|       |-MemberExpr 0x55d68c6c3658 <col:2> '<bound member function type>' ->schedule_at_steady 0x55d68c6bf4c0
|       | `-CXXThisExpr 0x55d68c6c3648 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55d68c6c3938 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55d68c6c3920 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55d68c6c38c0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x55d68c6c38a8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55d68c6c3888 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55d68c64df10 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55d68c6c3828 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55d68c6c3810 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55d68c6c3698 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|             |     `-CXXThisExpr 0x55d68c6c3688 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x55d68c6c3870 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x55d68c6c3858 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x55d68c6c37b8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x55d68c6c37a0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x55d68c6c3770 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55d68c621868 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x55d68c6c37f8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x55d68c6c37e0 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x55d68c6c3750 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x55d68c6c0078 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55d68c6c01d0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x55d68c6c0290 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x55d68c6c3e30 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x55d68c6c39c0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x55d68c6c3990 <col:2> '<bound member function type>' ->unschedule 0x55d68c6c01d0
|   |   `-CXXThisExpr 0x55d68c6c3980 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x55d68c6c3e18 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x55d68c6c3de0 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x55d68c6c3dc8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55d68c6c3a78 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55d68c335b58 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x55d68c6c39f0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x55d68c6c0cd8
|       | `-CXXThisExpr 0x55d68c6c39e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55d68c6c3a60 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x55d68c6c3a30 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x55d68c6c0350 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x55d68c6c4188 <col:42, line:310:5>
|   |-IfStmt 0x55d68c6c3fd0 <line:306:2, line:307:23>
|   | |-CallExpr 0x55d68c6c3f00 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x55d68c6c3ee8 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x55d68c6c3e88 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x55d68c63f9e0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x55d68c6c3fc0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x55d68c6c3fa8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x55d68c6c3f78 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55d68c6c3f60 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x55d68c6c3f30 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x55d68c6c4178 <line:309:2, col:33>
|     `-ExprWithCleanups 0x55d68c6c4160 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x55d68c6c4130 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55d68c6c4118 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x55d68c6c40d8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55d68c6c40c0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55d68c6c4090 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55d68c621b80 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55d68c6c4100 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x55d68c6c4070 <col:30> 'int' 500
|-CXXMethodDecl 0x55d68c6c0490 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6c0400 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c6c0538 <col:69> "" ""
|-CXXMethodDecl 0x55d68c6c0648 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6c05b8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c6c06f0 <col:70> "" ""
|-CXXMethodDecl 0x55d68c6c0800 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6c0770 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c6c08a8 <col:71> "" ""
|-CXXMethodDecl 0x55d68c6c09b8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55d68c6c0928 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55d68c6c0a60 <col:72> "" ""
|-EnumDecl 0x55d68c6c0ad0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x55d68c6c0bd0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x55d68c6c0c20 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55d68c6c0bb0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x55d68c6c0b90 <col:25> 'int' 1
|-AccessSpecDecl 0x55d68c6c0c38 <line:339:3, col:10> col:3 private
|-FieldDecl 0x55d68c6c0c78 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x55d68c6c0cd8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x55d68c6c0d28 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55d68c6c0e58 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x55d68c6c1948 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x55d68c6c0f18 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x55d68c6c0f98 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x55d68c6c0ff8 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x55d68c6c1058 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x55d68c6c11a8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x55d68c6c10b8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x55d68c6c1378 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55d68c6c1260 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x55d68c6c12e0 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x55d68c6c1550 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55d68c6c1438 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x55d68c6c14b8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x55d68c6c1728 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55d68c6c1610 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x55d68c6c1690 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x55d68c6c18f8 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c75ea10 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55d68c75eb28 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55d68c75ebb8 <col:16, col:22> col:16 public
|-EnumDecl 0x55d68c75ebe0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55d68c75ece0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d68c75ef30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c75ecc0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55d68c75eca0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55d68c75ed70 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d68c75ef48 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c75ed50 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55d68c75ed30 <col:24> 'int' 22
| |-EnumConstantDecl 0x55d68c75ee00 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d68c75ef60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c75ede0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55d68c75edc0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55d68c75ee90 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55d68c75ef78 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55d68c75ee70 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55d68c75ee50 <col:25> 'int' 95
| `-EnumConstantDecl 0x55d68c75eee0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55d68c7608f0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55d68c760d28 <col:7>
|-CXXConstructorDecl 0x55d68c7609f8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55d68c7609f8
| `-ParmVarDecl 0x55d68c760b08 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55d68c760ba8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c760cb8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55d68c89a280 <col:7>
`-CXXDestructorDecl 0x55d68c762e48 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55d68c75efa8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55d68c75f108 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55d68c75f198 <col:32, col:38> col:32 public
|-TypedefDecl 0x55d68c75f1d0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55d68c281950 'uint32_t' sugar
|   |-Typedef 0x55d68c1934c8 'uint32_t'
|   `-TypedefType 0x55d68c16c5a0 '__uint32_t' sugar
|     |-Typedef 0x55d68c16c198 '__uint32_t'
|     `-BuiltinType 0x55d68c12a620 'unsigned int'
|-CXXConstructorDecl 0x55d68c75f318 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55d68c75f240 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55d68c7607f8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55d68c760d38 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55d68c7600b0 'base' 'int'
| | `-ImplicitCastExpr 0x55d68c760898 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55d68c760858 <col:16> 'int' lvalue ParmVar 0x55d68c75f240 'b' 'int'
| `-CompoundStmt 0x55d68c760da8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55d68c75f810 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55d68c75f3e0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55d68c75f460 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55d68c75f4d8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55d68c75f558 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55d68c75f618 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55d68c75f698 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55d68c75fc68 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55d68c75f8e0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55d68c75fbc8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55d68c75f988 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55d68c75fa28 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55d68c75faa0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55d68c760818 <col:82> 'const ArgContext' lvalue Var 0x55d68c7548d8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55d68c761cd8 <col:94, line:1067:5>
| |   |-DeclStmt 0x55d68c760f38 <line:1054:9, col:64>
| |   | `-VarDecl 0x55d68c760dc8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55d68c760ef0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55d68c761158 <line:1055:9, col:91>
| |   | `-VarDecl 0x55d68c760f68 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55d68c761130 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55d68c761110 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55d68c7610c0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55d68c7610a0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55d68c761048 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55d68c760ff8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55d68c761028 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55d68c761088 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55d68c761068 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55d68c7610f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55d68c7612b8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55d68c761250 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55d68c761700 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55d68c761630 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55d68c7615b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55d68c64b938 0x55d68c494f18 0x55d68c494bf0 0x55d68c4853c0 0x55d68c485070 0x55d68c484960 0x55d68c4572d0 0x55d68c3e47a0
| |   | | |-CallExpr 0x55d68c7614f0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55d68c7612e0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55d68c761390 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55d68c761360 <col:19, col:23> '<bound member function type>' .begin 0x55d68c4745c8
| |   | | | |   `-DeclRefExpr 0x55d68c761340 <col:19> 'const String' lvalue ParmVar 0x55d68c75f988 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55d68c761400 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55d68c7613d0 <col:32, col:36> '<bound member function type>' .end 0x55d68c4747e0
| |   | | | |   `-DeclRefExpr 0x55d68c7613b0 <col:32> 'const String' lvalue ParmVar 0x55d68c75f988 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55d68c761420 <col:43> 'const bool' lvalue Var 0x55d68c760dc8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55d68c761488 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55d68c761468 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55d68c7614b0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d68c761250 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55d68c7614d0 <col:73> 'const int' lvalue Var 0x55d68c760f68 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55d68c761590 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55d68c761560 <col:16, col:20> '<bound member function type>' .end 0x55d68c4747e0
| |   | |     `-DeclRefExpr 0x55d68c761540 <col:16> 'const String' lvalue ParmVar 0x55d68c75f988 'str' 'const String &'
| |   | `-BinaryOperator 0x55d68c7616e0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55d68c761678 <col:13> 'int' lvalue ->status 0x55d68c760118
| |   |   | `-CXXThisExpr 0x55d68c761668 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55d68c7616c8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55d68c7616a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ed70 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55d68c761950 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55d68c761838 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55d68c761820 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55d68c761808 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55d68c761728 <col:13> 'int' lvalue ->status 0x55d68c760118
| |   | | |     `-CXXThisExpr 0x55d68c761718 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55d68c7617e8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55d68c7617b8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55d68c761768 <col:23> 'int' lvalue ->status 0x55d68c760118
| |   | |   |   `-CXXThisExpr 0x55d68c761758 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55d68c7617d0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55d68c761798 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ee00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55d68c761930 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55d68c7618d0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55d68c761878 <col:13, col:18> '<bound member function type>' .error 0x55d68c708ed0
| |   |   | | `-DeclRefExpr 0x55d68c761858 <col:13> 'const ArgContext' lvalue ParmVar 0x55d68c75faa0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55d68c7618f8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55d68c7618a8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55d68c761920 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55d68c761910 <col:20> 'bool' false
| |   |-DeclStmt 0x55d68c761b28 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55d68c761ad0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55d68c761a60 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55d68c761c88 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55d68c761b40 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55d68c418768
| |   | |-DeclRefExpr 0x55d68c761b88 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55d68c761250 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55d68c761c58 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55d68c761bd0 <col:64> 'V' lvalue ParmVar 0x55d68c75fa28 'result' 'V &'
| |   `-ReturnStmt 0x55d68c761cc8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55d68c761cb8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55d68c89ddb8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55d68c89db90 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55d68c89dc68 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55d68c89dcd0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55d68c8a4250 <col:94, line:1067:5>
|     |-DeclStmt 0x55d68c8a2cc8 <line:1054:9, col:64>
|     | `-VarDecl 0x55d68c8a2ae8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55d68c8a2c58 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55d68c8a2c28 <col:36, col:55> 'const bool' lvalue Var 0x55d68c407980 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55d68c8a2ea8 <line:1055:9, col:91>
|     | `-VarDecl 0x55d68c8a2ce0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55d68c8a2e28 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55d68c8a2e10 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55d68c8a2df0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55d68c8a2dd0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55d68c8a2db0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55d68c8a2d78 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55d68c8a2d58 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55d68c761028 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55d68c8a2d98 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55d68c761068 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55d68c7610f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55d68c8a3040 <line:1056:9, col:27>
|     | `-VarDecl 0x55d68c8a2fd8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55d68c8a34c8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55d68c8a3470 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55d68c8a3328 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55d68c8a32f8 <col:13> '<bound member function type>' ->parse 0x55d68c75f810
|     | | | | `-CXXThisExpr 0x55d68c8a32e8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55d68c8a3188 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d68c8a3158 <col:19, col:23> '<bound member function type>' .begin 0x55d68c4745c8
|     | | | |   `-DeclRefExpr 0x55d68c8a3138 <col:19> 'const String' lvalue ParmVar 0x55d68c89db90 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55d68c8a31f8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55d68c8a31c8 <col:32, col:36> '<bound member function type>' .end 0x55d68c4747e0
|     | | | |   `-DeclRefExpr 0x55d68c8a31a8 <col:32> 'const String' lvalue ParmVar 0x55d68c89db90 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55d68c8a3398 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55d68c8a3378 <col:43> 'const bool' lvalue Var 0x55d68c8a2ae8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55d68c8a3280 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55d68c8a3268 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55d68c8a3248 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55d68c8a33b0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55d68c8a32a8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55d68c8a2fd8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55d68c8a33e8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55d68c8a33c8 <col:73> 'const int' lvalue Var 0x55d68c8a2ce0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55d68c8a3450 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55d68c8a3420 <col:16, col:20> '<bound member function type>' .end 0x55d68c4747e0
|     | |     `-DeclRefExpr 0x55d68c8a3400 <col:16> 'const String' lvalue ParmVar 0x55d68c89db90 'str' 'const String &'
|     | `-BinaryOperator 0x55d68c8a34a8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55d68c761678 <col:13> 'int' lvalue ->status 0x55d68c760118
|     |   | `-CXXThisExpr 0x55d68c761668 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55d68c8a3490 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55d68c7616a8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ed70 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55d68c8a3640 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55d68c8a3560 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55d68c8a3548 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55d68c8a3530 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55d68c761728 <col:13> 'int' lvalue ->status 0x55d68c760118
|     | | |     `-CXXThisExpr 0x55d68c761718 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55d68c8a3510 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55d68c8a34e0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55d68c761768 <col:23> 'int' lvalue ->status 0x55d68c760118
|     | |   |   `-CXXThisExpr 0x55d68c761758 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55d68c8a34f8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55d68c761798 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ee00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55d68c8a3620 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55d68c8a35d0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55d68c8a35a0 <col:13, col:18> '<bound member function type>' .error 0x55d68c708ed0
|     |   | | `-DeclRefExpr 0x55d68c8a3580 <col:13> 'const ArgContext' lvalue ParmVar 0x55d68c89dcd0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55d68c8a35f8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55d68c7618a8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55d68c8a3610 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55d68c761910 <col:20> 'bool' false
|     |-DeclStmt 0x55d68c8a3b88 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55d68c8a3b30 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55d68c8a3ae0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55d68c8a3ac0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55d68c8a3a50 'type'
|     |       `-ElaboratedType 0x55d68c8a3a00 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55d68c8a39e0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55d68c407ad8 'unsigned_type'
|     |           `-BuiltinType 0x55d68c12a620 'unsigned int'
|     |-CallExpr 0x55d68c8a41e0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55d68c8a41c8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55d68c8a4148 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55d68c8a4028 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55d68c418768 'extract_integer')
|     | |-ImplicitCastExpr 0x55d68c8a4228 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55d68c8a4210 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55d68c8a3be8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55d68c8a2fd8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55d68c8a3cb8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55d68c8a3c68 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55d68c89dc68 'result' 'unsigned int &'
|     `-ReturnStmt 0x55d68c8a4240 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55d68c761cb8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55d68c760028 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55d68c75fcd8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55d68c75ff88 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55d68c75fd88 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55d68c75fe28 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55d68c75fea0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55d68c760838 <col:71> 'const ArgContext' lvalue Var 0x55d68c7548d8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55d68c762468 <col:83, line:1083:5>
| |   |-DeclStmt 0x55d68c761da0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55d68c761d38 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55d68c762440 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55d68c762030 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55d68c761eb8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55d68c761e80 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55d68c761dc8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55d68c761e20 <col:31> 'const String' lvalue ParmVar 0x55d68c75fd88 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55d68c761e40 <col:36> 'V' lvalue Var 0x55d68c761d38 'x' 'V'
| |     | |   `-DeclRefExpr 0x55d68c761e60 <col:39> 'const ArgContext' lvalue ParmVar 0x55d68c75fea0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55d68c762010 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55d68c761ff0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55d68c761fd8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55d68c761fc0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55d68c761ee0 <col:17> 'int' lvalue ->status 0x55d68c760118
| |     |     |     `-CXXThisExpr 0x55d68c761ed0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55d68c761fa0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55d68c761f70 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55d68c761f20 <col:27> 'int' lvalue ->status 0x55d68c760118
| |     |       |   `-CXXThisExpr 0x55d68c761f10 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55d68c761f88 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55d68c761f50 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ee00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55d68c762060 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55d68c762050 <col:20> 'bool' false
| |     `-IfStmt 0x55d68c762418 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55d68c762100 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55d68c7620d0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55d68c762080 <col:18> 'int' lvalue ->status 0x55d68c760118
| |       | |   `-CXXThisExpr 0x55d68c762070 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55d68c7620e8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55d68c7620b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ee00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55d68c762358 <col:42, line:1079:9>
| |       | |-CallExpr 0x55d68c762300 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55d68c762150 <line:1076:13> '<bound member function type>' ->range_error 0x55d68c760728
| |       | | | `-CXXThisExpr 0x55d68c762120 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55d68c762180 <col:25> 'const ArgContext' lvalue ParmVar 0x55d68c75fea0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55d68c762260 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55d68c7622d8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55d68c7622b8 <col:43> 'V' lvalue Var 0x55d68c761d38 'x' 'V'
| |       | `-ReturnStmt 0x55d68c762348 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55d68c762338 <col:20> 'bool' false
| |       `-CompoundStmt 0x55d68c7623f8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55d68c7623b8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55d68c762378 <col:13> 'V' lvalue ParmVar 0x55d68c75fe28 'result' 'V &'
| |         | `-DeclRefExpr 0x55d68c762398 <col:22> 'V' lvalue Var 0x55d68c761d38 'x' 'V'
| |         `-ReturnStmt 0x55d68c7623e8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55d68c7623d8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55d68c89d778 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55d68c89d550 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55d68c89d628 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55d68c89d690 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55d68c8a2ac8 <col:83, line:1083:5>
|     |-DeclStmt 0x55d68c89da00 <line:1071:9, col:12>
|     | `-VarDecl 0x55d68c89d998 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55d68c8a2aa0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55d68c89e030 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55d68c89df58 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55d68c89df20 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55d68c89ded8 <col:14> '<bound member function type>' ->parse_saturating 0x55d68c89ddb8
|       | |   | `-CXXThisExpr 0x55d68c89dec8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55d68c89da70 <col:31> 'const String' lvalue ParmVar 0x55d68c89d550 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55d68c89da90 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55d68c89d998 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55d68c89dab0 <col:39> 'const ArgContext' lvalue ParmVar 0x55d68c89d690 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55d68c89e010 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55d68c89dff0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55d68c89dfd8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55d68c89dfc0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55d68c761ee0 <col:17> 'int' lvalue ->status 0x55d68c760118
|       |     |     `-CXXThisExpr 0x55d68c761ed0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55d68c89dfa0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55d68c89df70 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55d68c761f20 <col:27> 'int' lvalue ->status 0x55d68c760118
|       |       |   `-CXXThisExpr 0x55d68c761f10 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55d68c89df88 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55d68c761f50 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ee00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55d68c89e050 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55d68c762050 <col:20> 'bool' false
|       `-IfStmt 0x55d68c8a2a78 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55d68c89e090 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55d68c89e060 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55d68c762080 <col:18> 'int' lvalue ->status 0x55d68c760118
|         | |   `-CXXThisExpr 0x55d68c762070 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55d68c89e078 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55d68c7620b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55d68c75ee00 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55d68c89e2b0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55d68c89e220 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55d68c762150 <line:1076:13> '<bound member function type>' ->range_error 0x55d68c760728
|         | | | `-CXXThisExpr 0x55d68c762120 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55d68c89e0b0 <col:25> 'const ArgContext' lvalue ParmVar 0x55d68c89d690 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55d68c89e288 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55d68c89e258 <col:31, col:50> 'const bool' lvalue Var 0x55d68c407980 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55d68c89e1f8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55d68c89e1e0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55d68c89e1c8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55d68c89e1a8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55d68c89d998 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55d68c89e2a0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55d68c762338 <col:20> 'bool' false
|         `-CompoundStmt 0x55d68c8a2a58 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55d68c8a2a28 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55d68c89e2d0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55d68c89d628 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55d68c8a2a10 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55d68c8a29f0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55d68c89d998 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55d68c8a2a48 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55d68c7623d8 <col:20> 'bool' true
|-FieldDecl 0x55d68c7600b0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55d68c760118 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55d68c760168 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55d68c760420 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55d68c7601a8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55d68c760228 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55d68c7602a0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55d68c760320 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55d68c760728 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55d68c7604f0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55d68c760568 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55d68c760600 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55d68c762cc8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55d68c762cc8
| `-ParmVarDecl 0x55d68c762dd8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55d68c762f58 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c763068 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55d68c89a290 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d68c89a260 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55d68c89a230 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c89a200 <col:7> 'IntArg' lvalue ParmVar 0x55d68c763068 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55d68c7600b0 'base' 'int'
| | `-ImplicitCastExpr 0x55d68c89a388 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c89a358 <col:7> 'int' xvalue .base 0x55d68c7600b0
| |     `-CXXStaticCastExpr 0x55d68c89a328 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c89a2f8 <col:7> 'IntArg' lvalue ParmVar 0x55d68c763068 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55d68c760118 'status' 'int'
| | `-ImplicitCastExpr 0x55d68c89a458 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55d68c89a428 <col:7> 'int' xvalue .status 0x55d68c760118
| |     `-CXXStaticCastExpr 0x55d68c89a3f8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c89a3c8 <col:7> 'IntArg' lvalue ParmVar 0x55d68c763068 '' 'IntArg &&'
| `-CompoundStmt 0x55d68c89a4b0 <col:7>
`-CXXDestructorDecl 0x55d68c8993f0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55d68c767260 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55d68c7674b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55d68c899318 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d68c899890 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55d68c899870 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55d68c899900 <col:19>
|-CXXConstructorDecl 0x55d68c8994f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55d68c8994f8
| `-ParmVarDecl 0x55d68c899608 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55d68c8996a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55d68c8997b8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55d68c89a4c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55d68c89a1e0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55d68c89a1b0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55d68c89a180 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55d68c8997b8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55d68c89a530 <col:19>
`-CXXDestructorDecl 0x55d68c899940 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
