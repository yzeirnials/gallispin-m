
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316cb3e48 prev 0x55c316cab5e8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316cb3f40 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55c316cb3fd0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55c316cb4048 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55c316cb4108 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55c316cb41d0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55c316cb4348 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55c316cb4280 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55c316cb43f0 <col:24>
| `-OptimizeNoneAttr 0x55c316cb4448 <col:34>
|-CXXMethodDecl 0x55c316cb4490 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55c316cb4748 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55c316cb4540 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c316cb45b8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55c316cb4638 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55c316cb4800 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55c316cb4838 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55c316cb48a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55c316cb4928 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55c316cb4c48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55c316cb49e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55c316cb4a58 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55c316cb4ad0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55c316cb4b50 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55c316cb4d60 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55c316cbc6d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c316cbc6d8
| `-ParmVarDecl 0x55c316cbc7e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55c316cbc888 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c316cbc888
| `-ParmVarDecl 0x55c316cbc998 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55c316d90308 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316ca6e60 prev 0x55c316ca6be0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c316ca6f58 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55c316ca6fe8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55c316ca7048 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55c316ca7138 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55c316ca7238 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55c316ca7408 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55c316ca72b8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55c316ca7330 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55c316ca7598 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55c316ca74d0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55c316ca7640 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55c316ca7778 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55c316ca76b0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55c316ca7918 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55c316ca7858 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55c316ca7ab8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55c316ca79f8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55c316ca7b60 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55c316ca7c60 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55c316ca7d40 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316ca7c40 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55c316ca7c20 <col:26> 'int' 1
| `-EnumConstantDecl 0x55c316ca7cf0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55c316ca7d58 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316ca7cd0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55c316ca7cb0 <col:44> 'int' 2
|-CXXMethodDecl 0x55c316ca7ea0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55c316ca7d88 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55c316ca7e08 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55c316ca7ff8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55c316ca7f68 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55c316ca8238 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55c316ca80b8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55c316ca8130 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55c316ca82e8 <col:20>
| `-OptimizeNoneAttr 0x55c316ca8340 <col:30>
|-CXXMethodDecl 0x55c316ca8448 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55c316ca8380 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55c316ca84f0 <col:20>
| `-OptimizeNoneAttr 0x55c316ca8548 <col:30>
|-CXXMethodDecl 0x55c316ca8598 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55c316ca8660 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55c316ca8778 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55c316ca8800 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55c316ca8888 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55c316ca8910 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55c316ca8998 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55c316ca8a28 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55c316ca8ae8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55c316ca8b70 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55c316ca8bf8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55c316ca8c80 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55c316ca8d08 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55c316ca8d90 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55c316ca8e20 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55c316ca8ee0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55c316ca8f70 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55c316ca90c0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55c316ca9028 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55c316ca9250 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55c316ca9180 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55c316ca9500 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55c316ca9308 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55c316ca9388 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55c316ca9408 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55c316ca95b8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55c316ca96c0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c316ca9950 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316ca96a0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55c316ca9680 <col:33> 'int' 0
| |-EnumConstantDecl 0x55c316ca9750 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c316ca9968 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316ca9730 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55c316ca9710 <col:32> 'int' 20
| |-EnumConstantDecl 0x55c316ca97e0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c316ca9980 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316ca97c0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55c316ca97a0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55c316ca9870 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55c316ca9998 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316ca9850 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55c316ca9830 <col:35> 'int' 100
| `-EnumConstantDecl 0x55c316ca9900 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55c316ca99b0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316ca98e0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55c316ca98c0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55c316ca99f0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55c316ca9e30 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c316ca9ca0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55c316ca9d18 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c316ca9f00 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55c316caa080 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55c316ca9fb0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c316caa288 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c316caa138 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55c316caa1b0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c316caa388 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55c316caa428 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55c316caa4f0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c316caa580 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55c316caa7b0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316caa560 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55c316caa540 <col:36> 'int' EnumConstant 0x55c316caa4f0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c316caa5d0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c316caa620 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c316caa670 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c316caa6c0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55c316caa710 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55c316caa760 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55c316caa898 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55c316caa7d8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55c316caa960 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55c316caaa20 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55c316caaae0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55c316caaba0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55c316caacb8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55c316caad80 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55c316caaf00 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55c316caae30 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55c316cab028 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55c316cab228 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55c316cab0d8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55c316cab158 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55c316cb8b78 <col:54, line:127:5>
|   |-ParenExpr 0x55c316cb8a28 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55c316cb89f8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55c316cb86e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c316cb86c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55c316cb86a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55c316cb8690 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55c316cb8660 <col:31> 'Router *' lvalue ->_router 0x55c316cb6540
|   |   |         `-CXXThisExpr 0x55c316cb8650 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c316cb8748 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316cb8728 <col:48> 'int' 0
|   |   `-CallExpr 0x55c316cb8958 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55c316cb8940 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316cb8920 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316cb8998 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316cb87b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55c316cb89b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316cb87d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55c316cb89c8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316cb8810 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55c316cb89e0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316cb8908 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316cb88f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316cb88a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55c316cb8ac0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55c316cb8a58 <col:9> 'Router *' lvalue ->_router 0x55c316cb6540
|   | | `-CXXThisExpr 0x55c316cb8a48 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55c316cb8aa8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c316cb8a88 <col:19> 'Router *' lvalue ParmVar 0x55c316cab0d8 'r' 'Router *'
|   `-BinaryOperator 0x55c316cb8b58 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55c316cb8af0 <col:9> 'int' lvalue ->_eindex 0x55c316cb65a8
|     | `-CXXThisExpr 0x55c316cb8ae0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55c316cb8b40 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c316cb8b20 <col:19> 'int' lvalue ParmVar 0x55c316cab158 'eindex' 'int'
|-CXXMethodDecl 0x55c316cab3b0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55c316cab2e8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55c316cab480 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55c316cab548 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55c316cab5e8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55c316cab838 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55c316cab6b0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55c316cab730 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55c316cab8e8 <col:20>
| `-OptimizeNoneAttr 0x55c316cab940 <col:30>
|-CXXMethodDecl 0x55c316caba48 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c316cab980 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55c316cabaf0 <col:20>
| `-OptimizeNoneAttr 0x55c316cabb48 <col:30>
|-CXXMethodDecl 0x55c316cabc18 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55c316cabb88 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55c316cabcc0 <col:20>
| `-OptimizeNoneAttr 0x55c316cabd18 <col:30>
|-CXXMethodDecl 0x55c316cabea8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55c316cabd50 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55c316cabdd0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55c316cac038 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c316cabf70 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c316cac188 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c316cac0f8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55c316cac2d8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55c316cac248 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c316cac428 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55c316cac398 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55c316cac6e8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55c316cac4e0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55c316cac560 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55c316cac608 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55c316cac7c0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55c316cac880 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55c316cacb50 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55c316caca00 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55c316caca78 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55c316cacc78 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55c316cace50 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55c316cacd30 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55c316cacdb0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55c316cad038 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55c316cacf18 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55c316cacf98 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55c316cad3a8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c316cad0f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c316cad170 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c316cad1f0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c316cb8160 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c316cb8140 <col:106> 'int' 0
| `-ParmVarDecl 0x55c316cad268 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c316cb8198 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c316cb8178 <col:126> 'int' 0
|-CXXMethodDecl 0x55c316cad748 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c316cad478 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c316cad510 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c316cad590 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55c316cad608 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c316cb81d0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c316cb81b0 <col:114> 'int' 0
|-CXXMethodDecl 0x55c316cadad8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c316cad820 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55c316cad898 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55c316cad918 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55c316cb81e8 <col:96> 'int' 0
| `-ParmVarDecl 0x55c316cad990 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c316cb8228 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c316cb8208 <col:116> 'int' 0
|-CXXMethodDecl 0x55c316cade58 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55c316cadba8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c316cadc20 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316cadca0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c316cb8260 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c316cb8240 <col:109> 'int' 0
| `-ParmVarDecl 0x55c316cadd18 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c316cb8298 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c316cb8278 <col:129> 'int' 0
|-CXXMethodDecl 0x55c316cae1d8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c316cadf28 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55c316cadfa0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316cae020 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55c316cae098 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c316cb82d0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c316cb82b0 <col:117> 'int' 0
|-CXXMethodDecl 0x55c316cae568 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55c316cae2b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cae328 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316cae3a8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55c316cb82e8 <col:99> 'int' 0
| `-ParmVarDecl 0x55c316cae420 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55c316cb8328 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55c316cb8308 <col:119> 'int' 0
|-CXXMethodDecl 0x55c316cae988 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55c316cae638 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c316cae6b8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c316cae730 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316cae7b0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55c316cb8360 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55c316cb8340 <col:108> 'int' 0
| `-ParmVarDecl 0x55c316cae830 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55c316cb8398 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55c316cb8378 <col:141> 'int' 0
|-CXXMethodDecl 0x55c316caeda8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c316caea60 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55c316caeae0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55c316caeb58 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316caebd8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55c316caec58 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c316cb83b0 <col:121> 'int' 0
|-CXXMethodDecl 0x55c316caf1d8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55c316caee88 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55c316caef08 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55c316caef80 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316caf000 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55c316cb83d0 <col:98> 'int' 0
| `-ParmVarDecl 0x55c316caf080 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55c316cb83f0 <col:123> 'int' 0
|-CXXMethodDecl 0x55c316caf4a0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55c316caf2b0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55c316caf330 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55c316caf3b0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55c316cb8410 <col:80> 'int' 0
|-EnumDecl 0x55c316caf558 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55c316caf660 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c316caf8f0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316caf640 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55c316caf620 <col:42> 'int' 1
| |-EnumConstantDecl 0x55c316caf6f0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c316caf908 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316caf6d0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55c316caf6b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c316caf780 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c316caf920 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316caf760 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55c316caf740 <col:44> 'int' 4
| |-EnumConstantDecl 0x55c316caf810 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55c316caf938 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316caf7f0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55c316caf7d0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55c316caf8a0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55c316caf950 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316caf880 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55c316caf860 <col:34> 'int' 6
|-CXXMethodDecl 0x55c316cafc08 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55c316caf978 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55c316cafa18 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c316cafa98 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55c316cafb10 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55c316cb84c8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55c316cb84b0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55c316cb8498 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55c316cb8478 <col:98, col:105> 'String' (CXXTemporary 0x55c316cb8478)
|           `-CXXTemporaryObjectExpr 0x55c316cb8440 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55c316cafea8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55c316cafcd8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c316cafd50 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55c316cafdc8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c316cb8578 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c316cb8560 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c316cb8548 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c316cb8528 <col:94, col:101> 'String' (CXXTemporary 0x55c316cb8528)
| |         `-CXXTemporaryObjectExpr 0x55c316cb84f0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55c316cb8d60 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55c316cb8cd8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55c316cb8ca8 <col:9> '<bound member function type>' ->add_task_handlers 0x55c316cafc08
|     | `-CXXThisExpr 0x55c316cb8c98 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c316cb8d18 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316cb8c18 <col:27> 'Task *' lvalue ParmVar 0x55c316cafcd8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c316cb8d30 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316cb8c38 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55c316cafd50 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55c316cb8d48 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c316cb8c58 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c316caf8a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c316cb8c78 <col:62> 'const String' lvalue ParmVar 0x55c316cafdc8 'prefix' 'const String &'
|-CXXMethodDecl 0x55c316cb00b8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55c316caff70 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55c316caffe8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55c316cb8628 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55c316cb8610 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55c316cb85f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55c316cb85d8 <col:70, col:77> 'String' (CXXTemporary 0x55c316cb85d8)
| |         `-CXXTemporaryObjectExpr 0x55c316cb85a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55c316cb8f38 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55c316cb8eb0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55c316cb8e80 <col:9> '<bound member function type>' ->add_task_handlers 0x55c316cafc08
|     | `-CXXThisExpr 0x55c316cb8e70 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55c316cb8ef0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316cb8df0 <col:27> 'Task *' lvalue ParmVar 0x55c316caff70 'task' 'Task *'
|     |-ImplicitCastExpr 0x55c316cb8f08 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55c316cb8e10 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55c316cb8f20 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55c316cb8e30 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55c316caf8a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55c316cb8e50 <col:57> 'const String' lvalue ParmVar 0x55c316caffe8 'prefix' 'const String &'
|-CXXMethodDecl 0x55c316cb0398 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55c316cb0180 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb0200 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb0278 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55c316cb0648 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55c316cb0468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb04e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb0568 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55c316cb0938 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c316cb0718 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb0798 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb0810 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55c316cb0be8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55c316cb0a08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb0a88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb0b08 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55c316cb0e98 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55c316cb0cb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb0d38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb0db8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55c316cb1148 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55c316cb0f68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb0fe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb1060 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55c316cb13f8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55c316cb1218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb1298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb1318 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55c316cb1708 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55c316cb1520 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb15a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb1620 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55c316cb19e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55c316cb17d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb1858 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb1900 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55c316cb1cc8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55c316cb1ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb1b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb1be0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55c316cb1f30 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55c316cb1d98 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c316cb1e18 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c316cb1e90 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55c316cb21d8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55c316cb2000 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55c316cb2080 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55c316cb20f8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55c316cb2488 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55c316cb22a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb2328 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb23a8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55c316cb2738 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55c316cb2558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb25d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb2650 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55c316cb29e8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55c316cb2808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb2888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb2900 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55c316cb2cb8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55c316cb2ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb2b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55c316cb2bd8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55c316cb2fe8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55c316cb2d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55c316cb2e08 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55c316cb2e80 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55c316cb2ef8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c316cb8640 <col:93> 'bool' false
|-CXXMethodDecl 0x55c316cb31d0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c316cb30b8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55c316cb3138 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55c316cb33a8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c316cb3290 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55c316cb3310 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55c316cb3688 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c316cb3468 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55c316cb34e0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55c316cb3560 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55c316cb35d8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55c316cb3978 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55c316cb3758 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55c316cb37d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55c316cb3850 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55c316cb38c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55c316cb3bb0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55c316cb3a50 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55c316cb3ad0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55c316cb3d98 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55c316cb3c78 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55c316cb3cf8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55c316cb3e48 prev 0x55c316cab5e8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c316cb3f40 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55c316cb3fd0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55c316cb4048 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55c316cb4108 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55c316cb41d0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55c316cb4348 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55c316cb4280 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55c316cb43f0 <col:24>
| | `-OptimizeNoneAttr 0x55c316cb4448 <col:34>
| |-CXXMethodDecl 0x55c316cb4490 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55c316cb4748 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55c316cb4540 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c316cb45b8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55c316cb4638 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55c316cb4800 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55c316cb4838 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55c316cb48a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55c316cb4928 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55c316cb4c48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55c316cb49e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55c316cb4a58 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55c316cb4ad0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55c316cb4b50 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55c316cb4d60 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55c316cbc6d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55c316cbc6d8
| | `-ParmVarDecl 0x55c316cbc7e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55c316cbc888 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55c316cbc888
| | `-ParmVarDecl 0x55c316cbc998 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55c316d90308 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c316cb4dd8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55c316cb4e78 <col:38> "" ""
|-CXXMethodDecl 0x55c316cb4f08 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55c316cb4fa8 <col:44> "" ""
|-AccessSpecDecl 0x55c316cb5018 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55c316cb5040 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55c316cb5140 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55c316cb5190 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316cb5120 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55c316cb5100 <col:27> 'int' 4
|-FieldDecl 0x55c316cb5248 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55c316cb53f8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55c316cb54b0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55c316cb6540 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55c316cb65a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55c316cb66f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55c316cb6638 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55c316cb68a8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55c316cb67b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55c316cb6a88 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55c316cb6968 <col:20> col:23 'int'
| `-ParmVarDecl 0x55c316cb69e8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55c316cb6d30 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55c316cb6b50 <col:23> col:26 'int'
| |-ParmVarDecl 0x55c316cb6bd0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55c316cb6c48 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55c316cb6de8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55c316cb6eb0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55c316cb6f00 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55c316cb6f50 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55c316cb7130 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55c316cb6fe0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55c316cb7058 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c316cb73d8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55c316cb71f8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55c316cb7278 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55c316cb72f0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55c316cb75f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55c316cb74a8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55c316cb7528 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55c316cb7930 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55c316cb76b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55c316cb7738 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55c316cb77b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55c316cb7830 <col:57> col:60 'int'
|-CXXMethodDecl 0x55c316cb7b18 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55c316cb7a00 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55c316cb7a80 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55c316cb7c68 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55c316cb7bd8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55c316cb7fe8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55c316cb7d28 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55c316cb7da8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55c316cb7e20 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55c316cb7ea0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55c316cb8100 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPAddress>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPGWOptions
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class atomic_uint32_t _drops
       108 |     uint32_t _val
       112 |   struct in_addr _preferred_addr
       112 |     in_addr_t s_addr
       120 |   class Vector<class IPAddress> _my_addrs
       120 |     class vector_memory<class sized_array_memory<4> > vm_
       120 |       vector_memory<class sized_array_memory<4> >::type * l_
       128 |       vector_memory::size_type n_
       132 |       vector_memory::size_type capacity_
           | [sizeof=136, dsize=136, align=8,
           |  nvsize=136, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316a65910 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316a65a28 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55c316a65ab8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55c316a65b88 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55c316a65c70 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316a65e88 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c316a65d30 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a66038 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c316a65f40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c316a66180 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55c316a660f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55c316a662c8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c316a66238 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a66410 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55c316a66380 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a664d8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55c316a66620 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55c316a66590 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c316a666e8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55c316a66830 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55c316a667a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55c316a669a8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c316a668e8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a66af0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55c316a66a60 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a66bb8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55c316a66d78 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c316a66c68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c316a66ce0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a66fc8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c316a66e38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c316a66eb0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c316a67078 <col:86> "" ""
|-CXXMethodDecl 0x55c316a672e8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55c316a67158 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55c316a671d0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a67498 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c316a673a8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c316a67648 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55c316a67550 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55c316a67918 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c316a67700 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c316a67778 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c316a677f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a67bf8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55c316a679e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55c316a67a58 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c316a67ad0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c316a67cb0 <col:115> "" ""
|-AccessSpecDecl 0x55c316a67d20 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55c316a67d58 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316a68260 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c316a68260
| `-ParmVarDecl 0x55c316a68368 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55c316a68408 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c316a68408
| `-ParmVarDecl 0x55c316a68518 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55c316a9db48 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c316c90950 <col:7>
|-CXXConstructorDecl 0x55c316a9dc20 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55c316a9dc20
| `-ParmVarDecl 0x55c316a9dd38 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55c316a9dda8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55c316a9dda8
| `-ParmVarDecl 0x55c316a9deb8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55c316c93350 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c3169db818 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c3169db938 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55c3169dba00 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55c316aac1f0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c316ab1508 <col:8>
|-CXXConstructorDecl 0x55c316aac2f8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55c316aac2f8
| `-ParmVarDecl 0x55c316aac408 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55c316aac4a8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316aac5b8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55c3169dba00 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316ab1720 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55c316ab16f0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55c3169dba00
| |     `-CXXStaticCastExpr 0x55c316ab16c0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55c316ab1690 <col:8> 'in_addr' lvalue ParmVar 0x55c316aac5b8 '' 'in_addr &&'
| `-CompoundStmt 0x55c316ab1768 <col:8>
`-CXXDestructorDecl 0x55c316ab19a0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316cc1880 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55c316cc1a58 prev 0x55c316cc1880 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c316cc1ae8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c316cc1b10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316cc36e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55c316cc3690 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55c316cc1fc0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55c316cc1ec0 'type'
|     `-TemplateSpecializationType 0x55c316cc1e50 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55c316cc1d30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55c316cc1d10 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55c316cc1cf0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55c316cc1e30 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55c316cc1d50 'char_array'
|-TypedefDecl 0x55c316cc3798 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55c316cc3760 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55c316cc3740 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55c316cc36e0 'type'
|     `-ElaboratedType 0x55c316cc3690 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55c316cc1fc0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55c316cc1ec0 'type'
|         `-TemplateSpecializationType 0x55c316cc1e50 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55c316cc1d30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55c316cc1d10 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55c316cc1cf0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55c316cc1e30 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55c316cc1d50 'char_array'
|-CXXMethodDecl 0x55c316cc3918 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55c316cc3828 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55c316cc3a08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c316cc3ae8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55c316cc3db8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c316cc3cc0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55c316cc3ff8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c316cc3e70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c316cc3ee8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c316cc41c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c316cc40b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c316cc4130 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c316cc4328 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c316cc43f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55c316cc4648 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c316cc44b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c316cc4530 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c316cc48a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55c316cc4718 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55c316cc4790 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c316cc4a68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c316cc4978 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c316cc4c28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55c316cc4b30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c316cc4ce0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c316cc4d90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c316cc4fc8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55c316cc4e40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c316cc4eb8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55c316cc5268 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55c316cc5170 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55c316cc5330 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55c316cc5380 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c316cc53d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316ab95b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x55c316cc0818 prev 0x55c316ab95b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c316cc17f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPAddress>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55c316cc17a0 'typename array_memory<IPAddress>::type' sugar
|   `-TypedefType 0x55c316cc1780 'conditional<true, sized_array_memory<4>, typed_array_memory<IPAddress> >::type' sugar
|     |-Typedef 0x55c316cc1630 'type'
|     `-SubstTemplateTypeParmType 0x55c316cc1450 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55c316a0b140 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a0b0e8 'T'
|       `-RecordType 0x55c316cc0fa0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55c316cc0eb8 'sized_array_memory'
|-FieldDecl 0x55c316cc5420 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPAddress>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55c316cc5470 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c316cc54a8 <line:118:5, col:15> col:15 value_type 'IPAddress':'IPAddress'
| `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|   |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c316a42dd8 'T'
|   `-RecordType 0x55c316a0cf00 'IPAddress'
|     `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc5538 <line:119:5, col:16> col:16 reference 'IPAddress &'
| `-LValueReferenceType 0x55c316cc5500 'IPAddress &'
|   `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-RecordType 0x55c316a0cf00 'IPAddress'
|       `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc55c8 <line:120:5, col:22> col:22 const_reference 'const IPAddress &'
| `-LValueReferenceType 0x55c316cc5590 'const IPAddress &'
|   `-QualType 0x55c316cc08b1 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a0cf00 'IPAddress'
|         `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc5658 <line:121:5, col:16> col:16 pointer 'IPAddress *'
| `-PointerType 0x55c316cc5620 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-RecordType 0x55c316a0cf00 'IPAddress'
|       `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc56e8 <line:122:5, col:22> col:22 const_pointer 'const IPAddress *'
| `-PointerType 0x55c316cc56b0 'const IPAddress *'
|   `-QualType 0x55c316cc08b1 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a0cf00 'IPAddress'
|         `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc64d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPAddress>::type':'IPAddress'
| `-ElaboratedType 0x55c316cc6480 'typename fast_argument<IPAddress>::type' sugar
|   `-TypedefType 0x55c316cc6460 'fast_argument<IPAddress, false>::type' sugar
|     |-Typedef 0x55c316cc63f0 'type'
|     `-SubstTemplateTypeParmType 0x55c316cc61b0 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55c316a15f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a15ef0 'T'
|       `-RecordType 0x55c316a0cf00 'IPAddress'
|         `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc6570 <line:126:5, col:22> col:22 const_access_type 'const IPAddress &'
| `-LValueReferenceType 0x55c316cc5590 'const IPAddress &'
|   `-QualType 0x55c316cc08b1 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a0cf00 'IPAddress'
|         `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc65c8 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316cc6630 <line:130:5, col:16> col:16 iterator 'IPAddress *'
| `-PointerType 0x55c316cc5620 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-RecordType 0x55c316a0cf00 'IPAddress'
|       `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-TypedefDecl 0x55c316cc6698 <line:131:5, col:22> col:22 const_iterator 'const IPAddress *'
| `-PointerType 0x55c316cc56b0 'const IPAddress *'
|   `-QualType 0x55c316cc08b1 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55c316cc08b0 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a0cf00 'IPAddress'
|         `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-EnumDecl 0x55c316cc66f0 <line:134:5> col:5
| `-EnumConstantDecl 0x55c316cc67e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPAddress>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c316cc67c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c316a444b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c316a44490 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c316a44470 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c316cc6868 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55c316cc6af8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316cc6920 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316cc69c0 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXConstructorDecl 0x55c316cc6db8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x55c316cc6ca0 <col:19, col:36> col:36 x 'const Vector<IPAddress> &'
|-CXXConstructorDecl 0x55c316cc7078 <line:141:5, col:32> col:12 Vector 'void (Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x55c316cc6f60 <col:19, col:31> col:31 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x55c316cc7390 <line:144:5, col:51> col:23 operator= 'Vector<IPAddress> &(const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x55c316cc7270 <col:33, col:50> col:50 x 'const Vector<IPAddress> &'
|-CXXMethodDecl 0x55c316cc76a0 <line:146:5, col:46> col:23 operator= 'Vector<IPAddress> &(Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x55c316cc7580 <col:33, col:45> col:45 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x55c316cc7990 <line:148:5, col:70> col:23 assign 'Vector<IPAddress> &(Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316cc77d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316cc7850 <col:43, col:69> col:63 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55c316cc7ae8 <line:150:5, col:55> col:49 begin 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x55c316cc7bc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cc7c20 <col:30> Inherited
|-CXXMethodDecl 0x55c316cc7c68 <line:151:5, col:53> col:49 end 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x55c316cc7d18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cc7d70 <col:30> Inherited
|-CXXMethodDecl 0x55c316cc7e38 <line:152:5, col:63> col:55 begin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55c316cc7ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cc7f40 <col:30> Inherited
|-CXXMethodDecl 0x55c316cc7f88 <line:153:5, col:61> col:55 end 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55c316cc8038 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cc8090 <col:30> Inherited
|-CXXMethodDecl 0x55c316cc80d8 <line:154:5, col:64> col:55 cbegin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55c316cc8188 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cc81e0 <col:30> Inherited
|-CXXMethodDecl 0x55c316cc8228 <line:155:5, col:62> col:55 cend 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55c316cc82d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cc8330 <col:30> Inherited
|-CXXMethodDecl 0x55c316cc8358 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c316cc8408 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c316cc84b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c316cc8678 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316cc8568 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316cc85e0 <col:37, col:63> col:57 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55c316cc87c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c316cc8738 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cc8978 <line:163:5, col:65> col:43 operator[] 'IPAddress &(Vector::size_type)'
| |-ParmVarDecl 0x55c316cc8880 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c316cc8a30 <col:20>
| `-OptimizeNoneAttr 0x55c316cc8a88 <col:30>
|-CXXMethodDecl 0x55c316cc8ba8 <line:164:5, col:73> col:49 operator[] 'const IPAddress &(Vector::size_type) const'
| |-ParmVarDecl 0x55c316cc8ab0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c316cc8c60 <col:20>
| `-OptimizeNoneAttr 0x55c316cc8cb8 <col:30>
|-CXXMethodDecl 0x55c316cc8d70 <line:165:5, col:29> col:15 at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c316cc8ce0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cc8eb8 <line:166:5, col:37> col:21 at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c316cc8e28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cc8fe8 <line:167:5, col:21> col:15 front 'IPAddress &()' inline
|-CXXMethodDecl 0x55c316cc9118 <line:168:5, col:29> col:21 front 'const IPAddress &() const' inline
|-CXXMethodDecl 0x55c316cc91e8 <line:169:5, col:20> col:15 back 'IPAddress &()' inline
|-CXXMethodDecl 0x55c316cc92b8 <line:170:5, col:28> col:21 back 'const IPAddress &() const' inline
|-CXXMethodDecl 0x55c316cc93f8 <line:172:5, col:39> col:15 unchecked_at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c316cc9368 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cc9540 <line:173:5, col:47> col:21 unchecked_at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c316cc94b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cc9688 <line:174:5, col:59> col:15 at_u 'IPAddress &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c316cc95f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c316cc9740 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c316cc9840 <line:175:5, col:71> col:21 at_u 'const IPAddress &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c316cc97b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c316cc98f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c316cc99b8 <line:177:5, col:20> col:15 data 'IPAddress *()' inline
|-CXXMethodDecl 0x55c316cc9ab8 <line:178:5, col:28> col:21 data 'const IPAddress *() const' inline
|-CXXMethodDecl 0x55c316cc9c38 <line:180:5, col:48> col:17 push_back 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x55c316cc9b78 <col:27, col:47> col:47 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-FunctionTemplateDecl 0x55c316cca3f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c316cc9cf0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPAddress>':'fast_argument<IPAddress, false>'
| `-CXXMethodDecl 0x55c316cca358 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPAddress &&)' inline
|   `-ParmVarDecl 0x55c316cca258 <col:58, col:62> col:62 v 'IPAddress &&'
|-CXXMethodDecl 0x55c316cca4d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c316cca628 <line:186:5, col:49> col:17 push_front 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x55c316cca598 <col:28, col:48> col:48 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55c316cca6e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c316cca928 <line:189:5, col:62> col:21 insert 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316cca7a0 <col:28, col:37> col:37 it 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x55c316cca818 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55c316ccaae8 <line:190:5, col:38> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator)' inline
| `-ParmVarDecl 0x55c316cca9f8 <col:27, col:36> col:36 it 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x55c316ccad38 <line:191:5, col:49> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::iterator)' inline
| |-ParmVarDecl 0x55c316ccabb0 <col:27, col:36> col:36 a 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x55c316ccac28 <col:39, col:48> col:48 b 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x55c316ccadf8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c316ccb058 <line:195:5, col:34> col:17 swap 'void (Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x55c316ccaf60 <col:22, col:33> col:33 x 'Vector<IPAddress> &'
`-CXXDestructorDecl 0x55c316ccb128 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55c316d902f8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316cbf848 <../elements/ip/ipgwoptions.hh:36:1, line:58:1> line:36:7 class IPGWOptions definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55c316cbf9a8 <col:1, col:7> col:7 implicit referenced class IPGWOptions
|-AccessSpecDecl 0x55c316cbfa38 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x55c316cbfac0 <line:38:3, col:15> col:3 IPGWOptions 'void ()'
|-CXXDestructorDecl 0x55c316cbfbb0 <line:39:3, col:16> col:3 ~IPGWOptions 'void ()' noexcept-unevaluated 0x55c316cbfbb0
| `-Overrides: [ 0x55c316ca7138 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55c316cbfce0 <line:41:3, col:58> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55c316ca8598 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55c316ccb608 <col:34, col:58>
|   `-ReturnStmt 0x55c316ccb5f8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55c316ccb5e0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55c316ccb5b8 <col:43> 'const char [12]' lvalue "IPGWOptions"
|-CXXMethodDecl 0x55c316cbfda8 <line:42:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55c316ca8660 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55c316ccb668 <col:34, col:56>
|   `-ReturnStmt 0x55c316ccb658 <col:36, col:43>
|     `-ImplicitCastExpr 0x55c316ccb640 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55c316ccb620 <col:43> 'const char []' lvalue Var 0x55c316ca8998 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55c316cbfe70 <line:43:3, col:60> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55c316ca8a28 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55c316ccb6c8 <col:34, col:60>
|   `-ReturnStmt 0x55c316ccb6b8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55c316ccb6a0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55c316ccb680 <col:43> 'const char []' lvalue Var 0x55c316ca8d90 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55c316cc0140 <line:44:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55c316ca9e30 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55c316cbfff0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55c316cc0068 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55c316cc0210 <line:45:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55c316ca9f00 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55c316cc02d0 <line:47:3, col:43> col:12 drops 'uint32_t () const'
| `-CompoundStmt 0x55c316ccb798 <col:26, col:43>
|   `-ReturnStmt 0x55c316ccb788 <col:28, col:35>
|     `-ImplicitCastExpr 0x55c316ccb770 <col:35> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x55c316ccb750 <col:35> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x55c316ccb720 <col:35> '<bound member function type>' .operator unsigned int 0x55c316a65c70
|           `-MemberExpr 0x55c316ccb6f0 <col:35> 'const atomic_uint32_t' lvalue ->_drops 0x55c316cc0638
|             `-CXXThisExpr 0x55c316ccb6e0 <col:35> 'const IPGWOptions *' implicit this
|-CXXMethodDecl 0x55c316cc0410 <line:49:3, col:34> col:11 handle_options 'Packet *(Packet *)'
| `-ParmVarDecl 0x55c316cc0380 <col:26, col:33> col:34 'Packet *'
|-CXXMethodDecl 0x55c316cc0558 <line:50:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55c316ca7778 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55c316cc04c8 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55c316cc0600 <line:52:2, col:9> col:2 private
|-FieldDecl 0x55c316cc0638 <line:54:3, col:19> col:19 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x55c316cc06a8 <line:55:3, col:18> col:18 _preferred_addr 'struct in_addr':'in_addr'
|-FieldDecl 0x55c316ccb210 <line:56:3, col:21> col:21 _my_addrs 'Vector<IPAddress>':'Vector<IPAddress>'
|-CXXConstructorDecl 0x55c316ccb288 <line:36:7> col:7 implicit IPGWOptions 'void (const IPGWOptions &)' inline default_delete noexcept-unevaluated 0x55c316ccb288
| `-ParmVarDecl 0x55c316ccb398 <col:7> col:7 'const IPGWOptions &'
`-CXXMethodDecl 0x55c316ccb438 <col:7> col:7 implicit operator= 'IPGWOptions &(const IPGWOptions &)' inline default_delete noexcept-unevaluated 0x55c316ccb438
  `-ParmVarDecl 0x55c316ccb548 <col:7> col:7 'const IPGWOptions &'

Layout: <CGRecordLayout
  LLVMType:%class.IPGWOptions = type { %class.Element.base, %class.atomic_uint32_t, %struct.in_addr, %class.Vector }
  NonVirtualBaseLLVMType:%class.IPGWOptions = type { %class.Element.base, %class.atomic_uint32_t, %struct.in_addr, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316a79cf0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c316a79e08 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55c316a79ea8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55c316a79f08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55c316a79f68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55c316a7a018 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316a7a320 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316a7a438 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55c316a7a4e0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55c316a7a548 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55c316a7a5d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55c316a80670 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c316a80aa8 <col:12>
|-CXXConstructorDecl 0x55c316a80778 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316a80888 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c316a7a4e0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55c316a83030 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55c316a83000 <col:12> 'const char *const' lvalue .data 0x55c316a7a4e0
| |     `-DeclRefExpr 0x55c316a82fe0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a80888 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c316a7a548 'length' 'int'
| | `-ImplicitCastExpr 0x55c316a830c0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55c316a83090 <col:12> 'const int' lvalue .length 0x55c316a7a548
| |     `-DeclRefExpr 0x55c316a83070 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a80888 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55c316a7a5d8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55c316a83150 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55c316a83120 <col:12> 'String::memo_t *const' lvalue .memo 0x55c316a7a5d8
| |     `-DeclRefExpr 0x55c316a83100 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a80888 '' 'const String::rep_t &'
| `-CompoundStmt 0x55c316a831a8 <col:12>
|-CXXConstructorDecl 0x55c316a80928 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c316a80928
| `-ParmVarDecl 0x55c316a80a38 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55c316a85f90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c316a919a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316a91ab8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55c316a91fd0 <col:12>
|   |-BinaryOperator 0x55c316a91de8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c316a91da0 <col:12> 'const char *' lvalue ->data 0x55c316a7a4e0
|   | | `-CXXThisExpr 0x55c316a91d90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c316a91dd0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55c316a91d60 <col:12> 'const char *const' lvalue .data 0x55c316a7a4e0
|   |     `-DeclRefExpr 0x55c316a91d40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a91ab8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c316a91eb0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55c316a91e68 <col:12> 'int' lvalue ->length 0x55c316a7a548
|   | | `-CXXThisExpr 0x55c316a91e58 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c316a91e98 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55c316a91e28 <col:12> 'const int' lvalue .length 0x55c316a7a548
|   |     `-DeclRefExpr 0x55c316a91e08 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a91ab8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55c316a91f78 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55c316a91f30 <col:12> 'String::memo_t *' lvalue ->memo 0x55c316a7a5d8
|   | | `-CXXThisExpr 0x55c316a91f20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55c316a91f60 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55c316a91ef0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c316a7a5d8
|   |     `-DeclRefExpr 0x55c316a91ed0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a91ab8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55c316a91fc0 <col:12>
|     `-UnaryOperator 0x55c316a91fa8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316a91f98 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55c316a91b28 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c316a91b28
  `-ParmVarDecl 0x55c316a91c38 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316a71260 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c316a71378 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55c316a71408 <col:16, col:22> col:16 public
|-TypedefDecl 0x55c316a71448 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55c316745fd0 'const char *'
|   `-QualType 0x55c316745521 'const char' const
|     `-BuiltinType 0x55c316745520 'char'
|-TypedefDecl 0x55c316a714d0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55c316a714a0 'String::const_iterator' sugar
|   |-Typedef 0x55c316a71448 'const_iterator'
|   `-PointerType 0x55c316745fd0 'const char *'
|     `-QualType 0x55c316745521 'const char' const
|       `-BuiltinType 0x55c316745520 'char'
|-TypedefDecl 0x55c316a71640 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55c316a715b0 'int (String::*)() const'
|   |-RecordType 0x55c316a712f0 'String'
|   | `-CXXRecord 0x55c316a71260 'String'
|   `-ParenType 0x55c316a71550 'int () const' sugar
|     `-FunctionProtoType 0x55c316a460f0 'int () const' const cdecl
|       `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316a716a8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55c31689aab0 'int64_t' sugar
|   |-Typedef 0x55c3167ae390 'int64_t'
|   `-TypedefType 0x55c316787630 '__int64_t' sugar
|     |-Typedef 0x55c316787208 '__int64_t'
|     `-BuiltinType 0x55c3167455a0 'long'
|-TypedefDecl 0x55c316a71710 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55c31689a9d0 'uint64_t' sugar
|   |-Typedef 0x55c3167ae530 'uint64_t'
|   `-TypedefType 0x55c3167876c0 '__uint64_t' sugar
|     |-Typedef 0x55c316787278 '__uint64_t'
|     `-BuiltinType 0x55c316745640 'unsigned long'
|-TypedefDecl 0x55c316a717a0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55c316a71770 'String::intmax_t' sugar
|   |-Typedef 0x55c316a716a8 'intmax_t'
|   `-TypedefType 0x55c31689aab0 'int64_t' sugar
|     |-Typedef 0x55c3167ae390 'int64_t'
|     `-TypedefType 0x55c316787630 '__int64_t' sugar
|       |-Typedef 0x55c316787208 '__int64_t'
|       `-BuiltinType 0x55c3167455a0 'long'
|-TypedefDecl 0x55c316a71830 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55c316a71800 'String::uintmax_t' sugar
|   |-Typedef 0x55c316a71710 'uintmax_t'
|   `-TypedefType 0x55c31689a9d0 'uint64_t' sugar
|     |-Typedef 0x55c3167ae530 'uint64_t'
|     `-TypedefType 0x55c3167876c0 '__uint64_t' sugar
|       |-Typedef 0x55c316787278 '__uint64_t'
|       `-BuiltinType 0x55c316745640 'unsigned long'
|-CXXConstructorDecl 0x55c316a718f0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55c316a71a98 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55c316a719d8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55c316a71c48 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55c316a71b88 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55c316a71da0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55c316a71d10 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55c316a71fb8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c316a71e68 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55c316a71ee8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55c316a721d8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55c316a72088 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55c316a72108 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55c316a723f8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c316a722a8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55c316a72328 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55c316a72618 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55c316a724c8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55c316a72548 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55c316a727a8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55c316a726e0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55c316a72928 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55c316a72868 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55c316a72ab8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55c316a729f0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55c316a72c10 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55c316a72b80 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55c316a72d68 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55c316a72cd8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55c316a72ec0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55c316a72e30 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55c316a73048 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55c316a72f88 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55c316a731d8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55c316a73110 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55c316a73368 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55c316a732a0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55c316a734f8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55c316a73430 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55c316a735f0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55c316a73718 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55c316a73898 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55c316a737d0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55c316a739e8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55c316a73958 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55c316a73aa0 <col:63> "" ""
|-CXXMethodDecl 0x55c316a73be8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55c316a73b28 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55c316a73df8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55c316a73ca8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55c316a73d28 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55c316a74018 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55c316a73ec0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55c316a73f40 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55c316a742f8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55c316a740d8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55c316a74158 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55c316a80140 <col:55> 'int' 10
| `-ParmVarDecl 0x55c316a741d0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c316a80160 <col:76> 'bool' true
|-CXXMethodDecl 0x55c316a745d8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55c316a743c0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55c316a74440 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55c316a80170 <col:56> 'int' 10
| `-ParmVarDecl 0x55c316a744b8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c316a80190 <col:77> 'bool' true
|-CXXMethodDecl 0x55c316a746e0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55c316a747a8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55c316a74870 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55c316a74910 <col:20>
| `-OptimizeNoneAttr 0x55c316a74968 <col:30>
|-CXXConversionDecl 0x55c316a74a58 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55c316a74b28 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55c316a74be8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55c316a74cd8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c316a74d98 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55c316a74f18 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55c316a74e50 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55c316a75068 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55c316a74fd8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55c316a75158 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55c316a75218 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55c316a75468 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55c316a752d0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55c316a75350 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55c316a756c8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55c316a75530 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55c316a755b0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55c316a75798 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316a759a8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55c316a75850 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55c316a758d0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55c316a75bc8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55c316a75a70 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55c316a75af0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55c316a75d58 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55c316a75c90 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55c316a75e48 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55c316a75fb8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c316a75ef8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c316a761c8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55c316a76078 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c316a760f8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c316a763e0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55c316a76288 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55c316a76300 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55c316a76570 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55c316a764a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c316a76790 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55c316a76630 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55c316a766b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c316a768e0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55c316a76850 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55c316a76ab8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c316a769a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c316a76a20 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55c316a76c08 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55c316a76b78 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55c316a76e20 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55c316a76cc0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55c316a76d40 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55c316a801a0 <col:39> 'int' 0
|-CXXMethodDecl 0x55c316a77040 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55c316a76ee0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55c316a76f60 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55c316a801c0 <col:48> 'int' 0
|-CXXMethodDecl 0x55c316a77220 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55c316a77100 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55c316a77180 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55c316a801e0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55c316a772f0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55c316a773b0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55c316a77470 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55c316a77530 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55c316a775f0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55c316a77798 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c316a776a0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55c316a77918 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55c316a77850 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55c316a77af0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c316a779d8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55c316a77c68 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55c316a77ba8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55c316a77db0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55c316a77d20 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55c316a77f00 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55c316a77e70 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55c316a780d8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55c316a77fc0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55c316a78040 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55c316a782b8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55c316a781a0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55c316a78220 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55c316a78408 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55c316a78378 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55c316a78618 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55c316a784c8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55c316a78548 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55c316a78778 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55c316a786e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55c316a788d0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55c316a78838 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55c316a78978 <col:57> "" ""
|-CXXMethodDecl 0x55c316a78a88 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55c316a789f8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55c316a78bd8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55c316a78b48 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55c316a78d58 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55c316a78c90 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55c316a78e20 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55c316a78ee0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55c316a78fa0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55c316a79040 <col:49> "" ""
|-CXXMethodDecl 0x55c316a790d0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55c316a79190 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55c316a79280 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55c316a79348 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55c316a79408 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55c316a794c8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55c316a795c0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55c316a79688 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55c316a79750 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55c316a79928 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55c316a79808 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55c316a79888 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55c316a79b50 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55c316a799f0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55c316a79a70 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55c316a79c60 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55c316a79cc8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55c316a79cf0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55c316a79e08 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55c316a79ea8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55c316a79f08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55c316a79f68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55c316a7a018 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55c316a7a080 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55c316a7a2b8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55c316a7a308 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316a7a298 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55c316a7a1a8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55c316a7a150 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55c316a7a190 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55c316a7a170 <col:32> 'int' 8
|-CXXRecordDecl 0x55c316a7a320 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c316a7a438 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55c316a7a4e0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55c316a7a548 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55c316a7a5d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55c316a80670 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c316a80aa8 <col:12>
| |-CXXConstructorDecl 0x55c316a80778 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c316a80888 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c316a7a4e0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55c316a83030 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55c316a83000 <col:12> 'const char *const' lvalue .data 0x55c316a7a4e0
| | |     `-DeclRefExpr 0x55c316a82fe0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a80888 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c316a7a548 'length' 'int'
| | | `-ImplicitCastExpr 0x55c316a830c0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55c316a83090 <col:12> 'const int' lvalue .length 0x55c316a7a548
| | |     `-DeclRefExpr 0x55c316a83070 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a80888 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55c316a7a5d8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55c316a83150 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55c316a83120 <col:12> 'String::memo_t *const' lvalue .memo 0x55c316a7a5d8
| | |     `-DeclRefExpr 0x55c316a83100 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a80888 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55c316a831a8 <col:12>
| |-CXXConstructorDecl 0x55c316a80928 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c316a80928
| | `-ParmVarDecl 0x55c316a80a38 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55c316a85f90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55c316a919a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c316a91ab8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55c316a91fd0 <col:12>
| |   |-BinaryOperator 0x55c316a91de8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55c316a91da0 <col:12> 'const char *' lvalue ->data 0x55c316a7a4e0
| |   | | `-CXXThisExpr 0x55c316a91d90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c316a91dd0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c316a91d60 <col:12> 'const char *const' lvalue .data 0x55c316a7a4e0
| |   |     `-DeclRefExpr 0x55c316a91d40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a91ab8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c316a91eb0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55c316a91e68 <col:12> 'int' lvalue ->length 0x55c316a7a548
| |   | | `-CXXThisExpr 0x55c316a91e58 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c316a91e98 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55c316a91e28 <col:12> 'const int' lvalue .length 0x55c316a7a548
| |   |     `-DeclRefExpr 0x55c316a91e08 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a91ab8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55c316a91f78 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55c316a91f30 <col:12> 'String::memo_t *' lvalue ->memo 0x55c316a7a5d8
| |   | | `-CXXThisExpr 0x55c316a91f20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55c316a91f60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55c316a91ef0 <col:12> 'String::memo_t *const' lvalue .memo 0x55c316a7a5d8
| |   |     `-DeclRefExpr 0x55c316a91ed0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55c316a91ab8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55c316a91fc0 <col:12>
| |     `-UnaryOperator 0x55c316a91fa8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c316a91f98 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55c316a91b28 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c316a91b28
|   `-ParmVarDecl 0x55c316a91c38 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55c316a7a650 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55c316a7a898 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55c316a7a6b8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55c316a7a738 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55c316a7a7b0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55c316a80630 <col:79, line:261:5>
|   |-BinaryOperator 0x55c316a802a8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55c316a80240 <col:2, col:5> 'const char *' lvalue .data 0x55c316a7a4e0
|   | | `-MemberExpr 0x55c316a80210 <col:2> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|   | |   `-CXXThisExpr 0x55c316a80200 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c316a80290 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c316a80270 <col:12> 'const char *' lvalue ParmVar 0x55c316a7a6b8 'data' 'const char *'
|   |-BinaryOperator 0x55c316a80370 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55c316a80308 <col:2, col:5> 'int' lvalue .length 0x55c316a7a548
|   | | `-MemberExpr 0x55c316a802d8 <col:2> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|   | |   `-CXXThisExpr 0x55c316a802c8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55c316a80358 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55c316a80338 <col:14> 'int' lvalue ParmVar 0x55c316a7a738 'length' 'int'
|   `-IfStmt 0x55c316a80618 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55c316a80490 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c316a80478 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55c316a80458 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55c316a80438 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55c316a803d0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55c316a7a5d8
|     |       | `-MemberExpr 0x55c316a803a0 <col:7> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|     |       |   `-CXXThisExpr 0x55c316a80390 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55c316a80420 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c316a80400 <col:17> 'String::memo_t *' lvalue ParmVar 0x55c316a7a7b0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55c316a805f0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55c316a805d8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c316a804e0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55c316a692c8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55c316a80548 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c316a79ea8
|         `-ImplicitCastExpr 0x55c316a80530 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55c316a80510 <col:27> 'String::memo_t *' lvalue ParmVar 0x55c316a7a7b0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55c316a7ab48 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55c316a7a968 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55c316a7a9e8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55c316a7aa60 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55c316a7a650 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55c316a80ab8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c316a80c48 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55c316a80bb0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55c316a80b20 <col:2> '<bound member function type>' ->assign_memo 0x55c316a7a898
|     | `-ImplicitCastExpr 0x55c316a80be8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55c316a80b10 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55c316a80c00 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316a80b50 <col:14> 'const char *' lvalue ParmVar 0x55c316a7a968 'data' 'const char *'
|     |-ImplicitCastExpr 0x55c316a80c18 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316a80b70 <col:20> 'int' lvalue ParmVar 0x55c316a7a9e8 'length' 'int'
|     `-ImplicitCastExpr 0x55c316a80c30 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55c316a80b90 <col:28> 'String::memo_t *' lvalue ParmVar 0x55c316a7aa60 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55c316a7acd8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55c316a7ac18 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55c316a80ea0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55c316a80e20 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55c316a80c70 <col:2> '<bound member function type>' ->assign_memo 0x55c316a7a898
|     | `-CXXThisExpr 0x55c316a80c60 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55c316a80e58 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55c316a80cf0 <col:14, col:19> 'const char *' lvalue .data 0x55c316a7a4e0
|     |   `-MemberExpr 0x55c316a80cc0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55c316a7a650
|     |     `-DeclRefExpr 0x55c316a80ca0 <col:14> 'const String' lvalue ParmVar 0x55c316a7ac18 'x' 'const String &'
|     |-ImplicitCastExpr 0x55c316a80e70 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55c316a80d70 <col:25, col:30> 'int' lvalue .length 0x55c316a7a548
|     |   `-MemberExpr 0x55c316a80d40 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55c316a7a650
|     |     `-DeclRefExpr 0x55c316a80d20 <col:25> 'const String' lvalue ParmVar 0x55c316a7ac18 'x' 'const String &'
|     `-ImplicitCastExpr 0x55c316a80e88 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55c316a80df0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55c316a7a5d8
|         `-MemberExpr 0x55c316a80dc0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55c316a7a650
|           `-DeclRefExpr 0x55c316a80da0 <col:38> 'const String' lvalue ParmVar 0x55c316a7ac18 'x' 'const String &'
|-CXXMethodDecl 0x55c316a7ada0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55c316a81860 <col:31, line:278:5>
|   `-IfStmt 0x55c316a81848 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55c316a80f40 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55c316a80f28 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55c316a80ef8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c316a7a5d8
|     |     `-MemberExpr 0x55c316a80ec8 <col:6> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|     |       `-CXXThisExpr 0x55c316a80eb8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55c316a81820 <col:15, line:277:2>
|       |-ParenExpr 0x55c316a813f0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55c316a813c0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55c316a81050 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55c316a81038 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55c316a81020 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55c316a80fe0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c316a79ea8
|       |   |       `-ImplicitCastExpr 0x55c316a80fc8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55c316a80f98 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55c316a7a5d8
|       |   |           `-MemberExpr 0x55c316a80f68 <col:27> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|       |   |             `-CXXThisExpr 0x55c316a80f58 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55c316a810b0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55c316a81090 <col:54> 'int' 0
|       |   `-CallExpr 0x55c316a81320 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55c316a81308 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55c316a81288 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55c316a81360 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c316a81198 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55c316a81378 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55c316a811c8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55c316a81390 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55c316a81200 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55c316a813a8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55c316a81270 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55c316a81258 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55c316a81220 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55c316a81740 <line:274:6, line:275:22>
|       | |-CallExpr 0x55c316a81600 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55c316a815e8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55c316a81560 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55c316a6a710 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55c316a81530 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55c316a79ea8
|       | |   `-ImplicitCastExpr 0x55c316a81518 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55c316a814e8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55c316a7a5d8
|       | |       `-MemberExpr 0x55c316a814b8 <col:40> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|       | |         `-CXXThisExpr 0x55c316a814a8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55c316a81700 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55c316a816e8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55c316a81628 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55c316a7f580 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55c316a81728 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55c316a81688 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55c316a7a5d8
|       |       `-MemberExpr 0x55c316a81658 <col:15> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|       |         `-CXXThisExpr 0x55c316a81648 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55c316a81800 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55c316a81798 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55c316a7a5d8
|         | `-MemberExpr 0x55c316a81768 <col:6> 'String::rep_t' lvalue ->_r 0x55c316a7a650
|         |   `-CXXThisExpr 0x55c316a81758 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55c316a817e8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55c316a817c8 <col:16> 'int' 0
|-CXXMethodDecl 0x55c316a7b038 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55c316a7ae58 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c316a7aed8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c316a7af50 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55c316a7b110 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55c316a7b360 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55c316a7b1c8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55c316a7b248 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55c316a7b2c0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c316a7b548 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55c316a7b430 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55c316a7b4b0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55c316a7b648 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55c316a81938 <col:41, line:286:5>
|   `-ReturnStmt 0x55c316a81928 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55c316a818f8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55c316a818c0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55c316a818a8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55c316a81888 <col:46> 'int' 1
|-CXXMethodDecl 0x55c316a7b8e8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55c316a7b700 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55c316a7b780 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55c316a7b800 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55c316a7f580 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55c316a7b9b0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55c316a7f650 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55c316a7f820 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55c316a7f708 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55c316a7f788 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55c316a7f8e0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55c316a7f9a8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55c316a7faa8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55c316a7fb20 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55c316a7fb98 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55c316a7fc00 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55c316a7fd00 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55c316a7fd50 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316a7fce0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55c316a7fcc0 <col:22> 'int' 14
|-CXXMethodDecl 0x55c316a7ff68 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55c316a7fd80 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55c316a7fe00 <col:38> col:41 'int'
| `-ParmVarDecl 0x55c316a7fe80 <col:43> col:46 'int'
|-FriendDecl 0x55c316a80070 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55c316a80100 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316cf7cb0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55c316cf7e88 prev 0x55c316cf7cb0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55c316cf7f18 <col:46, col:52> col:46 public
|-TypedefDecl 0x55c316cf7f40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316cf98a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55c316cf9850 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55c316cf9830 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55c316cf8158 'type'
|     `-SubstTemplateTypeParmType 0x55c316cf8120 'String' sugar
|       |-TemplateTypeParmType 0x55c316a35b10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a35ac0 'T'
|       `-RecordType 0x55c316a712f0 'String'
|         `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cf9958 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55c316cf9920 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55c316cf9900 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c316cf98a0 'type'
|     `-ElaboratedType 0x55c316cf9850 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55c316cf9830 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55c316cf8158 'type'
|         `-SubstTemplateTypeParmType 0x55c316cf8120 'String' sugar
|           |-TemplateTypeParmType 0x55c316a35b10 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c316a35ac0 'T'
|           `-RecordType 0x55c316a712f0 'String'
|             `-CXXRecord 0x55c316a71260 'String'
|-CXXMethodDecl 0x55c316cf9ad8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55c316cf99e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55c316cf9bc8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55c316cf9ca8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55c316cf9ca8
|-CXXMethodDecl 0x55c316cf9f78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c316cf9e80 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55c316cfa1b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c316cfa030 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c316cfa0a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c316cfa388 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c316cfa278 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c316cfa2f0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c316cfa4e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c316cfa5b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55c316cfa808 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c316cfa678 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c316cfa6f0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c316cfaa68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55c316cfa8d8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55c316cfa950 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c316cfac28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c316cfab38 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c316cfade8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55c316cfacf0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c316cfaea0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c316cfaf50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55c316cfb188 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55c316cfb000 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55c316cfb078 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55c316cfb428 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55c316cfb330 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55c316cfb4f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55c316cfb540 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55c316cfb590 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316ca9aa0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55c316b44508 prev 0x55c316ca9aa0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c316cf7c20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55c316cf7bd0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55c316cf7bb0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55c316b45610 'type'
|     `-SubstTemplateTypeParmType 0x55c316b454a0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55c316a0b8c0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55c316a0b868 'F'
|       `-RecordType 0x55c316b45100 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55c316b45020 'typed_array_memory'
|-FieldDecl 0x55c316cfb5e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55c316cfb630 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c316cfb668 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|   |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c316a42dd8 'T'
|   `-RecordType 0x55c316a712f0 'String'
|     `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfb6f8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55c316cfb6c0 'String &'
|   `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-RecordType 0x55c316a712f0 'String'
|       `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfb788 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55c316cfb750 'const String &'
|   `-QualType 0x55c316b445a1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a712f0 'String'
|         `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfb818 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55c316cfb7e0 'String *'
|   `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-RecordType 0x55c316a712f0 'String'
|       `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfb8a8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55c316cfb870 'const String *'
|   `-QualType 0x55c316b445a1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a712f0 'String'
|         `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfc500 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55c316cfc4b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55c316cfc490 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55c316cfc3c8 'type'
|     `-LValueReferenceType 0x55c316cfc390 'const String &'
|       `-QualType 0x55c316cfc131 'const String' const
|         `-SubstTemplateTypeParmType 0x55c316cfc130 'String' sugar
|           |-TemplateTypeParmType 0x55c316a15810 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55c316a157b8 'T'
|           `-RecordType 0x55c316a712f0 'String'
|             `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfc568 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55c316cfb750 'const String &'
|   `-QualType 0x55c316b445a1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a712f0 'String'
|         `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfc5c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316cfc628 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55c316cfb7e0 'String *'
|   `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-RecordType 0x55c316a712f0 'String'
|       `-CXXRecord 0x55c316a71260 'String'
|-TypedefDecl 0x55c316cfc690 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55c316cfb870 'const String *'
|   `-QualType 0x55c316b445a1 'const String' const
|     `-SubstTemplateTypeParmType 0x55c316b445a0 'String' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-RecordType 0x55c316a712f0 'String'
|         `-CXXRecord 0x55c316a71260 'String'
|-EnumDecl 0x55c316cfc6e8 <line:134:5> col:5
| `-EnumConstantDecl 0x55c316cfc7e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c316cfc7c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c316a444b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c316a44490 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c316a44470 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c316cfc868 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c316cfcaf8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316cfc920 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316cfc9c0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55c316cfcd88 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55c316cfcc70 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55c316cfd048 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55c316cfcf30 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c316cfd360 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55c316cfd240 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55c316cfd670 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55c316cfd550 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55c316cfd960 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316cfd7a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316cfd820 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c316cfda88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c316cfdb38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cfdb90 <col:30> Inherited
|-CXXMethodDecl 0x55c316cfdbd8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55c316cfdc88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cfdce0 <col:30> Inherited
|-CXXMethodDecl 0x55c316cfdda8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c316cfde58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cfdeb0 <col:30> Inherited
|-CXXMethodDecl 0x55c316cfdef8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c316cfdfa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cfe000 <col:30> Inherited
|-CXXMethodDecl 0x55c316cfe048 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c316cfe0f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cfe150 <col:30> Inherited
|-CXXMethodDecl 0x55c316cfe198 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55c316cfe248 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316cfe2a0 <col:30> Inherited
|-CXXMethodDecl 0x55c316cfe2c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c316cfe378 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c316cfe428 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c316cfe5e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316cfe4d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316cfe550 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c316cfe738 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c316cfe6a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cfe8e8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55c316cfe7f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c316cfe9a0 <col:20>
| `-OptimizeNoneAttr 0x55c316cfe9f8 <col:30>
|-CXXMethodDecl 0x55c316cfeb18 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55c316cfea20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c316cfebd0 <col:20>
| `-OptimizeNoneAttr 0x55c316cfec28 <col:30>
|-CXXMethodDecl 0x55c316cfece0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c316cfec50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cfee28 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c316cfed98 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cfef58 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55c316cff058 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55c316cff128 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55c316cff1f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55c316cff338 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c316cff2a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cff480 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c316cff3f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316cff5c8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c316cff538 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c316cff680 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c316cff780 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c316cff6f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c316cff838 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c316cff8f8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55c316cff9f8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55c316d00808 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c316d00740 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55c316d00f98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c316d008c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55c316d00ef8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55c316d00df8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55c316d01078 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c316d011c8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55c316d01138 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c316d01280 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c316d014c8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316d01340 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c316d013b8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55c316d01658 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55c316d01598 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c316d01868 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55c316d01720 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55c316d01798 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55c316d01928 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c316d01b88 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55c316d01a90 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55c316d01c58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55c316d01c58

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316d7f7d8 prev 0x55c316c2a468 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c316d7f8d0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55c316d7f960 <col:22, col:28> col:22 public
|-EnumDecl 0x55c316d7f988 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55c316d7faa8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fa88 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55c316d7fa70 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c316d7fa50 <col:14> 'int' 999
| |-EnumConstantDecl 0x55c316d7fb50 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fb30 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55c316d7fb18 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55c316d7faf8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c316d7fbe0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fbc0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55c316d7fba0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55c316d7fc70 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fc50 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55c316d7fc30 <col:13> 'int' 1
| |-EnumConstantDecl 0x55c316d7fd00 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fce0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55c316d7fcc0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55c316d7fd90 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fd70 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55c316d7fd50 <col:13> 'int' 3
| |-EnumConstantDecl 0x55c316d7fe20 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fe00 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55c316d7fde0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55c316d7feb0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7fe90 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55c316d7fe70 <col:14> 'int' 5
| |-EnumConstantDecl 0x55c316d7ff40 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55c316d7ff20 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55c316d7ff00 <col:12> 'int' 6
| `-EnumConstantDecl 0x55c316d7ffd0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55c316d7ffb0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55c316d7ff90 <col:13> 'int' 7
|-VarDecl 0x55c316d80040 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55c316d800c8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55c316d80150 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55c316d801d8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55c316d80260 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55c316d802e8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55c316d80370 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55c316d803f8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55c316d80480 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55c316d80508 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55c316d80590 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55c316d80690 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55c316d85978 '_nerrors' 'int'
| | `-IntegerLiteral 0x55c316d86108 <line:128:13> 'int' 0
| `-CompoundStmt 0x55c316d86178 <col:16, line:129:5>
|-CXXDestructorDecl 0x55c316d80780 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55c316d86188 <col:29, line:132:5>
|-CXXMethodDecl 0x55c316d80938 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55c316d80870 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c316d80a00 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c316d80ae8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c316d861e0 <col:44, line:161:5>
|   `-ReturnStmt 0x55c316d861d0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55c316d861b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c316d86198 <col:9> 'ErrorHandler *' lvalue Var 0x55c316d859d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55c316d80c28 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55c316d80b98 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55c316d80cf0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55c316d86240 <col:43, line:173:5>
|   `-ReturnStmt 0x55c316d86230 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55c316d86218 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55c316d861f8 <col:9> 'ErrorHandler *' lvalue Var 0x55c316d85a50 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55c316d80da8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55c316d80e28 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55c316d80f38 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55c316d80ea8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81088 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55c316d80ff8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c316d811e0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55c316d81148 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81338 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55c316d812a0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81490 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55c316d813f8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55c316d816a0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c316d81548 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55c316d815c8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81878 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c316d81760 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55c316d817e0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81a98 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c316d81938 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55c316d819b8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81c78 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c316d81b58 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c316d81bd8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81e58 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55c316d81d38 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55c316d81db8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55c316d81fe0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55c316d81f18 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55c316d821b0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55c316d82098 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c316d82110 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55c316d86498 <col:57, line:234:5>
|   `-ReturnStmt 0x55c316d86488 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55c316d86470 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c316d86418 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c316d863e8 <col:9> '<bound member function type>' ->xmessage 0x55c316d81fe0
|         | `-CXXThisExpr 0x55c316d863d8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55c316d86458 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c316d86440 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c316d863b8 <col:18, col:40> 'String' (CXXTemporary 0x55c316d863b8)
|               `-CallExpr 0x55c316d86380 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55c316d86368 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55c316d862e0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c316d841a8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55c316d86300 <col:31> 'const String' lvalue ParmVar 0x55c316d82110 'str' 'const String &'
|                 `-DeclRefExpr 0x55c316d86320 <col:36> 'const String' lvalue ParmVar 0x55c316d82098 'anno' 'const String &'
|-CXXMethodDecl 0x55c316d82490 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c316d82270 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55c316d822f0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55c316d82368 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c316d86740 <col:68, line:243:5>
|   `-ReturnStmt 0x55c316d86730 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55c316d86718 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55c316d866b8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55c316d86688 <col:9> '<bound member function type>' ->xmessage 0x55c316d821b0
|         | `-CXXThisExpr 0x55c316d86678 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c316d86538 <col:18> 'const String' lvalue ParmVar 0x55c316d82270 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c316d86700 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c316d866e8 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c316d86658 <col:24, col:40> 'String' (CXXTemporary 0x55c316d86658)
|               `-CXXMemberCallExpr 0x55c316d865f0 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55c316d86580 <col:24> '<bound member function type>' ->vformat 0x55c316d83670
|                 | `-CXXThisExpr 0x55c316d86558 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c316d86620 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c316d865b0 <col:32> 'const char *' lvalue ParmVar 0x55c316d822f0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c316d86638 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c316d865d0 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c316d82368 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c316d82730 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55c316d82558 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c316d825d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c316d82648 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55c316d86a78 <col:23, line:254:5>
|   `-ReturnStmt 0x55c316d86a68 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55c316d86a50 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55c316d869f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55c316d869c0 <col:9> '<bound member function type>' ->xmessage 0x55c316d821b0
|         | `-CXXThisExpr 0x55c316d869b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55c316d86a38 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55c316d86a20 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55c316d86970 <col:18, col:65> 'String' (CXXTemporary 0x55c316d86970)
|         |     `-CallExpr 0x55c316d86908 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55c316d868f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55c316d867e0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55c316d841a8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55c316d86800 <col:31> 'const String' lvalue ParmVar 0x55c316d825d0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55c316d86950 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55c316d86938 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55c316d868d0 <col:37, col:64> 'String' (CXXTemporary 0x55c316d868d0)
|         |             `-CallExpr 0x55c316d868a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55c316d86888 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55c316d86820 <col:37> 'String (const String &)' lvalue CXXMethod 0x55c316d847f8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55c316d86840 <col:56> 'const String' lvalue ParmVar 0x55c316d82558 'landmark' 'const String &'
|         `-DeclRefExpr 0x55c316d86990 <col:68> 'const String' lvalue ParmVar 0x55c316d82648 'str' 'const String &'
|-CXXMethodDecl 0x55c316d82ab0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55c316d827f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55c316d82870 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55c316d828f0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55c316d82968 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c316d86d30 <col:34, line:267:5>
|   `-ReturnStmt 0x55c316d86d20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55c316d86d08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55c316d86ca0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55c316d86c70 <col:9> '<bound member function type>' ->xmessage 0x55c316d82730
|         | `-CXXThisExpr 0x55c316d86c60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55c316d86b18 <col:18> 'const String' lvalue ParmVar 0x55c316d827f8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55c316d86b38 <col:28> 'const String' lvalue ParmVar 0x55c316d82870 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55c316d86cf0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55c316d86cd8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55c316d86c40 <col:34, col:50> 'String' (CXXTemporary 0x55c316d86c40)
|               `-CXXMemberCallExpr 0x55c316d86bd8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55c316d86b68 <col:34> '<bound member function type>' ->vformat 0x55c316d83670
|                 | `-CXXThisExpr 0x55c316d86b58 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55c316d86c08 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55c316d86b98 <col:42> 'const char *' lvalue ParmVar 0x55c316d828f0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55c316d86c20 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55c316d86bb8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c316d82968 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c316d82bc0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55c316d86db0 <col:25, line:288:5>
|   `-ReturnStmt 0x55c316d86da0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55c316d86d88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55c316d86d58 <col:9> 'const int' lvalue ->_nerrors 0x55c316d85978
|         `-CXXThisExpr 0x55c316d86d48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c316d82dd0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55c316d82c78 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55c316d82cf8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55c316d830b8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c316d82e98 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55c316d82f18 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55c316d82f90 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c316d83250 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55c316d83188 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55c316d83498 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55c316d83310 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55c316d83388 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55c316d87010 <col:58, line:357:5>
|   `-ReturnStmt 0x55c316d87000 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55c316d86fe8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55c316d86fb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55c316d86fa0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55c316d86f80 <col:9, col:29> 'String' (CXXTemporary 0x55c316d86f80)
|             `-CallExpr 0x55c316d86f10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55c316d86ef8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c316d86e78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55c316d830b8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55c316d86e18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55c316d86f48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55c316d86e38 <col:21> 'const char *' lvalue ParmVar 0x55c316d83310 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55c316d86f60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55c316d86e58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55c316d83388 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c316d83670 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55c316d83560 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55c316d835d8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55c316d837c8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55c316d83738 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55c316d83910 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55c316d83880 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55c316d83bb0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55c316d839c8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55c316d83a48 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55c316d83ac0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55c316d83d10 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55c316d83c80 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55c316d87128 <col:37, line:441:5>
|   `-IfStmt 0x55c316d87110 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55c316d87098 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55c316d87068 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55c316d87028 <col:6> 'int' lvalue ParmVar 0x55c316d83c80 'level' 'int'
|     | `-ImplicitCastExpr 0x55c316d87080 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55c316d87048 <col:15> 'ErrorHandler::Level' EnumConstant 0x55c316d7fd90 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55c316d870f8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55c316d870c8 <col:8> 'int' lvalue ->_nerrors 0x55c316d85978
|         `-CXXThisExpr 0x55c316d870b8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55c316d83dd8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55c316d871c0 <col:26, line:448:5>
|   `-BinaryOperator 0x55c316d871a0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55c316d87150 <col:2> 'int' lvalue ->_nerrors 0x55c316d85978
|     | `-CXXThisExpr 0x55c316d87140 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55c316d87180 <col:13> 'int' 0
|-CXXMethodDecl 0x55c316d83fa0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55c316d83e90 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55c316d83f08 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55c316d841a8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55c316d84060 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55c316d840d8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55c316d84458 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55c316d84268 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55c316d842e8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55c316d84368 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55c316d84510 <col:59> 0 0
|-CXXMethodDecl 0x55c316d846a8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55c316d84588 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55c316d84608 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55c316d87830 <col:70, line:534:5>
|   |-DeclStmt 0x55c316d87330 <line:528:2, col:20>
|   | |-VarDecl 0x55c316d871e8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55c316d87250 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55c316d87288 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55c316d872f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55c316d87400 <line:529:2, col:23>
|   | `-VarDecl 0x55c316d87360 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55c316d873e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55c316d873c8 <col:18> 'const char *' lvalue ParmVar 0x55c316d84588 'begin' 'const char *'
|   |-DoStmt 0x55c316d877c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55c316d876f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55c316d876e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55c316d876c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55c316d87418 <col:6> 'const char *' lvalue Var 0x55c316d87360 'x' 'const char *'
|   | |     `-CallExpr 0x55c316d87610 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55c316d875f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55c316d875b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55c316d85e50 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55c316d87678 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55c316d87660 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55c316d874d0 <col:20, col:27> 'String' (CXXTemporary 0x55c316d874d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55c316d87498 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55c316d87690 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c316d874f0 <col:30> 'const char *' lvalue Var 0x55c316d87360 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55c316d876a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55c316d87510 <col:33> 'const char *' lvalue ParmVar 0x55c316d84608 'end' 'const char *'
|   | |       |-UnaryOperator 0x55c316d87550 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c316d87530 <col:39> 'String' lvalue Var 0x55c316d871e8 'name' 'String'
|   | |       |-UnaryOperator 0x55c316d87588 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55c316d87568 <col:46> 'String' lvalue Var 0x55c316d87288 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55c316d875a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55c316d877b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55c316d87798 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55c316d87778 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55c316d87748 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|   |         `-ImplicitCastExpr 0x55c316d87730 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55c316d87710 <col:11> 'String' lvalue Var 0x55c316d871e8 'name' 'String'
|   `-ReturnStmt 0x55c316d87820 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55c316d87808 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55c316d877e8 <col:9> 'const char *' lvalue Var 0x55c316d87360 'x' 'const char *'
|-CXXMethodDecl 0x55c316d847f8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55c316d84768 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55c316d87e38 <col:55, line:550:5>
|   `-IfStmt 0x55c316d87e10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55c316d87a70 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55c316d87a58 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c316d87a40 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c316d87a20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c316d879f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|     | |       `-DeclRefExpr 0x55c316d87890 <col:6> 'const String' lvalue ParmVar 0x55c316d84768 'x' 'const String &'
|     | `-BinaryOperator 0x55c316d879d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55c316d879a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55c316d87950 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55c316d87938 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55c316d878f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55c316a8e290 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55c316d878b0 <col:11> 'const String' lvalue ParmVar 0x55c316d84768 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55c316d878d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55c316d879b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55c316d87988 <col:19> 'char' 123
|     |-ReturnStmt 0x55c316d87ae0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55c316d87ab0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55c316d87a90 <col:13> 'const String' lvalue ParmVar 0x55c316d84768 'x' 'const String &'
|     `-IfStmt 0x55c316d87de8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55c316d87b78 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c316d87b60 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c316d87b40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c316d87b10 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|       |       `-DeclRefExpr 0x55c316d87af0 <col:11> 'const String' lvalue ParmVar 0x55c316d84768 'x' 'const String &'
|       |-ReturnStmt 0x55c316d87d00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55c316d87ce8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55c316d87cb8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55c316d87ca0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55c316d87c80 <col:13, col:29> 'String' (CXXTemporary 0x55c316d87c80)
|       |         `-CallExpr 0x55c316d87c30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55c316d87c18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55c316d87b90 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55c316d83fa0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55c316d87c60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55c316d87bb0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55c316d87bd0 <col:28> 'const String' lvalue ParmVar 0x55c316d84768 'x' 'const String &'
|       `-ReturnStmt 0x55c316d87dd8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55c316d87dc0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55c316d87d90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55c316d87d78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55c316d87d58 <col:13, col:20> 'String' (CXXTemporary 0x55c316d87d58)
|                 `-CXXTemporaryObjectExpr 0x55c316d87d20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55c316d849c0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55c316d848b0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55c316d84928 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c316d860f8 <col:71> 'bool' false
|-CXXRecordDecl 0x55c316d84a70 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55c316d84d68 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55c316d84d00 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55c316d84ca0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55c316d84c60 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55c316a712f0 'String'
|       | `-CXXRecord 0x55c316a71260 'String'
|       |-BuiltinType 0x55c316745580 'int'
|       `-DecayedType 0x55c316c2b4b0 '__va_list_tag *' sugar
|         |-TypedefType 0x55c316c2b480 'va_list' sugar
|         | |-Typedef 0x55c316963190 'va_list'
|         | `-TypedefType 0x55c316963140 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55c31689ad68 '__gnuc_va_list'
|         |   `-TypedefType 0x55c31689acd0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55c316786d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55c316786ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55c3167462d0 '__va_list_tag'
|         |         `-CXXRecord 0x55c316746238 '__va_list_tag'
|         `-PointerType 0x55c316968a30 '__va_list_tag *'
|           `-RecordType 0x55c3167462d0 '__va_list_tag'
|             `-CXXRecord 0x55c316746238 '__va_list_tag'
|-EnumDecl 0x55c316d84dc0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55c316d84ec0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d85420 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d84ea0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55c316d84e80 <col:16> 'int' 1
| |-EnumConstantDecl 0x55c316d84f50 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d85438 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d84f30 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55c316d84f10 <col:21> 'int' 2
| |-EnumConstantDecl 0x55c316d84fe0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d85450 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d84fc0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55c316d84fa0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55c316d85070 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d85468 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d85050 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55c316d85030 <col:17> 'int' 8
| |-EnumConstantDecl 0x55c316d85100 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d85480 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d850e0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55c316d850c0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55c316d85190 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d85498 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d85170 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c316d85150 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c316d85220 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d854b0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d85200 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55c316d851e0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55c316d852b0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d854c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d85290 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55c316d85270 <col:14> 'int' 128
| |-EnumConstantDecl 0x55c316d85340 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55c316d854e0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316d85320 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55c316d85300 <col:16> 'int' 256
| `-EnumConstantDecl 0x55c316d853d0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55c316d854f8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316d853b0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55c316d85390 <col:12> 'int' 1024
|-CXXMethodDecl 0x55c316d85708 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55c316d85520 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55c316d855c0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55c316d85890 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55c316d857c8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55c316d85938 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55c316d85978 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55c316d859d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55c316d85a50 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55c316d85e50 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55c316d85ac8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55c316d85b48 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55c316d85bc8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55c316d85c40 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55c316d85cb8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55c316d85d30 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55c316d85f78 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55c316d85f78
| `-ParmVarDecl 0x55c316d86088 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55c316d88198 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55c316d88198
  `-ParmVarDecl 0x55c316d882a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316c2a4f8 prev 0x55c316c6c548 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316c2a5f0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55c316c2a680 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55c316c2a7b8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55c316c2a6b8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c316c2bbe0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c316c2bbc0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c2b758 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c316c2bc70 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c316c2bc30 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55c316c2a6b8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c316c2b7c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c316c2bcf0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c316c2bcb0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c2b820 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c316c2bd30 <col:54> 'bool' false
| `-CompoundStmt 0x55c316c2be38 <col:61, line:38:5>
|   `-BinaryOperator 0x55c316c2be18 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55c316c2bdb0 <col:9> 'const Element *' lvalue ->_context 0x55c316c2b6f8
|     | `-CXXThisExpr 0x55c316c2bda0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55c316c2be00 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55c316c2bde0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55c316c2a9c8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316c2a878 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55c316c2a8f0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55c316c2bc18 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55c316c2bbf8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c2b6f8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55c316c2be90 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c316c2be50 <col:20> 'const Element *' lvalue ParmVar 0x55c316c2a878 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55c316c2b758 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55c316c2bf10 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c316c2bed0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55c316c2a8f0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55c316c2b7c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55c316c2bf90 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55c316c2bf50 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c2b820 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55c316c2bfd0 <col:73> 'bool' false
| `-CompoundStmt 0x55c316c2c048 <col:80, line:46:5>
|-CXXMethodDecl 0x55c316c2aaf8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55c316c2c0c0 <col:36, line:51:5>
|   `-ReturnStmt 0x55c316c2c0b0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55c316c2c098 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55c316c2c068 <col:16> 'const Element *const' lvalue ->_context 0x55c316c2b6f8
|         `-CXXThisExpr 0x55c316c2c058 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c316c2abe8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55c316c2c140 <col:32, line:57:5>
|   `-ReturnStmt 0x55c316c2c130 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55c316c2c118 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55c316c2c0e8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55c316c2b758
|         `-CXXThisExpr 0x55c316c2c0d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55c316c2aca8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55c316c2ae30 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c316c2ad60 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55c316c2af80 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c316c2aef0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c316c2b0d0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55c316c2b040 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55c316c2b2d8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55c316c2b188 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55c316c2b200 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55c316c2b608 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55c316c2b398 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55c316c2b418 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55c316c2b4e0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55c316c2b6c0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55c316c2b6f8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55c316c2b758 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55c316c2b7c0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55c316c2b820 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55c316c2b870 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c316c2b870
| `-ParmVarDecl 0x55c316c2b988 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55c316c2ba28 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55c316c2ba28
| `-ParmVarDecl 0x55c316c2bb38 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55c316d910b8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316d3c8d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55c316d3cae8 prev 0x55c316d3c8d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55c316d3db00 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55c316d3dab0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55c316d3da90 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55c316d3d940 'type'
|     `-SubstTemplateTypeParmType 0x55c316cc1450 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55c316a0b140 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a0b0e8 'T'
|       `-RecordType 0x55c316cc0fa0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55c316cc0eb8 'sized_array_memory'
|-FieldDecl 0x55c316d3dc00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55c316d3dc50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55c316d3dc88 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|   |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55c316a42dd8 'T'
|   `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d3dd18 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55c316d3dce0 'int &'
|   `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d3ddd8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55c316d3dda0 'const int &'
|   `-QualType 0x55c316d3cb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d3de68 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55c316d3de30 'int *'
|   `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d3def8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55c316d3dec0 'const int *'
|   `-QualType 0x55c316d3cb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d3eae0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55c316d3ea90 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55c316d3ea70 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55c316d3ea00 'type'
|     `-SubstTemplateTypeParmType 0x55c316d3e7c0 'int' sugar
|       |-TemplateTypeParmType 0x55c316a15f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a15ef0 'T'
|       `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d497b0 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55c316d3dda0 'const int &'
|   `-QualType 0x55c316d3cb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d49808 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d49870 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55c316d3de30 'int *'
|   `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|     |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55c316a42dd8 'T'
|     `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316d498d8 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55c316d3dec0 'const int *'
|   `-QualType 0x55c316d3cb81 'const int' const
|     `-SubstTemplateTypeParmType 0x55c316d3cb80 'int' sugar
|       |-TemplateTypeParmType 0x55c316a42e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55c316a42dd8 'T'
|       `-BuiltinType 0x55c316745580 'int'
|-EnumDecl 0x55c316d49930 <line:134:5> col:5
| `-EnumConstantDecl 0x55c316d49a20 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55c316d49a00 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55c316a444b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55c316a44490 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55c316a44470 <col:40> 'int' 1
|-CXXConstructorDecl 0x55c316d49aa8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55c316d49cf8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316d49b60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316d49c00 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55c316d49fb8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55c316d49ea0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55c316d4a278 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55c316d4a160 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c316d4a5c0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55c316d4a4a0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55c316d4a8d0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55c316d4a7b0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55c316d4abc0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316d4aa08 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316d4aa80 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c316d4ace8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c316d4adc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316d4ae20 <col:30> Inherited
|-CXXMethodDecl 0x55c316d4ae68 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55c316d4af18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316d4af70 <col:30> Inherited
|-CXXMethodDecl 0x55c316d4b038 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c316d4b0e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316d4b140 <col:30> Inherited
|-CXXMethodDecl 0x55c316d4b188 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c316d4b238 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316d4b290 <col:30> Inherited
|-CXXMethodDecl 0x55c316d4b2d8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c316d4b388 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316d4b3e0 <col:30> Inherited
|-CXXMethodDecl 0x55c316d4b428 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55c316d4b4d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55c316d4b530 <col:30> Inherited
|-CXXMethodDecl 0x55c316d4b558 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c316d4b608 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55c316d4b6b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55c316d4b878 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316d4b768 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55c316d4b7e0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c316d4b9c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55c316d4b938 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316d4bb78 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55c316d4ba80 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c316d4bc30 <col:20>
| `-OptimizeNoneAttr 0x55c316d4bc88 <col:30>
|-CXXMethodDecl 0x55c316d4bda8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55c316d4bcb0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55c316d4be60 <col:20>
| `-OptimizeNoneAttr 0x55c316d4beb8 <col:30>
|-CXXMethodDecl 0x55c316d4bf70 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c316d4bee0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316d4c0b8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c316d4c028 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316d4c1e8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55c316d4c318 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55c316d4c3e8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55c316d4c4b8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55c316d4c5f8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55c316d4c568 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316d4c740 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55c316d4c6b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55c316d4c888 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55c316d4c7f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c316d4c940 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55c316d4ca40 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55c316d4c9b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55c316d4caf8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55c316d4cbb8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55c316d4ccb8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55c316d4ce38 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c316d4cd78 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55c316d4d5f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55c316d4cef0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55c316d4d558 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55c316d4d458 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55c316d4d6d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55c316d4d828 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55c316d4d798 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c316d4d8e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55c316d4db28 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55c316d4d9a0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c316d4da18 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55c316d4dce8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55c316d4dbf8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c316d4df38 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55c316d4ddb0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55c316d4de28 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55c316d4dff8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55c316d4e258 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55c316d4e160 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55c316d4e328 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316d3aa48 prev 0x55c316d1fed8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c316d3ab40 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55c316d3ac30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55c316d5f960 <col:16, line:828:9>
|-CXXDestructorDecl 0x55c316d3ad20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55c316d5f970 <col:25, line:830:9>
|-CXXMethodDecl 0x55c316d3ae20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55c316d3aed0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55c316d3af78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c316d3af78
| `-ParmVarDecl 0x55c316d3b088 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55c316d3b848 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c316d3b848
  `-ParmVarDecl 0x55c316d3b958 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316d1fce8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55c316d1fe48 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55c316d1fed8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55c316d1ff90 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55c316d20098 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55c316d1ffc8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c316d4f8e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c316d4f8c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c316d203b8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55c316d20230 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55c316d202a8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c316d4f920 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c316d4f900 <col:59> 'int' 0
|-CXXConstructorDecl 0x55c316d20590 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316d20480 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55c316d204f8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c316d4f958 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c316d4f938 <col:55> 'int' 0
|-CXXConstructorDecl 0x55c316d20948 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55c316d20730 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55c316d207a8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55c316d20820 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55c316d4f990 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55c316d4f970 <col:31> 'int' 0
|-CXXConstructorDecl 0x55c316d20b08 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55c316d20a48 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55c316d20c00 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55c316d20de8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55c316d20cf0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55c316d20ed8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55c316d4fd40 <col:24, line:291:5>
|   `-ReturnStmt 0x55c316d4fd30 <line:290:9, col:79>
|     `-BinaryOperator 0x55c316d4fd10 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55c316d4fbe8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55c316d4fb40 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55c316d4fb20 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55c316d4fa18 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55c316d4fa00 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55c316d4f9e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55c316d4f9b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55c316d3c870
|       | |   |       `-CXXThisExpr 0x55c316d4f9a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55c316d4fb08 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55c316d4faf0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55c316d4fab8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55c316d4fa88 <col:28, col:35> '<bound member function type>' ->size 0x55c316cfe2c8
|       | |           `-ImplicitCastExpr 0x55c316d4fad8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55c316d4fa70 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55c316d4fa40 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55c316d3c870
|       | |                 `-CXXThisExpr 0x55c316d4fa30 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55c316d4fbd0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55c316d4fbb8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55c316d4fba0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55c316d4fb70 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55c316d4e470
|       |         `-CXXThisExpr 0x55c316d4fb60 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55c316d4fcf0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55c316d4fcd8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c316d4fcc0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c316d4fc80 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c316d4fc68 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c316d4fc18 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c316d4e520
|         |     |   `-CXXThisExpr 0x55c316d4fc08 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c316d4fc48 <col:73> 'int' 0
|         `-IntegerLiteral 0x55c316d4fca0 <col:79> 'int' 0
|-CXXMethodDecl 0x55c316d20f98 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55c316d4ff18 <col:32, line:296:5>
|   `-ReturnStmt 0x55c316d4ff08 <line:295:9, col:49>
|     `-BinaryOperator 0x55c316d4fee8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55c316d4fdc8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55c316d4fdb0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55c316d4fd98 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55c316d4fd68 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55c316d4e470
|       |       `-CXXThisExpr 0x55c316d4fd58 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55c316d4fec8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55c316d4feb0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55c316d4fe98 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55c316d4fe58 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55c316d4fe40 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55c316d4fdf0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55c316d4e520
|         |     |   `-CXXThisExpr 0x55c316d4fde0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55c316d4fe20 <col:43> 'int' 0
|         `-IntegerLiteral 0x55c316d4fe78 <col:49> 'int' 0
|-CXXMethodDecl 0x55c316d21088 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55c316d50128 <col:19, line:306:5>
|   |-IfStmt 0x55c316d50048 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55c316d4ff88 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55c316d4ff70 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55c316d4ff40 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c316d3c870
|   | |     `-CXXThisExpr 0x55c316d4ff30 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55c316d50028 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55c316d4fff8 <col:13, col:20> '<bound member function type>' ->clear 0x55c316d01928
|   |     `-ImplicitCastExpr 0x55c316d4ffe0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55c316d4ffb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55c316d3c870
|   |         `-CXXThisExpr 0x55c316d4ffa0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55c316d500d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55c316d500a0 <col:9, col:16> '<bound member function type>' .clear 0x55c316d4dff8
|   |   `-MemberExpr 0x55c316d50070 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55c316d4e410
|   |     `-CXXThisExpr 0x55c316d50060 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55c316d50118 <line:305:9, col:17>
|     `-UnaryOperator 0x55c316d50100 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316d500f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c316d21308 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55c316d21210 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55c316d21488 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55c316d213c0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55c316d21808 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55c316d21530 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55c316d21768 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55c316d215d8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55c316d21650 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55c316d50448 <col:67, line:327:5>
|     |-WhileStmt 0x55c316d503f8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55c316d50210 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55c316d50190 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55c316c64a18 0x55c316aadff8 0x55c316aadcd0 0x55c316a9e4a0 0x55c316a9e150 0x55c316a9da40 0x55c316a703b0 0x55c3169fd660
|     | | |-DeclRefExpr 0x55c316d50150 <col:16> 'Iter' lvalue ParmVar 0x55c316d215d8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55c316d50170 <col:25> 'Iter' lvalue ParmVar 0x55c316d21650 'end' 'Iter'
|     | `-CompoundStmt 0x55c316d503d8 <col:30, line:325:9>
|     |   |-CallExpr 0x55c316d50378 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55c316d50258 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55c316d50348 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55c316d502d8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|     |   |   `-DeclRefExpr 0x55c316d502b8 <col:24> 'Iter' lvalue ParmVar 0x55c316d215d8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55c316d503c0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55c316d503a0 <col:15> 'Iter' lvalue ParmVar 0x55c316d215d8 'begin' 'Iter'
|     `-ReturnStmt 0x55c316d50438 <line:326:9, col:17>
|       `-UnaryOperator 0x55c316d50420 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d50410 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c316d21910 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55c316d21880 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55c316d21a58 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55c316d219c8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55c316d21b20 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55c316d50528 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55c316d504c8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55c316d50478 <col:9> '<bound member function type>' ->reset_from 0x55c316d4e898
|   | | `-CXXThisExpr 0x55c316d50468 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55c316d504a8 <col:20> 'int' 0
|   `-ReturnStmt 0x55c316d50518 <line:352:9, col:17>
|     `-UnaryOperator 0x55c316d50500 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316d504f0 <col:17> 'Args *' this
|-VarDecl 0x55c316d21bd8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c316d21c40 <col:38> 'int' 1
|-VarDecl 0x55c316d21cd0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c316d21d38 <col:39> 'int' 2
|-VarDecl 0x55c316d21dc8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c316d21e30 <col:39> 'int' 4
|-VarDecl 0x55c316d21ec0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55c316d21f28 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55c316d222a8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55c316d21fa0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c316d22208 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c316d22050 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d220f8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55c316d50680 <col:43, line:371:5>
|     `-ReturnStmt 0x55c316d50670 <line:370:9, col:34>
|       `-CallExpr 0x55c316d50638 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d50558 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d505d8 <col:21> 'const char *' lvalue ParmVar 0x55c316d22050 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d505f8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55c316d50618 <col:33> 'T' lvalue ParmVar 0x55c316d220f8 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d225d8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55c316d22310 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c316d22538 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55c316d223c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d22468 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55c316d507d0 <col:45, line:375:5>
|     `-ReturnStmt 0x55c316d507c0 <line:374:9, col:42>
|       `-CallExpr 0x55c316d50788 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d506a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d50728 <col:21> 'const char *' lvalue ParmVar 0x55c316d223c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d50748 <col:30> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c316d50768 <col:41> 'T' lvalue ParmVar 0x55c316d22468 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d22908 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55c316d22640 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55c316d22868 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55c316d226f0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c316d22798 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55c316d50920 <col:45, line:379:5>
| |   `-ReturnStmt 0x55c316d50910 <line:378:9, col:43>
| |     `-CallExpr 0x55c316d508d8 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c316d507f8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c316d50878 <col:21> 'const char *' lvalue ParmVar 0x55c316d226f0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55c316d50898 <col:30> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int'
| |       `-DeclRefExpr 0x55c316d508b8 <col:42> 'T' lvalue ParmVar 0x55c316d22798 'x' 'T &'
| `-CXXMethodDecl 0x55c316d91a48 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, Vector<IPAddress> &)'
|   |-TemplateArgument type 'Vector<IPAddress>'
|   |-ParmVarDecl 0x55c316d91868 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55c316d91938 <col:39, col:42> col:42 x 'Vector<IPAddress> &'
|-FunctionTemplateDecl 0x55c316d22c38 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55c316d22970 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55c316d22b98 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55c316d22a20 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55c316d22ac8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55c316d50b20 <col:46, line:383:5>
| |   `-ReturnStmt 0x55c316d50b10 <line:382:9, col:55>
| |     `-CallExpr 0x55c316d50ad8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55c316d50948 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55c316d509c8 <col:21> 'const char *' lvalue ParmVar 0x55c316d22a20 'keyword' 'const char *'
| |       |-BinaryOperator 0x55c316d50a98 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55c316d50a48 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55c316d50a28 <col:30> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55c316d50a80 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55c316d50a60 <col:42> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55c316d50ab8 <col:54> 'T' lvalue ParmVar 0x55c316d22ac8 'x' 'T &'
| `-CXXMethodDecl 0x55c316d91548 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x55c316d91360 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55c316d91438 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x55c316d23038 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55c316d22ca0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c316d22f98 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55c316d22d50 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d22dd0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d22e78 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55c316d50c60 <col:54, line:388:5>
|     |-CallExpr 0x55c316d50be8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d50b38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c316d50b78 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c316d50b88 <col:30> 'const char *' lvalue ParmVar 0x55c316d22d50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c316d50ba8 <col:39> 'int' lvalue ParmVar 0x55c316d22dd0 'flags' 'int'
|     | `-DeclRefExpr 0x55c316d50bc8 <col:46> 'T' lvalue ParmVar 0x55c316d22e78 'x' 'T &'
|     `-ReturnStmt 0x55c316d50c50 <line:387:9, col:17>
|       `-UnaryOperator 0x55c316d50c38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d50c28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d234e8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55c316d230a8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c316d23128 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c316d23448 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c316d231e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d23288 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55c316d23328 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c316d50dd0 <col:74, line:403:5>
|     `-ReturnStmt 0x55c316d50dc0 <line:402:9, col:56>
|       `-CallExpr 0x55c316d50d80 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d50c90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d50d00 <col:28> 'const char *' lvalue ParmVar 0x55c316d231e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d50d20 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c316d50d40 <col:40> 'T' lvalue ParmVar 0x55c316d23288 'x' 'T &'
|         `-DeclRefExpr 0x55c316d50d60 <col:43> 'const V' lvalue ParmVar 0x55c316d23328 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c316d23958 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c316d23558 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c316d235d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c316d238b8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55c316d23698 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d23738 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55c316d237d8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c316d50f38 <col:76, line:407:5>
|     `-ReturnStmt 0x55c316d50f28 <line:406:9, col:65>
|       `-CallExpr 0x55c316d50ee8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d50df8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d50e68 <col:28> 'const char *' lvalue ParmVar 0x55c316d23698 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d50e88 <col:37> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int'
|         |-DeclRefExpr 0x55c316d50ea8 <col:49> 'T' lvalue ParmVar 0x55c316d23738 'x' 'T &'
|         `-DeclRefExpr 0x55c316d50ec8 <col:52> 'const V' lvalue ParmVar 0x55c316d237d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c316d23ea8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55c316d239c8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c316d23a48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c316d23e08 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c316d23b08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d23b88 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d23c28 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55c316d23cc8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c316d510a0 <col:85, line:412:5>
|     |-CallExpr 0x55c316d51020 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d50f50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c316d50f90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c316d50fa0 <col:37> 'const char *' lvalue ParmVar 0x55c316d23b08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c316d50fc0 <col:46> 'int' lvalue ParmVar 0x55c316d23b88 'flags' 'int'
|     | |-DeclRefExpr 0x55c316d50fe0 <col:53> 'T' lvalue ParmVar 0x55c316d23c28 'x' 'T &'
|     | `-DeclRefExpr 0x55c316d51000 <col:56> 'const V' lvalue ParmVar 0x55c316d23cc8 'default_value' 'const V &'
|     `-ReturnStmt 0x55c316d51090 <line:411:9, col:17>
|       `-UnaryOperator 0x55c316d51078 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d51068 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d24338 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55c316d23f20 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d23f98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d24298 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d24058 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d240d0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d24178 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55c316d51220 <col:53, line:425:5>
|     `-ReturnStmt 0x55c316d51210 <line:424:9, col:42>
|       `-CallExpr 0x55c316d511d0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d510d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d51150 <col:21> 'const char *' lvalue ParmVar 0x55c316d24058 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d51170 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c316d51190 <col:33> 'P' lvalue ParmVar 0x55c316d240d0 'parser' 'P'
|         `-DeclRefExpr 0x55c316d511b0 <col:41> 'T' lvalue ParmVar 0x55c316d24178 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d24788 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55c316d243a8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d24428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d246e8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d244e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d24560 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d24608 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c316d51398 <col:55, line:429:5>
|     `-ReturnStmt 0x55c316d51388 <line:428:9, col:50>
|       `-CallExpr 0x55c316d51348 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d51248 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d512c8 <col:21> 'const char *' lvalue ParmVar 0x55c316d244e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d512e8 <col:30> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c316d51308 <col:41> 'P' lvalue ParmVar 0x55c316d24560 'parser' 'P'
|         `-DeclRefExpr 0x55c316d51328 <col:49> 'T' lvalue ParmVar 0x55c316d24608 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d24bd8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55c316d247f8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d24878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d24b38 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d24938 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d249b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d24a58 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55c316d51510 <col:55, line:433:5>
|     `-ReturnStmt 0x55c316d51500 <line:432:9, col:51>
|       `-CallExpr 0x55c316d514c0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d513c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d51440 <col:21> 'const char *' lvalue ParmVar 0x55c316d24938 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d51460 <col:30> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int'
|         |-DeclRefExpr 0x55c316d51480 <col:42> 'P' lvalue ParmVar 0x55c316d249b0 'parser' 'P'
|         `-DeclRefExpr 0x55c316d514a0 <col:50> 'T' lvalue ParmVar 0x55c316d24a58 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d25028 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55c316d24c48 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d24cc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d24f88 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d24d88 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d24e00 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d24ea8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55c316d51738 <col:56, line:437:5>
|     `-ReturnStmt 0x55c316d51728 <line:436:9, col:63>
|       `-CallExpr 0x55c316d516e8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d51538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d515b8 <col:21> 'const char *' lvalue ParmVar 0x55c316d24d88 'keyword' 'const char *'
|         |-BinaryOperator 0x55c316d51688 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c316d51638 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c316d51618 <col:30> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c316d51670 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c316d51650 <col:42> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c316d516a8 <col:54> 'P' lvalue ParmVar 0x55c316d24e00 'parser' 'P'
|         `-DeclRefExpr 0x55c316d516c8 <col:62> 'T' lvalue ParmVar 0x55c316d24ea8 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d29ab8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55c316d25098 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d25118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d29a18 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c316d251d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d297b8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d29830 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d298d8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55c316d53130 <col:64, line:442:5>
|     |-CallExpr 0x55c316d530b0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d51750 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c316d51790 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c316d53030 <col:30> 'const char *' lvalue ParmVar 0x55c316d251d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c316d53050 <col:39> 'int' lvalue ParmVar 0x55c316d297b8 'flags' 'int'
|     | |-DeclRefExpr 0x55c316d53070 <col:46> 'P' lvalue ParmVar 0x55c316d29830 'parser' 'P'
|     | `-DeclRefExpr 0x55c316d53090 <col:54> 'T' lvalue ParmVar 0x55c316d298d8 'x' 'T &'
|     `-ReturnStmt 0x55c316d53120 <line:441:9, col:17>
|       `-UnaryOperator 0x55c316d53108 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d530f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d2a0b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55c316d29b30 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d29ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c316d29c28 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c316d2a018 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c316d29cf0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d29d68 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d29e08 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55c316d29ed8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c316d532c8 <col:84, line:458:5>
|     `-ReturnStmt 0x55c316d532b8 <line:457:9, col:64>
|       `-CallExpr 0x55c316d53270 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d53160 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d531d0 <col:28> 'const char *' lvalue ParmVar 0x55c316d29cf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d531f0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55c316d53210 <col:40> 'P' lvalue ParmVar 0x55c316d29d68 'parser' 'P'
|         |-DeclRefExpr 0x55c316d53230 <col:48> 'T' lvalue ParmVar 0x55c316d29e08 'x' 'T &'
|         `-DeclRefExpr 0x55c316d53250 <col:51> 'const V' lvalue ParmVar 0x55c316d29ed8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c316d2a638 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55c316d2a130 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2a1a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c316d2a228 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c316d2a598 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55c316d2a2f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2a368 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2a408 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55c316d2a4a8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c316d53458 <col:86, line:462:5>
|     `-ReturnStmt 0x55c316d53448 <line:461:9, col:73>
|       `-CallExpr 0x55c316d53400 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d532f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d53360 <col:28> 'const char *' lvalue ParmVar 0x55c316d2a2f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d53380 <col:37> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int'
|         |-DeclRefExpr 0x55c316d533a0 <col:49> 'P' lvalue ParmVar 0x55c316d2a368 'parser' 'P'
|         |-DeclRefExpr 0x55c316d533c0 <col:57> 'T' lvalue ParmVar 0x55c316d2a408 'x' 'T &'
|         `-DeclRefExpr 0x55c316d533e0 <col:60> 'const V' lvalue ParmVar 0x55c316d2a4a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55c316d2ac98 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55c316d2a6b0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2a728 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55c316d2a7a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c316d2abf8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c316d2a870 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2a8f0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d2a968 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2aa08 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55c316d2aaa8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55c316d535e8 <col:95, line:467:5>
|     |-CallExpr 0x55c316d53560 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d53470 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55c316d534b0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55c316d534c0 <col:37> 'const char *' lvalue ParmVar 0x55c316d2a870 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c316d534e0 <col:46> 'int' lvalue ParmVar 0x55c316d2a8f0 'flags' 'int'
|     | |-DeclRefExpr 0x55c316d53500 <col:53> 'P' lvalue ParmVar 0x55c316d2a968 'parser' 'P'
|     | |-DeclRefExpr 0x55c316d53520 <col:61> 'T' lvalue ParmVar 0x55c316d2aa08 'x' 'T &'
|     | `-DeclRefExpr 0x55c316d53540 <col:64> 'const V' lvalue ParmVar 0x55c316d2aaa8 'default_value' 'const V &'
|     `-ReturnStmt 0x55c316d535d8 <line:466:9, col:17>
|       `-UnaryOperator 0x55c316d535c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d535b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d2b278 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55c316d2ad18 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2ad98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c316d2ae18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c316d2b1d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c316d2aee0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2af58 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2aff8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c316d2b098 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c316d53790 <col:63, line:481:5>
|     `-ReturnStmt 0x55c316d53780 <line:480:9, col:47>
|       `-CallExpr 0x55c316d53738 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d53618 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d53698 <col:21> 'const char *' lvalue ParmVar 0x55c316d2aee0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d536b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55c316d536d8 <col:33> 'P' lvalue ParmVar 0x55c316d2af58 'parser' 'P'
|         |-DeclRefExpr 0x55c316d536f8 <col:41> 'T1' lvalue ParmVar 0x55c316d2aff8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c316d53718 <col:45> 'T2' lvalue ParmVar 0x55c316d2b098 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c316d2b7f8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55c316d2b2f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2b368 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c316d2b3e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c316d2b758 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c316d2b4b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2b528 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2b5c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c316d2b668 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c316d53930 <col:65, line:485:5>
|     `-ReturnStmt 0x55c316d53920 <line:484:9, col:55>
|       `-CallExpr 0x55c316d538d8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d537b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d53838 <col:21> 'const char *' lvalue ParmVar 0x55c316d2b4b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d53858 <col:30> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55c316d53878 <col:41> 'P' lvalue ParmVar 0x55c316d2b528 'parser' 'P'
|         |-DeclRefExpr 0x55c316d53898 <col:49> 'T1' lvalue ParmVar 0x55c316d2b5c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c316d538b8 <col:53> 'T2' lvalue ParmVar 0x55c316d2b668 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c316d2bd78 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55c316d2b870 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2b8e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c316d2b968 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c316d2bcd8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c316d2ba30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2baa8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2bb48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c316d2bbe8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c316d53ad0 <col:65, line:489:5>
|     `-ReturnStmt 0x55c316d53ac0 <line:488:9, col:56>
|       `-CallExpr 0x55c316d53a78 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d53958 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d539d8 <col:21> 'const char *' lvalue ParmVar 0x55c316d2ba30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d539f8 <col:30> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int'
|         |-DeclRefExpr 0x55c316d53a18 <col:42> 'P' lvalue ParmVar 0x55c316d2baa8 'parser' 'P'
|         |-DeclRefExpr 0x55c316d53a38 <col:50> 'T1' lvalue ParmVar 0x55c316d2bb48 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c316d53a58 <col:54> 'T2' lvalue ParmVar 0x55c316d2bbe8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c316d2c2f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55c316d2bdf0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2be68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c316d2bee8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c316d2c258 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c316d2bfb0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2c028 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2c0c8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c316d2c168 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c316d53d20 <col:66, line:493:5>
|     `-ReturnStmt 0x55c316d53d10 <line:492:9, col:68>
|       `-CallExpr 0x55c316d53cc8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d53af8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d53b78 <col:21> 'const char *' lvalue ParmVar 0x55c316d2bfb0 'keyword' 'const char *'
|         |-BinaryOperator 0x55c316d53c48 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55c316d53bf8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c316d53bd8 <col:30> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c316d53c30 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c316d53c10 <col:42> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55c316d53c68 <col:54> 'P' lvalue ParmVar 0x55c316d2c028 'parser' 'P'
|         |-DeclRefExpr 0x55c316d53c88 <col:62> 'T1' lvalue ParmVar 0x55c316d2c0c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55c316d53ca8 <col:66> 'T2' lvalue ParmVar 0x55c316d2c168 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55c316d2c958 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55c316d2c370 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2c3e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c316d2c468 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c316d2c8b8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c316d2c530 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2c5b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d2c628 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2c6c8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55c316d2c768 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55c316d53eb0 <col:74, line:498:5>
|     |-CallExpr 0x55c316d53e28 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d53d38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55c316d53d78 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55c316d53d88 <col:30> 'const char *' lvalue ParmVar 0x55c316d2c530 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c316d53da8 <col:39> 'int' lvalue ParmVar 0x55c316d2c5b0 'flags' 'int'
|     | |-DeclRefExpr 0x55c316d53dc8 <col:46> 'P' lvalue ParmVar 0x55c316d2c628 'parser' 'P'
|     | |-DeclRefExpr 0x55c316d53de8 <col:54> 'T1' lvalue ParmVar 0x55c316d2c6c8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55c316d53e08 <col:58> 'T2' lvalue ParmVar 0x55c316d2c768 'x2' 'T2 &'
|     `-ReturnStmt 0x55c316d53ea0 <line:497:9, col:17>
|       `-UnaryOperator 0x55c316d53e88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d53e78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d2ccb8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55c316d2c9d8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d2cc18 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c316d2ca90 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2cb08 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55c316d53ff8 <col:52, line:509:5>
|     `-ReturnStmt 0x55c316d53fe8 <line:508:9, col:44>
|       `-CallExpr 0x55c316d53fb0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d53ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d53f50 <col:26> 'const char *' lvalue ParmVar 0x55c316d2ca90 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d53f70 <col:35> 'int' 0
|         `-DeclRefExpr 0x55c316d53f90 <col:38> 'P' lvalue ParmVar 0x55c316d2cb08 'parser' 'P'
|-FunctionTemplateDecl 0x55c316d2cfb8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55c316d2cd20 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d2cf18 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c316d2cdd0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2ce48 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c316d54138 <col:54, line:513:5>
|     `-ReturnStmt 0x55c316d54128 <line:512:9, col:52>
|       `-CallExpr 0x55c316d540f0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54090 <col:26> 'const char *' lvalue ParmVar 0x55c316d2cdd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d540b0 <col:35> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55c316d540d0 <col:46> 'P' lvalue ParmVar 0x55c316d2ce48 'parser' 'P'
|-FunctionTemplateDecl 0x55c316d2d2b8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55c316d2d020 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d2d218 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c316d2d0d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2d148 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55c316d54278 <col:54, line:517:5>
|     `-ReturnStmt 0x55c316d54268 <line:516:9, col:53>
|       `-CallExpr 0x55c316d54230 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54160 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d541d0 <col:26> 'const char *' lvalue ParmVar 0x55c316d2d0d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d541f0 <col:35> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int'
|         `-DeclRefExpr 0x55c316d54210 <col:47> 'P' lvalue ParmVar 0x55c316d2d148 'parser' 'P'
|-FunctionTemplateDecl 0x55c316d2d5b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c316d2d320 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d2d518 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c316d2d3d0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2d448 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55c316d54468 <col:55, line:521:5>
|     `-ReturnStmt 0x55c316d54458 <line:520:9, col:65>
|       `-CallExpr 0x55c316d54420 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d542a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54310 <col:26> 'const char *' lvalue ParmVar 0x55c316d2d3d0 'keyword' 'const char *'
|         |-BinaryOperator 0x55c316d543e0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55c316d54390 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55c316d54370 <col:35> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55c316d543c8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55c316d543a8 <col:47> 'const int' lvalue Var 0x55c316d21cd0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55c316d54400 <col:59> 'P' lvalue ParmVar 0x55c316d2d448 'parser' 'P'
|-FunctionTemplateDecl 0x55c316d2d988 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55c316d2d620 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d2d8e8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c316d2d6d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2d750 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d2d7c8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55c316d545a8 <col:63, line:526:5>
|     |-CallExpr 0x55c316d54530 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d54480 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55c316d544c0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55c316d544d0 <col:35> 'const char *' lvalue ParmVar 0x55c316d2d6d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55c316d544f0 <col:44> 'int' lvalue ParmVar 0x55c316d2d750 'flags' 'int'
|     | `-DeclRefExpr 0x55c316d54510 <col:51> 'P' lvalue ParmVar 0x55c316d2d7c8 'parser' 'P'
|     `-ReturnStmt 0x55c316d54598 <line:525:9, col:17>
|       `-UnaryOperator 0x55c316d54580 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d54570 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d2ddd8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55c316d2d9f8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2da78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d2dd38 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d2db38 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2dbb0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2dc58 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55c316d54700 <col:58, line:541:5>
|     `-ReturnStmt 0x55c316d546f0 <line:540:9, col:39>
|       `-CallExpr 0x55c316d546b8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d545d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54658 <col:21> 'const char *' lvalue ParmVar 0x55c316d2db38 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d54678 <col:30> 'P' lvalue ParmVar 0x55c316d2dbb0 'parser' 'P'
|         `-DeclRefExpr 0x55c316d54698 <col:38> 'T' lvalue ParmVar 0x55c316d2dc58 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d2e228 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55c316d2de48 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2dec8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d2e188 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d2df88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2e000 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2e0a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c316d54838 <col:60, line:545:5>
|     `-ReturnStmt 0x55c316d54828 <line:544:9, col:41>
|       `-CallExpr 0x55c316d547f0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54790 <col:23> 'const char *' lvalue ParmVar 0x55c316d2df88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d547b0 <col:32> 'P' lvalue ParmVar 0x55c316d2e000 'parser' 'P'
|         `-DeclRefExpr 0x55c316d547d0 <col:40> 'T' lvalue ParmVar 0x55c316d2e0a8 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d2e678 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55c316d2e298 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2e318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d2e5d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d2e3d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2e450 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2e4f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55c316d54970 <col:60, line:549:5>
|     `-ReturnStmt 0x55c316d54960 <line:548:9, col:41>
|       `-CallExpr 0x55c316d54928 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54860 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d548c8 <col:23> 'const char *' lvalue ParmVar 0x55c316d2e3d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d548e8 <col:32> 'P' lvalue ParmVar 0x55c316d2e450 'parser' 'P'
|         `-DeclRefExpr 0x55c316d54908 <col:40> 'T' lvalue ParmVar 0x55c316d2e4f8 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d2eac8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55c316d2e6e8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2e768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d2ea28 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d2e828 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2e8a0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2e948 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55c316d54aa8 <col:61, line:553:5>
|     `-ReturnStmt 0x55c316d54a98 <line:552:9, col:42>
|       `-CallExpr 0x55c316d54a60 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54998 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54a00 <col:24> 'const char *' lvalue ParmVar 0x55c316d2e828 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d54a20 <col:33> 'P' lvalue ParmVar 0x55c316d2e8a0 'parser' 'P'
|         `-DeclRefExpr 0x55c316d54a40 <col:41> 'T' lvalue ParmVar 0x55c316d2e948 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d2efa8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55c316d2eb38 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2ebb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d2ef08 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c316d2ec78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2ecf8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d2ed70 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2ee18 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55c316d54c20 <col:69, line:557:5>
|     `-ReturnStmt 0x55c316d54c10 <line:556:9, col:46>
|       `-CallExpr 0x55c316d54bd0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54ad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54b50 <col:21> 'const char *' lvalue ParmVar 0x55c316d2ec78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d54b70 <col:30> 'int' lvalue ParmVar 0x55c316d2ecf8 'flags' 'int'
|         |-DeclRefExpr 0x55c316d54b90 <col:37> 'P' lvalue ParmVar 0x55c316d2ed70 'parser' 'P'
|         `-DeclRefExpr 0x55c316d54bb0 <col:45> 'T' lvalue ParmVar 0x55c316d2ee18 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d2f2b8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55c316d2f020 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d2f218 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55c316d2f0d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2f148 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55c316d54d60 <col:56, line:571:5>
|     `-ReturnStmt 0x55c316d54d50 <line:570:9, col:48>
|       `-CallExpr 0x55c316d54d18 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54c48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54cb8 <col:30> 'const char *' lvalue ParmVar 0x55c316d2f0d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d54cd8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55c316d54cf8 <col:42> 'P' lvalue ParmVar 0x55c316d2f148 'parser' 'P'
|-FunctionTemplateDecl 0x55c316d2f648 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55c316d2f320 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d2f5a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55c316d2f3d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2f450 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d2f4c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c316d54f30 <col:67, line:576:5>
|     |-CallExpr 0x55c316d54eb8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d54d78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c316d54db8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c316d54dc8 <col:39> 'const char *' lvalue ParmVar 0x55c316d2f3d0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c316d54e78 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c316d54e28 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c316d54de8 <col:48> 'int' lvalue ParmVar 0x55c316d2f450 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c316d54e60 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c316d54e40 <col:56> 'const int' lvalue Var 0x55c316d21ec0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55c316d54e98 <col:68> 'P' lvalue ParmVar 0x55c316d2f4c8 'parser' 'P'
|     `-ReturnStmt 0x55c316d54f20 <line:575:9, col:17>
|       `-UnaryOperator 0x55c316d54f08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d54ef8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d2fa98 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55c316d2f6b8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2f738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d2f9f8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55c316d2f7f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2f870 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2f918 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55c316d550a0 <col:62, line:592:5>
|     `-ReturnStmt 0x55c316d55090 <line:591:9, col:51>
|       `-CallExpr 0x55c316d55050 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d54f60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d54fd0 <col:30> 'const char *' lvalue ParmVar 0x55c316d2f7f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d54ff0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55c316d55010 <col:42> 'P' lvalue ParmVar 0x55c316d2f870 'parser' 'P'
|         `-DeclRefExpr 0x55c316d55030 <col:50> 'T' lvalue ParmVar 0x55c316d2f918 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d2ff78 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55c316d2fb08 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d2fb88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d2fed8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c316d2fc48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d2fcc8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d2fd40 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d2fde8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55c316d55298 <col:73, line:597:5>
|     |-CallExpr 0x55c316d55218 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d550b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55c316d550f8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55c316d55108 <col:39> 'const char *' lvalue ParmVar 0x55c316d2fc48 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c316d551b8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c316d55168 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c316d55128 <col:48> 'int' lvalue ParmVar 0x55c316d2fcc8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c316d551a0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c316d55180 <col:56> 'const int' lvalue Var 0x55c316d21ec0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c316d551d8 <col:68> 'P' lvalue ParmVar 0x55c316d2fd40 'parser' 'P'
|     | `-DeclRefExpr 0x55c316d551f8 <col:76> 'T' lvalue ParmVar 0x55c316d2fde8 'x' 'T &'
|     `-ReturnStmt 0x55c316d55288 <line:596:9, col:17>
|       `-UnaryOperator 0x55c316d55270 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d55260 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d30528 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55c316d2fff0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d30068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d30488 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c316d30128 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d301a0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d30360 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c316d55408 <col:65, line:614:5>
|     `-ReturnStmt 0x55c316d553f8 <line:613:9, col:46>
|       `-CallExpr 0x55c316d553b8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d552c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d55338 <col:25> 'const char *' lvalue ParmVar 0x55c316d30128 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d55358 <col:34> 'int' 0
|         |-DeclRefExpr 0x55c316d55378 <col:37> 'P' lvalue ParmVar 0x55c316d301a0 'parser' 'P'
|         `-DeclRefExpr 0x55c316d55398 <col:45> 'Vector<T>' lvalue ParmVar 0x55c316d30360 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c316d30958 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55c316d30598 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c316d308b8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55c316d30650 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d307a0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c316d55620 <col:55, line:618:5>
|     `-ReturnStmt 0x55c316d55610 <line:617:9, col:55>
|       `-CallExpr 0x55c316d555d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d55430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d554a0 <col:25> 'const char *' lvalue ParmVar 0x55c316d30650 'keyword' 'const char *'
|         |-IntegerLiteral 0x55c316d554c0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55c316d55590 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c316d555b0 <col:54> 'Vector<T>' lvalue ParmVar 0x55c316d307a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55c316d30f28 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55c316d309c0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d30a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d30e88 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c316d30af8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d30b78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d30bf0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d30d40 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c316d55818 <col:76, line:623:5>
|     |-CallExpr 0x55c316d55798 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55c316d55638 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55c316d55678 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55c316d55688 <col:34> 'const char *' lvalue ParmVar 0x55c316d30af8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55c316d55738 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55c316d556e8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55c316d556a8 <col:43> 'int' lvalue ParmVar 0x55c316d30b78 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55c316d55720 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55c316d55700 <col:51> 'const int' lvalue Var 0x55c316d21ec0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55c316d55758 <col:63> 'P' lvalue ParmVar 0x55c316d30bf0 'parser' 'P'
|     | `-DeclRefExpr 0x55c316d55778 <col:71> 'Vector<T>' lvalue ParmVar 0x55c316d30d40 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55c316d55808 <line:622:9, col:17>
|       `-UnaryOperator 0x55c316d557f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d557e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d31468 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55c316d30fa0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d31018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d313c8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55c316d310d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d31158 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d312a0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55c316d55a80 <col:66, line:627:5>
|     `-ReturnStmt 0x55c316d55a70 <line:626:9, col:59>
|       `-CallExpr 0x55c316d55a30 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55c316d55848 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55c316d558b8 <col:25> 'const char *' lvalue ParmVar 0x55c316d310d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55c316d558d8 <col:34> 'int' lvalue ParmVar 0x55c316d31158 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55c316d559f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55c316d55a10 <col:58> 'Vector<T>' lvalue ParmVar 0x55c316d312a0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55c316d314f8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55c316d55b00 <col:25, line:633:5>
|   `-ReturnStmt 0x55c316d55af0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55c316d55ad8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c316d55aa8 <col:16> 'const bool' lvalue ->_status 0x55c316d3c6d8
|         `-CXXThisExpr 0x55c316d55a98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c316d31678 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55c316d315b0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55c316d55be8 <col:27, line:639:5>
|   |-BinaryOperator 0x55c316d55b90 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c316d55b18 <col:9> 'bool' lvalue ParmVar 0x55c316d315b0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c316d55b78 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c316d55b48 <col:13> 'bool' lvalue ->_status 0x55c316d3c6d8
|   |     `-CXXThisExpr 0x55c316d55b38 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c316d55bd8 <line:638:9, col:17>
|     `-UnaryOperator 0x55c316d55bc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316d55bb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c316d36b98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c316d31738 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55c316d55cd8 <col:39, line:644:5>
|   |-BinaryOperator 0x55c316d55c80 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c316d55c08 <col:9> 'bool' lvalue ParmVar 0x55c316d31738 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c316d55c68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c316d55c38 <col:13> 'const bool' lvalue ->_status 0x55c316d3c6d8
|   |     `-CXXThisExpr 0x55c316d55c28 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c316d55cc8 <line:643:9, col:17>
|     `-UnaryOperator 0x55c316d55cb0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316d55ca0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c316d36c60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55c316d55d80 <col:30, line:651:5>
|   `-ReturnStmt 0x55c316d55d70 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55c316d55d58 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55c316d55d28 <col:16> 'bool' lvalue ->_read_status 0x55c316c2b820
|         `-ImplicitCastExpr 0x55c316d55d08 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55c316d55cf8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55c316d36da8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55c316d36d18 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55c316d55e88 <col:32, line:658:5>
|   |-BinaryOperator 0x55c316d55e30 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c316d55d98 <col:9> 'bool' lvalue ParmVar 0x55c316d36d18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c316d55e18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c316d55de8 <col:13> 'bool' lvalue ->_read_status 0x55c316c2b820
|   |     `-ImplicitCastExpr 0x55c316d55dc8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c316d55db8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55c316d55e78 <line:657:9, col:17>
|     `-UnaryOperator 0x55c316d55e60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316d55e50 <col:17> 'Args *' this
|-CXXMethodDecl 0x55c316d36ef8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55c316d36e68 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55c316d55f98 <col:44, line:663:5>
|   |-BinaryOperator 0x55c316d55f40 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55c316d55ea8 <col:9> 'bool' lvalue ParmVar 0x55c316d36e68 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55c316d55f28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55c316d55ef8 <col:13> 'bool' lvalue ->_read_status 0x55c316c2b820
|   |     `-ImplicitCastExpr 0x55c316d55ed8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55c316d55ec8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55c316d55f88 <line:662:9, col:17>
|     `-UnaryOperator 0x55c316d55f70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316d55f60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55c316d36fc0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55c316d37088 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55c316d37150 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55c316d37218 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55c316d37528 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55c316d372b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c316d37488 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55c316d37398 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55c316d56350 <col:19, line:706:5>
|     `-IfStmt 0x55c316d56328 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55c316d56098 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55c316d56258 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55c316d56228 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55c316d561e8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55c316d560f0 <col:42> '<bound member function type>' ->simple_slot 0x55c316d4f550
|       |     | `-CXXThisExpr 0x55c316d560e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55c316d56188 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55c316d56140 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55c316ab2a98
|       |     | `-DeclRefExpr 0x55c316d56120 <col:55> 'T' lvalue ParmVar 0x55c316d37398 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55c316d561c8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55c316d56318 <line:705:13, col:34>
|         `-CallExpr 0x55c316d562f0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55c316d56278 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55c316d562d0 <col:33> 'T' lvalue ParmVar 0x55c316d37398 'x' 'T &'
|-FunctionTemplateDecl 0x55c316d377f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55c316d37588 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c316d37758 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55c316d37668 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55c316d56730 <col:31, line:717:5>
|     |-DeclStmt 0x55c316d56490 <line:713:9, col:23>
|     | `-VarDecl 0x55c316d56378 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55c316d56468 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c316d563f0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c316d56448 <col:21> 'T' lvalue ParmVar 0x55c316d37668 'x' 'T &'
|     |-IfStmt 0x55c316d566e0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55c316d56588 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55c316d566c0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c316d56660 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c316d565f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|     |   | `-DeclRefExpr 0x55c316d565d0 <col:14> 'T *' lvalue Var 0x55c316d56378 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55c316d566a0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55c316d56718 <line:716:9, col:16>
|       `-DeclRefExpr 0x55c316d566f8 <col:16> 'T *' lvalue Var 0x55c316d56378 's' 'T *'
|-FunctionTemplateDecl 0x55c316d37c08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55c316d37858 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c316d378d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c316d37b68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55c316d379b8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55c316d37a58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55c316d56a40 <col:37, line:726:5>
|     |-IfStmt 0x55c316d569d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55c316d569f0 <line:723:13, col:26>
|     | | `-VarDecl 0x55c316d56798 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55c316d56888 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55c316d56810 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55c316d56868 <col:25> 'T' lvalue ParmVar 0x55c316d379b8 'x' 'T &'
|     | |-DeclRefExpr 0x55c316d568b0 <col:16> 'T *' lvalue Var 0x55c316d56798 's' 'T *'
|     | `-BinaryOperator 0x55c316d569b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55c316d56960 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55c316d568f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|     |   | `-DeclRefExpr 0x55c316d568d0 <col:14> 'T *' lvalue Var 0x55c316d56798 's' 'T *'
|     |   `-DeclRefExpr 0x55c316d56990 <col:18> 'const V' lvalue ParmVar 0x55c316d37a58 'value' 'const V &'
|     `-ReturnStmt 0x55c316d56a30 <line:725:9, col:17>
|       `-UnaryOperator 0x55c316d56a18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316d56a08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55c316d38008 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55c316d37c70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55c316d37f68 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55c316d37d20 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d37da0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d37e48 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55c316d57860 <col:65, line:737:5>
|     |-DeclStmt 0x55c316d56ad8 <line:732:9, col:26>
|     | `-VarDecl 0x55c316d56a70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c316d57828 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55c316d57848 <line:733:13, col:58>
|       | `-VarDecl 0x55c316d56b00 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c316d56ce0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c316d56cb0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c316d56c98 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c316d56c78 <col:26, col:58> 'String' (CXXTemporary 0x55c316d56c78)
|       |           `-CXXMemberCallExpr 0x55c316d56c08 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c316d56b78 <col:26> '<bound member function type>' ->find 0x55c316d4eb68
|       |             | `-CXXThisExpr 0x55c316d56b68 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c316d56c40 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d56ba8 <col:31> 'const char *' lvalue ParmVar 0x55c316d37d20 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c316d56c58 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d56bc8 <col:40> 'int' lvalue ParmVar 0x55c316d37da0 'flags' 'int'
|       |             `-DeclRefExpr 0x55c316d56be8 <col:47> 'Args::Slot *' lvalue Var 0x55c316d56a70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c316d56d98 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c316d56d80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c316d56d60 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c316d56d30 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|       |       `-ImplicitCastExpr 0x55c316d56d18 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c316d56cf8 <col:20> 'String' lvalue Var 0x55c316d56b00 'str' 'String'
|       `-CompoundStmt 0x55c316d57808 <col:61, line:736:9>
|         |-DeclStmt 0x55c316d57250 <line:734:13, col:76>
|         | `-VarDecl 0x55c316d56de8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c316d57220 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c316d57190 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c316d571d8 <col:60> 'T' lvalue ParmVar 0x55c316d37e48 'variable' 'T &'
|         |     `-UnaryOperator 0x55c316d57208 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c316d571f8 <col:71> 'Args *' this
|         `-CallExpr 0x55c316d577d8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55c316d57278 <col:13> '<bound member function type>' ->postparse 0x55c316d4ed78
|           | `-CXXThisExpr 0x55c316d57268 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c316d57798 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c316d572a8 <col:23> 'T *' lvalue Var 0x55c316d56de8 's' 'T *'
|           | `-CallExpr 0x55c316d57758 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c316d57530 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55c316d57630 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55c316d57650 <col:86> 'String' lvalue Var 0x55c316d56b00 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c316d57700 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c316d57690 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|           |   | `-DeclRefExpr 0x55c316d57670 <col:92> 'T *' lvalue Var 0x55c316d56de8 's' 'T *'
|           |   `-UnaryOperator 0x55c316d57740 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c316d57730 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55c316d577b8 <col:103> 'Args::Slot *' lvalue Var 0x55c316d56a70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c316d38558 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c316d38078 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c316d380f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55c316d384b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55c316d381b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d38238 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d382d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55c316d38378 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55c316d58700 <col:88, line:745:5>
|     |-DeclStmt 0x55c316d578f8 <line:741:9, col:26>
|     | `-VarDecl 0x55c316d57890 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c316d57b18 <line:742:9, col:55>
|     | `-VarDecl 0x55c316d57920 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c316d57b00 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c316d57ad0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c316d57ab8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c316d57a98 <col:22, col:54> 'String' (CXXTemporary 0x55c316d57a98)
|     |           `-CXXMemberCallExpr 0x55c316d57a28 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c316d57998 <col:22> '<bound member function type>' ->find 0x55c316d4eb68
|     |             | `-CXXThisExpr 0x55c316d57988 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c316d57a60 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c316d579c8 <col:27> 'const char *' lvalue ParmVar 0x55c316d381b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c316d57a78 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c316d579e8 <col:36> 'int' lvalue ParmVar 0x55c316d38238 'flags' 'int'
|     |             `-DeclRefExpr 0x55c316d57a08 <col:43> 'Args::Slot *' lvalue Var 0x55c316d57890 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c316d57ef0 <line:743:9, col:72>
|     | `-VarDecl 0x55c316d57b68 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c316d57ec0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c316d57e30 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c316d57e78 <col:56> 'T' lvalue ParmVar 0x55c316d382d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55c316d57ea8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c316d57e98 <col:67> 'Args *' this
|     `-CallExpr 0x55c316d586d0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55c316d57f18 <col:9> '<bound member function type>' ->postparse 0x55c316d4ed78
|       | `-CXXThisExpr 0x55c316d57f08 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c316d58690 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c316d57f48 <col:19> 'T *' lvalue Var 0x55c316d57b68 's' 'T *'
|       | `-ParenExpr 0x55c316d58670 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55c316d58640 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c316d58628 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c316d58610 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c316d585f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c316d585c0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|       |     |       `-ImplicitCastExpr 0x55c316d585a8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c316d57f68 <col:25> 'String' lvalue Var 0x55c316d57920 'str' 'String'
|       |     |-CallExpr 0x55c316d58418 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c316d581f0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55c316d582f0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55c316d58310 <col:89> 'String' lvalue Var 0x55c316d57920 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c316d583c0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c316d58350 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|       |     | | `-DeclRefExpr 0x55c316d58330 <col:95> 'T *' lvalue Var 0x55c316d57b68 's' 'T *'
|       |     | `-UnaryOperator 0x55c316d58400 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c316d583f0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55c316d58588 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55c316d58568 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c316d58538 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c316d584e8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c316d58478 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|       |         | | `-DeclRefExpr 0x55c316d58458 <col:109> 'T *' lvalue Var 0x55c316d57b68 's' 'T *'
|       |         | `-DeclRefExpr 0x55c316d58518 <col:113> 'const V' lvalue ParmVar 0x55c316d38378 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c316d58558 <col:120> 'bool' true
|       `-DeclRefExpr 0x55c316d586b0 <col:128> 'Args::Slot *' lvalue Var 0x55c316d57890 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c316d38a88 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55c316d385d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d38648 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d389e8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c316d38708 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d38788 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d38800 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d388a8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55c316d592f8 <col:75, line:754:5>
|     |-DeclStmt 0x55c316d587a8 <line:749:9, col:26>
|     | `-VarDecl 0x55c316d58740 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c316d592c0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55c316d592e0 <line:750:13, col:58>
|       | `-VarDecl 0x55c316d587d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c316d589b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c316d58980 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c316d58968 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c316d58948 <col:26, col:58> 'String' (CXXTemporary 0x55c316d58948)
|       |           `-CXXMemberCallExpr 0x55c316d588d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c316d58848 <col:26> '<bound member function type>' ->find 0x55c316d4eb68
|       |             | `-CXXThisExpr 0x55c316d58838 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c316d58910 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d58878 <col:31> 'const char *' lvalue ParmVar 0x55c316d38708 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c316d58928 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d58898 <col:40> 'int' lvalue ParmVar 0x55c316d38788 'flags' 'int'
|       |             `-DeclRefExpr 0x55c316d588b8 <col:47> 'Args::Slot *' lvalue Var 0x55c316d58740 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c316d58a68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c316d58a50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c316d58a30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c316d58a00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|       |       `-ImplicitCastExpr 0x55c316d589e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c316d589c8 <col:20> 'String' lvalue Var 0x55c316d587d0 'str' 'String'
|       `-CompoundStmt 0x55c316d592a0 <col:61, line:753:9>
|         |-DeclStmt 0x55c316d58e40 <line:751:13, col:63>
|         | `-VarDecl 0x55c316d58ab8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55c316d58e10 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c316d58d80 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c316d58dc8 <col:47> 'T' lvalue ParmVar 0x55c316d388a8 'variable' 'T &'
|         |     `-UnaryOperator 0x55c316d58df8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c316d58de8 <col:58> 'Args *' this
|         `-CallExpr 0x55c316d59270 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55c316d58e68 <col:13> '<bound member function type>' ->postparse 0x55c316d4ed78
|           | `-CXXThisExpr 0x55c316d58e58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c316d59230 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55c316d58e98 <col:23> 'T *' lvalue Var 0x55c316d58ab8 's' 'T *'
|           | `-CallExpr 0x55c316d591f0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c316d59080 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c316d590c8 <col:56> 'P' lvalue ParmVar 0x55c316d38800 'parser' 'P'
|           |   |-DeclRefExpr 0x55c316d590e8 <col:64> 'String' lvalue Var 0x55c316d587d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c316d59198 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c316d59128 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|           |   | `-DeclRefExpr 0x55c316d59108 <col:70> 'T *' lvalue Var 0x55c316d58ab8 's' 'T *'
|           |   `-UnaryOperator 0x55c316d591d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c316d591c8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55c316d59250 <col:81> 'Args::Slot *' lvalue Var 0x55c316d58740 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c316d390e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55c316d38b00 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55c316d38b78 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55c316d38bf8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55c316d39048 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55c316d38cc0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d38d40 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d38db8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d38e58 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55c316d38ef8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55c316d5a088 <col:98, line:762:5>
|     |-DeclStmt 0x55c316d59390 <line:758:9, col:26>
|     | `-VarDecl 0x55c316d59328 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c316d595b0 <line:759:9, col:55>
|     | `-VarDecl 0x55c316d593b8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55c316d59598 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55c316d59568 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55c316d59550 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55c316d59530 <col:22, col:54> 'String' (CXXTemporary 0x55c316d59530)
|     |           `-CXXMemberCallExpr 0x55c316d594c0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55c316d59430 <col:22> '<bound member function type>' ->find 0x55c316d4eb68
|     |             | `-CXXThisExpr 0x55c316d59420 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55c316d594f8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c316d59460 <col:27> 'const char *' lvalue ParmVar 0x55c316d38cc0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55c316d59510 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55c316d59480 <col:36> 'int' lvalue ParmVar 0x55c316d38d40 'flags' 'int'
|     |             `-DeclRefExpr 0x55c316d594a0 <col:43> 'Args::Slot *' lvalue Var 0x55c316d59328 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55c316d599d0 <line:760:9, col:59>
|     | `-VarDecl 0x55c316d59608 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c316d599a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c316d59910 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55c316d59958 <col:43> 'T' lvalue ParmVar 0x55c316d38e58 'variable' 'T &'
|     |     `-UnaryOperator 0x55c316d59988 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c316d59978 <col:54> 'Args *' this
|     `-CallExpr 0x55c316d5a058 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55c316d599f8 <col:9> '<bound member function type>' ->postparse 0x55c316d4ed78
|       | `-CXXThisExpr 0x55c316d599e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55c316d5a018 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55c316d59a28 <col:19> 'T *' lvalue Var 0x55c316d59608 's' 'T *'
|       | `-ParenExpr 0x55c316d59ff8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55c316d59fc8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55c316d59fb0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55c316d59f98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55c316d59f78 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55c316d59f48 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|       |     |       `-ImplicitCastExpr 0x55c316d59f30 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55c316d59a48 <col:25> 'String' lvalue Var 0x55c316d593b8 'str' 'String'
|       |     |-CallExpr 0x55c316d59da0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55c316d59c30 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55c316d59c78 <col:59> 'P' lvalue ParmVar 0x55c316d38db8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55c316d59c98 <col:67> 'String' lvalue Var 0x55c316d593b8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55c316d59d48 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55c316d59cd8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|       |     | | `-DeclRefExpr 0x55c316d59cb8 <col:73> 'T *' lvalue Var 0x55c316d59608 's' 'T *'
|       |     | `-UnaryOperator 0x55c316d59d88 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55c316d59d78 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55c316d59f10 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55c316d59ef0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55c316d59ec0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55c316d59e70 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55c316d59e00 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|       |         | | `-DeclRefExpr 0x55c316d59de0 <col:87> 'T *' lvalue Var 0x55c316d59608 's' 'T *'
|       |         | `-DeclRefExpr 0x55c316d59ea0 <col:91> 'const V' lvalue ParmVar 0x55c316d38ef8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55c316d59ee0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55c316d5a038 <col:106> 'Args::Slot *' lvalue Var 0x55c316d59328 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c316d39758 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55c316d39168 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d391e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55c316d39268 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55c316d396b8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55c316d39330 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d393b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d39428 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d394c8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55c316d39568 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55c316d5cd08 <col:60, line:773:5>
|     |-DeclStmt 0x55c316d5a130 <line:767:9, col:26>
|     | `-VarDecl 0x55c316d5a0c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c316d5ccd0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55c316d5ccf0 <line:768:13, col:58>
|       | `-VarDecl 0x55c316d5a158 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c316d5a338 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c316d5a308 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c316d5a2f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c316d5a2d0 <col:26, col:58> 'String' (CXXTemporary 0x55c316d5a2d0)
|       |           `-CXXMemberCallExpr 0x55c316d5a260 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c316d5a1d0 <col:26> '<bound member function type>' ->find 0x55c316d4eb68
|       |             | `-CXXThisExpr 0x55c316d5a1c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c316d5a298 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d5a200 <col:31> 'const char *' lvalue ParmVar 0x55c316d39330 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c316d5a2b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d5a220 <col:40> 'int' lvalue ParmVar 0x55c316d393b0 'flags' 'int'
|       |             `-DeclRefExpr 0x55c316d5a240 <col:47> 'Args::Slot *' lvalue Var 0x55c316d5a0c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c316d5a3f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c316d5a3d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c316d5a3b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c316d5a388 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|       |       `-ImplicitCastExpr 0x55c316d5a370 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c316d5a350 <col:20> 'String' lvalue Var 0x55c316d5a158 'str' 'String'
|       `-CompoundStmt 0x55c316d5b008 <col:61, line:772:9>
|         |-DeclStmt 0x55c316d5a730 <line:769:13, col:66>
|         | `-VarDecl 0x55c316d5a448 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55c316d5a700 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c316d5a670 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c316d5a6b8 <col:49> 'T1' lvalue ParmVar 0x55c316d394c8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55c316d5a6e8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c316d5a6d8 <col:61> 'Args *' this
|         |-DeclStmt 0x55c316d5aaa0 <line:770:13, col:66>
|         | `-VarDecl 0x55c316d5a7b8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55c316d5aa70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55c316d5a9e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55c316d5aa28 <col:49> 'T2' lvalue ParmVar 0x55c316d39568 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55c316d5aa58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55c316d5aa48 <col:61> 'Args *' this
|         `-CallExpr 0x55c316d5afd8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55c316d5aac8 <col:13> '<bound member function type>' ->postparse 0x55c316d4ed78
|           | `-CXXThisExpr 0x55c316d5aab8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55c316d5af98 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55c316d5ab38 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55c316d5aaf8 <col:23> 'T1 *' lvalue Var 0x55c316d5a448 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55c316d5ab18 <col:29> 'T2 *' lvalue Var 0x55c316d5a7b8 's2' 'T2 *'
|           | `-CallExpr 0x55c316d5af50 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55c316d5ad20 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55c316d5ad68 <col:63> 'P' lvalue ParmVar 0x55c316d39428 'parser' 'P'
|           |   |-DeclRefExpr 0x55c316d5ad88 <col:71> 'String' lvalue Var 0x55c316d5a158 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55c316d5ae38 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c316d5adc8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|           |   | `-DeclRefExpr 0x55c316d5ada8 <col:77> 'T1 *' lvalue Var 0x55c316d5a448 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55c316d5aef8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55c316d5ae88 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|           |   | `-DeclRefExpr 0x55c316d5ae68 <col:82> 'T2 *' lvalue Var 0x55c316d5a7b8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55c316d5af38 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55c316d5af28 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55c316d5afb8 <col:94> 'Args::Slot *' lvalue Var 0x55c316d5a0c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c316d39b48 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55c316d397d8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d39aa8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c316d39890 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d39910 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d39988 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55c316d5d220 <col:67, line:780:5>
|     |-DeclStmt 0x55c316d5cda0 <line:777:9, col:26>
|     | `-VarDecl 0x55c316d5cd38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55c316d5d1e8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55c316d5d208 <line:778:13, col:58>
|       | `-VarDecl 0x55c316d5cdc8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55c316d5cfa8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55c316d5cf78 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55c316d5cf60 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55c316d5cf40 <col:26, col:58> 'String' (CXXTemporary 0x55c316d5cf40)
|       |           `-CXXMemberCallExpr 0x55c316d5ced0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55c316d5ce40 <col:26> '<bound member function type>' ->find 0x55c316d4eb68
|       |             | `-CXXThisExpr 0x55c316d5ce30 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55c316d5cf08 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d5ce70 <col:31> 'const char *' lvalue ParmVar 0x55c316d39890 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55c316d5cf20 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55c316d5ce90 <col:40> 'int' lvalue ParmVar 0x55c316d39910 'flags' 'int'
|       |             `-DeclRefExpr 0x55c316d5ceb0 <col:47> 'Args::Slot *' lvalue Var 0x55c316d5cd38 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55c316d5d060 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55c316d5d048 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55c316d5d028 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55c316d5cff8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|       |       `-ImplicitCastExpr 0x55c316d5cfe0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55c316d5cfc0 <col:20> 'String' lvalue Var 0x55c316d5cdc8 'str' 'String'
|       `-CallExpr 0x55c316d5d1b8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55c316d5d088 <col:13> '<bound member function type>' ->postparse 0x55c316d4ed78
|         | `-CXXThisExpr 0x55c316d5d078 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55c316d5d168 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55c316d5d0d8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55c316d5d0b8 <col:23> 'P' lvalue ParmVar 0x55c316d39988 'parser' 'P'
|         | |-DeclRefExpr 0x55c316d5d120 <col:36> 'String' lvalue Var 0x55c316d5cdc8 'str' 'String'
|         | `-UnaryOperator 0x55c316d5d150 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55c316d5d140 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55c316d5d198 <col:49> 'Args::Slot *' lvalue Var 0x55c316d5cd38 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55c316d39ee8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c316d39bb8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55c316d39e48 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55c316d39c70 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d39cf0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d39d68 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55c316d5db90 <col:71, line:792:5>
|     |-DeclStmt 0x55c316d5d2b8 <line:784:9, col:26>
|     | `-VarDecl 0x55c316d5d250 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c316d5d388 <line:785:9, col:29>
|     | `-VarDecl 0x55c316d5d2e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c316d5d370 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c316d5d350 <col:28> 'int' 1
|     |-WhileStmt 0x55c316d5da40 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55c316d5da60 <line:786:16, col:61>
|     | | `-VarDecl 0x55c316d5d3b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c316d5d590 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c316d5d560 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c316d5d548 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c316d5d528 <col:29, col:61> 'String' (CXXTemporary 0x55c316d5d528)
|     | |           `-CXXMemberCallExpr 0x55c316d5d4b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c316d5d428 <col:29> '<bound member function type>' ->find 0x55c316d4eb68
|     | |             | `-CXXThisExpr 0x55c316d5d418 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c316d5d4f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c316d5d458 <col:34> 'const char *' lvalue ParmVar 0x55c316d39c70 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c316d5d508 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c316d5d478 <col:43> 'int' lvalue ParmVar 0x55c316d39cf0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c316d5d498 <col:50> 'Args::Slot *' lvalue Var 0x55c316d5d250 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c316d5d648 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c316d5d630 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c316d5d610 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c316d5d5e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|     | |       `-ImplicitCastExpr 0x55c316d5d5c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c316d5d5a8 <col:23> 'String' lvalue Var 0x55c316d5d3b0 'str' 'String'
|     | `-CompoundStmt 0x55c316d5da18 <col:64, line:790:9>
|     |   |-CallExpr 0x55c316d5d7a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55c316d5d670 <col:13> '<bound member function type>' ->postparse 0x55c316d4ed78
|     |   | | `-CXXThisExpr 0x55c316d5d660 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c316d5d750 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c316d5d6c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c316d5d6a0 <col:23> 'P' lvalue ParmVar 0x55c316d39d68 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c316d5d708 <col:36> 'String' lvalue Var 0x55c316d5d3b0 'str' 'String'
|     |   | | `-UnaryOperator 0x55c316d5d738 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c316d5d728 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55c316d5d780 <col:49> 'Args::Slot *' lvalue Var 0x55c316d5d250 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c316d5d938 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c316d5d7d0 <col:13> 'int' lvalue Var 0x55c316d5d2e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c316d5d920 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c316d5d900 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c316d5d868 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c316d5d848 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c316d5d830 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c316d5d7f0 <col:28> 'int' lvalue Var 0x55c316d5d2e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c316d5d810 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c316d5d8e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c316d5d8b8 <col:49> 'bool' lvalue ->_read_status 0x55c316c2b820
|     |   |         `-ImplicitCastExpr 0x55c316d5d898 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c316d5d888 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c316d5d9e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c316d5d958 <col:13> 'int' lvalue ParmVar 0x55c316d39cf0 'flags' 'int'
|     |     `-UnaryOperator 0x55c316d5d9d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c316d5d9b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c316d5d998 <col:23> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c316d5db70 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c316d5daa8 <col:9> 'bool' lvalue ->_read_status 0x55c316c2b820
|       | `-ImplicitCastExpr 0x55c316d5da88 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c316d5da78 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c316d5db50 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c316d5db30 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c316d5db18 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c316d5dad8 <col:25> 'int' lvalue Var 0x55c316d5d2e8 'read_status' 'int'
|           `-IntegerLiteral 0x55c316d5daf8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c316d3a3c8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55c316d39f58 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d39fd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d3a328 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55c316d3a098 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d3a118 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d3a190 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d3a238 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55c316d5eb20 <col:84, line:805:5>
|     |-DeclStmt 0x55c316d5dc38 <line:796:9, col:26>
|     | `-VarDecl 0x55c316d5dbd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c316d5dd08 <line:797:9, col:29>
|     | `-VarDecl 0x55c316d5dc68 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c316d5dcf0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c316d5dcd0 <col:28> 'int' 1
|     |-DeclStmt 0x55c316d5e040 <line:798:9, col:71>
|     | `-VarDecl 0x55c316d5dd58 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55c316d5e010 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55c316d5df80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55c316d5dfc8 <col:55> 'T' lvalue ParmVar 0x55c316d3a238 'variable' 'T &'
|     |     `-UnaryOperator 0x55c316d5dff8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55c316d5dfe8 <col:66> 'Args *' this
|     |-WhileStmt 0x55c316d5e9d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55c316d5e9f0 <line:799:16, col:61>
|     | | `-VarDecl 0x55c316d5e068 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c316d5e248 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c316d5e218 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c316d5e200 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c316d5e1e0 <col:29, col:61> 'String' (CXXTemporary 0x55c316d5e1e0)
|     | |           `-CXXMemberCallExpr 0x55c316d5e170 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c316d5e0e0 <col:29> '<bound member function type>' ->find 0x55c316d4eb68
|     | |             | `-CXXThisExpr 0x55c316d5e0d0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c316d5e1a8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c316d5e110 <col:34> 'const char *' lvalue ParmVar 0x55c316d3a098 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c316d5e1c0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c316d5e130 <col:43> 'int' lvalue ParmVar 0x55c316d3a118 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c316d5e150 <col:50> 'Args::Slot *' lvalue Var 0x55c316d5dbd0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c316d5e300 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c316d5e2e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c316d5e2c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c316d5e298 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|     | |       `-ImplicitCastExpr 0x55c316d5e280 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c316d5e260 <col:23> 'String' lvalue Var 0x55c316d5e068 'str' 'String'
|     | `-CompoundStmt 0x55c316d5e9a8 <col:64, line:803:9>
|     |   |-CallExpr 0x55c316d5e730 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55c316d5e328 <col:13> '<bound member function type>' ->postparse 0x55c316d4ed78
|     |   | | `-CXXThisExpr 0x55c316d5e318 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55c316d5e6f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55c316d5e358 <col:23> 'T *' lvalue Var 0x55c316d5dd58 's' 'T *'
|     |   | | `-CallExpr 0x55c316d5e6b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55c316d5e540 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55c316d5e588 <col:56> 'P' lvalue ParmVar 0x55c316d3a190 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55c316d5e5a8 <col:64> 'String' lvalue Var 0x55c316d5e068 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55c316d5e658 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55c316d5e5e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|     |   | |   | `-DeclRefExpr 0x55c316d5e5c8 <col:70> 'T *' lvalue Var 0x55c316d5dd58 's' 'T *'
|     |   | |   `-UnaryOperator 0x55c316d5e698 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55c316d5e688 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55c316d5e710 <col:81> 'Args::Slot *' lvalue Var 0x55c316d5dbd0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55c316d5e8c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c316d5e760 <col:13> 'int' lvalue Var 0x55c316d5dc68 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c316d5e8b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c316d5e890 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c316d5e7f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c316d5e7d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c316d5e7c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c316d5e780 <col:28> 'int' lvalue Var 0x55c316d5dc68 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c316d5e7a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c316d5e878 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c316d5e848 <col:49> 'bool' lvalue ->_read_status 0x55c316c2b820
|     |   |         `-ImplicitCastExpr 0x55c316d5e828 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c316d5e818 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c316d5e978 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c316d5e8e8 <col:13> 'int' lvalue ParmVar 0x55c316d3a118 'flags' 'int'
|     |     `-UnaryOperator 0x55c316d5e960 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c316d5e948 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c316d5e928 <col:23> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c316d5eb00 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c316d5ea38 <col:9> 'bool' lvalue ->_read_status 0x55c316c2b820
|       | `-ImplicitCastExpr 0x55c316d5ea18 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c316d5ea08 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c316d5eae0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c316d5eac0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c316d5eaa8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c316d5ea68 <col:25> 'int' lvalue Var 0x55c316d5dc68 'read_status' 'int'
|           `-IntegerLiteral 0x55c316d5ea88 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55c316d3a9a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55c316d3a440 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55c316d3a4b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55c316d3a908 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55c316d3a578 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55c316d3a5f8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55c316d3a670 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55c316d3a7c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55c316d5f928 <col:87, line:821:5>
|     |-DeclStmt 0x55c316d5ebd0 <line:809:9, col:26>
|     | `-VarDecl 0x55c316d5eb68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55c316d5eca0 <line:810:9, col:29>
|     | `-VarDecl 0x55c316d5ec00 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55c316d5ec88 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55c316d5ec68 <col:28> 'int' 1
|     |-DeclStmt 0x55c316d5eee8 <line:811:9, col:38>
|     | `-VarDecl 0x55c316d5edd0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55c316d5eec0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55c316d5ee48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55c316d5eea0 <col:29> 'Vector<T>' lvalue ParmVar 0x55c316d3a7c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55c316d5f7d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55c316d5f7f8 <line:812:16, col:61>
|     | | `-VarDecl 0x55c316d5ef10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55c316d5f0f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55c316d5f0c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55c316d5f0a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55c316d5f088 <col:29, col:61> 'String' (CXXTemporary 0x55c316d5f088)
|     | |           `-CXXMemberCallExpr 0x55c316d5f018 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55c316d5ef88 <col:29> '<bound member function type>' ->find 0x55c316d4eb68
|     | |             | `-CXXThisExpr 0x55c316d5ef78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55c316d5f050 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c316d5efb8 <col:34> 'const char *' lvalue ParmVar 0x55c316d3a578 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55c316d5f068 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55c316d5efd8 <col:43> 'int' lvalue ParmVar 0x55c316d3a5f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55c316d5eff8 <col:50> 'Args::Slot *' lvalue Var 0x55c316d5eb68 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55c316d5f1a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55c316d5f190 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55c316d5f170 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55c316d5f140 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55c316a74a58
|     | |       `-ImplicitCastExpr 0x55c316d5f128 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55c316d5f108 <col:23> 'String' lvalue Var 0x55c316d5ef10 'str' 'String'
|     | `-CompoundStmt 0x55c316d5f7a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55c316d5f268 <line:813:13, col:23>
|     |   | `-VarDecl 0x55c316d5f1d0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55c316d5f248 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55c316d5f3e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55c316d5f290 <col:13> '<bound member function type>' ->postparse 0x55c316d4ed78
|     |   | | `-CXXThisExpr 0x55c316d5f280 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55c316d5f390 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55c316d5f2e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55c316d5f2c0 <col:23> 'P' lvalue ParmVar 0x55c316d3a670 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55c316d5f328 <col:36> 'String' lvalue Var 0x55c316d5ef10 'str' 'String'
|     |   | | |-DeclRefExpr 0x55c316d5f348 <col:41> 'T' lvalue Var 0x55c316d5f1d0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55c316d5f378 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55c316d5f368 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55c316d5f3c8 <col:53> 'Args::Slot *' lvalue Var 0x55c316d5eb68 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55c316d5f540 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55c316d5f478 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55c316d5f448 <col:17> 'bool' lvalue ->_read_status 0x55c316c2b820
|     |   | |   `-ImplicitCastExpr 0x55c316d5f428 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55c316d5f418 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55c316d5f518 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55c316d5f4b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55c316d5f490 <col:17> 'Vector<T> *' lvalue Var 0x55c316d5edd0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55c316d5f4f8 <col:30> 'T' lvalue Var 0x55c316d5f1d0 'sx' 'T'
|     |   |-BinaryOperator 0x55c316d5f6c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55c316d5f558 <col:13> 'int' lvalue Var 0x55c316d5ec00 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55c316d5f6a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55c316d5f688 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55c316d5f5f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55c316d5f5d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55c316d5f5b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55c316d5f578 <col:28> 'int' lvalue Var 0x55c316d5ec00 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55c316d5f598 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55c316d5f670 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55c316d5f640 <col:49> 'bool' lvalue ->_read_status 0x55c316c2b820
|     |   |         `-ImplicitCastExpr 0x55c316d5f620 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55c316d5f610 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55c316d5f770 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55c316d5f6e0 <col:13> 'int' lvalue ParmVar 0x55c316d3a5f8 'flags' 'int'
|     |     `-UnaryOperator 0x55c316d5f758 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55c316d5f740 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55c316d5f720 <col:23> 'const int' lvalue Var 0x55c316d21bd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55c316d5f908 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55c316d5f840 <col:9> 'bool' lvalue ->_read_status 0x55c316c2b820
|       | `-ImplicitCastExpr 0x55c316d5f820 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55c316d5f810 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55c316d5f8e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55c316d5f8c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55c316d5f8b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55c316d5f870 <col:25> 'int' lvalue Var 0x55c316d5ec00 'read_status' 'int'
|           `-IntegerLiteral 0x55c316d5f890 <col:40> 'int' 1
|-AccessSpecDecl 0x55c316d3aa20 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55c316d3aa48 prev 0x55c316d1fed8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55c316d3ab40 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55c316d3ac30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55c316d5f960 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55c316d3ad20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55c316d5f970 <col:25, line:830:9>
| |-CXXMethodDecl 0x55c316d3ae20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55c316d3aed0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55c316d3af78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55c316d3af78
| | `-ParmVarDecl 0x55c316d3b088 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55c316d3b848 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55c316d3b848
|   `-ParmVarDecl 0x55c316d3b958 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55c316d3b0f8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55c316d3b258 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55c316d3b450 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55c316d3b300 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55c316d3b378 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55c316d5fb50 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55c316d3b708 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55c316d5f9c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c316d5f980 <col:20> 'void *' lvalue ParmVar 0x55c316d3b300 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55c316d3b770 '_slot' 'char *'
| | | `-CXXNewExpr 0x55c316d5fa48 <col:32, col:45> 'char *' array Function 0x55c3168984b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55c316d5fa30 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55c316d5fa00 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55c316d3b378 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55c316d3b7d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55c316d5fb10 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55c316d5fad0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55c316d3b378 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55c316d5fbd0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55c316d3b550 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55c316d3ad20 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55c316d5fc58 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55c316d5fc38 <line:840:13, col:22> 'void' array Function 0x55c316898818 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55c316d5fc20 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55c316d5fbf0 <col:22> 'char *' lvalue ->_slot 0x55c316d3b770
| |         `-CXXThisExpr 0x55c316d5fbe0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55c316d3b650 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55c316d3ae20 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55c316d5fe48 <col:22, line:844:9>
| |   `-CallExpr 0x55c316d5fdb0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55c316d5fd98 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55c316d5fd78 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55c3169a4298 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55c316d5fde8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55c316d5fcc8 <col:20> 'void *' lvalue ->_ptr 0x55c316d3b708
| |     |   `-CXXThisExpr 0x55c316d5fcb8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55c316d5fe18 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55c316d5fe00 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55c316d5fd08 <col:26> 'char *' lvalue ->_slot 0x55c316d3b770
| |     |     `-CXXThisExpr 0x55c316d5fcf8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55c316d5fe30 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55c316d5fd48 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55c316d3b7d0
| |         `-CXXThisExpr 0x55c316d5fd38 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55c316d3b708 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55c316d3b770 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55c316d3b7d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55c316d3b9c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c316d3b9c8
| | `-ParmVarDecl 0x55c316d3bad8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55c316d3bb78 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55c316d3bb78
|   `-ParmVarDecl 0x55c316d3bc88 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55c316d3be28 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55c316d3bcf8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55c316d3bd98 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55c316d3c0c0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55c316d3c2b8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55c316d3c188 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55c316d3c438 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55c316d5fe80 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55c316d5fe60 <col:20> 'T *' lvalue ParmVar 0x55c316d3c188 'ptr' 'T *'
|   | `-CompoundStmt 0x55c316d5fed0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55c316d3c388 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55c316d3ae20 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55c316d60080 <col:22, line:857:9>
|   |   `-CallExpr 0x55c316d60050 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55c316d5fee0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55c316a5cbe8 0x55c316a06cf8
|   |     |-CXXOperatorCallExpr 0x55c316d5ffe0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55c316d5ff70 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55c316c69b98 0x55c316c697b8 0x55c316c693e8 0x55c316c69008 0x55c316c68c28 0x55c316c68858
|   |     | `-MemberExpr 0x55c316d5ff40 <col:29> 'T *' lvalue ->_ptr 0x55c316d3c438
|   |     |   `-CXXThisExpr 0x55c316d5ff30 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55c316d60020 <col:35> 'T' lvalue ->_slot 0x55c316d3c498
|   |       `-CXXThisExpr 0x55c316d60010 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55c316d3c438 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55c316d3c498 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55c316d3c500 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55c316d3c600 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55c316d3c650 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316d3c5e0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55c316d3c5c0 <col:31> 'int' 48
|-FieldDecl 0x55c316d3c678 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55c316d3c6d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55c316d3c738 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55c316d3c870 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55c316d4e410 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55c316d4e470 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55c316d4e520 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55c316d4e748 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55c316d4e650 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55c316d4e898 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55c316d4e808 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55c316d4eb68 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55c316d4e958 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55c316d4e9d8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55c316d4ea80 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55c316d4ed78 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55c316d4ec30 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55c316d4eca8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55c316d4ee48 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55c316d4ef98 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55c316d4ef00 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55c316d4f328 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55c316d4f058 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55c316d4f0d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55c316d4f180 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55c316d4f238 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55c316d4f550 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55c316d4f400 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55c316d4f478 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55c316d4f868 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55c316d4f600 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55c316d4f7c8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55c316d4f6d8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316aa6e20 prev 0x55c316a0ce68 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316aa6f18 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55c316aa6fa8 <col:19, col:25> col:19 public
|-TypedefDecl 0x55c316aa6fe0 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55c31689a520 'uninitialized_type'
|   `-CXXRecord 0x55c31689a488 'uninitialized_type'
|-CXXConstructorDecl 0x55c316aa70a0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55c316aab800 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316aab8a8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55c316aab868 <col:10> 'int' 0
| `-CompoundStmt 0x55c316aab8f0 <col:13, line:22:5>
|-CXXConstructorDecl 0x55c316aa71f0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55c316aa7160 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55c316aab800 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316aab940 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55c316aab900 <col:10> 'unsigned int' lvalue ParmVar 0x55c316aa7160 'x' 'unsigned int'
| `-CompoundStmt 0x55c316aab988 <col:13, line:27:5>
|-CXXConstructorDecl 0x55c316aa7348 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55c316aa72b8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55c316aab800 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316aab9f0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55c316aab9d8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55c316aab998 <col:10> 'int' lvalue ParmVar 0x55c316aa72b8 'x' 'int'
| `-CompoundStmt 0x55c316aaba38 <col:13, line:31:5>
|-CXXConstructorDecl 0x55c316aa74a0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55c316aa7410 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55c316aab800 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316aabaa0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55c316aaba88 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55c316aaba48 <col:10> 'unsigned long' lvalue ParmVar 0x55c316aa7410 'x' 'unsigned long'
| `-CompoundStmt 0x55c316aabae8 <col:13, line:35:5>
|-CXXConstructorDecl 0x55c316aa75f8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55c316aa7568 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55c316aab800 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316aabb50 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55c316aabb38 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55c316aabaf8 <col:10> 'long' lvalue ParmVar 0x55c316aa7568 'x' 'long'
| `-CompoundStmt 0x55c316aabb98 <col:13, line:39:5>
|-CXXConstructorDecl 0x55c316aa77b8 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55c316aa76c8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55c316aab800 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316aabc18 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55c316aabbc8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55c3169dba00
| |     `-DeclRefExpr 0x55c316aabba8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55c316aa76c8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55c316aabc60 <col:20, line:44:5>
|-CXXConstructorDecl 0x55c316aa7948 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55c316aa7880 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55c316aabdc8 <col:51, line:56:5>
|   `-BinaryOperator 0x55c316aabda8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55c316aabc80 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55c316aab800
|     | `-CXXThisExpr 0x55c316aabc70 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55c316aabd90 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55c316aabd78 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55c316aabd58 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55c316aabd28 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55c316aabd10 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55c316aabcb0 <col:47> 'const unsigned char *' lvalue ParmVar 0x55c316aa7880 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55c316aa7a98 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55c316aa7a08 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55c316aa7c48 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55c316aa7b88 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55c316aabe38 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55c316aabe10 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55c316aabde0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55c316aa7b88 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55c316aa7dd8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55c316aa7d10 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55c316aa7ec8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55c316aacdf8 <col:46, line:83:5>
|   `-ReturnStmt 0x55c316aacde8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55c316aacdd0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55c316aacda0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316aacc58 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55c316aacb40 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55c316aaca28 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55c316aabe60 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55c316aa7fb8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55c316aacea8 <col:31, line:88:5>
|   `-ReturnStmt 0x55c316aace98 <line:87:2, col:10>
|     `-UnaryOperator 0x55c316aace80 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55c316aace68 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55c316aace50 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55c316aace20 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55c316aab800
|             `-CXXThisExpr 0x55c316aace10 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55c316aa8078 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55c316aacf28 <col:34, line:93:5>
|   `-ReturnStmt 0x55c316aacf18 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55c316aacf00 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55c316aaced0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55c316aab800
|         `-CXXThisExpr 0x55c316aacec0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55c316aa8148 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55c316aacfa8 <col:38, line:101:5>
|   `-ReturnStmt 0x55c316aacf98 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55c316aacf80 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55c316aacf50 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55c316aab800
|         `-CXXThisExpr 0x55c316aacf40 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55c316aa8218 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55c316aad278 <col:38, line:108:5>
|   `-ReturnStmt 0x55c316aad268 <line:107:2, col:58>
|     `-BinaryOperator 0x55c316aad248 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55c316aad160 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55c316aad140 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55c316aad128 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55c316aacfd0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55c316aab800
|       |   |   `-CXXThisExpr 0x55c316aacfc0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55c316aad100 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55c316aad0e8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55c316aad068 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55c3169e9f38 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55c316aad048 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55c316aad220 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55c316aad208 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55c316aad1e8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55c3169e9f38 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55c316aad1c8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55c316aa82d8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55c316aad4e8 <col:39, line:112:5>
|   `-ReturnStmt 0x55c316aad4d8 <line:111:2, col:56>
|     `-BinaryOperator 0x55c316aad4b8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55c316aad3d0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55c316aad3b0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55c316aad398 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55c316aad2a0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55c316aab800
|       |   |   `-CXXThisExpr 0x55c316aad290 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55c316aad370 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55c316aad358 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55c316aad338 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55c3169e9f38 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55c316aad318 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55c316aad490 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55c316aad478 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55c316aad458 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55c3169e9f38 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55c316aad438 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55c316aa8408 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55c316aa8510 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55c316aa8620 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55c316aaa6f8 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c316aaa7b8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316aaa880 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55c316aaaa78 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55c316aaa930 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55c316aaa9a8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55c316aaabf8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55c316aaab38 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55c316aaad40 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55c316aaacb0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55c316aaaee8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55c316aaadf8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55c316aab030 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55c316aaafa0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55c316aab178 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55c316aab0e8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55c316aab240 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55c316aab300 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55c316aab478 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55c316aab3b0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55c316aab540 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55c316aab628 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55c316aab6d0 <col:51> "" ""
|-TypedefDecl 0x55c316aab770 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55c316a0cf00 'IPAddress'
|   `-CXXRecord 0x55c316aa6e20 'IPAddress'
|-AccessSpecDecl 0x55c316aab7c8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55c316aab800 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55c316aabea8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55c316aabea8
| `-ParmVarDecl 0x55c316aabfb8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55c316aac058 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316aac168 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55c316aab800 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55c316aacd48 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55c316aacd00 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55c316aab800
| |     `-CXXStaticCastExpr 0x55c316aaccd0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55c316aacca0 <col:7> 'IPAddress' lvalue ParmVar 0x55c316aac168 '' 'IPAddress &&'
| `-CompoundStmt 0x55c316aacd90 <col:7>
`-CXXDestructorDecl 0x55c316aaca58 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316c7f4f8 prev 0x55c316c74700 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316c7f5f0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55c316c7f6e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55c316c7f808 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55c316c7f988 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55c316c7fb08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55c316c7fc88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55c316c90ab8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c316c91328 <col:11>
|-CXXDestructorDecl 0x55c316c90b90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c316c90cc8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c316c90cc8
| `-ParmVarDecl 0x55c316c90dd8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55c316c90e78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c316c90e78
| `-ParmVarDecl 0x55c316c90f88 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55c316c93d48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316c93e58 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55c316c940d8 <col:11>
|   `-ReturnStmt 0x55c316c940c8 <col:11>
|     `-UnaryOperator 0x55c316c940b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c316c940a0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55c316c93ec8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c316c93ec8
  `-ParmVarDecl 0x55c316c93fd8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316c7fcf0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316c7fe08 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55c316c7fea8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55c316c7ff10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55c316c7ff78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55c316c7ffe0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55c316c80040 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55c316c80100 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55c316c80160 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55c316c801c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55c316c909c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55c316c7fea8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55c316c91338 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55c316c91390 <col:12>
|-CXXConstructorDecl 0x55c316c90ff8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c316c90ff8
| `-ParmVarDecl 0x55c316c91108 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55c316c911a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c316c911a8
| `-ParmVarDecl 0x55c316c912b8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55c316c93430 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316c6de10 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55c316c6df28 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55c316c6dfb8 <col:16, col:22> col:16 public
|-EnumDecl 0x55c316c6dfe0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55c316c6e0e0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55c316c6e1c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c6e0c0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55c316c6e0a0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55c316c6e170 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55c316c6e1d8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c6e150 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55c316c6e130 <col:22> 'int' 64
|-CXXMethodDecl 0x55c316c6e518 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c316c6e200 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c316c6e280 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55c316c6e2f8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c316c6e370 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c316c6e5d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c316c6e7d8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55c316c6e650 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55c316c6e6c8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c316c6e888 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c316c6e9e8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55c316c6e8f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c316c6ea90 <col:72> warn_unused_result ""
|-TypedefDecl 0x55c316c6edf0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55c316c6ed80 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55c316c6ed20 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55c316c6ece0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55c3167454e0 'void'
|       |-PointerType 0x55c3169edf90 'unsigned char *'
|       | `-BuiltinType 0x55c3167455e0 'unsigned char'
|       |-TypedefType 0x55c3167ea560 'size_t' sugar
|       | |-Typedef 0x55c3167b5be0 'size_t'
|       | `-BuiltinType 0x55c316745640 'unsigned long'
|       `-PointerType 0x55c316745ce0 'void *'
|         `-BuiltinType 0x55c3167454e0 'void'
|-CXXMethodDecl 0x55c316c6f268 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55c316c6ee60 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55c316c6eed8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c316c6ef70 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55c316c6eff0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55c316c89960 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55c316c89948 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55c316c89910 <col:58> 'int' 0
| |-ParmVarDecl 0x55c316c6f070 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55c316c89988 <col:76> 'int' 0
| |-ParmVarDecl 0x55c316c6f0f0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55c316c899a8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55c316c6f338 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55c316c6f3b8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55c316c6f478 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55c316c6f518 <col:20>
| `-OptimizeNoneAttr 0x55c316c6f570 <col:30>
|-CXXMethodDecl 0x55c316c6f5e8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55c316c6f688 <col:20>
| `-OptimizeNoneAttr 0x55c316c6f6e0 <col:30>
|-CXXMethodDecl 0x55c316c6f758 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55c316c6f7f8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55c316c6f8a8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55c316c6f948 <col:20>
| |-OptimizeNoneAttr 0x55c316c6f9a0 <col:30>
| `-WarnUnusedResultAttr 0x55c316c6f9c8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55c316c6fa20 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c316c6fac0 <col:20>
| `-OptimizeNoneAttr 0x55c316c6fb18 <col:30>
|-CXXMethodDecl 0x55c316c6fb68 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55c316c6fc08 <col:20>
| `-OptimizeNoneAttr 0x55c316c6fc60 <col:30>
|-CXXMethodDecl 0x55c316c6fca8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55c316c6fd48 <col:20>
| `-OptimizeNoneAttr 0x55c316c6fda0 <col:30>
|-CXXMethodDecl 0x55c316c6fde8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c6fea8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c6ff70 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c316c70038 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c316c700f8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c70218 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55c316c89a70 <col:54, line:99:5>
|   `-ReturnStmt 0x55c316c89a60 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55c316c89a48 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55c316c89a18 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c316c804f8
|         `-CXXThisExpr 0x55c316c89a08 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c316c703b8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55c316c702c8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55c316c89b20 <col:67, line:103:5>
|   `-BinaryOperator 0x55c316c89b00 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c316c89a98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c316c804f8
|     | `-CXXThisExpr 0x55c316c89a88 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c316c89ae8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c89ac8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55c316c702c8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55c316c704b0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55c316c89ba0 <col:33, line:107:5>
|   `-ReturnStmt 0x55c316c89b90 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55c316c89b78 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55c316c89b48 <col:16> 'void *' lvalue ->_destructor_argument 0x55c316c80560
|         `-CXXThisExpr 0x55c316c89b38 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c316c70570 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55c316c8a1d0 <col:25, line:113:5>
|   |-ParenExpr 0x55c316c89f18 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55c316c89ee8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c89c58 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55c316c89c30 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55c316c89bf8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55c316c89bc8 <col:24> '<bound member function type>' ->shared 0x55c316c6f5e8
|   |   |       `-ImplicitCastExpr 0x55c316c89c18 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55c316c89bb8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55c316c89cb8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c89c98 <col:42> 'int' 0
|   |   `-CallExpr 0x55c316c89e48 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55c316c89e30 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c89e10 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c89e88 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c89d28 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55c316c89ea0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c89d50 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c89eb8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c89d88 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55c316c89ed0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c89df8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c89de0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c89da8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55c316c8a118 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55c316c89f48 <col:2> 'unsigned char *' lvalue ->_head 0x55c316c80300
|   | | `-CXXThisExpr 0x55c316c89f38 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55c316c8a100 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55c316c8a0e0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55c316c89f88 <col:10> 'unsigned char *' lvalue ->_data 0x55c316c80368
|   |     | `-CXXThisExpr 0x55c316c89f78 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55c316c8a0c8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55c316c8a0a8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55c316c89fc8 <col:18> 'unsigned char *' lvalue ->_tail 0x55c316c803d0
|   |         | `-CXXThisExpr 0x55c316c89fb8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55c316c8a090 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55c316c8a070 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55c316c8a008 <col:26> 'unsigned char *' lvalue ->_end 0x55c316c80438
|   |             | `-CXXThisExpr 0x55c316c89ff8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55c316c8a058 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55c316c8a038 <col:33> 'int' 0
|   `-BinaryOperator 0x55c316c8a1b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55c316c8a148 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55c316c804f8
|     | `-CXXThisExpr 0x55c316c8a138 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55c316c8a198 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55c316c8a178 <col:16> 'int' 0
|-CXXMethodDecl 0x55c316c706b0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c316c70620 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c316c70758 <col:20>
| |-OptimizeNoneAttr 0x55c316c707b0 <col:30>
| `-WarnUnusedResultAttr 0x55c316c707d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55c316c708a8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c316c70818 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c316c70950 <col:20>
| |-OptimizeNoneAttr 0x55c316c709a8 <col:30>
| `-WarnUnusedResultAttr 0x55c316c709d0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55c316c70b08 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c316c70a10 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c316c70bb0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55c316c70cb0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55c316c70c20 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c316c70d58 <col:20>
| `-OptimizeNoneAttr 0x55c316c70db0 <col:30>
|-CXXMethodDecl 0x55c316c70e78 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55c316c70de8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c316c70f20 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55c316c71020 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55c316c70f90 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55c316c710c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55c316c711c8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55c316c71138 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c316c71270 <col:20>
| `-OptimizeNoneAttr 0x55c316c712c8 <col:30>
|-CXXMethodDecl 0x55c316c71458 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55c316c71308 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55c316c71380 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55c316c899c8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55c316c71508 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55c316c71708 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c316c71580 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55c316c715f8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c71918 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55c316c717c8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c316c71840 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c71b28 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55c316c719d8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55c316c71a58 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55c316c899d8 <col:39> 'int' 0
|-CXXMethodDecl 0x55c316c71bf8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55c316c71cc0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55c316c71d88 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c316c71e48 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c71f10 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55c316c72058 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55c316c71fc8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55c316c72228 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c316c72118 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55c316c72190 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c722f8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55c316c723b8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55c316c72458 <col:20>
| `-OptimizeNoneAttr 0x55c316c724b0 <col:30>
|-CXXMethodDecl 0x55c316c72500 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c316c725a0 <col:20>
| `-OptimizeNoneAttr 0x55c316c725f8 <col:30>
|-CXXMethodDecl 0x55c316c72648 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c316c72708 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c727d0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55c316c72870 <col:20>
| `-OptimizeNoneAttr 0x55c316c728c8 <col:30>
|-CXXMethodDecl 0x55c316c72a18 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55c316c72908 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55c316c72980 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c72b68 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55c316c72ad8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c72c40 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55c316c72d00 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55c316c72da0 <col:20>
| `-OptimizeNoneAttr 0x55c316c72df8 <col:30>
|-CXXMethodDecl 0x55c316c72e48 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55c316c72ee8 <col:20>
| `-OptimizeNoneAttr 0x55c316c72f40 <col:30>
|-CXXMethodDecl 0x55c316c72f90 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c316c73058 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55c316c730f8 <col:20>
| `-OptimizeNoneAttr 0x55c316c73150 <col:30>
|-CXXMethodDecl 0x55c316c73198 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55c316c732b8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55c316c73428 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55c316c73368 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55c316c73518 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55c316c735b8 <col:20>
| `-OptimizeNoneAttr 0x55c316c73610 <col:30>
|-CXXMethodDecl 0x55c316c73660 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55c316c73720 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c73958 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55c316c737d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55c316c73848 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c316c73a08 <col:20>
| `-OptimizeNoneAttr 0x55c316c73a60 <col:30>
|-CXXMethodDecl 0x55c316c73b08 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55c316c73ba8 <col:20>
| `-OptimizeNoneAttr 0x55c316c73c00 <col:30>
|-CXXMethodDecl 0x55c316c73c50 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55c316c73cf0 <col:20>
| `-OptimizeNoneAttr 0x55c316c73d48 <col:30>
|-CXXMethodDecl 0x55c316c73d90 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55c316c73e30 <col:20>
| `-OptimizeNoneAttr 0x55c316c73e88 <col:30>
|-CXXMethodDecl 0x55c316c73f88 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55c316c73ec0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55c316c74030 <col:20>
| `-OptimizeNoneAttr 0x55c316c74088 <col:30>
|-CXXMethodDecl 0x55c316c74248 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55c316c740c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55c316c74138 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c316c742f8 <col:20>
| `-OptimizeNoneAttr 0x55c316c74350 <col:30>
|-CXXMethodDecl 0x55c316c743f8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55c316c74518 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55c316c74638 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55c316c746d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55c316c74700 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55c316c74828 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55c316c748c8 <col:20>
| `-OptimizeNoneAttr 0x55c316c74920 <col:30>
|-CXXMethodDecl 0x55c316c749c8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55c316c74a68 <col:20>
| `-OptimizeNoneAttr 0x55c316c74ac0 <col:30>
|-AccessSpecDecl 0x55c316c74ae8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55c316c74b10 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55c316c74c10 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55c316c74c60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c74bf0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55c316c74bd0 <col:14> 'int' 48
|-CXXMethodDecl 0x55c316c74cc8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55c316c74d68 <col:20>
| `-OptimizeNoneAttr 0x55c316c74dc0 <col:30>
|-CXXMethodDecl 0x55c316c74e38 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55c316c74ed8 <col:20>
| `-OptimizeNoneAttr 0x55c316c74f30 <col:30>
|-CXXMethodDecl 0x55c316c74ff8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55c316c74f68 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55c316c75198 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55c316c75338 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55c316c75248 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55c316c753e0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55c316c754e0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c316c75890 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c754c0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55c316c754a0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55c316c75570 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c316c758a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c75550 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55c316c75530 <col:14> 'int' 1
| |-EnumConstantDecl 0x55c316c75600 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c316c758c0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c755e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55c316c755c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55c316c75690 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c316c758d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c75670 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55c316c75650 <col:14> 'int' 3
| |-EnumConstantDecl 0x55c316c75720 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c316c758f0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c75700 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55c316c756e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55c316c757b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55c316c75908 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c75790 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55c316c75770 <col:13> 'int' 5
| `-EnumConstantDecl 0x55c316c75840 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55c316c75920 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c75820 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55c316c75800 <col:14> 'int' 6
|-CXXMethodDecl 0x55c316c75988 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55c316c75a28 <col:20>
| `-OptimizeNoneAttr 0x55c316c75a80 <col:30>
|-CXXMethodDecl 0x55c316c75b78 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55c316c75ab8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55c316c75c20 <col:20>
| `-OptimizeNoneAttr 0x55c316c75c78 <col:30>
|-CXXMethodDecl 0x55c316c75ce8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55c316c75e10 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55c316c75f88 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55c316c75ec0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55c316c76050 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55c316c76118 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55c316c76258 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55c316c761c8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55c316c76300 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55c316c76400 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c316c76600 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c763e0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55c316c763c0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55c316c76490 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c316c76618 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c76470 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55c316c76450 <col:45> 'int' 4
| |-EnumConstantDecl 0x55c316c76520 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55c316c76630 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c76500 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55c316c764e0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55c316c765b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55c316c76648 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c76590 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55c316c76570 <col:47> 'int' 16
|-CXXMethodDecl 0x55c316c766a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55c316c76818 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55c316c76758 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55c316c768c0 <col:20>
| `-OptimizeNoneAttr 0x55c316c76918 <col:30>
|-CXXMethodDecl 0x55c316c76968 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55c316c8a2f0 <col:18, col:36>
|   `-ReturnStmt 0x55c316c8a2e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55c316c8a2c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c316c8a2a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55c316c8a278 <col:27> '<bound member function type>' ->xanno 0x55c316c749c8
|           `-CXXThisExpr 0x55c316c8a268 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55c316c76a60 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55c316c8a400 <col:30, col:48>
|   `-ReturnStmt 0x55c316c8a3f0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55c316c8a3d8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55c316c8a3b8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55c316c8a388 <col:39> '<bound member function type>' ->xanno 0x55c316c74828
|           `-CXXThisExpr 0x55c316c8a378 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55c316c76b48 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55c316c8a598 <col:24, col:50>
|   `-ReturnStmt 0x55c316c8a588 <col:26, col:47>
|     `-UnaryOperator 0x55c316c8a570 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c316c8a550 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c316c8a538 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c316c8a4e8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55c316c7f808
|         |   `-CXXMemberCallExpr 0x55c316c8a4c8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c316c8a498 <col:34> '<bound member function type>' ->xanno 0x55c316c749c8
|         |       `-CXXThisExpr 0x55c316c8a488 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c316c8a518 <col:46> 'int' 0
|-CXXMethodDecl 0x55c316c76c50 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55c316c8a768 <col:36, col:62>
|   `-ReturnStmt 0x55c316c8a758 <col:38, col:59>
|     `-UnaryOperator 0x55c316c8a740 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c316c8a720 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c316c8a708 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c316c8a680 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55c316c7f808
|         |   `-CXXMemberCallExpr 0x55c316c8a660 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c316c8a630 <col:46> '<bound member function type>' ->xanno 0x55c316c74828
|         |       `-CXXThisExpr 0x55c316c8a620 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c316c8a6b0 <col:58> 'int' 0
|-CXXMethodDecl 0x55c316c76d68 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55c316c8a900 <col:26, col:53>
|   `-ReturnStmt 0x55c316c8a8f0 <col:28, col:50>
|     `-UnaryOperator 0x55c316c8a8d8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c316c8a8b8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c316c8a8a0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c316c8a850 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55c316c7fb08
|         |   `-CXXMemberCallExpr 0x55c316c8a830 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55c316c8a800 <col:36> '<bound member function type>' ->xanno 0x55c316c749c8
|         |       `-CXXThisExpr 0x55c316c8a7f0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55c316c8a880 <col:49> 'int' 0
|-CXXMethodDecl 0x55c316c76e88 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55c316c8aad8 <col:38, col:65>
|   `-ReturnStmt 0x55c316c8aac8 <col:40, col:62>
|     `-UnaryOperator 0x55c316c8aab0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55c316c8aa90 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55c316c8aa78 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c316c8a9e8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55c316c7fb08
|         |   `-CXXMemberCallExpr 0x55c316c8a9c8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c316c8a998 <col:48> '<bound member function type>' ->xanno 0x55c316c74828
|         |       `-CXXThisExpr 0x55c316c8a988 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55c316c8aa18 <col:61> 'int' 0
|-CXXMethodDecl 0x55c316c77038 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55c316c76f40 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55c316c8b1a8 <col:34, line:463:5>
|   |-ParenExpr 0x55c316c8aff0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c316c8afc0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8ac28 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8abf8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8ab48 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8ab30 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8aaf0 <col:23> 'int' lvalue ParmVar 0x55c316c76f40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8ab10 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8abd8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8aba8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8ab68 <col:33> 'int' lvalue ParmVar 0x55c316c76f40 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c316c8abc0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c316c8ab88 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c316c8ac88 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8ac68 <col:56> 'int' 0
|   |   `-CallExpr 0x55c316c8af20 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8af08 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8aee8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8af60 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8ad78 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c316c8af78 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8ada8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8af90 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8ade0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55c316c8afa8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8aed0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8aeb8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8ae78 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55c316c8b198 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55c316c8b180 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55c316c8b160 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55c316c8b130 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55c316c8b0e0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55c316c7f808
|         |   `-CXXMemberCallExpr 0x55c316c8b0c0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55c316c8b090 <col:9> '<bound member function type>' ->xanno 0x55c316c74828
|         |       `-CXXThisExpr 0x55c316c8b080 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55c316c8b148 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55c316c8b110 <col:21> 'int' lvalue ParmVar 0x55c316c76f40 'i' 'int'
|-CXXMethodDecl 0x55c316c77288 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55c316c770f8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55c316c77170 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55c316c8b838 <col:40, line:472:5>
|   |-ParenExpr 0x55c316c8b650 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55c316c8b620 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8b300 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8b2d0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8b220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8b208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8b1c8 <col:23> 'int' lvalue ParmVar 0x55c316c770f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8b1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8b2b0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8b280 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8b240 <col:33> 'int' lvalue ParmVar 0x55c316c770f8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55c316c8b298 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55c316c8b260 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55c316c8b360 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8b340 <col:56> 'int' 0
|   |   `-CallExpr 0x55c316c8b580 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8b568 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8b548 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8b5c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8b3d0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55c316c8b5d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8b400 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8b5f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8b438 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55c316c8b608 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8b530 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8b518 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8b4d8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55c316c8b818 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55c316c8b7c0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55c316c8b790 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55c316c8b740 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55c316c7f808
|     | |   `-CXXMemberCallExpr 0x55c316c8b720 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55c316c8b6f0 <col:2> '<bound member function type>' ->xanno 0x55c316c749c8
|     | |       `-CXXThisExpr 0x55c316c8b6e0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55c316c8b7a8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c316c8b770 <col:14> 'int' lvalue ParmVar 0x55c316c770f8 'i' 'int'
|     `-ImplicitCastExpr 0x55c316c8b800 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c8b7e0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55c316c77170 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55c316c77448 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55c316c77350 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c316c8bfb8 <col:36, line:485:5>
|   |-ParenExpr 0x55c316c8bd20 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8bcf0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8b9d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8b9a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8b8b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8b898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8b858 <col:23> 'int' lvalue ParmVar 0x55c316c77350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8b878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8b980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8b968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8b8d0 <col:33> 'int' lvalue ParmVar 0x55c316c77350 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8b948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8b930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8b8f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8b910 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c316c8ba30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8ba10 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8bc50 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8bc38 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8bc18 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8bc90 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8baa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c316c8bca8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8bad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8bcc0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8bb10 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55c316c8bcd8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8bc00 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8bbe8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8bba8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55c316c8bfa8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55c316c8bf90 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55c316c8bf78 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c316c8bf48 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55c316c8bee8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c316c8beb8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c316c8be30 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c316c7f6e0
|             |   `-CXXMemberCallExpr 0x55c316c8be10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c316c8bde0 <col:61> '<bound member function type>' ->xanno 0x55c316c74828
|             |       `-CXXThisExpr 0x55c316c8bdd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c316c8bed0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c316c8be60 <col:74> 'int' lvalue ParmVar 0x55c316c77350 'i' 'int'
|-CXXMethodDecl 0x55c316c77698 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55c316c77508 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c316c77580 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55c316c8c708 <col:42, line:500:5>
|   |-ParenExpr 0x55c316c8c4a0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8c470 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8c150 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8c120 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8c030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8c018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8bfd8 <col:23> 'int' lvalue ParmVar 0x55c316c77508 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8bff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8c100 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8c0e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8c050 <col:33> 'int' lvalue ParmVar 0x55c316c77508 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8c0c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8c0b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8c070 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8c090 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c316c8c1b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8c190 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8c3d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8c3b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8c398 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8c410 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8c220 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c316c8c428 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8c258 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8c440 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8c290 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55c316c8c458 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8c380 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8c368 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8c328 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55c316c8c6e8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55c316c8c698 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c316c8c668 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c316c8c610 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c316c8c5e0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c316c8c590 <col:48, col:57> 'char [48]' lvalue ->c 0x55c316c7f6e0
|     |     |   `-CXXMemberCallExpr 0x55c316c8c570 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c316c8c540 <col:48> '<bound member function type>' ->xanno 0x55c316c749c8
|     |     |       `-CXXThisExpr 0x55c316c8c530 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c316c8c5f8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c316c8c5c0 <col:61> 'int' lvalue ParmVar 0x55c316c77508 'i' 'int'
|     `-ImplicitCastExpr 0x55c316c8c6d0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c8c6b0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55c316c77580 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55c316c77858 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55c316c77760 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c316c8ce68 <col:35, line:513:5>
|   |-ParenExpr 0x55c316c8cb78 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8cb48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8c8a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8c870 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8c780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8c768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8c728 <col:23> 'int' lvalue ParmVar 0x55c316c77760 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8c748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8c850 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8c838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8c7a0 <col:33> 'int' lvalue ParmVar 0x55c316c77760 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8c818 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8c800 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8c7c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8c7e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c316c8c900 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8c8e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8caa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8ca90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8ca70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8cae8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8c970 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c316c8cb00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8c9a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8cb18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8c9e0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55c316c8cb30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8ca58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8ca40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8ca00 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55c316c8ce58 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55c316c8ce40 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55c316c8ce28 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c316c8cdf8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55c316c8cd70 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c316c8cd40 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c316c8ccf0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c316c7f6e0
|             |   `-CXXMemberCallExpr 0x55c316c8ccd0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c316c8cca0 <col:60> '<bound member function type>' ->xanno 0x55c316c74828
|             |       `-CXXThisExpr 0x55c316c8cc90 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c316c8cd58 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c316c8cd20 <col:73> 'int' lvalue ParmVar 0x55c316c77760 'i' 'int'
|-CXXMethodDecl 0x55c316c77aa8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55c316c77918 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c316c77990 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55c316c8d588 <col:41, line:528:5>
|   |-ParenExpr 0x55c316c8d310 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8d2e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8d000 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8cfd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8cee0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8cec8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8ce88 <col:23> 'int' lvalue ParmVar 0x55c316c77918 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8cea8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8cfb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8cf98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8cf00 <col:33> 'int' lvalue ParmVar 0x55c316c77918 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8cf78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8cf60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8cf20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8cf40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55c316c8d060 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8d040 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8d240 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8d228 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8d208 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8d280 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8d0d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55c316c8d298 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8d108 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8d2b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8d140 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55c316c8d2c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8d1f0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8d1d8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8d198 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55c316c8d568 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55c316c8d518 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c316c8d4e8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55c316c8d490 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c316c8d450 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c316c8d400 <col:47, col:56> 'char [48]' lvalue ->c 0x55c316c7f6e0
|     |     |   `-CXXMemberCallExpr 0x55c316c8d3e0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c316c8d3b0 <col:47> '<bound member function type>' ->xanno 0x55c316c749c8
|     |     |       `-CXXThisExpr 0x55c316c8d3a0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c316c8d468 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c316c8d430 <col:60> 'int' lvalue ParmVar 0x55c316c77918 'i' 'int'
|     `-ImplicitCastExpr 0x55c316c8d550 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c8d530 <col:65> 'int16_t':'short' lvalue ParmVar 0x55c316c77990 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55c316c77c68 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55c316c77b70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c316c8dc58 <col:36, line:541:5>
|   |-ParenExpr 0x55c316c8d9f8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8d9c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8d720 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8d6f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8d600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8d5e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8d5a8 <col:23> 'int' lvalue ParmVar 0x55c316c77b70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8d5c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8d6d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8d6b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8d620 <col:33> 'int' lvalue ParmVar 0x55c316c77b70 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8d698 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8d680 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8d640 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8d660 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c316c8d780 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8d760 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8d928 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8d910 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8d8f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8d968 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8d7f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c316c8d980 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8d828 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8d998 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8d860 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55c316c8d9b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8d8d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8d8c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8d880 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55c316c8dc48 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55c316c8dc30 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55c316c8dc18 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c316c8dbe8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55c316c8db90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c316c8db60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c316c8db10 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c316c7f6e0
|             |   `-CXXMemberCallExpr 0x55c316c8daf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c316c8dac0 <col:61> '<bound member function type>' ->xanno 0x55c316c74828
|             |       `-CXXThisExpr 0x55c316c8dab0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c316c8db78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c316c8db40 <col:74> 'int' lvalue ParmVar 0x55c316c77b70 'i' 'int'
|-CXXMethodDecl 0x55c316c77e38 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55c316c77d28 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55c316c77da0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55c316c77ee8 <col:20>
| `-OptimizeNoneAttr 0x55c316c77f40 <col:30>
|-CXXMethodDecl 0x55c316c78078 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55c316c77f80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55c316c8e328 <col:35, line:562:5>
|   |-ParenExpr 0x55c316c8e0c8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8e098 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8ddf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8ddc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8dcd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8dcb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8dc78 <col:23> 'int' lvalue ParmVar 0x55c316c77f80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8dc98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8dda0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8dd88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8dcf0 <col:33> 'int' lvalue ParmVar 0x55c316c77f80 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8dd68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8dd50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8dd10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8dd30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c316c8de50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8de30 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8dff8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8dfe0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8dfc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8e038 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8dec0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c316c8e050 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8def8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8e068 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8df30 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55c316c8e080 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8dfa8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8df90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8df50 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55c316c8e318 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55c316c8e300 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55c316c8e2e8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c316c8e2b8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55c316c8e260 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c316c8e230 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c316c8e1e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55c316c7f6e0
|             |   `-CXXMemberCallExpr 0x55c316c8e1c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c316c8e190 <col:60> '<bound member function type>' ->xanno 0x55c316c74828
|             |       `-CXXThisExpr 0x55c316c8e180 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c316c8e248 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c316c8e210 <col:73> 'int' lvalue ParmVar 0x55c316c77f80 'i' 'int'
|-CXXMethodDecl 0x55c316c78288 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55c316c78138 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c316c781b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55c316c8ea08 <col:41, line:577:5>
|   |-ParenExpr 0x55c316c8e798 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8e768 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8e4c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8e490 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8e3a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8e388 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8e348 <col:23> 'int' lvalue ParmVar 0x55c316c78138 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8e368 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8e470 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8e458 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8e3c0 <col:33> 'int' lvalue ParmVar 0x55c316c78138 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8e438 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8e420 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8e3e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8e400 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55c316c8e520 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8e500 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8e6c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8e6b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8e690 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8e708 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8e590 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55c316c8e720 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8e5c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8e738 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8e600 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55c316c8e750 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8e678 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8e660 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8e620 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55c316c8e9e8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55c316c8e998 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c316c8e968 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55c316c8e908 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c316c8e8d8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c316c8e888 <col:47, col:56> 'char [48]' lvalue ->c 0x55c316c7f6e0
|     |     |   `-CXXMemberCallExpr 0x55c316c8e868 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c316c8e838 <col:47> '<bound member function type>' ->xanno 0x55c316c749c8
|     |     |       `-CXXThisExpr 0x55c316c8e828 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c316c8e8f0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c316c8e8b8 <col:60> 'int' lvalue ParmVar 0x55c316c78138 'i' 'int'
|     `-ImplicitCastExpr 0x55c316c8e9d0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c8e9b0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55c316c781b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55c316c78448 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55c316c78350 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55c316c8f138 <col:36, line:591:5>
|   |-ParenExpr 0x55c316c8ee78 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8ee48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8eba0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8eb70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8ea80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8ea68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8ea28 <col:23> 'int' lvalue ParmVar 0x55c316c78350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8ea48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8eb50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8eb38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8eaa0 <col:33> 'int' lvalue ParmVar 0x55c316c78350 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8eb18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8eb00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8eac0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8eae0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c316c8ec00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8ebe0 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8eda8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8ed90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8ed70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8ede8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8ec70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c316c8ee00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8eca8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8ee18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8ece0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55c316c8ee30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8ed58 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8ed40 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8ed00 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55c316c8f128 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55c316c8f110 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55c316c8f0f8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c316c8f0c8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55c316c8f040 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c316c8f010 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c316c8efc0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55c316c7f6e0
|             |   `-CXXMemberCallExpr 0x55c316c8efa0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c316c8ef70 <col:61> '<bound member function type>' ->xanno 0x55c316c74828
|             |       `-CXXThisExpr 0x55c316c8ef60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c316c8f028 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c316c8eff0 <col:74> 'int' lvalue ParmVar 0x55c316c78350 'i' 'int'
|-CXXMethodDecl 0x55c316c78698 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55c316c78508 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c316c78580 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55c316c8f818 <col:42, line:606:5>
|   |-ParenExpr 0x55c316c8f5a8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55c316c8f578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8f2d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8f2a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8f1b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8f198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8f158 <col:23> 'int' lvalue ParmVar 0x55c316c78508 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8f178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8f280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55c316c8f268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8f1d0 <col:33> 'int' lvalue ParmVar 0x55c316c78508 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8f248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8f230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8f1f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55c316c8f210 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55c316c8f330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8f310 <col:60> 'int' 0
|   |   `-CallExpr 0x55c316c8f4d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8f4c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8f4a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8f518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8f3a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55c316c8f530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8f3d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8f548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8f410 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55c316c8f560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8f488 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8f470 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8f430 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55c316c8f7f8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55c316c8f7a8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c316c8f778 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55c316c8f718 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c316c8f6e8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c316c8f698 <col:48, col:57> 'char [48]' lvalue ->c 0x55c316c7f6e0
|     |     |   `-CXXMemberCallExpr 0x55c316c8f678 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c316c8f648 <col:48> '<bound member function type>' ->xanno 0x55c316c749c8
|     |     |       `-CXXThisExpr 0x55c316c8f638 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c316c8f700 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c316c8f6c8 <col:61> 'int' lvalue ParmVar 0x55c316c78508 'i' 'int'
|     `-ImplicitCastExpr 0x55c316c8f7e0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c8f7c0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55c316c78580 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55c316c78830 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55c316c78760 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55c316c90088 <col:33, line:620:5>
|   |-ParenExpr 0x55c316c8fe00 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c316c8fdd0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c8fa20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c8f9f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c8f890 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c8f878 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c8f838 <col:23> 'int' lvalue ParmVar 0x55c316c78760 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c8f858 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c8f9d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c316c8f9b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c8f8b0 <col:33> 'int' lvalue ParmVar 0x55c316c78760 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c8f998 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c8f980 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c8f8d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c316c8f958 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c316c8f940 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c316c8f908 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c316c8fa80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c8fa60 <col:79> 'int' 0
|   |   `-CallExpr 0x55c316c8fd30 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c316c8fd18 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c8fcf8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c8fd70 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8fb68 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c316c8fd88 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c8fbb0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c8fda0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c8fbe8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55c316c8fdb8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c8fce0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c8fcc8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c8fc88 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55c316c90078 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55c316c90060 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55c316c90048 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55c316c90018 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55c316c8ff90 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55c316c8ff60 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55c316c8ff10 <col:67, col:76> 'char const[48]' lvalue ->c 0x55c316c7f6e0
|             |   `-CXXMemberCallExpr 0x55c316c8fef0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55c316c8fec0 <col:67> '<bound member function type>' ->xanno 0x55c316c74828
|             |       `-CXXThisExpr 0x55c316c8feb0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55c316c8ff78 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55c316c8ff40 <col:80> 'int' lvalue ParmVar 0x55c316c78760 'i' 'int'
|-CXXMethodDecl 0x55c316c78a48 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55c316c788f0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55c316c78970 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55c316c908b0 <col:45, line:635:5>
|   |-ParenExpr 0x55c316c905f8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55c316c905c8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55c316c90290 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55c316c90260 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55c316c90100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55c316c900e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55c316c900a8 <col:23> 'int' lvalue ParmVar 0x55c316c788f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55c316c900c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55c316c90240 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55c316c90228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55c316c90120 <col:33> 'int' lvalue ParmVar 0x55c316c788f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55c316c90208 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55c316c901f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55c316c90140 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55c316c74c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55c316c901c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55c316c901b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55c316c90178 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55c316c902f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55c316c902d0 <col:79> 'int' 0
|   |   `-CallExpr 0x55c316c90528 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55c316c90510 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c904f0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55c3167e12c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55c316c90568 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c90360 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55c316c90580 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55c316c903a8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55c316c90598 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55c316c903e0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55c316c905b0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55c316c904d8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55c316c904c0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55c316c90478 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55c316c90890 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55c316c907f8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55c316c907c8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55c316c90768 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55c316c90738 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55c316c906e8 <col:54, col:63> 'char [48]' lvalue ->c 0x55c316c7f6e0
|     |     |   `-CXXMemberCallExpr 0x55c316c906c8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55c316c90698 <col:54> '<bound member function type>' ->xanno 0x55c316c749c8
|     |     |       `-CXXThisExpr 0x55c316c90688 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55c316c90750 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55c316c90718 <col:67> 'int' lvalue ParmVar 0x55c316c788f0 'i' 'int'
|     `-CXXConstCastExpr 0x55c316c90860 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55c316c90848 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55c316c90810 <col:91> 'const void *' lvalue ParmVar 0x55c316c78970 'x' 'const void *'
|-CXXMethodDecl 0x55c316c78b18 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55c316c90938 <col:34, line:640:5>
|   `-ReturnStmt 0x55c316c90928 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55c316c90910 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55c316c908e0 <col:16> 'Packet *' lvalue ->_data_packet 0x55c316c80298
|         `-CXXThisExpr 0x55c316c908d0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55c316c78c58 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55c316c78bc8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55c316c899f8 <col:46> 'bool' true
|-CXXMethodDecl 0x55c316c78dd8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55c316c78d10 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55c316c78e80 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55c316c79630 <line:660:22> "" ""
| |-EnumConstantDecl 0x55c316c78f80 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c796a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c78f60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55c316c78f40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c316c6e0e0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c316c79010 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c796b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c78ff0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55c316c78fd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55c316c6e170 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55c316c790a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c796d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c79080 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c316c79060 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c316c79130 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c796e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c79110 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55c316c790f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55c316c791c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c79700 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c791a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55c316c79180 <col:21> 'int' 16
| |-EnumConstantDecl 0x55c316c79250 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c79718 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c79230 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55c316c79210 <col:19> 'int' 32
| |-EnumConstantDecl 0x55c316c792e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c79730 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c792c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55c316c792a0 <col:19> 'int' EnumConstant 0x55c316c79130 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c316c79370 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c79748 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c79350 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55c316c79330 <col:19> 'int' EnumConstant 0x55c316c79250 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55c316c79440 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c79760 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c79420 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55c316c79400 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c316c793c0 <col:23> 'int' EnumConstant 0x55c316c79370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c316c793e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55c316c79510 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55c316c79778 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c794f0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55c316c794d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55c316c79490 <col:23> 'int' EnumConstant 0x55c316c79370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55c316c794b0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55c316c795e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55c316c79790 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c795c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55c316c795a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55c316c79560 <col:23> 'int' EnumConstant 0x55c316c79370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55c316c79580 <col:40> 'int' 8
|-CXXMethodDecl 0x55c316c797d0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55c316c79870 <col:68> "" ""
|-CXXMethodDecl 0x55c316c79908 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55c316c799a8 <col:45> "" ""
|-CXXMethodDecl 0x55c316c79a40 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c316c79ae0 <col:57> "" ""
|-CXXMethodDecl 0x55c316c79b78 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55c316c79c18 <col:45> "" ""
|-CXXMethodDecl 0x55c316c79cb0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55c316c79d50 <col:57> "" ""
|-CXXMethodDecl 0x55c316c79de0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c316c79e80 <col:51> "" ""
|-CXXMethodDecl 0x55c316c79f10 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c316c79fb0 <col:63> "" ""
|-CXXMethodDecl 0x55c316c7a040 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c316c7a0e0 <col:53> "" ""
|-CXXMethodDecl 0x55c316c7a170 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c316c7a210 <col:65> "" ""
|-CXXMethodDecl 0x55c316c7a328 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c316c7a298 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55c316c7a3d0 <col:61> "" ""
|-CXXMethodDecl 0x55c316c7a568 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c316c7a458 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55c316c7a4d0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c316c7a618 <col:67> "" ""
|-CXXMethodDecl 0x55c316c7a730 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c316c7a6a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c316c7a7d8 <col:63> "" ""
|-CXXMethodDecl 0x55c316c7a970 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c316c7a860 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c316c7a8d8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c316c7aa20 <col:69> "" ""
|-CXXMethodDecl 0x55c316c7ab38 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c316c7aaa8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c316c7abe0 <col:63> "" ""
|-CXXMethodDecl 0x55c316c7d2b8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c316c7d1a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c316c7d220 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c316c7d368 <col:69> "" ""
|-CXXMethodDecl 0x55c316c7d480 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c316c7d3f0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55c316c7d528 <col:62> "" ""
|-CXXMethodDecl 0x55c316c7d6c0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c316c7d5b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c316c7d628 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55c316c7d770 <col:68> "" ""
|-CXXMethodDecl 0x55c316c7d888 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55c316c7d7f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55c316c7d930 <col:63> "" ""
|-CXXMethodDecl 0x55c316c7dac8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55c316c7d9b8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55c316c7da30 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55c316c7db78 <col:69> "" ""
|-CXXMethodDecl 0x55c316c7dc08 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55c316c7dca8 <col:64> "" ""
|-CXXMethodDecl 0x55c316c7dd38 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55c316c7ddd8 <col:52> "" ""
|-CXXMethodDecl 0x55c316c7de68 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55c316c7df08 <col:67> "" ""
|-CXXMethodDecl 0x55c316c7df98 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55c316c7e038 <col:55> "" ""
|-CXXMethodDecl 0x55c316c7e150 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55c316c7e0c0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c316c7e1f8 <col:58> "" ""
|-CXXMethodDecl 0x55c316c7e390 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55c316c7e280 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c316c7e2f8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55c316c7e440 <col:62> "" ""
|-CXXMethodDecl 0x55c316c7e558 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55c316c7e4c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c316c7e600 <col:58> "" ""
|-CXXMethodDecl 0x55c316c7e798 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55c316c7e688 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c316c7e700 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55c316c7e848 <col:62> "" ""
|-CXXMethodDecl 0x55c316c7e960 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55c316c7e8d0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55c316c7ea08 <col:60> "" ""
|-CXXMethodDecl 0x55c316c7eba0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55c316c7ea90 <col:34> col:37 'int'
| |-ParmVarDecl 0x55c316c7eb08 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55c316c7ec50 <col:64> "" ""
|-CXXMethodDecl 0x55c316c7ed68 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55c316c7ecd8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55c316c7ee10 <col:58> "" ""
|-CXXMethodDecl 0x55c316c7efa8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55c316c7ee98 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c316c7ef10 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55c316c7f058 <col:62> "" ""
|-CXXMethodDecl 0x55c316c7f170 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55c316c7f0e0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55c316c7f218 <col:59> "" ""
|-CXXMethodDecl 0x55c316c7f3b0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c316c7f2a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55c316c7f318 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c316c7f460 <col:63> "" ""
|-AccessSpecDecl 0x55c316c7f4d0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55c316c7f4f8 prev 0x55c316c74700 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c316c7f5f0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55c316c7f6e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55c316c7f808 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55c316c7f988 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55c316c7fb08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55c316c7fc88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55c316c90ab8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c316c91328 <col:11>
| |-CXXDestructorDecl 0x55c316c90b90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55c316c90cc8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55c316c90cc8
| | `-ParmVarDecl 0x55c316c90dd8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55c316c90e78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c316c90e78
| | `-ParmVarDecl 0x55c316c90f88 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55c316c93d48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c316c93e58 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55c316c940d8 <col:11>
| |   `-ReturnStmt 0x55c316c940c8 <col:11>
| |     `-UnaryOperator 0x55c316c940b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c316c940a0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55c316c93ec8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55c316c93ec8
|   `-ParmVarDecl 0x55c316c93fd8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55c316c7fcf0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c316c7fe08 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55c316c7fea8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55c316c7ff10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55c316c7ff78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55c316c7ffe0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55c316c80040 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55c316c80100 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55c316c80160 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55c316c801c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55c316c909c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55c316c7fea8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55c316c91338 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55c316c91390 <col:12>
| |-CXXConstructorDecl 0x55c316c90ff8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55c316c90ff8
| | `-ParmVarDecl 0x55c316c91108 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55c316c911a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55c316c911a8
| | `-ParmVarDecl 0x55c316c912b8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55c316c93430 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55c316c80238 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55c316c80298 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55c316c80300 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55c316c80368 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55c316c803d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55c316c80438 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55c316c80498 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55c316c804f8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55c316c80560 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55c316c805e8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55c316c80238 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55c316c90960 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55c316c80498 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55c316c913a0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55c316c91400 <col:21, line:755:5>
|-CXXConstructorDecl 0x55c316c80788 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55c316c806c8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55c316c80880 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55c316c80a68 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55c316c80970 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55c316c80d38 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55c316c80b20 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c316c80b98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c316c80c10 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c80f58 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55c316c80e08 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55c316c80e80 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55c316c89538 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55c316c81018 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55c316c81090 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55c316c81108 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55c316c89690 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c316c89600 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c897d8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55c316c89748 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55c316c898d0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316c914a0 prev 0x55c316c6dd60 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55c316c915d8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55c316c91668 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55c316c91710 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55c316c917b0 <col:20>
| `-OptimizeNoneAttr 0x55c316c91808 <col:30>
|-CXXMethodDecl 0x55c316c91858 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55c316c918f8 <col:20>
| `-OptimizeNoneAttr 0x55c316c91950 <col:30>
|-CXXMethodDecl 0x55c316c919a0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c316c91a68 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c316c91b30 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c316c91c48 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55c316c91d10 <line:786:5, col:72> col:55 used network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55c316c91db0 <col:20>
| `-OptimizeNoneAttr 0x55c316c91e08 <col:30>
|-CXXMethodDecl 0x55c316c91e78 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55c316c91f18 <col:20>
| `-OptimizeNoneAttr 0x55c316c91f70 <col:30>
|-CXXMethodDecl 0x55c316c92018 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55c316c920b8 <col:20>
| `-OptimizeNoneAttr 0x55c316c92110 <col:30>
|-CXXMethodDecl 0x55c316c92160 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55c316c92278 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55c316c92398 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55c316c924b8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55c316c92580 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55c316c92620 <col:62> "" ""
|-AccessSpecDecl 0x55c316c92690 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55c316c926f0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55c316c932e8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55c316c93510 <col:29, col:31>
|-CXXMethodDecl 0x55c316c927b8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55c316c928f8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55c316c92868 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55c316c929f0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55c316c93520 <col:23, col:25>
|-CXXMethodDecl 0x55c316c92ba8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55c316c92ae0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55c316c92e78 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55c316c92c60 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55c316c92cd8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55c316c92d50 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c93008 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55c316c92f40 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55c316c93100 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55c316c93168 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55c316c93168
  `-ParmVarDecl 0x55c316c93278 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316c3f790 prev 0x55c316c365d0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316c3f888 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55c316c3f928 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55c316c466f0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55c316c46ad8 <col:11>
|-CXXConstructorDecl 0x55c316c467d0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316c468b8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55c316c47220 <col:11>
|-CXXConstructorDecl 0x55c316c46958 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316c46a68 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55c316c48a78 <col:11>
|-CXXDestructorDecl 0x55c316c47d88 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c31694e718 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c31694e828 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55c31694f0f0 <col:11>
|   `-ReturnStmt 0x55c31694f0e0 <col:11>
|     `-UnaryOperator 0x55c31694f0c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c31694f0b8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55c31694e898 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c31694e898
  `-ParmVarDecl 0x55c31694e9a8 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316c35788 prev 0x55c316c35498 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316c35880 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55c316c35910 <col:19, col:25> col:19 public
|-TypedefDecl 0x55c316c35948 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55c31689a8f0 'int32_t' sugar
|   |-Typedef 0x55c3167ae328 'int32_t'
|   `-TypedefType 0x55c316787510 '__int32_t' sugar
|     |-Typedef 0x55c316787128 '__int32_t'
|     `-BuiltinType 0x55c316745580 'int'
|-TypedefDecl 0x55c316c359b0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55c31689aab0 'int64_t' sugar
|   |-Typedef 0x55c3167ae390 'int64_t'
|   `-TypedefType 0x55c316787630 '__int64_t' sugar
|     |-Typedef 0x55c316787208 '__int64_t'
|     `-BuiltinType 0x55c3167455a0 'long'
|-EnumDecl 0x55c316c35a08 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55c316c35b80 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55c316c35b60 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55c316c35b38 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55c316c35b20 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55c316c35af0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55c316c35c78 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55c316c35c58 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55c316c35c30 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55c316c35c18 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55c316c35bf0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55c316c35bd0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55c316c35cc8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55c316c35dd0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c36320 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c35db0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55c316c35d90 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55c316c35e60 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c36338 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c35e40 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55c316c35e20 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55c316c35ef0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c36350 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c35ed0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55c316c35eb0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55c316c35f80 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c36368 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c35f60 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55c316c35f40 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55c316c36010 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c36380 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c35ff0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55c316c35fd0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55c316c360a0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c36398 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c36080 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55c316c36060 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55c316c36130 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c363b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c36110 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55c316c360f0 <col:26> 'int' EnumConstant 0x55c316c35dd0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55c316c36200 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55c316c363c8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c361e0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55c316c361c0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55c316c36180 <col:27> 'int' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55c316c361a0 <col:44> 'int' EnumConstant 0x55c316c360a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55c316c362d0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55c316c363e0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c362b0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55c316c36290 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55c316c36250 <col:27> 'int' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55c316c36270 <col:44> 'int' EnumConstant 0x55c316c35f80 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55c316c363f8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55c316c36500 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55c316c36550 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c364e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55c316c364c0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55c316c36578 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55c31689a520 'uninitialized_type'
|   `-CXXRecord 0x55c31689a488 'uninitialized_type'
|-CXXRecordDecl 0x55c316c365d0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55c316c366e0 <line:174:5, line:176:5> line:174:12 Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c46ae8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c316c46c08 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55c316c46bc0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55c316c46b50 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c46b40 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55c316c46b80 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55c316c46bf0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55c316c46ba0 <col:19> 'int' 0
|-CXXConstructorDecl 0x55c316c36928 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55c316c367a0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55c316c36818 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55c316c42420 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55c316c42400 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c46c20 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c316c46d70 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55c316c46cf8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55c316c46c88 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c46c78 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55c316c46d40 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55c316c46d28 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c316c46cb8 <col:16> 'long' lvalue ParmVar 0x55c316c367a0 'sec' 'long'
|     `-ImplicitCastExpr 0x55c316c46d58 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c46cd8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c36818 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55c316c36b88 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55c316c369f8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55c316c36a70 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55c316c42458 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55c316c42438 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c46d88 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c316c46ec0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55c316c46e60 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55c316c46df0 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c46de0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55c316c46e90 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316c46e20 <col:16> 'int' lvalue ParmVar 0x55c316c369f8 'sec' 'int'
|     `-ImplicitCastExpr 0x55c316c46ea8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c46e40 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c36a70 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55c316c36de8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55c316c36c58 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55c316c36cd0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55c316c42490 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55c316c42470 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c46ed8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c316c47028 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55c316c46fb0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55c316c46f40 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c46f30 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55c316c46ff8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55c316c46fe0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c316c46f70 <col:16> 'unsigned long' lvalue ParmVar 0x55c316c36c58 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55c316c47010 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c46f90 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c36cd0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55c316c37f80 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55c316c36eb8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55c316c36f30 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55c316c424c8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55c316c424a8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c47040 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c316c47190 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55c316c47118 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55c316c470a8 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c47098 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55c316c47160 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55c316c47148 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55c316c470d8 <col:16> 'unsigned int' lvalue ParmVar 0x55c316c36eb8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55c316c47178 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55c316c470f8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c36f30 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55c316c380e0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55c316c38050 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55c316c38278 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55c316c381b8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55c316c384a8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55c316c383b0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55c316c38658 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55c316c38598 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c47230 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55c316c471a8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55c316c38598 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55c316c47290 <col:19, line:214:5>
|-CXXConstructorDecl 0x55c316c38828 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55c316c38768 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c472a0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55c316c47350 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55c316c47328 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55c316c472f8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55c316c38768 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55c316c38a18 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55c316c38990 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55c316c35530 'Timestamp'
|   | `-CXXRecord 0x55c316c35788 'Timestamp'
|   `-ParenType 0x55c316c38930 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55c316c38900 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55c316c35ad0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55c316c35948 'seconds_type'
|         `-TypedefType 0x55c31689a8f0 'int32_t' sugar
|           |-Typedef 0x55c3167ae328 'int32_t'
|           `-TypedefType 0x55c316787510 '__int32_t' sugar
|             |-Typedef 0x55c316787128 '__int32_t'
|             `-BuiltinType 0x55c316745580 'int'
|-CXXConversionDecl 0x55c316c38b58 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55c316c38c28 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55c316c47458 <col:37, line:231:5>
|   `-ReturnStmt 0x55c316c47448 <line:227:9, col:23>
|     `-BinaryOperator 0x55c316c47428 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55c316c473f8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55c316c473a8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55c316c3f928
|       |   `-MemberExpr 0x55c316c47378 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55c316c408d8
|       |     `-CXXThisExpr 0x55c316c47368 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55c316c47410 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55c316c473d8 <col:23> 'int' 0
|-CXXMethodDecl 0x55c316c38ce8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55c316c38da8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c38e68 <line:235:5, col:28> col:21 used msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c38f28 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c38fe8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55c316c39158 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55c316c39098 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55c316c392a0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55c316c39210 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c39368 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55c316c39408 <col:54> "" ""
|-CXXMethodDecl 0x55c316c39498 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55c316c39538 <col:54> "" ""
|-CXXMethodDecl 0x55c316c395c8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55c316c39668 <col:54> "" ""
|-CXXMethodDecl 0x55c316c39768 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55c316c39838 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55c316c39968 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55c316c39a60 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55c316c39b98 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55c316c47670 <col:39, line:271:5>
|   `-ReturnStmt 0x55c316c47660 <line:267:9, col:61>
|     `-CallExpr 0x55c316c47600 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55c316c475e8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c316c47470 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55c316c40c08 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55c316c47630 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55c316c474d0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55c316c3f928
|       |   `-MemberExpr 0x55c316c474a0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55c316c408d8
|       |     `-CXXThisExpr 0x55c316c47490 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55c316c47648 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55c316c47570 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55c316c47540 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55c316c47500 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55c316c47558 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55c316c47520 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c360a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c39c58 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55c316c47830 <col:39, line:279:5>
|   `-ReturnStmt 0x55c316c47820 <line:275:9, col:61>
|     `-CallExpr 0x55c316c477c0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55c316c477a8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c316c47688 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55c316c40c08 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55c316c477f0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55c316c476e8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55c316c3f928
|       |   `-MemberExpr 0x55c316c476b8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55c316c408d8
|       |     `-CXXThisExpr 0x55c316c476a8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55c316c47808 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55c316c47788 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55c316c47758 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55c316c47718 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55c316c47770 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55c316c47738 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35f80 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c39d18 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55c316c479c8 <col:39, line:287:5>
|   `-ReturnStmt 0x55c316c479b8 <line:283:9, col:53>
|     `-BinaryOperator 0x55c316c47998 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55c316c47968 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55c316c47888 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55c316c3f928
|       |   `-MemberExpr 0x55c316c47858 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55c316c408d8
|       |     `-CXXThisExpr 0x55c316c47848 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55c316c47980 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55c316c47948 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55c316c47928 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55c316c478f8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55c316c478b8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35dd0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55c316c47910 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55c316c478d8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c39e08 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55c316c48c60 <col:40, line:293:5>
|   |-DeclStmt 0x55c316c47b10 <line:291:9, col:48>
|   | `-VarDecl 0x55c316c479f0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55c316c47af0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55c316c47a98 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55c316c47a68 <col:22> '<bound member function type>' ->subsec 0x55c316c38da8
|   |     |   `-CXXThisExpr 0x55c316c47a58 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55c316c47ad8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55c316c47ab8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36200 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55c316c48c50 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55c316c48c38 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55c316c48c08 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316c48bf0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55c316c48bd0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55c316c48ba0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55c316c48938 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55c316c48920 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55c316c47b28 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55c316c479f0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55c316c48b40 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55c316c48b28 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55c316c48af8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55c316c48950 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55c316c488c0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55c316c488a8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55c316c48858 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55c316c356d8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55c316c487f8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55c316c47b58 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55c316c47b48 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55c316c48840 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55c316c48828 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55c316c48018 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55c316c47b80 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55c316c47c10 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55c316c47be0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55c316c47ba0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36200 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55c316c47bf8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55c316c47bc0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55c316c479f0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55c316c48b70 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55c316c48908 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55c316c488f8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55c316c39ec8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55c316c491b8 <col:40, line:302:5>
|   |-DeclStmt 0x55c316c48db0 <line:297:9, col:48>
|   | `-VarDecl 0x55c316c48c90 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55c316c48d90 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55c316c48d38 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55c316c48d08 <col:22> '<bound member function type>' ->subsec 0x55c316c38da8
|   |     |   `-CXXThisExpr 0x55c316c48cf8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55c316c48d78 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55c316c48d58 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c362d0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55c316c491a8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55c316c49190 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55c316c49160 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316c49148 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55c316c49128 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55c316c490f8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55c316c49020 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55c316c49008 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55c316c48dc8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55c316c48c90 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55c316c49098 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55c316c49080 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55c316c49050 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55c316c49038 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55c316c48fa8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55c316c48f90 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55c316c48f70 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55c316c356d8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55c316c48f10 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55c316c48df8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55c316c48de8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55c316c48f58 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55c316c48f40 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55c316c48ed0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55c316c48e20 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55c316c48eb0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55c316c48e80 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55c316c48e40 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c362d0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55c316c48e98 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55c316c48e60 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55c316c48c90 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55c316c490c8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55c316c48ff0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55c316c48fe0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55c316c39f88 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55c316c49240 <col:40, line:306:5>
|   `-ReturnStmt 0x55c316c49230 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55c316c49200 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55c316c491e8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55c316c491d8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55c316c3a128 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55c316c3a038 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55c316c3a2f8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55c316c3a200 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55c316c3a3e8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55c316c3a558 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55c316c3a498 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55c316c49388 <col:56, line:320:5>
|   `-ReturnStmt 0x55c316c49378 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55c316c49360 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55c316c49330 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316c49318 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55c316c492d8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55c316c492a8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55c316c49268 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55c316c3a498 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55c316c492c0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55c316c49288 <col:31> 'int' 0
|-CXXMethodDecl 0x55c316c3a798 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3a610 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3a688 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c49558 <col:72, line:326:5>
|   `-ReturnStmt 0x55c316c49548 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55c316c49530 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55c316c49500 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316c494e8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55c316c494a8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55c316c49490 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55c316c493b0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55c316c3a610 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55c316c49450 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55c316c49438 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c316c493d0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55c316c3f080 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55c316c49478 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55c316c493f0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3a688 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c3a948 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55c316c3a858 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55c316c49c20 <col:56, line:337:5>
|   |-DeclStmt 0x55c316c49858 <line:329:9, col:51>
|   | `-VarDecl 0x55c316c49580 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55c316c49840 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55c316c49810 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55c316c497f8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55c316c497e0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55c316c497b0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55c316c49798 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55c316c49780 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55c316c49670 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55c316c49a10 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55c316c498c0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55c316c3f928
|   | | `-MemberExpr 0x55c316c49890 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55c316c408d8
|   | |   `-DeclRefExpr 0x55c316c49870 <col:9> 'Timestamp' lvalue Var 0x55c316c49580 't' 'Timestamp'
|   | `-BinaryOperator 0x55c316c499f0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55c316c499c0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c316c498f0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55c316c3a858 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55c316c499d8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55c316c499a0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55c316c49980 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55c316c49950 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55c316c49910 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55c316c49968 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55c316c49930 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c360a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55c316c49c08 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55c316c49bd8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55c316c49bc0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55c316c49ba0 <col:16> 'Timestamp' lvalue Var 0x55c316c49580 't' 'Timestamp'
|-CXXMethodDecl 0x55c316c3ab10 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3aa00 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3aa78 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c49dd8 <col:72, line:343:5>
|   `-ReturnStmt 0x55c316c49dc8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55c316c49db0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55c316c49d80 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316c49d68 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55c316c49d28 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55c316c49d10 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55c316c49c58 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55c316c3aa00 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55c316c49cd0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55c316c49cb8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c316c49c78 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55c316c3f1c8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55c316c49cf8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55c316c49c98 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3aa78 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c3ac60 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55c316c3abd0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55c316c4a220 <col:56, line:354:5>
|   |-DeclStmt 0x55c316c49fc8 <line:346:9, col:51>
|   | `-VarDecl 0x55c316c49e00 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55c316c49fb0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55c316c49f80 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55c316c49f68 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55c316c49f50 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55c316c49f20 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55c316c49f08 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55c316c49ef0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55c316c49ec0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55c316c4a180 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55c316c4a030 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55c316c3f928
|   | | `-MemberExpr 0x55c316c4a000 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55c316c408d8
|   | |   `-DeclRefExpr 0x55c316c49fe0 <col:9> 'Timestamp' lvalue Var 0x55c316c49e00 't' 'Timestamp'
|   | `-BinaryOperator 0x55c316c4a160 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55c316c4a130 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c316c4a060 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55c316c3abd0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55c316c4a148 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55c316c4a110 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55c316c4a0f0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55c316c4a0c0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55c316c4a080 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55c316c4a0d8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55c316c4a0a0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35f80 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55c316c4a208 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55c316c4a1d8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55c316c4a1c0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55c316c4a1a0 <col:16> 'Timestamp' lvalue Var 0x55c316c49e00 't' 'Timestamp'
|-CXXMethodDecl 0x55c316c3ae28 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3ad18 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3ad90 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c4a3d8 <col:72, line:360:5>
|   `-ReturnStmt 0x55c316c4a3c8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55c316c4a3b0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55c316c4a380 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316c4a368 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55c316c4a328 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55c316c4a310 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55c316c4a258 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55c316c3ad18 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55c316c4a2d0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55c316c4a2b8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55c316c4a278 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55c316c3f310 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55c316c4a2f8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55c316c4a298 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3ad90 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c3af78 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55c316c3aee8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55c316c56d48 <col:56, line:371:5>
|   |-DeclStmt 0x55c316c4a5c8 <line:363:9, col:51>
|   | `-VarDecl 0x55c316c4a400 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55c316c4a5b0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55c316c4a580 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55c316c4a568 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55c316c4a550 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55c316c4a520 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55c316c4a508 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55c316c4a4f0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55c316c4a4c0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55c316c56ca8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55c316c4a630 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55c316c3f928
|   | | `-MemberExpr 0x55c316c4a600 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55c316c408d8
|   | |   `-DeclRefExpr 0x55c316c4a5e0 <col:9> 'Timestamp' lvalue Var 0x55c316c4a400 't' 'Timestamp'
|   | `-CallExpr 0x55c316c56c48 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55c316c56c30 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55c316c4a660 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55c316c40c08 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55c316c56c78 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55c316c4a680 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55c316c3aee8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55c316c56c90 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55c316c56c10 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55c316c56be0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55c316c4a6a0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35dd0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55c316c56bf8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55c316c4a6c0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55c316c56d30 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55c316c56d00 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55c316c56ce8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55c316c56cc8 <col:16> 'Timestamp' lvalue Var 0x55c316c4a400 't' 'Timestamp'
|-CXXMethodDecl 0x55c316c3b068 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55c316c56e88 <col:39, line:377:5>
|   `-ReturnStmt 0x55c316c56e78 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55c316c56e60 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55c316c56e30 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55c316c56e18 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55c316c56dd8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55c316c56d80 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55c316c56dc0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55c316c56da0 <col:29> 'int' 1
|-CXXMethodDecl 0x55c316c3b128 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55c316c56f68 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55c316c56f20 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55c316c56eb0 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c56ea0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55c316c56ee0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55c316c56f50 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55c316c56f00 <col:19> 'int' 0
|-CXXMethodDecl 0x55c316c3b328 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55c316c3b1d8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3b250 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55c316c42500 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55c316c424e0 <col:60> 'int' 0
| `-CompoundStmt 0x55c316c57160 <col:63, line:395:5>
|   `-BinaryOperator 0x55c316c57140 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55c316c56fc0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55c316c3f928
|     | `-MemberExpr 0x55c316c56f90 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55c316c408d8
|     |   `-CXXThisExpr 0x55c316c56f80 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55c316c57120 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55c316c570b0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55c316c57050 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55c316c57038 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55c316c57020 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55c316c56ff0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55c316c3b1d8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55c316c57098 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55c316c57078 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55c316c57108 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55c316c570f0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55c316c570d0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3b250 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c3b4f8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55c316c3b3e8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3b460 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c572b8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55c316c57270 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55c316c57188 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c57178 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55c316c572a0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316c571b8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55c316c3b3e8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55c316c57230 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55c316c57218 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c316c571d8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55c316c3f1c8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55c316c57258 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55c316c571f8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3b460 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c3b6c8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55c316c3b5b8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3b630 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c57410 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55c316c573c8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55c316c572e0 <col:9> '<bound member function type>' ->assign 0x55c316c3b328
|     | `-CXXThisExpr 0x55c316c572d0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55c316c573f8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55c316c57310 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55c316c3b5b8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55c316c57388 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55c316c57370 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c316c57330 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55c316c3f310 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55c316c573b0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55c316c57350 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3b630 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c3b898 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55c316c3b788 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3b800 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55c316c42538 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55c316c42518 <col:57> 'int' 0
| `-DeprecatedAttr 0x55c316c3b948 <col:75> "" ""
|-CXXMethodDecl 0x55c316c3bad8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55c316c3b9c8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3ba40 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c316c3bb88 <col:74> "" ""
|-CXXMethodDecl 0x55c316c3bd18 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55c316c3bc08 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55c316c3bc80 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55c316c3bdc8 <col:74> "" ""
|-CXXMethodDecl 0x55c316c3be58 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55c316c3bef8 <col:42> "" ""
|-CXXMethodDecl 0x55c316c3e730 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55c316c3e610 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55c316c3e690 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55c316c3e800 <line:432:5, col:33> col:29 used now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55c316c3e8c0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55c316c3e960 <col:20>
| `-OptimizeNoneAttr 0x55c316c3e9b8 <col:30>
|-CXXMethodDecl 0x55c316c3ea00 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55c316c3eac0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55c316c3eb80 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55c316c3ec40 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55c316c3ed00 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55c316c3edc0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55c316c3ee80 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55c316c3ef40 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55c316c3f080 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3eff0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c57558 <col:58, line:512:5>
|   `-ReturnStmt 0x55c316c57548 <line:511:9, col:53>
|     `-BinaryOperator 0x55c316c57528 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55c316c574f8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55c316c57428 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3eff0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55c316c57510 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55c316c574d8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55c316c574b8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55c316c57488 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55c316c57448 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55c316c574a0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55c316c57468 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c360a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c3f1c8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3f138 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c576a0 <col:58, line:516:5>
|   `-ReturnStmt 0x55c316c57690 <line:515:9, col:53>
|     `-BinaryOperator 0x55c316c57670 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55c316c57640 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55c316c57570 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3f138 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55c316c57658 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55c316c57620 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55c316c57600 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55c316c575d0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55c316c57590 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55c316c575e8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55c316c575b0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35f80 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c3f310 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3f280 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c577e8 <col:58, line:520:5>
|   `-ReturnStmt 0x55c316c577d8 <line:519:9, col:53>
|     `-BinaryOperator 0x55c316c577b8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55c316c57788 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55c316c576b8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3f280 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55c316c577a0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55c316c57768 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55c316c57748 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55c316c57718 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55c316c576d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35dd0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55c316c57730 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55c316c576f8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c3f458 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3f3c8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c57930 <col:60, line:524:5>
|   `-ReturnStmt 0x55c316c57920 <line:523:9, col:55>
|     `-BinaryOperator 0x55c316c57900 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55c316c578d0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55c316c57800 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3f3c8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55c316c578e8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55c316c578b0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55c316c57890 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55c316c57860 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55c316c57820 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55c316c57878 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55c316c57840 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c360a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c3f5a0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3f510 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c57a78 <col:60, line:528:5>
|   `-ReturnStmt 0x55c316c57a68 <line:527:9, col:55>
|     `-BinaryOperator 0x55c316c57a48 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55c316c57a18 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55c316c57948 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3f510 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55c316c57a30 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55c316c579f8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55c316c579d8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55c316c579a8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55c316c57968 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55c316c579c0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55c316c57988 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35f80 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55c316c3f6e8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55c316c3f658 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c57bc0 <col:60, line:532:5>
|   `-ReturnStmt 0x55c316c57bb0 <line:531:9, col:55>
|     `-BinaryOperator 0x55c316c57b90 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55c316c57b60 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55c316c57a90 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c3f658 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55c316c57b78 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55c316c57b40 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55c316c57b20 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55c316c57af0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55c316c57ab0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c35dd0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55c316c57b08 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55c316c57ad0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55c316c36130 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55c316c3f790 prev 0x55c316c365d0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55c316c3f888 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55c316c3f928 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55c316c466f0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55c316c46ad8 <col:11>
| |-CXXConstructorDecl 0x55c316c467d0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c316c468b8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55c316c47220 <col:11>
| |-CXXConstructorDecl 0x55c316c46958 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c316c46a68 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55c316c48a78 <col:11>
| |-CXXDestructorDecl 0x55c316c47d88 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55c31694e718 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55c31694e828 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55c31694f0f0 <col:11>
| |   `-ReturnStmt 0x55c31694f0e0 <col:11>
| |     `-UnaryOperator 0x55c31694f0c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55c31694f0b8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55c31694e898 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55c31694e898
|   `-ParmVarDecl 0x55c31694e9a8 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x55c316c3f990 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55c316c3fa90 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55c316c3fc90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c3fa70 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55c316c3fa50 <col:21> 'int' 0
| |-EnumConstantDecl 0x55c316c3fb20 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55c316c3fca8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c3fb00 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55c316c3fae0 <col:23> 'int' 1
| |-EnumConstantDecl 0x55c316c3fbb0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55c316c3fcc0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55c316c3fb90 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55c316c3fb70 <col:23> 'int' 2
| `-EnumConstantDecl 0x55c316c3fc40 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55c316c3fcd8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55c316c3fc20 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55c316c3fc00 <col:27> 'int' 3
|-CXXMethodDecl 0x55c316c3fd18 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55c316c3fde0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55c316c3ffe8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55c316c3fe90 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55c316c3ff10 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55c316c42550 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55c316c401f8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55c316c400a8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55c316c40120 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55c316c402c8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55c316c40388 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55c316c404f8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55c316c40438 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55c316c405c0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55c316c40680 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55c316c40740 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55c316c40800 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55c316c408a0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55c316c408d8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55c316c40948 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55c316c57bd8 <col:27, line:684:5>
|-CXXMethodDecl 0x55c316c40a08 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55c316c57be8 <col:27, line:696:5>
|-CXXMethodDecl 0x55c316c40c08 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55c316c40ab8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55c316c40b30 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c57d70 <col:66, line:700:5>
|   `-ReturnStmt 0x55c316c57d60 <line:699:9, col:31>
|     `-CallExpr 0x55c316c57d00 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55c316c57ce8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c316c57c98 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55c316ac2fb8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55c316c57d30 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55c316c57c58 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55c316c40ab8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55c316c57d48 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55c316c57c78 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c40b30 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55c316c40f78 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55c316c40cc8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55c316c40d40 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55c316c40db8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55c316c40e30 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55c316c580c0 <col:64, line:707:5>
|   |-DeclStmt 0x55c316c57e00 <line:704:9, col:24>
|   | `-VarDecl 0x55c316c57d98 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55c316c58010 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55c316c57e18 <col:9> 'int32_t':'int' lvalue ParmVar 0x55c316c40d40 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55c316c57ff8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55c316c57f90 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55c316c57f78 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55c316c57ef8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55c316ac8288 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55c316c57fc8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55c316c57e98 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55c316c40db8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55c316c57fe0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55c316c57eb8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55c316c40e30 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55c316c57ed8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55c316c57d98 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55c316c580a0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55c316c58030 <col:9> 'int32_t':'int' lvalue ParmVar 0x55c316c40cc8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55c316c58088 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55c316c58070 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55c316c58050 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55c316c57d98 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55c316c41218 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55c316c41048 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55c316c410c0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55c316c41138 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55c316c414b8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55c316c412e0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55c316c41358 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55c316c413d0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55c316c41648 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55c316c41580 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55c316c41848 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55c316c41700 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55c316c41778 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55c316c41b18 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55c316c41a58 parent 0x55c316745488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55c316c41908 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55c316c41980 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55c316c41d38 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55c316c41c78 parent 0x55c316745488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55c316c41b68 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55c316c41be0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55c316c41f00 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55c316c41e48 parent 0x55c316745488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55c316c41d88 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55c316c42188 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55c316c420c8 parent 0x55c316745488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55c316c41f78 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55c316c41ff0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55c316c423a8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55c316c422e8 parent 0x55c316745488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55c316c421d8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55c316c42250 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55c316c47c30 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316c47d18 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c48788 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55c316c48740 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55c316c408d8
| |     `-DeclRefExpr 0x55c316c48720 <col:7> 'const Timestamp' lvalue ParmVar 0x55c316c47d18 '' 'const Timestamp &'
| `-CompoundStmt 0x55c316c487e8 <col:7>
|-CXXConstructorDecl 0x55c316c47e98 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316c47fa8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55c316c408d8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55c316c48a88 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55c316c48a30 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55c316c408d8
| |     `-CXXStaticCastExpr 0x55c316c48a00 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55c316c489d0 <col:7> 'Timestamp' lvalue ParmVar 0x55c316c47fa8 '' 'Timestamp &&'
| `-CompoundStmt 0x55c316c48ae8 <col:7>
|-CXXDestructorDecl 0x55c316c48058 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55c31694e568 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55c31694e678 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55c31694f168 <col:7>
|   |-CXXMemberCallExpr 0x55c31694f108 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55c31694f048 <col:7> '<bound member function type>' .operator= 0x55c31694e718
|   | | `-MemberExpr 0x55c31694ef58 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55c316c408d8
|   | |   `-CXXThisExpr 0x55c31694ef48 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55c31694f018 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55c316c408d8
|   |   `-DeclRefExpr 0x55c31694eff8 <col:7> 'const Timestamp' lvalue ParmVar 0x55c31694e678 '' 'const Timestamp &'
|   `-ReturnStmt 0x55c31694f158 <col:7>
|     `-UnaryOperator 0x55c31694f140 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55c31694f130 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55c31694ea18 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x55c31694ea18
  `-ParmVarDecl 0x55c31694eb28 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316aa3ed8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55c316aa3ff8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55c316aa40e0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55c316aa40c0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55c316aa4088 <col:22> 'int' 4
|-FieldDecl 0x55c316aa4188 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55c316aa4168 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55c316aa4130 <col:21> 'int' 4
|-FieldDecl 0x55c316aa41e8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55c316aa4248 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55c316aa42a8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55c316aa4308 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55c316aa4368 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55c316aa43c8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55c316aa4428 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55c316aa4498 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55c316aa4508 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316cc1d50 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x55c316df14a8 <line:167:18>
|-CXXRecordDecl 0x55c316df1568 prev 0x55c316cc1d50 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55c316df1678 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Vector<class IPAddress> >
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Vector<class IPAddress> * _ptr
        24 |   class Vector<class IPAddress> _slot
        24 |     class vector_memory<class sized_array_memory<4> > vm_
        24 |       vector_memory<class sized_array_memory<4> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c31689a488 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c31689a5a8 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x55c316aac640 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c316aac720 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x55c316aac720
| `-ParmVarDecl 0x55c316aac808 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x55c316aac8a8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x55c316aac8a8
| `-ParmVarDecl 0x55c316aac9b8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x55c316c496a0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55c316ab4800 prev 0x55c316aa6be8 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55c316ab48f8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55c316ab4988 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55c316ab4db0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55c316ab49c8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55c316ab4a48 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55c316ab4b80 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55c316ab4c30 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55c316ab5078 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55c316ab4e80 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55c316ab4ef8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55c316ab4f98 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c316ab9a18 <col:34> 'const ArgContext' lvalue Var 0x55c316aa6b80 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55c316ab9470 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55c316ab5140 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55c316ab5230 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55c316ab52a8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55c316ab9a38 <col:34> 'const ArgContext' lvalue Var 0x55c316aa6b80 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55c316ab9c18 <col:46, line:375:5>
|   `-ReturnStmt 0x55c316ab9c08 <line:374:2, col:63>
|     `-CallExpr 0x55c316ab9bd0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55c316ab9bb8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55c316ab9b70 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55c316ab5078 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55c316ab9ad0 <col:15> 'const String' lvalue ParmVar 0x55c316ab5140 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55c316ab9b20 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55c316ab9af0 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55c316ab5230 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55c316ab9b50 <col:59> 'const ArgContext' lvalue ParmVar 0x55c316ab52a8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55c316ab9948 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55c316ab9538 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55c316ab97b0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55c316ab9828 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55c316ab9a58 <col:34> 'const ArgContext' lvalue Var 0x55c316aa6b80 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x55c316df6678 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55c316df6750 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c316df6888 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x55c316df6888
| `-ParmVarDecl 0x55c316df6998 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x55c316df6a38 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55c316df6b48 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x55c316df77a0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316abad88 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x55c316abafe8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55c316df6588 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c316df6bb8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x55c316df6bb8
| `-ParmVarDecl 0x55c316df6cc8 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x55c316df6d68 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316df6e78 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55c316df77b0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c316df7780 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55c316df7750 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x55c316df7720 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x55c316df6e78 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x55c316df7820 <col:19>
`-CXXDestructorDecl 0x55c316df6f18 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<Vector<class IPAddress> > (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316abb160 <../dummy_inc/click/ipaddress.hh:400:1, col:73> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x55c316abb3b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55c316e057b8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55c316e058b8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Vector<IPAddress> > &)' inline default trivial noexcept-unevaluated 0x55c316e058b8
| `-ParmVarDecl 0x55c316e059c8 <col:19> col:19 'const DefaultArg<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x55c316e05a68 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Vector<IPAddress> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55c316e05b78 <col:19> col:19 used 'DefaultArg<Vector<IPAddress> > &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55c316e06470 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55c316e06450 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55c316e06420 <col:19> 'DefaultArg<Vector<IPAddress> >' xvalue static_cast<struct DefaultArg<Vector<class IPAddress> > &&> <NoOp>
| |       `-DeclRefExpr 0x55c316e063f0 <col:19> 'DefaultArg<Vector<IPAddress> >' lvalue ParmVar 0x55c316e05b78 '' 'DefaultArg<Vector<IPAddress> > &&'
| `-CompoundStmt 0x55c316e064e0 <col:19>
`-CXXDestructorDecl 0x55c316e05c18 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55c316e074d8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x55c316e078d8 prev 0x55c316e074d8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55c316e07b00 <line:852:9, line:854:9> line:852:9 used SlotT 'void (Vector<IPAddress> *)'
| |-ParmVarDecl 0x55c316e079d8 <col:15, col:18> col:18 used ptr 'Vector<IPAddress> *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55c316e08a48 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55c316e07c80 '_ptr' 'Vector<IPAddress> *'
| | `-ImplicitCastExpr 0x55c316e08a08 <line:853:20> 'Vector<IPAddress> *' <LValueToRValue>
| |   `-DeclRefExpr 0x55c316e089c8 <col:20> 'Vector<IPAddress> *' lvalue ParmVar 0x55c316e079d8 'ptr' 'Vector<IPAddress> *'
| |-CXXCtorInitializer Field 0x55c316e07ce0 '_slot' 'Vector<IPAddress>':'Vector<IPAddress>'
| | `-CXXConstructExpr 0x55c316e08aa8 <line:852:9> 'Vector<IPAddress>':'Vector<IPAddress>' 'void ()'
| `-CompoundStmt 0x55c316d5fed0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55c316e07bc0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55c316d3ae20 Slot::store 'void ()' ]
| `-CompoundStmt 0x55c316e09600 <col:22, line:857:9>
|   `-CallExpr 0x55c316e095d0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55c316e095b8 <col:13> 'void (*)(Vector<IPAddress> &, Vector<IPAddress> &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55c316e09538 <col:13> 'void (Vector<IPAddress> &, Vector<IPAddress> &)' lvalue Function 0x55c316e09068 'assign_consume' 'void (Vector<IPAddress> &, Vector<IPAddress> &)' (FunctionTemplate 0x55c316a5cbe8 'assign_consume')
|     |-UnaryOperator 0x55c316e08c38 <col:28, col:29> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55c316e08c20 <col:29> 'Vector<IPAddress> *' <LValueToRValue>
|     |   `-MemberExpr 0x55c316e08bf0 <col:29> 'Vector<IPAddress> *' lvalue ->_ptr 0x55c316e07c80
|     |     `-CXXThisExpr 0x55c316e08be0 <col:29> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|     `-MemberExpr 0x55c316e08c60 <col:35> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue ->_slot 0x55c316e07ce0
|       `-CXXThisExpr 0x55c316e08c50 <col:35> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|-FieldDecl 0x55c316e07c80 <line:858:9, col:12> col:12 referenced _ptr 'Vector<IPAddress> *'
|-FieldDecl 0x55c316e07ce0 <line:859:9, col:11> col:11 referenced _slot 'Vector<IPAddress>':'Vector<IPAddress>'
|-CXXConstructorDecl 0x55c316e07d58 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x55c316e07d58
| `-ParmVarDecl 0x55c316e07e68 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x55c316e07f08 <col:12> col:12 implicit SlotT 'void (Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x55c316e07f08
| `-ParmVarDecl 0x55c316e08018 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
|-CXXMethodDecl 0x55c316e080b8 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x55c316e080b8
| `-ParmVarDecl 0x55c316e081c8 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXMethodDecl 0x55c316e08238 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x55c316e08238
| `-ParmVarDecl 0x55c316e08348 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
`-CXXDestructorDecl 0x55c316e083d0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55c316d3ad20 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55c316e08b10 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>
