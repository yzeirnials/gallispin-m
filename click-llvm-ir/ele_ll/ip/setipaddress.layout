
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf7603738 prev 0x55faf75faed8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf7603830 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55faf76038c0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55faf7603938 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55faf76039f8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55faf7603ac0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55faf7603c38 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55faf7603b70 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55faf7603ce0 <col:24>
| `-OptimizeNoneAttr 0x55faf7603d38 <col:34>
|-CXXMethodDecl 0x55faf7603d80 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55faf7604038 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55faf7603e30 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55faf7603ea8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55faf7603f28 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55faf76040f0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55faf7604128 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55faf7604190 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55faf7604218 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55faf7604538 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55faf76042d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55faf7604348 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55faf76043c0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55faf7604440 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55faf7604650 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55faf760afb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55faf760afb8
| `-ParmVarDecl 0x55faf760b0c8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55faf760b168 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55faf760b168
| `-ParmVarDecl 0x55faf760b278 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55faf76c41a8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf75f6750 prev 0x55faf75f64d0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55faf75f6848 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55faf75f68d8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55faf75f6938 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55faf75f6a28 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55faf75f6b28 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55faf75f6cf8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55faf75f6ba8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55faf75f6c20 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55faf75f6e88 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55faf75f6dc0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55faf75f6f30 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55faf75f7068 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55faf75f6fa0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55faf75f7208 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55faf75f7148 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55faf75f73a8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55faf75f72e8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55faf75f7450 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55faf75f7550 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55faf75f7630 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75f7530 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55faf75f7510 <col:26> 'int' 1
| `-EnumConstantDecl 0x55faf75f75e0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55faf75f7648 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75f75c0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55faf75f75a0 <col:44> 'int' 2
|-CXXMethodDecl 0x55faf75f7790 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55faf75f7678 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55faf75f76f8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55faf75f78e8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55faf75f7858 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55faf75f7b28 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55faf75f79a8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55faf75f7a20 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55faf75f7bd8 <col:20>
| `-OptimizeNoneAttr 0x55faf75f7c30 <col:30>
|-CXXMethodDecl 0x55faf75f7d38 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55faf75f7c70 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55faf75f7de0 <col:20>
| `-OptimizeNoneAttr 0x55faf75f7e38 <col:30>
|-CXXMethodDecl 0x55faf75f7e88 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55faf75f7f50 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55faf75f8068 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55faf75f80f0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55faf75f8178 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55faf75f8200 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55faf75f8288 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55faf75f8318 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55faf75f83d8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55faf75f8460 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55faf75f84e8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55faf75f8570 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55faf75f85f8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55faf75f8680 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55faf75f8710 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55faf75f87d0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55faf75f8860 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55faf75f89b0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55faf75f8918 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55faf75f8b40 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55faf75f8a70 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55faf75f8df0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55faf75f8bf8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55faf75f8c78 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55faf75f8cf8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55faf75f8ea8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55faf75f8fb0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55faf75f9240 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75f8f90 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55faf75f8f70 <col:33> 'int' 0
| |-EnumConstantDecl 0x55faf75f9040 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55faf75f9258 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75f9020 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55faf75f9000 <col:32> 'int' 20
| |-EnumConstantDecl 0x55faf75f90d0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55faf75f9270 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75f90b0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55faf75f9090 <col:38> 'int' 90
| |-EnumConstantDecl 0x55faf75f9160 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55faf75f9288 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75f9140 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55faf75f9120 <col:35> 'int' 100
| `-EnumConstantDecl 0x55faf75f91f0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55faf75f92a0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75f91d0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55faf75f91b0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55faf75f92e0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55faf75f9720 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55faf75f9590 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55faf75f9608 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55faf75f97f0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55faf75f9970 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55faf75f98a0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55faf75f9b78 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55faf75f9a28 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55faf75f9aa0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55faf75f9c78 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55faf75f9d18 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55faf75f9de0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55faf75f9e70 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55faf75fa0a0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75f9e50 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55faf75f9e30 <col:36> 'int' EnumConstant 0x55faf75f9de0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55faf75f9ec0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55faf75f9f10 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55faf75f9f60 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55faf75f9fb0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55faf75fa000 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55faf75fa050 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55faf75fa188 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55faf75fa0c8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55faf75fa250 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55faf75fa310 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55faf75fa3d0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55faf75fa490 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55faf75fa5a8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55faf75fa670 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55faf75fa7f0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55faf75fa720 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55faf75fa918 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55faf75fab18 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55faf75fa9c8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55faf75faa48 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55faf7607458 <col:54, line:127:5>
|   |-ParenExpr 0x55faf7607308 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55faf76072d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55faf7606fc8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55faf7606fa0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55faf7606f88 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55faf7606f70 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55faf7606f40 <col:31> 'Router *' lvalue ->_router 0x55faf7604e20
|   |   |         `-CXXThisExpr 0x55faf7606f30 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55faf7607028 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf7607008 <col:48> 'int' 0
|   |   `-CallExpr 0x55faf7607238 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55faf7607220 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf7607200 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf7607278 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf7607098 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55faf7607290 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf76070b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55faf76072a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf76070f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55faf76072c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf76071e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf76071d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf7607188 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55faf76073a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55faf7607338 <col:9> 'Router *' lvalue ->_router 0x55faf7604e20
|   | | `-CXXThisExpr 0x55faf7607328 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55faf7607388 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55faf7607368 <col:19> 'Router *' lvalue ParmVar 0x55faf75fa9c8 'r' 'Router *'
|   `-BinaryOperator 0x55faf7607438 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55faf76073d0 <col:9> 'int' lvalue ->_eindex 0x55faf7604e88
|     | `-CXXThisExpr 0x55faf76073c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55faf7607420 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55faf7607400 <col:19> 'int' lvalue ParmVar 0x55faf75faa48 'eindex' 'int'
|-CXXMethodDecl 0x55faf75faca0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55faf75fabd8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55faf75fad70 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55faf75fae38 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55faf75faed8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55faf75fb128 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55faf75fafa0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55faf75fb020 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55faf75fb1d8 <col:20>
| `-OptimizeNoneAttr 0x55faf75fb230 <col:30>
|-CXXMethodDecl 0x55faf75fb338 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55faf75fb270 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55faf75fb3e0 <col:20>
| `-OptimizeNoneAttr 0x55faf75fb438 <col:30>
|-CXXMethodDecl 0x55faf75fb508 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55faf75fb478 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55faf75fb5b0 <col:20>
| `-OptimizeNoneAttr 0x55faf75fb608 <col:30>
|-CXXMethodDecl 0x55faf75fb798 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55faf75fb640 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55faf75fb6c0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55faf75fb928 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55faf75fb860 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55faf75fba78 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55faf75fb9e8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55faf75fbbc8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55faf75fbb38 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55faf75fbd18 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55faf75fbc88 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55faf75fbfd8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55faf75fbdd0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55faf75fbe50 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55faf75fbef8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55faf75fc0b0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55faf75fc170 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55faf75fc440 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55faf75fc2f0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55faf75fc368 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55faf75fc568 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55faf75fc740 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55faf75fc620 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55faf75fc6a0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55faf75fc928 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55faf75fc808 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55faf75fc888 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55faf75fcc98 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55faf75fc9e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55faf75fca60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55faf75fcae0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55faf7606a40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55faf7606a20 <col:106> 'int' 0
| `-ParmVarDecl 0x55faf75fcb58 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55faf7606a78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55faf7606a58 <col:126> 'int' 0
|-CXXMethodDecl 0x55faf75fd038 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55faf75fcd68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55faf75fce00 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55faf75fce80 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55faf75fcef8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55faf7606ab0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55faf7606a90 <col:114> 'int' 0
|-CXXMethodDecl 0x55faf75fd3c8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55faf75fd110 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55faf75fd188 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55faf75fd208 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55faf7606ac8 <col:96> 'int' 0
| `-ParmVarDecl 0x55faf75fd280 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55faf7606b08 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55faf7606ae8 <col:116> 'int' 0
|-CXXMethodDecl 0x55faf75fd748 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55faf75fd498 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55faf75fd510 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf75fd590 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55faf7606b40 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55faf7606b20 <col:109> 'int' 0
| `-ParmVarDecl 0x55faf75fd608 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55faf7606b78 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55faf7606b58 <col:129> 'int' 0
|-CXXMethodDecl 0x55faf75fdac8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55faf75fd818 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55faf75fd890 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf75fd910 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55faf75fd988 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55faf7606bb0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55faf7606b90 <col:117> 'int' 0
|-CXXMethodDecl 0x55faf75fde58 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55faf75fdba0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf75fdc18 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf75fdc98 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55faf7606bc8 <col:99> 'int' 0
| `-ParmVarDecl 0x55faf75fdd10 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55faf7606c08 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55faf7606be8 <col:119> 'int' 0
|-CXXMethodDecl 0x55faf75fe278 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55faf75fdf28 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55faf75fdfa8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55faf75fe020 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf75fe0a0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55faf7606c40 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55faf7606c20 <col:108> 'int' 0
| `-ParmVarDecl 0x55faf75fe120 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55faf7606c78 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55faf7606c58 <col:141> 'int' 0
|-CXXMethodDecl 0x55faf75fe698 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55faf75fe350 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55faf75fe3d0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55faf75fe448 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf75fe4c8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55faf75fe548 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55faf7606c90 <col:121> 'int' 0
|-CXXMethodDecl 0x55faf75feac8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55faf75fe778 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55faf75fe7f8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55faf75fe870 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf75fe8f0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55faf7606cb0 <col:98> 'int' 0
| `-ParmVarDecl 0x55faf75fe970 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55faf7606cd0 <col:123> 'int' 0
|-CXXMethodDecl 0x55faf75fed90 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55faf75feba0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55faf75fec20 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55faf75feca0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55faf7606cf0 <col:80> 'int' 0
|-EnumDecl 0x55faf75fee48 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55faf75fef50 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55faf75ff1e0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75fef30 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55faf75fef10 <col:42> 'int' 1
| |-EnumConstantDecl 0x55faf75fefe0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55faf75ff1f8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75fefc0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55faf75fefa0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55faf75ff070 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55faf75ff210 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75ff050 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55faf75ff030 <col:44> 'int' 4
| |-EnumConstantDecl 0x55faf75ff100 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55faf75ff228 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75ff0e0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55faf75ff0c0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55faf75ff190 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55faf75ff240 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75ff170 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55faf75ff150 <col:34> 'int' 6
|-CXXMethodDecl 0x55faf75ff4f8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55faf75ff268 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55faf75ff308 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55faf75ff388 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55faf75ff400 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55faf7606da8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55faf7606d90 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55faf7606d78 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55faf7606d58 <col:98, col:105> 'String' (CXXTemporary 0x55faf7606d58)
|           `-CXXTemporaryObjectExpr 0x55faf7606d20 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55faf75ff798 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55faf75ff5c8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55faf75ff640 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55faf75ff6b8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55faf7606e58 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55faf7606e40 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55faf7606e28 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55faf7606e08 <col:94, col:101> 'String' (CXXTemporary 0x55faf7606e08)
| |         `-CXXTemporaryObjectExpr 0x55faf7606dd0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55faf7607640 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55faf76075b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55faf7607588 <col:9> '<bound member function type>' ->add_task_handlers 0x55faf75ff4f8
|     | `-CXXThisExpr 0x55faf7607578 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55faf76075f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55faf76074f8 <col:27> 'Task *' lvalue ParmVar 0x55faf75ff5c8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55faf7607610 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55faf7607518 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55faf75ff640 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55faf7607628 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55faf7607538 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55faf75ff190 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55faf7607558 <col:62> 'const String' lvalue ParmVar 0x55faf75ff6b8 'prefix' 'const String &'
|-CXXMethodDecl 0x55faf75ff9a8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55faf75ff860 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55faf75ff8d8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55faf7606f08 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55faf7606ef0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55faf7606ed8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55faf7606eb8 <col:70, col:77> 'String' (CXXTemporary 0x55faf7606eb8)
| |         `-CXXTemporaryObjectExpr 0x55faf7606e80 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55faf7607818 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55faf7607790 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55faf7607760 <col:9> '<bound member function type>' ->add_task_handlers 0x55faf75ff4f8
|     | `-CXXThisExpr 0x55faf7607750 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55faf76077d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55faf76076d0 <col:27> 'Task *' lvalue ParmVar 0x55faf75ff860 'task' 'Task *'
|     |-ImplicitCastExpr 0x55faf76077e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55faf76076f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55faf7607800 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55faf7607710 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55faf75ff190 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55faf7607730 <col:57> 'const String' lvalue ParmVar 0x55faf75ff8d8 'prefix' 'const String &'
|-CXXMethodDecl 0x55faf75ffc88 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55faf75ffa70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf75ffaf0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf75ffb68 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55faf75fff38 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55faf75ffd58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf75ffdd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf75ffe58 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55faf7600228 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55faf7600008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7600088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf7600100 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55faf76004d8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55faf76002f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7600378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf76003f8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55faf7600788 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55faf76005a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7600628 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf76006a8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55faf7600a38 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55faf7600858 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf76008d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf7600950 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55faf7600ce8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55faf7600b08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7600b88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf7600c08 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55faf7600ff8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55faf7600e10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7600e90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf7600f10 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55faf76012d8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55faf76010c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7601148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf76011f0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55faf76015b8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55faf76013a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7601428 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf76014d0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55faf7601820 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55faf7601688 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55faf7601708 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55faf7601780 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55faf7601ac8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55faf76018f0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55faf7601970 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55faf76019e8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55faf7601d78 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55faf7601b98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7601c18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf7601c98 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55faf7602028 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55faf7601e48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7601ec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf7601f40 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55faf76022d8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55faf76020f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7602178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf76021f0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55faf76025a8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55faf76023a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf7602428 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55faf76024c8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55faf76028d8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55faf7602678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55faf76026f8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55faf7602770 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55faf76027e8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55faf7606f20 <col:93> 'bool' false
|-CXXMethodDecl 0x55faf7602ac0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55faf76029a8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55faf7602a28 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55faf7602c98 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55faf7602b80 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55faf7602c00 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55faf7602f78 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55faf7602d58 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55faf7602dd0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55faf7602e50 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55faf7602ec8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55faf7603268 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55faf7603048 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55faf76030c0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55faf7603140 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55faf76031b8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55faf76034a0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55faf7603340 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55faf76033c0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55faf7603688 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55faf7603568 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55faf76035e8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55faf7603738 prev 0x55faf75faed8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55faf7603830 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55faf76038c0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55faf7603938 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55faf76039f8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55faf7603ac0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55faf7603c38 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55faf7603b70 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55faf7603ce0 <col:24>
| | `-OptimizeNoneAttr 0x55faf7603d38 <col:34>
| |-CXXMethodDecl 0x55faf7603d80 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55faf7604038 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55faf7603e30 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55faf7603ea8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55faf7603f28 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55faf76040f0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55faf7604128 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55faf7604190 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55faf7604218 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55faf7604538 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55faf76042d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55faf7604348 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55faf76043c0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55faf7604440 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55faf7604650 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55faf760afb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55faf760afb8
| | `-ParmVarDecl 0x55faf760b0c8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55faf760b168 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55faf760b168
| | `-ParmVarDecl 0x55faf760b278 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55faf76c41a8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55faf76046c8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55faf7604768 <col:38> "" ""
|-CXXMethodDecl 0x55faf76047f8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55faf7604898 <col:44> "" ""
|-AccessSpecDecl 0x55faf7604908 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55faf7604930 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55faf7604a30 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55faf7604a80 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf7604a10 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55faf76049f0 <col:27> 'int' 4
|-FieldDecl 0x55faf7604b38 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55faf7604ce8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55faf7604da0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55faf7604e20 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55faf7604e88 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55faf7604fd8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55faf7604f18 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55faf7605188 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55faf7605098 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55faf7605368 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55faf7605248 <col:20> col:23 'int'
| `-ParmVarDecl 0x55faf76052c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55faf7605610 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55faf7605430 <col:23> col:26 'int'
| |-ParmVarDecl 0x55faf76054b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55faf7605528 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55faf76056c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55faf7605790 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55faf76057e0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55faf7605830 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55faf7605a10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55faf76058c0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55faf7605938 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55faf7605cb8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55faf7605ad8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55faf7605b58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55faf7605bd0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55faf7605ed8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55faf7605d88 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55faf7605e08 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55faf7606210 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55faf7605f98 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55faf7606018 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55faf7606090 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55faf7606110 <col:57> col:60 'int'
|-CXXMethodDecl 0x55faf76063f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55faf76062e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55faf7606360 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55faf7606548 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55faf76064b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55faf76068c8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55faf7606608 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55faf7606688 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55faf7606700 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55faf7606780 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55faf76069e0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetIPAddress
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class IPAddress _ip
       108 |     uint32_t _addr
       112 |   int _anno
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf73f3360 prev 0x55faf73593a8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf73f3458 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55faf73f34e8 <col:19, col:25> col:19 public
|-TypedefDecl 0x55faf73f3520 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55faf71e6ca0 'uninitialized_type'
|   `-CXXRecord 0x55faf71e6c08 'uninitialized_type'
|-CXXConstructorDecl 0x55faf73f35e0 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55faf73f7d40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55faf73f7de8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55faf73f7da8 <col:10> 'int' 0
| `-CompoundStmt 0x55faf73f7e30 <col:13, line:22:5>
|-CXXConstructorDecl 0x55faf73f3730 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55faf73f36a0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55faf73f7d40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55faf73f7e80 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55faf73f7e40 <col:10> 'unsigned int' lvalue ParmVar 0x55faf73f36a0 'x' 'unsigned int'
| `-CompoundStmt 0x55faf73f7ec8 <col:13, line:27:5>
|-CXXConstructorDecl 0x55faf73f3888 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55faf73f37f8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55faf73f7d40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55faf73f7f30 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55faf73f7f18 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55faf73f7ed8 <col:10> 'int' lvalue ParmVar 0x55faf73f37f8 'x' 'int'
| `-CompoundStmt 0x55faf73f7f78 <col:13, line:31:5>
|-CXXConstructorDecl 0x55faf73f39e0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55faf73f3950 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55faf73f7d40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55faf73f7fe0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55faf73f7fc8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55faf73f7f88 <col:10> 'unsigned long' lvalue ParmVar 0x55faf73f3950 'x' 'unsigned long'
| `-CompoundStmt 0x55faf73f8028 <col:13, line:35:5>
|-CXXConstructorDecl 0x55faf73f3b38 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55faf73f3aa8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55faf73f7d40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55faf73f8090 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55faf73f8078 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55faf73f8038 <col:10> 'long' lvalue ParmVar 0x55faf73f3aa8 'x' 'long'
| `-CompoundStmt 0x55faf73f80d8 <col:13, line:39:5>
|-CXXConstructorDecl 0x55faf73f3cf8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55faf73f3c08 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55faf73f7d40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55faf73f8158 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55faf73f8108 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55faf7328160
| |     `-DeclRefExpr 0x55faf73f80e8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55faf73f3c08 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55faf73f81a0 <col:20, line:44:5>
|-CXXConstructorDecl 0x55faf73f3e88 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55faf73f3dc0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55faf73f8308 <col:51, line:56:5>
|   `-BinaryOperator 0x55faf73f82e8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55faf73f81c0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55faf73f7d40
|     | `-CXXThisExpr 0x55faf73f81b0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55faf73f82d0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55faf73f82b8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55faf73f8298 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55faf73f8268 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55faf73f8250 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55faf73f81f0 <col:47> 'const unsigned char *' lvalue ParmVar 0x55faf73f3dc0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55faf73f3fd8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55faf73f3f48 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55faf73f4188 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55faf73f40c8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55faf73f8378 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55faf73f8350 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55faf73f8320 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55faf73f40c8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55faf73f4318 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55faf73f4250 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55faf73f4408 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55faf73f9338 <col:46, line:83:5>
|   `-ReturnStmt 0x55faf73f9328 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55faf73f9310 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55faf73f92e0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55faf73f9198 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55faf73f9080 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55faf73f8f68 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55faf73f83a0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55faf73f44f8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55faf73f93e8 <col:31, line:88:5>
|   `-ReturnStmt 0x55faf73f93d8 <line:87:2, col:10>
|     `-UnaryOperator 0x55faf73f93c0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55faf73f93a8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55faf73f9390 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55faf73f9360 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55faf73f7d40
|             `-CXXThisExpr 0x55faf73f9350 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55faf73f45b8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55faf73f9468 <col:34, line:93:5>
|   `-ReturnStmt 0x55faf73f9458 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55faf73f9440 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55faf73f9410 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55faf73f7d40
|         `-CXXThisExpr 0x55faf73f9400 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55faf73f4688 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55faf73f94e8 <col:38, line:101:5>
|   `-ReturnStmt 0x55faf73f94d8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55faf73f94c0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55faf73f9490 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55faf73f7d40
|         `-CXXThisExpr 0x55faf73f9480 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55faf73f4758 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55faf73f97b8 <col:38, line:108:5>
|   `-ReturnStmt 0x55faf73f97a8 <line:107:2, col:58>
|     `-BinaryOperator 0x55faf73f9788 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55faf73f96a0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55faf73f9680 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55faf73f9668 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55faf73f9510 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55faf73f7d40
|       |   |   `-CXXThisExpr 0x55faf73f9500 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55faf73f9640 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55faf73f9628 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55faf73f95a8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55faf7336698 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55faf73f9588 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55faf73f9760 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55faf73f9748 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55faf73f9728 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55faf7336698 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55faf73f9708 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55faf73f4818 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55faf73f9a28 <col:39, line:112:5>
|   `-ReturnStmt 0x55faf73f9a18 <line:111:2, col:56>
|     `-BinaryOperator 0x55faf73f99f8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55faf73f9910 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55faf73f98f0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55faf73f98d8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55faf73f97e0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55faf73f7d40
|       |   |   `-CXXThisExpr 0x55faf73f97d0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55faf73f98b0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55faf73f9898 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55faf73f9878 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55faf7336698 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55faf73f9858 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55faf73f99d0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55faf73f99b8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55faf73f9998 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55faf7336698 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55faf73f9978 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55faf73f4948 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55faf73f4a50 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55faf73f4b60 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55faf73f6c38 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55faf73f6cf8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf73f6dc0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55faf73f6fb8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55faf73f6e70 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55faf73f6ee8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55faf73f7138 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55faf73f7078 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55faf73f7280 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55faf73f71f0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55faf73f7428 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55faf73f7338 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55faf73f7570 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55faf73f74e0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55faf73f76b8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55faf73f7628 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55faf73f7780 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55faf73f7840 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55faf73f79b8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55faf73f78f0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55faf73f7a80 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55faf73f7b68 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55faf73f7c10 <col:51> "" ""
|-TypedefDecl 0x55faf73f7cb0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55faf7359440 'IPAddress'
|   `-CXXRecord 0x55faf73f3360 'IPAddress'
|-AccessSpecDecl 0x55faf73f7d08 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55faf73f7d40 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55faf73f83e8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55faf73f83e8
| `-ParmVarDecl 0x55faf73f84f8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55faf73f8598 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55faf73f86a8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55faf73f7d40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55faf73f9288 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55faf73f9240 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55faf73f7d40
| |     `-CXXStaticCastExpr 0x55faf73f9210 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55faf73f91e0 <col:7> 'IPAddress' lvalue ParmVar 0x55faf73f86a8 '' 'IPAddress &&'
| `-CompoundStmt 0x55faf73f92d0 <col:7>
`-CXXDestructorDecl 0x55faf73f8f98 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf760e128 <../elements/ip/setipaddress.hh:23:1, line:42:1> line:23:7 class SetIPAddress definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55faf760e288 <col:1, col:7> col:7 implicit referenced class SetIPAddress
|-FieldDecl 0x55faf760e328 <line:25:5, col:15> col:15 _ip 'IPAddress'
|-FieldDecl 0x55faf760e390 <line:26:5, col:9> col:9 _anno 'int'
|-AccessSpecDecl 0x55faf760e3e0 <line:28:3, col:9> col:3 public
|-CXXConstructorDecl 0x55faf760e470 <line:30:5, col:18> col:5 SetIPAddress 'void ()'
|-CXXDestructorDecl 0x55faf760e560 <line:31:5, col:19> col:5 ~SetIPAddress 'void ()' noexcept-unevaluated 0x55faf760e560
| `-Overrides: [ 0x55faf75f6a28 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55faf760e690 <line:33:5, col:61> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55faf75f7e88 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55faf760f158 <col:36, col:61>
|   `-ReturnStmt 0x55faf760f148 <col:38, col:45>
|     `-ImplicitCastExpr 0x55faf760f130 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55faf760f108 <col:45> 'const char [13]' lvalue "SetIPAddress"
|-CXXMethodDecl 0x55faf760e758 <line:34:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55faf75f7f50 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55faf760f1b8 <col:36, col:56>
|   `-ReturnStmt 0x55faf760f1a8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55faf760f190 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55faf760f170 <col:45> 'const char []' lvalue Var 0x55faf75f8200 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55faf760ea30 <line:36:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55faf75f9720 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55faf760e8e0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55faf760e958 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55faf760eb00 <line:37:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55faf75fc170 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55faf760f1f0 <col:39, col:54>
|   `-ReturnStmt 0x55faf760f1e0 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55faf760f1d0 <col:48> 'bool' true
|-CXXMethodDecl 0x55faf760ebc0 <line:38:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55faf75f97f0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55faf760ed00 <line:40:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55faf75f7068 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55faf760ec70 <col:27, col:34> col:35 'Packet *'
|-CXXConstructorDecl 0x55faf760edd8 <line:23:7> col:7 implicit SetIPAddress 'void (const SetIPAddress &)' inline default_delete noexcept-unevaluated 0x55faf760edd8
| `-ParmVarDecl 0x55faf760eee8 <col:7> col:7 'const SetIPAddress &'
`-CXXMethodDecl 0x55faf760ef88 <col:7> col:7 implicit operator= 'SetIPAddress &(const SetIPAddress &)' inline default_delete noexcept-unevaluated 0x55faf760ef88
  `-ParmVarDecl 0x55faf760f098 <col:7> col:7 'const SetIPAddress &'

Layout: <CGRecordLayout
  LLVMType:%class.SetIPAddress = type { %class.Element.base, %class.IPAddress, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.SetIPAddress.base = type { %class.Element.base, %class.IPAddress, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf73c6230 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55faf73c6348 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55faf73c63e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55faf73c6448 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55faf73c64a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55faf73c6558 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf73c6860 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf73c6978 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55faf73c6a20 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55faf73c6a88 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55faf73c6b18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55faf73ccbb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55faf73ccfe8 <col:12>
|-CXXConstructorDecl 0x55faf73cccb8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55faf73ccdc8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55faf73c6a20 'data' 'const char *'
| | `-ImplicitCastExpr 0x55faf73cf570 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55faf73cf540 <col:12> 'const char *const' lvalue .data 0x55faf73c6a20
| |     `-DeclRefExpr 0x55faf73cf520 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ccdc8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55faf73c6a88 'length' 'int'
| | `-ImplicitCastExpr 0x55faf73cf600 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55faf73cf5d0 <col:12> 'const int' lvalue .length 0x55faf73c6a88
| |     `-DeclRefExpr 0x55faf73cf5b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ccdc8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55faf73c6b18 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55faf73cf690 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55faf73cf660 <col:12> 'String::memo_t *const' lvalue .memo 0x55faf73c6b18
| |     `-DeclRefExpr 0x55faf73cf640 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ccdc8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55faf73cf6e8 <col:12>
|-CXXConstructorDecl 0x55faf73cce68 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55faf73cce68
| `-ParmVarDecl 0x55faf73ccf78 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55faf73d24d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55faf73ddee8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55faf73ddff8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55faf73de510 <col:12>
|   |-BinaryOperator 0x55faf73de328 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55faf73de2e0 <col:12> 'const char *' lvalue ->data 0x55faf73c6a20
|   | | `-CXXThisExpr 0x55faf73de2d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55faf73de310 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55faf73de2a0 <col:12> 'const char *const' lvalue .data 0x55faf73c6a20
|   |     `-DeclRefExpr 0x55faf73de280 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ddff8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55faf73de3f0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55faf73de3a8 <col:12> 'int' lvalue ->length 0x55faf73c6a88
|   | | `-CXXThisExpr 0x55faf73de398 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55faf73de3d8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55faf73de368 <col:12> 'const int' lvalue .length 0x55faf73c6a88
|   |     `-DeclRefExpr 0x55faf73de348 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ddff8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55faf73de4b8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55faf73de470 <col:12> 'String::memo_t *' lvalue ->memo 0x55faf73c6b18
|   | | `-CXXThisExpr 0x55faf73de460 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55faf73de4a0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55faf73de430 <col:12> 'String::memo_t *const' lvalue .memo 0x55faf73c6b18
|   |     `-DeclRefExpr 0x55faf73de410 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ddff8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55faf73de500 <col:12>
|     `-UnaryOperator 0x55faf73de4e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf73de4d8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55faf73de068 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55faf73de068
  `-ParmVarDecl 0x55faf73de178 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf73bd7a0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55faf73bd8b8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55faf73bd948 <col:16, col:22> col:16 public
|-TypedefDecl 0x55faf73bd988 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55faf7092fd0 'const char *'
|   `-QualType 0x55faf7092521 'const char' const
|     `-BuiltinType 0x55faf7092520 'char'
|-TypedefDecl 0x55faf73bda10 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55faf73bd9e0 'String::const_iterator' sugar
|   |-Typedef 0x55faf73bd988 'const_iterator'
|   `-PointerType 0x55faf7092fd0 'const char *'
|     `-QualType 0x55faf7092521 'const char' const
|       `-BuiltinType 0x55faf7092520 'char'
|-TypedefDecl 0x55faf73bdb80 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55faf73bdaf0 'int (String::*)() const'
|   |-RecordType 0x55faf73bd830 'String'
|   | `-CXXRecord 0x55faf73bd7a0 'String'
|   `-ParenType 0x55faf73bda90 'int () const' sugar
|     `-FunctionProtoType 0x55faf7392630 'int () const' const cdecl
|       `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf73bdbe8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55faf71e7230 'int64_t' sugar
|   |-Typedef 0x55faf70fb390 'int64_t'
|   `-TypedefType 0x55faf70d4630 '__int64_t' sugar
|     |-Typedef 0x55faf70d4208 '__int64_t'
|     `-BuiltinType 0x55faf70925a0 'long'
|-TypedefDecl 0x55faf73bdc50 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55faf71e7150 'uint64_t' sugar
|   |-Typedef 0x55faf70fb530 'uint64_t'
|   `-TypedefType 0x55faf70d46c0 '__uint64_t' sugar
|     |-Typedef 0x55faf70d4278 '__uint64_t'
|     `-BuiltinType 0x55faf7092640 'unsigned long'
|-TypedefDecl 0x55faf73bdce0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55faf73bdcb0 'String::intmax_t' sugar
|   |-Typedef 0x55faf73bdbe8 'intmax_t'
|   `-TypedefType 0x55faf71e7230 'int64_t' sugar
|     |-Typedef 0x55faf70fb390 'int64_t'
|     `-TypedefType 0x55faf70d4630 '__int64_t' sugar
|       |-Typedef 0x55faf70d4208 '__int64_t'
|       `-BuiltinType 0x55faf70925a0 'long'
|-TypedefDecl 0x55faf73bdd70 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55faf73bdd40 'String::uintmax_t' sugar
|   |-Typedef 0x55faf73bdc50 'uintmax_t'
|   `-TypedefType 0x55faf71e7150 'uint64_t' sugar
|     |-Typedef 0x55faf70fb530 'uint64_t'
|     `-TypedefType 0x55faf70d46c0 '__uint64_t' sugar
|       |-Typedef 0x55faf70d4278 '__uint64_t'
|       `-BuiltinType 0x55faf7092640 'unsigned long'
|-CXXConstructorDecl 0x55faf73bde30 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55faf73bdfd8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55faf73bdf18 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55faf73be188 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55faf73be0c8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55faf73be2e0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55faf73be250 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55faf73be4f8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55faf73be3a8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55faf73be428 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55faf73be718 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55faf73be5c8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55faf73be648 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55faf73be938 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55faf73be7e8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55faf73be868 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55faf73beb58 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55faf73bea08 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55faf73bea88 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55faf73bece8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55faf73bec20 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55faf73bee68 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55faf73beda8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55faf73beff8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55faf73bef30 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55faf73bf150 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55faf73bf0c0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55faf73bf2a8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55faf73bf218 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55faf73bf400 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55faf73bf370 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55faf73bf588 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55faf73bf4c8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55faf73bf718 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55faf73bf650 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55faf73bf8a8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55faf73bf7e0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55faf73bfa38 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55faf73bf970 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55faf73bfb30 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55faf73bfc58 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55faf73bfdd8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55faf73bfd10 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55faf73bff28 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55faf73bfe98 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55faf73bffe0 <col:63> "" ""
|-CXXMethodDecl 0x55faf73c0128 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55faf73c0068 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55faf73c0338 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55faf73c01e8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55faf73c0268 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55faf73c0558 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55faf73c0400 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55faf73c0480 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55faf73c0838 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55faf73c0618 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55faf73c0698 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55faf73cc680 <col:55> 'int' 10
| `-ParmVarDecl 0x55faf73c0710 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55faf73cc6a0 <col:76> 'bool' true
|-CXXMethodDecl 0x55faf73c0b18 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55faf73c0900 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55faf73c0980 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55faf73cc6b0 <col:56> 'int' 10
| `-ParmVarDecl 0x55faf73c09f8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55faf73cc6d0 <col:77> 'bool' true
|-CXXMethodDecl 0x55faf73c0c20 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55faf73c0ce8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55faf73c0db0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55faf73c0e50 <col:20>
| `-OptimizeNoneAttr 0x55faf73c0ea8 <col:30>
|-CXXConversionDecl 0x55faf73c0f98 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55faf73c1068 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55faf73c1128 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55faf73c1218 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55faf73c12d8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55faf73c1458 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55faf73c1390 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55faf73c15a8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55faf73c1518 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55faf73c1698 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55faf73c1758 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55faf73c19a8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55faf73c1810 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55faf73c1890 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55faf73c1c08 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55faf73c1a70 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55faf73c1af0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55faf73c1cd8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf73c1ee8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55faf73c1d90 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55faf73c1e10 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55faf73c2108 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55faf73c1fb0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55faf73c2030 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55faf73c2298 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55faf73c21d0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55faf73c2388 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55faf73c24f8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55faf73c2438 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55faf73c2708 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55faf73c25b8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55faf73c2638 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55faf73c2920 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55faf73c27c8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55faf73c2840 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55faf73c2ab0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55faf73c29e0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55faf73c2cd0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55faf73c2b70 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55faf73c2bf0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55faf73c2e20 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55faf73c2d90 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55faf73c2ff8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55faf73c2ee0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55faf73c2f60 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55faf73c3148 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55faf73c30b8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55faf73c3360 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55faf73c3200 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55faf73c3280 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55faf73cc6e0 <col:39> 'int' 0
|-CXXMethodDecl 0x55faf73c3580 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55faf73c3420 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55faf73c34a0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55faf73cc700 <col:48> 'int' 0
|-CXXMethodDecl 0x55faf73c3760 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55faf73c3640 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55faf73c36c0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55faf73cc720 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55faf73c3830 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55faf73c38f0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55faf73c39b0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55faf73c3a70 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55faf73c3b30 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55faf73c3cd8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55faf73c3be0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55faf73c3e58 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55faf73c3d90 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55faf73c4030 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55faf73c3f18 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55faf73c41a8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55faf73c40e8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55faf73c42f0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55faf73c4260 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55faf73c4440 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55faf73c43b0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55faf73c4618 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55faf73c4500 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55faf73c4580 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55faf73c47f8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55faf73c46e0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55faf73c4760 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55faf73c4948 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55faf73c48b8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55faf73c4b58 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55faf73c4a08 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55faf73c4a88 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55faf73c4cb8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55faf73c4c20 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55faf73c4e10 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55faf73c4d78 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55faf73c4eb8 <col:57> "" ""
|-CXXMethodDecl 0x55faf73c4fc8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55faf73c4f38 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55faf73c5118 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55faf73c5088 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55faf73c5298 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55faf73c51d0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55faf73c5360 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55faf73c5420 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55faf73c54e0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55faf73c5580 <col:49> "" ""
|-CXXMethodDecl 0x55faf73c5610 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55faf73c56d0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55faf73c57c0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55faf73c5888 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55faf73c5948 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55faf73c5a08 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55faf73c5b00 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55faf73c5bc8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55faf73c5c90 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55faf73c5e68 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55faf73c5d48 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55faf73c5dc8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55faf73c6090 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55faf73c5f30 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55faf73c5fb0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55faf73c61a0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55faf73c6208 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55faf73c6230 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55faf73c6348 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55faf73c63e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55faf73c6448 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55faf73c64a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55faf73c6558 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55faf73c65c0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55faf73c67f8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55faf73c6848 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf73c67d8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55faf73c66e8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55faf73c6690 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55faf73c66d0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55faf73c66b0 <col:32> 'int' 8
|-CXXRecordDecl 0x55faf73c6860 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55faf73c6978 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55faf73c6a20 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55faf73c6a88 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55faf73c6b18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55faf73ccbb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55faf73ccfe8 <col:12>
| |-CXXConstructorDecl 0x55faf73cccb8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55faf73ccdc8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55faf73c6a20 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55faf73cf570 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55faf73cf540 <col:12> 'const char *const' lvalue .data 0x55faf73c6a20
| | |     `-DeclRefExpr 0x55faf73cf520 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ccdc8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55faf73c6a88 'length' 'int'
| | | `-ImplicitCastExpr 0x55faf73cf600 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55faf73cf5d0 <col:12> 'const int' lvalue .length 0x55faf73c6a88
| | |     `-DeclRefExpr 0x55faf73cf5b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ccdc8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55faf73c6b18 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55faf73cf690 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55faf73cf660 <col:12> 'String::memo_t *const' lvalue .memo 0x55faf73c6b18
| | |     `-DeclRefExpr 0x55faf73cf640 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ccdc8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55faf73cf6e8 <col:12>
| |-CXXConstructorDecl 0x55faf73cce68 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55faf73cce68
| | `-ParmVarDecl 0x55faf73ccf78 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55faf73d24d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55faf73ddee8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55faf73ddff8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55faf73de510 <col:12>
| |   |-BinaryOperator 0x55faf73de328 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55faf73de2e0 <col:12> 'const char *' lvalue ->data 0x55faf73c6a20
| |   | | `-CXXThisExpr 0x55faf73de2d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55faf73de310 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55faf73de2a0 <col:12> 'const char *const' lvalue .data 0x55faf73c6a20
| |   |     `-DeclRefExpr 0x55faf73de280 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ddff8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55faf73de3f0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55faf73de3a8 <col:12> 'int' lvalue ->length 0x55faf73c6a88
| |   | | `-CXXThisExpr 0x55faf73de398 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55faf73de3d8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55faf73de368 <col:12> 'const int' lvalue .length 0x55faf73c6a88
| |   |     `-DeclRefExpr 0x55faf73de348 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ddff8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55faf73de4b8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55faf73de470 <col:12> 'String::memo_t *' lvalue ->memo 0x55faf73c6b18
| |   | | `-CXXThisExpr 0x55faf73de460 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55faf73de4a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55faf73de430 <col:12> 'String::memo_t *const' lvalue .memo 0x55faf73c6b18
| |   |     `-DeclRefExpr 0x55faf73de410 <col:12> 'const String::rep_t' lvalue ParmVar 0x55faf73ddff8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55faf73de500 <col:12>
| |     `-UnaryOperator 0x55faf73de4e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55faf73de4d8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55faf73de068 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55faf73de068
|   `-ParmVarDecl 0x55faf73de178 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55faf73c6b90 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55faf73c6dd8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55faf73c6bf8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55faf73c6c78 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55faf73c6cf0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55faf73ccb70 <col:79, line:261:5>
|   |-BinaryOperator 0x55faf73cc7e8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55faf73cc780 <col:2, col:5> 'const char *' lvalue .data 0x55faf73c6a20
|   | | `-MemberExpr 0x55faf73cc750 <col:2> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|   | |   `-CXXThisExpr 0x55faf73cc740 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55faf73cc7d0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55faf73cc7b0 <col:12> 'const char *' lvalue ParmVar 0x55faf73c6bf8 'data' 'const char *'
|   |-BinaryOperator 0x55faf73cc8b0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55faf73cc848 <col:2, col:5> 'int' lvalue .length 0x55faf73c6a88
|   | | `-MemberExpr 0x55faf73cc818 <col:2> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|   | |   `-CXXThisExpr 0x55faf73cc808 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55faf73cc898 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55faf73cc878 <col:14> 'int' lvalue ParmVar 0x55faf73c6c78 'length' 'int'
|   `-IfStmt 0x55faf73ccb58 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55faf73cc9d0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55faf73cc9b8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55faf73cc998 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55faf73cc978 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55faf73cc910 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55faf73c6b18
|     |       | `-MemberExpr 0x55faf73cc8e0 <col:7> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|     |       |   `-CXXThisExpr 0x55faf73cc8d0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55faf73cc960 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55faf73cc940 <col:17> 'String::memo_t *' lvalue ParmVar 0x55faf73c6cf0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55faf73ccb30 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55faf73ccb18 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55faf73cca20 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55faf73b5808 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55faf73cca88 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55faf73c63e8
|         `-ImplicitCastExpr 0x55faf73cca70 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55faf73cca50 <col:27> 'String::memo_t *' lvalue ParmVar 0x55faf73c6cf0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55faf73c7088 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55faf73c6ea8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55faf73c6f28 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55faf73c6fa0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55faf73c6b90 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55faf73ccff8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55faf73cd188 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55faf73cd0f0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55faf73cd060 <col:2> '<bound member function type>' ->assign_memo 0x55faf73c6dd8
|     | `-ImplicitCastExpr 0x55faf73cd128 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55faf73cd050 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55faf73cd140 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55faf73cd090 <col:14> 'const char *' lvalue ParmVar 0x55faf73c6ea8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55faf73cd158 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55faf73cd0b0 <col:20> 'int' lvalue ParmVar 0x55faf73c6f28 'length' 'int'
|     `-ImplicitCastExpr 0x55faf73cd170 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55faf73cd0d0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55faf73c6fa0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55faf73c7218 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55faf73c7158 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55faf73cd3e0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55faf73cd360 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55faf73cd1b0 <col:2> '<bound member function type>' ->assign_memo 0x55faf73c6dd8
|     | `-CXXThisExpr 0x55faf73cd1a0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55faf73cd398 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55faf73cd230 <col:14, col:19> 'const char *' lvalue .data 0x55faf73c6a20
|     |   `-MemberExpr 0x55faf73cd200 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55faf73c6b90
|     |     `-DeclRefExpr 0x55faf73cd1e0 <col:14> 'const String' lvalue ParmVar 0x55faf73c7158 'x' 'const String &'
|     |-ImplicitCastExpr 0x55faf73cd3b0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55faf73cd2b0 <col:25, col:30> 'int' lvalue .length 0x55faf73c6a88
|     |   `-MemberExpr 0x55faf73cd280 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55faf73c6b90
|     |     `-DeclRefExpr 0x55faf73cd260 <col:25> 'const String' lvalue ParmVar 0x55faf73c7158 'x' 'const String &'
|     `-ImplicitCastExpr 0x55faf73cd3c8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55faf73cd330 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55faf73c6b18
|         `-MemberExpr 0x55faf73cd300 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55faf73c6b90
|           `-DeclRefExpr 0x55faf73cd2e0 <col:38> 'const String' lvalue ParmVar 0x55faf73c7158 'x' 'const String &'
|-CXXMethodDecl 0x55faf73c72e0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55faf73cdda0 <col:31, line:278:5>
|   `-IfStmt 0x55faf73cdd88 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55faf73cd480 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55faf73cd468 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55faf73cd438 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55faf73c6b18
|     |     `-MemberExpr 0x55faf73cd408 <col:6> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|     |       `-CXXThisExpr 0x55faf73cd3f8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55faf73cdd60 <col:15, line:277:2>
|       |-ParenExpr 0x55faf73cd930 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55faf73cd900 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55faf73cd590 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55faf73cd578 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55faf73cd560 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55faf73cd520 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55faf73c63e8
|       |   |       `-ImplicitCastExpr 0x55faf73cd508 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55faf73cd4d8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55faf73c6b18
|       |   |           `-MemberExpr 0x55faf73cd4a8 <col:27> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|       |   |             `-CXXThisExpr 0x55faf73cd498 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55faf73cd5f0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55faf73cd5d0 <col:54> 'int' 0
|       |   `-CallExpr 0x55faf73cd860 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55faf73cd848 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55faf73cd7c8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55faf73cd8a0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55faf73cd6d8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55faf73cd8b8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55faf73cd708 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55faf73cd8d0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55faf73cd740 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55faf73cd8e8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55faf73cd7b0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55faf73cd798 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55faf73cd760 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55faf73cdc80 <line:274:6, line:275:22>
|       | |-CallExpr 0x55faf73cdb40 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55faf73cdb28 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55faf73cdaa0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55faf73b6c50 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55faf73cda70 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55faf73c63e8
|       | |   `-ImplicitCastExpr 0x55faf73cda58 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55faf73cda28 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55faf73c6b18
|       | |       `-MemberExpr 0x55faf73cd9f8 <col:40> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|       | |         `-CXXThisExpr 0x55faf73cd9e8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55faf73cdc40 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55faf73cdc28 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55faf73cdb68 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55faf73cbac0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55faf73cdc68 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55faf73cdbc8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55faf73c6b18
|       |       `-MemberExpr 0x55faf73cdb98 <col:15> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|       |         `-CXXThisExpr 0x55faf73cdb88 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55faf73cdd40 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55faf73cdcd8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55faf73c6b18
|         | `-MemberExpr 0x55faf73cdca8 <col:6> 'String::rep_t' lvalue ->_r 0x55faf73c6b90
|         |   `-CXXThisExpr 0x55faf73cdc98 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55faf73cdd28 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55faf73cdd08 <col:16> 'int' 0
|-CXXMethodDecl 0x55faf73c7578 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55faf73c7398 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55faf73c7418 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55faf73c7490 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55faf73c7650 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55faf73c78a0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55faf73c7708 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55faf73c7788 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55faf73c7800 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55faf73c7a88 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55faf73c7970 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55faf73c79f0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55faf73c7b88 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55faf73cde78 <col:41, line:286:5>
|   `-ReturnStmt 0x55faf73cde68 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55faf73cde38 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55faf73cde00 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55faf73cdde8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55faf73cddc8 <col:46> 'int' 1
|-CXXMethodDecl 0x55faf73c7e28 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55faf73c7c40 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55faf73c7cc0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55faf73c7d40 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55faf73cbac0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55faf73c7ef0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55faf73cbb90 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55faf73cbd60 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55faf73cbc48 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55faf73cbcc8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55faf73cbe20 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55faf73cbee8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55faf73cbfe8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55faf73cc060 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55faf73cc0d8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55faf73cc140 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55faf73cc240 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55faf73cc290 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf73cc220 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55faf73cc200 <col:22> 'int' 14
|-CXXMethodDecl 0x55faf73cc4a8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55faf73cc2c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55faf73cc340 <col:38> col:41 'int'
| `-ParmVarDecl 0x55faf73cc3c0 <col:43> col:46 'int'
|-FriendDecl 0x55faf73cc5b0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55faf73cc640 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55faf748f390 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55faf748f568 prev 0x55faf748f390 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55faf748f5f8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55faf748f620 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf7490f80 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55faf7490f30 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55faf7490f10 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55faf748f838 'type'
|     `-SubstTemplateTypeParmType 0x55faf748f800 'String' sugar
|       |-TemplateTypeParmType 0x55faf7382050 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf7382000 'T'
|       `-RecordType 0x55faf73bd830 'String'
|         `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf7491038 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55faf7491000 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55faf7490fe0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55faf7490f80 'type'
|     `-ElaboratedType 0x55faf7490f30 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55faf7490f10 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55faf748f838 'type'
|         `-SubstTemplateTypeParmType 0x55faf748f800 'String' sugar
|           |-TemplateTypeParmType 0x55faf7382050 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55faf7382000 'T'
|           `-RecordType 0x55faf73bd830 'String'
|             `-CXXRecord 0x55faf73bd7a0 'String'
|-CXXMethodDecl 0x55faf74911b8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55faf74910c8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55faf74912a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55faf7491388 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55faf7491388
|-CXXMethodDecl 0x55faf7491658 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55faf7491560 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55faf7491898 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55faf7491710 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55faf7491788 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55faf7491a68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55faf7491958 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55faf74919d0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55faf7491bc8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55faf7491c98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55faf763c358 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55faf7491d58 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55faf7491dd0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55faf763c5b8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55faf763c428 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55faf763c4a0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55faf763c778 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55faf763c688 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55faf763c938 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55faf763c840 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55faf763c9f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55faf763caa0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55faf763ccd8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55faf763cb50 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55faf763cbc8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55faf763cf78 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55faf763ce80 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55faf763d040 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55faf763d090 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55faf763d0e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55faf75f9390 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55faf748ddf8 prev 0x55faf75f9390 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55faf748f300 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55faf748f2b0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55faf748f290 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55faf748f140 'type'
|     `-SubstTemplateTypeParmType 0x55faf748efd0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55faf7357e00 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55faf7357da8 'F'
|       `-RecordType 0x55faf748ec30 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55faf748eb50 'typed_array_memory'
|-FieldDecl 0x55faf763d130 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55faf763d180 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55faf763d1b8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|   |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55faf738f318 'T'
|   `-RecordType 0x55faf73bd830 'String'
|     `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763d248 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55faf763d210 'String &'
|   `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|     |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55faf738f318 'T'
|     `-RecordType 0x55faf73bd830 'String'
|       `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763d2d8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55faf763d2a0 'const String &'
|   `-QualType 0x55faf748de91 'const String' const
|     `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-RecordType 0x55faf73bd830 'String'
|         `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763d368 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55faf763d330 'String *'
|   `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|     |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55faf738f318 'T'
|     `-RecordType 0x55faf73bd830 'String'
|       `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763d3f8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55faf763d3c0 'const String *'
|   `-QualType 0x55faf748de91 'const String' const
|     `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-RecordType 0x55faf73bd830 'String'
|         `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763e050 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55faf763e000 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55faf763dfe0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55faf763df18 'type'
|     `-LValueReferenceType 0x55faf763dee0 'const String &'
|       `-QualType 0x55faf763dc81 'const String' const
|         `-SubstTemplateTypeParmType 0x55faf763dc80 'String' sugar
|           |-TemplateTypeParmType 0x55faf7361d50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55faf7361cf8 'T'
|           `-RecordType 0x55faf73bd830 'String'
|             `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763e0b8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55faf763d2a0 'const String &'
|   `-QualType 0x55faf748de91 'const String' const
|     `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-RecordType 0x55faf73bd830 'String'
|         `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763e110 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf763e178 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55faf763d330 'String *'
|   `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|     |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55faf738f318 'T'
|     `-RecordType 0x55faf73bd830 'String'
|       `-CXXRecord 0x55faf73bd7a0 'String'
|-TypedefDecl 0x55faf763e1e0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55faf763d3c0 'const String *'
|   `-QualType 0x55faf748de91 'const String' const
|     `-SubstTemplateTypeParmType 0x55faf748de90 'String' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-RecordType 0x55faf73bd830 'String'
|         `-CXXRecord 0x55faf73bd7a0 'String'
|-EnumDecl 0x55faf763e238 <line:134:5> col:5
| `-EnumConstantDecl 0x55faf763e330 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55faf763e310 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55faf73909f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55faf73909d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55faf73909b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55faf763e3b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55faf763e648 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf763e470 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55faf763e510 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55faf763e8d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55faf763e7c0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55faf763eb98 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55faf763ea80 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55faf763eeb0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55faf763ed90 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55faf763f1c0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55faf763f0a0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55faf763f4b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf763f2f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55faf763f370 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55faf763f5d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55faf763f688 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf763f6e0 <col:30> Inherited
|-CXXMethodDecl 0x55faf763f728 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55faf763f7d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf763f830 <col:30> Inherited
|-CXXMethodDecl 0x55faf763f8f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55faf763f9a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf763fa00 <col:30> Inherited
|-CXXMethodDecl 0x55faf763fa48 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55faf763faf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf763fb50 <col:30> Inherited
|-CXXMethodDecl 0x55faf763fb98 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55faf763fc48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf763fca0 <col:30> Inherited
|-CXXMethodDecl 0x55faf763fce8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55faf763fd98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf763fdf0 <col:30> Inherited
|-CXXMethodDecl 0x55faf763fe18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55faf763fec8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55faf763ff78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55faf7640138 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf7640028 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55faf76400a0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55faf7640288 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55faf76401f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf7640438 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55faf7640340 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55faf76404f0 <col:20>
| `-OptimizeNoneAttr 0x55faf7640548 <col:30>
|-CXXMethodDecl 0x55faf7640668 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55faf7640570 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55faf7640720 <col:20>
| `-OptimizeNoneAttr 0x55faf7640778 <col:30>
|-CXXMethodDecl 0x55faf7640830 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55faf76407a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf7640978 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55faf76408e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf7640aa8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55faf7640ba8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55faf7640c78 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55faf7640d48 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55faf7640e88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55faf7640df8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf7640fd0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55faf7640f40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf7641118 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55faf7641088 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55faf76411d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55faf76412d0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55faf7641240 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55faf7641388 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55faf7641448 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55faf7641548 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55faf76416c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55faf7641608 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55faf7641e88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55faf7641780 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55faf7641de8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55faf7641ce8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55faf7641f68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55faf76420b8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55faf7642028 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55faf7642170 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55faf76423b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf7642230 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55faf76422a8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55faf7642548 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55faf7642488 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55faf7642758 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55faf7642610 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55faf7642688 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55faf7642818 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55faf7642a78 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55faf7642980 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55faf7642b48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55faf7642b48

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf7573dc8 prev 0x55faf75b8ea8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf7573ec0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55faf7573f50 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55faf7574088 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55faf7573f88 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55faf75754b0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55faf7575490 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55faf7575028 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55faf7575540 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55faf7575500 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55faf7573f88 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55faf7575090 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55faf75755c0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55faf7575580 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55faf75750f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55faf7575600 <col:54> 'bool' false
| `-CompoundStmt 0x55faf7575708 <col:61, line:38:5>
|   `-BinaryOperator 0x55faf75756e8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55faf7575680 <col:9> 'const Element *' lvalue ->_context 0x55faf7574fc8
|     | `-CXXThisExpr 0x55faf7575670 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55faf75756d0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55faf75756b0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55faf7574298 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf7574148 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55faf75741c0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55faf75754e8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55faf75754c8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55faf7574fc8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55faf7575760 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55faf7575720 <col:20> 'const Element *' lvalue ParmVar 0x55faf7574148 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55faf7575028 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55faf75757e0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55faf75757a0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55faf75741c0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55faf7575090 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55faf7575860 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55faf7575820 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55faf75750f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55faf75758a0 <col:73> 'bool' false
| `-CompoundStmt 0x55faf7575918 <col:80, line:46:5>
|-CXXMethodDecl 0x55faf75743c8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55faf7575990 <col:36, line:51:5>
|   `-ReturnStmt 0x55faf7575980 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55faf7575968 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55faf7575938 <col:16> 'const Element *const' lvalue ->_context 0x55faf7574fc8
|         `-CXXThisExpr 0x55faf7575928 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55faf75744b8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55faf7575a10 <col:32, line:57:5>
|   `-ReturnStmt 0x55faf7575a00 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55faf75759e8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55faf75759b8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55faf7575028
|         `-CXXThisExpr 0x55faf75759a8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55faf7574578 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55faf7574700 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55faf7574630 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55faf7574850 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55faf75747c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55faf75749a0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55faf7574910 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55faf7574ba8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55faf7574a58 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55faf7574ad0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55faf7574ed8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55faf7574c68 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55faf7574ce8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55faf7574db0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55faf7574f90 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55faf7574fc8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55faf7575028 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55faf7575090 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55faf75750f0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55faf7575140 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55faf7575140
| `-ParmVarDecl 0x55faf7575258 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55faf75752f8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55faf75752f8
| `-ParmVarDecl 0x55faf7575408 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55faf76c4ce0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55faf76816f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55faf76818c8 prev 0x55faf76816f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55faf7681958 <col:46, col:52> col:46 public
|-TypedefDecl 0x55faf7681980 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf7683550 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55faf7683500 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55faf7681e30 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55faf7681d30 'type'
|     `-TemplateSpecializationType 0x55faf7681cc0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55faf7681ba0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55faf7681b80 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55faf7681b60 <col:24> 'unsigned long' 4
|       `-RecordType 0x55faf7681ca0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55faf7681bc0 'char_array'
|-TypedefDecl 0x55faf7683608 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55faf76835d0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55faf76835b0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55faf7683550 'type'
|     `-ElaboratedType 0x55faf7683500 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55faf7681e30 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55faf7681d30 'type'
|         `-TemplateSpecializationType 0x55faf7681cc0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55faf7681ba0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55faf7681b80 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55faf7681b60 <col:24> 'unsigned long' 4
|           `-RecordType 0x55faf7681ca0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55faf7681bc0 'char_array'
|-CXXMethodDecl 0x55faf7683788 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55faf7683698 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55faf7683878 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55faf7683958 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55faf7683c28 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55faf7683b30 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55faf7683e68 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55faf7683ce0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55faf7683d58 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55faf7684038 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55faf7683f28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55faf7683fa0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55faf7684198 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55faf7684268 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55faf76844b8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55faf7684328 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55faf76843a0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55faf7684718 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55faf7684588 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55faf7684600 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55faf76848d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55faf76847e8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55faf7684a98 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55faf76849a0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55faf7684b50 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55faf7684c00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55faf7684e38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55faf7684cb0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55faf7684d28 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55faf768c518 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55faf768c420 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55faf768c5e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55faf768c630 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55faf768c680 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55faf76800f8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55faf7680308 prev 0x55faf76800f8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55faf7681660 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55faf7681610 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55faf76815f0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55faf76814a0 'type'
|     `-SubstTemplateTypeParmType 0x55faf76812c0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55faf7357680 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf7357628 'T'
|       `-RecordType 0x55faf7680e10 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55faf7680d28 'sized_array_memory'
|-FieldDecl 0x55faf768c6d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55faf768c720 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55faf768c758 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|   |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55faf738f318 'T'
|   `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768c7e8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55faf768c7b0 'int &'
|   `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|     |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55faf738f318 'T'
|     `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768c8a8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55faf768c870 'const int &'
|   `-QualType 0x55faf76803a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768c938 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55faf768c900 'int *'
|   `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|     |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55faf738f318 'T'
|     `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768c9c8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55faf768c990 'const int *'
|   `-QualType 0x55faf76803a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768d5b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55faf768d560 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55faf768d540 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55faf768d4d0 'type'
|     `-SubstTemplateTypeParmType 0x55faf768d290 'int' sugar
|       |-TemplateTypeParmType 0x55faf7362480 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf7362430 'T'
|       `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768d618 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55faf768c870 'const int &'
|   `-QualType 0x55faf76803a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768d670 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768d6d8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55faf768c900 'int *'
|   `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|     |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55faf738f318 'T'
|     `-BuiltinType 0x55faf7092580 'int'
|-TypedefDecl 0x55faf768d740 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55faf768c990 'const int *'
|   `-QualType 0x55faf76803a1 'const int' const
|     `-SubstTemplateTypeParmType 0x55faf76803a0 'int' sugar
|       |-TemplateTypeParmType 0x55faf738f370 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55faf738f318 'T'
|       `-BuiltinType 0x55faf7092580 'int'
|-EnumDecl 0x55faf768d798 <line:134:5> col:5
| `-EnumConstantDecl 0x55faf768d890 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55faf768d870 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55faf73909f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55faf73909d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55faf73909b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55faf768d918 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55faf768db68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf768d9d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55faf768da70 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55faf768de28 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55faf768dd10 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55faf768e0e8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55faf768dfd0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55faf768e430 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55faf768e310 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55faf768e740 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55faf768e620 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55faf768ea30 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf768e878 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55faf768e8f0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55faf768eb58 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55faf768ec38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf768ec90 <col:30> Inherited
|-CXXMethodDecl 0x55faf768ecd8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55faf768ed88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf768ede0 <col:30> Inherited
|-CXXMethodDecl 0x55faf768eea8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55faf768ef58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf768efb0 <col:30> Inherited
|-CXXMethodDecl 0x55faf768eff8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55faf768f0a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf768f100 <col:30> Inherited
|-CXXMethodDecl 0x55faf768f148 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55faf768f1f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf768f250 <col:30> Inherited
|-CXXMethodDecl 0x55faf768f298 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55faf768f348 <col:20> Inherited
| `-OptimizeNoneAttr 0x55faf768f3a0 <col:30> Inherited
|-CXXMethodDecl 0x55faf768f3c8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55faf768f478 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55faf768f528 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55faf768f6e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf768f5d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55faf768f650 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55faf768f838 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55faf768f7a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf768f9e8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55faf768f8f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55faf768faa0 <col:20>
| `-OptimizeNoneAttr 0x55faf768faf8 <col:30>
|-CXXMethodDecl 0x55faf768fc18 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55faf768fb20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55faf768fcd0 <col:20>
| `-OptimizeNoneAttr 0x55faf768fd28 <col:30>
|-CXXMethodDecl 0x55faf768fde0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55faf768fd50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf768ff28 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55faf768fe98 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf7690058 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55faf7690188 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55faf7690258 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55faf7690328 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55faf7690468 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55faf76903d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf76905b0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55faf7690520 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55faf76906f8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55faf7690668 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55faf76907b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55faf76908b0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55faf7690820 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55faf7690968 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55faf7690a28 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55faf7690b28 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55faf7690ca8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55faf7690be8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55faf7691468 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55faf7690d60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55faf76913c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55faf76912c8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55faf7691548 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55faf7691698 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55faf7691608 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55faf7691750 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55faf7691998 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55faf7691810 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55faf7691888 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55faf7691b58 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55faf7691a68 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55faf7691da8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55faf7691c20 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55faf7691c98 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55faf7691e68 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55faf76920c8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55faf7691fd0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55faf7692198 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf767e268 prev 0x55faf765ed30 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55faf767e360 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55faf767e450 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55faf76a3f30 <col:16, line:828:9>
|-CXXDestructorDecl 0x55faf767e540 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55faf76a3f40 <col:25, line:830:9>
|-CXXMethodDecl 0x55faf767e640 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55faf767e6f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55faf767e798 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55faf767e798
| `-ParmVarDecl 0x55faf767e8a8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55faf767f068 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55faf767f068
  `-ParmVarDecl 0x55faf767f178 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf757a738 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55faf757a898 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55faf765ed30 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55faf765ede0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55faf765eee8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55faf765ee18 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55faf7693758 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55faf7693738 <col:31> 'int' 0
|-CXXConstructorDecl 0x55faf765f208 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55faf765f080 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55faf765f0f8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55faf7693790 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55faf7693770 <col:59> 'int' 0
|-CXXConstructorDecl 0x55faf765f3e0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf765f2d0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55faf765f348 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55faf76937c8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55faf76937a8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55faf765f798 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55faf765f580 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55faf765f5f8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55faf765f670 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55faf7693800 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55faf76937e0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55faf765f958 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55faf765f898 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55faf765fa50 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55faf765fc38 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55faf765fb40 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55faf765fd28 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55faf7693bb0 <col:24, line:291:5>
|   `-ReturnStmt 0x55faf7693ba0 <line:290:9, col:79>
|     `-BinaryOperator 0x55faf7693b80 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55faf7693a58 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55faf76939b0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55faf7693990 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55faf7693888 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55faf7693870 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55faf7693858 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55faf7693828 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55faf7680090
|       | |   |       `-CXXThisExpr 0x55faf7693818 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55faf7693978 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55faf7693960 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55faf7693928 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55faf76938f8 <col:28, col:35> '<bound member function type>' ->size 0x55faf763fe18
|       | |           `-ImplicitCastExpr 0x55faf7693948 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55faf76938e0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55faf76938b0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55faf7680090
|       | |                 `-CXXThisExpr 0x55faf76938a0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55faf7693a40 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55faf7693a28 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55faf7693a10 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55faf76939e0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55faf76922e0
|       |         `-CXXThisExpr 0x55faf76939d0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55faf7693b60 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55faf7693b48 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55faf7693b30 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55faf7693af0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55faf7693ad8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55faf7693a88 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55faf7692390
|         |     |   `-CXXThisExpr 0x55faf7693a78 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55faf7693ab8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55faf7693b10 <col:79> 'int' 0
|-CXXMethodDecl 0x55faf765fde8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55faf7693d88 <col:32, line:296:5>
|   `-ReturnStmt 0x55faf7693d78 <line:295:9, col:49>
|     `-BinaryOperator 0x55faf7693d58 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55faf7693c38 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55faf7693c20 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55faf7693c08 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55faf7693bd8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55faf76922e0
|       |       `-CXXThisExpr 0x55faf7693bc8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55faf7693d38 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55faf7693d20 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55faf7693d08 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55faf7693cc8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55faf7693cb0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55faf7693c60 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55faf7692390
|         |     |   `-CXXThisExpr 0x55faf7693c50 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55faf7693c90 <col:43> 'int' 0
|         `-IntegerLiteral 0x55faf7693ce8 <col:49> 'int' 0
|-CXXMethodDecl 0x55faf765fed8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55faf7693f98 <col:19, line:306:5>
|   |-IfStmt 0x55faf7693eb8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55faf7693df8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55faf7693de0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55faf7693db0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55faf7680090
|   | |     `-CXXThisExpr 0x55faf7693da0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55faf7693e98 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55faf7693e68 <col:13, col:20> '<bound member function type>' ->clear 0x55faf7642818
|   |     `-ImplicitCastExpr 0x55faf7693e50 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55faf7693e20 <col:13> 'Vector<String> *' lvalue ->_conf 0x55faf7680090
|   |         `-CXXThisExpr 0x55faf7693e10 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55faf7693f40 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55faf7693f10 <col:9, col:16> '<bound member function type>' .clear 0x55faf7691e68
|   |   `-MemberExpr 0x55faf7693ee0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55faf7692280
|   |     `-CXXThisExpr 0x55faf7693ed0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55faf7693f88 <line:305:9, col:17>
|     `-UnaryOperator 0x55faf7693f70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf7693f60 <col:17> 'Args *' this
|-CXXMethodDecl 0x55faf7660158 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55faf7660060 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55faf76602d8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55faf7660210 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55faf7660658 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55faf7660380 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55faf76605b8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55faf7660428 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55faf76604a0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55faf76942b8 <col:67, line:327:5>
|     |-WhileStmt 0x55faf7694268 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55faf7694080 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55faf7694000 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55faf75b1378 0x55faf73fa538 0x55faf73fa210 0x55faf73ea9e0 0x55faf73ea690 0x55faf73e9f80 0x55faf73bc8f0 0x55faf7349dc0
|     | | |-DeclRefExpr 0x55faf7693fc0 <col:16> 'Iter' lvalue ParmVar 0x55faf7660428 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55faf7693fe0 <col:25> 'Iter' lvalue ParmVar 0x55faf76604a0 'end' 'Iter'
|     | `-CompoundStmt 0x55faf7694248 <col:30, line:325:9>
|     |   |-CallExpr 0x55faf76941e8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55faf76940c8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55faf76941b8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55faf7694148 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|     |   |   `-DeclRefExpr 0x55faf7694128 <col:24> 'Iter' lvalue ParmVar 0x55faf7660428 'begin' 'Iter'
|     |   `-UnaryOperator 0x55faf7694230 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55faf7694210 <col:15> 'Iter' lvalue ParmVar 0x55faf7660428 'begin' 'Iter'
|     `-ReturnStmt 0x55faf76942a8 <line:326:9, col:17>
|       `-UnaryOperator 0x55faf7694290 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7694280 <col:17> 'Args *' this
|-CXXMethodDecl 0x55faf7660760 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55faf76606d0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55faf76608a8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55faf7660818 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55faf7660970 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55faf7694398 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55faf7694338 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55faf76942e8 <col:9> '<bound member function type>' ->reset_from 0x55faf7692708
|   | | `-CXXThisExpr 0x55faf76942d8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55faf7694318 <col:20> 'int' 0
|   `-ReturnStmt 0x55faf7694388 <line:352:9, col:17>
|     `-UnaryOperator 0x55faf7694370 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf7694360 <col:17> 'Args *' this
|-VarDecl 0x55faf7660a28 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55faf7660a90 <col:38> 'int' 1
|-VarDecl 0x55faf7660b20 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55faf7660b88 <col:39> 'int' 2
|-VarDecl 0x55faf7660c18 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55faf7660c80 <col:39> 'int' 4
|-VarDecl 0x55faf7660d10 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55faf7660d78 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55faf76610f8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55faf7660df0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf7661058 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55faf7660ea0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7660f48 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55faf7695dd8 <col:43, line:371:5>
|     `-ReturnStmt 0x55faf7695dc8 <line:370:9, col:34>
|       `-CallExpr 0x55faf7695d90 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7695cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7695d30 <col:21> 'const char *' lvalue ParmVar 0x55faf7660ea0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7695d50 <col:30> 'int' 0
|         `-DeclRefExpr 0x55faf7695d70 <col:33> 'T' lvalue ParmVar 0x55faf7660f48 'x' 'T &'
|-FunctionTemplateDecl 0x55faf7661428 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55faf7661160 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf7661388 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55faf7661210 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76612b8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55faf7695f28 <col:45, line:375:5>
|     `-ReturnStmt 0x55faf7695f18 <line:374:9, col:42>
|       `-CallExpr 0x55faf7695ee0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7695e00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7695e80 <col:21> 'const char *' lvalue ParmVar 0x55faf7661210 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7695ea0 <col:30> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int'
|         `-DeclRefExpr 0x55faf7695ec0 <col:41> 'T' lvalue ParmVar 0x55faf76612b8 'x' 'T &'
|-FunctionTemplateDecl 0x55faf7661758 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55faf7661490 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf76616b8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55faf7661540 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76615e8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55faf7696078 <col:45, line:379:5>
|     `-ReturnStmt 0x55faf7696068 <line:378:9, col:43>
|       `-CallExpr 0x55faf7696030 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7695f50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7695fd0 <col:21> 'const char *' lvalue ParmVar 0x55faf7661540 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7695ff0 <col:30> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int'
|         `-DeclRefExpr 0x55faf7696010 <col:42> 'T' lvalue ParmVar 0x55faf76615e8 'x' 'T &'
|-FunctionTemplateDecl 0x55faf7661a88 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55faf76617c0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55faf76619e8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55faf7661870 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55faf7661918 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55faf7696278 <col:46, line:383:5>
| |   `-ReturnStmt 0x55faf7696268 <line:382:9, col:55>
| |     `-CallExpr 0x55faf7696230 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55faf76960a0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55faf7696120 <col:21> 'const char *' lvalue ParmVar 0x55faf7661870 'keyword' 'const char *'
| |       |-BinaryOperator 0x55faf76961f0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55faf76961a0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55faf7696180 <col:30> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55faf76961d8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55faf76961b8 <col:42> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55faf7696210 <col:54> 'T' lvalue ParmVar 0x55faf7661918 'x' 'T &'
| `-CXXMethodDecl 0x55faf76c5168 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x55faf76c4f80 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55faf76c5058 <col:40, col:43> col:43 x 'IPAddress &'
|-FunctionTemplateDecl 0x55faf7661e88 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55faf7661af0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf7661de8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55faf7661ba0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7661c20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7661cc8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55faf76963b8 <col:54, line:388:5>
|     |-CallExpr 0x55faf7696340 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7696290 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55faf76962d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55faf76962e0 <col:30> 'const char *' lvalue ParmVar 0x55faf7661ba0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55faf7696300 <col:39> 'int' lvalue ParmVar 0x55faf7661c20 'flags' 'int'
|     | `-DeclRefExpr 0x55faf7696320 <col:46> 'T' lvalue ParmVar 0x55faf7661cc8 'x' 'T &'
|     `-ReturnStmt 0x55faf76963a8 <line:387:9, col:17>
|       `-UnaryOperator 0x55faf7696390 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7696380 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf7662338 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55faf7661ef8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55faf7661f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55faf7662298 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55faf7662038 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76620d8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55faf7662178 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55faf7696528 <col:74, line:403:5>
|     `-ReturnStmt 0x55faf7696518 <line:402:9, col:56>
|       `-CallExpr 0x55faf76964d8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76963e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7696458 <col:28> 'const char *' lvalue ParmVar 0x55faf7662038 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7696478 <col:37> 'int' 0
|         |-DeclRefExpr 0x55faf7696498 <col:40> 'T' lvalue ParmVar 0x55faf76620d8 'x' 'T &'
|         `-DeclRefExpr 0x55faf76964b8 <col:43> 'const V' lvalue ParmVar 0x55faf7662178 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55faf76627a8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55faf76623a8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55faf7662428 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55faf7662708 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55faf76624e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7662588 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55faf7662628 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55faf7696690 <col:76, line:407:5>
|     `-ReturnStmt 0x55faf7696680 <line:406:9, col:65>
|       `-CallExpr 0x55faf7696640 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7696550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf76965c0 <col:28> 'const char *' lvalue ParmVar 0x55faf76624e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf76965e0 <col:37> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int'
|         |-DeclRefExpr 0x55faf7696600 <col:49> 'T' lvalue ParmVar 0x55faf7662588 'x' 'T &'
|         `-DeclRefExpr 0x55faf7696620 <col:52> 'const V' lvalue ParmVar 0x55faf7662628 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55faf7662cf8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55faf7662818 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55faf7662898 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55faf7662c58 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55faf7662958 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76629d8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7662a78 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55faf7662b18 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55faf76967f8 <col:85, line:412:5>
|     |-CallExpr 0x55faf7696778 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf76966a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55faf76966e8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55faf76966f8 <col:37> 'const char *' lvalue ParmVar 0x55faf7662958 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55faf7696718 <col:46> 'int' lvalue ParmVar 0x55faf76629d8 'flags' 'int'
|     | |-DeclRefExpr 0x55faf7696738 <col:53> 'T' lvalue ParmVar 0x55faf7662a78 'x' 'T &'
|     | `-DeclRefExpr 0x55faf7696758 <col:56> 'const V' lvalue ParmVar 0x55faf7662b18 'default_value' 'const V &'
|     `-ReturnStmt 0x55faf76967e8 <line:411:9, col:17>
|       `-UnaryOperator 0x55faf76967d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf76967c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf7663188 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55faf7662d70 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7662de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55faf76630e8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55faf7662ea8 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55faf7662f20 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x55faf7662fc8 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x55faf7696978 <col:53, line:425:5>
| |   `-ReturnStmt 0x55faf7696968 <line:424:9, col:42>
| |     `-CallExpr 0x55faf7696928 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55faf7696828 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55faf76968a8 <col:21> 'const char *' lvalue ParmVar 0x55faf7662ea8 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55faf76968c8 <col:30> 'int' 0
| |       |-DeclRefExpr 0x55faf76968e8 <col:33> 'P' lvalue ParmVar 0x55faf7662f20 'parser' 'P'
| |       `-DeclRefExpr 0x55faf7696908 <col:41> 'T' lvalue ParmVar 0x55faf7662fc8 'x' 'T &'
| `-CXXMethodDecl 0x55faf76c5c98 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55faf76c5a08 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55faf76c5aa8 <col:37, col:39> col:39 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x55faf76c5b78 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x55faf76635d8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55faf76631f8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7663278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf7663538 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf7663338 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76633b0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7663458 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55faf7696af0 <col:55, line:429:5>
|     `-ReturnStmt 0x55faf7696ae0 <line:428:9, col:50>
|       `-CallExpr 0x55faf7696aa0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76969a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7696a20 <col:21> 'const char *' lvalue ParmVar 0x55faf7663338 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7696a40 <col:30> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int'
|         |-DeclRefExpr 0x55faf7696a60 <col:41> 'P' lvalue ParmVar 0x55faf76633b0 'parser' 'P'
|         `-DeclRefExpr 0x55faf7696a80 <col:49> 'T' lvalue ParmVar 0x55faf7663458 'x' 'T &'
|-FunctionTemplateDecl 0x55faf7663a28 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55faf7663648 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf76636c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf7663988 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf7663788 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7663800 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55faf76638a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55faf7696c68 <col:55, line:433:5>
|     `-ReturnStmt 0x55faf7696c58 <line:432:9, col:51>
|       `-CallExpr 0x55faf7696c18 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7696b18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7696b98 <col:21> 'const char *' lvalue ParmVar 0x55faf7663788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7696bb8 <col:30> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int'
|         |-DeclRefExpr 0x55faf7696bd8 <col:42> 'P' lvalue ParmVar 0x55faf7663800 'parser' 'P'
|         `-DeclRefExpr 0x55faf7696bf8 <col:50> 'T' lvalue ParmVar 0x55faf76638a8 'x' 'T &'
|-FunctionTemplateDecl 0x55faf7663e78 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55faf7663a98 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7663b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf7663dd8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf7663bd8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7663c50 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7663cf8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55faf7696e90 <col:56, line:437:5>
|     `-ReturnStmt 0x55faf7696e80 <line:436:9, col:63>
|       `-CallExpr 0x55faf7696e40 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7696c90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7696d10 <col:21> 'const char *' lvalue ParmVar 0x55faf7663bd8 'keyword' 'const char *'
|         |-BinaryOperator 0x55faf7696de0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55faf7696d90 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55faf7696d70 <col:30> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55faf7696dc8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55faf7696da8 <col:42> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55faf7696e00 <col:54> 'P' lvalue ParmVar 0x55faf7663c50 'parser' 'P'
|         `-DeclRefExpr 0x55faf7696e20 <col:62> 'T' lvalue ParmVar 0x55faf7663cf8 'x' 'T &'
|-FunctionTemplateDecl 0x55faf76643a8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55faf7663ee8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7663f68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf7664308 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55faf7664028 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76640a8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7664120 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55faf76641c8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55faf7696ff8 <col:64, line:442:5>
|     |-CallExpr 0x55faf7696f78 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7696ea8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55faf7696ee8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55faf7696ef8 <col:30> 'const char *' lvalue ParmVar 0x55faf7664028 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55faf7696f18 <col:39> 'int' lvalue ParmVar 0x55faf76640a8 'flags' 'int'
|     | |-DeclRefExpr 0x55faf7696f38 <col:46> 'P' lvalue ParmVar 0x55faf7664120 'parser' 'P'
|     | `-DeclRefExpr 0x55faf7696f58 <col:54> 'T' lvalue ParmVar 0x55faf76641c8 'x' 'T &'
|     `-ReturnStmt 0x55faf7696fe8 <line:441:9, col:17>
|       `-UnaryOperator 0x55faf7696fd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7696fc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf76649a8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55faf7664420 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7664498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55faf7664518 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55faf7664908 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55faf76645e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7664658 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55faf76646f8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55faf76647c8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55faf7697190 <col:84, line:458:5>
|     `-ReturnStmt 0x55faf7697180 <line:457:9, col:64>
|       `-CallExpr 0x55faf7697138 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7697028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7697098 <col:28> 'const char *' lvalue ParmVar 0x55faf76645e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf76970b8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55faf76970d8 <col:40> 'P' lvalue ParmVar 0x55faf7664658 'parser' 'P'
|         |-DeclRefExpr 0x55faf76970f8 <col:48> 'T' lvalue ParmVar 0x55faf76646f8 'x' 'T &'
|         `-DeclRefExpr 0x55faf7697118 <col:51> 'const V' lvalue ParmVar 0x55faf76647c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55faf7664f28 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55faf7664a20 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7664a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55faf7664b18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55faf7664e88 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55faf7664be0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7664c58 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7664cf8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55faf7664d98 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55faf7697320 <col:86, line:462:5>
|     `-ReturnStmt 0x55faf7697310 <line:461:9, col:73>
|       `-CallExpr 0x55faf76972c8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76971b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7697228 <col:28> 'const char *' lvalue ParmVar 0x55faf7664be0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7697248 <col:37> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int'
|         |-DeclRefExpr 0x55faf7697268 <col:49> 'P' lvalue ParmVar 0x55faf7664c58 'parser' 'P'
|         |-DeclRefExpr 0x55faf7697288 <col:57> 'T' lvalue ParmVar 0x55faf7664cf8 'x' 'T &'
|         `-DeclRefExpr 0x55faf76972a8 <col:60> 'const V' lvalue ParmVar 0x55faf7664d98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55faf7665588 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55faf7664fa0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7665018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55faf7665098 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55faf76654e8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55faf7665160 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76651e0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7665258 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55faf76652f8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55faf7665398 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55faf76974b0 <col:95, line:467:5>
|     |-CallExpr 0x55faf7697428 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7697338 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55faf7697378 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55faf7697388 <col:37> 'const char *' lvalue ParmVar 0x55faf7665160 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55faf76973a8 <col:46> 'int' lvalue ParmVar 0x55faf76651e0 'flags' 'int'
|     | |-DeclRefExpr 0x55faf76973c8 <col:53> 'P' lvalue ParmVar 0x55faf7665258 'parser' 'P'
|     | |-DeclRefExpr 0x55faf76973e8 <col:61> 'T' lvalue ParmVar 0x55faf76652f8 'x' 'T &'
|     | `-DeclRefExpr 0x55faf7697408 <col:64> 'const V' lvalue ParmVar 0x55faf7665398 'default_value' 'const V &'
|     `-ReturnStmt 0x55faf76974a0 <line:466:9, col:17>
|       `-UnaryOperator 0x55faf7697488 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7697478 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf7665b68 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55faf7665608 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7665688 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55faf7665708 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55faf7665ac8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55faf76657d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7665848 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55faf76658e8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55faf7665988 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55faf7697658 <col:63, line:481:5>
|     `-ReturnStmt 0x55faf7697648 <line:480:9, col:47>
|       `-CallExpr 0x55faf7697600 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76974e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7697560 <col:21> 'const char *' lvalue ParmVar 0x55faf76657d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7697580 <col:30> 'int' 0
|         |-DeclRefExpr 0x55faf76975a0 <col:33> 'P' lvalue ParmVar 0x55faf7665848 'parser' 'P'
|         |-DeclRefExpr 0x55faf76975c0 <col:41> 'T1' lvalue ParmVar 0x55faf76658e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55faf76975e0 <col:45> 'T2' lvalue ParmVar 0x55faf7665988 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55faf76660e8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55faf7665be0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7665c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55faf7665cd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55faf7666048 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55faf7665da0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7665e18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7665eb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55faf7665f58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55faf76977f8 <col:65, line:485:5>
|     `-ReturnStmt 0x55faf76977e8 <line:484:9, col:55>
|       `-CallExpr 0x55faf76977a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7697680 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7697700 <col:21> 'const char *' lvalue ParmVar 0x55faf7665da0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7697720 <col:30> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int'
|         |-DeclRefExpr 0x55faf7697740 <col:41> 'P' lvalue ParmVar 0x55faf7665e18 'parser' 'P'
|         |-DeclRefExpr 0x55faf7697760 <col:49> 'T1' lvalue ParmVar 0x55faf7665eb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55faf7697780 <col:53> 'T2' lvalue ParmVar 0x55faf7665f58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55faf7666668 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55faf7666160 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf76661d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55faf7666258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55faf76665c8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55faf7666320 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7666398 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7666438 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55faf76664d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55faf7697998 <col:65, line:489:5>
|     `-ReturnStmt 0x55faf7697988 <line:488:9, col:56>
|       `-CallExpr 0x55faf7697940 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7697820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf76978a0 <col:21> 'const char *' lvalue ParmVar 0x55faf7666320 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf76978c0 <col:30> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int'
|         |-DeclRefExpr 0x55faf76978e0 <col:42> 'P' lvalue ParmVar 0x55faf7666398 'parser' 'P'
|         |-DeclRefExpr 0x55faf7697900 <col:50> 'T1' lvalue ParmVar 0x55faf7666438 'x1' 'T1 &'
|         `-DeclRefExpr 0x55faf7697920 <col:54> 'T2' lvalue ParmVar 0x55faf76664d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55faf7666be8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55faf76666e0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7666758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55faf76667d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55faf7666b48 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55faf76668a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7666918 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55faf76669b8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55faf7666a58 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55faf7697be8 <col:66, line:493:5>
|     `-ReturnStmt 0x55faf7697bd8 <line:492:9, col:68>
|       `-CallExpr 0x55faf7697b90 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76979c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7697a40 <col:21> 'const char *' lvalue ParmVar 0x55faf76668a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55faf7697b10 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55faf7697ac0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55faf7697aa0 <col:30> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55faf7697af8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55faf7697ad8 <col:42> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55faf7697b30 <col:54> 'P' lvalue ParmVar 0x55faf7666918 'parser' 'P'
|         |-DeclRefExpr 0x55faf7697b50 <col:62> 'T1' lvalue ParmVar 0x55faf76669b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55faf7697b70 <col:66> 'T2' lvalue ParmVar 0x55faf7666a58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55faf766cba8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55faf7666c60 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7666cd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55faf766c6b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55faf766cb08 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55faf766c780 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766c800 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55faf766c878 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55faf766c918 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55faf766c9b8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55faf7697d78 <col:74, line:498:5>
|     |-CallExpr 0x55faf7697cf0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7697c00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55faf7697c40 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55faf7697c50 <col:30> 'const char *' lvalue ParmVar 0x55faf766c780 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55faf7697c70 <col:39> 'int' lvalue ParmVar 0x55faf766c800 'flags' 'int'
|     | |-DeclRefExpr 0x55faf7697c90 <col:46> 'P' lvalue ParmVar 0x55faf766c878 'parser' 'P'
|     | |-DeclRefExpr 0x55faf7697cb0 <col:54> 'T1' lvalue ParmVar 0x55faf766c918 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55faf7697cd0 <col:58> 'T2' lvalue ParmVar 0x55faf766c9b8 'x2' 'T2 &'
|     `-ReturnStmt 0x55faf7697d68 <line:497:9, col:17>
|       `-UnaryOperator 0x55faf7697d50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7697d40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf766cf08 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55faf766cc28 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf766ce68 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55faf766cce0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766cd58 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55faf7697ec0 <col:52, line:509:5>
|     `-ReturnStmt 0x55faf7697eb0 <line:508:9, col:44>
|       `-CallExpr 0x55faf7697e78 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7697da8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7697e18 <col:26> 'const char *' lvalue ParmVar 0x55faf766cce0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7697e38 <col:35> 'int' 0
|         `-DeclRefExpr 0x55faf7697e58 <col:38> 'P' lvalue ParmVar 0x55faf766cd58 'parser' 'P'
|-FunctionTemplateDecl 0x55faf766d208 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55faf766cf70 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf766d168 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55faf766d020 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766d098 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55faf7698000 <col:54, line:513:5>
|     `-ReturnStmt 0x55faf7697ff0 <line:512:9, col:52>
|       `-CallExpr 0x55faf7697fb8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7697ee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7697f58 <col:26> 'const char *' lvalue ParmVar 0x55faf766d020 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7697f78 <col:35> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int'
|         `-DeclRefExpr 0x55faf7697f98 <col:46> 'P' lvalue ParmVar 0x55faf766d098 'parser' 'P'
|-FunctionTemplateDecl 0x55faf766d508 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55faf766d270 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf766d468 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55faf766d320 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766d398 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55faf7698140 <col:54, line:517:5>
|     `-ReturnStmt 0x55faf7698130 <line:516:9, col:53>
|       `-CallExpr 0x55faf76980f8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7698028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7698098 <col:26> 'const char *' lvalue ParmVar 0x55faf766d320 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf76980b8 <col:35> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int'
|         `-DeclRefExpr 0x55faf76980d8 <col:47> 'P' lvalue ParmVar 0x55faf766d398 'parser' 'P'
|-FunctionTemplateDecl 0x55faf766d808 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55faf766d570 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf766d768 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55faf766d620 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766d698 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55faf7698330 <col:55, line:521:5>
|     `-ReturnStmt 0x55faf7698320 <line:520:9, col:65>
|       `-CallExpr 0x55faf76982e8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7698168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf76981d8 <col:26> 'const char *' lvalue ParmVar 0x55faf766d620 'keyword' 'const char *'
|         |-BinaryOperator 0x55faf76982a8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55faf7698258 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55faf7698238 <col:35> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55faf7698290 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55faf7698270 <col:47> 'const int' lvalue Var 0x55faf7660b20 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55faf76982c8 <col:59> 'P' lvalue ParmVar 0x55faf766d698 'parser' 'P'
|-FunctionTemplateDecl 0x55faf766dbd8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55faf766d870 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf766db38 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55faf766d920 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766d9a0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55faf766da18 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55faf7698470 <col:63, line:526:5>
|     |-CallExpr 0x55faf76983f8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7698348 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55faf7698388 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55faf7698398 <col:35> 'const char *' lvalue ParmVar 0x55faf766d920 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55faf76983b8 <col:44> 'int' lvalue ParmVar 0x55faf766d9a0 'flags' 'int'
|     | `-DeclRefExpr 0x55faf76983d8 <col:51> 'P' lvalue ParmVar 0x55faf766da18 'parser' 'P'
|     `-ReturnStmt 0x55faf7698460 <line:525:9, col:17>
|       `-UnaryOperator 0x55faf7698448 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7698438 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf766e028 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55faf766dc48 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf766dcc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf766df88 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf766dd88 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766de00 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55faf766dea8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55faf76985c8 <col:58, line:541:5>
|     `-ReturnStmt 0x55faf76985b8 <line:540:9, col:39>
|       `-CallExpr 0x55faf7698580 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76984a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7698520 <col:21> 'const char *' lvalue ParmVar 0x55faf766dd88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7698540 <col:30> 'P' lvalue ParmVar 0x55faf766de00 'parser' 'P'
|         `-DeclRefExpr 0x55faf7698560 <col:38> 'T' lvalue ParmVar 0x55faf766dea8 'x' 'T &'
|-FunctionTemplateDecl 0x55faf766e478 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55faf766e098 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf766e118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf766e3d8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf766e1d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766e250 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55faf766e2f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55faf7698700 <col:60, line:545:5>
|     `-ReturnStmt 0x55faf76986f0 <line:544:9, col:41>
|       `-CallExpr 0x55faf76986b8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76985f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7698658 <col:23> 'const char *' lvalue ParmVar 0x55faf766e1d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7698678 <col:32> 'P' lvalue ParmVar 0x55faf766e250 'parser' 'P'
|         `-DeclRefExpr 0x55faf7698698 <col:40> 'T' lvalue ParmVar 0x55faf766e2f8 'x' 'T &'
|-FunctionTemplateDecl 0x55faf766e8c8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55faf766e4e8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf766e568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf766e828 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf766e628 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766e6a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55faf766e748 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55faf7698838 <col:60, line:549:5>
|     `-ReturnStmt 0x55faf7698828 <line:548:9, col:41>
|       `-CallExpr 0x55faf76987f0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7698728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7698790 <col:23> 'const char *' lvalue ParmVar 0x55faf766e628 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf76987b0 <col:32> 'P' lvalue ParmVar 0x55faf766e6a0 'parser' 'P'
|         `-DeclRefExpr 0x55faf76987d0 <col:40> 'T' lvalue ParmVar 0x55faf766e748 'x' 'T &'
|-FunctionTemplateDecl 0x55faf766ed18 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55faf766e938 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf766e9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf766ec78 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf766ea78 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766eaf0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55faf766eb98 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55faf7698970 <col:61, line:553:5>
|     `-ReturnStmt 0x55faf7698960 <line:552:9, col:42>
|       `-CallExpr 0x55faf7698928 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7698860 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf76988c8 <col:24> 'const char *' lvalue ParmVar 0x55faf766ea78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf76988e8 <col:33> 'P' lvalue ParmVar 0x55faf766eaf0 'parser' 'P'
|         `-DeclRefExpr 0x55faf7698908 <col:41> 'T' lvalue ParmVar 0x55faf766eb98 'x' 'T &'
|-FunctionTemplateDecl 0x55faf766f1f8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55faf766ed88 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf766ee08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf766f158 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55faf766eec8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766ef48 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55faf766efc0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55faf766f068 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55faf7698ae8 <col:69, line:557:5>
|     `-ReturnStmt 0x55faf7698ad8 <line:556:9, col:46>
|       `-CallExpr 0x55faf7698a98 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7698998 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7698a18 <col:21> 'const char *' lvalue ParmVar 0x55faf766eec8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf7698a38 <col:30> 'int' lvalue ParmVar 0x55faf766ef48 'flags' 'int'
|         |-DeclRefExpr 0x55faf7698a58 <col:37> 'P' lvalue ParmVar 0x55faf766efc0 'parser' 'P'
|         `-DeclRefExpr 0x55faf7698a78 <col:45> 'T' lvalue ParmVar 0x55faf766f068 'x' 'T &'
|-FunctionTemplateDecl 0x55faf766f508 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55faf766f270 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf766f468 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55faf766f320 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766f398 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55faf7698c28 <col:56, line:571:5>
|     `-ReturnStmt 0x55faf7698c18 <line:570:9, col:48>
|       `-CallExpr 0x55faf7698be0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7698b10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7698b80 <col:30> 'const char *' lvalue ParmVar 0x55faf766f320 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7698ba0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55faf7698bc0 <col:42> 'P' lvalue ParmVar 0x55faf766f398 'parser' 'P'
|-FunctionTemplateDecl 0x55faf766f898 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55faf766f570 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf766f7f8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55faf766f620 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766f6a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55faf766f718 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55faf7698df8 <col:67, line:576:5>
|     |-CallExpr 0x55faf7698d80 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7698c40 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55faf7698c80 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55faf7698c90 <col:39> 'const char *' lvalue ParmVar 0x55faf766f620 'keyword' 'const char *'
|     | |-BinaryOperator 0x55faf7698d40 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55faf7698cf0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55faf7698cb0 <col:48> 'int' lvalue ParmVar 0x55faf766f6a0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55faf7698d28 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55faf7698d08 <col:56> 'const int' lvalue Var 0x55faf7660d10 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55faf7698d60 <col:68> 'P' lvalue ParmVar 0x55faf766f718 'parser' 'P'
|     `-ReturnStmt 0x55faf7698de8 <line:575:9, col:17>
|       `-UnaryOperator 0x55faf7698dd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7698dc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf766fce8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55faf766f908 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf766f988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf766fc48 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55faf766fa48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766fac0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55faf766fb68 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55faf7698f68 <col:62, line:592:5>
|     `-ReturnStmt 0x55faf7698f58 <line:591:9, col:51>
|       `-CallExpr 0x55faf7698f18 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7698e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7698e98 <col:30> 'const char *' lvalue ParmVar 0x55faf766fa48 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7698eb8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55faf7698ed8 <col:42> 'P' lvalue ParmVar 0x55faf766fac0 'parser' 'P'
|         `-DeclRefExpr 0x55faf7698ef8 <col:50> 'T' lvalue ParmVar 0x55faf766fb68 'x' 'T &'
|-FunctionTemplateDecl 0x55faf76701c8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55faf766fd58 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf766fdd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf7670128 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55faf766fe98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf766ff18 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55faf766ff90 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7670038 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55faf7699160 <col:73, line:597:5>
|     |-CallExpr 0x55faf76990e0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7698f80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55faf7698fc0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55faf7698fd0 <col:39> 'const char *' lvalue ParmVar 0x55faf766fe98 'keyword' 'const char *'
|     | |-BinaryOperator 0x55faf7699080 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55faf7699030 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55faf7698ff0 <col:48> 'int' lvalue ParmVar 0x55faf766ff18 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55faf7699068 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55faf7699048 <col:56> 'const int' lvalue Var 0x55faf7660d10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55faf76990a0 <col:68> 'P' lvalue ParmVar 0x55faf766ff90 'parser' 'P'
|     | `-DeclRefExpr 0x55faf76990c0 <col:76> 'T' lvalue ParmVar 0x55faf7670038 'x' 'T &'
|     `-ReturnStmt 0x55faf7699150 <line:596:9, col:17>
|       `-UnaryOperator 0x55faf7699138 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf7699128 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf7670778 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55faf7670240 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf76702b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf76706d8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55faf7670378 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76703f0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55faf76705b0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55faf76992d0 <col:65, line:614:5>
|     `-ReturnStmt 0x55faf76992c0 <line:613:9, col:46>
|       `-CallExpr 0x55faf7699280 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7699190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7699200 <col:25> 'const char *' lvalue ParmVar 0x55faf7670378 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7699220 <col:34> 'int' 0
|         |-DeclRefExpr 0x55faf7699240 <col:37> 'P' lvalue ParmVar 0x55faf76703f0 'parser' 'P'
|         `-DeclRefExpr 0x55faf7699260 <col:45> 'Vector<T>' lvalue ParmVar 0x55faf76705b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55faf7670ba8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55faf76707e8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf7670b08 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55faf76708a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76709f0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55faf76994f0 <col:55, line:618:5>
|     `-ReturnStmt 0x55faf76994e0 <line:617:9, col:55>
|       `-CallExpr 0x55faf76994a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf76992f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7699368 <col:25> 'const char *' lvalue ParmVar 0x55faf76708a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55faf7699388 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55faf7699460 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55faf7699480 <col:54> 'Vector<T>' lvalue ParmVar 0x55faf76709f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55faf7671178 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55faf7670c10 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7670c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf76710d8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55faf7670d48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7670dc8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7670e40 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7670f90 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55faf76996e8 <col:76, line:623:5>
|     |-CallExpr 0x55faf7699668 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55faf7699508 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55faf7699548 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55faf7699558 <col:34> 'const char *' lvalue ParmVar 0x55faf7670d48 'keyword' 'const char *'
|     | |-BinaryOperator 0x55faf7699608 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55faf76995b8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55faf7699578 <col:43> 'int' lvalue ParmVar 0x55faf7670dc8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55faf76995f0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55faf76995d0 <col:51> 'const int' lvalue Var 0x55faf7660d10 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55faf7699628 <col:63> 'P' lvalue ParmVar 0x55faf7670e40 'parser' 'P'
|     | `-DeclRefExpr 0x55faf7699648 <col:71> 'Vector<T>' lvalue ParmVar 0x55faf7670f90 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55faf76996d8 <line:622:9, col:17>
|       `-UnaryOperator 0x55faf76996c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf76996b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf76716b8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55faf76711f0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7671268 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf7671618 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55faf7671328 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76713a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55faf76714f0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55faf7699950 <col:66, line:627:5>
|     `-ReturnStmt 0x55faf7699940 <line:626:9, col:59>
|       `-CallExpr 0x55faf7699900 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55faf7699718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55faf7699788 <col:25> 'const char *' lvalue ParmVar 0x55faf7671328 'keyword' 'const char *'
|         |-DeclRefExpr 0x55faf76997a8 <col:34> 'int' lvalue ParmVar 0x55faf76713a8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55faf76998c0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55faf76998e0 <col:58> 'Vector<T>' lvalue ParmVar 0x55faf76714f0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55faf7671748 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55faf76999d0 <col:25, line:633:5>
|   `-ReturnStmt 0x55faf76999c0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55faf76999a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55faf7699978 <col:16> 'const bool' lvalue ->_status 0x55faf767fef8
|         `-CXXThisExpr 0x55faf7699968 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55faf76718c8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55faf7671800 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55faf7699ab8 <col:27, line:639:5>
|   |-BinaryOperator 0x55faf7699a60 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55faf76999e8 <col:9> 'bool' lvalue ParmVar 0x55faf7671800 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55faf7699a48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55faf7699a18 <col:13> 'bool' lvalue ->_status 0x55faf767fef8
|   |     `-CXXThisExpr 0x55faf7699a08 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55faf7699aa8 <line:638:9, col:17>
|     `-UnaryOperator 0x55faf7699a90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf7699a80 <col:17> 'Args *' this
|-CXXMethodDecl 0x55faf7671a48 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55faf7671988 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55faf7699ba8 <col:39, line:644:5>
|   |-BinaryOperator 0x55faf7699b50 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55faf7699ad8 <col:9> 'bool' lvalue ParmVar 0x55faf7671988 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55faf7699b38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55faf7699b08 <col:13> 'const bool' lvalue ->_status 0x55faf767fef8
|   |     `-CXXThisExpr 0x55faf7699af8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55faf7699b98 <line:643:9, col:17>
|     `-UnaryOperator 0x55faf7699b80 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf7699b70 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55faf7671b10 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55faf7699c50 <col:30, line:651:5>
|   `-ReturnStmt 0x55faf7699c40 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55faf7699c28 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55faf7699bf8 <col:16> 'bool' lvalue ->_read_status 0x55faf75750f0
|         `-ImplicitCastExpr 0x55faf7699bd8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55faf7699bc8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55faf7671c58 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55faf7671bc8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55faf7699d58 <col:32, line:658:5>
|   |-BinaryOperator 0x55faf7699d00 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55faf7699c68 <col:9> 'bool' lvalue ParmVar 0x55faf7671bc8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55faf7699ce8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55faf7699cb8 <col:13> 'bool' lvalue ->_read_status 0x55faf75750f0
|   |     `-ImplicitCastExpr 0x55faf7699c98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55faf7699c88 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55faf7699d48 <line:657:9, col:17>
|     `-UnaryOperator 0x55faf7699d30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf7699d20 <col:17> 'Args *' this
|-CXXMethodDecl 0x55faf7671da8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55faf7671d18 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55faf7699e68 <col:44, line:663:5>
|   |-BinaryOperator 0x55faf7699e10 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55faf7699d78 <col:9> 'bool' lvalue ParmVar 0x55faf7671d18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55faf7699df8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55faf7699dc8 <col:13> 'bool' lvalue ->_read_status 0x55faf75750f0
|   |     `-ImplicitCastExpr 0x55faf7699da8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55faf7699d98 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55faf7699e58 <line:662:9, col:17>
|     `-UnaryOperator 0x55faf7699e40 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf7699e30 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55faf7671e70 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55faf7671f38 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55faf7672000 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55faf76720c8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55faf76723d8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55faf7672168 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf7672338 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55faf7672248 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55faf769a220 <col:19, line:706:5>
|     `-IfStmt 0x55faf769a1f8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55faf7699f68 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55faf769a128 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55faf769a0f8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55faf769a0b8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55faf7699fc0 <col:42> '<bound member function type>' ->simple_slot 0x55faf76933c0
|       |     | `-CXXThisExpr 0x55faf7699fb0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55faf769a058 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55faf769a010 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55faf73fefd8
|       |     | `-DeclRefExpr 0x55faf7699ff0 <col:55> 'T' lvalue ParmVar 0x55faf7672248 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55faf769a098 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55faf769a1e8 <line:705:13, col:34>
|         `-CallExpr 0x55faf769a1c0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55faf769a148 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55faf769a1a0 <col:33> 'T' lvalue ParmVar 0x55faf7672248 'x' 'T &'
|-FunctionTemplateDecl 0x55faf76726a8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55faf7672438 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf7672608 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55faf7672518 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55faf769a600 <col:31, line:717:5>
|     |-DeclStmt 0x55faf769a360 <line:713:9, col:23>
|     | `-VarDecl 0x55faf769a248 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55faf769a338 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55faf769a2c0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55faf769a318 <col:21> 'T' lvalue ParmVar 0x55faf7672518 'x' 'T &'
|     |-IfStmt 0x55faf769a5b0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55faf769a458 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55faf769a590 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55faf769a530 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55faf769a4c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|     |   | `-DeclRefExpr 0x55faf769a4a0 <col:14> 'T *' lvalue Var 0x55faf769a248 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55faf769a570 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55faf769a5e8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55faf769a5c8 <col:16> 'T *' lvalue Var 0x55faf769a248 's' 'T *'
|-FunctionTemplateDecl 0x55faf7672ab8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55faf7672708 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55faf7672788 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55faf7672a18 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55faf7672868 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55faf7672908 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55faf769a910 <col:37, line:726:5>
|     |-IfStmt 0x55faf769a8a0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55faf769a8c0 <line:723:13, col:26>
|     | | `-VarDecl 0x55faf769a668 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55faf769a758 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55faf769a6e0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55faf769a738 <col:25> 'T' lvalue ParmVar 0x55faf7672868 'x' 'T &'
|     | |-DeclRefExpr 0x55faf769a780 <col:16> 'T *' lvalue Var 0x55faf769a668 's' 'T *'
|     | `-BinaryOperator 0x55faf769a880 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55faf769a830 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55faf769a7c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|     |   | `-DeclRefExpr 0x55faf769a7a0 <col:14> 'T *' lvalue Var 0x55faf769a668 's' 'T *'
|     |   `-DeclRefExpr 0x55faf769a860 <col:18> 'const V' lvalue ParmVar 0x55faf7672908 'value' 'const V &'
|     `-ReturnStmt 0x55faf769a900 <line:725:9, col:17>
|       `-UnaryOperator 0x55faf769a8e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55faf769a8d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55faf7672eb8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55faf7672b20 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55faf7672e18 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55faf7672bd0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7672c50 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7672cf8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55faf769b730 <col:65, line:737:5>
|     |-DeclStmt 0x55faf769a9a8 <line:732:9, col:26>
|     | `-VarDecl 0x55faf769a940 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55faf769b6f8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55faf769b718 <line:733:13, col:58>
|       | `-VarDecl 0x55faf769a9d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55faf769abb0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55faf769ab80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55faf769ab68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55faf769ab48 <col:26, col:58> 'String' (CXXTemporary 0x55faf769ab48)
|       |           `-CXXMemberCallExpr 0x55faf769aad8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55faf769aa48 <col:26> '<bound member function type>' ->find 0x55faf76929d8
|       |             | `-CXXThisExpr 0x55faf769aa38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55faf769ab10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf769aa78 <col:31> 'const char *' lvalue ParmVar 0x55faf7672bd0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55faf769ab28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf769aa98 <col:40> 'int' lvalue ParmVar 0x55faf7672c50 'flags' 'int'
|       |             `-DeclRefExpr 0x55faf769aab8 <col:47> 'Args::Slot *' lvalue Var 0x55faf769a940 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55faf769ac68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55faf769ac50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55faf769ac30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55faf769ac00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|       |       `-ImplicitCastExpr 0x55faf769abe8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55faf769abc8 <col:20> 'String' lvalue Var 0x55faf769a9d0 'str' 'String'
|       `-CompoundStmt 0x55faf769b6d8 <col:61, line:736:9>
|         |-DeclStmt 0x55faf769b120 <line:734:13, col:76>
|         | `-VarDecl 0x55faf769acb8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55faf769b0f0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55faf769b060 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55faf769b0a8 <col:60> 'T' lvalue ParmVar 0x55faf7672cf8 'variable' 'T &'
|         |     `-UnaryOperator 0x55faf769b0d8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55faf769b0c8 <col:71> 'Args *' this
|         `-CallExpr 0x55faf769b6a8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55faf769b148 <col:13> '<bound member function type>' ->postparse 0x55faf7692be8
|           | `-CXXThisExpr 0x55faf769b138 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55faf769b668 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55faf769b178 <col:23> 'T *' lvalue Var 0x55faf769acb8 's' 'T *'
|           | `-CallExpr 0x55faf769b628 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55faf769b400 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55faf769b500 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55faf769b520 <col:86> 'String' lvalue Var 0x55faf769a9d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55faf769b5d0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55faf769b560 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|           |   | `-DeclRefExpr 0x55faf769b540 <col:92> 'T *' lvalue Var 0x55faf769acb8 's' 'T *'
|           |   `-UnaryOperator 0x55faf769b610 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55faf769b600 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55faf769b688 <col:103> 'Args::Slot *' lvalue Var 0x55faf769a940 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55faf7673408 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55faf7672f28 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55faf7672fa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55faf7673368 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55faf7673068 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf76730e8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7673188 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55faf7673228 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55faf769c5d0 <col:88, line:745:5>
|     |-DeclStmt 0x55faf769b7c8 <line:741:9, col:26>
|     | `-VarDecl 0x55faf769b760 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55faf769b9e8 <line:742:9, col:55>
|     | `-VarDecl 0x55faf769b7f0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55faf769b9d0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55faf769b9a0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55faf769b988 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55faf769b968 <col:22, col:54> 'String' (CXXTemporary 0x55faf769b968)
|     |           `-CXXMemberCallExpr 0x55faf769b8f8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55faf769b868 <col:22> '<bound member function type>' ->find 0x55faf76929d8
|     |             | `-CXXThisExpr 0x55faf769b858 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55faf769b930 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55faf769b898 <col:27> 'const char *' lvalue ParmVar 0x55faf7673068 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55faf769b948 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55faf769b8b8 <col:36> 'int' lvalue ParmVar 0x55faf76730e8 'flags' 'int'
|     |             `-DeclRefExpr 0x55faf769b8d8 <col:43> 'Args::Slot *' lvalue Var 0x55faf769b760 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55faf769bdc0 <line:743:9, col:72>
|     | `-VarDecl 0x55faf769ba38 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55faf769bd90 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55faf769bd00 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55faf769bd48 <col:56> 'T' lvalue ParmVar 0x55faf7673188 'variable' 'T &'
|     |     `-UnaryOperator 0x55faf769bd78 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55faf769bd68 <col:67> 'Args *' this
|     `-CallExpr 0x55faf769c5a0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55faf769bde8 <col:9> '<bound member function type>' ->postparse 0x55faf7692be8
|       | `-CXXThisExpr 0x55faf769bdd8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55faf769c560 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55faf769be18 <col:19> 'T *' lvalue Var 0x55faf769ba38 's' 'T *'
|       | `-ParenExpr 0x55faf769c540 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55faf769c510 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55faf769c4f8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55faf769c4e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55faf769c4c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55faf769c490 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|       |     |       `-ImplicitCastExpr 0x55faf769c478 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55faf769be38 <col:25> 'String' lvalue Var 0x55faf769b7f0 'str' 'String'
|       |     |-CallExpr 0x55faf769c2e8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55faf769c0c0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55faf769c1c0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55faf769c1e0 <col:89> 'String' lvalue Var 0x55faf769b7f0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55faf769c290 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55faf769c220 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|       |     | | `-DeclRefExpr 0x55faf769c200 <col:95> 'T *' lvalue Var 0x55faf769ba38 's' 'T *'
|       |     | `-UnaryOperator 0x55faf769c2d0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55faf769c2c0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55faf769c458 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55faf769c438 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55faf769c408 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55faf769c3b8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55faf769c348 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|       |         | | `-DeclRefExpr 0x55faf769c328 <col:109> 'T *' lvalue Var 0x55faf769ba38 's' 'T *'
|       |         | `-DeclRefExpr 0x55faf769c3e8 <col:113> 'const V' lvalue ParmVar 0x55faf7673228 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55faf769c428 <col:120> 'bool' true
|       `-DeclRefExpr 0x55faf769c580 <col:128> 'Args::Slot *' lvalue Var 0x55faf769b760 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55faf7673938 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55faf7673480 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf76734f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf7673898 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55faf76735b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7673638 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55faf76736b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7673758 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55faf769d1c8 <col:75, line:754:5>
|     |-DeclStmt 0x55faf769c678 <line:749:9, col:26>
|     | `-VarDecl 0x55faf769c610 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55faf769d190 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55faf769d1b0 <line:750:13, col:58>
|       | `-VarDecl 0x55faf769c6a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55faf769c880 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55faf769c850 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55faf769c838 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55faf769c818 <col:26, col:58> 'String' (CXXTemporary 0x55faf769c818)
|       |           `-CXXMemberCallExpr 0x55faf769c7a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55faf769c718 <col:26> '<bound member function type>' ->find 0x55faf76929d8
|       |             | `-CXXThisExpr 0x55faf769c708 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55faf769c7e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf769c748 <col:31> 'const char *' lvalue ParmVar 0x55faf76735b8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55faf769c7f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf769c768 <col:40> 'int' lvalue ParmVar 0x55faf7673638 'flags' 'int'
|       |             `-DeclRefExpr 0x55faf769c788 <col:47> 'Args::Slot *' lvalue Var 0x55faf769c610 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55faf769c938 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55faf769c920 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55faf769c900 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55faf769c8d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|       |       `-ImplicitCastExpr 0x55faf769c8b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55faf769c898 <col:20> 'String' lvalue Var 0x55faf769c6a0 'str' 'String'
|       `-CompoundStmt 0x55faf769d170 <col:61, line:753:9>
|         |-DeclStmt 0x55faf769cd10 <line:751:13, col:63>
|         | `-VarDecl 0x55faf769c988 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55faf769cce0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55faf769cc50 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55faf769cc98 <col:47> 'T' lvalue ParmVar 0x55faf7673758 'variable' 'T &'
|         |     `-UnaryOperator 0x55faf769ccc8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55faf769ccb8 <col:58> 'Args *' this
|         `-CallExpr 0x55faf769d140 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55faf769cd38 <col:13> '<bound member function type>' ->postparse 0x55faf7692be8
|           | `-CXXThisExpr 0x55faf769cd28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55faf769d100 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55faf769cd68 <col:23> 'T *' lvalue Var 0x55faf769c988 's' 'T *'
|           | `-CallExpr 0x55faf769d0c0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55faf769cf50 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55faf769cf98 <col:56> 'P' lvalue ParmVar 0x55faf76736b0 'parser' 'P'
|           |   |-DeclRefExpr 0x55faf769cfb8 <col:64> 'String' lvalue Var 0x55faf769c6a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55faf769d068 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55faf769cff8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|           |   | `-DeclRefExpr 0x55faf769cfd8 <col:70> 'T *' lvalue Var 0x55faf769c988 's' 'T *'
|           |   `-UnaryOperator 0x55faf769d0a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55faf769d098 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55faf769d120 <col:81> 'Args::Slot *' lvalue Var 0x55faf769c610 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55faf7673f98 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55faf76739b0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55faf7673a28 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55faf7673aa8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55faf7673ef8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55faf7673b70 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7673bf0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55faf7673c68 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7673d08 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55faf7673da8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55faf76a02f8 <col:98, line:762:5>
|     |-DeclStmt 0x55faf769d260 <line:758:9, col:26>
|     | `-VarDecl 0x55faf769d1f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55faf769d480 <line:759:9, col:55>
|     | `-VarDecl 0x55faf769d288 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55faf769d468 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55faf769d438 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55faf769d420 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55faf769d400 <col:22, col:54> 'String' (CXXTemporary 0x55faf769d400)
|     |           `-CXXMemberCallExpr 0x55faf769d390 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55faf769d300 <col:22> '<bound member function type>' ->find 0x55faf76929d8
|     |             | `-CXXThisExpr 0x55faf769d2f0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55faf769d3c8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55faf769d330 <col:27> 'const char *' lvalue ParmVar 0x55faf7673b70 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55faf769d3e0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55faf769d350 <col:36> 'int' lvalue ParmVar 0x55faf7673bf0 'flags' 'int'
|     |             `-DeclRefExpr 0x55faf769d370 <col:43> 'Args::Slot *' lvalue Var 0x55faf769d1f8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55faf769d8a0 <line:760:9, col:59>
|     | `-VarDecl 0x55faf769d4d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55faf769d870 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55faf769d7e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55faf769d828 <col:43> 'T' lvalue ParmVar 0x55faf7673d08 'variable' 'T &'
|     |     `-UnaryOperator 0x55faf769d858 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55faf769d848 <col:54> 'Args *' this
|     `-CallExpr 0x55faf76a02c8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55faf769d8c8 <col:9> '<bound member function type>' ->postparse 0x55faf7692be8
|       | `-CXXThisExpr 0x55faf769d8b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55faf76a0288 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55faf769d8f8 <col:19> 'T *' lvalue Var 0x55faf769d4d8 's' 'T *'
|       | `-ParenExpr 0x55faf76a0268 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55faf76a0238 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55faf76a0220 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55faf76a0208 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55faf76a01e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55faf76a01b8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|       |     |       `-ImplicitCastExpr 0x55faf76a01a0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55faf769d918 <col:25> 'String' lvalue Var 0x55faf769d288 'str' 'String'
|       |     |-CallExpr 0x55faf769dc70 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55faf769db00 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55faf769db48 <col:59> 'P' lvalue ParmVar 0x55faf7673c68 'parser' 'P'
|       |     | |-DeclRefExpr 0x55faf769db68 <col:67> 'String' lvalue Var 0x55faf769d288 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55faf769dc18 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55faf769dba8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|       |     | | `-DeclRefExpr 0x55faf769db88 <col:73> 'T *' lvalue Var 0x55faf769d4d8 's' 'T *'
|       |     | `-UnaryOperator 0x55faf769dc58 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55faf769dc48 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55faf76a0180 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55faf76a0160 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55faf76a0130 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55faf76a00e0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55faf76a0070 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|       |         | | `-DeclRefExpr 0x55faf76a0050 <col:87> 'T *' lvalue Var 0x55faf769d4d8 's' 'T *'
|       |         | `-DeclRefExpr 0x55faf76a0110 <col:91> 'const V' lvalue ParmVar 0x55faf7673da8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55faf76a0150 <col:98> 'bool' true
|       `-DeclRefExpr 0x55faf76a02a8 <col:106> 'Args::Slot *' lvalue Var 0x55faf769d1f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55faf7674608 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55faf7674018 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf7674098 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55faf7674118 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55faf7674568 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55faf76741e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf7674260 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55faf76742d8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55faf7674378 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55faf7674418 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55faf76a12d8 <col:60, line:773:5>
|     |-DeclStmt 0x55faf76a03a0 <line:767:9, col:26>
|     | `-VarDecl 0x55faf76a0338 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55faf76a12a0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55faf76a12c0 <line:768:13, col:58>
|       | `-VarDecl 0x55faf76a03c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55faf76a05a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55faf76a0578 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55faf76a0560 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55faf76a0540 <col:26, col:58> 'String' (CXXTemporary 0x55faf76a0540)
|       |           `-CXXMemberCallExpr 0x55faf76a04d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55faf76a0440 <col:26> '<bound member function type>' ->find 0x55faf76929d8
|       |             | `-CXXThisExpr 0x55faf76a0430 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55faf76a0508 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf76a0470 <col:31> 'const char *' lvalue ParmVar 0x55faf76741e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55faf76a0520 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf76a0490 <col:40> 'int' lvalue ParmVar 0x55faf7674260 'flags' 'int'
|       |             `-DeclRefExpr 0x55faf76a04b0 <col:47> 'Args::Slot *' lvalue Var 0x55faf76a0338 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55faf76a0660 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55faf76a0648 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55faf76a0628 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55faf76a05f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|       |       `-ImplicitCastExpr 0x55faf76a05e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55faf76a05c0 <col:20> 'String' lvalue Var 0x55faf76a03c8 'str' 'String'
|       `-CompoundStmt 0x55faf76a1278 <col:61, line:772:9>
|         |-DeclStmt 0x55faf76a09a0 <line:769:13, col:66>
|         | `-VarDecl 0x55faf76a06b8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55faf76a0970 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55faf76a08e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55faf76a0928 <col:49> 'T1' lvalue ParmVar 0x55faf7674378 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55faf76a0958 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55faf76a0948 <col:61> 'Args *' this
|         |-DeclStmt 0x55faf76a0d10 <line:770:13, col:66>
|         | `-VarDecl 0x55faf76a0a28 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55faf76a0ce0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55faf76a0c50 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55faf76a0c98 <col:49> 'T2' lvalue ParmVar 0x55faf7674418 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55faf76a0cc8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55faf76a0cb8 <col:61> 'Args *' this
|         `-CallExpr 0x55faf76a1248 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55faf76a0d38 <col:13> '<bound member function type>' ->postparse 0x55faf7692be8
|           | `-CXXThisExpr 0x55faf76a0d28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55faf76a1208 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55faf76a0da8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55faf76a0d68 <col:23> 'T1 *' lvalue Var 0x55faf76a06b8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55faf76a0d88 <col:29> 'T2 *' lvalue Var 0x55faf76a0a28 's2' 'T2 *'
|           | `-CallExpr 0x55faf76a11c0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55faf76a0f90 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55faf76a0fd8 <col:63> 'P' lvalue ParmVar 0x55faf76742d8 'parser' 'P'
|           |   |-DeclRefExpr 0x55faf76a0ff8 <col:71> 'String' lvalue Var 0x55faf76a03c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55faf76a10a8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55faf76a1038 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|           |   | `-DeclRefExpr 0x55faf76a1018 <col:77> 'T1 *' lvalue Var 0x55faf76a06b8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55faf76a1168 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55faf76a10f8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|           |   | `-DeclRefExpr 0x55faf76a10d8 <col:82> 'T2 *' lvalue Var 0x55faf76a0a28 's2' 'T2 *'
|           |   `-UnaryOperator 0x55faf76a11a8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55faf76a1198 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55faf76a1228 <col:94> 'Args::Slot *' lvalue Var 0x55faf76a0338 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55faf767d368 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55faf767d000 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf767d2c8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55faf767d0b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf767d130 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55faf767d1a8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55faf76a17f0 <col:67, line:780:5>
|     |-DeclStmt 0x55faf76a1370 <line:777:9, col:26>
|     | `-VarDecl 0x55faf76a1308 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55faf76a17b8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55faf76a17d8 <line:778:13, col:58>
|       | `-VarDecl 0x55faf76a1398 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55faf76a1578 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55faf76a1548 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55faf76a1530 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55faf76a1510 <col:26, col:58> 'String' (CXXTemporary 0x55faf76a1510)
|       |           `-CXXMemberCallExpr 0x55faf76a14a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55faf76a1410 <col:26> '<bound member function type>' ->find 0x55faf76929d8
|       |             | `-CXXThisExpr 0x55faf76a1400 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55faf76a14d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf76a1440 <col:31> 'const char *' lvalue ParmVar 0x55faf767d0b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55faf76a14f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55faf76a1460 <col:40> 'int' lvalue ParmVar 0x55faf767d130 'flags' 'int'
|       |             `-DeclRefExpr 0x55faf76a1480 <col:47> 'Args::Slot *' lvalue Var 0x55faf76a1308 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55faf76a1630 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55faf76a1618 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55faf76a15f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55faf76a15c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|       |       `-ImplicitCastExpr 0x55faf76a15b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55faf76a1590 <col:20> 'String' lvalue Var 0x55faf76a1398 'str' 'String'
|       `-CallExpr 0x55faf76a1788 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55faf76a1658 <col:13> '<bound member function type>' ->postparse 0x55faf7692be8
|         | `-CXXThisExpr 0x55faf76a1648 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55faf76a1738 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55faf76a16a8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55faf76a1688 <col:23> 'P' lvalue ParmVar 0x55faf767d1a8 'parser' 'P'
|         | |-DeclRefExpr 0x55faf76a16f0 <col:36> 'String' lvalue Var 0x55faf76a1398 'str' 'String'
|         | `-UnaryOperator 0x55faf76a1720 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55faf76a1710 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55faf76a1768 <col:49> 'Args::Slot *' lvalue Var 0x55faf76a1308 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55faf767d708 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55faf767d3d8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55faf767d668 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55faf767d490 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf767d510 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55faf767d588 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55faf76a2160 <col:71, line:792:5>
|     |-DeclStmt 0x55faf76a1888 <line:784:9, col:26>
|     | `-VarDecl 0x55faf76a1820 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55faf76a1958 <line:785:9, col:29>
|     | `-VarDecl 0x55faf76a18b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55faf76a1940 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55faf76a1920 <col:28> 'int' 1
|     |-WhileStmt 0x55faf76a2010 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55faf76a2030 <line:786:16, col:61>
|     | | `-VarDecl 0x55faf76a1980 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55faf76a1b60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55faf76a1b30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55faf76a1b18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55faf76a1af8 <col:29, col:61> 'String' (CXXTemporary 0x55faf76a1af8)
|     | |           `-CXXMemberCallExpr 0x55faf76a1a88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55faf76a19f8 <col:29> '<bound member function type>' ->find 0x55faf76929d8
|     | |             | `-CXXThisExpr 0x55faf76a19e8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55faf76a1ac0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55faf76a1a28 <col:34> 'const char *' lvalue ParmVar 0x55faf767d490 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55faf76a1ad8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55faf76a1a48 <col:43> 'int' lvalue ParmVar 0x55faf767d510 'flags' 'int'
|     | |             `-DeclRefExpr 0x55faf76a1a68 <col:50> 'Args::Slot *' lvalue Var 0x55faf76a1820 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55faf76a1c18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55faf76a1c00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55faf76a1be0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55faf76a1bb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|     | |       `-ImplicitCastExpr 0x55faf76a1b98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55faf76a1b78 <col:23> 'String' lvalue Var 0x55faf76a1980 'str' 'String'
|     | `-CompoundStmt 0x55faf76a1fe8 <col:64, line:790:9>
|     |   |-CallExpr 0x55faf76a1d70 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55faf76a1c40 <col:13> '<bound member function type>' ->postparse 0x55faf7692be8
|     |   | | `-CXXThisExpr 0x55faf76a1c30 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55faf76a1d20 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55faf76a1c90 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55faf76a1c70 <col:23> 'P' lvalue ParmVar 0x55faf767d588 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55faf76a1cd8 <col:36> 'String' lvalue Var 0x55faf76a1980 'str' 'String'
|     |   | | `-UnaryOperator 0x55faf76a1d08 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55faf76a1cf8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55faf76a1d50 <col:49> 'Args::Slot *' lvalue Var 0x55faf76a1820 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55faf76a1f08 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55faf76a1da0 <col:13> 'int' lvalue Var 0x55faf76a18b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55faf76a1ef0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55faf76a1ed0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55faf76a1e38 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55faf76a1e18 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55faf76a1e00 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55faf76a1dc0 <col:28> 'int' lvalue Var 0x55faf76a18b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55faf76a1de0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55faf76a1eb8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55faf76a1e88 <col:49> 'bool' lvalue ->_read_status 0x55faf75750f0
|     |   |         `-ImplicitCastExpr 0x55faf76a1e68 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55faf76a1e58 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55faf76a1fb8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55faf76a1f28 <col:13> 'int' lvalue ParmVar 0x55faf767d510 'flags' 'int'
|     |     `-UnaryOperator 0x55faf76a1fa0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55faf76a1f88 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55faf76a1f68 <col:23> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55faf76a2140 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55faf76a2078 <col:9> 'bool' lvalue ->_read_status 0x55faf75750f0
|       | `-ImplicitCastExpr 0x55faf76a2058 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55faf76a2048 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55faf76a2120 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55faf76a2100 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55faf76a20e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55faf76a20a8 <col:25> 'int' lvalue Var 0x55faf76a18b8 'read_status' 'int'
|           `-IntegerLiteral 0x55faf76a20c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55faf767dbe8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55faf767d778 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf767d7f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf767db48 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55faf767d8b8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf767d938 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55faf767d9b0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55faf767da58 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55faf76a30f0 <col:84, line:805:5>
|     |-DeclStmt 0x55faf76a2208 <line:796:9, col:26>
|     | `-VarDecl 0x55faf76a21a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55faf76a22d8 <line:797:9, col:29>
|     | `-VarDecl 0x55faf76a2238 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55faf76a22c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55faf76a22a0 <col:28> 'int' 1
|     |-DeclStmt 0x55faf76a2610 <line:798:9, col:71>
|     | `-VarDecl 0x55faf76a2328 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55faf76a25e0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55faf76a2550 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55faf76a2598 <col:55> 'T' lvalue ParmVar 0x55faf767da58 'variable' 'T &'
|     |     `-UnaryOperator 0x55faf76a25c8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55faf76a25b8 <col:66> 'Args *' this
|     |-WhileStmt 0x55faf76a2fa0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55faf76a2fc0 <line:799:16, col:61>
|     | | `-VarDecl 0x55faf76a2638 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55faf76a2818 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55faf76a27e8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55faf76a27d0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55faf76a27b0 <col:29, col:61> 'String' (CXXTemporary 0x55faf76a27b0)
|     | |           `-CXXMemberCallExpr 0x55faf76a2740 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55faf76a26b0 <col:29> '<bound member function type>' ->find 0x55faf76929d8
|     | |             | `-CXXThisExpr 0x55faf76a26a0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55faf76a2778 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55faf76a26e0 <col:34> 'const char *' lvalue ParmVar 0x55faf767d8b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55faf76a2790 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55faf76a2700 <col:43> 'int' lvalue ParmVar 0x55faf767d938 'flags' 'int'
|     | |             `-DeclRefExpr 0x55faf76a2720 <col:50> 'Args::Slot *' lvalue Var 0x55faf76a21a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55faf76a28d0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55faf76a28b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55faf76a2898 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55faf76a2868 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|     | |       `-ImplicitCastExpr 0x55faf76a2850 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55faf76a2830 <col:23> 'String' lvalue Var 0x55faf76a2638 'str' 'String'
|     | `-CompoundStmt 0x55faf76a2f78 <col:64, line:803:9>
|     |   |-CallExpr 0x55faf76a2d00 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55faf76a28f8 <col:13> '<bound member function type>' ->postparse 0x55faf7692be8
|     |   | | `-CXXThisExpr 0x55faf76a28e8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55faf76a2cc0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55faf76a2928 <col:23> 'T *' lvalue Var 0x55faf76a2328 's' 'T *'
|     |   | | `-CallExpr 0x55faf76a2c80 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55faf76a2b10 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55faf76a2b58 <col:56> 'P' lvalue ParmVar 0x55faf767d9b0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55faf76a2b78 <col:64> 'String' lvalue Var 0x55faf76a2638 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55faf76a2c28 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55faf76a2bb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|     |   | |   | `-DeclRefExpr 0x55faf76a2b98 <col:70> 'T *' lvalue Var 0x55faf76a2328 's' 'T *'
|     |   | |   `-UnaryOperator 0x55faf76a2c68 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55faf76a2c58 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55faf76a2ce0 <col:81> 'Args::Slot *' lvalue Var 0x55faf76a21a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55faf76a2e98 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55faf76a2d30 <col:13> 'int' lvalue Var 0x55faf76a2238 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55faf76a2e80 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55faf76a2e60 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55faf76a2dc8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55faf76a2da8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55faf76a2d90 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55faf76a2d50 <col:28> 'int' lvalue Var 0x55faf76a2238 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55faf76a2d70 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55faf76a2e48 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55faf76a2e18 <col:49> 'bool' lvalue ->_read_status 0x55faf75750f0
|     |   |         `-ImplicitCastExpr 0x55faf76a2df8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55faf76a2de8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55faf76a2f48 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55faf76a2eb8 <col:13> 'int' lvalue ParmVar 0x55faf767d938 'flags' 'int'
|     |     `-UnaryOperator 0x55faf76a2f30 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55faf76a2f18 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55faf76a2ef8 <col:23> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55faf76a30d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55faf76a3008 <col:9> 'bool' lvalue ->_read_status 0x55faf75750f0
|       | `-ImplicitCastExpr 0x55faf76a2fe8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55faf76a2fd8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55faf76a30b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55faf76a3090 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55faf76a3078 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55faf76a3038 <col:25> 'int' lvalue Var 0x55faf76a2238 'read_status' 'int'
|           `-IntegerLiteral 0x55faf76a3058 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55faf767e1c8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55faf767dc60 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55faf767dcd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55faf767e128 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55faf767dd98 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55faf767de18 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55faf767de90 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55faf767dfe0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55faf76a3ef8 <col:87, line:821:5>
|     |-DeclStmt 0x55faf76a31a0 <line:809:9, col:26>
|     | `-VarDecl 0x55faf76a3138 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55faf76a3270 <line:810:9, col:29>
|     | `-VarDecl 0x55faf76a31d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55faf76a3258 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55faf76a3238 <col:28> 'int' 1
|     |-DeclStmt 0x55faf76a34b8 <line:811:9, col:38>
|     | `-VarDecl 0x55faf76a33a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55faf76a3490 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55faf76a3418 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55faf76a3470 <col:29> 'Vector<T>' lvalue ParmVar 0x55faf767dfe0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55faf76a3da8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55faf76a3dc8 <line:812:16, col:61>
|     | | `-VarDecl 0x55faf76a34e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55faf76a36c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55faf76a3690 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55faf76a3678 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55faf76a3658 <col:29, col:61> 'String' (CXXTemporary 0x55faf76a3658)
|     | |           `-CXXMemberCallExpr 0x55faf76a35e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55faf76a3558 <col:29> '<bound member function type>' ->find 0x55faf76929d8
|     | |             | `-CXXThisExpr 0x55faf76a3548 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55faf76a3620 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55faf76a3588 <col:34> 'const char *' lvalue ParmVar 0x55faf767dd98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55faf76a3638 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55faf76a35a8 <col:43> 'int' lvalue ParmVar 0x55faf767de18 'flags' 'int'
|     | |             `-DeclRefExpr 0x55faf76a35c8 <col:50> 'Args::Slot *' lvalue Var 0x55faf76a3138 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55faf76a3778 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55faf76a3760 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55faf76a3740 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55faf76a3710 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55faf73c0f98
|     | |       `-ImplicitCastExpr 0x55faf76a36f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55faf76a36d8 <col:23> 'String' lvalue Var 0x55faf76a34e0 'str' 'String'
|     | `-CompoundStmt 0x55faf76a3d70 <col:64, line:819:9>
|     |   |-DeclStmt 0x55faf76a3838 <line:813:13, col:23>
|     |   | `-VarDecl 0x55faf76a37a0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55faf76a3818 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55faf76a39b8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55faf76a3860 <col:13> '<bound member function type>' ->postparse 0x55faf7692be8
|     |   | | `-CXXThisExpr 0x55faf76a3850 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55faf76a3960 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55faf76a38b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55faf76a3890 <col:23> 'P' lvalue ParmVar 0x55faf767de90 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55faf76a38f8 <col:36> 'String' lvalue Var 0x55faf76a34e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55faf76a3918 <col:41> 'T' lvalue Var 0x55faf76a37a0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55faf76a3948 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55faf76a3938 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55faf76a3998 <col:53> 'Args::Slot *' lvalue Var 0x55faf76a3138 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55faf76a3b10 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55faf76a3a48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55faf76a3a18 <col:17> 'bool' lvalue ->_read_status 0x55faf75750f0
|     |   | |   `-ImplicitCastExpr 0x55faf76a39f8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55faf76a39e8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55faf76a3ae8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55faf76a3a80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55faf76a3a60 <col:17> 'Vector<T> *' lvalue Var 0x55faf76a33a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55faf76a3ac8 <col:30> 'T' lvalue Var 0x55faf76a37a0 'sx' 'T'
|     |   |-BinaryOperator 0x55faf76a3c90 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55faf76a3b28 <col:13> 'int' lvalue Var 0x55faf76a31d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55faf76a3c78 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55faf76a3c58 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55faf76a3bc0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55faf76a3ba0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55faf76a3b88 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55faf76a3b48 <col:28> 'int' lvalue Var 0x55faf76a31d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55faf76a3b68 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55faf76a3c40 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55faf76a3c10 <col:49> 'bool' lvalue ->_read_status 0x55faf75750f0
|     |   |         `-ImplicitCastExpr 0x55faf76a3bf0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55faf76a3be0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55faf76a3d40 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55faf76a3cb0 <col:13> 'int' lvalue ParmVar 0x55faf767de18 'flags' 'int'
|     |     `-UnaryOperator 0x55faf76a3d28 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55faf76a3d10 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55faf76a3cf0 <col:23> 'const int' lvalue Var 0x55faf7660a28 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55faf76a3ed8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55faf76a3e10 <col:9> 'bool' lvalue ->_read_status 0x55faf75750f0
|       | `-ImplicitCastExpr 0x55faf76a3df0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55faf76a3de0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55faf76a3eb8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55faf76a3e98 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55faf76a3e80 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55faf76a3e40 <col:25> 'int' lvalue Var 0x55faf76a31d0 'read_status' 'int'
|           `-IntegerLiteral 0x55faf76a3e60 <col:40> 'int' 1
|-AccessSpecDecl 0x55faf767e240 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55faf767e268 prev 0x55faf765ed30 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55faf767e360 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55faf767e450 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55faf76a3f30 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55faf767e540 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55faf76a3f40 <col:25, line:830:9>
| |-CXXMethodDecl 0x55faf767e640 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55faf767e6f0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55faf767e798 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55faf767e798
| | `-ParmVarDecl 0x55faf767e8a8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55faf767f068 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55faf767f068
|   `-ParmVarDecl 0x55faf767f178 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55faf767e918 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55faf767ea78 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55faf767ec70 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55faf767eb20 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55faf767eb98 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55faf76a4120 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55faf767ef28 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55faf76a3f90 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55faf76a3f50 <col:20> 'void *' lvalue ParmVar 0x55faf767eb20 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55faf767ef90 '_slot' 'char *'
| | | `-CXXNewExpr 0x55faf76a4018 <col:32, col:45> 'char *' array Function 0x55faf71e4c38 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55faf76a4000 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55faf76a3fd0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55faf767eb98 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55faf767eff0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55faf76a40e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55faf76a40a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55faf767eb98 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55faf76a41a0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55faf767ed70 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55faf767e540 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55faf76a4228 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55faf76a4208 <line:840:13, col:22> 'void' array Function 0x55faf71e4f98 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55faf76a41f0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55faf76a41c0 <col:22> 'char *' lvalue ->_slot 0x55faf767ef90
| |         `-CXXThisExpr 0x55faf76a41b0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55faf767ee70 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55faf767e640 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55faf76a4418 <col:22, line:844:9>
| |   `-CallExpr 0x55faf76a4380 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55faf76a4368 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55faf76a4348 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55faf72f09f8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55faf76a43b8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55faf76a4298 <col:20> 'void *' lvalue ->_ptr 0x55faf767ef28
| |     |   `-CXXThisExpr 0x55faf76a4288 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55faf76a43e8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55faf76a43d0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55faf76a42d8 <col:26> 'char *' lvalue ->_slot 0x55faf767ef90
| |     |     `-CXXThisExpr 0x55faf76a42c8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55faf76a4400 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55faf76a4318 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55faf767eff0
| |         `-CXXThisExpr 0x55faf76a4308 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55faf767ef28 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55faf767ef90 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55faf767eff0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55faf767f1e8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55faf767f1e8
| | `-ParmVarDecl 0x55faf767f2f8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55faf767f398 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55faf767f398
|   `-ParmVarDecl 0x55faf767f4a8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55faf767f648 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55faf767f518 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55faf767f5b8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55faf767f8e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55faf767fad8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55faf767f9a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55faf767fc58 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55faf76a4450 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55faf76a4430 <col:20> 'T *' lvalue ParmVar 0x55faf767f9a8 'ptr' 'T *'
|   | `-CompoundStmt 0x55faf76a44a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55faf767fba8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55faf767e640 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55faf76a4650 <col:22, line:857:9>
|   |   `-CallExpr 0x55faf76a4620 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55faf76a44b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55faf73a9128 0x55faf7353458
|   |     |-CXXOperatorCallExpr 0x55faf76a45b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55faf76a4540 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55faf75b64f8 0x55faf75b6118 0x55faf75b5d48 0x55faf75b5968 0x55faf75b5588 0x55faf75b51b8
|   |     | `-MemberExpr 0x55faf76a4510 <col:29> 'T *' lvalue ->_ptr 0x55faf767fc58
|   |     |   `-CXXThisExpr 0x55faf76a4500 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55faf76a45f0 <col:35> 'T' lvalue ->_slot 0x55faf767fcb8
|   |       `-CXXThisExpr 0x55faf76a45e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55faf767fc58 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55faf767fcb8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55faf767fd20 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55faf767fe20 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55faf767fe70 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf767fe00 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55faf767fde0 <col:31> 'int' 48
|-FieldDecl 0x55faf767fe98 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55faf767fef8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55faf767ff58 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55faf7680090 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55faf7692280 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55faf76922e0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55faf7692390 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55faf76925b8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55faf76924c0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55faf7692708 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55faf7692678 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55faf76929d8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55faf76927c8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55faf7692848 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55faf76928f0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55faf7692be8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55faf7692aa0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55faf7692b18 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55faf7692cb8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55faf7692e08 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55faf7692d70 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55faf7693198 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55faf7692ec8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55faf7692f48 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55faf7692ff0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55faf76930a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55faf76933c0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55faf7693270 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55faf76932e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55faf76936d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55faf7693470 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55faf7693638 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55faf7693548 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf76be0a0 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf76be1b8 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55faf76be248 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55faf76be358 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55faf76be288 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55faf76be6a8 'size' 'int'
| | `-ImplicitCastExpr 0x55faf76be770 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55faf76be730 <col:16> 'int' lvalue ParmVar 0x55faf76be288 's' 'int'
| `-CompoundStmt 0x55faf76be7b8 <col:19, line:1297:5>
|-CXXMethodDecl 0x55faf76be5b0 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55faf76be418 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55faf76be498 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55faf76be510 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55faf76be710 <col:73> 'const ArgContext' lvalue Var 0x55faf76a4678 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55faf76be668 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55faf76be6a8 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55faf76c5478 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55faf76c5478
| `-ParmVarDecl 0x55faf76c5588 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55faf76c5628 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55faf76c5738 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55faf76be6a8 'size' 'int'
| | `-ImplicitCastExpr 0x55faf76c5f48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55faf76c5f00 <col:7> 'int' xvalue .size 0x55faf76be6a8
| |     `-CXXStaticCastExpr 0x55faf76c5ed0 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55faf76c5ea0 <col:7> 'AnnoArg' lvalue ParmVar 0x55faf76c5738 '' 'AnnoArg &&'
| `-CompoundStmt 0x55faf76c5f90 <col:7>
`-CXXDestructorDecl 0x55faf76c57d8 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf73b1e50 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf73b1f68 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55faf73b1ff8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55faf73b20c8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55faf73b21b0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf73b23c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55faf73b2270 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b2578 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55faf73b2480 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55faf73b26c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55faf73b2630 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55faf73b2808 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55faf73b2778 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b2950 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55faf73b28c0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b2a18 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55faf73b2b60 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55faf73b2ad0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55faf73b2c28 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55faf73b2d70 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55faf73b2ce0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55faf73b2ee8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55faf73b2e28 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b3030 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55faf73b2fa0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b30f8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55faf73b32b8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55faf73b31a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55faf73b3220 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b3508 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55faf73b3378 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55faf73b33f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55faf73b35b8 <col:86> "" ""
|-CXXMethodDecl 0x55faf73b3828 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55faf73b3698 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55faf73b3710 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b39d8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55faf73b38e8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55faf73b3b88 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55faf73b3a90 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55faf73b3e58 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55faf73b3c40 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55faf73b3cb8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55faf73b3d30 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b4138 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55faf73b3f20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55faf73b3f98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55faf73b4010 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55faf73b41f0 <col:115> "" ""
|-AccessSpecDecl 0x55faf73b4260 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55faf73b4298 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf73b47a0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55faf73b47a0
| `-ParmVarDecl 0x55faf73b48a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55faf73b4948 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55faf73b4948
| `-ParmVarDecl 0x55faf73b4a58 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55faf73ea088 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55faf75dd830 <col:7>
|-CXXConstructorDecl 0x55faf73ea160 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55faf73ea160
| `-ParmVarDecl 0x55faf73ea278 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55faf73ea2e8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55faf73ea2e8
| `-ParmVarDecl 0x55faf73ea3f8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55faf75e2c40 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf75cc398 prev 0x55faf75c1060 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf75cc490 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55faf75cc580 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55faf75cc6a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55faf75cc828 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55faf75cc9a8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55faf75ccb28 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55faf75dd998 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55faf75de208 <col:11>
|-CXXDestructorDecl 0x55faf75dda70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55faf75ddba8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55faf75ddba8
| `-ParmVarDecl 0x55faf75ddcb8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55faf75ddd58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55faf75ddd58
| `-ParmVarDecl 0x55faf75dde68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55faf75e3638 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55faf75e3748 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55faf75e39c8 <col:11>
|   `-ReturnStmt 0x55faf75e39b8 <col:11>
|     `-UnaryOperator 0x55faf75e39a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55faf75e3990 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55faf75e37b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55faf75e37b8
  `-ParmVarDecl 0x55faf75e38c8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf75ccb90 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf75ccca8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55faf75ccd48 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55faf75ccdb0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55faf75cce18 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55faf75cce80 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55faf75ccee0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55faf75ccfa0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55faf75cd000 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55faf75cd060 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55faf75dd8a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55faf75ccd48 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55faf75de218 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55faf75de270 <col:12>
|-CXXConstructorDecl 0x55faf75dded8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55faf75dded8
| `-ParmVarDecl 0x55faf75ddfe8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55faf75de088 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55faf75de088
| `-ParmVarDecl 0x55faf75de198 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55faf75e2d20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf75ba770 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55faf75ba888 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55faf75ba918 <col:16, col:22> col:16 public
|-EnumDecl 0x55faf75ba940 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55faf75baa40 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55faf75bab20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75baa20 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55faf75baa00 <col:21> 'int' 28
| `-EnumConstantDecl 0x55faf75baad0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55faf75bab38 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75baab0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55faf75baa90 <col:22> 'int' 64
|-CXXMethodDecl 0x55faf75bae78 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55faf75bab60 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55faf75babe0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55faf75bac58 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55faf75bacd0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55faf75baf38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bb138 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55faf75bafb0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55faf75bb028 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55faf75bb1e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bb348 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55faf75bb258 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55faf75bb3f0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55faf75bb750 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55faf75bb6e0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55faf75bb680 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55faf75bb640 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55faf70924e0 'void'
|       |-PointerType 0x55faf733a6f0 'unsigned char *'
|       | `-BuiltinType 0x55faf70925e0 'unsigned char'
|       |-TypedefType 0x55faf7136ce0 'size_t' sugar
|       | |-Typedef 0x55faf7102be0 'size_t'
|       | `-BuiltinType 0x55faf7092640 'unsigned long'
|       `-PointerType 0x55faf7092ce0 'void *'
|         `-BuiltinType 0x55faf70924e0 'void'
|-CXXMethodDecl 0x55faf75bbbc8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55faf75bb7c0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55faf75bb838 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55faf75bb8d0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55faf75bb950 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55faf75d6840 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55faf75d6828 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55faf75d67f0 <col:58> 'int' 0
| |-ParmVarDecl 0x55faf75bb9d0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55faf75d6868 <col:76> 'int' 0
| |-ParmVarDecl 0x55faf75bba50 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55faf75d6888 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55faf75bbc98 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bbd18 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55faf75bbdd8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55faf75bbe78 <col:20>
| `-OptimizeNoneAttr 0x55faf75bbed0 <col:30>
|-CXXMethodDecl 0x55faf75bbf48 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55faf75bbfe8 <col:20>
| `-OptimizeNoneAttr 0x55faf75bc040 <col:30>
|-CXXMethodDecl 0x55faf75bc0b8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55faf75bc158 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bc208 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55faf75bc2a8 <col:20>
| |-OptimizeNoneAttr 0x55faf75bc300 <col:30>
| `-WarnUnusedResultAttr 0x55faf75bc328 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bc380 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55faf75bc420 <col:20>
| `-OptimizeNoneAttr 0x55faf75bc478 <col:30>
|-CXXMethodDecl 0x55faf75bc4c8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55faf75bc568 <col:20>
| `-OptimizeNoneAttr 0x55faf75bc5c0 <col:30>
|-CXXMethodDecl 0x55faf75bc608 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55faf75bc6a8 <col:20>
| `-OptimizeNoneAttr 0x55faf75bc700 <col:30>
|-CXXMethodDecl 0x55faf75bc748 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf75bc808 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf75bc8d0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55faf75bc998 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55faf75bca58 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf75bcb78 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55faf75d6950 <col:54, line:99:5>
|   `-ReturnStmt 0x55faf75d6940 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55faf75d6928 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55faf75d68f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55faf75cd398
|         `-CXXThisExpr 0x55faf75d68e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55faf75bcd18 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55faf75bcc28 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55faf75d6a00 <col:67, line:103:5>
|   `-BinaryOperator 0x55faf75d69e0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55faf75d6978 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55faf75cd398
|     | `-CXXThisExpr 0x55faf75d6968 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55faf75d69c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55faf75d69a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55faf75bcc28 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55faf75bce10 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55faf75d6a80 <col:33, line:107:5>
|   `-ReturnStmt 0x55faf75d6a70 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55faf75d6a58 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55faf75d6a28 <col:16> 'void *' lvalue ->_destructor_argument 0x55faf75cd400
|         `-CXXThisExpr 0x55faf75d6a18 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55faf75bced0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55faf75d70b0 <col:25, line:113:5>
|   |-ParenExpr 0x55faf75d6df8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55faf75d6dc8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75d6b38 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55faf75d6b10 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55faf75d6ad8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55faf75d6aa8 <col:24> '<bound member function type>' ->shared 0x55faf75bbf48
|   |   |       `-ImplicitCastExpr 0x55faf75d6af8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55faf75d6a98 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55faf75d6b98 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75d6b78 <col:42> 'int' 0
|   |   `-CallExpr 0x55faf75d6d28 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55faf75d6d10 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75d6cf0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75d6d68 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d6c08 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55faf75d6d80 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d6c30 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75d6d98 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75d6c68 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55faf75d6db0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75d6cd8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75d6cc0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75d6c88 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55faf75d6ff8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55faf75d6e28 <col:2> 'unsigned char *' lvalue ->_head 0x55faf75cd1a0
|   | | `-CXXThisExpr 0x55faf75d6e18 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55faf75d6fe0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55faf75d6fc0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55faf75d6e68 <col:10> 'unsigned char *' lvalue ->_data 0x55faf75cd208
|   |     | `-CXXThisExpr 0x55faf75d6e58 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55faf75d6fa8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55faf75d6f88 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55faf75d6ea8 <col:18> 'unsigned char *' lvalue ->_tail 0x55faf75cd270
|   |         | `-CXXThisExpr 0x55faf75d6e98 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55faf75d6f70 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55faf75d6f50 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55faf75d6ee8 <col:26> 'unsigned char *' lvalue ->_end 0x55faf75cd2d8
|   |             | `-CXXThisExpr 0x55faf75d6ed8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55faf75d6f38 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55faf75d6f18 <col:33> 'int' 0
|   `-BinaryOperator 0x55faf75d7090 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55faf75d7028 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55faf75cd398
|     | `-CXXThisExpr 0x55faf75d7018 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55faf75d7078 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55faf75d7058 <col:16> 'int' 0
|-CXXMethodDecl 0x55faf75bd010 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55faf75bcf80 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55faf75bd0b8 <col:20>
| |-OptimizeNoneAttr 0x55faf75bd110 <col:30>
| `-WarnUnusedResultAttr 0x55faf75bd138 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bd208 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55faf75bd178 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55faf75bd2b0 <col:20>
| |-OptimizeNoneAttr 0x55faf75bd308 <col:30>
| `-WarnUnusedResultAttr 0x55faf75bd330 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bd468 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55faf75bd370 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55faf75bd510 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bd610 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55faf75bd580 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55faf75bd6b8 <col:20>
| `-OptimizeNoneAttr 0x55faf75bd710 <col:30>
|-CXXMethodDecl 0x55faf75bd7d8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55faf75bd748 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55faf75bd880 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bd980 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55faf75bd8f0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55faf75bda28 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55faf75bdb28 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55faf75bda98 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55faf75bdbd0 <col:20>
| `-OptimizeNoneAttr 0x55faf75bdc28 <col:30>
|-CXXMethodDecl 0x55faf75bddb8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55faf75bdc68 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55faf75bdce0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55faf75d68a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55faf75bde68 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55faf75be068 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55faf75bdee0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55faf75bdf58 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf75be278 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55faf75be128 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55faf75be1a0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf75be488 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55faf75be338 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55faf75be3b8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55faf75d68b8 <col:39> 'int' 0
|-CXXMethodDecl 0x55faf75be558 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55faf75be620 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55faf75be6e8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55faf75be7a8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf75be870 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55faf75be9b8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55faf75be928 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55faf75beb88 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55faf75bea78 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55faf75beaf0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf75bec58 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55faf75bed18 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55faf75bedb8 <col:20>
| `-OptimizeNoneAttr 0x55faf75bee10 <col:30>
|-CXXMethodDecl 0x55faf75bee60 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55faf75bef00 <col:20>
| `-OptimizeNoneAttr 0x55faf75bef58 <col:30>
|-CXXMethodDecl 0x55faf75befa8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55faf75bf068 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf75bf130 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55faf75bf1d0 <col:20>
| `-OptimizeNoneAttr 0x55faf75bf228 <col:30>
|-CXXMethodDecl 0x55faf75bf378 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55faf75bf268 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55faf75bf2e0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf75bf4c8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55faf75bf438 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf75bf5a0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55faf75bf660 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55faf75bf700 <col:20>
| `-OptimizeNoneAttr 0x55faf75bf758 <col:30>
|-CXXMethodDecl 0x55faf75bf7a8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55faf75bf848 <col:20>
| `-OptimizeNoneAttr 0x55faf75bf8a0 <col:30>
|-CXXMethodDecl 0x55faf75bf8f0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55faf75bf9b8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55faf75bfa58 <col:20>
| `-OptimizeNoneAttr 0x55faf75bfab0 <col:30>
|-CXXMethodDecl 0x55faf75bfaf8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55faf75bfc18 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55faf75bfd88 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55faf75bfcc8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55faf75bfe78 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55faf75bff18 <col:20>
| `-OptimizeNoneAttr 0x55faf75bff70 <col:30>
|-CXXMethodDecl 0x55faf75bffc0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55faf75c0080 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55faf75c02b8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55faf75c0130 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55faf75c01a8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55faf75c0368 <col:20>
| `-OptimizeNoneAttr 0x55faf75c03c0 <col:30>
|-CXXMethodDecl 0x55faf75c0468 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55faf75c0508 <col:20>
| `-OptimizeNoneAttr 0x55faf75c0560 <col:30>
|-CXXMethodDecl 0x55faf75c05b0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55faf75c0650 <col:20>
| `-OptimizeNoneAttr 0x55faf75c06a8 <col:30>
|-CXXMethodDecl 0x55faf75c06f0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55faf75c0790 <col:20>
| `-OptimizeNoneAttr 0x55faf75c07e8 <col:30>
|-CXXMethodDecl 0x55faf75c08e8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55faf75c0820 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55faf75c0990 <col:20>
| `-OptimizeNoneAttr 0x55faf75c09e8 <col:30>
|-CXXMethodDecl 0x55faf75c0ba8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55faf75c0a20 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55faf75c0a98 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55faf75c0c58 <col:20>
| `-OptimizeNoneAttr 0x55faf75c0cb0 <col:30>
|-CXXMethodDecl 0x55faf75c0d58 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55faf75c0e78 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55faf75c0f98 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55faf75c1038 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55faf75c1060 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55faf75c1188 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55faf75c1228 <col:20>
| `-OptimizeNoneAttr 0x55faf75c1280 <col:30>
|-CXXMethodDecl 0x55faf75c1328 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55faf75c13c8 <col:20>
| `-OptimizeNoneAttr 0x55faf75c1420 <col:30>
|-AccessSpecDecl 0x55faf75c1448 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55faf75c1470 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55faf75c1570 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55faf75c15c0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75c1550 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55faf75c1530 <col:14> 'int' 48
|-CXXMethodDecl 0x55faf75c1628 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55faf75c16c8 <col:20>
| `-OptimizeNoneAttr 0x55faf75c1720 <col:30>
|-CXXMethodDecl 0x55faf75c1798 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55faf75c1838 <col:20>
| `-OptimizeNoneAttr 0x55faf75c1890 <col:30>
|-CXXMethodDecl 0x55faf75c1958 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55faf75c18c8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55faf75c1af8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55faf75c1c98 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55faf75c1ba8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55faf75c1d40 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55faf75c1e40 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55faf75c21f0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c1e20 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55faf75c1e00 <col:9> 'int' 0
| |-EnumConstantDecl 0x55faf75c1ed0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55faf75c2208 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c1eb0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55faf75c1e90 <col:14> 'int' 1
| |-EnumConstantDecl 0x55faf75c1f60 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55faf75c2220 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c1f40 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55faf75c1f20 <col:14> 'int' 2
| |-EnumConstantDecl 0x55faf75c1ff0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55faf75c2238 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c1fd0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55faf75c1fb0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55faf75c2080 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55faf75c2250 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c2060 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55faf75c2040 <col:13> 'int' 4
| |-EnumConstantDecl 0x55faf75c2110 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55faf75c2268 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c20f0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55faf75c20d0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55faf75c21a0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55faf75c2280 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75c2180 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55faf75c2160 <col:14> 'int' 6
|-CXXMethodDecl 0x55faf75c22e8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55faf75c2388 <col:20>
| `-OptimizeNoneAttr 0x55faf75c23e0 <col:30>
|-CXXMethodDecl 0x55faf75c24d8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55faf75c2418 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55faf75c2580 <col:20>
| `-OptimizeNoneAttr 0x55faf75c25d8 <col:30>
|-CXXMethodDecl 0x55faf75c2648 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55faf75c2770 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55faf75c28e8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55faf75c2820 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55faf75c29b0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55faf75c2a78 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55faf75c2bb8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55faf75c2b28 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55faf75c2c60 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55faf75c2d60 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55faf75c2f60 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c2d40 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55faf75c2d20 <col:23> 'int' 0
| |-EnumConstantDecl 0x55faf75c2df0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55faf75c2f78 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c2dd0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55faf75c2db0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55faf75c2e80 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55faf75c2f90 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c2e60 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55faf75c2e40 <col:24> 'int' 0
| `-EnumConstantDecl 0x55faf75c2f10 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55faf75c2fa8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75c2ef0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55faf75c2ed0 <col:47> 'int' 16
|-CXXMethodDecl 0x55faf75c3008 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55faf75c3178 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55faf75c30b8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55faf75c3220 <col:20>
| `-OptimizeNoneAttr 0x55faf75c3278 <col:30>
|-CXXMethodDecl 0x55faf75c32c8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55faf75d71d0 <col:18, col:36>
|   `-ReturnStmt 0x55faf75d71c0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55faf75d71a8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55faf75d7188 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55faf75d7158 <col:27> '<bound member function type>' ->xanno 0x55faf75c1328
|           `-CXXThisExpr 0x55faf75d7148 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55faf75c33c0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55faf75d72e0 <col:30, col:48>
|   `-ReturnStmt 0x55faf75d72d0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55faf75d72b8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55faf75d7298 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55faf75d7268 <col:39> '<bound member function type>' ->xanno 0x55faf75c1188
|           `-CXXThisExpr 0x55faf75d7258 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55faf75c34a8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55faf75d7478 <col:24, col:50>
|   `-ReturnStmt 0x55faf75d7468 <col:26, col:47>
|     `-UnaryOperator 0x55faf75d7450 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55faf75d7430 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55faf75d7418 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55faf75d73c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55faf75cc6a8
|         |   `-CXXMemberCallExpr 0x55faf75d73a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55faf75d7378 <col:34> '<bound member function type>' ->xanno 0x55faf75c1328
|         |       `-CXXThisExpr 0x55faf75d7368 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55faf75d73f8 <col:46> 'int' 0
|-CXXMethodDecl 0x55faf75c35b0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55faf75d7648 <col:36, col:62>
|   `-ReturnStmt 0x55faf75d7638 <col:38, col:59>
|     `-UnaryOperator 0x55faf75d7620 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55faf75d7600 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55faf75d75e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55faf75d7560 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55faf75cc6a8
|         |   `-CXXMemberCallExpr 0x55faf75d7540 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55faf75d7510 <col:46> '<bound member function type>' ->xanno 0x55faf75c1188
|         |       `-CXXThisExpr 0x55faf75d7500 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55faf75d7590 <col:58> 'int' 0
|-CXXMethodDecl 0x55faf75c36c8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55faf75d77e0 <col:26, col:53>
|   `-ReturnStmt 0x55faf75d77d0 <col:28, col:50>
|     `-UnaryOperator 0x55faf75d77b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55faf75d7798 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55faf75d7780 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55faf75d7730 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55faf75cc9a8
|         |   `-CXXMemberCallExpr 0x55faf75d7710 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55faf75d76e0 <col:36> '<bound member function type>' ->xanno 0x55faf75c1328
|         |       `-CXXThisExpr 0x55faf75d76d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55faf75d7760 <col:49> 'int' 0
|-CXXMethodDecl 0x55faf75c37e8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55faf75d79b8 <col:38, col:65>
|   `-ReturnStmt 0x55faf75d79a8 <col:40, col:62>
|     `-UnaryOperator 0x55faf75d7990 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55faf75d7970 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55faf75d7958 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55faf75d78c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55faf75cc9a8
|         |   `-CXXMemberCallExpr 0x55faf75d78a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55faf75d7878 <col:48> '<bound member function type>' ->xanno 0x55faf75c1188
|         |       `-CXXThisExpr 0x55faf75d7868 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55faf75d78f8 <col:61> 'int' 0
|-CXXMethodDecl 0x55faf75c3998 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55faf75c38a0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55faf75d8088 <col:34, line:463:5>
|   |-ParenExpr 0x55faf75d7ed0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55faf75d7ea0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75d7b08 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75d7ad8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75d7a28 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75d7a10 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75d79d0 <col:23> 'int' lvalue ParmVar 0x55faf75c38a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75d79f0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75d7ab8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75d7a88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75d7a48 <col:33> 'int' lvalue ParmVar 0x55faf75c38a0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55faf75d7aa0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55faf75d7a68 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55faf75d7b68 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75d7b48 <col:56> 'int' 0
|   |   `-CallExpr 0x55faf75d7e00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55faf75d7de8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75d7dc8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75d7e40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d7c58 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55faf75d7e58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d7c88 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75d7e70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75d7cc0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55faf75d7e88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75d7db0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75d7d98 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75d7d58 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55faf75d8078 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55faf75d8060 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55faf75d8040 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55faf75d8010 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55faf75d7fc0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55faf75cc6a8
|         |   `-CXXMemberCallExpr 0x55faf75d7fa0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55faf75d7f70 <col:9> '<bound member function type>' ->xanno 0x55faf75c1188
|         |       `-CXXThisExpr 0x55faf75d7f60 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55faf75d8028 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55faf75d7ff0 <col:21> 'int' lvalue ParmVar 0x55faf75c38a0 'i' 'int'
|-CXXMethodDecl 0x55faf75c3be8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55faf75c3a58 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55faf75c3ad0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55faf75d8718 <col:40, line:472:5>
|   |-ParenExpr 0x55faf75d8530 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55faf75d8500 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75d81e0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75d81b0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75d8100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75d80e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75d80a8 <col:23> 'int' lvalue ParmVar 0x55faf75c3a58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75d80c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75d8190 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75d8160 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75d8120 <col:33> 'int' lvalue ParmVar 0x55faf75c3a58 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55faf75d8178 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55faf75d8140 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55faf75d8240 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75d8220 <col:56> 'int' 0
|   |   `-CallExpr 0x55faf75d8460 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55faf75d8448 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75d8428 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75d84a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d82b0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55faf75d84b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d82e0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75d84d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75d8318 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55faf75d84e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75d8410 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75d83f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75d83b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55faf75d86f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55faf75d86a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55faf75d8670 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55faf75d8620 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55faf75cc6a8
|     | |   `-CXXMemberCallExpr 0x55faf75d8600 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55faf75d85d0 <col:2> '<bound member function type>' ->xanno 0x55faf75c1328
|     | |       `-CXXThisExpr 0x55faf75d85c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55faf75d8688 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55faf75d8650 <col:14> 'int' lvalue ParmVar 0x55faf75c3a58 'i' 'int'
|     `-ImplicitCastExpr 0x55faf75d86e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55faf75d86c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55faf75c3ad0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55faf75c3da8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55faf75c3cb0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55faf75d8e98 <col:36, line:485:5>
|   |-ParenExpr 0x55faf75d8c00 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75d8bd0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75d88b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75d8880 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75d8790 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75d8778 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75d8738 <col:23> 'int' lvalue ParmVar 0x55faf75c3cb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75d8758 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75d8860 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75d8848 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75d87b0 <col:33> 'int' lvalue ParmVar 0x55faf75c3cb0 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75d8828 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75d8810 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75d87d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75d87f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55faf75d8910 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75d88f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75d8b30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75d8b18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75d8af8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75d8b70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d8980 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55faf75d8b88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d89b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75d8ba0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75d89f0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55faf75d8bb8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75d8ae0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75d8ac8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75d8a88 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55faf75d8e88 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55faf75d8e70 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55faf75d8e58 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55faf75d8e28 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55faf75d8dc8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55faf75d8d98 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55faf75d8d10 <col:61, col:70> 'char const[48]' lvalue ->c 0x55faf75cc580
|             |   `-CXXMemberCallExpr 0x55faf75d8cf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55faf75d8cc0 <col:61> '<bound member function type>' ->xanno 0x55faf75c1188
|             |       `-CXXThisExpr 0x55faf75d8cb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55faf75d8db0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55faf75d8d40 <col:74> 'int' lvalue ParmVar 0x55faf75c3cb0 'i' 'int'
|-CXXMethodDecl 0x55faf75c3ff8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55faf75c3e68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55faf75c3ee0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55faf75d95e8 <col:42, line:500:5>
|   |-ParenExpr 0x55faf75d9380 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75d9350 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75d9030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75d9000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75d8f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75d8ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75d8eb8 <col:23> 'int' lvalue ParmVar 0x55faf75c3e68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75d8ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75d8fe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75d8fc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75d8f30 <col:33> 'int' lvalue ParmVar 0x55faf75c3e68 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75d8fa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75d8f90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75d8f50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75d8f70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55faf75d9090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75d9070 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75d92b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75d9298 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75d9278 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75d92f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d9100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55faf75d9308 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d9138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75d9320 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75d9170 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55faf75d9338 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75d9260 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75d9248 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75d9208 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55faf75d95c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55faf75d9578 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55faf75d9548 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55faf75d94f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55faf75d94c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55faf75d9470 <col:48, col:57> 'char [48]' lvalue ->c 0x55faf75cc580
|     |     |   `-CXXMemberCallExpr 0x55faf75d9450 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55faf75d9420 <col:48> '<bound member function type>' ->xanno 0x55faf75c1328
|     |     |       `-CXXThisExpr 0x55faf75d9410 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55faf75d94d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55faf75d94a0 <col:61> 'int' lvalue ParmVar 0x55faf75c3e68 'i' 'int'
|     `-ImplicitCastExpr 0x55faf75d95b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55faf75d9590 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55faf75c3ee0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55faf75c41b8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55faf75c40c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55faf75d9d48 <col:35, line:513:5>
|   |-ParenExpr 0x55faf75d9a58 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75d9a28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75d9780 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75d9750 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75d9660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75d9648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75d9608 <col:23> 'int' lvalue ParmVar 0x55faf75c40c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75d9628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75d9730 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75d9718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75d9680 <col:33> 'int' lvalue ParmVar 0x55faf75c40c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75d96f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75d96e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75d96a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75d96c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55faf75d97e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75d97c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75d9988 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75d9970 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75d9950 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75d99c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d9850 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55faf75d99e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d9888 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75d99f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75d98c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55faf75d9a10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75d9938 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75d9920 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75d98e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55faf75d9d38 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55faf75d9d20 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55faf75d9d08 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55faf75d9cd8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55faf75d9c50 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55faf75d9c20 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55faf75d9bd0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55faf75cc580
|             |   `-CXXMemberCallExpr 0x55faf75d9bb0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55faf75d9b80 <col:60> '<bound member function type>' ->xanno 0x55faf75c1188
|             |       `-CXXThisExpr 0x55faf75d9b70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55faf75d9c38 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55faf75d9c00 <col:73> 'int' lvalue ParmVar 0x55faf75c40c0 'i' 'int'
|-CXXMethodDecl 0x55faf75c4408 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55faf75c4278 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55faf75c42f0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55faf75da468 <col:41, line:528:5>
|   |-ParenExpr 0x55faf75da1f0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75da1c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75d9ee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75d9eb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75d9dc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75d9da8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75d9d68 <col:23> 'int' lvalue ParmVar 0x55faf75c4278 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75d9d88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75d9e90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75d9e78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75d9de0 <col:33> 'int' lvalue ParmVar 0x55faf75c4278 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75d9e58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75d9e40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75d9e00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75d9e20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55faf75d9f40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75d9f20 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75da120 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75da108 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75da0e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75da160 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d9fb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55faf75da178 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75d9fe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75da190 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75da020 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55faf75da1a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75da0d0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75da0b8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75da078 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55faf75da448 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55faf75da3f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55faf75da3c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55faf75da370 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55faf75da330 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55faf75da2e0 <col:47, col:56> 'char [48]' lvalue ->c 0x55faf75cc580
|     |     |   `-CXXMemberCallExpr 0x55faf75da2c0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55faf75da290 <col:47> '<bound member function type>' ->xanno 0x55faf75c1328
|     |     |       `-CXXThisExpr 0x55faf75da280 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55faf75da348 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55faf75da310 <col:60> 'int' lvalue ParmVar 0x55faf75c4278 'i' 'int'
|     `-ImplicitCastExpr 0x55faf75da430 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55faf75da410 <col:65> 'int16_t':'short' lvalue ParmVar 0x55faf75c42f0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55faf75c45c8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55faf75c44d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55faf75dab38 <col:36, line:541:5>
|   |-ParenExpr 0x55faf75da8d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75da8a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75da600 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75da5d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75da4e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75da4c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75da488 <col:23> 'int' lvalue ParmVar 0x55faf75c44d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75da4a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75da5b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75da598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75da500 <col:33> 'int' lvalue ParmVar 0x55faf75c44d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75da578 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75da560 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75da520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75da540 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55faf75da660 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75da640 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75da808 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75da7f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75da7d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75da848 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75da6d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55faf75da860 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75da708 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75da878 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75da740 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55faf75da890 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75da7b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75da7a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75da760 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55faf75dab28 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55faf75dab10 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55faf75daaf8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55faf75daac8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55faf75daa70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55faf75daa40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55faf75da9f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55faf75cc580
|             |   `-CXXMemberCallExpr 0x55faf75da9d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55faf75da9a0 <col:61> '<bound member function type>' ->xanno 0x55faf75c1188
|             |       `-CXXThisExpr 0x55faf75da990 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55faf75daa58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55faf75daa20 <col:74> 'int' lvalue ParmVar 0x55faf75c44d0 'i' 'int'
|-CXXMethodDecl 0x55faf75c4798 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55faf75c4688 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55faf75c4700 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55faf75c4848 <col:20>
| `-OptimizeNoneAttr 0x55faf75c48a0 <col:30>
|-CXXMethodDecl 0x55faf75c49d8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55faf75c48e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55faf75db208 <col:35, line:562:5>
|   |-ParenExpr 0x55faf75dafa8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75daf78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75dacd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75daca0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75dabb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75dab98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75dab58 <col:23> 'int' lvalue ParmVar 0x55faf75c48e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75dab78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75dac80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75dac68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75dabd0 <col:33> 'int' lvalue ParmVar 0x55faf75c48e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75dac48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75dac30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75dabf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75dac10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55faf75dad30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75dad10 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75daed8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75daec0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75daea0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75daf18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dada0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55faf75daf30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dadd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75daf48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75dae10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55faf75daf60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75dae88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75dae70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75dae30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55faf75db1f8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55faf75db1e0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55faf75db1c8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55faf75db198 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55faf75db140 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55faf75db110 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55faf75db0c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55faf75cc580
|             |   `-CXXMemberCallExpr 0x55faf75db0a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55faf75db070 <col:60> '<bound member function type>' ->xanno 0x55faf75c1188
|             |       `-CXXThisExpr 0x55faf75db060 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55faf75db128 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55faf75db0f0 <col:73> 'int' lvalue ParmVar 0x55faf75c48e0 'i' 'int'
|-CXXMethodDecl 0x55faf75c4be8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55faf75c4a98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55faf75c4b10 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55faf75db8e8 <col:41, line:577:5>
|   |-ParenExpr 0x55faf75db678 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75db648 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75db3a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75db370 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75db280 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75db268 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75db228 <col:23> 'int' lvalue ParmVar 0x55faf75c4a98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75db248 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75db350 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75db338 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75db2a0 <col:33> 'int' lvalue ParmVar 0x55faf75c4a98 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75db318 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75db300 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75db2c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75db2e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55faf75db400 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75db3e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75db5a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75db590 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75db570 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75db5e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75db470 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55faf75db600 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75db4a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75db618 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75db4e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55faf75db630 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75db558 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75db540 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75db500 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55faf75db8c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55faf75db878 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55faf75db848 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55faf75db7e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55faf75db7b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55faf75db768 <col:47, col:56> 'char [48]' lvalue ->c 0x55faf75cc580
|     |     |   `-CXXMemberCallExpr 0x55faf75db748 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55faf75db718 <col:47> '<bound member function type>' ->xanno 0x55faf75c1328
|     |     |       `-CXXThisExpr 0x55faf75db708 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55faf75db7d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55faf75db798 <col:60> 'int' lvalue ParmVar 0x55faf75c4a98 'i' 'int'
|     `-ImplicitCastExpr 0x55faf75db8b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55faf75db890 <col:65> 'int32_t':'int' lvalue ParmVar 0x55faf75c4b10 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55faf75c4da8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55faf75c4cb0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55faf75dc018 <col:36, line:591:5>
|   |-ParenExpr 0x55faf75dbd58 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75dbd28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75dba80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75dba50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75db960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75db948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75db908 <col:23> 'int' lvalue ParmVar 0x55faf75c4cb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75db928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75dba30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75dba18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75db980 <col:33> 'int' lvalue ParmVar 0x55faf75c4cb0 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75db9f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75db9e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75db9a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75db9c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55faf75dbae0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75dbac0 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75dbc88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75dbc70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75dbc50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75dbcc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dbb50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55faf75dbce0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dbb88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75dbcf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75dbbc0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55faf75dbd10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75dbc38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75dbc20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75dbbe0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55faf75dc008 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55faf75dbff0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55faf75dbfd8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55faf75dbfa8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55faf75dbf20 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55faf75dbef0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55faf75dbea0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55faf75cc580
|             |   `-CXXMemberCallExpr 0x55faf75dbe80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55faf75dbe50 <col:61> '<bound member function type>' ->xanno 0x55faf75c1188
|             |       `-CXXThisExpr 0x55faf75dbe40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55faf75dbf08 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55faf75dbed0 <col:74> 'int' lvalue ParmVar 0x55faf75c4cb0 'i' 'int'
|-CXXMethodDecl 0x55faf75c4ff8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55faf75c4e68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55faf75c4ee0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55faf75dc6f8 <col:42, line:606:5>
|   |-ParenExpr 0x55faf75dc488 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55faf75dc458 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75dc1b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75dc180 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75dc090 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75dc078 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75dc038 <col:23> 'int' lvalue ParmVar 0x55faf75c4e68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75dc058 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75dc160 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55faf75dc148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75dc0b0 <col:33> 'int' lvalue ParmVar 0x55faf75c4e68 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75dc128 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75dc110 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75dc0d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55faf75dc0f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55faf75dc210 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75dc1f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55faf75dc3b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55faf75dc3a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75dc380 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75dc3f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dc280 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55faf75dc410 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dc2b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75dc428 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75dc2f0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55faf75dc440 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75dc368 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75dc350 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75dc310 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55faf75dc6d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55faf75dc688 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55faf75dc658 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55faf75dc5f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55faf75dc5c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55faf75dc578 <col:48, col:57> 'char [48]' lvalue ->c 0x55faf75cc580
|     |     |   `-CXXMemberCallExpr 0x55faf75dc558 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55faf75dc528 <col:48> '<bound member function type>' ->xanno 0x55faf75c1328
|     |     |       `-CXXThisExpr 0x55faf75dc518 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55faf75dc5e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55faf75dc5a8 <col:61> 'int' lvalue ParmVar 0x55faf75c4e68 'i' 'int'
|     `-ImplicitCastExpr 0x55faf75dc6c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55faf75dc6a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55faf75c4ee0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55faf75c5190 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55faf75c50c0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55faf75dcf68 <col:33, line:620:5>
|   |-ParenExpr 0x55faf75dcce0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55faf75dccb0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75dc900 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75dc8d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75dc770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75dc758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75dc718 <col:23> 'int' lvalue ParmVar 0x55faf75c50c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75dc738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75dc8b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55faf75dc898 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75dc790 <col:33> 'int' lvalue ParmVar 0x55faf75c50c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75dc878 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75dc860 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75dc7b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55faf75dc838 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55faf75dc820 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55faf75dc7e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55faf75dc960 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75dc940 <col:79> 'int' 0
|   |   `-CallExpr 0x55faf75dcc10 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55faf75dcbf8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75dcbd8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75dcc50 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dca48 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55faf75dcc68 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dca90 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75dcc80 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75dcac8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55faf75dcc98 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75dcbc0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75dcba8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75dcb68 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55faf75dcf58 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55faf75dcf40 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55faf75dcf28 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55faf75dcef8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55faf75dce70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55faf75dce40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55faf75dcdf0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55faf75cc580
|             |   `-CXXMemberCallExpr 0x55faf75dcdd0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55faf75dcda0 <col:67> '<bound member function type>' ->xanno 0x55faf75c1188
|             |       `-CXXThisExpr 0x55faf75dcd90 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55faf75dce58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55faf75dce20 <col:80> 'int' lvalue ParmVar 0x55faf75c50c0 'i' 'int'
|-CXXMethodDecl 0x55faf75c53a8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55faf75c5250 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55faf75c52d0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55faf75dd790 <col:45, line:635:5>
|   |-ParenExpr 0x55faf75dd4d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55faf75dd4a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55faf75dd170 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55faf75dd140 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55faf75dcfe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55faf75dcfc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55faf75dcf88 <col:23> 'int' lvalue ParmVar 0x55faf75c5250 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55faf75dcfa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55faf75dd120 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55faf75dd108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55faf75dd000 <col:33> 'int' lvalue ParmVar 0x55faf75c5250 'i' 'int'
|   |   |     `-BinaryOperator 0x55faf75dd0e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55faf75dd0d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55faf75dd020 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55faf75c1570 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55faf75dd0a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55faf75dd090 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55faf75dd058 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55faf75dd1d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55faf75dd1b0 <col:79> 'int' 0
|   |   `-CallExpr 0x55faf75dd408 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55faf75dd3f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55faf75dd3d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55faf712da40 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55faf75dd448 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dd240 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55faf75dd460 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55faf75dd288 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55faf75dd478 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55faf75dd2c0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55faf75dd490 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55faf75dd3b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55faf75dd3a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55faf75dd358 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55faf75dd770 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55faf75dd6d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55faf75dd6a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55faf75dd648 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55faf75dd618 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55faf75dd5c8 <col:54, col:63> 'char [48]' lvalue ->c 0x55faf75cc580
|     |     |   `-CXXMemberCallExpr 0x55faf75dd5a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55faf75dd578 <col:54> '<bound member function type>' ->xanno 0x55faf75c1328
|     |     |       `-CXXThisExpr 0x55faf75dd568 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55faf75dd630 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55faf75dd5f8 <col:67> 'int' lvalue ParmVar 0x55faf75c5250 'i' 'int'
|     `-CXXConstCastExpr 0x55faf75dd740 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55faf75dd728 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55faf75dd6f0 <col:91> 'const void *' lvalue ParmVar 0x55faf75c52d0 'x' 'const void *'
|-CXXMethodDecl 0x55faf75c5478 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55faf75dd818 <col:34, line:640:5>
|   `-ReturnStmt 0x55faf75dd808 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55faf75dd7f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55faf75dd7c0 <col:16> 'Packet *' lvalue ->_data_packet 0x55faf75cd138
|         `-CXXThisExpr 0x55faf75dd7b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55faf75c55b8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55faf75c5528 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55faf75d68d8 <col:46> 'bool' true
|-CXXMethodDecl 0x55faf75c5738 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55faf75c5670 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55faf75c57e0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55faf75c5f90 <line:660:22> "" ""
| |-EnumConstantDecl 0x55faf75c58e0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c6000 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c58c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55faf75c58a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55faf75baa40 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55faf75c5970 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c6018 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5950 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55faf75c5930 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55faf75baad0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55faf75c5a00 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c6030 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c59e0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55faf75c59c0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55faf75c5a90 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c6048 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5a70 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55faf75c5a50 <col:19> 'int' 16
| |-EnumConstantDecl 0x55faf75c5b20 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c6060 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5b00 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55faf75c5ae0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55faf75c5bb0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c6078 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5b90 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55faf75c5b70 <col:19> 'int' 32
| |-EnumConstantDecl 0x55faf75c5c40 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c6090 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5c20 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55faf75c5c00 <col:19> 'int' EnumConstant 0x55faf75c5a90 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55faf75c5cd0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c60a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5cb0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55faf75c5c90 <col:19> 'int' EnumConstant 0x55faf75c5bb0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55faf75c5da0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c60c0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5d80 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55faf75c5d60 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55faf75c5d20 <col:23> 'int' EnumConstant 0x55faf75c5cd0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55faf75c5d40 <col:40> 'int' 2
| |-EnumConstantDecl 0x55faf75c5e70 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55faf75c60d8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55faf75c5e50 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55faf75c5e30 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55faf75c5df0 <col:23> 'int' EnumConstant 0x55faf75c5cd0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55faf75c5e10 <col:40> 'int' 4
| `-EnumConstantDecl 0x55faf75c5f40 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55faf75c60f0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55faf75c5f20 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55faf75c5f00 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55faf75c5ec0 <col:23> 'int' EnumConstant 0x55faf75c5cd0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55faf75c5ee0 <col:40> 'int' 8
|-CXXMethodDecl 0x55faf75c6130 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55faf75c61d0 <col:68> "" ""
|-CXXMethodDecl 0x55faf75c6268 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55faf75c6308 <col:45> "" ""
|-CXXMethodDecl 0x55faf75c63a0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55faf75c6440 <col:57> "" ""
|-CXXMethodDecl 0x55faf75c64d8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55faf75c6578 <col:45> "" ""
|-CXXMethodDecl 0x55faf75c6610 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55faf75c66b0 <col:57> "" ""
|-CXXMethodDecl 0x55faf75c6740 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55faf75c67e0 <col:51> "" ""
|-CXXMethodDecl 0x55faf75c6870 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55faf75c6910 <col:63> "" ""
|-CXXMethodDecl 0x55faf75c69a0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55faf75c6a40 <col:53> "" ""
|-CXXMethodDecl 0x55faf75c6ad0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55faf75c6b70 <col:65> "" ""
|-CXXMethodDecl 0x55faf75c6c88 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55faf75c6bf8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55faf75c6d30 <col:61> "" ""
|-CXXMethodDecl 0x55faf75c6ec8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55faf75c6db8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55faf75c6e30 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55faf75c6f78 <col:67> "" ""
|-CXXMethodDecl 0x55faf75c7090 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55faf75c7000 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55faf75c7138 <col:63> "" ""
|-CXXMethodDecl 0x55faf75c72d0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55faf75c71c0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55faf75c7238 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55faf75c7380 <col:69> "" ""
|-CXXMethodDecl 0x55faf75c7498 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55faf75c7408 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55faf75c7540 <col:63> "" ""
|-CXXMethodDecl 0x55faf75ca158 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55faf75ca048 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55faf75ca0c0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55faf75ca208 <col:69> "" ""
|-CXXMethodDecl 0x55faf75ca320 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55faf75ca290 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55faf75ca3c8 <col:62> "" ""
|-CXXMethodDecl 0x55faf75ca560 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55faf75ca450 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55faf75ca4c8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55faf75ca610 <col:68> "" ""
|-CXXMethodDecl 0x55faf75ca728 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55faf75ca698 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55faf75ca7d0 <col:63> "" ""
|-CXXMethodDecl 0x55faf75ca968 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55faf75ca858 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55faf75ca8d0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55faf75caa18 <col:69> "" ""
|-CXXMethodDecl 0x55faf75caaa8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55faf75cab48 <col:64> "" ""
|-CXXMethodDecl 0x55faf75cabd8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55faf75cac78 <col:52> "" ""
|-CXXMethodDecl 0x55faf75cad08 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55faf75cada8 <col:67> "" ""
|-CXXMethodDecl 0x55faf75cae38 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55faf75caed8 <col:55> "" ""
|-CXXMethodDecl 0x55faf75caff0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55faf75caf60 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55faf75cb098 <col:58> "" ""
|-CXXMethodDecl 0x55faf75cb230 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55faf75cb120 <col:33> col:36 'int'
| |-ParmVarDecl 0x55faf75cb198 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55faf75cb2e0 <col:62> "" ""
|-CXXMethodDecl 0x55faf75cb3f8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55faf75cb368 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55faf75cb4a0 <col:58> "" ""
|-CXXMethodDecl 0x55faf75cb638 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55faf75cb528 <col:33> col:36 'int'
| |-ParmVarDecl 0x55faf75cb5a0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55faf75cb6e8 <col:62> "" ""
|-CXXMethodDecl 0x55faf75cb800 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55faf75cb770 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55faf75cb8a8 <col:60> "" ""
|-CXXMethodDecl 0x55faf75cba40 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55faf75cb930 <col:34> col:37 'int'
| |-ParmVarDecl 0x55faf75cb9a8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55faf75cbaf0 <col:64> "" ""
|-CXXMethodDecl 0x55faf75cbc08 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55faf75cbb78 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55faf75cbcb0 <col:58> "" ""
|-CXXMethodDecl 0x55faf75cbe48 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55faf75cbd38 <col:33> col:36 'int'
| |-ParmVarDecl 0x55faf75cbdb0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55faf75cbef8 <col:62> "" ""
|-CXXMethodDecl 0x55faf75cc010 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55faf75cbf80 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55faf75cc0b8 <col:59> "" ""
|-CXXMethodDecl 0x55faf75cc250 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55faf75cc140 <col:33> col:36 'int'
| |-ParmVarDecl 0x55faf75cc1b8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55faf75cc300 <col:63> "" ""
|-AccessSpecDecl 0x55faf75cc370 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55faf75cc398 prev 0x55faf75c1060 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55faf75cc490 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55faf75cc580 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55faf75cc6a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55faf75cc828 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55faf75cc9a8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55faf75ccb28 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55faf75dd998 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55faf75de208 <col:11>
| |-CXXDestructorDecl 0x55faf75dda70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55faf75ddba8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55faf75ddba8
| | `-ParmVarDecl 0x55faf75ddcb8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55faf75ddd58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55faf75ddd58
| | `-ParmVarDecl 0x55faf75dde68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55faf75e3638 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55faf75e3748 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55faf75e39c8 <col:11>
| |   `-ReturnStmt 0x55faf75e39b8 <col:11>
| |     `-UnaryOperator 0x55faf75e39a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55faf75e3990 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55faf75e37b8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55faf75e37b8
|   `-ParmVarDecl 0x55faf75e38c8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55faf75ccb90 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55faf75ccca8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55faf75ccd48 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55faf75ccdb0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55faf75cce18 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55faf75cce80 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55faf75ccee0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55faf75ccfa0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55faf75cd000 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55faf75cd060 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55faf75dd8a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55faf75ccd48 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55faf75de218 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55faf75de270 <col:12>
| |-CXXConstructorDecl 0x55faf75dded8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55faf75dded8
| | `-ParmVarDecl 0x55faf75ddfe8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55faf75de088 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55faf75de088
| | `-ParmVarDecl 0x55faf75de198 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55faf75e2d20 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55faf75cd0d8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55faf75cd138 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55faf75cd1a0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55faf75cd208 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55faf75cd270 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55faf75cd2d8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55faf75cd338 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55faf75cd398 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55faf75cd400 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55faf75cd488 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55faf75cd0d8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55faf75dd840 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55faf75cd338 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55faf75de280 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55faf75de2e0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55faf75cd628 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55faf75cd568 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55faf75cd720 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55faf75cd908 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55faf75cd810 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55faf75cdbd8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55faf75cd9c0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55faf75cda38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55faf75cdab0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf75cddf8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55faf75cdca8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55faf75cdd20 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55faf75d6418 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55faf75cdeb8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55faf75cdf30 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55faf75cdfa8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55faf75d6570 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55faf75d64e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55faf75d66b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55faf75d6628 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55faf75d67b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55faf7400d40 prev 0x55faf73f3128 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55faf7400e38 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55faf7400ec8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55faf74012f0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55faf7400f08 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55faf7400f88 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55faf74010c0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55faf7401170 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55faf74015b8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55faf74013c0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55faf7401438 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55faf74014d8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55faf7405f58 <col:34> 'const ArgContext' lvalue Var 0x55faf73f30c0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55faf74059b0 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55faf7401680 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55faf7401770 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55faf74017e8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55faf7405f78 <col:34> 'const ArgContext' lvalue Var 0x55faf73f30c0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55faf7406158 <col:46, line:375:5>
|   `-ReturnStmt 0x55faf7406148 <line:374:2, col:63>
|     `-CallExpr 0x55faf7406110 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55faf74060f8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55faf74060b0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55faf74015b8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55faf7406010 <col:15> 'const String' lvalue ParmVar 0x55faf7401680 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55faf7406060 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55faf7406030 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55faf7401770 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55faf7406090 <col:59> 'const ArgContext' lvalue ParmVar 0x55faf74017e8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55faf7405e88 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55faf7405a78 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55faf7405cf0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55faf7405d68 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55faf7405f98 <col:34> 'const ArgContext' lvalue Var 0x55faf73f30c0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x55faf76f9168 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55faf76f9240 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55faf76f9378 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x55faf76f9378
| `-ParmVarDecl 0x55faf76f9488 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x55faf76f9528 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55faf76f9638 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x55faf76fa290 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55faf7406f88 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x55faf74071e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55faf76f9078 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55faf76f96a8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x55faf76f96a8
| `-ParmVarDecl 0x55faf76f97b8 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x55faf76f9858 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55faf76f9968 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55faf76fa2a0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55faf76fa270 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55faf76fa240 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x55faf76fa210 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x55faf76f9968 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x55faf76fa310 <col:19>
`-CXXDestructorDecl 0x55faf76f9a08 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
