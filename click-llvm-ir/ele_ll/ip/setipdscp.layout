
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c382a78 prev 0x56165c37a218 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c382b70 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56165c382c00 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56165c382c78 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56165c382d38 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56165c382e00 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56165c382f78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56165c382eb0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56165c383020 <col:24>
| `-OptimizeNoneAttr 0x56165c383078 <col:34>
|-CXXMethodDecl 0x56165c3830c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56165c383378 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56165c383170 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56165c3831e8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56165c383268 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56165c383430 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56165c383468 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56165c3834d0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56165c383558 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56165c383878 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56165c383610 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56165c383688 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56165c383700 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56165c383780 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56165c383990 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56165c38b308 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56165c38b308
| `-ParmVarDecl 0x56165c38b418 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56165c38b4b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56165c38b4b8
| `-ParmVarDecl 0x56165c38b5c8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56165c458210 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c375a90 prev 0x56165c375810 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56165c375b88 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56165c375c18 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56165c375c78 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56165c375d68 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56165c375e68 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56165c376038 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56165c375ee8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56165c375f60 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56165c3761c8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56165c376100 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56165c376270 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56165c3763a8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56165c3762e0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56165c376548 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56165c376488 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56165c3766e8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56165c376628 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56165c376790 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56165c376890 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56165c376970 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c376870 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56165c376850 <col:26> 'int' 1
| `-EnumConstantDecl 0x56165c376920 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56165c376988 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c376900 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56165c3768e0 <col:44> 'int' 2
|-CXXMethodDecl 0x56165c376ad0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56165c3769b8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56165c376a38 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56165c376c28 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56165c376b98 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56165c376e68 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56165c376ce8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56165c376d60 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56165c376f18 <col:20>
| `-OptimizeNoneAttr 0x56165c376f70 <col:30>
|-CXXMethodDecl 0x56165c377078 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56165c376fb0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56165c377120 <col:20>
| `-OptimizeNoneAttr 0x56165c377178 <col:30>
|-CXXMethodDecl 0x56165c3771c8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56165c377290 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56165c3773a8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56165c377430 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56165c3774b8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56165c377540 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x56165c3775c8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56165c377658 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56165c377718 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56165c3777a0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56165c377828 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56165c3778b0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56165c377938 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56165c3779c0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56165c377a50 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56165c377b10 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56165c377ba0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56165c377cf0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56165c377c58 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56165c377e80 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56165c377db0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56165c378130 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56165c377f38 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56165c377fb8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56165c378038 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56165c3781e8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56165c3782f0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56165c378580 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c3782d0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56165c3782b0 <col:33> 'int' 0
| |-EnumConstantDecl 0x56165c378380 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56165c378598 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c378360 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56165c378340 <col:32> 'int' 20
| |-EnumConstantDecl 0x56165c378410 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56165c3785b0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c3783f0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56165c3783d0 <col:38> 'int' 90
| |-EnumConstantDecl 0x56165c3784a0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56165c3785c8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c378480 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56165c378460 <col:35> 'int' 100
| `-EnumConstantDecl 0x56165c378530 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56165c3785e0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c378510 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56165c3784f0 <col:32> 'int' 2000
|-CXXMethodDecl 0x56165c378620 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56165c378a60 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56165c3788d0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56165c378948 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56165c378b30 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56165c378cb0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56165c378be0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56165c378eb8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56165c378d68 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56165c378de0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56165c378fb8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56165c379058 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56165c379120 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56165c3791b0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56165c3793e0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c379190 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56165c379170 <col:36> 'int' EnumConstant 0x56165c379120 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56165c379200 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56165c379250 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56165c3792a0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56165c3792f0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56165c379340 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56165c379390 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56165c3794c8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56165c379408 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56165c379590 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56165c379650 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56165c379710 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56165c3797d0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56165c3798e8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56165c3799b0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56165c379b30 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56165c379a60 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56165c379c58 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56165c379e58 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56165c379d08 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56165c379d88 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56165c3877a8 <col:54, line:127:5>
|   |-ParenExpr 0x56165c387658 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56165c387628 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56165c387318 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56165c3872f0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56165c3872d8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56165c3872c0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56165c387290 <col:31> 'Router *' lvalue ->_router 0x56165c385170
|   |   |         `-CXXThisExpr 0x56165c387280 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56165c387378 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c387358 <col:48> 'int' 0
|   |   `-CallExpr 0x56165c387588 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56165c387570 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c387550 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c3875c8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c3873e8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56165c3875e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c387408 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56165c3875f8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c387440 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56165c387610 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c387538 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c387520 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c3874d8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56165c3876f0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56165c387688 <col:9> 'Router *' lvalue ->_router 0x56165c385170
|   | | `-CXXThisExpr 0x56165c387678 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56165c3876d8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56165c3876b8 <col:19> 'Router *' lvalue ParmVar 0x56165c379d08 'r' 'Router *'
|   `-BinaryOperator 0x56165c387788 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56165c387720 <col:9> 'int' lvalue ->_eindex 0x56165c3851d8
|     | `-CXXThisExpr 0x56165c387710 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56165c387770 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56165c387750 <col:19> 'int' lvalue ParmVar 0x56165c379d88 'eindex' 'int'
|-CXXMethodDecl 0x56165c379fe0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56165c379f18 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56165c37a0b0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56165c37a178 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56165c37a218 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56165c37a468 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56165c37a2e0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56165c37a360 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56165c37a518 <col:20>
| `-OptimizeNoneAttr 0x56165c37a570 <col:30>
|-CXXMethodDecl 0x56165c37a678 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56165c37a5b0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56165c37a720 <col:20>
| `-OptimizeNoneAttr 0x56165c37a778 <col:30>
|-CXXMethodDecl 0x56165c37a848 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56165c37a7b8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56165c37a8f0 <col:20>
| `-OptimizeNoneAttr 0x56165c37a948 <col:30>
|-CXXMethodDecl 0x56165c37aad8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56165c37a980 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56165c37aa00 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56165c37ac68 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56165c37aba0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56165c37adb8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56165c37ad28 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56165c37af08 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56165c37ae78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56165c37b058 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56165c37afc8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56165c37b318 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56165c37b110 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56165c37b190 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56165c37b238 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56165c37b3f0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56165c37b4b0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56165c37b780 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56165c37b630 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56165c37b6a8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56165c37b8a8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56165c37ba80 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56165c37b960 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56165c37b9e0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56165c37bc68 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56165c37bb48 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56165c37bbc8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56165c37bfd8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56165c37bd28 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56165c37bda0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56165c37be20 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56165c386d90 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56165c386d70 <col:106> 'int' 0
| `-ParmVarDecl 0x56165c37be98 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56165c386dc8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56165c386da8 <col:126> 'int' 0
|-CXXMethodDecl 0x56165c37c378 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56165c37c0a8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56165c37c140 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56165c37c1c0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56165c37c238 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56165c386e00 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56165c386de0 <col:114> 'int' 0
|-CXXMethodDecl 0x56165c37c708 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56165c37c450 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56165c37c4c8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56165c37c548 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56165c386e18 <col:96> 'int' 0
| `-ParmVarDecl 0x56165c37c5c0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56165c386e58 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56165c386e38 <col:116> 'int' 0
|-CXXMethodDecl 0x56165c37ca88 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56165c37c7d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56165c37c850 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c37c8d0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56165c386e90 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56165c386e70 <col:109> 'int' 0
| `-ParmVarDecl 0x56165c37c948 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56165c386ec8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56165c386ea8 <col:129> 'int' 0
|-CXXMethodDecl 0x56165c37ce08 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56165c37cb58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56165c37cbd0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c37cc50 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56165c37ccc8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56165c386f00 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56165c386ee0 <col:117> 'int' 0
|-CXXMethodDecl 0x56165c37d198 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56165c37cee0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37cf58 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c37cfd8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56165c386f18 <col:99> 'int' 0
| `-ParmVarDecl 0x56165c37d050 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56165c386f58 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56165c386f38 <col:119> 'int' 0
|-CXXMethodDecl 0x56165c37d5b8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56165c37d268 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56165c37d2e8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56165c37d360 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c37d3e0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56165c386f90 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56165c386f70 <col:108> 'int' 0
| `-ParmVarDecl 0x56165c37d460 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56165c386fc8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56165c386fa8 <col:141> 'int' 0
|-CXXMethodDecl 0x56165c37d9d8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56165c37d690 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56165c37d710 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56165c37d788 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c37d808 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56165c37d888 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56165c386fe0 <col:121> 'int' 0
|-CXXMethodDecl 0x56165c37de08 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56165c37dab8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56165c37db38 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56165c37dbb0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c37dc30 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56165c387000 <col:98> 'int' 0
| `-ParmVarDecl 0x56165c37dcb0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56165c387020 <col:123> 'int' 0
|-CXXMethodDecl 0x56165c37e0d0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56165c37dee0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56165c37df60 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56165c37dfe0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56165c387040 <col:80> 'int' 0
|-EnumDecl 0x56165c37e188 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56165c37e290 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56165c37e520 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c37e270 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56165c37e250 <col:42> 'int' 1
| |-EnumConstantDecl 0x56165c37e320 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56165c37e538 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c37e300 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56165c37e2e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56165c37e3b0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56165c37e550 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c37e390 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56165c37e370 <col:44> 'int' 4
| |-EnumConstantDecl 0x56165c37e440 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56165c37e568 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c37e420 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56165c37e400 <col:36> 'int' 7
| `-EnumConstantDecl 0x56165c37e4d0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56165c37e580 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c37e4b0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56165c37e490 <col:34> 'int' 6
|-CXXMethodDecl 0x56165c37e838 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56165c37e5a8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56165c37e648 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56165c37e6c8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56165c37e740 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56165c3870f8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56165c3870e0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56165c3870c8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56165c3870a8 <col:98, col:105> 'String' (CXXTemporary 0x56165c3870a8)
|           `-CXXTemporaryObjectExpr 0x56165c387070 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56165c37ead8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56165c37e908 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56165c37e980 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56165c37e9f8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56165c3871a8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56165c387190 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56165c387178 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56165c387158 <col:94, col:101> 'String' (CXXTemporary 0x56165c387158)
| |         `-CXXTemporaryObjectExpr 0x56165c387120 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56165c387990 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56165c387908 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56165c3878d8 <col:9> '<bound member function type>' ->add_task_handlers 0x56165c37e838
|     | `-CXXThisExpr 0x56165c3878c8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56165c387948 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56165c387848 <col:27> 'Task *' lvalue ParmVar 0x56165c37e908 'task' 'Task *'
|     |-ImplicitCastExpr 0x56165c387960 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56165c387868 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56165c37e980 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56165c387978 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56165c387888 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56165c37e4d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56165c3878a8 <col:62> 'const String' lvalue ParmVar 0x56165c37e9f8 'prefix' 'const String &'
|-CXXMethodDecl 0x56165c37ece8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56165c37eba0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56165c37ec18 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56165c387258 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56165c387240 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56165c387228 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56165c387208 <col:70, col:77> 'String' (CXXTemporary 0x56165c387208)
| |         `-CXXTemporaryObjectExpr 0x56165c3871d0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56165c387b68 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56165c387ae0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56165c387ab0 <col:9> '<bound member function type>' ->add_task_handlers 0x56165c37e838
|     | `-CXXThisExpr 0x56165c387aa0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56165c387b20 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56165c387a20 <col:27> 'Task *' lvalue ParmVar 0x56165c37eba0 'task' 'Task *'
|     |-ImplicitCastExpr 0x56165c387b38 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56165c387a40 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56165c387b50 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56165c387a60 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56165c37e4d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56165c387a80 <col:57> 'const String' lvalue ParmVar 0x56165c37ec18 'prefix' 'const String &'
|-CXXMethodDecl 0x56165c37efc8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56165c37edb0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37ee30 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c37eea8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56165c37f278 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56165c37f098 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37f118 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c37f198 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56165c37f568 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56165c37f348 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37f3c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c37f440 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56165c37f818 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56165c37f638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37f6b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c37f738 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56165c37fac8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56165c37f8e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37f968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c37f9e8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56165c37fd78 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56165c37fb98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37fc18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c37fc90 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56165c380028 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56165c37fe48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c37fec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c37ff48 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56165c380338 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56165c380150 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c3801d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c380250 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56165c380618 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56165c380408 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c380488 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c380530 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56165c3808f8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56165c3806e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c380768 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c380810 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56165c380b60 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56165c3809c8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56165c380a48 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56165c380ac0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56165c380e08 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56165c380c30 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56165c380cb0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56165c380d28 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56165c3810b8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56165c380ed8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c380f58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c380fd8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56165c381368 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56165c381188 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c381208 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c381280 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56165c381618 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56165c381438 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c3814b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c381530 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56165c3818e8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56165c3816e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c381768 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56165c381808 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56165c381c18 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56165c3819b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56165c381a38 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56165c381ab0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56165c381b28 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56165c387270 <col:93> 'bool' false
|-CXXMethodDecl 0x56165c381e00 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56165c381ce8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56165c381d68 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56165c381fd8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56165c381ec0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56165c381f40 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56165c3822b8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56165c382098 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56165c382110 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56165c382190 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56165c382208 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56165c3825a8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56165c382388 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56165c382400 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56165c382480 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56165c3824f8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56165c3827e0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56165c382680 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56165c382700 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56165c3829c8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56165c3828a8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56165c382928 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56165c382a78 prev 0x56165c37a218 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56165c382b70 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56165c382c00 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56165c382c78 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56165c382d38 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56165c382e00 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56165c382f78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56165c382eb0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56165c383020 <col:24>
| | `-OptimizeNoneAttr 0x56165c383078 <col:34>
| |-CXXMethodDecl 0x56165c3830c0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56165c383378 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56165c383170 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56165c3831e8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56165c383268 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56165c383430 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56165c383468 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56165c3834d0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56165c383558 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56165c383878 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56165c383610 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56165c383688 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56165c383700 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56165c383780 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56165c383990 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56165c38b308 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56165c38b308
| | `-ParmVarDecl 0x56165c38b418 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56165c38b4b8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56165c38b4b8
| | `-ParmVarDecl 0x56165c38b5c8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56165c458210 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56165c383a08 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56165c383aa8 <col:38> "" ""
|-CXXMethodDecl 0x56165c383b38 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56165c383bd8 <col:44> "" ""
|-AccessSpecDecl 0x56165c383c48 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56165c383c70 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56165c383d70 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56165c383dc0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c383d50 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56165c383d30 <col:27> 'int' 4
|-FieldDecl 0x56165c383e78 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56165c384028 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56165c3840e0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56165c385170 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56165c3851d8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56165c385328 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56165c385268 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56165c3854d8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56165c3853e8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56165c3856b8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56165c385598 <col:20> col:23 'int'
| `-ParmVarDecl 0x56165c385618 <col:25> col:28 'int'
|-CXXMethodDecl 0x56165c385960 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56165c385780 <col:23> col:26 'int'
| |-ParmVarDecl 0x56165c385800 <col:28> col:31 'int'
| `-ParmVarDecl 0x56165c385878 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56165c385a18 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56165c385ae0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56165c385b30 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56165c385b80 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56165c385d60 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56165c385c10 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56165c385c88 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56165c386008 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56165c385e28 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56165c385ea8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56165c385f20 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56165c386228 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56165c3860d8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56165c386158 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56165c386560 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56165c3862e8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56165c386368 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56165c3863e0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56165c386460 <col:57> col:60 'int'
|-CXXMethodDecl 0x56165c386748 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56165c386630 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56165c3866b0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56165c386898 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56165c386808 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56165c386c18 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56165c386958 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56165c3869d8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56165c386a50 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56165c386ad0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56165c386d30 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetIPDSCP
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned char _dscp
           | [sizeof=112, dsize=109, align=8,
           |  nvsize=109, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c38e478 <../elements/ip/setipdscp.hh:21:1, line:41:1> line:21:7 class SetIPDSCP definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56165c38e5d8 <col:1, col:7> col:7 implicit referenced class SetIPDSCP
|-AccessSpecDecl 0x56165c38e668 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x56165c38e6f0 <line:23:3, col:13> col:3 SetIPDSCP 'void ()'
|-CXXDestructorDecl 0x56165c38e7e0 <line:24:3, col:14> col:3 ~SetIPDSCP 'void ()' noexcept-unevaluated 0x56165c38e7e0
| `-Overrides: [ 0x56165c375d68 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x56165c38e910 <line:26:3, col:56> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x56165c3771c8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56165c38f788 <col:34, col:56>
|   `-ReturnStmt 0x56165c38f778 <col:36, col:43>
|     `-ImplicitCastExpr 0x56165c38f760 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56165c38f738 <col:43> 'const char [10]' lvalue "SetIPDSCP"
|-CXXMethodDecl 0x56165c38e9d8 <line:27:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x56165c377290 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56165c38f7e8 <col:34, col:54>
|   `-ReturnStmt 0x56165c38f7d8 <col:36, col:43>
|     `-ImplicitCastExpr 0x56165c38f7c0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56165c38f7a0 <col:43> 'const char []' lvalue Var 0x56165c377540 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56165c38ecb0 <line:29:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56165c378a60 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56165c38eb60 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x56165c38ebd8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x56165c38ed80 <line:30:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x56165c37b4b0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x56165c38f820 <col:37, col:52>
|   `-ReturnStmt 0x56165c38f810 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x56165c38f800 <col:46> 'bool' true
|-CXXMethodDecl 0x56165c38ee40 <line:31:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x56165c378b30 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x56165c38ef80 <line:33:3, col:35> col:18 smaction 'Packet *(Packet *)' inline
| `-ParmVarDecl 0x56165c38eef0 <col:27, col:34> col:35 'Packet *'
|-CXXMethodDecl 0x56165c38f150 <line:34:3, col:27> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x56165c376038 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x56165c38f040 <col:13> col:16 'int'
| `-ParmVarDecl 0x56165c38f0b8 <col:18, col:26> col:26 p 'Packet *'
|-CXXMethodDecl 0x56165c38f2a8 <line:35:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x56165c3761c8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x56165c38f218 <col:16> col:19 'int'
|-AccessSpecDecl 0x56165c38f350 <line:37:3, col:10> col:3 private
|-FieldDecl 0x56165c38f390 <line:39:5, col:19> col:19 _dscp 'unsigned char'
|-CXXConstructorDecl 0x56165c38f408 <line:21:7> col:7 implicit SetIPDSCP 'void (const SetIPDSCP &)' inline default_delete noexcept-unevaluated 0x56165c38f408
| `-ParmVarDecl 0x56165c38f518 <col:7> col:7 'const SetIPDSCP &'
`-CXXMethodDecl 0x56165c38f5b8 <col:7> col:7 implicit operator= 'SetIPDSCP &(const SetIPDSCP &)' inline default_delete noexcept-unevaluated 0x56165c38f5b8
  `-ParmVarDecl 0x56165c38f6c8 <col:7> col:7 'const SetIPDSCP &'

Layout: <CGRecordLayout
  LLVMType:%class.SetIPDSCP = type { %class.Element.base, i8, [3 x i8] }
  NonVirtualBaseLLVMType:%class.SetIPDSCP.base = type { %class.Element.base, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c148920 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56165c148a38 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56165c148ad8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56165c148b38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56165c148b98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56165c148c48 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c148f50 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c149068 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56165c149110 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56165c149178 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56165c149208 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56165c14f2a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56165c14f6d8 <col:12>
|-CXXConstructorDecl 0x56165c14f3a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56165c14f4b8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56165c149110 'data' 'const char *'
| | `-ImplicitCastExpr 0x56165c151c60 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56165c151c30 <col:12> 'const char *const' lvalue .data 0x56165c149110
| |     `-DeclRefExpr 0x56165c151c10 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c14f4b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56165c149178 'length' 'int'
| | `-ImplicitCastExpr 0x56165c151cf0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56165c151cc0 <col:12> 'const int' lvalue .length 0x56165c149178
| |     `-DeclRefExpr 0x56165c151ca0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c14f4b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56165c149208 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56165c151d80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56165c151d50 <col:12> 'String::memo_t *const' lvalue .memo 0x56165c149208
| |     `-DeclRefExpr 0x56165c151d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c14f4b8 '' 'const String::rep_t &'
| `-CompoundStmt 0x56165c151dd8 <col:12>
|-CXXConstructorDecl 0x56165c14f558 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56165c14f558
| `-ParmVarDecl 0x56165c14f668 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56165c154bc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56165c1605d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56165c1606e8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56165c160c00 <col:12>
|   |-BinaryOperator 0x56165c160a18 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56165c1609d0 <col:12> 'const char *' lvalue ->data 0x56165c149110
|   | | `-CXXThisExpr 0x56165c1609c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56165c160a00 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56165c160990 <col:12> 'const char *const' lvalue .data 0x56165c149110
|   |     `-DeclRefExpr 0x56165c160970 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c1606e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56165c160ae0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56165c160a98 <col:12> 'int' lvalue ->length 0x56165c149178
|   | | `-CXXThisExpr 0x56165c160a88 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56165c160ac8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56165c160a58 <col:12> 'const int' lvalue .length 0x56165c149178
|   |     `-DeclRefExpr 0x56165c160a38 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c1606e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56165c160ba8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56165c160b60 <col:12> 'String::memo_t *' lvalue ->memo 0x56165c149208
|   | | `-CXXThisExpr 0x56165c160b50 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56165c160b90 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56165c160b20 <col:12> 'String::memo_t *const' lvalue .memo 0x56165c149208
|   |     `-DeclRefExpr 0x56165c160b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c1606e8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56165c160bf0 <col:12>
|     `-UnaryOperator 0x56165c160bd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c160bc8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56165c160758 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56165c160758
  `-ParmVarDecl 0x56165c160868 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c13fe90 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56165c13ffa8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56165c140038 <col:16, col:22> col:16 public
|-TypedefDecl 0x56165c140078 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56165be14fd0 'const char *'
|   `-QualType 0x56165be14521 'const char' const
|     `-BuiltinType 0x56165be14520 'char'
|-TypedefDecl 0x56165c140100 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56165c1400d0 'String::const_iterator' sugar
|   |-Typedef 0x56165c140078 'const_iterator'
|   `-PointerType 0x56165be14fd0 'const char *'
|     `-QualType 0x56165be14521 'const char' const
|       `-BuiltinType 0x56165be14520 'char'
|-TypedefDecl 0x56165c140270 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56165c1401e0 'int (String::*)() const'
|   |-RecordType 0x56165c13ff20 'String'
|   | `-CXXRecord 0x56165c13fe90 'String'
|   `-ParenType 0x56165c140180 'int () const' sugar
|     `-FunctionProtoType 0x56165c114d20 'int () const' const cdecl
|       `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c1402d8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56165bf69900 'int64_t' sugar
|   |-Typedef 0x56165be7d390 'int64_t'
|   `-TypedefType 0x56165be56630 '__int64_t' sugar
|     |-Typedef 0x56165be56208 '__int64_t'
|     `-BuiltinType 0x56165be145a0 'long'
|-TypedefDecl 0x56165c140340 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56165bf69820 'uint64_t' sugar
|   |-Typedef 0x56165be7d530 'uint64_t'
|   `-TypedefType 0x56165be566c0 '__uint64_t' sugar
|     |-Typedef 0x56165be56278 '__uint64_t'
|     `-BuiltinType 0x56165be14640 'unsigned long'
|-TypedefDecl 0x56165c1403d0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56165c1403a0 'String::intmax_t' sugar
|   |-Typedef 0x56165c1402d8 'intmax_t'
|   `-TypedefType 0x56165bf69900 'int64_t' sugar
|     |-Typedef 0x56165be7d390 'int64_t'
|     `-TypedefType 0x56165be56630 '__int64_t' sugar
|       |-Typedef 0x56165be56208 '__int64_t'
|       `-BuiltinType 0x56165be145a0 'long'
|-TypedefDecl 0x56165c140460 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56165c140430 'String::uintmax_t' sugar
|   |-Typedef 0x56165c140340 'uintmax_t'
|   `-TypedefType 0x56165bf69820 'uint64_t' sugar
|     |-Typedef 0x56165be7d530 'uint64_t'
|     `-TypedefType 0x56165be566c0 '__uint64_t' sugar
|       |-Typedef 0x56165be56278 '__uint64_t'
|       `-BuiltinType 0x56165be14640 'unsigned long'
|-CXXConstructorDecl 0x56165c140520 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56165c1406c8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56165c140608 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56165c140878 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56165c1407b8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56165c1409d0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56165c140940 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56165c140be8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56165c140a98 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56165c140b18 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56165c140e08 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56165c140cb8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56165c140d38 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56165c141028 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56165c140ed8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56165c140f58 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56165c141248 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56165c1410f8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56165c141178 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56165c1413d8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56165c141310 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56165c141558 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56165c141498 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56165c1416e8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56165c141620 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56165c141840 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56165c1417b0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56165c141998 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56165c141908 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56165c141af0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56165c141a60 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56165c141c78 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56165c141bb8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56165c141e08 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56165c141d40 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56165c141f98 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56165c141ed0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56165c142128 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56165c142060 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56165c142220 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56165c142348 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56165c1424c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56165c142400 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56165c142618 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56165c142588 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56165c1426d0 <col:63> "" ""
|-CXXMethodDecl 0x56165c142818 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56165c142758 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56165c142a28 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56165c1428d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56165c142958 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56165c142c48 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56165c142af0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56165c142b70 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56165c142f28 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56165c142d08 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56165c142d88 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56165c14ed70 <col:55> 'int' 10
| `-ParmVarDecl 0x56165c142e00 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56165c14ed90 <col:76> 'bool' true
|-CXXMethodDecl 0x56165c143208 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56165c142ff0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56165c143070 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56165c14eda0 <col:56> 'int' 10
| `-ParmVarDecl 0x56165c1430e8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56165c14edc0 <col:77> 'bool' true
|-CXXMethodDecl 0x56165c143310 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56165c1433d8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56165c1434a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56165c143540 <col:20>
| `-OptimizeNoneAttr 0x56165c143598 <col:30>
|-CXXConversionDecl 0x56165c143688 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56165c143758 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56165c143818 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56165c143908 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56165c1439c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56165c143b48 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56165c143a80 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56165c143c98 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56165c143c08 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56165c143d88 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56165c143e48 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56165c144098 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56165c143f00 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56165c143f80 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56165c1442f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56165c144160 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56165c1441e0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56165c1443c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c1445d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56165c144480 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56165c144500 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56165c1447f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56165c1446a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56165c144720 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56165c144988 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56165c1448c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56165c144a78 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56165c144be8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56165c144b28 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56165c144df8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56165c144ca8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56165c144d28 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56165c145010 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56165c144eb8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56165c144f30 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56165c1451a0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56165c1450d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56165c1453c0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56165c145260 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56165c1452e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56165c145510 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56165c145480 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56165c1456e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56165c1455d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56165c145650 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56165c145838 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56165c1457a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56165c145a50 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56165c1458f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56165c145970 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56165c14edd0 <col:39> 'int' 0
|-CXXMethodDecl 0x56165c145c70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56165c145b10 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56165c145b90 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56165c14edf0 <col:48> 'int' 0
|-CXXMethodDecl 0x56165c145e50 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56165c145d30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56165c145db0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56165c14ee10 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56165c145f20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56165c145fe0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56165c1460a0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56165c146160 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56165c146220 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56165c1463c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56165c1462d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56165c146548 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56165c146480 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56165c146720 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56165c146608 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56165c146898 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56165c1467d8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56165c1469e0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56165c146950 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56165c146b30 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56165c146aa0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56165c146d08 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56165c146bf0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56165c146c70 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56165c146ee8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56165c146dd0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56165c146e50 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56165c147038 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56165c146fa8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56165c147248 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56165c1470f8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56165c147178 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56165c1473a8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56165c147310 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56165c147500 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56165c147468 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56165c1475a8 <col:57> "" ""
|-CXXMethodDecl 0x56165c1476b8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56165c147628 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56165c147808 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56165c147778 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56165c147988 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56165c1478c0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56165c147a50 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56165c147b10 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56165c147bd0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56165c147c70 <col:49> "" ""
|-CXXMethodDecl 0x56165c147d00 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56165c147dc0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56165c147eb0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56165c147f78 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56165c148038 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56165c1480f8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56165c1481f0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56165c1482b8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56165c148380 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56165c148558 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56165c148438 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56165c1484b8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56165c148780 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56165c148620 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56165c1486a0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56165c148890 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56165c1488f8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56165c148920 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56165c148a38 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56165c148ad8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56165c148b38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56165c148b98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56165c148c48 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56165c148cb0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56165c148ee8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56165c148f38 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c148ec8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56165c148dd8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56165c148d80 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56165c148dc0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56165c148da0 <col:32> 'int' 8
|-CXXRecordDecl 0x56165c148f50 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56165c149068 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56165c149110 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56165c149178 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56165c149208 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56165c14f2a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56165c14f6d8 <col:12>
| |-CXXConstructorDecl 0x56165c14f3a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56165c14f4b8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56165c149110 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56165c151c60 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56165c151c30 <col:12> 'const char *const' lvalue .data 0x56165c149110
| | |     `-DeclRefExpr 0x56165c151c10 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c14f4b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56165c149178 'length' 'int'
| | | `-ImplicitCastExpr 0x56165c151cf0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56165c151cc0 <col:12> 'const int' lvalue .length 0x56165c149178
| | |     `-DeclRefExpr 0x56165c151ca0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c14f4b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56165c149208 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56165c151d80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56165c151d50 <col:12> 'String::memo_t *const' lvalue .memo 0x56165c149208
| | |     `-DeclRefExpr 0x56165c151d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c14f4b8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56165c151dd8 <col:12>
| |-CXXConstructorDecl 0x56165c14f558 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56165c14f558
| | `-ParmVarDecl 0x56165c14f668 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56165c154bc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56165c1605d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56165c1606e8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56165c160c00 <col:12>
| |   |-BinaryOperator 0x56165c160a18 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56165c1609d0 <col:12> 'const char *' lvalue ->data 0x56165c149110
| |   | | `-CXXThisExpr 0x56165c1609c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56165c160a00 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56165c160990 <col:12> 'const char *const' lvalue .data 0x56165c149110
| |   |     `-DeclRefExpr 0x56165c160970 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c1606e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56165c160ae0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56165c160a98 <col:12> 'int' lvalue ->length 0x56165c149178
| |   | | `-CXXThisExpr 0x56165c160a88 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56165c160ac8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56165c160a58 <col:12> 'const int' lvalue .length 0x56165c149178
| |   |     `-DeclRefExpr 0x56165c160a38 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c1606e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56165c160ba8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56165c160b60 <col:12> 'String::memo_t *' lvalue ->memo 0x56165c149208
| |   | | `-CXXThisExpr 0x56165c160b50 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56165c160b90 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56165c160b20 <col:12> 'String::memo_t *const' lvalue .memo 0x56165c149208
| |   |     `-DeclRefExpr 0x56165c160b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x56165c1606e8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56165c160bf0 <col:12>
| |     `-UnaryOperator 0x56165c160bd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56165c160bc8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56165c160758 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56165c160758
|   `-ParmVarDecl 0x56165c160868 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56165c149280 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56165c1494c8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56165c1492e8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56165c149368 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56165c1493e0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56165c14f260 <col:79, line:261:5>
|   |-BinaryOperator 0x56165c14eed8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56165c14ee70 <col:2, col:5> 'const char *' lvalue .data 0x56165c149110
|   | | `-MemberExpr 0x56165c14ee40 <col:2> 'String::rep_t' lvalue ->_r 0x56165c149280
|   | |   `-CXXThisExpr 0x56165c14ee30 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56165c14eec0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56165c14eea0 <col:12> 'const char *' lvalue ParmVar 0x56165c1492e8 'data' 'const char *'
|   |-BinaryOperator 0x56165c14efa0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56165c14ef38 <col:2, col:5> 'int' lvalue .length 0x56165c149178
|   | | `-MemberExpr 0x56165c14ef08 <col:2> 'String::rep_t' lvalue ->_r 0x56165c149280
|   | |   `-CXXThisExpr 0x56165c14eef8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56165c14ef88 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56165c14ef68 <col:14> 'int' lvalue ParmVar 0x56165c149368 'length' 'int'
|   `-IfStmt 0x56165c14f248 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56165c14f0c0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56165c14f0a8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56165c14f088 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56165c14f068 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56165c14f000 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56165c149208
|     |       | `-MemberExpr 0x56165c14efd0 <col:7> 'String::rep_t' lvalue ->_r 0x56165c149280
|     |       |   `-CXXThisExpr 0x56165c14efc0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56165c14f050 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56165c14f030 <col:17> 'String::memo_t *' lvalue ParmVar 0x56165c1493e0 'memo' 'String::memo_t *'
|     `-CallExpr 0x56165c14f220 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56165c14f208 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56165c14f110 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56165c137ef8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56165c14f178 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56165c148ad8
|         `-ImplicitCastExpr 0x56165c14f160 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56165c14f140 <col:27> 'String::memo_t *' lvalue ParmVar 0x56165c1493e0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56165c149778 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56165c149598 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56165c149618 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56165c149690 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56165c149280 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56165c14f6e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56165c14f878 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56165c14f7e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56165c14f750 <col:2> '<bound member function type>' ->assign_memo 0x56165c1494c8
|     | `-ImplicitCastExpr 0x56165c14f818 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56165c14f740 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56165c14f830 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56165c14f780 <col:14> 'const char *' lvalue ParmVar 0x56165c149598 'data' 'const char *'
|     |-ImplicitCastExpr 0x56165c14f848 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56165c14f7a0 <col:20> 'int' lvalue ParmVar 0x56165c149618 'length' 'int'
|     `-ImplicitCastExpr 0x56165c14f860 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56165c14f7c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x56165c149690 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56165c149908 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56165c149848 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56165c14fad0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56165c14fa50 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56165c14f8a0 <col:2> '<bound member function type>' ->assign_memo 0x56165c1494c8
|     | `-CXXThisExpr 0x56165c14f890 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56165c14fa88 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56165c14f920 <col:14, col:19> 'const char *' lvalue .data 0x56165c149110
|     |   `-MemberExpr 0x56165c14f8f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56165c149280
|     |     `-DeclRefExpr 0x56165c14f8d0 <col:14> 'const String' lvalue ParmVar 0x56165c149848 'x' 'const String &'
|     |-ImplicitCastExpr 0x56165c14faa0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56165c14f9a0 <col:25, col:30> 'int' lvalue .length 0x56165c149178
|     |   `-MemberExpr 0x56165c14f970 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56165c149280
|     |     `-DeclRefExpr 0x56165c14f950 <col:25> 'const String' lvalue ParmVar 0x56165c149848 'x' 'const String &'
|     `-ImplicitCastExpr 0x56165c14fab8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56165c14fa20 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56165c149208
|         `-MemberExpr 0x56165c14f9f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56165c149280
|           `-DeclRefExpr 0x56165c14f9d0 <col:38> 'const String' lvalue ParmVar 0x56165c149848 'x' 'const String &'
|-CXXMethodDecl 0x56165c1499d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56165c150490 <col:31, line:278:5>
|   `-IfStmt 0x56165c150478 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56165c14fb70 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56165c14fb58 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56165c14fb28 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56165c149208
|     |     `-MemberExpr 0x56165c14faf8 <col:6> 'String::rep_t' lvalue ->_r 0x56165c149280
|     |       `-CXXThisExpr 0x56165c14fae8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56165c150450 <col:15, line:277:2>
|       |-ParenExpr 0x56165c150020 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56165c14fff0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56165c14fc80 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56165c14fc68 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56165c14fc50 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56165c14fc10 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56165c148ad8
|       |   |       `-ImplicitCastExpr 0x56165c14fbf8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56165c14fbc8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56165c149208
|       |   |           `-MemberExpr 0x56165c14fb98 <col:27> 'String::rep_t' lvalue ->_r 0x56165c149280
|       |   |             `-CXXThisExpr 0x56165c14fb88 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56165c14fce0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56165c14fcc0 <col:54> 'int' 0
|       |   `-CallExpr 0x56165c14ff50 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56165c14ff38 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56165c14feb8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56165c14ff90 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56165c14fdc8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56165c14ffa8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56165c14fdf8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56165c14ffc0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56165c14fe30 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56165c14ffd8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56165c14fea0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56165c14fe88 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56165c14fe50 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56165c150370 <line:274:6, line:275:22>
|       | |-CallExpr 0x56165c150230 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56165c150218 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56165c150190 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56165c139340 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56165c150160 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56165c148ad8
|       | |   `-ImplicitCastExpr 0x56165c150148 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56165c150118 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56165c149208
|       | |       `-MemberExpr 0x56165c1500e8 <col:40> 'String::rep_t' lvalue ->_r 0x56165c149280
|       | |         `-CXXThisExpr 0x56165c1500d8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56165c150330 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56165c150318 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56165c150258 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56165c14e1b0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56165c150358 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56165c1502b8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56165c149208
|       |       `-MemberExpr 0x56165c150288 <col:15> 'String::rep_t' lvalue ->_r 0x56165c149280
|       |         `-CXXThisExpr 0x56165c150278 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56165c150430 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56165c1503c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56165c149208
|         | `-MemberExpr 0x56165c150398 <col:6> 'String::rep_t' lvalue ->_r 0x56165c149280
|         |   `-CXXThisExpr 0x56165c150388 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56165c150418 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56165c1503f8 <col:16> 'int' 0
|-CXXMethodDecl 0x56165c149c68 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56165c149a88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56165c149b08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56165c149b80 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56165c149d40 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56165c149f90 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56165c149df8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56165c149e78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56165c149ef0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56165c14a178 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56165c14a060 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56165c14a0e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56165c14a278 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56165c150568 <col:41, line:286:5>
|   `-ReturnStmt 0x56165c150558 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56165c150528 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56165c1504f0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56165c1504d8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56165c1504b8 <col:46> 'int' 1
|-CXXMethodDecl 0x56165c14a518 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56165c14a330 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56165c14a3b0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56165c14a430 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56165c14e1b0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56165c14a5e0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56165c14e280 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56165c14e450 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56165c14e338 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56165c14e3b8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56165c14e510 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56165c14e5d8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56165c14e6d8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56165c14e750 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56165c14e7c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56165c14e830 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56165c14e930 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56165c14e980 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c14e910 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56165c14e8f0 <col:22> 'int' 14
|-CXXMethodDecl 0x56165c14eb98 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56165c14e9b0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56165c14ea30 <col:38> col:41 'int'
| `-ParmVarDecl 0x56165c14eab0 <col:43> col:46 'int'
|-FriendDecl 0x56165c14eca0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56165c14ed30 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56165c211b70 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56165c211d48 prev 0x56165c211b70 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56165c211dd8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56165c211e00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c213760 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56165c213710 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56165c2136f0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56165c212018 'type'
|     `-SubstTemplateTypeParmType 0x56165c211fe0 'String' sugar
|       |-TemplateTypeParmType 0x56165c104740 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c1046f0 'T'
|       `-RecordType 0x56165c13ff20 'String'
|         `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c213818 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56165c2137e0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56165c2137c0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56165c213760 'type'
|     `-ElaboratedType 0x56165c213710 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56165c2136f0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56165c212018 'type'
|         `-SubstTemplateTypeParmType 0x56165c211fe0 'String' sugar
|           |-TemplateTypeParmType 0x56165c104740 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56165c1046f0 'T'
|           `-RecordType 0x56165c13ff20 'String'
|             `-CXXRecord 0x56165c13fe90 'String'
|-CXXMethodDecl 0x56165c213998 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56165c2138a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56165c213a88 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56165c213b68 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56165c213b68
|-CXXMethodDecl 0x56165c213e38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56165c213d40 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56165c214078 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56165c213ef0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56165c213f68 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56165c214248 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56165c214138 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56165c2141b0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56165c3be8e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56165c3be9b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56165c3bec08 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56165c3bea78 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56165c3beaf0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56165c3bee68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56165c3becd8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56165c3bed50 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56165c3bf028 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56165c3bef38 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56165c3bf1e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56165c3bf0f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56165c3bf2a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56165c3bf350 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56165c3bf588 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56165c3bf400 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56165c3bf478 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56165c3bf828 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56165c3bf730 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56165c3bf8f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56165c3bf940 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56165c3bf990 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56165c3786d0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56165c2105d8 prev 0x56165c3786d0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56165c211ae0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56165c211a90 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56165c211a70 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56165c211920 'type'
|     `-SubstTemplateTypeParmType 0x56165c2117b0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56165c0da4f0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56165c0da498 'F'
|       `-RecordType 0x56165c211410 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56165c211330 'typed_array_memory'
|-FieldDecl 0x56165c3bf9e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56165c3bfa30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56165c3bfa68 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|   |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56165c111a08 'T'
|   `-RecordType 0x56165c13ff20 'String'
|     `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3bfaf8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56165c3bfac0 'String &'
|   `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|     |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56165c111a08 'T'
|     `-RecordType 0x56165c13ff20 'String'
|       `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3bfb88 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56165c3bfb50 'const String &'
|   `-QualType 0x56165c210671 'const String' const
|     `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-RecordType 0x56165c13ff20 'String'
|         `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3bfc18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56165c3bfbe0 'String *'
|   `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|     |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56165c111a08 'T'
|     `-RecordType 0x56165c13ff20 'String'
|       `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3bfca8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56165c3bfc70 'const String *'
|   `-QualType 0x56165c210671 'const String' const
|     `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-RecordType 0x56165c13ff20 'String'
|         `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3c0900 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56165c3c08b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56165c3c0890 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56165c3c07c8 'type'
|     `-LValueReferenceType 0x56165c3c0790 'const String &'
|       `-QualType 0x56165c3c0531 'const String' const
|         `-SubstTemplateTypeParmType 0x56165c3c0530 'String' sugar
|           |-TemplateTypeParmType 0x56165c0e4440 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56165c0e43e8 'T'
|           `-RecordType 0x56165c13ff20 'String'
|             `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3c0968 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56165c3bfb50 'const String &'
|   `-QualType 0x56165c210671 'const String' const
|     `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-RecordType 0x56165c13ff20 'String'
|         `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3c09c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c3c0a28 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56165c3bfbe0 'String *'
|   `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|     |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56165c111a08 'T'
|     `-RecordType 0x56165c13ff20 'String'
|       `-CXXRecord 0x56165c13fe90 'String'
|-TypedefDecl 0x56165c3c0a90 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56165c3bfc70 'const String *'
|   `-QualType 0x56165c210671 'const String' const
|     `-SubstTemplateTypeParmType 0x56165c210670 'String' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-RecordType 0x56165c13ff20 'String'
|         `-CXXRecord 0x56165c13fe90 'String'
|-EnumDecl 0x56165c3c0ae8 <line:134:5> col:5
| `-EnumConstantDecl 0x56165c3c0be0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56165c3c0bc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56165c1130e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56165c1130c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56165c1130a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56165c3c0c68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56165c3c0ef8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c3c0d20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56165c3c0dc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56165c3c1188 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56165c3c1070 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56165c3c1448 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56165c3c1330 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56165c3c1760 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56165c3c1640 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56165c3c1a70 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56165c3c1950 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56165c3c1d60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c3c1ba8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56165c3c1c20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56165c3c1e88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56165c3c1f38 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c3c1f90 <col:30> Inherited
|-CXXMethodDecl 0x56165c3c1fd8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56165c3c2088 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c3c20e0 <col:30> Inherited
|-CXXMethodDecl 0x56165c3c21a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56165c3c2258 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c3c22b0 <col:30> Inherited
|-CXXMethodDecl 0x56165c3c22f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56165c3c23a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c3c2400 <col:30> Inherited
|-CXXMethodDecl 0x56165c3c2448 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56165c3c24f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c3c2550 <col:30> Inherited
|-CXXMethodDecl 0x56165c3c2598 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56165c3c2648 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c3c26a0 <col:30> Inherited
|-CXXMethodDecl 0x56165c3c26c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56165c3c2778 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56165c3c2828 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56165c3c29e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c3c28d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56165c3c2950 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56165c3c2b38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56165c3c2aa8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c3c2ce8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56165c3c2bf0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56165c3c2da0 <col:20>
| `-OptimizeNoneAttr 0x56165c3c2df8 <col:30>
|-CXXMethodDecl 0x56165c3c2f18 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56165c3c2e20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56165c3c2fd0 <col:20>
| `-OptimizeNoneAttr 0x56165c3c3028 <col:30>
|-CXXMethodDecl 0x56165c3c30e0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56165c3c3050 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c3c3228 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56165c3c3198 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c3c3358 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56165c3c3458 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56165c3c3528 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56165c3c35f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56165c3c3738 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56165c3c36a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c3c3880 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56165c3c37f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c3c39c8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56165c3c3938 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56165c3c3a80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56165c3c3b80 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56165c3c3af0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56165c3c3c38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56165c3c3cf8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56165c3c3df8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56165c3c3f78 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56165c3c3eb8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56165c3c4738 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56165c3c4030 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56165c3c4698 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56165c3c4598 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56165c3c4818 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56165c3c4968 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56165c3c48d8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56165c3c4a20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56165c3c4c68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c3c4ae0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56165c3c4b58 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56165c3c4df8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56165c3c4d38 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56165c3c5008 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56165c3c4ec0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56165c3c4f38 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56165c3c50c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56165c3c5328 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56165c3c5230 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56165c3c53f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56165c3c53f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c4457a8 prev 0x56165c2f6328 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56165c4458a0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56165c445930 <col:22, col:28> col:22 public
|-EnumDecl 0x56165c445958 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56165c445a78 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445a58 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56165c445a40 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56165c445a20 <col:14> 'int' 999
| |-EnumConstantDecl 0x56165c445b20 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445b00 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56165c445ae8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56165c445ac8 <col:14> 'int' 1
| |-EnumConstantDecl 0x56165c445bb0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445b90 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56165c445b70 <col:17> 'int' 0
| |-EnumConstantDecl 0x56165c445c40 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445c20 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56165c445c00 <col:13> 'int' 1
| |-EnumConstantDecl 0x56165c445cd0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445cb0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56165c445c90 <col:16> 'int' 2
| |-EnumConstantDecl 0x56165c445d60 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445d40 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56165c445d20 <col:13> 'int' 3
| |-EnumConstantDecl 0x56165c445df0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445dd0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56165c445db0 <col:15> 'int' 4
| |-EnumConstantDecl 0x56165c445e80 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445e60 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56165c445e40 <col:14> 'int' 5
| |-EnumConstantDecl 0x56165c445f10 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56165c445ef0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56165c445ed0 <col:12> 'int' 6
| `-EnumConstantDecl 0x56165c445fa0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56165c445f80 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56165c445f60 <col:13> 'int' 7
|-VarDecl 0x56165c446010 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56165c446098 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56165c446120 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56165c4461a8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56165c446230 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56165c4462b8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56165c446340 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56165c4463c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56165c446450 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56165c4464d8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56165c446560 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56165c446660 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56165c44b988 '_nerrors' 'int'
| | `-IntegerLiteral 0x56165c44c118 <line:128:13> 'int' 0
| `-CompoundStmt 0x56165c44c188 <col:16, line:129:5>
|-CXXDestructorDecl 0x56165c446750 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56165c44c198 <col:29, line:132:5>
|-CXXMethodDecl 0x56165c446908 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56165c446840 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56165c4469d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56165c446ab8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56165c44c1f0 <col:44, line:161:5>
|   `-ReturnStmt 0x56165c44c1e0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56165c44c1c8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56165c44c1a8 <col:9> 'ErrorHandler *' lvalue Var 0x56165c44b9e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56165c446bf8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56165c446b68 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56165c446cc0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56165c44c250 <col:43, line:173:5>
|   `-ReturnStmt 0x56165c44c240 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56165c44c228 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56165c44c208 <col:9> 'ErrorHandler *' lvalue Var 0x56165c44ba60 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56165c446d78 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56165c446df8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56165c446f08 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56165c446e78 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56165c447058 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56165c446fc8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56165c4471b0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56165c447118 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56165c447308 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x56165c447270 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56165c447460 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56165c4473c8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56165c447670 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56165c447518 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56165c447598 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56165c447848 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56165c447730 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56165c4477b0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56165c447a68 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56165c447908 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56165c447988 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56165c447c48 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56165c447b28 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56165c447ba8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56165c447e28 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56165c447d08 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56165c447d88 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56165c447fb0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56165c447ee8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56165c448180 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56165c448068 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56165c4480e0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56165c44c4a8 <col:57, line:234:5>
|   `-ReturnStmt 0x56165c44c498 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56165c44c480 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56165c44c428 <col:9, col:41> 'int'
|         |-MemberExpr 0x56165c44c3f8 <col:9> '<bound member function type>' ->xmessage 0x56165c447fb0
|         | `-CXXThisExpr 0x56165c44c3e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56165c44c468 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56165c44c450 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56165c44c3c8 <col:18, col:40> 'String' (CXXTemporary 0x56165c44c3c8)
|               `-CallExpr 0x56165c44c390 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56165c44c378 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56165c44c2f0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56165c44a178 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56165c44c310 <col:31> 'const String' lvalue ParmVar 0x56165c4480e0 'str' 'const String &'
|                 `-DeclRefExpr 0x56165c44c330 <col:36> 'const String' lvalue ParmVar 0x56165c448068 'anno' 'const String &'
|-CXXMethodDecl 0x56165c448460 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56165c448240 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56165c4482c0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56165c448338 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56165c44c738 <col:68, line:243:5>
|   `-ReturnStmt 0x56165c44c728 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56165c44c710 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56165c44c6b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x56165c44c680 <col:9> '<bound member function type>' ->xmessage 0x56165c448180
|         | `-CXXThisExpr 0x56165c44c670 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56165c44c548 <col:18> 'const String' lvalue ParmVar 0x56165c448240 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56165c44c6f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56165c44c6e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56165c44c650 <col:24, col:40> 'String' (CXXTemporary 0x56165c44c650)
|               `-CXXMemberCallExpr 0x56165c44c5e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56165c44c578 <col:24> '<bound member function type>' ->vformat 0x56165c449640
|                 | `-CXXThisExpr 0x56165c44c568 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56165c44c618 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56165c44c5a8 <col:32> 'const char *' lvalue ParmVar 0x56165c4482c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56165c44c630 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56165c44c5c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56165c448338 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56165c448700 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56165c448528 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56165c4485a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56165c448618 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56165c44ca78 <col:23, line:254:5>
|   `-ReturnStmt 0x56165c44ca68 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56165c44ca50 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56165c44c9f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x56165c44c9c0 <col:9> '<bound member function type>' ->xmessage 0x56165c448180
|         | `-CXXThisExpr 0x56165c44c9b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56165c44ca38 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56165c44ca20 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56165c44c970 <col:18, col:65> 'String' (CXXTemporary 0x56165c44c970)
|         |     `-CallExpr 0x56165c44c908 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56165c44c8f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56165c44c7d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56165c44a178 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56165c44c7f8 <col:31> 'const String' lvalue ParmVar 0x56165c4485a0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56165c44c950 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56165c44c938 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56165c44c8d0 <col:37, col:64> 'String' (CXXTemporary 0x56165c44c8d0)
|         |             `-CallExpr 0x56165c44c8a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56165c44c888 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56165c44c818 <col:37> 'String (const String &)' lvalue CXXMethod 0x56165c44a7c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56165c44c838 <col:56> 'const String' lvalue ParmVar 0x56165c448528 'landmark' 'const String &'
|         `-DeclRefExpr 0x56165c44c990 <col:68> 'const String' lvalue ParmVar 0x56165c448618 'str' 'const String &'
|-CXXMethodDecl 0x56165c448a80 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56165c4487c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56165c448840 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56165c4488c0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56165c448938 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56165c44cd30 <col:34, line:267:5>
|   `-ReturnStmt 0x56165c44cd20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56165c44cd08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56165c44cca0 <col:9, col:51> 'int'
|         |-MemberExpr 0x56165c44cc70 <col:9> '<bound member function type>' ->xmessage 0x56165c448700
|         | `-CXXThisExpr 0x56165c44cc60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56165c44cb18 <col:18> 'const String' lvalue ParmVar 0x56165c4487c8 'landmark' 'const String &'
|         |-DeclRefExpr 0x56165c44cb38 <col:28> 'const String' lvalue ParmVar 0x56165c448840 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56165c44ccf0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56165c44ccd8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56165c44cc40 <col:34, col:50> 'String' (CXXTemporary 0x56165c44cc40)
|               `-CXXMemberCallExpr 0x56165c44cbd8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56165c44cb68 <col:34> '<bound member function type>' ->vformat 0x56165c449640
|                 | `-CXXThisExpr 0x56165c44cb58 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56165c44cc08 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56165c44cb98 <col:42> 'const char *' lvalue ParmVar 0x56165c4488c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56165c44cc20 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56165c44cbb8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56165c448938 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56165c448b90 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56165c44cdb0 <col:25, line:288:5>
|   `-ReturnStmt 0x56165c44cda0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56165c44cd88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56165c44cd58 <col:9> 'const int' lvalue ->_nerrors 0x56165c44b988
|         `-CXXThisExpr 0x56165c44cd48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56165c448da0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56165c448c48 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56165c448cc8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56165c449088 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56165c448e68 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56165c448ee8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56165c448f60 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56165c449220 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56165c449158 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56165c449468 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56165c4492e0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56165c449358 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56165c44d010 <col:58, line:357:5>
|   `-ReturnStmt 0x56165c44d000 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56165c44cfe8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56165c44cfb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56165c44cfa0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56165c44cf80 <col:9, col:29> 'String' (CXXTemporary 0x56165c44cf80)
|             `-CallExpr 0x56165c44cf10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56165c44cef8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56165c44ce78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56165c449088 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56165c44ce18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56165c44cf48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56165c44ce38 <col:21> 'const char *' lvalue ParmVar 0x56165c4492e0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56165c44cf60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56165c44ce58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56165c449358 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56165c449640 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56165c449530 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56165c4495a8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56165c449798 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56165c449708 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56165c4498e0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56165c449850 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56165c449b80 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56165c449998 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56165c449a18 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56165c449a90 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56165c449ce0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56165c449c50 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56165c44d128 <col:37, line:441:5>
|   `-IfStmt 0x56165c44d110 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56165c44d098 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56165c44d068 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56165c44d028 <col:6> 'int' lvalue ParmVar 0x56165c449c50 'level' 'int'
|     | `-ImplicitCastExpr 0x56165c44d080 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56165c44d048 <col:15> 'ErrorHandler::Level' EnumConstant 0x56165c445d60 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56165c44d0f8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56165c44d0c8 <col:8> 'int' lvalue ->_nerrors 0x56165c44b988
|         `-CXXThisExpr 0x56165c44d0b8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56165c449da8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56165c44d1c0 <col:26, line:448:5>
|   `-BinaryOperator 0x56165c44d1a0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56165c44d150 <col:2> 'int' lvalue ->_nerrors 0x56165c44b988
|     | `-CXXThisExpr 0x56165c44d140 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56165c44d180 <col:13> 'int' 0
|-CXXMethodDecl 0x56165c449f70 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56165c449e60 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56165c449ed8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56165c44a178 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56165c44a030 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56165c44a0a8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56165c44a428 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56165c44a238 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56165c44a2b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56165c44a338 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56165c44a4e0 <col:59> 0 0
|-CXXMethodDecl 0x56165c44a678 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56165c44a558 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56165c44a5d8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56165c44d830 <col:70, line:534:5>
|   |-DeclStmt 0x56165c44d330 <line:528:2, col:20>
|   | |-VarDecl 0x56165c44d1e8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56165c44d250 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56165c44d288 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56165c44d2f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56165c44d400 <line:529:2, col:23>
|   | `-VarDecl 0x56165c44d360 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56165c44d3e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56165c44d3c8 <col:18> 'const char *' lvalue ParmVar 0x56165c44a558 'begin' 'const char *'
|   |-DoStmt 0x56165c44d7c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56165c44d6f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56165c44d6e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56165c44d6c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56165c44d418 <col:6> 'const char *' lvalue Var 0x56165c44d360 'x' 'const char *'
|   | |     `-CallExpr 0x56165c44d610 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56165c44d5f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56165c44d5b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56165c44be60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56165c44d678 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56165c44d660 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56165c44d4d0 <col:20, col:27> 'String' (CXXTemporary 0x56165c44d4d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x56165c44d498 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56165c44d690 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56165c44d4f0 <col:30> 'const char *' lvalue Var 0x56165c44d360 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56165c44d6a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56165c44d510 <col:33> 'const char *' lvalue ParmVar 0x56165c44a5d8 'end' 'const char *'
|   | |       |-UnaryOperator 0x56165c44d550 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56165c44d530 <col:39> 'String' lvalue Var 0x56165c44d1e8 'name' 'String'
|   | |       |-UnaryOperator 0x56165c44d588 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56165c44d568 <col:46> 'String' lvalue Var 0x56165c44d288 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56165c44d5a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56165c44d7b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56165c44d798 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56165c44d778 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56165c44d748 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|   |         `-ImplicitCastExpr 0x56165c44d730 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56165c44d710 <col:11> 'String' lvalue Var 0x56165c44d1e8 'name' 'String'
|   `-ReturnStmt 0x56165c44d820 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56165c44d808 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56165c44d7e8 <col:9> 'const char *' lvalue Var 0x56165c44d360 'x' 'const char *'
|-CXXMethodDecl 0x56165c44a7c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56165c44a738 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56165c44de38 <col:55, line:550:5>
|   `-IfStmt 0x56165c44de10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56165c44da70 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56165c44da58 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56165c44da40 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56165c44da20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56165c44d9f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|     | |       `-DeclRefExpr 0x56165c44d890 <col:6> 'const String' lvalue ParmVar 0x56165c44a738 'x' 'const String &'
|     | `-BinaryOperator 0x56165c44d9d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56165c44d9a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56165c44d950 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56165c44d938 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56165c44d8f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56165c15cec0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56165c44d8b0 <col:11> 'const String' lvalue ParmVar 0x56165c44a738 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56165c44d8d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56165c44d9b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56165c44d988 <col:19> 'char' 123
|     |-ReturnStmt 0x56165c44dae0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56165c44dab0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56165c44da90 <col:13> 'const String' lvalue ParmVar 0x56165c44a738 'x' 'const String &'
|     `-IfStmt 0x56165c44dde8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56165c44db78 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56165c44db60 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56165c44db40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56165c44db10 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|       |       `-DeclRefExpr 0x56165c44daf0 <col:11> 'const String' lvalue ParmVar 0x56165c44a738 'x' 'const String &'
|       |-ReturnStmt 0x56165c44dd00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56165c44dce8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56165c44dcb8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56165c44dca0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56165c44dc80 <col:13, col:29> 'String' (CXXTemporary 0x56165c44dc80)
|       |         `-CallExpr 0x56165c44dc30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56165c44dc18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56165c44db90 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56165c449f70 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56165c44dc60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56165c44dbb0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56165c44dbd0 <col:28> 'const String' lvalue ParmVar 0x56165c44a738 'x' 'const String &'
|       `-ReturnStmt 0x56165c44ddd8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56165c44ddc0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56165c44dd90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56165c44dd78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56165c44dd58 <col:13, col:20> 'String' (CXXTemporary 0x56165c44dd58)
|                 `-CXXTemporaryObjectExpr 0x56165c44dd20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56165c44a990 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56165c44a880 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56165c44a8f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56165c44c108 <col:71> 'bool' false
|-CXXRecordDecl 0x56165c44aa40 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56165c44ad38 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56165c44acd0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56165c44ac70 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56165c44ac30 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56165c13ff20 'String'
|       | `-CXXRecord 0x56165c13fe90 'String'
|       |-BuiltinType 0x56165be14580 'int'
|       `-DecayedType 0x56165c2f7370 '__va_list_tag *' sugar
|         |-TypedefType 0x56165c2f7340 'va_list' sugar
|         | |-Typedef 0x56165c031fe0 'va_list'
|         | `-TypedefType 0x56165c031f90 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56165bf69bb8 '__gnuc_va_list'
|         |   `-TypedefType 0x56165bf69b20 '__builtin_va_list' sugar
|         |     |-Typedef 0x56165be55d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56165be55ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56165be152d0 '__va_list_tag'
|         |         `-CXXRecord 0x56165be15238 '__va_list_tag'
|         `-PointerType 0x56165c037880 '__va_list_tag *'
|           `-RecordType 0x56165be152d0 '__va_list_tag'
|             `-CXXRecord 0x56165be15238 '__va_list_tag'
|-EnumDecl 0x56165c44ad90 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56165c44ae90 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b430 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44ae70 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56165c44ae50 <col:16> 'int' 1
| |-EnumConstantDecl 0x56165c44af20 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b448 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44af00 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56165c44aee0 <col:21> 'int' 2
| |-EnumConstantDecl 0x56165c44afb0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b460 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44af90 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56165c44af70 <col:22> 'int' 4
| |-EnumConstantDecl 0x56165c44b080 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b478 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44b020 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56165c44b000 <col:17> 'int' 8
| |-EnumConstantDecl 0x56165c44b110 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b490 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44b0f0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56165c44b0d0 <col:22> 'int' 16
| |-EnumConstantDecl 0x56165c44b1a0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b4a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44b180 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56165c44b160 <col:19> 'int' 32
| |-EnumConstantDecl 0x56165c44b230 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b4c0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44b210 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56165c44b1f0 <col:17> 'int' 64
| |-EnumConstantDecl 0x56165c44b2c0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b4d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44b2a0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56165c44b280 <col:14> 'int' 128
| |-EnumConstantDecl 0x56165c44b350 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56165c44b4f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c44b330 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56165c44b310 <col:16> 'int' 256
| `-EnumConstantDecl 0x56165c44b3e0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56165c44b508 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c44b3c0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56165c44b3a0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56165c44b718 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56165c44b530 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56165c44b5d0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56165c44b8a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56165c44b7d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56165c44b948 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56165c44b988 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56165c44b9e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56165c44ba60 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56165c44be60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56165c44bad8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56165c44bb58 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56165c44bbd8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56165c44bc50 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56165c44bcc8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56165c44bd40 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56165c44bf88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56165c44bf88
| `-ParmVarDecl 0x56165c44c098 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56165c44e198 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56165c44e198
  `-ParmVarDecl 0x56165c44e2a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c2f63b8 prev 0x56165c33b178 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c2f64b0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56165c2f6540 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56165c2f6678 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56165c2f6578 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56165c2f7aa0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56165c2f7a80 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56165c2f7618 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56165c2f7b30 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56165c2f7af0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56165c2f6578 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56165c2f7680 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56165c2f7bb0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56165c2f7b70 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56165c2f76e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56165c2f7bf0 <col:54> 'bool' false
| `-CompoundStmt 0x56165c2f7cf8 <col:61, line:38:5>
|   `-BinaryOperator 0x56165c2f7cd8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56165c2f7c70 <col:9> 'const Element *' lvalue ->_context 0x56165c2f75b8
|     | `-CXXThisExpr 0x56165c2f7c60 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56165c2f7cc0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56165c2f7ca0 <col:20> 'int' 0
|-CXXConstructorDecl 0x56165c2f6888 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c2f6738 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56165c2f67b0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56165c2f7ad8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56165c2f7ab8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56165c2f75b8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56165c2f7d50 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56165c2f7d10 <col:20> 'const Element *' lvalue ParmVar 0x56165c2f6738 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56165c2f7618 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56165c2f7dd0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56165c2f7d90 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56165c2f67b0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56165c2f7680 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56165c2f7e50 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56165c2f7e10 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56165c2f76e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56165c2f7e90 <col:73> 'bool' false
| `-CompoundStmt 0x56165c2f7f08 <col:80, line:46:5>
|-CXXMethodDecl 0x56165c2f69b8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56165c2f7f80 <col:36, line:51:5>
|   `-ReturnStmt 0x56165c2f7f70 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56165c2f7f58 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56165c2f7f28 <col:16> 'const Element *const' lvalue ->_context 0x56165c2f75b8
|         `-CXXThisExpr 0x56165c2f7f18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56165c2f6aa8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56165c2f8000 <col:32, line:57:5>
|   `-ReturnStmt 0x56165c2f7ff0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56165c2f7fd8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56165c2f7fa8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56165c2f7618
|         `-CXXThisExpr 0x56165c2f7f98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56165c2f6b68 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56165c2f6cf0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56165c2f6c20 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56165c2f6e40 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56165c2f6db0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56165c2f6f90 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56165c2f6f00 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56165c2f7198 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56165c2f7048 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56165c2f70c0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56165c2f74c8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56165c2f7258 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56165c2f72d8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56165c2f73a0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56165c2f7580 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56165c2f75b8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56165c2f7618 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56165c2f7680 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56165c2f76e0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56165c2f7730 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56165c2f7730
| `-ParmVarDecl 0x56165c2f7848 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56165c2f78e8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56165c2f78e8
| `-ParmVarDecl 0x56165c2f79f8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56165c458d10 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56165c403030 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56165c403208 prev 0x56165c403030 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56165c403298 <col:46, col:52> col:46 public
|-TypedefDecl 0x56165c4032c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c404e90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56165c404e40 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56165c403770 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56165c403670 'type'
|     `-TemplateSpecializationType 0x56165c403600 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56165c4034e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56165c4034c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56165c4034a0 <col:24> 'unsigned long' 4
|       `-RecordType 0x56165c4035e0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56165c403500 'char_array'
|-TypedefDecl 0x56165c404f48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56165c404f10 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56165c404ef0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56165c404e90 'type'
|     `-ElaboratedType 0x56165c404e40 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56165c403770 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56165c403670 'type'
|         `-TemplateSpecializationType 0x56165c403600 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56165c4034e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56165c4034c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56165c4034a0 <col:24> 'unsigned long' 4
|           `-RecordType 0x56165c4035e0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56165c403500 'char_array'
|-CXXMethodDecl 0x56165c4050c8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56165c404fd8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56165c4051b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56165c405298 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56165c405568 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56165c405470 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56165c4057a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56165c405620 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56165c405698 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56165c405978 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56165c405868 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56165c4058e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56165c405ad8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56165c405ba8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56165c405df8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56165c405c68 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56165c405ce0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56165c406058 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56165c405ec8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56165c405f40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56165c406218 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56165c406128 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56165c4063d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56165c4062e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56165c406490 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56165c406540 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56165c40db08 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56165c40d980 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56165c40d9f8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56165c40dda8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56165c40dcb0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56165c40de70 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56165c40dec0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56165c40df10 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56165c401a38 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56165c401c48 prev 0x56165c401a38 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56165c402fa0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56165c402f50 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56165c402f30 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56165c402de0 'type'
|     `-SubstTemplateTypeParmType 0x56165c402c00 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56165c0d9d70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c0d9d18 'T'
|       `-RecordType 0x56165c402750 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56165c402668 'sized_array_memory'
|-FieldDecl 0x56165c40df60 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56165c40dfb0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56165c40dfe8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|   |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56165c111a08 'T'
|   `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40e078 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56165c40e040 'int &'
|   `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|     |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56165c111a08 'T'
|     `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40e138 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56165c40e100 'const int &'
|   `-QualType 0x56165c401ce1 'const int' const
|     `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40e1c8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56165c40e190 'int *'
|   `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|     |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56165c111a08 'T'
|     `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40e258 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56165c40e220 'const int *'
|   `-QualType 0x56165c401ce1 'const int' const
|     `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40ee40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56165c40edf0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56165c40edd0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56165c40ed60 'type'
|     `-SubstTemplateTypeParmType 0x56165c40eb20 'int' sugar
|       |-TemplateTypeParmType 0x56165c0e4b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c0e4b20 'T'
|       `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40eea8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56165c40e100 'const int &'
|   `-QualType 0x56165c401ce1 'const int' const
|     `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40ef00 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40ef68 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56165c40e190 'int *'
|   `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|     |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56165c111a08 'T'
|     `-BuiltinType 0x56165be14580 'int'
|-TypedefDecl 0x56165c40efd0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56165c40e220 'const int *'
|   `-QualType 0x56165c401ce1 'const int' const
|     `-SubstTemplateTypeParmType 0x56165c401ce0 'int' sugar
|       |-TemplateTypeParmType 0x56165c111a60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56165c111a08 'T'
|       `-BuiltinType 0x56165be14580 'int'
|-EnumDecl 0x56165c40f028 <line:134:5> col:5
| `-EnumConstantDecl 0x56165c40f120 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56165c40f100 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56165c1130e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56165c1130c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56165c1130a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56165c40f1a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56165c40f3f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c40f260 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56165c40f300 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56165c40f6b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56165c40f5a0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56165c40f978 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56165c40f860 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56165c40fcc0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56165c40fba0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56165c40ffd0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56165c40feb0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56165c4102c0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c410108 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56165c410180 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56165c4103e8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56165c4104c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c410520 <col:30> Inherited
|-CXXMethodDecl 0x56165c410568 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56165c410618 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c410670 <col:30> Inherited
|-CXXMethodDecl 0x56165c410738 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56165c4107e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c410840 <col:30> Inherited
|-CXXMethodDecl 0x56165c410888 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56165c410938 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c410990 <col:30> Inherited
|-CXXMethodDecl 0x56165c4109d8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56165c410a88 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c410ae0 <col:30> Inherited
|-CXXMethodDecl 0x56165c410b28 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56165c410bd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56165c410c30 <col:30> Inherited
|-CXXMethodDecl 0x56165c410c58 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56165c410d08 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56165c410db8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56165c410f78 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c410e68 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56165c410ee0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56165c4110c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56165c411038 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c411278 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56165c411180 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56165c411330 <col:20>
| `-OptimizeNoneAttr 0x56165c411388 <col:30>
|-CXXMethodDecl 0x56165c4114a8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56165c4113b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56165c411560 <col:20>
| `-OptimizeNoneAttr 0x56165c4115b8 <col:30>
|-CXXMethodDecl 0x56165c411670 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56165c4115e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c4117b8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56165c411728 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c4118e8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56165c411a18 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56165c411ae8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56165c411bb8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56165c411cf8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56165c411c68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c411e40 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56165c411db0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56165c411f88 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56165c411ef8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56165c412040 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56165c412140 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56165c4120b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56165c4121f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56165c4122b8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56165c4123b8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56165c412538 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56165c412478 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56165c412cf8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56165c4125f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56165c412c58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56165c412b58 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56165c412dd8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56165c412f28 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56165c412e98 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56165c412fe0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56165c413228 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56165c4130a0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56165c413118 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56165c4133e8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56165c4132f8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56165c413638 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56165c4134b0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56165c413528 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56165c4136f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56165c413958 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56165c413860 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56165c413a28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c3ffba8 prev 0x56165c3e1788 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56165c3ffca0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56165c3ffd90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56165c425820 <col:16, line:828:9>
|-CXXDestructorDecl 0x56165c3ffe80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56165c425830 <col:25, line:830:9>
|-CXXMethodDecl 0x56165c3fff80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56165c400030 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56165c4000d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56165c4000d8
| `-ParmVarDecl 0x56165c4001e8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56165c4009a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56165c4009a8
  `-ParmVarDecl 0x56165c400ab8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c3e1598 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56165c3e16f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56165c3e1788 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56165c3e1840 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56165c3e1948 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56165c3e1878 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56165c414fe8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56165c414fc8 <col:31> 'int' 0
|-CXXConstructorDecl 0x56165c3e1c68 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56165c3e1ae0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56165c3e1b58 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56165c415020 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56165c415000 <col:59> 'int' 0
|-CXXConstructorDecl 0x56165c3e1e40 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c3e1d30 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56165c3e1da8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56165c415058 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56165c415038 <col:55> 'int' 0
|-CXXConstructorDecl 0x56165c3e21f8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56165c3e1fe0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56165c3e2058 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56165c3e20d0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56165c415090 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56165c415070 <col:31> 'int' 0
|-CXXConstructorDecl 0x56165c3e23b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56165c3e22f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56165c3e24b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56165c3e2698 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56165c3e25a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56165c3e2788 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56165c415440 <col:24, line:291:5>
|   `-ReturnStmt 0x56165c415430 <line:290:9, col:79>
|     `-BinaryOperator 0x56165c415410 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56165c4152e8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56165c415240 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56165c415220 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56165c415118 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56165c415100 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56165c4150e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56165c4150b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56165c4019d0
|       | |   |       `-CXXThisExpr 0x56165c4150a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56165c415208 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56165c4151f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56165c4151b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56165c415188 <col:28, col:35> '<bound member function type>' ->size 0x56165c3c26c8
|       | |           `-ImplicitCastExpr 0x56165c4151d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56165c415170 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56165c415140 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56165c4019d0
|       | |                 `-CXXThisExpr 0x56165c415130 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56165c4152d0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56165c4152b8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56165c4152a0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56165c415270 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56165c413b70
|       |         `-CXXThisExpr 0x56165c415260 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56165c4153f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56165c4153d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56165c4153c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56165c415380 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56165c415368 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56165c415318 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56165c413c20
|         |     |   `-CXXThisExpr 0x56165c415308 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56165c415348 <col:73> 'int' 0
|         `-IntegerLiteral 0x56165c4153a0 <col:79> 'int' 0
|-CXXMethodDecl 0x56165c3e2848 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56165c415618 <col:32, line:296:5>
|   `-ReturnStmt 0x56165c415608 <line:295:9, col:49>
|     `-BinaryOperator 0x56165c4155e8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56165c4154c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56165c4154b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56165c415498 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56165c415468 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56165c413b70
|       |       `-CXXThisExpr 0x56165c415458 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56165c4155c8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56165c4155b0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56165c415598 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56165c415558 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56165c415540 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56165c4154f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56165c413c20
|         |     |   `-CXXThisExpr 0x56165c4154e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56165c415520 <col:43> 'int' 0
|         `-IntegerLiteral 0x56165c415578 <col:49> 'int' 0
|-CXXMethodDecl 0x56165c3e2938 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56165c415828 <col:19, line:306:5>
|   |-IfStmt 0x56165c415748 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56165c415688 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56165c415670 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56165c415640 <col:13> 'Vector<String> *' lvalue ->_conf 0x56165c4019d0
|   | |     `-CXXThisExpr 0x56165c415630 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56165c415728 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56165c4156f8 <col:13, col:20> '<bound member function type>' ->clear 0x56165c3c50c8
|   |     `-ImplicitCastExpr 0x56165c4156e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56165c4156b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56165c4019d0
|   |         `-CXXThisExpr 0x56165c4156a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56165c4157d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56165c4157a0 <col:9, col:16> '<bound member function type>' .clear 0x56165c4136f8
|   |   `-MemberExpr 0x56165c415770 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56165c413b10
|   |     `-CXXThisExpr 0x56165c415760 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56165c415818 <line:305:9, col:17>
|     `-UnaryOperator 0x56165c415800 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c4157f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56165c3e2bb8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56165c3e2ac0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56165c3e2d38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56165c3e2c70 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56165c3e30b8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56165c3e2de0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56165c3e3018 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56165c3e2e88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56165c3e2f00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56165c4174d0 <col:67, line:327:5>
|     |-WhileStmt 0x56165c417480 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56165c415910 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56165c415890 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56165c333648 0x56165c17cc28 0x56165c17c900 0x56165c16d0d0 0x56165c16cd80 0x56165c16c670 0x56165c13efe0 0x56165c0cc4b0
|     | | |-DeclRefExpr 0x56165c415850 <col:16> 'Iter' lvalue ParmVar 0x56165c3e2e88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56165c415870 <col:25> 'Iter' lvalue ParmVar 0x56165c3e2f00 'end' 'Iter'
|     | `-CompoundStmt 0x56165c417460 <col:30, line:325:9>
|     |   |-CallExpr 0x56165c417400 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56165c4172e0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56165c4173d0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56165c417360 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|     |   |   `-DeclRefExpr 0x56165c417340 <col:24> 'Iter' lvalue ParmVar 0x56165c3e2e88 'begin' 'Iter'
|     |   `-UnaryOperator 0x56165c417448 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56165c417428 <col:15> 'Iter' lvalue ParmVar 0x56165c3e2e88 'begin' 'Iter'
|     `-ReturnStmt 0x56165c4174c0 <line:326:9, col:17>
|       `-UnaryOperator 0x56165c4174a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c417498 <col:17> 'Args *' this
|-CXXMethodDecl 0x56165c3e31c0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56165c3e3130 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56165c3e3308 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56165c3e3278 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56165c3e33d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56165c4175b0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56165c417550 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56165c417500 <col:9> '<bound member function type>' ->reset_from 0x56165c413f98
|   | | `-CXXThisExpr 0x56165c4174f0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56165c417530 <col:20> 'int' 0
|   `-ReturnStmt 0x56165c4175a0 <line:352:9, col:17>
|     `-UnaryOperator 0x56165c417588 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c417578 <col:17> 'Args *' this
|-VarDecl 0x56165c3e3488 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56165c3e34f0 <col:38> 'int' 1
|-VarDecl 0x56165c3e3580 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56165c3e35e8 <col:39> 'int' 2
|-VarDecl 0x56165c3e3678 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56165c3e36e0 <col:39> 'int' 4
|-VarDecl 0x56165c3e3770 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56165c3e37d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56165c3e3b58 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56165c3e3850 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3e3ab8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56165c3e3900 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e39a8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56165c417708 <col:43, line:371:5>
|     `-ReturnStmt 0x56165c4176f8 <line:370:9, col:34>
|       `-CallExpr 0x56165c4176c0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c4175e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c417660 <col:21> 'const char *' lvalue ParmVar 0x56165c3e3900 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c417680 <col:30> 'int' 0
|         `-DeclRefExpr 0x56165c4176a0 <col:33> 'T' lvalue ParmVar 0x56165c3e39a8 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3e3e88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56165c3e3bc0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3e3de8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56165c3e3c70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e3d18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56165c417858 <col:45, line:375:5>
|     `-ReturnStmt 0x56165c417848 <line:374:9, col:42>
|       `-CallExpr 0x56165c417810 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c417730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c4177b0 <col:21> 'const char *' lvalue ParmVar 0x56165c3e3c70 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c4177d0 <col:30> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int'
|         `-DeclRefExpr 0x56165c4177f0 <col:41> 'T' lvalue ParmVar 0x56165c3e3d18 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3e41b8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56165c3e3ef0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3e4118 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56165c3e3fa0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e4048 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56165c4179a8 <col:45, line:379:5>
|     `-ReturnStmt 0x56165c417998 <line:378:9, col:43>
|       `-CallExpr 0x56165c417960 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c417880 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c417900 <col:21> 'const char *' lvalue ParmVar 0x56165c3e3fa0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c417920 <col:30> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int'
|         `-DeclRefExpr 0x56165c417940 <col:42> 'T' lvalue ParmVar 0x56165c3e4048 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3e44e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56165c3e4220 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56165c3e4448 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56165c3e42d0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56165c3e4378 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x56165c417ba8 <col:46, line:383:5>
| |   `-ReturnStmt 0x56165c417b98 <line:382:9, col:55>
| |     `-CallExpr 0x56165c417b60 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56165c4179d0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56165c417a50 <col:21> 'const char *' lvalue ParmVar 0x56165c3e42d0 'keyword' 'const char *'
| |       |-BinaryOperator 0x56165c417b20 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56165c417ad0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56165c417ab0 <col:30> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56165c417b08 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56165c417ae8 <col:42> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x56165c417b40 <col:54> 'T' lvalue ParmVar 0x56165c3e4378 'x' 'T &'
| `-CXXMethodDecl 0x56165c4591f8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x56165c459018 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x56165c4590e8 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x56165c3e48e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56165c3e4550 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3e4848 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56165c3e4600 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e4680 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3e4728 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56165c417ce8 <col:54, line:388:5>
|     |-CallExpr 0x56165c417c70 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c417bc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56165c417c00 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56165c417c10 <col:30> 'const char *' lvalue ParmVar 0x56165c3e4600 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56165c417c30 <col:39> 'int' lvalue ParmVar 0x56165c3e4680 'flags' 'int'
|     | `-DeclRefExpr 0x56165c417c50 <col:46> 'T' lvalue ParmVar 0x56165c3e4728 'x' 'T &'
|     `-ReturnStmt 0x56165c417cd8 <line:387:9, col:17>
|       `-UnaryOperator 0x56165c417cc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c417cb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3e4d98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56165c3e4958 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56165c3e49d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56165c3e4cf8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56165c3e4a98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e4b38 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56165c3e4bd8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56165c417e58 <col:74, line:403:5>
|     `-ReturnStmt 0x56165c417e48 <line:402:9, col:56>
|       `-CallExpr 0x56165c417e08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c417d18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c417d88 <col:28> 'const char *' lvalue ParmVar 0x56165c3e4a98 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c417da8 <col:37> 'int' 0
|         |-DeclRefExpr 0x56165c417dc8 <col:40> 'T' lvalue ParmVar 0x56165c3e4b38 'x' 'T &'
|         `-DeclRefExpr 0x56165c417de8 <col:43> 'const V' lvalue ParmVar 0x56165c3e4bd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56165c3e5208 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56165c3e4e08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56165c3e4e88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56165c3e5168 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56165c3e4f48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e4fe8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56165c3e5088 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56165c417fc0 <col:76, line:407:5>
|     `-ReturnStmt 0x56165c417fb0 <line:406:9, col:65>
|       `-CallExpr 0x56165c417f70 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c417e80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c417ef0 <col:28> 'const char *' lvalue ParmVar 0x56165c3e4f48 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c417f10 <col:37> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int'
|         |-DeclRefExpr 0x56165c417f30 <col:49> 'T' lvalue ParmVar 0x56165c3e4fe8 'x' 'T &'
|         `-DeclRefExpr 0x56165c417f50 <col:52> 'const V' lvalue ParmVar 0x56165c3e5088 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56165c3e5758 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56165c3e5278 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56165c3e52f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56165c3e56b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56165c3e53b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e5438 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3e54d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56165c3e5578 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56165c418128 <col:85, line:412:5>
|     |-CallExpr 0x56165c4180a8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c417fd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56165c418018 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56165c418028 <col:37> 'const char *' lvalue ParmVar 0x56165c3e53b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56165c418048 <col:46> 'int' lvalue ParmVar 0x56165c3e5438 'flags' 'int'
|     | |-DeclRefExpr 0x56165c418068 <col:53> 'T' lvalue ParmVar 0x56165c3e54d8 'x' 'T &'
|     | `-DeclRefExpr 0x56165c418088 <col:56> 'const V' lvalue ParmVar 0x56165c3e5578 'default_value' 'const V &'
|     `-ReturnStmt 0x56165c418118 <line:411:9, col:17>
|       `-UnaryOperator 0x56165c418100 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c4180f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3e5be8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56165c3e57d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e5848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3e5b48 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3e5908 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e5980 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e5a28 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56165c4182a8 <col:53, line:425:5>
|     `-ReturnStmt 0x56165c418298 <line:424:9, col:42>
|       `-CallExpr 0x56165c418258 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c418158 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c4181d8 <col:21> 'const char *' lvalue ParmVar 0x56165c3e5908 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c4181f8 <col:30> 'int' 0
|         |-DeclRefExpr 0x56165c418218 <col:33> 'P' lvalue ParmVar 0x56165c3e5980 'parser' 'P'
|         `-DeclRefExpr 0x56165c418238 <col:41> 'T' lvalue ParmVar 0x56165c3e5a28 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3e6038 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56165c3e5c58 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e5cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3e5f98 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3e5d98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e5e10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e5eb8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56165c418420 <col:55, line:429:5>
|     `-ReturnStmt 0x56165c418410 <line:428:9, col:50>
|       `-CallExpr 0x56165c4183d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c4182d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c418350 <col:21> 'const char *' lvalue ParmVar 0x56165c3e5d98 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c418370 <col:30> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int'
|         |-DeclRefExpr 0x56165c418390 <col:41> 'P' lvalue ParmVar 0x56165c3e5e10 'parser' 'P'
|         `-DeclRefExpr 0x56165c4183b0 <col:49> 'T' lvalue ParmVar 0x56165c3e5eb8 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3e6488 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56165c3e60a8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e6128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3e63e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3e61e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e6260 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e6308 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56165c418598 <col:55, line:433:5>
|     `-ReturnStmt 0x56165c418588 <line:432:9, col:51>
|       `-CallExpr 0x56165c418548 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c418448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c4184c8 <col:21> 'const char *' lvalue ParmVar 0x56165c3e61e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c4184e8 <col:30> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int'
|         |-DeclRefExpr 0x56165c418508 <col:42> 'P' lvalue ParmVar 0x56165c3e6260 'parser' 'P'
|         `-DeclRefExpr 0x56165c418528 <col:50> 'T' lvalue ParmVar 0x56165c3e6308 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3e68d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56165c3e64f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e6578 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3e6838 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3e6638 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e66b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e6758 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56165c4187c0 <col:56, line:437:5>
|     `-ReturnStmt 0x56165c4187b0 <line:436:9, col:63>
|       `-CallExpr 0x56165c418770 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c4185c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c418640 <col:21> 'const char *' lvalue ParmVar 0x56165c3e6638 'keyword' 'const char *'
|         |-BinaryOperator 0x56165c418710 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56165c4186c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56165c4186a0 <col:30> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56165c4186f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56165c4186d8 <col:42> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56165c418730 <col:54> 'P' lvalue ParmVar 0x56165c3e66b0 'parser' 'P'
|         `-DeclRefExpr 0x56165c418750 <col:62> 'T' lvalue ParmVar 0x56165c3e6758 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3e6e08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56165c3e6948 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e69c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3e6d68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56165c3e6a88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e6b08 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3e6b80 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e6c28 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56165c418928 <col:64, line:442:5>
|     |-CallExpr 0x56165c4188a8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c4187d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56165c418818 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56165c418828 <col:30> 'const char *' lvalue ParmVar 0x56165c3e6a88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56165c418848 <col:39> 'int' lvalue ParmVar 0x56165c3e6b08 'flags' 'int'
|     | |-DeclRefExpr 0x56165c418868 <col:46> 'P' lvalue ParmVar 0x56165c3e6b80 'parser' 'P'
|     | `-DeclRefExpr 0x56165c418888 <col:54> 'T' lvalue ParmVar 0x56165c3e6c28 'x' 'T &'
|     `-ReturnStmt 0x56165c418918 <line:441:9, col:17>
|       `-UnaryOperator 0x56165c418900 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c4188f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3e7408 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56165c3e6e80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e6ef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56165c3e6f78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56165c3e7368 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56165c3e7040 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e70b8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e7158 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56165c3e7228 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56165c418ac0 <col:84, line:458:5>
|     `-ReturnStmt 0x56165c418ab0 <line:457:9, col:64>
|       `-CallExpr 0x56165c418a68 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c418958 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c4189c8 <col:28> 'const char *' lvalue ParmVar 0x56165c3e7040 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c4189e8 <col:37> 'int' 0
|         |-DeclRefExpr 0x56165c418a08 <col:40> 'P' lvalue ParmVar 0x56165c3e70b8 'parser' 'P'
|         |-DeclRefExpr 0x56165c418a28 <col:48> 'T' lvalue ParmVar 0x56165c3e7158 'x' 'T &'
|         `-DeclRefExpr 0x56165c418a48 <col:51> 'const V' lvalue ParmVar 0x56165c3e7228 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56165c3e7988 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56165c3e7480 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e74f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56165c3e7578 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56165c3e78e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56165c3e7640 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e76b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e7758 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56165c3e77f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56165c418c50 <col:86, line:462:5>
|     `-ReturnStmt 0x56165c418c40 <line:461:9, col:73>
|       `-CallExpr 0x56165c418bf8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c418ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c418b58 <col:28> 'const char *' lvalue ParmVar 0x56165c3e7640 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c418b78 <col:37> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int'
|         |-DeclRefExpr 0x56165c418b98 <col:49> 'P' lvalue ParmVar 0x56165c3e76b8 'parser' 'P'
|         |-DeclRefExpr 0x56165c418bb8 <col:57> 'T' lvalue ParmVar 0x56165c3e7758 'x' 'T &'
|         `-DeclRefExpr 0x56165c418bd8 <col:60> 'const V' lvalue ParmVar 0x56165c3e77f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56165c3e7fe8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56165c3e7a00 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e7a78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56165c3e7af8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56165c3e7f48 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56165c3e7bc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e7c40 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3e7cb8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e7d58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56165c3e7df8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56165c418de0 <col:95, line:467:5>
|     |-CallExpr 0x56165c418d58 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c418c68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56165c418ca8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56165c418cb8 <col:37> 'const char *' lvalue ParmVar 0x56165c3e7bc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56165c418cd8 <col:46> 'int' lvalue ParmVar 0x56165c3e7c40 'flags' 'int'
|     | |-DeclRefExpr 0x56165c418cf8 <col:53> 'P' lvalue ParmVar 0x56165c3e7cb8 'parser' 'P'
|     | |-DeclRefExpr 0x56165c418d18 <col:61> 'T' lvalue ParmVar 0x56165c3e7d58 'x' 'T &'
|     | `-DeclRefExpr 0x56165c418d38 <col:64> 'const V' lvalue ParmVar 0x56165c3e7df8 'default_value' 'const V &'
|     `-ReturnStmt 0x56165c418dd0 <line:466:9, col:17>
|       `-UnaryOperator 0x56165c418db8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c418da8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3e85c8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56165c3e8068 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e80e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56165c3e8168 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56165c3e8528 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56165c3e8230 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e82a8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e8348 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56165c3e83e8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56165c418f88 <col:63, line:481:5>
|     `-ReturnStmt 0x56165c418f78 <line:480:9, col:47>
|       `-CallExpr 0x56165c418f30 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c418e10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c418e90 <col:21> 'const char *' lvalue ParmVar 0x56165c3e8230 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c418eb0 <col:30> 'int' 0
|         |-DeclRefExpr 0x56165c418ed0 <col:33> 'P' lvalue ParmVar 0x56165c3e82a8 'parser' 'P'
|         |-DeclRefExpr 0x56165c418ef0 <col:41> 'T1' lvalue ParmVar 0x56165c3e8348 'x1' 'T1 &'
|         `-DeclRefExpr 0x56165c418f10 <col:45> 'T2' lvalue ParmVar 0x56165c3e83e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56165c3e8b48 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56165c3e8640 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e86b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56165c3e8738 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56165c3e8aa8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56165c3e8800 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e8878 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e8918 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56165c3e89b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56165c419128 <col:65, line:485:5>
|     `-ReturnStmt 0x56165c419118 <line:484:9, col:55>
|       `-CallExpr 0x56165c4190d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c418fb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c419030 <col:21> 'const char *' lvalue ParmVar 0x56165c3e8800 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c419050 <col:30> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int'
|         |-DeclRefExpr 0x56165c419070 <col:41> 'P' lvalue ParmVar 0x56165c3e8878 'parser' 'P'
|         |-DeclRefExpr 0x56165c419090 <col:49> 'T1' lvalue ParmVar 0x56165c3e8918 'x1' 'T1 &'
|         `-DeclRefExpr 0x56165c4190b0 <col:53> 'T2' lvalue ParmVar 0x56165c3e89b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56165c3e90c8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56165c3e8bc0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e8c38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56165c3e8cb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56165c3e9028 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56165c3e8d80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e8df8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e8e98 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56165c3e8f38 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56165c4192c8 <col:65, line:489:5>
|     `-ReturnStmt 0x56165c4192b8 <line:488:9, col:56>
|       `-CallExpr 0x56165c419270 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c419150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c4191d0 <col:21> 'const char *' lvalue ParmVar 0x56165c3e8d80 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c4191f0 <col:30> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int'
|         |-DeclRefExpr 0x56165c419210 <col:42> 'P' lvalue ParmVar 0x56165c3e8df8 'parser' 'P'
|         |-DeclRefExpr 0x56165c419230 <col:50> 'T1' lvalue ParmVar 0x56165c3e8e98 'x1' 'T1 &'
|         `-DeclRefExpr 0x56165c419250 <col:54> 'T2' lvalue ParmVar 0x56165c3e8f38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56165c3eeb78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56165c3e9140 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3e91b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56165c3e9238 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56165c3eead8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56165c3e9300 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3e9378 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3e9418 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56165c3ee9e0 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56165c419518 <col:66, line:493:5>
|     `-ReturnStmt 0x56165c419508 <line:492:9, col:68>
|       `-CallExpr 0x56165c4194c0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c4192f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c419370 <col:21> 'const char *' lvalue ParmVar 0x56165c3e9300 'keyword' 'const char *'
|         |-BinaryOperator 0x56165c419440 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56165c4193f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56165c4193d0 <col:30> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56165c419428 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56165c419408 <col:42> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56165c419460 <col:54> 'P' lvalue ParmVar 0x56165c3e9378 'parser' 'P'
|         |-DeclRefExpr 0x56165c419480 <col:62> 'T1' lvalue ParmVar 0x56165c3e9418 'x1' 'T1 &'
|         `-DeclRefExpr 0x56165c4194a0 <col:66> 'T2' lvalue ParmVar 0x56165c3ee9e0 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56165c3ef1d8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56165c3eebf0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3eec68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56165c3eece8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56165c3ef138 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56165c3eedb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3eee30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3eeea8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3eef48 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56165c3eefe8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56165c4196a8 <col:74, line:498:5>
|     |-CallExpr 0x56165c419620 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c419530 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56165c419570 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56165c419580 <col:30> 'const char *' lvalue ParmVar 0x56165c3eedb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56165c4195a0 <col:39> 'int' lvalue ParmVar 0x56165c3eee30 'flags' 'int'
|     | |-DeclRefExpr 0x56165c4195c0 <col:46> 'P' lvalue ParmVar 0x56165c3eeea8 'parser' 'P'
|     | |-DeclRefExpr 0x56165c4195e0 <col:54> 'T1' lvalue ParmVar 0x56165c3eef48 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56165c419600 <col:58> 'T2' lvalue ParmVar 0x56165c3eefe8 'x2' 'T2 &'
|     `-ReturnStmt 0x56165c419698 <line:497:9, col:17>
|       `-UnaryOperator 0x56165c419680 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c419670 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3ef538 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56165c3ef258 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3ef498 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56165c3ef310 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3ef388 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56165c4197f0 <col:52, line:509:5>
|     `-ReturnStmt 0x56165c4197e0 <line:508:9, col:44>
|       `-CallExpr 0x56165c4197a8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c4196d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c419748 <col:26> 'const char *' lvalue ParmVar 0x56165c3ef310 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c419768 <col:35> 'int' 0
|         `-DeclRefExpr 0x56165c419788 <col:38> 'P' lvalue ParmVar 0x56165c3ef388 'parser' 'P'
|-FunctionTemplateDecl 0x56165c3ef838 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56165c3ef5a0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3ef798 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56165c3ef650 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3ef6c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56165c419930 <col:54, line:513:5>
|     `-ReturnStmt 0x56165c419920 <line:512:9, col:52>
|       `-CallExpr 0x56165c4198e8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c419818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c419888 <col:26> 'const char *' lvalue ParmVar 0x56165c3ef650 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c4198a8 <col:35> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int'
|         `-DeclRefExpr 0x56165c4198c8 <col:46> 'P' lvalue ParmVar 0x56165c3ef6c8 'parser' 'P'
|-FunctionTemplateDecl 0x56165c3efb38 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56165c3ef8a0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3efa98 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56165c3ef950 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3ef9c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56165c419a70 <col:54, line:517:5>
|     `-ReturnStmt 0x56165c419a60 <line:516:9, col:53>
|       `-CallExpr 0x56165c419a28 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c419958 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c4199c8 <col:26> 'const char *' lvalue ParmVar 0x56165c3ef950 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c4199e8 <col:35> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int'
|         `-DeclRefExpr 0x56165c419a08 <col:47> 'P' lvalue ParmVar 0x56165c3ef9c8 'parser' 'P'
|-FunctionTemplateDecl 0x56165c3efe38 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56165c3efba0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3efd98 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56165c3efc50 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3efcc8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56165c419c60 <col:55, line:521:5>
|     `-ReturnStmt 0x56165c419c50 <line:520:9, col:65>
|       `-CallExpr 0x56165c419c18 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c419a98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c419b08 <col:26> 'const char *' lvalue ParmVar 0x56165c3efc50 'keyword' 'const char *'
|         |-BinaryOperator 0x56165c419bd8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56165c419b88 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56165c419b68 <col:35> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56165c419bc0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56165c419ba0 <col:47> 'const int' lvalue Var 0x56165c3e3580 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56165c419bf8 <col:59> 'P' lvalue ParmVar 0x56165c3efcc8 'parser' 'P'
|-FunctionTemplateDecl 0x56165c3f0208 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56165c3efea0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3f0168 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56165c3eff50 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3effd0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f0048 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56165c419da0 <col:63, line:526:5>
|     |-CallExpr 0x56165c419d28 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c419c78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56165c419cb8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56165c419cc8 <col:35> 'const char *' lvalue ParmVar 0x56165c3eff50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56165c419ce8 <col:44> 'int' lvalue ParmVar 0x56165c3effd0 'flags' 'int'
|     | `-DeclRefExpr 0x56165c419d08 <col:51> 'P' lvalue ParmVar 0x56165c3f0048 'parser' 'P'
|     `-ReturnStmt 0x56165c419d90 <line:525:9, col:17>
|       `-UnaryOperator 0x56165c419d78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c419d68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3f0658 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56165c3f0278 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f02f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f05b8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3f03b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f0430 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f04d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56165c419ef8 <col:58, line:541:5>
|     `-ReturnStmt 0x56165c419ee8 <line:540:9, col:39>
|       `-CallExpr 0x56165c419eb0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c419dd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c419e50 <col:21> 'const char *' lvalue ParmVar 0x56165c3f03b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c419e70 <col:30> 'P' lvalue ParmVar 0x56165c3f0430 'parser' 'P'
|         `-DeclRefExpr 0x56165c419e90 <col:38> 'T' lvalue ParmVar 0x56165c3f04d8 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3f0aa8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56165c3f06c8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f0748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f0a08 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3f0808 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f0880 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f0928 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56165c41a030 <col:60, line:545:5>
|     `-ReturnStmt 0x56165c41a020 <line:544:9, col:41>
|       `-CallExpr 0x56165c419fe8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c419f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c419f88 <col:23> 'const char *' lvalue ParmVar 0x56165c3f0808 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c419fa8 <col:32> 'P' lvalue ParmVar 0x56165c3f0880 'parser' 'P'
|         `-DeclRefExpr 0x56165c419fc8 <col:40> 'T' lvalue ParmVar 0x56165c3f0928 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3f0ef8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56165c3f0b18 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f0b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f0e58 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3f0c58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f0cd0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f0d78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56165c41a168 <col:60, line:549:5>
|     `-ReturnStmt 0x56165c41a158 <line:548:9, col:41>
|       `-CallExpr 0x56165c41a120 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41a058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41a0c0 <col:23> 'const char *' lvalue ParmVar 0x56165c3f0c58 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c41a0e0 <col:32> 'P' lvalue ParmVar 0x56165c3f0cd0 'parser' 'P'
|         `-DeclRefExpr 0x56165c41a100 <col:40> 'T' lvalue ParmVar 0x56165c3f0d78 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3f1348 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56165c3f0f68 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f0fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f12a8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3f10a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f1120 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f11c8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56165c41a2a0 <col:61, line:553:5>
|     `-ReturnStmt 0x56165c41a290 <line:552:9, col:42>
|       `-CallExpr 0x56165c41a258 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41a190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41a1f8 <col:24> 'const char *' lvalue ParmVar 0x56165c3f10a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c41a218 <col:33> 'P' lvalue ParmVar 0x56165c3f1120 'parser' 'P'
|         `-DeclRefExpr 0x56165c41a238 <col:41> 'T' lvalue ParmVar 0x56165c3f11c8 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3f1828 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56165c3f13b8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f1438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f1788 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56165c3f14f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f1578 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f15f0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f1698 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56165c41a418 <col:69, line:557:5>
|     `-ReturnStmt 0x56165c41a408 <line:556:9, col:46>
|       `-CallExpr 0x56165c41a3c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41a2c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41a348 <col:21> 'const char *' lvalue ParmVar 0x56165c3f14f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c41a368 <col:30> 'int' lvalue ParmVar 0x56165c3f1578 'flags' 'int'
|         |-DeclRefExpr 0x56165c41a388 <col:37> 'P' lvalue ParmVar 0x56165c3f15f0 'parser' 'P'
|         `-DeclRefExpr 0x56165c41a3a8 <col:45> 'T' lvalue ParmVar 0x56165c3f1698 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3f1b38 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56165c3f18a0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3f1a98 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56165c3f1950 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f19c8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56165c41a558 <col:56, line:571:5>
|     `-ReturnStmt 0x56165c41a548 <line:570:9, col:48>
|       `-CallExpr 0x56165c41a510 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41a440 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41a4b0 <col:30> 'const char *' lvalue ParmVar 0x56165c3f1950 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c41a4d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x56165c41a4f0 <col:42> 'P' lvalue ParmVar 0x56165c3f19c8 'parser' 'P'
|-FunctionTemplateDecl 0x56165c3f1ec8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56165c3f1ba0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3f1e28 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56165c3f1c50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f1cd0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f1d48 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56165c41a728 <col:67, line:576:5>
|     |-CallExpr 0x56165c41a6b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c41a570 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56165c41a5b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56165c41a5c0 <col:39> 'const char *' lvalue ParmVar 0x56165c3f1c50 'keyword' 'const char *'
|     | |-BinaryOperator 0x56165c41a670 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56165c41a620 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56165c41a5e0 <col:48> 'int' lvalue ParmVar 0x56165c3f1cd0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56165c41a658 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56165c41a638 <col:56> 'const int' lvalue Var 0x56165c3e3770 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56165c41a690 <col:68> 'P' lvalue ParmVar 0x56165c3f1d48 'parser' 'P'
|     `-ReturnStmt 0x56165c41a718 <line:575:9, col:17>
|       `-UnaryOperator 0x56165c41a700 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c41a6f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3f2318 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56165c3f1f38 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f1fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f2278 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56165c3f2078 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f20f0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f2198 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56165c41a898 <col:62, line:592:5>
|     `-ReturnStmt 0x56165c41a888 <line:591:9, col:51>
|       `-CallExpr 0x56165c41a848 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41a758 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41a7c8 <col:30> 'const char *' lvalue ParmVar 0x56165c3f2078 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c41a7e8 <col:39> 'int' 0
|         |-DeclRefExpr 0x56165c41a808 <col:42> 'P' lvalue ParmVar 0x56165c3f20f0 'parser' 'P'
|         `-DeclRefExpr 0x56165c41a828 <col:50> 'T' lvalue ParmVar 0x56165c3f2198 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3f27f8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56165c3f2388 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f2408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f2758 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56165c3f24c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f2548 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f25c0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f2668 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56165c41aa90 <col:73, line:597:5>
|     |-CallExpr 0x56165c41aa10 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c41a8b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56165c41a8f0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56165c41a900 <col:39> 'const char *' lvalue ParmVar 0x56165c3f24c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x56165c41a9b0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56165c41a960 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56165c41a920 <col:48> 'int' lvalue ParmVar 0x56165c3f2548 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56165c41a998 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56165c41a978 <col:56> 'const int' lvalue Var 0x56165c3e3770 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56165c41a9d0 <col:68> 'P' lvalue ParmVar 0x56165c3f25c0 'parser' 'P'
|     | `-DeclRefExpr 0x56165c41a9f0 <col:76> 'T' lvalue ParmVar 0x56165c3f2668 'x' 'T &'
|     `-ReturnStmt 0x56165c41aa80 <line:596:9, col:17>
|       `-UnaryOperator 0x56165c41aa68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c41aa58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3f2da8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56165c3f2870 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f28e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f2d08 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56165c3f29a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f2a20 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f2be0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56165c41ac00 <col:65, line:614:5>
|     `-ReturnStmt 0x56165c41abf0 <line:613:9, col:46>
|       `-CallExpr 0x56165c41abb0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41aac0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41ab30 <col:25> 'const char *' lvalue ParmVar 0x56165c3f29a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c41ab50 <col:34> 'int' 0
|         |-DeclRefExpr 0x56165c41ab70 <col:37> 'P' lvalue ParmVar 0x56165c3f2a20 'parser' 'P'
|         `-DeclRefExpr 0x56165c41ab90 <col:45> 'Vector<T>' lvalue ParmVar 0x56165c3f2be0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56165c3f31d8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56165c3f2e18 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3f3138 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56165c3f2ed0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f3020 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56165c41ae20 <col:55, line:618:5>
|     `-ReturnStmt 0x56165c41ae10 <line:617:9, col:55>
|       `-CallExpr 0x56165c41add0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41ac28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41ac98 <col:25> 'const char *' lvalue ParmVar 0x56165c3f2ed0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56165c41acb8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56165c41ad90 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56165c41adb0 <col:54> 'Vector<T>' lvalue ParmVar 0x56165c3f3020 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56165c3f37a8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56165c3f3240 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f32b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f3708 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56165c3f3378 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f33f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f3470 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f35c0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56165c41b018 <col:76, line:623:5>
|     |-CallExpr 0x56165c41af98 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56165c41ae38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56165c41ae78 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56165c41ae88 <col:34> 'const char *' lvalue ParmVar 0x56165c3f3378 'keyword' 'const char *'
|     | |-BinaryOperator 0x56165c41af38 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56165c41aee8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56165c41aea8 <col:43> 'int' lvalue ParmVar 0x56165c3f33f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56165c41af20 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56165c41af00 <col:51> 'const int' lvalue Var 0x56165c3e3770 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56165c41af58 <col:63> 'P' lvalue ParmVar 0x56165c3f3470 'parser' 'P'
|     | `-DeclRefExpr 0x56165c41af78 <col:71> 'Vector<T>' lvalue ParmVar 0x56165c3f35c0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56165c41b008 <line:622:9, col:17>
|       `-UnaryOperator 0x56165c41aff0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c41afe0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3f3ce8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56165c3f3820 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f3898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f3c48 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56165c3f3958 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f39d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f3b20 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56165c41b280 <col:66, line:627:5>
|     `-ReturnStmt 0x56165c41b270 <line:626:9, col:59>
|       `-CallExpr 0x56165c41b230 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56165c41b048 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56165c41b0b8 <col:25> 'const char *' lvalue ParmVar 0x56165c3f3958 'keyword' 'const char *'
|         |-DeclRefExpr 0x56165c41b0d8 <col:34> 'int' lvalue ParmVar 0x56165c3f39d8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56165c41b1f0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56165c41b210 <col:58> 'Vector<T>' lvalue ParmVar 0x56165c3f3b20 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56165c3f3d78 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56165c41b300 <col:25, line:633:5>
|   `-ReturnStmt 0x56165c41b2f0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56165c41b2d8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56165c41b2a8 <col:16> 'const bool' lvalue ->_status 0x56165c401838
|         `-CXXThisExpr 0x56165c41b298 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56165c3f3ef8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56165c3f3e30 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56165c41b3e8 <col:27, line:639:5>
|   |-BinaryOperator 0x56165c41b390 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56165c41b318 <col:9> 'bool' lvalue ParmVar 0x56165c3f3e30 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56165c41b378 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56165c41b348 <col:13> 'bool' lvalue ->_status 0x56165c401838
|   |     `-CXXThisExpr 0x56165c41b338 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56165c41b3d8 <line:638:9, col:17>
|     `-UnaryOperator 0x56165c41b3c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c41b3b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56165c3f4078 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56165c3f3fb8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56165c41b4d8 <col:39, line:644:5>
|   |-BinaryOperator 0x56165c41b480 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56165c41b408 <col:9> 'bool' lvalue ParmVar 0x56165c3f3fb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56165c41b468 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56165c41b438 <col:13> 'const bool' lvalue ->_status 0x56165c401838
|   |     `-CXXThisExpr 0x56165c41b428 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56165c41b4c8 <line:643:9, col:17>
|     `-UnaryOperator 0x56165c41b4b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c41b4a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56165c3f4140 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56165c41b580 <col:30, line:651:5>
|   `-ReturnStmt 0x56165c41b570 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56165c41b558 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56165c41b528 <col:16> 'bool' lvalue ->_read_status 0x56165c2f76e0
|         `-ImplicitCastExpr 0x56165c41b508 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56165c41b4f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56165c3f4288 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56165c3f41f8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56165c41b688 <col:32, line:658:5>
|   |-BinaryOperator 0x56165c41b630 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56165c41b598 <col:9> 'bool' lvalue ParmVar 0x56165c3f41f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56165c41b618 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56165c41b5e8 <col:13> 'bool' lvalue ->_read_status 0x56165c2f76e0
|   |     `-ImplicitCastExpr 0x56165c41b5c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56165c41b5b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56165c41b678 <line:657:9, col:17>
|     `-UnaryOperator 0x56165c41b660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c41b650 <col:17> 'Args *' this
|-CXXMethodDecl 0x56165c3f43d8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56165c3f4348 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56165c41b798 <col:44, line:663:5>
|   |-BinaryOperator 0x56165c41b740 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56165c41b6a8 <col:9> 'bool' lvalue ParmVar 0x56165c3f4348 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56165c41b728 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56165c41b6f8 <col:13> 'bool' lvalue ->_read_status 0x56165c2f76e0
|   |     `-ImplicitCastExpr 0x56165c41b6d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56165c41b6c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56165c41b788 <line:662:9, col:17>
|     `-UnaryOperator 0x56165c41b770 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c41b760 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56165c3f44a0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56165c3f4568 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56165c3f4630 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56165c3f46f8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56165c3f4a08 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56165c3f4798 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3f4968 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56165c3f4878 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56165c41bb50 <col:19, line:706:5>
|     `-IfStmt 0x56165c41bb28 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56165c41b898 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56165c41ba58 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56165c41ba28 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56165c41b9e8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56165c41b8f0 <col:42> '<bound member function type>' ->simple_slot 0x56165c414c50
|       |     | `-CXXThisExpr 0x56165c41b8e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56165c41b988 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56165c41b940 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56165c1816c8
|       |     | `-DeclRefExpr 0x56165c41b920 <col:55> 'T' lvalue ParmVar 0x56165c3f4878 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56165c41b9c8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56165c41bb18 <line:705:13, col:34>
|         `-CallExpr 0x56165c41baf0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56165c41ba78 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56165c41bad0 <col:33> 'T' lvalue ParmVar 0x56165c3f4878 'x' 'T &'
|-FunctionTemplateDecl 0x56165c3f4cd8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56165c3f4a68 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3f4c38 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56165c3f4b48 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56165c41bf30 <col:31, line:717:5>
|     |-DeclStmt 0x56165c41bc90 <line:713:9, col:23>
|     | `-VarDecl 0x56165c41bb78 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56165c41bc68 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56165c41bbf0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56165c41bc48 <col:21> 'T' lvalue ParmVar 0x56165c3f4b48 'x' 'T &'
|     |-IfStmt 0x56165c41bee0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56165c41bd88 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56165c41bec0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56165c41be60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56165c41bdf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|     |   | `-DeclRefExpr 0x56165c41bdd0 <col:14> 'T *' lvalue Var 0x56165c41bb78 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56165c41bea0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56165c41bf18 <line:716:9, col:16>
|       `-DeclRefExpr 0x56165c41bef8 <col:16> 'T *' lvalue Var 0x56165c41bb78 's' 'T *'
|-FunctionTemplateDecl 0x56165c3f50e8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56165c3f4d38 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56165c3f4db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56165c3f5048 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56165c3f4e98 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56165c3f4f38 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56165c41c240 <col:37, line:726:5>
|     |-IfStmt 0x56165c41c1d0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56165c41c1f0 <line:723:13, col:26>
|     | | `-VarDecl 0x56165c41bf98 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56165c41c088 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56165c41c010 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56165c41c068 <col:25> 'T' lvalue ParmVar 0x56165c3f4e98 'x' 'T &'
|     | |-DeclRefExpr 0x56165c41c0b0 <col:16> 'T *' lvalue Var 0x56165c41bf98 's' 'T *'
|     | `-BinaryOperator 0x56165c41c1b0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56165c41c160 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56165c41c0f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|     |   | `-DeclRefExpr 0x56165c41c0d0 <col:14> 'T *' lvalue Var 0x56165c41bf98 's' 'T *'
|     |   `-DeclRefExpr 0x56165c41c190 <col:18> 'const V' lvalue ParmVar 0x56165c3f4f38 'value' 'const V &'
|     `-ReturnStmt 0x56165c41c230 <line:725:9, col:17>
|       `-UnaryOperator 0x56165c41c218 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56165c41c208 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56165c3f54e8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56165c3f5150 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56165c3f5448 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56165c3f5200 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f5280 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f5328 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56165c41d060 <col:65, line:737:5>
|     |-DeclStmt 0x56165c41c2d8 <line:732:9, col:26>
|     | `-VarDecl 0x56165c41c270 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56165c41d028 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56165c41d048 <line:733:13, col:58>
|       | `-VarDecl 0x56165c41c300 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56165c41c4e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56165c41c4b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56165c41c498 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56165c41c478 <col:26, col:58> 'String' (CXXTemporary 0x56165c41c478)
|       |           `-CXXMemberCallExpr 0x56165c41c408 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56165c41c378 <col:26> '<bound member function type>' ->find 0x56165c414268
|       |             | `-CXXThisExpr 0x56165c41c368 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56165c41c440 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c41c3a8 <col:31> 'const char *' lvalue ParmVar 0x56165c3f5200 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56165c41c458 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c41c3c8 <col:40> 'int' lvalue ParmVar 0x56165c3f5280 'flags' 'int'
|       |             `-DeclRefExpr 0x56165c41c3e8 <col:47> 'Args::Slot *' lvalue Var 0x56165c41c270 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56165c41c598 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56165c41c580 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56165c41c560 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56165c41c530 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|       |       `-ImplicitCastExpr 0x56165c41c518 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56165c41c4f8 <col:20> 'String' lvalue Var 0x56165c41c300 'str' 'String'
|       `-CompoundStmt 0x56165c41d008 <col:61, line:736:9>
|         |-DeclStmt 0x56165c41ca50 <line:734:13, col:76>
|         | `-VarDecl 0x56165c41c5e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56165c41ca20 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56165c41c990 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56165c41c9d8 <col:60> 'T' lvalue ParmVar 0x56165c3f5328 'variable' 'T &'
|         |     `-UnaryOperator 0x56165c41ca08 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56165c41c9f8 <col:71> 'Args *' this
|         `-CallExpr 0x56165c41cfd8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56165c41ca78 <col:13> '<bound member function type>' ->postparse 0x56165c414478
|           | `-CXXThisExpr 0x56165c41ca68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56165c41cf98 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56165c41caa8 <col:23> 'T *' lvalue Var 0x56165c41c5e8 's' 'T *'
|           | `-CallExpr 0x56165c41cf58 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56165c41cd30 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56165c41ce30 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56165c41ce50 <col:86> 'String' lvalue Var 0x56165c41c300 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56165c41cf00 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56165c41ce90 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|           |   | `-DeclRefExpr 0x56165c41ce70 <col:92> 'T *' lvalue Var 0x56165c41c5e8 's' 'T *'
|           |   `-UnaryOperator 0x56165c41cf40 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56165c41cf30 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56165c41cfb8 <col:103> 'Args::Slot *' lvalue Var 0x56165c41c270 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56165c3f5a38 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56165c3f5558 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56165c3f55d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56165c3f5998 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56165c3f5698 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f5718 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f57b8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56165c3f5858 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56165c41df00 <col:88, line:745:5>
|     |-DeclStmt 0x56165c41d0f8 <line:741:9, col:26>
|     | `-VarDecl 0x56165c41d090 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56165c41d318 <line:742:9, col:55>
|     | `-VarDecl 0x56165c41d120 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56165c41d300 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56165c41d2d0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56165c41d2b8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56165c41d298 <col:22, col:54> 'String' (CXXTemporary 0x56165c41d298)
|     |           `-CXXMemberCallExpr 0x56165c41d228 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56165c41d198 <col:22> '<bound member function type>' ->find 0x56165c414268
|     |             | `-CXXThisExpr 0x56165c41d188 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56165c41d260 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56165c41d1c8 <col:27> 'const char *' lvalue ParmVar 0x56165c3f5698 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56165c41d278 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56165c41d1e8 <col:36> 'int' lvalue ParmVar 0x56165c3f5718 'flags' 'int'
|     |             `-DeclRefExpr 0x56165c41d208 <col:43> 'Args::Slot *' lvalue Var 0x56165c41d090 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56165c41d6f0 <line:743:9, col:72>
|     | `-VarDecl 0x56165c41d368 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56165c41d6c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56165c41d630 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56165c41d678 <col:56> 'T' lvalue ParmVar 0x56165c3f57b8 'variable' 'T &'
|     |     `-UnaryOperator 0x56165c41d6a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56165c41d698 <col:67> 'Args *' this
|     `-CallExpr 0x56165c41ded0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56165c41d718 <col:9> '<bound member function type>' ->postparse 0x56165c414478
|       | `-CXXThisExpr 0x56165c41d708 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56165c41de90 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56165c41d748 <col:19> 'T *' lvalue Var 0x56165c41d368 's' 'T *'
|       | `-ParenExpr 0x56165c41de70 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56165c41de40 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56165c41de28 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56165c41de10 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56165c41ddf0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56165c41ddc0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|       |     |       `-ImplicitCastExpr 0x56165c41dda8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56165c41d768 <col:25> 'String' lvalue Var 0x56165c41d120 'str' 'String'
|       |     |-CallExpr 0x56165c41dc18 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56165c41d9f0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56165c41daf0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56165c41db10 <col:89> 'String' lvalue Var 0x56165c41d120 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56165c41dbc0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56165c41db50 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|       |     | | `-DeclRefExpr 0x56165c41db30 <col:95> 'T *' lvalue Var 0x56165c41d368 's' 'T *'
|       |     | `-UnaryOperator 0x56165c41dc00 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56165c41dbf0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56165c41dd88 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56165c41dd68 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56165c41dd38 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56165c41dce8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56165c41dc78 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|       |         | | `-DeclRefExpr 0x56165c41dc58 <col:109> 'T *' lvalue Var 0x56165c41d368 's' 'T *'
|       |         | `-DeclRefExpr 0x56165c41dd18 <col:113> 'const V' lvalue ParmVar 0x56165c3f5858 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56165c41dd58 <col:120> 'bool' true
|       `-DeclRefExpr 0x56165c41deb0 <col:128> 'Args::Slot *' lvalue Var 0x56165c41d090 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56165c3f5f68 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56165c3f5ab0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f5b28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3f5ec8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56165c3f5be8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f5c68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f5ce0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f5d88 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56165c41eaf8 <col:75, line:754:5>
|     |-DeclStmt 0x56165c41dfa8 <line:749:9, col:26>
|     | `-VarDecl 0x56165c41df40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56165c41eac0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56165c41eae0 <line:750:13, col:58>
|       | `-VarDecl 0x56165c41dfd0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56165c41e1b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56165c41e180 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56165c41e168 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56165c41e148 <col:26, col:58> 'String' (CXXTemporary 0x56165c41e148)
|       |           `-CXXMemberCallExpr 0x56165c41e0d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56165c41e048 <col:26> '<bound member function type>' ->find 0x56165c414268
|       |             | `-CXXThisExpr 0x56165c41e038 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56165c41e110 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c41e078 <col:31> 'const char *' lvalue ParmVar 0x56165c3f5be8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56165c41e128 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c41e098 <col:40> 'int' lvalue ParmVar 0x56165c3f5c68 'flags' 'int'
|       |             `-DeclRefExpr 0x56165c41e0b8 <col:47> 'Args::Slot *' lvalue Var 0x56165c41df40 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56165c41e268 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56165c41e250 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56165c41e230 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56165c41e200 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|       |       `-ImplicitCastExpr 0x56165c41e1e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56165c41e1c8 <col:20> 'String' lvalue Var 0x56165c41dfd0 'str' 'String'
|       `-CompoundStmt 0x56165c41eaa0 <col:61, line:753:9>
|         |-DeclStmt 0x56165c41e640 <line:751:13, col:63>
|         | `-VarDecl 0x56165c41e2b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56165c41e610 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56165c41e580 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56165c41e5c8 <col:47> 'T' lvalue ParmVar 0x56165c3f5d88 'variable' 'T &'
|         |     `-UnaryOperator 0x56165c41e5f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56165c41e5e8 <col:58> 'Args *' this
|         `-CallExpr 0x56165c41ea70 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56165c41e668 <col:13> '<bound member function type>' ->postparse 0x56165c414478
|           | `-CXXThisExpr 0x56165c41e658 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56165c41ea30 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56165c41e698 <col:23> 'T *' lvalue Var 0x56165c41e2b8 's' 'T *'
|           | `-CallExpr 0x56165c41e9f0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56165c41e880 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56165c41e8c8 <col:56> 'P' lvalue ParmVar 0x56165c3f5ce0 'parser' 'P'
|           |   |-DeclRefExpr 0x56165c41e8e8 <col:64> 'String' lvalue Var 0x56165c41dfd0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56165c41e998 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56165c41e928 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|           |   | `-DeclRefExpr 0x56165c41e908 <col:70> 'T *' lvalue Var 0x56165c41e2b8 's' 'T *'
|           |   `-UnaryOperator 0x56165c41e9d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56165c41e9c8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56165c41ea50 <col:81> 'Args::Slot *' lvalue Var 0x56165c41df40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56165c3f65c8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56165c3f5fe0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56165c3f6058 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56165c3f60d8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56165c3f6528 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56165c3f61a0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f6220 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f6298 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3f6338 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56165c3f63d8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56165c421be8 <col:98, line:762:5>
|     |-DeclStmt 0x56165c41eb90 <line:758:9, col:26>
|     | `-VarDecl 0x56165c41eb28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56165c41edb0 <line:759:9, col:55>
|     | `-VarDecl 0x56165c41ebb8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56165c41ed98 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56165c41ed68 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56165c41ed50 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56165c41ed30 <col:22, col:54> 'String' (CXXTemporary 0x56165c41ed30)
|     |           `-CXXMemberCallExpr 0x56165c41ecc0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56165c41ec30 <col:22> '<bound member function type>' ->find 0x56165c414268
|     |             | `-CXXThisExpr 0x56165c41ec20 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56165c41ecf8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56165c41ec60 <col:27> 'const char *' lvalue ParmVar 0x56165c3f61a0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56165c41ed10 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56165c41ec80 <col:36> 'int' lvalue ParmVar 0x56165c3f6220 'flags' 'int'
|     |             `-DeclRefExpr 0x56165c41eca0 <col:43> 'Args::Slot *' lvalue Var 0x56165c41eb28 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56165c41f1d0 <line:760:9, col:59>
|     | `-VarDecl 0x56165c41ee08 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56165c41f1a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56165c41f110 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56165c41f158 <col:43> 'T' lvalue ParmVar 0x56165c3f6338 'variable' 'T &'
|     |     `-UnaryOperator 0x56165c41f188 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56165c41f178 <col:54> 'Args *' this
|     `-CallExpr 0x56165c421bb8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56165c41f1f8 <col:9> '<bound member function type>' ->postparse 0x56165c414478
|       | `-CXXThisExpr 0x56165c41f1e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56165c421b78 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56165c41f228 <col:19> 'T *' lvalue Var 0x56165c41ee08 's' 'T *'
|       | `-ParenExpr 0x56165c421b58 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56165c421b28 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56165c421b10 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56165c421af8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56165c421ad8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56165c421aa8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|       |     |       `-ImplicitCastExpr 0x56165c421a90 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56165c41f248 <col:25> 'String' lvalue Var 0x56165c41ebb8 'str' 'String'
|       |     |-CallExpr 0x56165c421900 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56165c421790 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56165c4217d8 <col:59> 'P' lvalue ParmVar 0x56165c3f6298 'parser' 'P'
|       |     | |-DeclRefExpr 0x56165c4217f8 <col:67> 'String' lvalue Var 0x56165c41ebb8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56165c4218a8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56165c421838 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|       |     | | `-DeclRefExpr 0x56165c421818 <col:73> 'T *' lvalue Var 0x56165c41ee08 's' 'T *'
|       |     | `-UnaryOperator 0x56165c4218e8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56165c4218d8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56165c421a70 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56165c421a50 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56165c421a20 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56165c4219d0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56165c421960 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|       |         | | `-DeclRefExpr 0x56165c421940 <col:87> 'T *' lvalue Var 0x56165c41ee08 's' 'T *'
|       |         | `-DeclRefExpr 0x56165c421a00 <col:91> 'const V' lvalue ParmVar 0x56165c3f63d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56165c421a40 <col:98> 'bool' true
|       `-DeclRefExpr 0x56165c421b98 <col:106> 'Args::Slot *' lvalue Var 0x56165c41eb28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56165c3fe8b8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56165c3f6648 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3f66c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56165c3f6748 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56165c3fe818 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56165c3f6810 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3f6890 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3f6908 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3fe620 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56165c3fe6c8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56165c422bc8 <col:60, line:773:5>
|     |-DeclStmt 0x56165c421c90 <line:767:9, col:26>
|     | `-VarDecl 0x56165c421c28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56165c422b90 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56165c422bb0 <line:768:13, col:58>
|       | `-VarDecl 0x56165c421cb8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56165c421e98 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56165c421e68 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56165c421e50 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56165c421e30 <col:26, col:58> 'String' (CXXTemporary 0x56165c421e30)
|       |           `-CXXMemberCallExpr 0x56165c421dc0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56165c421d30 <col:26> '<bound member function type>' ->find 0x56165c414268
|       |             | `-CXXThisExpr 0x56165c421d20 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56165c421df8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c421d60 <col:31> 'const char *' lvalue ParmVar 0x56165c3f6810 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56165c421e10 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c421d80 <col:40> 'int' lvalue ParmVar 0x56165c3f6890 'flags' 'int'
|       |             `-DeclRefExpr 0x56165c421da0 <col:47> 'Args::Slot *' lvalue Var 0x56165c421c28 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56165c421f50 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56165c421f38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56165c421f18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56165c421ee8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|       |       `-ImplicitCastExpr 0x56165c421ed0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56165c421eb0 <col:20> 'String' lvalue Var 0x56165c421cb8 'str' 'String'
|       `-CompoundStmt 0x56165c422b68 <col:61, line:772:9>
|         |-DeclStmt 0x56165c422290 <line:769:13, col:66>
|         | `-VarDecl 0x56165c421fa8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56165c422260 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56165c4221d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56165c422218 <col:49> 'T1' lvalue ParmVar 0x56165c3fe620 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56165c422248 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56165c422238 <col:61> 'Args *' this
|         |-DeclStmt 0x56165c422600 <line:770:13, col:66>
|         | `-VarDecl 0x56165c422318 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56165c4225d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56165c422540 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56165c422588 <col:49> 'T2' lvalue ParmVar 0x56165c3fe6c8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56165c4225b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56165c4225a8 <col:61> 'Args *' this
|         `-CallExpr 0x56165c422b38 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56165c422628 <col:13> '<bound member function type>' ->postparse 0x56165c414478
|           | `-CXXThisExpr 0x56165c422618 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56165c422af8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56165c422698 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56165c422658 <col:23> 'T1 *' lvalue Var 0x56165c421fa8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56165c422678 <col:29> 'T2 *' lvalue Var 0x56165c422318 's2' 'T2 *'
|           | `-CallExpr 0x56165c422ab0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56165c422880 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56165c4228c8 <col:63> 'P' lvalue ParmVar 0x56165c3f6908 'parser' 'P'
|           |   |-DeclRefExpr 0x56165c4228e8 <col:71> 'String' lvalue Var 0x56165c421cb8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56165c422998 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56165c422928 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|           |   | `-DeclRefExpr 0x56165c422908 <col:77> 'T1 *' lvalue Var 0x56165c421fa8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56165c422a58 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56165c4229e8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|           |   | `-DeclRefExpr 0x56165c4229c8 <col:82> 'T2 *' lvalue Var 0x56165c422318 's2' 'T2 *'
|           |   `-UnaryOperator 0x56165c422a98 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56165c422a88 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56165c422b18 <col:94> 'Args::Slot *' lvalue Var 0x56165c421c28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56165c3feca8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56165c3fe938 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3fec08 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56165c3fe9f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3fea70 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3feae8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56165c4230e0 <col:67, line:780:5>
|     |-DeclStmt 0x56165c422c60 <line:777:9, col:26>
|     | `-VarDecl 0x56165c422bf8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56165c4230a8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56165c4230c8 <line:778:13, col:58>
|       | `-VarDecl 0x56165c422c88 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56165c422e68 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56165c422e38 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56165c422e20 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56165c422e00 <col:26, col:58> 'String' (CXXTemporary 0x56165c422e00)
|       |           `-CXXMemberCallExpr 0x56165c422d90 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56165c422d00 <col:26> '<bound member function type>' ->find 0x56165c414268
|       |             | `-CXXThisExpr 0x56165c422cf0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56165c422dc8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c422d30 <col:31> 'const char *' lvalue ParmVar 0x56165c3fe9f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56165c422de0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56165c422d50 <col:40> 'int' lvalue ParmVar 0x56165c3fea70 'flags' 'int'
|       |             `-DeclRefExpr 0x56165c422d70 <col:47> 'Args::Slot *' lvalue Var 0x56165c422bf8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56165c422f20 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56165c422f08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56165c422ee8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56165c422eb8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|       |       `-ImplicitCastExpr 0x56165c422ea0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56165c422e80 <col:20> 'String' lvalue Var 0x56165c422c88 'str' 'String'
|       `-CallExpr 0x56165c423078 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56165c422f48 <col:13> '<bound member function type>' ->postparse 0x56165c414478
|         | `-CXXThisExpr 0x56165c422f38 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56165c423028 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56165c422f98 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56165c422f78 <col:23> 'P' lvalue ParmVar 0x56165c3feae8 'parser' 'P'
|         | |-DeclRefExpr 0x56165c422fe0 <col:36> 'String' lvalue Var 0x56165c422c88 'str' 'String'
|         | `-UnaryOperator 0x56165c423010 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56165c423000 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56165c423058 <col:49> 'Args::Slot *' lvalue Var 0x56165c422bf8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56165c3ff048 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56165c3fed18 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56165c3fefa8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56165c3fedd0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3fee50 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3feec8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56165c423a50 <col:71, line:792:5>
|     |-DeclStmt 0x56165c423178 <line:784:9, col:26>
|     | `-VarDecl 0x56165c423110 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56165c423248 <line:785:9, col:29>
|     | `-VarDecl 0x56165c4231a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56165c423230 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56165c423210 <col:28> 'int' 1
|     |-WhileStmt 0x56165c423900 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56165c423920 <line:786:16, col:61>
|     | | `-VarDecl 0x56165c423270 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56165c423450 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56165c423420 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56165c423408 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56165c4233e8 <col:29, col:61> 'String' (CXXTemporary 0x56165c4233e8)
|     | |           `-CXXMemberCallExpr 0x56165c423378 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56165c4232e8 <col:29> '<bound member function type>' ->find 0x56165c414268
|     | |             | `-CXXThisExpr 0x56165c4232d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56165c4233b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56165c423318 <col:34> 'const char *' lvalue ParmVar 0x56165c3fedd0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56165c4233c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56165c423338 <col:43> 'int' lvalue ParmVar 0x56165c3fee50 'flags' 'int'
|     | |             `-DeclRefExpr 0x56165c423358 <col:50> 'Args::Slot *' lvalue Var 0x56165c423110 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56165c423508 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56165c4234f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56165c4234d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56165c4234a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|     | |       `-ImplicitCastExpr 0x56165c423488 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56165c423468 <col:23> 'String' lvalue Var 0x56165c423270 'str' 'String'
|     | `-CompoundStmt 0x56165c4238d8 <col:64, line:790:9>
|     |   |-CallExpr 0x56165c423660 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56165c423530 <col:13> '<bound member function type>' ->postparse 0x56165c414478
|     |   | | `-CXXThisExpr 0x56165c423520 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56165c423610 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56165c423580 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56165c423560 <col:23> 'P' lvalue ParmVar 0x56165c3feec8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56165c4235c8 <col:36> 'String' lvalue Var 0x56165c423270 'str' 'String'
|     |   | | `-UnaryOperator 0x56165c4235f8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56165c4235e8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56165c423640 <col:49> 'Args::Slot *' lvalue Var 0x56165c423110 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56165c4237f8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56165c423690 <col:13> 'int' lvalue Var 0x56165c4231a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56165c4237e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56165c4237c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56165c423728 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56165c423708 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56165c4236f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56165c4236b0 <col:28> 'int' lvalue Var 0x56165c4231a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56165c4236d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56165c4237a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56165c423778 <col:49> 'bool' lvalue ->_read_status 0x56165c2f76e0
|     |   |         `-ImplicitCastExpr 0x56165c423758 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56165c423748 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56165c4238a8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56165c423818 <col:13> 'int' lvalue ParmVar 0x56165c3fee50 'flags' 'int'
|     |     `-UnaryOperator 0x56165c423890 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56165c423878 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56165c423858 <col:23> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56165c423a30 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56165c423968 <col:9> 'bool' lvalue ->_read_status 0x56165c2f76e0
|       | `-ImplicitCastExpr 0x56165c423948 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56165c423938 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56165c423a10 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56165c4239f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56165c4239d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56165c423998 <col:25> 'int' lvalue Var 0x56165c4231a8 'read_status' 'int'
|           `-IntegerLiteral 0x56165c4239b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56165c3ff528 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56165c3ff0b8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3ff138 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3ff488 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56165c3ff1f8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3ff278 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3ff2f0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3ff398 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56165c4249e0 <col:84, line:805:5>
|     |-DeclStmt 0x56165c423af8 <line:796:9, col:26>
|     | `-VarDecl 0x56165c423a90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56165c423bc8 <line:797:9, col:29>
|     | `-VarDecl 0x56165c423b28 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56165c423bb0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56165c423b90 <col:28> 'int' 1
|     |-DeclStmt 0x56165c423f00 <line:798:9, col:71>
|     | `-VarDecl 0x56165c423c18 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56165c423ed0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56165c423e40 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56165c423e88 <col:55> 'T' lvalue ParmVar 0x56165c3ff398 'variable' 'T &'
|     |     `-UnaryOperator 0x56165c423eb8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56165c423ea8 <col:66> 'Args *' this
|     |-WhileStmt 0x56165c424890 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56165c4248b0 <line:799:16, col:61>
|     | | `-VarDecl 0x56165c423f28 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56165c424108 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56165c4240d8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56165c4240c0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56165c4240a0 <col:29, col:61> 'String' (CXXTemporary 0x56165c4240a0)
|     | |           `-CXXMemberCallExpr 0x56165c424030 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56165c423fa0 <col:29> '<bound member function type>' ->find 0x56165c414268
|     | |             | `-CXXThisExpr 0x56165c423f90 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56165c424068 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56165c423fd0 <col:34> 'const char *' lvalue ParmVar 0x56165c3ff1f8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56165c424080 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56165c423ff0 <col:43> 'int' lvalue ParmVar 0x56165c3ff278 'flags' 'int'
|     | |             `-DeclRefExpr 0x56165c424010 <col:50> 'Args::Slot *' lvalue Var 0x56165c423a90 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56165c4241c0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56165c4241a8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56165c424188 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56165c424158 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|     | |       `-ImplicitCastExpr 0x56165c424140 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56165c424120 <col:23> 'String' lvalue Var 0x56165c423f28 'str' 'String'
|     | `-CompoundStmt 0x56165c424868 <col:64, line:803:9>
|     |   |-CallExpr 0x56165c4245f0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56165c4241e8 <col:13> '<bound member function type>' ->postparse 0x56165c414478
|     |   | | `-CXXThisExpr 0x56165c4241d8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56165c4245b0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56165c424218 <col:23> 'T *' lvalue Var 0x56165c423c18 's' 'T *'
|     |   | | `-CallExpr 0x56165c424570 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56165c424400 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56165c424448 <col:56> 'P' lvalue ParmVar 0x56165c3ff2f0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56165c424468 <col:64> 'String' lvalue Var 0x56165c423f28 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56165c424518 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56165c4244a8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|     |   | |   | `-DeclRefExpr 0x56165c424488 <col:70> 'T *' lvalue Var 0x56165c423c18 's' 'T *'
|     |   | |   `-UnaryOperator 0x56165c424558 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56165c424548 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56165c4245d0 <col:81> 'Args::Slot *' lvalue Var 0x56165c423a90 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56165c424788 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56165c424620 <col:13> 'int' lvalue Var 0x56165c423b28 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56165c424770 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56165c424750 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56165c4246b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56165c424698 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56165c424680 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56165c424640 <col:28> 'int' lvalue Var 0x56165c423b28 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56165c424660 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56165c424738 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56165c424708 <col:49> 'bool' lvalue ->_read_status 0x56165c2f76e0
|     |   |         `-ImplicitCastExpr 0x56165c4246e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56165c4246d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56165c424838 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56165c4247a8 <col:13> 'int' lvalue ParmVar 0x56165c3ff278 'flags' 'int'
|     |     `-UnaryOperator 0x56165c424820 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56165c424808 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56165c4247e8 <col:23> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56165c4249c0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56165c4248f8 <col:9> 'bool' lvalue ->_read_status 0x56165c2f76e0
|       | `-ImplicitCastExpr 0x56165c4248d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56165c4248c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56165c4249a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56165c424980 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56165c424968 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56165c424928 <col:25> 'int' lvalue Var 0x56165c423b28 'read_status' 'int'
|           `-IntegerLiteral 0x56165c424948 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56165c3ffb08 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56165c3ff5a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56165c3ff618 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56165c3ffa68 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56165c3ff6d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56165c3ff758 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56165c3ff7d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56165c3ff920 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56165c4257e8 <col:87, line:821:5>
|     |-DeclStmt 0x56165c424a90 <line:809:9, col:26>
|     | `-VarDecl 0x56165c424a28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56165c424b60 <line:810:9, col:29>
|     | `-VarDecl 0x56165c424ac0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56165c424b48 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56165c424b28 <col:28> 'int' 1
|     |-DeclStmt 0x56165c424da8 <line:811:9, col:38>
|     | `-VarDecl 0x56165c424c90 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56165c424d80 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56165c424d08 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56165c424d60 <col:29> 'Vector<T>' lvalue ParmVar 0x56165c3ff920 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56165c425698 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56165c4256b8 <line:812:16, col:61>
|     | | `-VarDecl 0x56165c424dd0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56165c424fb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56165c424f80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56165c424f68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56165c424f48 <col:29, col:61> 'String' (CXXTemporary 0x56165c424f48)
|     | |           `-CXXMemberCallExpr 0x56165c424ed8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56165c424e48 <col:29> '<bound member function type>' ->find 0x56165c414268
|     | |             | `-CXXThisExpr 0x56165c424e38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56165c424f10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56165c424e78 <col:34> 'const char *' lvalue ParmVar 0x56165c3ff6d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56165c424f28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56165c424e98 <col:43> 'int' lvalue ParmVar 0x56165c3ff758 'flags' 'int'
|     | |             `-DeclRefExpr 0x56165c424eb8 <col:50> 'Args::Slot *' lvalue Var 0x56165c424a28 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56165c425068 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56165c425050 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56165c425030 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56165c425000 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56165c143688
|     | |       `-ImplicitCastExpr 0x56165c424fe8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56165c424fc8 <col:23> 'String' lvalue Var 0x56165c424dd0 'str' 'String'
|     | `-CompoundStmt 0x56165c425660 <col:64, line:819:9>
|     |   |-DeclStmt 0x56165c425128 <line:813:13, col:23>
|     |   | `-VarDecl 0x56165c425090 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56165c425108 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56165c4252a8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56165c425150 <col:13> '<bound member function type>' ->postparse 0x56165c414478
|     |   | | `-CXXThisExpr 0x56165c425140 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56165c425250 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56165c4251a0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56165c425180 <col:23> 'P' lvalue ParmVar 0x56165c3ff7d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56165c4251e8 <col:36> 'String' lvalue Var 0x56165c424dd0 'str' 'String'
|     |   | | |-DeclRefExpr 0x56165c425208 <col:41> 'T' lvalue Var 0x56165c425090 'sx' 'T'
|     |   | | `-UnaryOperator 0x56165c425238 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56165c425228 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56165c425288 <col:53> 'Args::Slot *' lvalue Var 0x56165c424a28 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56165c425400 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56165c425338 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56165c425308 <col:17> 'bool' lvalue ->_read_status 0x56165c2f76e0
|     |   | |   `-ImplicitCastExpr 0x56165c4252e8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56165c4252d8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56165c4253d8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56165c425370 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56165c425350 <col:17> 'Vector<T> *' lvalue Var 0x56165c424c90 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56165c4253b8 <col:30> 'T' lvalue Var 0x56165c425090 'sx' 'T'
|     |   |-BinaryOperator 0x56165c425580 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56165c425418 <col:13> 'int' lvalue Var 0x56165c424ac0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56165c425568 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56165c425548 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56165c4254b0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56165c425490 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56165c425478 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56165c425438 <col:28> 'int' lvalue Var 0x56165c424ac0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56165c425458 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56165c425530 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56165c425500 <col:49> 'bool' lvalue ->_read_status 0x56165c2f76e0
|     |   |         `-ImplicitCastExpr 0x56165c4254e0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56165c4254d0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56165c425630 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56165c4255a0 <col:13> 'int' lvalue ParmVar 0x56165c3ff758 'flags' 'int'
|     |     `-UnaryOperator 0x56165c425618 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56165c425600 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56165c4255e0 <col:23> 'const int' lvalue Var 0x56165c3e3488 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56165c4257c8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56165c425700 <col:9> 'bool' lvalue ->_read_status 0x56165c2f76e0
|       | `-ImplicitCastExpr 0x56165c4256e0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56165c4256d0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56165c4257a8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56165c425788 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56165c425770 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56165c425730 <col:25> 'int' lvalue Var 0x56165c424ac0 'read_status' 'int'
|           `-IntegerLiteral 0x56165c425750 <col:40> 'int' 1
|-AccessSpecDecl 0x56165c3ffb80 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56165c3ffba8 prev 0x56165c3e1788 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56165c3ffca0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56165c3ffd90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56165c425820 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56165c3ffe80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56165c425830 <col:25, line:830:9>
| |-CXXMethodDecl 0x56165c3fff80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56165c400030 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56165c4000d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56165c4000d8
| | `-ParmVarDecl 0x56165c4001e8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56165c4009a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56165c4009a8
|   `-ParmVarDecl 0x56165c400ab8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56165c400258 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56165c4003b8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56165c4005b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56165c400460 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56165c4004d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56165c425a10 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56165c400868 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56165c425880 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56165c425840 <col:20> 'void *' lvalue ParmVar 0x56165c400460 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56165c4008d0 '_slot' 'char *'
| | | `-CXXNewExpr 0x56165c425908 <col:32, col:45> 'char *' array Function 0x56165bf67308 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56165c4258f0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56165c4258c0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56165c4004d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56165c400930 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56165c4259d0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56165c425990 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56165c4004d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56165c425a90 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56165c4006b0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56165c3ffe80 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56165c425b18 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56165c425af8 <line:840:13, col:22> 'void' array Function 0x56165bf67668 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56165c425ae0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56165c425ab0 <col:22> 'char *' lvalue ->_slot 0x56165c4008d0
| |         `-CXXThisExpr 0x56165c425aa0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56165c4007b0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56165c3fff80 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56165c425d08 <col:22, line:844:9>
| |   `-CallExpr 0x56165c425c70 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56165c425c58 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56165c425c38 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56165c0730e8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56165c425ca8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56165c425b88 <col:20> 'void *' lvalue ->_ptr 0x56165c400868
| |     |   `-CXXThisExpr 0x56165c425b78 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56165c425cd8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56165c425cc0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56165c425bc8 <col:26> 'char *' lvalue ->_slot 0x56165c4008d0
| |     |     `-CXXThisExpr 0x56165c425bb8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56165c425cf0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56165c425c08 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56165c400930
| |         `-CXXThisExpr 0x56165c425bf8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56165c400868 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56165c4008d0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56165c400930 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56165c400b28 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56165c400b28
| | `-ParmVarDecl 0x56165c400c38 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56165c400cd8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56165c400cd8
|   `-ParmVarDecl 0x56165c400de8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56165c400f88 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56165c400e58 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56165c400ef8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56165c401220 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56165c401418 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56165c4012e8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56165c401598 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56165c425d40 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56165c425d20 <col:20> 'T *' lvalue ParmVar 0x56165c4012e8 'ptr' 'T *'
|   | `-CompoundStmt 0x56165c425d90 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56165c4014e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56165c3fff80 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56165c425f40 <col:22, line:857:9>
|   |   `-CallExpr 0x56165c425f10 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56165c425da0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56165c12b818 0x56165c0d5b48
|   |     |-CXXOperatorCallExpr 0x56165c425ea0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56165c425e30 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56165c3387c8 0x56165c3383e8 0x56165c338018 0x56165c337c38 0x56165c337858 0x56165c337488
|   |     | `-MemberExpr 0x56165c425e00 <col:29> 'T *' lvalue ->_ptr 0x56165c401598
|   |     |   `-CXXThisExpr 0x56165c425df0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56165c425ee0 <col:35> 'T' lvalue ->_slot 0x56165c4015f8
|   |       `-CXXThisExpr 0x56165c425ed0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56165c401598 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56165c4015f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56165c401660 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56165c401760 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56165c4017b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c401740 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56165c401720 <col:31> 'int' 48
|-FieldDecl 0x56165c4017d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56165c401838 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56165c401898 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56165c4019d0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56165c413b10 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56165c413b70 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56165c413c20 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56165c413e48 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56165c413d50 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56165c413f98 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56165c413f08 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56165c414268 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56165c414058 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56165c4140d8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56165c414180 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56165c414478 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56165c414330 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56165c4143a8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56165c414548 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56165c414698 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56165c414600 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56165c414a28 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56165c414758 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56165c4147d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56165c414880 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56165c414938 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56165c414c50 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56165c414b00 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56165c414b78 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56165c414f68 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56165c414d00 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56165c414ec8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56165c414dd8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c134540 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c134658 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56165c1346e8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56165c1347b8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56165c1348a0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c134ab8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56165c134960 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c134c68 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56165c134b70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56165c134db0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56165c134d20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56165c134ef8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56165c134e68 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c135040 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56165c134fb0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c135108 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56165c135250 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56165c1351c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x56165c135318 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56165c135460 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56165c1353d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x56165c1355d8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56165c135518 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c135720 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56165c135690 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c1357e8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56165c1359a8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56165c135898 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56165c135910 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c135bf8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56165c135a68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56165c135ae0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56165c135ca8 <col:86> "" ""
|-CXXMethodDecl 0x56165c135f18 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56165c135d88 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56165c135e00 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c1360c8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56165c135fd8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56165c136278 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56165c136180 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56165c136548 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56165c136330 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56165c1363a8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56165c136420 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c136828 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56165c136610 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56165c136688 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56165c136700 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56165c1368e0 <col:115> "" ""
|-AccessSpecDecl 0x56165c136950 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56165c136988 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c136e90 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56165c136e90
| `-ParmVarDecl 0x56165c136f98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56165c137038 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56165c137038
| `-ParmVarDecl 0x56165c137148 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56165c16c778 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56165c35f580 <col:7>
|-CXXConstructorDecl 0x56165c16c850 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56165c16c850
| `-ParmVarDecl 0x56165c16c968 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56165c16c9d8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56165c16c9d8
| `-ParmVarDecl 0x56165c16cae8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56165c361f80 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c34e128 prev 0x56165c343330 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c34e220 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56165c34e310 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56165c34e438 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56165c34e5b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56165c34e738 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56165c34e8b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56165c35f6e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56165c35ff58 <col:11>
|-CXXDestructorDecl 0x56165c35f7c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56165c35f8f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56165c35f8f8
| `-ParmVarDecl 0x56165c35fa08 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56165c35faa8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56165c35faa8
| `-ParmVarDecl 0x56165c35fbb8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56165c362978 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56165c362a88 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56165c362d08 <col:11>
|   `-ReturnStmt 0x56165c362cf8 <col:11>
|     `-UnaryOperator 0x56165c362ce0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56165c362cd0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56165c362af8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56165c362af8
  `-ParmVarDecl 0x56165c362c08 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c34e920 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c34ea38 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56165c34ead8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56165c34eb40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56165c34eba8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56165c34ec10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56165c34ec70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56165c34ed30 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56165c34ed90 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56165c34edf0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56165c35f5f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56165c34ead8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56165c35ff68 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56165c35ffc0 <col:12>
|-CXXConstructorDecl 0x56165c35fc28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56165c35fc28
| `-ParmVarDecl 0x56165c35fd38 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56165c35fdd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56165c35fdd8
| `-ParmVarDecl 0x56165c35fee8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56165c362060 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c33ca40 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56165c33cb58 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56165c33cbe8 <col:16, col:22> col:16 public
|-EnumDecl 0x56165c33cc10 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56165c33cd10 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56165c33cdf0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c33ccf0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56165c33ccd0 <col:21> 'int' 28
| `-EnumConstantDecl 0x56165c33cda0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56165c33ce08 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c33cd80 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56165c33cd60 <col:22> 'int' 64
|-CXXMethodDecl 0x56165c33d148 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56165c33ce30 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56165c33ceb0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56165c33cf28 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56165c33cfa0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56165c33d208 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56165c33d408 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56165c33d280 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56165c33d2f8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56165c33d4b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56165c33d618 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56165c33d528 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56165c33d6c0 <col:72> warn_unused_result ""
|-TypedefDecl 0x56165c33da20 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56165c33d9b0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56165c33d950 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56165c33d910 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56165be144e0 'void'
|       |-PointerType 0x56165c0bcde0 'unsigned char *'
|       | `-BuiltinType 0x56165be145e0 'unsigned char'
|       |-TypedefType 0x56165beb93b0 'size_t' sugar
|       | |-Typedef 0x56165be84be0 'size_t'
|       | `-BuiltinType 0x56165be14640 'unsigned long'
|       `-PointerType 0x56165be14ce0 'void *'
|         `-BuiltinType 0x56165be144e0 'void'
|-CXXMethodDecl 0x56165c33de98 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56165c33da90 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56165c33db08 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56165c33dba0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56165c33dc20 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56165c358590 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56165c358578 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56165c358540 <col:58> 'int' 0
| |-ParmVarDecl 0x56165c33dca0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56165c3585b8 <col:76> 'int' 0
| |-ParmVarDecl 0x56165c33dd20 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56165c3585d8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56165c33df68 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56165c33dfe8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56165c33e0a8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56165c33e148 <col:20>
| `-OptimizeNoneAttr 0x56165c33e1a0 <col:30>
|-CXXMethodDecl 0x56165c33e218 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56165c33e2b8 <col:20>
| `-OptimizeNoneAttr 0x56165c33e310 <col:30>
|-CXXMethodDecl 0x56165c33e388 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56165c33e428 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56165c33e4d8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56165c33e578 <col:20>
| |-OptimizeNoneAttr 0x56165c33e5d0 <col:30>
| `-WarnUnusedResultAttr 0x56165c33e5f8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56165c33e650 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56165c33e6f0 <col:20>
| `-OptimizeNoneAttr 0x56165c33e748 <col:30>
|-CXXMethodDecl 0x56165c33e798 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56165c33e838 <col:20>
| `-OptimizeNoneAttr 0x56165c33e890 <col:30>
|-CXXMethodDecl 0x56165c33e8d8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56165c33e978 <col:20>
| `-OptimizeNoneAttr 0x56165c33e9d0 <col:30>
|-CXXMethodDecl 0x56165c33ea18 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c33ead8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c33eba0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56165c33ec68 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56165c33ed28 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c33ee48 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56165c3586a0 <col:54, line:99:5>
|   `-ReturnStmt 0x56165c358690 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56165c358678 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56165c358648 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56165c34f128
|         `-CXXThisExpr 0x56165c358638 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56165c33efe8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56165c33eef8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56165c358750 <col:67, line:103:5>
|   `-BinaryOperator 0x56165c358730 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56165c3586c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56165c34f128
|     | `-CXXThisExpr 0x56165c3586b8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56165c358718 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56165c3586f8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56165c33eef8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56165c33f0e0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56165c3587d0 <col:33, line:107:5>
|   `-ReturnStmt 0x56165c3587c0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56165c3587a8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56165c358778 <col:16> 'void *' lvalue ->_destructor_argument 0x56165c34f190
|         `-CXXThisExpr 0x56165c358768 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56165c33f1a0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56165c358e00 <col:25, line:113:5>
|   |-ParenExpr 0x56165c358b48 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56165c358b18 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56165c358888 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56165c358860 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56165c358828 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56165c3587f8 <col:24> '<bound member function type>' ->shared 0x56165c33e218
|   |   |       `-ImplicitCastExpr 0x56165c358848 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56165c3587e8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56165c3588e8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c3588c8 <col:42> 'int' 0
|   |   `-CallExpr 0x56165c358a78 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56165c358a60 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c358a40 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c358ab8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c358958 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56165c358ad0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c358980 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c358ae8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c3589b8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56165c358b00 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c358a28 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c358a10 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c3589d8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56165c358d48 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56165c358b78 <col:2> 'unsigned char *' lvalue ->_head 0x56165c34ef30
|   | | `-CXXThisExpr 0x56165c358b68 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56165c358d30 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56165c358d10 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56165c358bb8 <col:10> 'unsigned char *' lvalue ->_data 0x56165c34ef98
|   |     | `-CXXThisExpr 0x56165c358ba8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56165c358cf8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56165c358cd8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56165c358bf8 <col:18> 'unsigned char *' lvalue ->_tail 0x56165c34f000
|   |         | `-CXXThisExpr 0x56165c358be8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56165c358cc0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56165c358ca0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56165c358c38 <col:26> 'unsigned char *' lvalue ->_end 0x56165c34f068
|   |             | `-CXXThisExpr 0x56165c358c28 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56165c358c88 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56165c358c68 <col:33> 'int' 0
|   `-BinaryOperator 0x56165c358de0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56165c358d78 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56165c34f128
|     | `-CXXThisExpr 0x56165c358d68 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56165c358dc8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56165c358da8 <col:16> 'int' 0
|-CXXMethodDecl 0x56165c33f2e0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56165c33f250 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56165c33f388 <col:20>
| |-OptimizeNoneAttr 0x56165c33f3e0 <col:30>
| `-WarnUnusedResultAttr 0x56165c33f408 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56165c33f4d8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56165c33f448 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56165c33f580 <col:20>
| |-OptimizeNoneAttr 0x56165c33f5d8 <col:30>
| `-WarnUnusedResultAttr 0x56165c33f600 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56165c33f738 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56165c33f640 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56165c33f7e0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56165c33f8e0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56165c33f850 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56165c33f988 <col:20>
| `-OptimizeNoneAttr 0x56165c33f9e0 <col:30>
|-CXXMethodDecl 0x56165c33faa8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56165c33fa18 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56165c33fb50 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56165c33fc50 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56165c33fbc0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56165c33fcf8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56165c33fdf8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56165c33fd68 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56165c33fea0 <col:20>
| `-OptimizeNoneAttr 0x56165c33fef8 <col:30>
|-CXXMethodDecl 0x56165c340088 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56165c33ff38 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56165c33ffb0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56165c3585f8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56165c340138 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56165c340338 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56165c3401b0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56165c340228 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c340548 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56165c3403f8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56165c340470 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c340758 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56165c340608 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56165c340688 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56165c358608 <col:39> 'int' 0
|-CXXMethodDecl 0x56165c340828 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56165c3408f0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56165c3409b8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56165c340a78 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c340b40 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56165c340c88 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56165c340bf8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56165c340e58 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56165c340d48 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56165c340dc0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c340f28 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56165c340fe8 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x56165c341088 <col:20>
| `-OptimizeNoneAttr 0x56165c3410e0 <col:30>
|-CXXMethodDecl 0x56165c341130 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56165c3411d0 <col:20>
| `-OptimizeNoneAttr 0x56165c341228 <col:30>
|-CXXMethodDecl 0x56165c341278 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56165c341338 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c341400 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56165c3414a0 <col:20>
| `-OptimizeNoneAttr 0x56165c3414f8 <col:30>
|-CXXMethodDecl 0x56165c341648 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56165c341538 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56165c3415b0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c341798 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56165c341708 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c341870 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56165c341930 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56165c3419d0 <col:20>
| `-OptimizeNoneAttr 0x56165c341a28 <col:30>
|-CXXMethodDecl 0x56165c341a78 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56165c341b18 <col:20>
| `-OptimizeNoneAttr 0x56165c341b70 <col:30>
|-CXXMethodDecl 0x56165c341bc0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56165c341c88 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56165c341d28 <col:20>
| `-OptimizeNoneAttr 0x56165c341d80 <col:30>
|-CXXMethodDecl 0x56165c341dc8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56165c341ee8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56165c342058 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56165c341f98 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56165c342148 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56165c3421e8 <col:20>
| `-OptimizeNoneAttr 0x56165c342240 <col:30>
|-CXXMethodDecl 0x56165c342290 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56165c342350 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56165c342588 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56165c342400 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56165c342478 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56165c342638 <col:20>
| `-OptimizeNoneAttr 0x56165c342690 <col:30>
|-CXXMethodDecl 0x56165c342738 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56165c3427d8 <col:20>
| `-OptimizeNoneAttr 0x56165c342830 <col:30>
|-CXXMethodDecl 0x56165c342880 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56165c342920 <col:20>
| `-OptimizeNoneAttr 0x56165c342978 <col:30>
|-CXXMethodDecl 0x56165c3429c0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56165c342a60 <col:20>
| `-OptimizeNoneAttr 0x56165c342ab8 <col:30>
|-CXXMethodDecl 0x56165c342bb8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56165c342af0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56165c342c60 <col:20>
| `-OptimizeNoneAttr 0x56165c342cb8 <col:30>
|-CXXMethodDecl 0x56165c342e78 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56165c342cf0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56165c342d68 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56165c342f28 <col:20>
| `-OptimizeNoneAttr 0x56165c342f80 <col:30>
|-CXXMethodDecl 0x56165c343028 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56165c343148 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56165c343268 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56165c343308 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56165c343330 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56165c343458 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56165c3434f8 <col:20>
| `-OptimizeNoneAttr 0x56165c343550 <col:30>
|-CXXMethodDecl 0x56165c3435f8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56165c343698 <col:20>
| `-OptimizeNoneAttr 0x56165c3436f0 <col:30>
|-AccessSpecDecl 0x56165c343718 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56165c343740 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56165c343840 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56165c343890 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c343820 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56165c343800 <col:14> 'int' 48
|-CXXMethodDecl 0x56165c3438f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56165c343998 <col:20>
| `-OptimizeNoneAttr 0x56165c3439f0 <col:30>
|-CXXMethodDecl 0x56165c343a68 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56165c343b08 <col:20>
| `-OptimizeNoneAttr 0x56165c343b60 <col:30>
|-CXXMethodDecl 0x56165c343c28 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56165c343b98 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56165c343dc8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56165c343f68 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56165c343e78 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56165c344010 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56165c344110 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56165c3444c0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c3440f0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56165c3440d0 <col:9> 'int' 0
| |-EnumConstantDecl 0x56165c3441a0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56165c3444d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c344180 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56165c344160 <col:14> 'int' 1
| |-EnumConstantDecl 0x56165c344230 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56165c3444f0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c344210 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56165c3441f0 <col:14> 'int' 2
| |-EnumConstantDecl 0x56165c3442c0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56165c344508 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c3442a0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56165c344280 <col:14> 'int' 3
| |-EnumConstantDecl 0x56165c344350 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56165c344520 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c344330 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56165c344310 <col:13> 'int' 4
| |-EnumConstantDecl 0x56165c3443e0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56165c344538 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c3443c0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56165c3443a0 <col:13> 'int' 5
| `-EnumConstantDecl 0x56165c344470 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56165c344550 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c344450 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56165c344430 <col:14> 'int' 6
|-CXXMethodDecl 0x56165c3445b8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56165c344658 <col:20>
| `-OptimizeNoneAttr 0x56165c3446b0 <col:30>
|-CXXMethodDecl 0x56165c3447a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56165c3446e8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56165c344850 <col:20>
| `-OptimizeNoneAttr 0x56165c3448a8 <col:30>
|-CXXMethodDecl 0x56165c344918 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56165c344a40 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56165c344bb8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56165c344af0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56165c344c80 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56165c344d48 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56165c344e88 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56165c344df8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56165c344f30 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56165c345030 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56165c345230 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c345010 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56165c344ff0 <col:23> 'int' 0
| |-EnumConstantDecl 0x56165c3450c0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56165c345248 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c3450a0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56165c345080 <col:45> 'int' 4
| |-EnumConstantDecl 0x56165c345150 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56165c345260 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c345130 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56165c345110 <col:24> 'int' 0
| `-EnumConstantDecl 0x56165c3451e0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56165c345278 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c3451c0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56165c3451a0 <col:47> 'int' 16
|-CXXMethodDecl 0x56165c3452d8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56165c345448 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56165c345388 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56165c3454f0 <col:20>
| `-OptimizeNoneAttr 0x56165c345548 <col:30>
|-CXXMethodDecl 0x56165c345598 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56165c358f20 <col:18, col:36>
|   `-ReturnStmt 0x56165c358f10 <col:20, col:33>
|     `-ImplicitCastExpr 0x56165c358ef8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56165c358ed8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56165c358ea8 <col:27> '<bound member function type>' ->xanno 0x56165c3435f8
|           `-CXXThisExpr 0x56165c358e98 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56165c345690 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56165c359030 <col:30, col:48>
|   `-ReturnStmt 0x56165c359020 <col:32, col:45>
|     `-ImplicitCastExpr 0x56165c359008 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56165c358fe8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56165c358fb8 <col:39> '<bound member function type>' ->xanno 0x56165c343458
|           `-CXXThisExpr 0x56165c358fa8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56165c345778 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56165c3591c8 <col:24, col:50>
|   `-ReturnStmt 0x56165c3591b8 <col:26, col:47>
|     `-UnaryOperator 0x56165c3591a0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56165c359180 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56165c359168 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56165c359118 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56165c34e438
|         |   `-CXXMemberCallExpr 0x56165c3590f8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56165c3590c8 <col:34> '<bound member function type>' ->xanno 0x56165c3435f8
|         |       `-CXXThisExpr 0x56165c3590b8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56165c359148 <col:46> 'int' 0
|-CXXMethodDecl 0x56165c345880 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56165c359398 <col:36, col:62>
|   `-ReturnStmt 0x56165c359388 <col:38, col:59>
|     `-UnaryOperator 0x56165c359370 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56165c359350 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56165c359338 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56165c3592b0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56165c34e438
|         |   `-CXXMemberCallExpr 0x56165c359290 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56165c359260 <col:46> '<bound member function type>' ->xanno 0x56165c343458
|         |       `-CXXThisExpr 0x56165c359250 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56165c3592e0 <col:58> 'int' 0
|-CXXMethodDecl 0x56165c345998 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56165c359530 <col:26, col:53>
|   `-ReturnStmt 0x56165c359520 <col:28, col:50>
|     `-UnaryOperator 0x56165c359508 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56165c3594e8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56165c3594d0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56165c359480 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56165c34e738
|         |   `-CXXMemberCallExpr 0x56165c359460 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56165c359430 <col:36> '<bound member function type>' ->xanno 0x56165c3435f8
|         |       `-CXXThisExpr 0x56165c359420 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56165c3594b0 <col:49> 'int' 0
|-CXXMethodDecl 0x56165c345ab8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56165c359708 <col:38, col:65>
|   `-ReturnStmt 0x56165c3596f8 <col:40, col:62>
|     `-UnaryOperator 0x56165c3596e0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56165c3596c0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56165c3596a8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56165c359618 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56165c34e738
|         |   `-CXXMemberCallExpr 0x56165c3595f8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56165c3595c8 <col:48> '<bound member function type>' ->xanno 0x56165c343458
|         |       `-CXXThisExpr 0x56165c3595b8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56165c359648 <col:61> 'int' 0
|-CXXMethodDecl 0x56165c345c68 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56165c345b70 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56165c359dd8 <col:34, line:463:5>
|   |-ParenExpr 0x56165c359c20 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56165c359bf0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56165c359858 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c359828 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c359778 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c359760 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c359720 <col:23> 'int' lvalue ParmVar 0x56165c345b70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c359740 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c359808 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c3597d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c359798 <col:33> 'int' lvalue ParmVar 0x56165c345b70 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56165c3597f0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56165c3597b8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56165c3598b8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c359898 <col:56> 'int' 0
|   |   `-CallExpr 0x56165c359b50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56165c359b38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c359b18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c359b90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c3599a8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56165c359ba8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c3599d8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c359bc0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c359a10 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56165c359bd8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c359b00 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c359ae8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c359aa8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56165c359dc8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56165c359db0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56165c359d90 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56165c359d60 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56165c359d10 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56165c34e438
|         |   `-CXXMemberCallExpr 0x56165c359cf0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56165c359cc0 <col:9> '<bound member function type>' ->xanno 0x56165c343458
|         |       `-CXXThisExpr 0x56165c359cb0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56165c359d78 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56165c359d40 <col:21> 'int' lvalue ParmVar 0x56165c345b70 'i' 'int'
|-CXXMethodDecl 0x56165c345eb8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56165c345d28 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56165c345da0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56165c35a468 <col:40, line:472:5>
|   |-ParenExpr 0x56165c35a280 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56165c35a250 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56165c359f30 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c359f00 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c359e50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c359e38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c359df8 <col:23> 'int' lvalue ParmVar 0x56165c345d28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c359e18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c359ee0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c359eb0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c359e70 <col:33> 'int' lvalue ParmVar 0x56165c345d28 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56165c359ec8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56165c359e90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56165c359f90 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c359f70 <col:56> 'int' 0
|   |   `-CallExpr 0x56165c35a1b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56165c35a198 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35a178 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35a1f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35a000 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56165c35a208 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35a030 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35a220 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35a068 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56165c35a238 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35a160 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35a148 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35a108 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56165c35a448 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56165c35a3f0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56165c35a3c0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56165c35a370 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56165c34e438
|     | |   `-CXXMemberCallExpr 0x56165c35a350 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56165c35a320 <col:2> '<bound member function type>' ->xanno 0x56165c3435f8
|     | |       `-CXXThisExpr 0x56165c35a310 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56165c35a3d8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56165c35a3a0 <col:14> 'int' lvalue ParmVar 0x56165c345d28 'i' 'int'
|     `-ImplicitCastExpr 0x56165c35a430 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56165c35a410 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56165c345da0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56165c346078 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56165c345f80 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56165c35abe8 <col:36, line:485:5>
|   |-ParenExpr 0x56165c35a950 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35a920 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35a600 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35a5d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35a4e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35a4c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35a488 <col:23> 'int' lvalue ParmVar 0x56165c345f80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35a4a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35a5b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35a598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35a500 <col:33> 'int' lvalue ParmVar 0x56165c345f80 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35a578 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35a560 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35a520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35a540 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56165c35a660 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35a640 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35a880 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35a868 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35a848 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35a8c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35a6d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56165c35a8d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35a708 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35a8f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35a740 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56165c35a908 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35a830 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35a818 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35a7d8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56165c35abd8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56165c35abc0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56165c35aba8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56165c35ab78 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56165c35ab18 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56165c35aae8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56165c35aa60 <col:61, col:70> 'char const[48]' lvalue ->c 0x56165c34e310
|             |   `-CXXMemberCallExpr 0x56165c35aa40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56165c35aa10 <col:61> '<bound member function type>' ->xanno 0x56165c343458
|             |       `-CXXThisExpr 0x56165c35aa00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56165c35ab00 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56165c35aa90 <col:74> 'int' lvalue ParmVar 0x56165c345f80 'i' 'int'
|-CXXMethodDecl 0x56165c3462c8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56165c346138 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56165c3461b0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56165c35b338 <col:42, line:500:5>
|   |-ParenExpr 0x56165c35b0d0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35b0a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35ad80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35ad50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35ac60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35ac48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35ac08 <col:23> 'int' lvalue ParmVar 0x56165c346138 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35ac28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35ad30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35ad18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35ac80 <col:33> 'int' lvalue ParmVar 0x56165c346138 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35acf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35ace0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35aca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35acc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56165c35ade0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35adc0 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35b000 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35afe8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35afc8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35b040 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35ae50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56165c35b058 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35ae88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35b070 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35aec0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56165c35b088 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35afb0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35af98 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35af58 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56165c35b318 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56165c35b2c8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56165c35b298 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56165c35b240 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56165c35b210 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56165c35b1c0 <col:48, col:57> 'char [48]' lvalue ->c 0x56165c34e310
|     |     |   `-CXXMemberCallExpr 0x56165c35b1a0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56165c35b170 <col:48> '<bound member function type>' ->xanno 0x56165c3435f8
|     |     |       `-CXXThisExpr 0x56165c35b160 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56165c35b228 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56165c35b1f0 <col:61> 'int' lvalue ParmVar 0x56165c346138 'i' 'int'
|     `-ImplicitCastExpr 0x56165c35b300 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56165c35b2e0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56165c3461b0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56165c346488 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56165c346390 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56165c35ba98 <col:35, line:513:5>
|   |-ParenExpr 0x56165c35b7a8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35b778 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35b4d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35b4a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35b3b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35b398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35b358 <col:23> 'int' lvalue ParmVar 0x56165c346390 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35b378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35b480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35b468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35b3d0 <col:33> 'int' lvalue ParmVar 0x56165c346390 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35b448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35b430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35b3f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35b410 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56165c35b530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35b510 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35b6d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35b6c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35b6a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35b718 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35b5a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56165c35b730 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35b5d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35b748 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35b610 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56165c35b760 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35b688 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35b670 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35b630 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56165c35ba88 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56165c35ba70 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56165c35ba58 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56165c35ba28 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56165c35b9a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56165c35b970 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56165c35b920 <col:60, col:69> 'char const[48]' lvalue ->c 0x56165c34e310
|             |   `-CXXMemberCallExpr 0x56165c35b900 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56165c35b8d0 <col:60> '<bound member function type>' ->xanno 0x56165c343458
|             |       `-CXXThisExpr 0x56165c35b8c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56165c35b988 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56165c35b950 <col:73> 'int' lvalue ParmVar 0x56165c346390 'i' 'int'
|-CXXMethodDecl 0x56165c3466d8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56165c346548 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56165c3465c0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56165c35c1b8 <col:41, line:528:5>
|   |-ParenExpr 0x56165c35bf40 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35bf10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35bc30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35bc00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35bb10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35baf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35bab8 <col:23> 'int' lvalue ParmVar 0x56165c346548 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35bad8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35bbe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35bbc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35bb30 <col:33> 'int' lvalue ParmVar 0x56165c346548 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35bba8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35bb90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35bb50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35bb70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56165c35bc90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35bc70 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35be70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35be58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35be38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35beb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35bd00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56165c35bec8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35bd38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35bee0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35bd70 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56165c35bef8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35be20 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35be08 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35bdc8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56165c35c198 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56165c35c148 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56165c35c118 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56165c35c0c0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56165c35c080 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56165c35c030 <col:47, col:56> 'char [48]' lvalue ->c 0x56165c34e310
|     |     |   `-CXXMemberCallExpr 0x56165c35c010 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56165c35bfe0 <col:47> '<bound member function type>' ->xanno 0x56165c3435f8
|     |     |       `-CXXThisExpr 0x56165c35bfd0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56165c35c098 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56165c35c060 <col:60> 'int' lvalue ParmVar 0x56165c346548 'i' 'int'
|     `-ImplicitCastExpr 0x56165c35c180 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56165c35c160 <col:65> 'int16_t':'short' lvalue ParmVar 0x56165c3465c0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56165c346898 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56165c3467a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56165c35c888 <col:36, line:541:5>
|   |-ParenExpr 0x56165c35c628 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35c5f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35c350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35c320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35c230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35c218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35c1d8 <col:23> 'int' lvalue ParmVar 0x56165c3467a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35c1f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35c300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35c2e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35c250 <col:33> 'int' lvalue ParmVar 0x56165c3467a0 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35c2c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35c2b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35c270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35c290 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56165c35c3b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35c390 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35c558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35c540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35c520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35c598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35c420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56165c35c5b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35c458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35c5c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35c490 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56165c35c5e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35c508 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35c4f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35c4b0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56165c35c878 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56165c35c860 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56165c35c848 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56165c35c818 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56165c35c7c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56165c35c790 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56165c35c740 <col:61, col:70> 'char const[48]' lvalue ->c 0x56165c34e310
|             |   `-CXXMemberCallExpr 0x56165c35c720 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56165c35c6f0 <col:61> '<bound member function type>' ->xanno 0x56165c343458
|             |       `-CXXThisExpr 0x56165c35c6e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56165c35c7a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56165c35c770 <col:74> 'int' lvalue ParmVar 0x56165c3467a0 'i' 'int'
|-CXXMethodDecl 0x56165c346a68 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56165c346958 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56165c3469d0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56165c346b18 <col:20>
| `-OptimizeNoneAttr 0x56165c346b70 <col:30>
|-CXXMethodDecl 0x56165c346ca8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56165c346bb0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56165c35cf58 <col:35, line:562:5>
|   |-ParenExpr 0x56165c35ccf8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35ccc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35ca20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35c9f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35c900 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35c8e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35c8a8 <col:23> 'int' lvalue ParmVar 0x56165c346bb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35c8c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35c9d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35c9b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35c920 <col:33> 'int' lvalue ParmVar 0x56165c346bb0 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35c998 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35c980 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35c940 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35c960 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56165c35ca80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35ca60 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35cc28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35cc10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35cbf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35cc68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35caf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56165c35cc80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35cb28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35cc98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35cb60 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56165c35ccb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35cbd8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35cbc0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35cb80 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56165c35cf48 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56165c35cf30 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56165c35cf18 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56165c35cee8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56165c35ce90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56165c35ce60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56165c35ce10 <col:60, col:69> 'char const[48]' lvalue ->c 0x56165c34e310
|             |   `-CXXMemberCallExpr 0x56165c35cdf0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56165c35cdc0 <col:60> '<bound member function type>' ->xanno 0x56165c343458
|             |       `-CXXThisExpr 0x56165c35cdb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56165c35ce78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56165c35ce40 <col:73> 'int' lvalue ParmVar 0x56165c346bb0 'i' 'int'
|-CXXMethodDecl 0x56165c346eb8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56165c346d68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56165c346de0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56165c35d638 <col:41, line:577:5>
|   |-ParenExpr 0x56165c35d3c8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35d398 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35d0f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35d0c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35cfd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35cfb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35cf78 <col:23> 'int' lvalue ParmVar 0x56165c346d68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35cf98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35d0a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35d088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35cff0 <col:33> 'int' lvalue ParmVar 0x56165c346d68 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35d068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35d050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35d010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35d030 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56165c35d150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35d130 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35d2f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35d2e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35d2c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35d338 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35d1c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56165c35d350 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35d1f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35d368 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35d230 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56165c35d380 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35d2a8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35d290 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35d250 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56165c35d618 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56165c35d5c8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56165c35d598 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56165c35d538 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56165c35d508 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56165c35d4b8 <col:47, col:56> 'char [48]' lvalue ->c 0x56165c34e310
|     |     |   `-CXXMemberCallExpr 0x56165c35d498 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56165c35d468 <col:47> '<bound member function type>' ->xanno 0x56165c3435f8
|     |     |       `-CXXThisExpr 0x56165c35d458 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56165c35d520 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56165c35d4e8 <col:60> 'int' lvalue ParmVar 0x56165c346d68 'i' 'int'
|     `-ImplicitCastExpr 0x56165c35d600 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56165c35d5e0 <col:65> 'int32_t':'int' lvalue ParmVar 0x56165c346de0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56165c347078 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56165c346f80 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56165c35dd68 <col:36, line:591:5>
|   |-ParenExpr 0x56165c35daa8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35da78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35d7d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35d7a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35d6b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35d698 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35d658 <col:23> 'int' lvalue ParmVar 0x56165c346f80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35d678 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35d780 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35d768 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35d6d0 <col:33> 'int' lvalue ParmVar 0x56165c346f80 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35d748 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35d730 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35d6f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35d710 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56165c35d830 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35d810 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35d9d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35d9c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35d9a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35da18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35d8a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56165c35da30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35d8d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35da48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35d910 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56165c35da60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35d988 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35d970 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35d930 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56165c35dd58 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56165c35dd40 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56165c35dd28 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56165c35dcf8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56165c35dc70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56165c35dc40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56165c35dbf0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56165c34e310
|             |   `-CXXMemberCallExpr 0x56165c35dbd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56165c35dba0 <col:61> '<bound member function type>' ->xanno 0x56165c343458
|             |       `-CXXThisExpr 0x56165c35db90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56165c35dc58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56165c35dc20 <col:74> 'int' lvalue ParmVar 0x56165c346f80 'i' 'int'
|-CXXMethodDecl 0x56165c3472c8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56165c347138 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56165c3471b0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56165c35e448 <col:42, line:606:5>
|   |-ParenExpr 0x56165c35e1d8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56165c35e1a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35df00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35ded0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35dde0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35ddc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35dd88 <col:23> 'int' lvalue ParmVar 0x56165c347138 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35dda8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35deb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56165c35de98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35de00 <col:33> 'int' lvalue ParmVar 0x56165c347138 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35de78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35de60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35de20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56165c35de40 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56165c35df60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35df40 <col:60> 'int' 0
|   |   `-CallExpr 0x56165c35e108 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56165c35e0f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35e0d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35e148 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35dfd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56165c35e160 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35e008 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35e178 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35e040 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56165c35e190 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35e0b8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35e0a0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35e060 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56165c35e428 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56165c35e3d8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56165c35e3a8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56165c35e348 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56165c35e318 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56165c35e2c8 <col:48, col:57> 'char [48]' lvalue ->c 0x56165c34e310
|     |     |   `-CXXMemberCallExpr 0x56165c35e2a8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56165c35e278 <col:48> '<bound member function type>' ->xanno 0x56165c3435f8
|     |     |       `-CXXThisExpr 0x56165c35e268 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56165c35e330 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56165c35e2f8 <col:61> 'int' lvalue ParmVar 0x56165c347138 'i' 'int'
|     `-ImplicitCastExpr 0x56165c35e410 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56165c35e3f0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56165c3471b0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56165c347460 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56165c347390 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56165c35ecb8 <col:33, line:620:5>
|   |-ParenExpr 0x56165c35ea30 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56165c35ea00 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35e650 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35e620 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35e4c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35e4a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35e468 <col:23> 'int' lvalue ParmVar 0x56165c347390 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35e488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35e600 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56165c35e5e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35e4e0 <col:33> 'int' lvalue ParmVar 0x56165c347390 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35e5c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35e5b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35e500 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56165c35e588 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56165c35e570 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56165c35e538 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56165c35e6b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35e690 <col:79> 'int' 0
|   |   `-CallExpr 0x56165c35e960 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56165c35e948 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35e928 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35e9a0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35e798 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56165c35e9b8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35e7e0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35e9d0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35e818 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56165c35e9e8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35e910 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35e8f8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35e8b8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56165c35eca8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56165c35ec90 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56165c35ec78 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56165c35ec48 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56165c35ebc0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56165c35eb90 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56165c35eb40 <col:67, col:76> 'char const[48]' lvalue ->c 0x56165c34e310
|             |   `-CXXMemberCallExpr 0x56165c35eb20 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56165c35eaf0 <col:67> '<bound member function type>' ->xanno 0x56165c343458
|             |       `-CXXThisExpr 0x56165c35eae0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56165c35eba8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56165c35eb70 <col:80> 'int' lvalue ParmVar 0x56165c347390 'i' 'int'
|-CXXMethodDecl 0x56165c347678 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56165c347520 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56165c3475a0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56165c35f4e0 <col:45, line:635:5>
|   |-ParenExpr 0x56165c35f228 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56165c35f1f8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56165c35eec0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56165c35ee90 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56165c35ed30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56165c35ed18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56165c35ecd8 <col:23> 'int' lvalue ParmVar 0x56165c347520 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56165c35ecf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56165c35ee70 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56165c35ee58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56165c35ed50 <col:33> 'int' lvalue ParmVar 0x56165c347520 'i' 'int'
|   |   |     `-BinaryOperator 0x56165c35ee38 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56165c35ee20 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56165c35ed70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56165c343840 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56165c35edf8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56165c35ede0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56165c35eda8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56165c35ef20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56165c35ef00 <col:79> 'int' 0
|   |   `-CallExpr 0x56165c35f158 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56165c35f140 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56165c35f120 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56165beb0110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56165c35f198 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35ef90 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56165c35f1b0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56165c35efd8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56165c35f1c8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56165c35f010 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56165c35f1e0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56165c35f108 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56165c35f0f0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56165c35f0a8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56165c35f4c0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56165c35f428 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56165c35f3f8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56165c35f398 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56165c35f368 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56165c35f318 <col:54, col:63> 'char [48]' lvalue ->c 0x56165c34e310
|     |     |   `-CXXMemberCallExpr 0x56165c35f2f8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56165c35f2c8 <col:54> '<bound member function type>' ->xanno 0x56165c3435f8
|     |     |       `-CXXThisExpr 0x56165c35f2b8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56165c35f380 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56165c35f348 <col:67> 'int' lvalue ParmVar 0x56165c347520 'i' 'int'
|     `-CXXConstCastExpr 0x56165c35f490 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56165c35f478 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56165c35f440 <col:91> 'const void *' lvalue ParmVar 0x56165c3475a0 'x' 'const void *'
|-CXXMethodDecl 0x56165c347748 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56165c35f568 <col:34, line:640:5>
|   `-ReturnStmt 0x56165c35f558 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56165c35f540 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56165c35f510 <col:16> 'Packet *' lvalue ->_data_packet 0x56165c34eec8
|         `-CXXThisExpr 0x56165c35f500 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56165c347888 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56165c3477f8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56165c358628 <col:46> 'bool' true
|-CXXMethodDecl 0x56165c347a08 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56165c347940 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56165c347ab0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56165c348260 <line:660:22> "" ""
| |-EnumConstantDecl 0x56165c347bb0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c3482d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347b90 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56165c347b70 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56165c33cd10 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56165c347c40 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c3482e8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347c20 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56165c347c00 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56165c33cda0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56165c347cd0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c348300 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347cb0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56165c347c90 <col:21> 'int' 0
| |-EnumConstantDecl 0x56165c347d60 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c348318 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347d40 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56165c347d20 <col:19> 'int' 16
| |-EnumConstantDecl 0x56165c347df0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c348330 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347dd0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56165c347db0 <col:21> 'int' 16
| |-EnumConstantDecl 0x56165c347e80 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c348348 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347e60 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56165c347e40 <col:19> 'int' 32
| |-EnumConstantDecl 0x56165c347f10 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c348360 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347ef0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56165c347ed0 <col:19> 'int' EnumConstant 0x56165c347d60 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56165c347fa0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c348378 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c347f80 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56165c347f60 <col:19> 'int' EnumConstant 0x56165c347e80 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56165c348070 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c348390 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c348050 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56165c348030 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56165c347ff0 <col:23> 'int' EnumConstant 0x56165c347fa0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56165c348010 <col:40> 'int' 2
| |-EnumConstantDecl 0x56165c348140 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56165c3483a8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c348120 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56165c348100 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56165c3480c0 <col:23> 'int' EnumConstant 0x56165c347fa0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56165c3480e0 <col:40> 'int' 4
| `-EnumConstantDecl 0x56165c348210 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56165c3483c0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56165c3481f0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56165c3481d0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56165c348190 <col:23> 'int' EnumConstant 0x56165c347fa0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56165c3481b0 <col:40> 'int' 8
|-CXXMethodDecl 0x56165c348400 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56165c3484a0 <col:68> "" ""
|-CXXMethodDecl 0x56165c348538 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56165c3485d8 <col:45> "" ""
|-CXXMethodDecl 0x56165c348670 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56165c348710 <col:57> "" ""
|-CXXMethodDecl 0x56165c3487a8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56165c348848 <col:45> "" ""
|-CXXMethodDecl 0x56165c3488e0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56165c348980 <col:57> "" ""
|-CXXMethodDecl 0x56165c348a10 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56165c348ab0 <col:51> "" ""
|-CXXMethodDecl 0x56165c348b40 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56165c348be0 <col:63> "" ""
|-CXXMethodDecl 0x56165c348c70 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56165c348d10 <col:53> "" ""
|-CXXMethodDecl 0x56165c348da0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56165c348e40 <col:65> "" ""
|-CXXMethodDecl 0x56165c348f58 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56165c348ec8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56165c349000 <col:61> "" ""
|-CXXMethodDecl 0x56165c349198 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56165c349088 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56165c349100 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56165c349248 <col:67> "" ""
|-CXXMethodDecl 0x56165c349360 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56165c3492d0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56165c349408 <col:63> "" ""
|-CXXMethodDecl 0x56165c3495a0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56165c349490 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56165c349508 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56165c349650 <col:69> "" ""
|-CXXMethodDecl 0x56165c349768 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56165c3496d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56165c349810 <col:63> "" ""
|-CXXMethodDecl 0x56165c34bee8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56165c34bdd8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56165c34be50 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56165c34bf98 <col:69> "" ""
|-CXXMethodDecl 0x56165c34c0b0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56165c34c020 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56165c34c158 <col:62> "" ""
|-CXXMethodDecl 0x56165c34c2f0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56165c34c1e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56165c34c258 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56165c34c3a0 <col:68> "" ""
|-CXXMethodDecl 0x56165c34c4b8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56165c34c428 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56165c34c560 <col:63> "" ""
|-CXXMethodDecl 0x56165c34c6f8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56165c34c5e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56165c34c660 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56165c34c7a8 <col:69> "" ""
|-CXXMethodDecl 0x56165c34c838 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56165c34c8d8 <col:64> "" ""
|-CXXMethodDecl 0x56165c34c968 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56165c34ca08 <col:52> "" ""
|-CXXMethodDecl 0x56165c34ca98 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56165c34cb38 <col:67> "" ""
|-CXXMethodDecl 0x56165c34cbc8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56165c34cc68 <col:55> "" ""
|-CXXMethodDecl 0x56165c34cd80 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56165c34ccf0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56165c34ce28 <col:58> "" ""
|-CXXMethodDecl 0x56165c34cfc0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56165c34ceb0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56165c34cf28 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56165c34d070 <col:62> "" ""
|-CXXMethodDecl 0x56165c34d188 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56165c34d0f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56165c34d230 <col:58> "" ""
|-CXXMethodDecl 0x56165c34d3c8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56165c34d2b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56165c34d330 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56165c34d478 <col:62> "" ""
|-CXXMethodDecl 0x56165c34d590 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56165c34d500 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56165c34d638 <col:60> "" ""
|-CXXMethodDecl 0x56165c34d7d0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56165c34d6c0 <col:34> col:37 'int'
| |-ParmVarDecl 0x56165c34d738 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56165c34d880 <col:64> "" ""
|-CXXMethodDecl 0x56165c34d998 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56165c34d908 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56165c34da40 <col:58> "" ""
|-CXXMethodDecl 0x56165c34dbd8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56165c34dac8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56165c34db40 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56165c34dc88 <col:62> "" ""
|-CXXMethodDecl 0x56165c34dda0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56165c34dd10 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56165c34de48 <col:59> "" ""
|-CXXMethodDecl 0x56165c34dfe0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56165c34ded0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56165c34df48 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56165c34e090 <col:63> "" ""
|-AccessSpecDecl 0x56165c34e100 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56165c34e128 prev 0x56165c343330 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56165c34e220 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56165c34e310 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56165c34e438 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56165c34e5b8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56165c34e738 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56165c34e8b8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56165c35f6e8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56165c35ff58 <col:11>
| |-CXXDestructorDecl 0x56165c35f7c0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56165c35f8f8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56165c35f8f8
| | `-ParmVarDecl 0x56165c35fa08 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56165c35faa8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56165c35faa8
| | `-ParmVarDecl 0x56165c35fbb8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56165c362978 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56165c362a88 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56165c362d08 <col:11>
| |   `-ReturnStmt 0x56165c362cf8 <col:11>
| |     `-UnaryOperator 0x56165c362ce0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56165c362cd0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56165c362af8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56165c362af8
|   `-ParmVarDecl 0x56165c362c08 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56165c34e920 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56165c34ea38 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56165c34ead8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56165c34eb40 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56165c34eba8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56165c34ec10 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56165c34ec70 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56165c34ed30 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56165c34ed90 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56165c34edf0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56165c35f5f8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56165c34ead8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56165c35ff68 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56165c35ffc0 <col:12>
| |-CXXConstructorDecl 0x56165c35fc28 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56165c35fc28
| | `-ParmVarDecl 0x56165c35fd38 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56165c35fdd8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56165c35fdd8
| | `-ParmVarDecl 0x56165c35fee8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56165c362060 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56165c34ee68 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56165c34eec8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56165c34ef30 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56165c34ef98 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56165c34f000 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56165c34f068 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56165c34f0c8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56165c34f128 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56165c34f190 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56165c34f218 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56165c34ee68 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56165c35f590 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56165c34f0c8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56165c35ffd0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56165c360030 <col:21, line:755:5>
|-CXXConstructorDecl 0x56165c34f3b8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56165c34f2f8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56165c34f4b0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56165c34f698 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56165c34f5a0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56165c34f968 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56165c34f750 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56165c34f7c8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56165c34f840 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c34fb88 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56165c34fa38 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56165c34fab0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56165c358168 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56165c34fc48 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56165c34fcc0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56165c34fd38 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56165c3582c0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56165c358230 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c358408 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56165c358378 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56165c358500 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c3600d0 prev 0x56165c33c990 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x56165c360208 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x56165c360298 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x56165c360340 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x56165c3603e0 <col:20>
| `-OptimizeNoneAttr 0x56165c360438 <col:30>
|-CXXMethodDecl 0x56165c360488 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x56165c360528 <col:20>
| `-OptimizeNoneAttr 0x56165c360580 <col:30>
|-CXXMethodDecl 0x56165c3605d0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56165c360698 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56165c360760 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56165c360878 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x56165c360940 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x56165c3609e0 <col:20>
| `-OptimizeNoneAttr 0x56165c360a38 <col:30>
|-CXXMethodDecl 0x56165c360aa8 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x56165c360b48 <col:20>
| `-OptimizeNoneAttr 0x56165c360ba0 <col:30>
|-CXXMethodDecl 0x56165c360c48 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x56165c360ce8 <col:20>
| `-OptimizeNoneAttr 0x56165c360d40 <col:30>
|-CXXMethodDecl 0x56165c360d90 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56165c360ea8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x56165c360fc8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x56165c3610e8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x56165c3611b0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x56165c361250 <col:62> "" ""
|-AccessSpecDecl 0x56165c3612c0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x56165c361320 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x56165c361f18 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x56165c362140 <col:29, col:31>
|-CXXMethodDecl 0x56165c3613e8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x56165c361528 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x56165c361498 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x56165c361620 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x56165c362150 <col:23, col:25>
|-CXXMethodDecl 0x56165c3617d8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x56165c361710 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x56165c361aa8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56165c361890 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56165c361908 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56165c361980 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56165c361c38 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x56165c361b70 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x56165c361d30 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x56165c361d98 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x56165c361d98
  `-ParmVarDecl 0x56165c361ea8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c0aa668 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c0aa788 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x56165c0aa850 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x56165c17ae20 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56165c180138 <col:8>
|-CXXConstructorDecl 0x56165c17af28 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x56165c17af28
| `-ParmVarDecl 0x56165c17b038 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x56165c17b0d8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56165c17b1e8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x56165c0aa850 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x56165c180350 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x56165c180320 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x56165c0aa850
| |     `-CXXStaticCastExpr 0x56165c1802f0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x56165c1802c0 <col:8> 'in_addr' lvalue ParmVar 0x56165c17b1e8 '' 'in_addr &&'
| `-CompoundStmt 0x56165c180398 <col:8>
`-CXXDestructorDecl 0x56165c1805d0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c172b08 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56165c172c28 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x56165c172d10 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x56165c172cf0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x56165c172cb8 <col:22> 'int' 4
|-FieldDecl 0x56165c172db8 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x56165c172d98 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x56165c172d60 <col:21> 'int' 4
|-FieldDecl 0x56165c172e18 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x56165c172e78 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x56165c172ed8 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x56165c172f38 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x56165c172f98 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x56165c172ff8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x56165c173058 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x56165c1730c8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x56165c173138 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c4300a0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56165c4301b8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56165c430248 <col:16, col:22> col:16 public
|-EnumDecl 0x56165c430270 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56165c430370 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56165c4305c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c430350 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56165c430330 <col:21> 'int' 0
| |-EnumConstantDecl 0x56165c430400 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56165c4305d8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c4303e0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56165c4303c0 <col:24> 'int' 22
| |-EnumConstantDecl 0x56165c430490 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56165c4305f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c430470 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56165c430450 <col:24> 'int' 34
| |-EnumConstantDecl 0x56165c430520 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56165c430608 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56165c430500 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56165c4304e0 <col:25> 'int' 95
| `-EnumConstantDecl 0x56165c430570 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56165c431f80 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56165c4323b8 <col:7>
|-CXXConstructorDecl 0x56165c432088 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56165c432088
| `-ParmVarDecl 0x56165c432198 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56165c432238 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56165c432348 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x56165c495e60 <col:7>
`-CXXDestructorDecl 0x56165c4344f8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56165c430638 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56165c430798 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56165c430828 <col:32, col:38> col:32 public
|-TypedefDecl 0x56165c430860 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56165bf69660 'uint32_t' sugar
|   |-Typedef 0x56165be7d4c8 'uint32_t'
|   `-TypedefType 0x56165be565a0 '__uint32_t' sugar
|     |-Typedef 0x56165be56198 '__uint32_t'
|     `-BuiltinType 0x56165be14620 'unsigned int'
|-CXXConstructorDecl 0x56165c4309a8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56165c4308d0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56165c431e88 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56165c4323c8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56165c431740 'base' 'int'
| | `-ImplicitCastExpr 0x56165c431f28 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56165c431ee8 <col:16> 'int' lvalue ParmVar 0x56165c4308d0 'b' 'int'
| `-CompoundStmt 0x56165c432438 <col:19, line:1046:5>
|-CXXMethodDecl 0x56165c430ea0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56165c430a70 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56165c430af0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56165c430b68 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56165c430be8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56165c430ca8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56165c430d28 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56165c4312f8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56165c430f70 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56165c431258 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56165c431018 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56165c4310b8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56165c431130 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56165c431ea8 <col:82> 'const ArgContext' lvalue Var 0x56165c425f68 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56165c4333a8 <col:94, line:1067:5>
| |   |-DeclStmt 0x56165c4325c8 <line:1054:9, col:64>
| |   | `-VarDecl 0x56165c432458 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x56165c432580 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x56165c4327e8 <line:1055:9, col:91>
| |   | `-VarDecl 0x56165c4325f8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56165c4327c0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x56165c4327a0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x56165c432750 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x56165c432730 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x56165c4326d8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x56165c432688 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x56165c4326b8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x56165c432718 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x56165c4326f8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x56165c432780 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56165c432948 <line:1056:9, col:27>
| |   | `-VarDecl 0x56165c4328e0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x56165c432d90 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x56165c432cc0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x56165c432c40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56165c333648 0x56165c17cc28 0x56165c17c900 0x56165c16d0d0 0x56165c16cd80 0x56165c16c670 0x56165c13efe0 0x56165c0cc4b0
| |   | | |-CallExpr 0x56165c432b80 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x56165c432970 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x56165c432a20 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56165c4329f0 <col:19, col:23> '<bound member function type>' .begin 0x56165c15c2d8
| |   | | | |   `-DeclRefExpr 0x56165c4329d0 <col:19> 'const String' lvalue ParmVar 0x56165c431018 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56165c432a90 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56165c432a60 <col:32, col:36> '<bound member function type>' .end 0x56165c15c4f0
| |   | | | |   `-DeclRefExpr 0x56165c432a40 <col:32> 'const String' lvalue ParmVar 0x56165c431018 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x56165c432ab0 <col:43> 'const bool' lvalue Var 0x56165c432458 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x56165c432b18 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x56165c432af8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x56165c432b40 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56165c4328e0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x56165c432b60 <col:73> 'const int' lvalue Var 0x56165c4325f8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x56165c432c20 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56165c432bf0 <col:16, col:20> '<bound member function type>' .end 0x56165c15c4f0
| |   | |     `-DeclRefExpr 0x56165c432bd0 <col:16> 'const String' lvalue ParmVar 0x56165c431018 'str' 'const String &'
| |   | `-BinaryOperator 0x56165c432d70 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x56165c432d08 <col:13> 'int' lvalue ->status 0x56165c4317a8
| |   |   | `-CXXThisExpr 0x56165c432cf8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56165c432d58 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x56165c432d38 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430400 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56165c432fe0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56165c432ec8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56165c432eb0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56165c432e98 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x56165c432db8 <col:13> 'int' lvalue ->status 0x56165c4317a8
| |   | | |     `-CXXThisExpr 0x56165c432da8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56165c432e78 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56165c432e48 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x56165c432df8 <col:23> 'int' lvalue ->status 0x56165c4317a8
| |   | |   |   `-CXXThisExpr 0x56165c432de8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56165c432e60 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x56165c432e28 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430490 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56165c432fc0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56165c432f60 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56165c432f08 <col:13, col:18> '<bound member function type>' .error 0x56165c2f6cf0
| |   |   | | `-DeclRefExpr 0x56165c432ee8 <col:13> 'const ArgContext' lvalue ParmVar 0x56165c431130 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56165c432f88 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x56165c432f38 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56165c432fb0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x56165c432fa0 <col:20> 'bool' false
| |   |-DeclStmt 0x56165c4331f8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56165c4331a0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x56165c433130 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x56165c433358 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x56165c433210 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56165c100478
| |   | |-DeclRefExpr 0x56165c433258 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56165c4328e0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x56165c433328 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x56165c4332a0 <col:64> 'V' lvalue ParmVar 0x56165c4310b8 'result' 'V &'
| |   `-ReturnStmt 0x56165c433398 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x56165c433388 <col:16> 'bool' true
| `-CXXMethodDecl 0x56165c4999d8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x56165c4997b0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x56165c499888 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x56165c4998f0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x56165c49b770 <col:94, line:1067:5>
|     |-DeclStmt 0x56165c49a1e8 <line:1054:9, col:64>
|     | `-VarDecl 0x56165c49a008 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x56165c49a178 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x56165c49a148 <col:36, col:55> 'const bool' lvalue Var 0x56165c0ef690 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x56165c49a3c8 <line:1055:9, col:91>
|     | `-VarDecl 0x56165c49a200 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56165c49a348 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x56165c49a330 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x56165c49a310 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x56165c49a2f0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x56165c49a2d0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x56165c49a298 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x56165c49a278 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x56165c4326b8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x56165c49a2b8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x56165c4326f8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x56165c432780 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56165c49a560 <line:1056:9, col:27>
|     | `-VarDecl 0x56165c49a4f8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x56165c49a9e8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x56165c49a990 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x56165c49a848 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x56165c49a818 <col:13> '<bound member function type>' ->parse 0x56165c430ea0
|     | | | | `-CXXThisExpr 0x56165c49a808 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x56165c49a6a8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56165c49a678 <col:19, col:23> '<bound member function type>' .begin 0x56165c15c2d8
|     | | | |   `-DeclRefExpr 0x56165c49a658 <col:19> 'const String' lvalue ParmVar 0x56165c4997b0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56165c49a718 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56165c49a6e8 <col:32, col:36> '<bound member function type>' .end 0x56165c15c4f0
|     | | | |   `-DeclRefExpr 0x56165c49a6c8 <col:32> 'const String' lvalue ParmVar 0x56165c4997b0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x56165c49a8b8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x56165c49a898 <col:43> 'const bool' lvalue Var 0x56165c49a008 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x56165c49a7a0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x56165c49a788 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x56165c49a768 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x56165c49a8d0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x56165c49a7c8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56165c49a4f8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x56165c49a908 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x56165c49a8e8 <col:73> 'const int' lvalue Var 0x56165c49a200 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x56165c49a970 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56165c49a940 <col:16, col:20> '<bound member function type>' .end 0x56165c15c4f0
|     | |     `-DeclRefExpr 0x56165c49a920 <col:16> 'const String' lvalue ParmVar 0x56165c4997b0 'str' 'const String &'
|     | `-BinaryOperator 0x56165c49a9c8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56165c432d08 <col:13> 'int' lvalue ->status 0x56165c4317a8
|     |   | `-CXXThisExpr 0x56165c432cf8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56165c49a9b0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56165c432d38 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430400 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56165c49ab60 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56165c49aa80 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56165c49aa68 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56165c49aa50 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56165c432db8 <col:13> 'int' lvalue ->status 0x56165c4317a8
|     | | |     `-CXXThisExpr 0x56165c432da8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56165c49aa30 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56165c49aa00 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56165c432df8 <col:23> 'int' lvalue ->status 0x56165c4317a8
|     | |   |   `-CXXThisExpr 0x56165c432de8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56165c49aa18 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56165c432e28 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430490 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56165c49ab40 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56165c49aaf0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56165c49aac0 <col:13, col:18> '<bound member function type>' .error 0x56165c2f6cf0
|     |   | | `-DeclRefExpr 0x56165c49aaa0 <col:13> 'const ArgContext' lvalue ParmVar 0x56165c4998f0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56165c49ab18 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56165c432f38 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56165c49ab30 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56165c432fa0 <col:20> 'bool' false
|     |-DeclStmt 0x56165c49b0a8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56165c49b050 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x56165c49b000 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x56165c49afe0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x56165c49af70 'type'
|     |       `-ElaboratedType 0x56165c49af20 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x56165c49af00 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x56165c0ef7e8 'unsigned_type'
|     |           `-BuiltinType 0x56165be14620 'unsigned int'
|     |-CallExpr 0x56165c49b700 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x56165c49b6e8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56165c49b668 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x56165c49b548 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x56165c100478 'extract_integer')
|     | |-ImplicitCastExpr 0x56165c49b748 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x56165c49b730 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x56165c49b108 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56165c49a4f8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x56165c49b1d8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x56165c49b188 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x56165c499888 'result' 'unsigned int &'
|     `-ReturnStmt 0x56165c49b760 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56165c433388 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56165c4316b8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56165c431368 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56165c431618 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56165c431418 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56165c4314b8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56165c431530 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56165c431ec8 <col:71> 'const ArgContext' lvalue Var 0x56165c425f68 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56165c433b18 <col:83, line:1083:5>
| |   |-DeclStmt 0x56165c433470 <line:1071:9, col:12>
| |   | `-VarDecl 0x56165c433408 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56165c433af0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56165c433700 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56165c433588 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56165c433550 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56165c433498 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56165c4334f0 <col:31> 'const String' lvalue ParmVar 0x56165c431418 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56165c433510 <col:36> 'V' lvalue Var 0x56165c433408 'x' 'V'
| |     | |   `-DeclRefExpr 0x56165c433530 <col:39> 'const ArgContext' lvalue ParmVar 0x56165c431530 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56165c4336e0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56165c4336c0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56165c4336a8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56165c433690 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56165c4335b0 <col:17> 'int' lvalue ->status 0x56165c4317a8
| |     |     |     `-CXXThisExpr 0x56165c4335a0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56165c433670 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56165c433640 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56165c4335f0 <col:27> 'int' lvalue ->status 0x56165c4317a8
| |     |       |   `-CXXThisExpr 0x56165c4335e0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56165c433658 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56165c433620 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430490 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56165c433730 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56165c433720 <col:20> 'bool' false
| |     `-IfStmt 0x56165c433ac8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56165c4337d0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56165c4337a0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56165c433750 <col:18> 'int' lvalue ->status 0x56165c4317a8
| |       | |   `-CXXThisExpr 0x56165c433740 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56165c4337b8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56165c433780 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430490 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56165c433a08 <col:42, line:1079:9>
| |       | |-CallExpr 0x56165c4339b0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56165c433800 <line:1076:13> '<bound member function type>' ->range_error 0x56165c431db8
| |       | | | `-CXXThisExpr 0x56165c4337f0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56165c433830 <col:25> 'const ArgContext' lvalue ParmVar 0x56165c431530 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56165c433910 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56165c433988 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56165c433968 <col:43> 'V' lvalue Var 0x56165c433408 'x' 'V'
| |       | `-ReturnStmt 0x56165c4339f8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56165c4339e8 <col:20> 'bool' false
| |       `-CompoundStmt 0x56165c433aa8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56165c433a68 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56165c433a28 <col:13> 'V' lvalue ParmVar 0x56165c4314b8 'result' 'V &'
| |         | `-DeclRefExpr 0x56165c433a48 <col:22> 'V' lvalue Var 0x56165c433408 'x' 'V'
| |         `-ReturnStmt 0x56165c433a98 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56165c433a88 <col:20> 'bool' true
| `-CXXMethodDecl 0x56165c499398 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x56165c499170 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x56165c499248 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x56165c4992b0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x56165c499fe8 <col:83, line:1083:5>
|     |-DeclStmt 0x56165c499620 <line:1071:9, col:12>
|     | `-VarDecl 0x56165c4995b8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x56165c499fc0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x56165c499c50 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x56165c499b78 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x56165c499b40 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x56165c499af8 <col:14> '<bound member function type>' ->parse_saturating 0x56165c4999d8
|       | |   | `-CXXThisExpr 0x56165c499ae8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x56165c499690 <col:31> 'const String' lvalue ParmVar 0x56165c499170 'str' 'const String &'
|       | |   |-DeclRefExpr 0x56165c4996b0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x56165c4995b8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x56165c4996d0 <col:39> 'const ArgContext' lvalue ParmVar 0x56165c4992b0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x56165c499c30 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x56165c499c10 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x56165c499bf8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x56165c499be0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x56165c4335b0 <col:17> 'int' lvalue ->status 0x56165c4317a8
|       |     |     `-CXXThisExpr 0x56165c4335a0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x56165c499bc0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x56165c499b90 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x56165c4335f0 <col:27> 'int' lvalue ->status 0x56165c4317a8
|       |       |   `-CXXThisExpr 0x56165c4335e0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x56165c499ba8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x56165c433620 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430490 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x56165c499c70 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x56165c433720 <col:20> 'bool' false
|       `-IfStmt 0x56165c499f98 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x56165c499cb0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x56165c499c80 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x56165c433750 <col:18> 'int' lvalue ->status 0x56165c4317a8
|         | |   `-CXXThisExpr 0x56165c433740 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x56165c499c98 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x56165c433780 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56165c430490 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x56165c499ed0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x56165c499e40 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x56165c433800 <line:1076:13> '<bound member function type>' ->range_error 0x56165c431db8
|         | | | `-CXXThisExpr 0x56165c4337f0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x56165c499cd0 <col:25> 'const ArgContext' lvalue ParmVar 0x56165c4992b0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x56165c499ea8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x56165c499e78 <col:31, col:50> 'const bool' lvalue Var 0x56165c0ef690 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x56165c499e18 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x56165c499e00 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x56165c499de8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x56165c499dc8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x56165c4995b8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x56165c499ec0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x56165c4339e8 <col:20> 'bool' false
|         `-CompoundStmt 0x56165c499f78 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x56165c499f48 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x56165c499ef0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x56165c499248 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x56165c499f30 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x56165c499f10 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x56165c4995b8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x56165c499f68 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x56165c433a88 <col:20> 'bool' true
|-FieldDecl 0x56165c431740 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56165c4317a8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56165c4317f8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56165c431ab0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56165c431838 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56165c4318b8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56165c431930 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56165c4319b0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56165c431db8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56165c431b80 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56165c431bf8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56165c431c90 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56165c434378 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56165c434378
| `-ParmVarDecl 0x56165c434488 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56165c434608 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56165c434718 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56165c495e70 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56165c495e40 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x56165c495e10 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56165c495de0 <col:7> 'IntArg' lvalue ParmVar 0x56165c434718 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56165c431740 'base' 'int'
| | `-ImplicitCastExpr 0x56165c495f68 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56165c495f38 <col:7> 'int' xvalue .base 0x56165c431740
| |     `-CXXStaticCastExpr 0x56165c495f08 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56165c495ed8 <col:7> 'IntArg' lvalue ParmVar 0x56165c434718 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56165c4317a8 'status' 'int'
| | `-ImplicitCastExpr 0x56165c496038 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56165c496008 <col:7> 'int' xvalue .status 0x56165c4317a8
| |     `-CXXStaticCastExpr 0x56165c495fd8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56165c495fa8 <col:7> 'IntArg' lvalue ParmVar 0x56165c434718 '' 'IntArg &&'
| `-CompoundStmt 0x56165c496090 <col:7>
`-CXXDestructorDecl 0x56165c494fd0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56165c438910 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x56165c438b68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56165c494ef8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56165c495470 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56165c495450 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56165c4954e0 <col:19>
|-CXXConstructorDecl 0x56165c4950d8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x56165c4950d8
| `-ParmVarDecl 0x56165c4951e8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x56165c495288 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56165c495398 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56165c4960a0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56165c495dc0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x56165c495d90 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x56165c495d60 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x56165c495398 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x56165c496110 <col:19>
`-CXXDestructorDecl 0x56165c495520 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
