
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f27a2ad8 prev 0x5576f279a278 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f27a2bd0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5576f27a2c60 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5576f27a2cd8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5576f27a2d98 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5576f27a2e60 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5576f27a2fd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5576f27a2f10 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5576f27a3080 <col:24>
| `-OptimizeNoneAttr 0x5576f27a30d8 <col:34>
|-CXXMethodDecl 0x5576f27a3120 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5576f27a33d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5576f27a31d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5576f27a3248 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5576f27a32c8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5576f27a3490 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5576f27a34c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5576f27a3530 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5576f27a35b8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5576f27a38d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5576f27a3670 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5576f27a36e8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5576f27a3760 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5576f27a37e0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5576f27a39f0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5576f27ab368 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5576f27ab368
| `-ParmVarDecl 0x5576f27ab478 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5576f27ab518 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5576f27ab518
| `-ParmVarDecl 0x5576f27ab628 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5576f287b8e8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2795af0 prev 0x5576f2795870 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576f2795be8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5576f2795c78 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5576f2795cd8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5576f2795dc8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5576f2795ec8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5576f2796098 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5576f2795f48 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5576f2795fc0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5576f2796228 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5576f2796160 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5576f27962d0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5576f2796408 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5576f2796340 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5576f27965a8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5576f27964e8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5576f2796748 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5576f2796688 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5576f27967f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5576f27968f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5576f27969d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f27968d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5576f27968b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5576f2796980 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5576f27969e8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f2796960 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5576f2796940 <col:44> 'int' 2
|-CXXMethodDecl 0x5576f2796b30 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5576f2796a18 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5576f2796a98 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5576f2796c88 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5576f2796bf8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5576f2796ec8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5576f2796d48 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5576f2796dc0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5576f2796f78 <col:20>
| `-OptimizeNoneAttr 0x5576f2796fd0 <col:30>
|-CXXMethodDecl 0x5576f27970d8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5576f2797010 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5576f2797180 <col:20>
| `-OptimizeNoneAttr 0x5576f27971d8 <col:30>
|-CXXMethodDecl 0x5576f2797228 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5576f27972f0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5576f2797408 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5576f2797490 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5576f2797518 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5576f27975a0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5576f2797628 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5576f27976b8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5576f2797778 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5576f2797800 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5576f2797888 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5576f2797910 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5576f2797998 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5576f2797a20 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5576f2797ab0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5576f2797b70 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5576f2797c00 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5576f2797d50 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5576f2797cb8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5576f2797ee0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5576f2797e10 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5576f2798190 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5576f2797f98 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5576f2798018 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5576f2798098 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5576f2798248 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5576f2798350 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5576f27985e0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2798330 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5576f2798310 <col:33> 'int' 0
| |-EnumConstantDecl 0x5576f27983e0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5576f27985f8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f27983c0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5576f27983a0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5576f2798470 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5576f2798610 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2798450 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5576f2798430 <col:38> 'int' 90
| |-EnumConstantDecl 0x5576f2798500 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5576f2798628 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f27984e0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5576f27984c0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5576f2798590 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5576f2798640 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f2798570 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5576f2798550 <col:32> 'int' 2000
|-CXXMethodDecl 0x5576f2798680 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5576f2798ac0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5576f2798930 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5576f27989a8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576f2798b90 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5576f2798d10 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5576f2798c40 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576f2798f18 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5576f2798dc8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5576f2798e40 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576f2799018 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5576f27990b8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5576f2799180 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576f2799210 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5576f2799440 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f27991f0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5576f27991d0 <col:36> 'int' EnumConstant 0x5576f2799180 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576f2799260 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576f27992b0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576f2799300 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576f2799350 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576f27993a0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5576f27993f0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5576f2799528 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5576f2799468 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5576f27995f0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5576f27996b0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5576f2799770 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5576f2799830 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5576f2799948 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5576f2799a10 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5576f2799b90 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5576f2799ac0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5576f2799cb8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5576f2799eb8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5576f2799d68 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5576f2799de8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5576f27a7808 <col:54, line:127:5>
|   |-ParenExpr 0x5576f27a76b8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5576f27a7688 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5576f27a7378 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5576f27a7350 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5576f27a7338 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5576f27a7320 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5576f27a72f0 <col:31> 'Router *' lvalue ->_router 0x5576f27a51d0
|   |   |         `-CXXThisExpr 0x5576f27a72e0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5576f27a73d8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f27a73b8 <col:48> 'int' 0
|   |   `-CallExpr 0x5576f27a75e8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5576f27a75d0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f27a75b0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f27a7628 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f27a7448 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5576f27a7640 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f27a7468 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5576f27a7658 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f27a74a0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5576f27a7670 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f27a7598 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f27a7580 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f27a7538 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5576f27a7750 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5576f27a76e8 <col:9> 'Router *' lvalue ->_router 0x5576f27a51d0
|   | | `-CXXThisExpr 0x5576f27a76d8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5576f27a7738 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5576f27a7718 <col:19> 'Router *' lvalue ParmVar 0x5576f2799d68 'r' 'Router *'
|   `-BinaryOperator 0x5576f27a77e8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5576f27a7780 <col:9> 'int' lvalue ->_eindex 0x5576f27a5238
|     | `-CXXThisExpr 0x5576f27a7770 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5576f27a77d0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5576f27a77b0 <col:19> 'int' lvalue ParmVar 0x5576f2799de8 'eindex' 'int'
|-CXXMethodDecl 0x5576f279a040 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5576f2799f78 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5576f279a110 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5576f279a1d8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5576f279a278 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5576f279a4c8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5576f279a340 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5576f279a3c0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5576f279a578 <col:20>
| `-OptimizeNoneAttr 0x5576f279a5d0 <col:30>
|-CXXMethodDecl 0x5576f279a6d8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5576f279a610 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5576f279a780 <col:20>
| `-OptimizeNoneAttr 0x5576f279a7d8 <col:30>
|-CXXMethodDecl 0x5576f279a8a8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5576f279a818 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5576f279a950 <col:20>
| `-OptimizeNoneAttr 0x5576f279a9a8 <col:30>
|-CXXMethodDecl 0x5576f279ab38 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5576f279a9e0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5576f279aa60 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5576f279acc8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5576f279ac00 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5576f279ae18 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5576f279ad88 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5576f279af68 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5576f279aed8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5576f279b0b8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5576f279b028 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5576f279b378 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5576f279b170 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5576f279b1f0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5576f279b298 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5576f279b450 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5576f279b510 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5576f279b7e0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5576f279b690 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5576f279b708 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5576f279b908 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5576f279bae0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5576f279b9c0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5576f279ba40 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5576f279bcc8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5576f279bba8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5576f279bc28 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5576f279c038 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5576f279bd88 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5576f279be00 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5576f279be80 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5576f27a6df0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5576f27a6dd0 <col:106> 'int' 0
| `-ParmVarDecl 0x5576f279bef8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576f27a6e28 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576f27a6e08 <col:126> 'int' 0
|-CXXMethodDecl 0x5576f279c3d8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5576f279c108 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5576f279c1a0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5576f279c220 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5576f279c298 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576f27a6e60 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576f27a6e40 <col:114> 'int' 0
|-CXXMethodDecl 0x5576f279c768 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5576f279c4b0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5576f279c528 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5576f279c5a8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5576f27a6e78 <col:96> 'int' 0
| `-ParmVarDecl 0x5576f279c620 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576f27a6eb8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576f27a6e98 <col:116> 'int' 0
|-CXXMethodDecl 0x5576f279cae8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5576f279c838 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5576f279c8b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f279c930 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5576f27a6ef0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5576f27a6ed0 <col:109> 'int' 0
| `-ParmVarDecl 0x5576f279c9a8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576f27a6f28 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576f27a6f08 <col:129> 'int' 0
|-CXXMethodDecl 0x5576f279ce68 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5576f279cbb8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5576f279cc30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f279ccb0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5576f279cd28 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576f27a6f60 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576f27a6f40 <col:117> 'int' 0
|-CXXMethodDecl 0x5576f279d1f8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5576f279cf40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279cfb8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f279d038 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5576f27a6f78 <col:99> 'int' 0
| `-ParmVarDecl 0x5576f279d0b0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5576f27a6fb8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5576f27a6f98 <col:119> 'int' 0
|-CXXMethodDecl 0x5576f279d618 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5576f279d2c8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5576f279d348 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5576f279d3c0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f279d440 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5576f27a6ff0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5576f27a6fd0 <col:108> 'int' 0
| `-ParmVarDecl 0x5576f279d4c0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5576f27a7028 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5576f27a7008 <col:141> 'int' 0
|-CXXMethodDecl 0x5576f279da38 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5576f279d6f0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5576f279d770 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5576f279d7e8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f279d868 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5576f279d8e8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5576f27a7040 <col:121> 'int' 0
|-CXXMethodDecl 0x5576f279de68 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5576f279db18 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5576f279db98 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5576f279dc10 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f279dc90 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5576f27a7060 <col:98> 'int' 0
| `-ParmVarDecl 0x5576f279dd10 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5576f27a7080 <col:123> 'int' 0
|-CXXMethodDecl 0x5576f279e130 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5576f279df40 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5576f279dfc0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5576f279e040 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5576f27a70a0 <col:80> 'int' 0
|-EnumDecl 0x5576f279e1e8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5576f279e2f0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576f279e580 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f279e2d0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5576f279e2b0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5576f279e380 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576f279e598 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f279e360 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5576f279e340 <col:40> 'int' 2
| |-EnumConstantDecl 0x5576f279e410 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576f279e5b0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f279e3f0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5576f279e3d0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5576f279e4a0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5576f279e5c8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f279e480 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5576f279e460 <col:36> 'int' 7
| `-EnumConstantDecl 0x5576f279e530 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5576f279e5e0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f279e510 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5576f279e4f0 <col:34> 'int' 6
|-CXXMethodDecl 0x5576f279e898 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5576f279e608 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5576f279e6a8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5576f279e728 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5576f279e7a0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5576f27a7158 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5576f27a7140 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5576f27a7128 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5576f27a7108 <col:98, col:105> 'String' (CXXTemporary 0x5576f27a7108)
|           `-CXXTemporaryObjectExpr 0x5576f27a70d0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5576f279eb38 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5576f279e968 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5576f279e9e0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5576f279ea58 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5576f27a7208 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5576f27a71f0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5576f27a71d8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5576f27a71b8 <col:94, col:101> 'String' (CXXTemporary 0x5576f27a71b8)
| |         `-CXXTemporaryObjectExpr 0x5576f27a7180 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5576f27a79f0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5576f27a7968 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5576f27a7938 <col:9> '<bound member function type>' ->add_task_handlers 0x5576f279e898
|     | `-CXXThisExpr 0x5576f27a7928 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5576f27a79a8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576f27a78a8 <col:27> 'Task *' lvalue ParmVar 0x5576f279e968 'task' 'Task *'
|     |-ImplicitCastExpr 0x5576f27a79c0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576f27a78c8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5576f279e9e0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5576f27a79d8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5576f27a78e8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5576f279e530 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5576f27a7908 <col:62> 'const String' lvalue ParmVar 0x5576f279ea58 'prefix' 'const String &'
|-CXXMethodDecl 0x5576f279ed48 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5576f279ec00 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5576f279ec78 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5576f27a72b8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5576f27a72a0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5576f27a7288 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5576f27a7268 <col:70, col:77> 'String' (CXXTemporary 0x5576f27a7268)
| |         `-CXXTemporaryObjectExpr 0x5576f27a7230 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5576f27a7bc8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5576f27a7b40 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5576f27a7b10 <col:9> '<bound member function type>' ->add_task_handlers 0x5576f279e898
|     | `-CXXThisExpr 0x5576f27a7b00 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5576f27a7b80 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576f27a7a80 <col:27> 'Task *' lvalue ParmVar 0x5576f279ec00 'task' 'Task *'
|     |-ImplicitCastExpr 0x5576f27a7b98 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5576f27a7aa0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5576f27a7bb0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5576f27a7ac0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5576f279e530 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5576f27a7ae0 <col:57> 'const String' lvalue ParmVar 0x5576f279ec78 'prefix' 'const String &'
|-CXXMethodDecl 0x5576f279f028 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5576f279ee10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279ee90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f279ef08 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5576f279f2d8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5576f279f0f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279f178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f279f1f8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5576f279f5c8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5576f279f3a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279f428 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f279f4a0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5576f279f878 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5576f279f698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279f718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f279f798 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5576f279fb28 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5576f279f948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279f9c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f279fa48 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5576f279fdd8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5576f279fbf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279fc78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f279fcf0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5576f27a0088 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5576f279fea8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f279ff28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f279ffa8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5576f27a0398 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5576f27a01b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a0230 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f27a02b0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5576f27a0678 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5576f27a0468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a04e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f27a0590 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5576f27a0958 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5576f27a0748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a07c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f27a0870 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5576f27a0bc0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5576f27a0a28 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5576f27a0aa8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5576f27a0b20 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5576f27a0e68 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5576f27a0c90 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5576f27a0d10 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5576f27a0d88 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5576f27a1118 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5576f27a0f38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a0fb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f27a1038 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5576f27a13c8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5576f27a11e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a1268 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f27a12e0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5576f27a1678 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5576f27a1498 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a1518 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f27a1590 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5576f27a1948 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5576f27a1748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a17c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5576f27a1868 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5576f27a1c78 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5576f27a1a18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5576f27a1a98 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5576f27a1b10 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5576f27a1b88 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576f27a72d0 <col:93> 'bool' false
|-CXXMethodDecl 0x5576f27a1e60 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5576f27a1d48 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5576f27a1dc8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5576f27a2038 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5576f27a1f20 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5576f27a1fa0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5576f27a2318 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5576f27a20f8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5576f27a2170 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5576f27a21f0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5576f27a2268 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5576f27a2608 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5576f27a23e8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5576f27a2460 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5576f27a24e0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5576f27a2558 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5576f27a2840 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5576f27a26e0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5576f27a2760 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5576f27a2a28 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5576f27a2908 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5576f27a2988 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5576f27a2ad8 prev 0x5576f279a278 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576f27a2bd0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5576f27a2c60 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5576f27a2cd8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5576f27a2d98 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5576f27a2e60 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5576f27a2fd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5576f27a2f10 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5576f27a3080 <col:24>
| | `-OptimizeNoneAttr 0x5576f27a30d8 <col:34>
| |-CXXMethodDecl 0x5576f27a3120 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5576f27a33d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5576f27a31d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5576f27a3248 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5576f27a32c8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5576f27a3490 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5576f27a34c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5576f27a3530 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5576f27a35b8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5576f27a38d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5576f27a3670 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5576f27a36e8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5576f27a3760 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5576f27a37e0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5576f27a39f0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5576f27ab368 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5576f27ab368
| | `-ParmVarDecl 0x5576f27ab478 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5576f27ab518 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5576f27ab518
| | `-ParmVarDecl 0x5576f27ab628 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5576f287b8e8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5576f27a3a68 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5576f27a3b08 <col:38> "" ""
|-CXXMethodDecl 0x5576f27a3b98 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5576f27a3c38 <col:44> "" ""
|-AccessSpecDecl 0x5576f27a3ca8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5576f27a3cd0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5576f27a3dd0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5576f27a3e20 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f27a3db0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5576f27a3d90 <col:27> 'int' 4
|-FieldDecl 0x5576f27a3ed8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5576f27a4088 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5576f27a4140 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5576f27a51d0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5576f27a5238 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5576f27a5388 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5576f27a52c8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5576f27a5538 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5576f27a5448 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5576f27a5718 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5576f27a55f8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5576f27a5678 <col:25> col:28 'int'
|-CXXMethodDecl 0x5576f27a59c0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5576f27a57e0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5576f27a5860 <col:28> col:31 'int'
| `-ParmVarDecl 0x5576f27a58d8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5576f27a5a78 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5576f27a5b40 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5576f27a5b90 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5576f27a5be0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5576f27a5dc0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5576f27a5c70 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5576f27a5ce8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576f27a6068 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5576f27a5e88 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5576f27a5f08 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5576f27a5f80 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5576f27a6288 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5576f27a6138 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5576f27a61b8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5576f27a65c0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5576f27a6348 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5576f27a63c8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5576f27a6440 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5576f27a64c0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5576f27a67a8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5576f27a6690 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5576f27a6710 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5576f27a68f8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5576f27a6868 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5576f27a6c78 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5576f27a69b8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5576f27a6a38 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5576f27a6ab0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5576f27a6b30 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5576f27a6d90 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class TruncateIPPayload
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _nbytes
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f27ae4d8 <../elements/ip/truncateippayload.hh:30:1, line:46:1> line:30:7 class TruncateIPPayload definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5576f27ae638 <col:1, col:7> col:7 implicit referenced class TruncateIPPayload
|-AccessSpecDecl 0x5576f27ae6c8 <col:44, col:50> col:44 public
|-CXXConstructorDecl 0x5576f27ae750 <line:32:5, col:23> col:5 TruncateIPPayload 'void ()'
|-CXXDestructorDecl 0x5576f27ae840 <line:33:5, col:24> col:5 ~TruncateIPPayload 'void ()' noexcept-unevaluated 0x5576f27ae840
| `-Overrides: [ 0x5576f2795dc8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5576f27ae970 <line:35:5, col:66> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5576f2797228 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5576f27af350 <col:36, col:66>
|   `-ReturnStmt 0x5576f27af340 <col:38, col:45>
|     `-ImplicitCastExpr 0x5576f27af328 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5576f27af2f8 <col:45> 'const char [18]' lvalue "TruncateIPPayload"
|-CXXMethodDecl 0x5576f27aea38 <line:36:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5576f27972f0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5576f27af3b0 <col:36, col:56>
|   `-ReturnStmt 0x5576f27af3a0 <col:38, col:45>
|     `-ImplicitCastExpr 0x5576f27af388 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5576f27af368 <col:45> 'const char []' lvalue Var 0x5576f27975a0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5576f27aed10 <line:38:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5576f2798ac0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5576f27aebc0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5576f27aec38 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5576f27aee60 <line:40:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5576f2796408 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5576f27aedd0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x5576f27aef08 <line:42:3, col:10> col:3 private
|-FieldDecl 0x5576f27aef48 <line:44:5, col:14> col:14 _nbytes 'unsigned int'
|-CXXConstructorDecl 0x5576f27aefc8 <line:30:7> col:7 implicit TruncateIPPayload 'void (const TruncateIPPayload &)' inline default_delete noexcept-unevaluated 0x5576f27aefc8
| `-ParmVarDecl 0x5576f27af0d8 <col:7> col:7 'const TruncateIPPayload &'
`-CXXMethodDecl 0x5576f27af178 <col:7> col:7 implicit operator= 'TruncateIPPayload &(const TruncateIPPayload &)' inline default_delete noexcept-unevaluated 0x5576f27af178
  `-ParmVarDecl 0x5576f27af288 <col:7> col:7 'const TruncateIPPayload &'

Layout: <CGRecordLayout
  LLVMType:%class.TruncateIPPayload = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.TruncateIPPayload = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2569990 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5576f2569aa8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5576f2569b48 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5576f2569ba8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5576f2569c08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5576f2569cb8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2569fc0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f256a0d8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5576f256a180 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5576f256a1e8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5576f256a278 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5576f2570310 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576f2570748 <col:12>
|-CXXConstructorDecl 0x5576f2570418 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f2570528 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5576f256a180 'data' 'const char *'
| | `-ImplicitCastExpr 0x5576f2572cd0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5576f2572ca0 <col:12> 'const char *const' lvalue .data 0x5576f256a180
| |     `-DeclRefExpr 0x5576f2572c80 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2570528 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5576f256a1e8 'length' 'int'
| | `-ImplicitCastExpr 0x5576f2572d60 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5576f2572d30 <col:12> 'const int' lvalue .length 0x5576f256a1e8
| |     `-DeclRefExpr 0x5576f2572d10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2570528 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5576f256a278 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5576f2572df0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5576f2572dc0 <col:12> 'String::memo_t *const' lvalue .memo 0x5576f256a278
| |     `-DeclRefExpr 0x5576f2572da0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2570528 '' 'const String::rep_t &'
| `-CompoundStmt 0x5576f2572e48 <col:12>
|-CXXConstructorDecl 0x5576f25705c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5576f25705c8
| `-ParmVarDecl 0x5576f25706d8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5576f2575c30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5576f2581648 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f2581758 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5576f2581c70 <col:12>
|   |-BinaryOperator 0x5576f2581a88 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5576f2581a40 <col:12> 'const char *' lvalue ->data 0x5576f256a180
|   | | `-CXXThisExpr 0x5576f2581a30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5576f2581a70 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5576f2581a00 <col:12> 'const char *const' lvalue .data 0x5576f256a180
|   |     `-DeclRefExpr 0x5576f25819e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2581758 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5576f2581b50 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5576f2581b08 <col:12> 'int' lvalue ->length 0x5576f256a1e8
|   | | `-CXXThisExpr 0x5576f2581af8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5576f2581b38 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5576f2581ac8 <col:12> 'const int' lvalue .length 0x5576f256a1e8
|   |     `-DeclRefExpr 0x5576f2581aa8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2581758 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5576f2581c18 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5576f2581bd0 <col:12> 'String::memo_t *' lvalue ->memo 0x5576f256a278
|   | | `-CXXThisExpr 0x5576f2581bc0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5576f2581c00 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5576f2581b90 <col:12> 'String::memo_t *const' lvalue .memo 0x5576f256a278
|   |     `-DeclRefExpr 0x5576f2581b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2581758 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5576f2581c60 <col:12>
|     `-UnaryOperator 0x5576f2581c48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f2581c38 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5576f25817c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5576f25817c8
  `-ParmVarDecl 0x5576f25818d8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2560f00 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576f2561018 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5576f25610a8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5576f25610e8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5576f2234dc0 'const char *'
|   `-QualType 0x5576f2234311 'const char' const
|     `-BuiltinType 0x5576f2234310 'char'
|-TypedefDecl 0x5576f2561170 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5576f2561140 'String::const_iterator' sugar
|   |-Typedef 0x5576f25610e8 'const_iterator'
|   `-PointerType 0x5576f2234dc0 'const char *'
|     `-QualType 0x5576f2234311 'const char' const
|       `-BuiltinType 0x5576f2234310 'char'
|-TypedefDecl 0x5576f25612e0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5576f2561250 'int (String::*)() const'
|   |-RecordType 0x5576f2560f90 'String'
|   | `-CXXRecord 0x5576f2560f00 'String'
|   `-ParenType 0x5576f25611f0 'int () const' sugar
|     `-FunctionProtoType 0x5576f2534d80 'int () const' const cdecl
|       `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f2561348 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5576f2389960 'int64_t' sugar
|   |-Typedef 0x5576f229d2d0 'int64_t'
|   `-TypedefType 0x5576f22764d0 '__int64_t' sugar
|     |-Typedef 0x5576f22760a8 '__int64_t'
|     `-BuiltinType 0x5576f2234390 'long'
|-TypedefDecl 0x5576f25613b0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5576f2389880 'uint64_t' sugar
|   |-Typedef 0x5576f229d470 'uint64_t'
|   `-TypedefType 0x5576f2276560 '__uint64_t' sugar
|     |-Typedef 0x5576f2276118 '__uint64_t'
|     `-BuiltinType 0x5576f2234430 'unsigned long'
|-TypedefDecl 0x5576f2561440 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5576f2561410 'String::intmax_t' sugar
|   |-Typedef 0x5576f2561348 'intmax_t'
|   `-TypedefType 0x5576f2389960 'int64_t' sugar
|     |-Typedef 0x5576f229d2d0 'int64_t'
|     `-TypedefType 0x5576f22764d0 '__int64_t' sugar
|       |-Typedef 0x5576f22760a8 '__int64_t'
|       `-BuiltinType 0x5576f2234390 'long'
|-TypedefDecl 0x5576f25614d0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5576f25614a0 'String::uintmax_t' sugar
|   |-Typedef 0x5576f25613b0 'uintmax_t'
|   `-TypedefType 0x5576f2389880 'uint64_t' sugar
|     |-Typedef 0x5576f229d470 'uint64_t'
|     `-TypedefType 0x5576f2276560 '__uint64_t' sugar
|       |-Typedef 0x5576f2276118 '__uint64_t'
|       `-BuiltinType 0x5576f2234430 'unsigned long'
|-CXXConstructorDecl 0x5576f2561590 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5576f2561738 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5576f2561678 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5576f25618e8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5576f2561828 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5576f2561a40 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5576f25619b0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5576f2561c58 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5576f2561b08 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5576f2561b88 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5576f2561e78 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5576f2561d28 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5576f2561da8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5576f2562098 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5576f2561f48 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5576f2561fc8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5576f25622b8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5576f2562168 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5576f25621e8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5576f2562448 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5576f2562380 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5576f25625c8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5576f2562508 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5576f2562758 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5576f2562690 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5576f25628b0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5576f2562820 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5576f2562a08 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5576f2562978 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5576f2562b60 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5576f2562ad0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5576f2562ce8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5576f2562c28 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5576f2562e78 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5576f2562db0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5576f2563008 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5576f2562f40 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5576f2563198 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5576f25630d0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5576f2563290 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5576f25633b8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5576f2563538 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5576f2563470 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5576f2563688 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5576f25635f8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5576f2563740 <col:63> "" ""
|-CXXMethodDecl 0x5576f2563888 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5576f25637c8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5576f2563a98 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5576f2563948 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5576f25639c8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5576f2563cb8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5576f2563b60 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5576f2563be0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5576f2563f98 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5576f2563d78 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5576f2563df8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5576f256fde0 <col:55> 'int' 10
| `-ParmVarDecl 0x5576f2563e70 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576f256fe00 <col:76> 'bool' true
|-CXXMethodDecl 0x5576f2564278 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5576f2564060 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5576f25640e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5576f256fe10 <col:56> 'int' 10
| `-ParmVarDecl 0x5576f2564158 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576f256fe30 <col:77> 'bool' true
|-CXXMethodDecl 0x5576f2564380 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5576f2564448 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5576f2564510 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5576f25645b0 <col:20>
| `-OptimizeNoneAttr 0x5576f2564608 <col:30>
|-CXXConversionDecl 0x5576f25646f8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5576f25647c8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5576f2564888 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5576f2564978 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5576f2564a38 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5576f2564bb8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5576f2564af0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5576f2564d08 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5576f2564c78 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5576f2564df8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5576f2564eb8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5576f2565108 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5576f2564f70 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5576f2564ff0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5576f2565368 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5576f25651d0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5576f2565250 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5576f2565438 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f2565648 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5576f25654f0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5576f2565570 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5576f2565868 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5576f2565710 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5576f2565790 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5576f25659f8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5576f2565930 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5576f2565ae8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5576f2565c58 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5576f2565b98 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5576f2565e68 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5576f2565d18 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5576f2565d98 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5576f2566080 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5576f2565f28 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5576f2565fa0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5576f2566210 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5576f2566140 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5576f2566430 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5576f25662d0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5576f2566350 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5576f2566580 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5576f25664f0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5576f2566758 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5576f2566640 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5576f25666c0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5576f25668a8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5576f2566818 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5576f2566ac0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5576f2566960 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5576f25669e0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5576f256fe40 <col:39> 'int' 0
|-CXXMethodDecl 0x5576f2566ce0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5576f2566b80 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5576f2566c00 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5576f256fe60 <col:48> 'int' 0
|-CXXMethodDecl 0x5576f2566ec0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5576f2566da0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5576f2566e20 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5576f256fe80 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5576f2566f90 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5576f2567050 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5576f2567110 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5576f25671d0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5576f2567290 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5576f2567438 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5576f2567340 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5576f25675b8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5576f25674f0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5576f2567790 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5576f2567678 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5576f2567908 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5576f2567848 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5576f2567a50 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5576f25679c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5576f2567ba0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5576f2567b10 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5576f2567d78 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5576f2567c60 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5576f2567ce0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5576f2567f58 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5576f2567e40 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5576f2567ec0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5576f25680a8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5576f2568018 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5576f25682b8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5576f2568168 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5576f25681e8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5576f2568418 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5576f2568380 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5576f2568570 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5576f25684d8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5576f2568618 <col:57> "" ""
|-CXXMethodDecl 0x5576f2568728 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5576f2568698 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5576f2568878 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5576f25687e8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5576f25689f8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5576f2568930 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5576f2568ac0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5576f2568b80 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5576f2568c40 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5576f2568ce0 <col:49> "" ""
|-CXXMethodDecl 0x5576f2568d70 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5576f2568e30 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5576f2568f20 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5576f2568fe8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5576f25690a8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5576f2569168 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5576f2569260 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5576f2569328 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5576f25693f0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5576f25695c8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5576f25694a8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5576f2569528 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5576f25697f0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5576f2569690 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5576f2569710 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5576f2569900 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5576f2569968 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5576f2569990 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5576f2569aa8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5576f2569b48 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5576f2569ba8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5576f2569c08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5576f2569cb8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5576f2569d20 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5576f2569f58 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5576f2569fa8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f2569f38 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5576f2569e48 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5576f2569df0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5576f2569e30 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5576f2569e10 <col:32> 'int' 8
|-CXXRecordDecl 0x5576f2569fc0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576f256a0d8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5576f256a180 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5576f256a1e8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5576f256a278 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5576f2570310 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5576f2570748 <col:12>
| |-CXXConstructorDecl 0x5576f2570418 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5576f2570528 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5576f256a180 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5576f2572cd0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5576f2572ca0 <col:12> 'const char *const' lvalue .data 0x5576f256a180
| | |     `-DeclRefExpr 0x5576f2572c80 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2570528 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5576f256a1e8 'length' 'int'
| | | `-ImplicitCastExpr 0x5576f2572d60 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5576f2572d30 <col:12> 'const int' lvalue .length 0x5576f256a1e8
| | |     `-DeclRefExpr 0x5576f2572d10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2570528 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5576f256a278 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5576f2572df0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5576f2572dc0 <col:12> 'String::memo_t *const' lvalue .memo 0x5576f256a278
| | |     `-DeclRefExpr 0x5576f2572da0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2570528 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5576f2572e48 <col:12>
| |-CXXConstructorDecl 0x5576f25705c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5576f25705c8
| | `-ParmVarDecl 0x5576f25706d8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5576f2575c30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5576f2581648 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5576f2581758 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5576f2581c70 <col:12>
| |   |-BinaryOperator 0x5576f2581a88 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5576f2581a40 <col:12> 'const char *' lvalue ->data 0x5576f256a180
| |   | | `-CXXThisExpr 0x5576f2581a30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5576f2581a70 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5576f2581a00 <col:12> 'const char *const' lvalue .data 0x5576f256a180
| |   |     `-DeclRefExpr 0x5576f25819e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2581758 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5576f2581b50 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5576f2581b08 <col:12> 'int' lvalue ->length 0x5576f256a1e8
| |   | | `-CXXThisExpr 0x5576f2581af8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5576f2581b38 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5576f2581ac8 <col:12> 'const int' lvalue .length 0x5576f256a1e8
| |   |     `-DeclRefExpr 0x5576f2581aa8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2581758 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5576f2581c18 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5576f2581bd0 <col:12> 'String::memo_t *' lvalue ->memo 0x5576f256a278
| |   | | `-CXXThisExpr 0x5576f2581bc0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5576f2581c00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5576f2581b90 <col:12> 'String::memo_t *const' lvalue .memo 0x5576f256a278
| |   |     `-DeclRefExpr 0x5576f2581b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576f2581758 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5576f2581c60 <col:12>
| |     `-UnaryOperator 0x5576f2581c48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5576f2581c38 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5576f25817c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5576f25817c8
|   `-ParmVarDecl 0x5576f25818d8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5576f256a2f0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5576f256a538 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5576f256a358 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5576f256a3d8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5576f256a450 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5576f25702d0 <col:79, line:261:5>
|   |-BinaryOperator 0x5576f256ff48 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5576f256fee0 <col:2, col:5> 'const char *' lvalue .data 0x5576f256a180
|   | | `-MemberExpr 0x5576f256feb0 <col:2> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|   | |   `-CXXThisExpr 0x5576f256fea0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5576f256ff30 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5576f256ff10 <col:12> 'const char *' lvalue ParmVar 0x5576f256a358 'data' 'const char *'
|   |-BinaryOperator 0x5576f2570010 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5576f256ffa8 <col:2, col:5> 'int' lvalue .length 0x5576f256a1e8
|   | | `-MemberExpr 0x5576f256ff78 <col:2> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|   | |   `-CXXThisExpr 0x5576f256ff68 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5576f256fff8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5576f256ffd8 <col:14> 'int' lvalue ParmVar 0x5576f256a3d8 'length' 'int'
|   `-IfStmt 0x5576f25702b8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5576f2570130 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5576f2570118 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5576f25700f8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5576f25700d8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5576f2570070 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5576f256a278
|     |       | `-MemberExpr 0x5576f2570040 <col:7> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|     |       |   `-CXXThisExpr 0x5576f2570030 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5576f25700c0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576f25700a0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5576f256a450 'memo' 'String::memo_t *'
|     `-CallExpr 0x5576f2570290 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5576f2570278 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5576f2570180 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5576f2558f68 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5576f25701e8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5576f2569b48
|         `-ImplicitCastExpr 0x5576f25701d0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5576f25701b0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5576f256a450 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5576f256a7e8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5576f256a608 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5576f256a688 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5576f256a700 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5576f256a2f0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5576f2570758 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5576f25708e8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5576f2570850 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5576f25707c0 <col:2> '<bound member function type>' ->assign_memo 0x5576f256a538
|     | `-ImplicitCastExpr 0x5576f2570888 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5576f25707b0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5576f25708a0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576f25707f0 <col:14> 'const char *' lvalue ParmVar 0x5576f256a608 'data' 'const char *'
|     |-ImplicitCastExpr 0x5576f25708b8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5576f2570810 <col:20> 'int' lvalue ParmVar 0x5576f256a688 'length' 'int'
|     `-ImplicitCastExpr 0x5576f25708d0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5576f2570830 <col:28> 'String::memo_t *' lvalue ParmVar 0x5576f256a700 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5576f256a978 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5576f256a8b8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5576f2570b40 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5576f2570ac0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5576f2570910 <col:2> '<bound member function type>' ->assign_memo 0x5576f256a538
|     | `-CXXThisExpr 0x5576f2570900 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5576f2570af8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5576f2570990 <col:14, col:19> 'const char *' lvalue .data 0x5576f256a180
|     |   `-MemberExpr 0x5576f2570960 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5576f256a2f0
|     |     `-DeclRefExpr 0x5576f2570940 <col:14> 'const String' lvalue ParmVar 0x5576f256a8b8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5576f2570b10 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5576f2570a10 <col:25, col:30> 'int' lvalue .length 0x5576f256a1e8
|     |   `-MemberExpr 0x5576f25709e0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5576f256a2f0
|     |     `-DeclRefExpr 0x5576f25709c0 <col:25> 'const String' lvalue ParmVar 0x5576f256a8b8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5576f2570b28 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5576f2570a90 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5576f256a278
|         `-MemberExpr 0x5576f2570a60 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5576f256a2f0
|           `-DeclRefExpr 0x5576f2570a40 <col:38> 'const String' lvalue ParmVar 0x5576f256a8b8 'x' 'const String &'
|-CXXMethodDecl 0x5576f256aa40 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5576f2571500 <col:31, line:278:5>
|   `-IfStmt 0x5576f25714e8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5576f2570be0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5576f2570bc8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5576f2570b98 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5576f256a278
|     |     `-MemberExpr 0x5576f2570b68 <col:6> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|     |       `-CXXThisExpr 0x5576f2570b58 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5576f25714c0 <col:15, line:277:2>
|       |-ParenExpr 0x5576f2571090 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5576f2571060 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5576f2570cf0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5576f2570cd8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5576f2570cc0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5576f2570c80 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5576f2569b48
|       |   |       `-ImplicitCastExpr 0x5576f2570c68 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5576f2570c38 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5576f256a278
|       |   |           `-MemberExpr 0x5576f2570c08 <col:27> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|       |   |             `-CXXThisExpr 0x5576f2570bf8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5576f2570d50 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5576f2570d30 <col:54> 'int' 0
|       |   `-CallExpr 0x5576f2570fc0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5576f2570fa8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5576f2570f28 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5576f2571000 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5576f2570e38 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5576f2571018 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5576f2570e68 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5576f2571030 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5576f2570ea0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5576f2571048 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5576f2570f10 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5576f2570ef8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5576f2570ec0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5576f25713e0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5576f25712a0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5576f2571288 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5576f2571200 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5576f255a3b0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5576f25711d0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5576f2569b48
|       | |   `-ImplicitCastExpr 0x5576f25711b8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5576f2571188 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5576f256a278
|       | |       `-MemberExpr 0x5576f2571158 <col:40> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|       | |         `-CXXThisExpr 0x5576f2571148 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5576f25713a0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5576f2571388 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5576f25712c8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5576f256f220 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5576f25713c8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5576f2571328 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5576f256a278
|       |       `-MemberExpr 0x5576f25712f8 <col:15> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|       |         `-CXXThisExpr 0x5576f25712e8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5576f25714a0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5576f2571438 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5576f256a278
|         | `-MemberExpr 0x5576f2571408 <col:6> 'String::rep_t' lvalue ->_r 0x5576f256a2f0
|         |   `-CXXThisExpr 0x5576f25713f8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5576f2571488 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5576f2571468 <col:16> 'int' 0
|-CXXMethodDecl 0x5576f256acd8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5576f256aaf8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5576f256ab78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5576f256abf0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5576f256adb0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5576f256b000 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5576f256ae68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5576f256aee8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5576f256af60 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5576f256b1e8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5576f256b0d0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5576f256b150 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5576f256b2e8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5576f25715d8 <col:41, line:286:5>
|   `-ReturnStmt 0x5576f25715c8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5576f2571598 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5576f2571560 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5576f2571548 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5576f2571528 <col:46> 'int' 1
|-CXXMethodDecl 0x5576f256b588 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5576f256b3a0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5576f256b420 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5576f256b4a0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5576f256f220 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5576f256b650 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5576f256f2f0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5576f256f4c0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5576f256f3a8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5576f256f428 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5576f256f580 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5576f256f648 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5576f256f748 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5576f256f7c0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5576f256f838 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5576f256f8a0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5576f256f9a0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5576f256f9f0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f256f980 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5576f256f960 <col:22> 'int' 14
|-CXXMethodDecl 0x5576f256fc08 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5576f256fa20 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5576f256faa0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5576f256fb20 <col:43> col:46 'int'
|-FriendDecl 0x5576f256fd10 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5576f256fda0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576f27dd180 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5576f27dd358 prev 0x5576f27dd180 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5576f27dd3e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5576f27dd410 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f27ded70 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5576f27ded20 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5576f27ded00 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5576f27dd628 'type'
|     `-SubstTemplateTypeParmType 0x5576f27dd5f0 'String' sugar
|       |-TemplateTypeParmType 0x5576f25247a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2524750 'T'
|       `-RecordType 0x5576f2560f90 'String'
|         `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27dee28 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5576f27dedf0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5576f27dedd0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5576f27ded70 'type'
|     `-ElaboratedType 0x5576f27ded20 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5576f27ded00 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5576f27dd628 'type'
|         `-SubstTemplateTypeParmType 0x5576f27dd5f0 'String' sugar
|           |-TemplateTypeParmType 0x5576f25247a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5576f2524750 'T'
|           `-RecordType 0x5576f2560f90 'String'
|             `-CXXRecord 0x5576f2560f00 'String'
|-CXXMethodDecl 0x5576f27defa8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5576f27deeb8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5576f27df098 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5576f27df178 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5576f27df178
|-CXXMethodDecl 0x5576f27df448 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5576f27df350 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5576f27df688 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576f27df500 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576f27df578 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576f27df858 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576f27df748 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576f27df7c0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576f27df9b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5576f27dfa88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5576f27dfcd8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576f27dfb48 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5576f27dfbc0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576f27e3f78 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5576f27dfda8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5576f27dfe20 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576f27e4138 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5576f27e4048 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576f27e42f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5576f27e4200 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576f27e43b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576f27e4460 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5576f27e4698 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576f27e4510 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576f27e4588 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576f27e4938 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5576f27e4840 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5576f27e4a00 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5576f27e4a50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5576f27e4aa0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576f2798730 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5576f27dbbe8 prev 0x5576f2798730 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5576f27dd0f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5576f27dd0a0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5576f27dd080 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5576f27dcf30 'type'
|     `-SubstTemplateTypeParmType 0x5576f27dcdc0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5576f24fa550 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5576f24fa4f8 'F'
|       `-RecordType 0x5576f27dca20 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5576f27dc940 'typed_array_memory'
|-FieldDecl 0x5576f27e4af0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5576f27e4b40 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5576f27e4b78 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|   |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5576f2531a68 'T'
|   `-RecordType 0x5576f2560f90 'String'
|     `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e4c08 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5576f27e4bd0 'String &'
|   `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|     |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5576f2531a68 'T'
|     `-RecordType 0x5576f2560f90 'String'
|       `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e4c98 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5576f27e4c60 'const String &'
|   `-QualType 0x5576f27dbc81 'const String' const
|     `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-RecordType 0x5576f2560f90 'String'
|         `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e4d28 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5576f27e4cf0 'String *'
|   `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|     |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5576f2531a68 'T'
|     `-RecordType 0x5576f2560f90 'String'
|       `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e4db8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5576f27e4d80 'const String *'
|   `-QualType 0x5576f27dbc81 'const String' const
|     `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-RecordType 0x5576f2560f90 'String'
|         `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e5a10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5576f27e59c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5576f27e59a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5576f27e58d8 'type'
|     `-LValueReferenceType 0x5576f27e58a0 'const String &'
|       `-QualType 0x5576f27e5641 'const String' const
|         `-SubstTemplateTypeParmType 0x5576f27e5640 'String' sugar
|           |-TemplateTypeParmType 0x5576f25044a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5576f2504448 'T'
|           `-RecordType 0x5576f2560f90 'String'
|             `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e5a78 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5576f27e4c60 'const String &'
|   `-QualType 0x5576f27dbc81 'const String' const
|     `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-RecordType 0x5576f2560f90 'String'
|         `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e5ad0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f27e5b38 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5576f27e4cf0 'String *'
|   `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|     |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5576f2531a68 'T'
|     `-RecordType 0x5576f2560f90 'String'
|       `-CXXRecord 0x5576f2560f00 'String'
|-TypedefDecl 0x5576f27e5ba0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5576f27e4d80 'const String *'
|   `-QualType 0x5576f27dbc81 'const String' const
|     `-SubstTemplateTypeParmType 0x5576f27dbc80 'String' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-RecordType 0x5576f2560f90 'String'
|         `-CXXRecord 0x5576f2560f00 'String'
|-EnumDecl 0x5576f27e5bf8 <line:134:5> col:5
| `-EnumConstantDecl 0x5576f27e5cf0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5576f27e5cd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5576f2533148 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5576f2533120 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5576f2533100 <col:40> 'int' 1
|-CXXConstructorDecl 0x5576f27e5d78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5576f27e6008 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f27e5e30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576f27e5ed0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5576f27e6298 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5576f27e6180 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5576f27e6558 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5576f27e6440 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5576f27e6870 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5576f27e6750 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5576f27e6b80 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5576f27e6a60 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5576f27e6e70 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f27e6cb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576f27e6d30 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576f27e6f98 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5576f27e7048 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f27e70a0 <col:30> Inherited
|-CXXMethodDecl 0x5576f27e70e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5576f27e7198 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f27e71f0 <col:30> Inherited
|-CXXMethodDecl 0x5576f27e72b8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576f27e7368 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f27e73c0 <col:30> Inherited
|-CXXMethodDecl 0x5576f27e7408 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576f27e74b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f27e7510 <col:30> Inherited
|-CXXMethodDecl 0x5576f27e7558 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576f27e7608 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f27e7660 <col:30> Inherited
|-CXXMethodDecl 0x5576f27e76a8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576f27e7758 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f27e77b0 <col:30> Inherited
|-CXXMethodDecl 0x5576f27e77d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576f27e7888 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576f27e7938 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5576f27e7af8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f27e79e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576f27e7a60 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576f27e7c48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5576f27e7bb8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f27e7df8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5576f27e7d00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576f27e7eb0 <col:20>
| `-OptimizeNoneAttr 0x5576f27e7f08 <col:30>
|-CXXMethodDecl 0x5576f27e8028 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5576f27e7f30 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576f27e80e0 <col:20>
| `-OptimizeNoneAttr 0x5576f27e8138 <col:30>
|-CXXMethodDecl 0x5576f27e81f0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576f27e8160 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f27e8338 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576f27e82a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f27e8468 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5576f27e8568 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5576f27e8638 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5576f27e8708 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5576f27e8848 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576f27e87b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f27e8990 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576f27e8900 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f27e8ad8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5576f27e8a48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576f27e8b90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5576f27e8c90 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5576f27e8c00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576f27e8d48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5576f27e8e08 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5576f27e8f08 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5576f27e9088 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5576f27e8fc8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5576f27e9848 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5576f27e9140 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5576f27e97a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5576f27e96a8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5576f27e9928 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576f27e9a78 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5576f27e99e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576f27e9b30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5576f27e9d78 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f27e9bf0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5576f27e9c68 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576f27e9f08 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5576f27e9e48 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5576f27ea118 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5576f27e9fd0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5576f27ea048 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5576f27ea1d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5576f27ea438 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5576f27ea340 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5576f27ea508 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5576f27ea508

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2865038 prev 0x5576f2715e48 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576f2865130 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5576f28651c0 <col:22, col:28> col:22 public
|-EnumDecl 0x5576f28651e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5576f2865308 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f28652e8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5576f28652d0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5576f28652b0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5576f28653b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f2865390 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5576f2865378 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5576f2865358 <col:14> 'int' 1
| |-EnumConstantDecl 0x5576f2865440 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f2865420 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5576f2865400 <col:17> 'int' 0
| |-EnumConstantDecl 0x5576f28654d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f28654b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5576f2865490 <col:13> 'int' 1
| |-EnumConstantDecl 0x5576f2865560 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f2865540 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5576f2865520 <col:16> 'int' 2
| |-EnumConstantDecl 0x5576f28655f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f28655d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5576f28655b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5576f2865680 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f2865660 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5576f2865640 <col:15> 'int' 4
| |-EnumConstantDecl 0x5576f2865710 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f28656f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5576f28656d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5576f28657a0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576f2865780 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5576f2865760 <col:12> 'int' 6
| `-EnumConstantDecl 0x5576f2865830 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5576f2865810 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5576f28657f0 <col:13> 'int' 7
|-VarDecl 0x5576f28658a0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5576f2865928 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5576f28659b0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5576f2865a38 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5576f2865ac0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5576f2865b48 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5576f2865bd0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5576f2865c58 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5576f2865ce0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5576f2865d68 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5576f2865df0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5576f2865ef0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5576f286b228 '_nerrors' 'int'
| | `-IntegerLiteral 0x5576f286b9b8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5576f286ba28 <col:16, line:129:5>
|-CXXDestructorDecl 0x5576f2865fe0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5576f286ba38 <col:29, line:132:5>
|-CXXMethodDecl 0x5576f2866198 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5576f28660d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576f2866260 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5576f2866348 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5576f286ba90 <col:44, line:161:5>
|   `-ReturnStmt 0x5576f286ba80 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5576f286ba68 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5576f286ba48 <col:9> 'ErrorHandler *' lvalue Var 0x5576f286b288 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5576f2866488 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5576f28663f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576f2866550 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5576f286baf0 <col:43, line:173:5>
|   `-ReturnStmt 0x5576f286bae0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5576f286bac8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5576f286baa8 <col:9> 'ErrorHandler *' lvalue Var 0x5576f286b300 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5576f2866608 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5576f2866688 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5576f2866798 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5576f2866708 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5576f28668e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5576f2866858 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5576f2866a40 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5576f28669a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5576f2866b98 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5576f2866b00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5576f2866cf0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5576f2866c58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5576f2866f00 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576f2866da8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5576f2866e28 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5576f28670d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576f2866fc0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5576f2867040 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5576f28672f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576f2867198 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5576f2867218 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5576f28674d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576f28673b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5576f2867438 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5576f28676b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576f2867598 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5576f2867618 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5576f2867840 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5576f2867778 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5576f2867a10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5576f28678f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5576f2867970 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5576f286bd48 <col:57, line:234:5>
|   `-ReturnStmt 0x5576f286bd38 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5576f286bd20 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5576f286bcc8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5576f286bc98 <col:9> '<bound member function type>' ->xmessage 0x5576f2867840
|         | `-CXXThisExpr 0x5576f286bc88 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5576f286bd08 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5576f286bcf0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5576f286bc68 <col:18, col:40> 'String' (CXXTemporary 0x5576f286bc68)
|               `-CallExpr 0x5576f286bc30 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5576f286bc18 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5576f286bb90 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5576f2869a08 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5576f286bbb0 <col:31> 'const String' lvalue ParmVar 0x5576f2867970 'str' 'const String &'
|                 `-DeclRefExpr 0x5576f286bbd0 <col:36> 'const String' lvalue ParmVar 0x5576f28678f8 'anno' 'const String &'
|-CXXMethodDecl 0x5576f2867cf0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5576f2867ad0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5576f2867b50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5576f2867bc8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5576f286bfd8 <col:68, line:243:5>
|   `-ReturnStmt 0x5576f286bfc8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5576f286bfb0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5576f286bf50 <col:9, col:41> 'int'
|         |-MemberExpr 0x5576f286bf20 <col:9> '<bound member function type>' ->xmessage 0x5576f2867a10
|         | `-CXXThisExpr 0x5576f286bf10 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5576f286bde8 <col:18> 'const String' lvalue ParmVar 0x5576f2867ad0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5576f286bf98 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5576f286bf80 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5576f286bef0 <col:24, col:40> 'String' (CXXTemporary 0x5576f286bef0)
|               `-CXXMemberCallExpr 0x5576f286be88 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5576f286be18 <col:24> '<bound member function type>' ->vformat 0x5576f2868ed0
|                 | `-CXXThisExpr 0x5576f286be08 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5576f286beb8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5576f286be48 <col:32> 'const char *' lvalue ParmVar 0x5576f2867b50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5576f286bed0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5576f286be68 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5576f2867bc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576f2867f90 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5576f2867db8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5576f2867e30 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5576f2867ea8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5576f286c318 <col:23, line:254:5>
|   `-ReturnStmt 0x5576f286c308 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5576f286c2f0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5576f286c290 <col:9, col:71> 'int'
|         |-MemberExpr 0x5576f286c260 <col:9> '<bound member function type>' ->xmessage 0x5576f2867a10
|         | `-CXXThisExpr 0x5576f286c250 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5576f286c2d8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5576f286c2c0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5576f286c210 <col:18, col:65> 'String' (CXXTemporary 0x5576f286c210)
|         |     `-CallExpr 0x5576f286c1a8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5576f286c190 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5576f286c078 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5576f2869a08 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5576f286c098 <col:31> 'const String' lvalue ParmVar 0x5576f2867e30 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5576f286c1f0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5576f286c1d8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5576f286c170 <col:37, col:64> 'String' (CXXTemporary 0x5576f286c170)
|         |             `-CallExpr 0x5576f286c140 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5576f286c128 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5576f286c0b8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5576f286a058 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5576f286c0d8 <col:56> 'const String' lvalue ParmVar 0x5576f2867db8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5576f286c230 <col:68> 'const String' lvalue ParmVar 0x5576f2867ea8 'str' 'const String &'
|-CXXMethodDecl 0x5576f2868310 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5576f2868058 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5576f28680d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5576f2868150 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5576f28681c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5576f286c5d0 <col:34, line:267:5>
|   `-ReturnStmt 0x5576f286c5c0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5576f286c5a8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5576f286c540 <col:9, col:51> 'int'
|         |-MemberExpr 0x5576f286c510 <col:9> '<bound member function type>' ->xmessage 0x5576f2867f90
|         | `-CXXThisExpr 0x5576f286c500 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5576f286c3b8 <col:18> 'const String' lvalue ParmVar 0x5576f2868058 'landmark' 'const String &'
|         |-DeclRefExpr 0x5576f286c3d8 <col:28> 'const String' lvalue ParmVar 0x5576f28680d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5576f286c590 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5576f286c578 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5576f286c4e0 <col:34, col:50> 'String' (CXXTemporary 0x5576f286c4e0)
|               `-CXXMemberCallExpr 0x5576f286c478 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5576f286c408 <col:34> '<bound member function type>' ->vformat 0x5576f2868ed0
|                 | `-CXXThisExpr 0x5576f286c3f8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5576f286c4a8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5576f286c438 <col:42> 'const char *' lvalue ParmVar 0x5576f2868150 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5576f286c4c0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5576f286c458 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5576f28681c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576f2868420 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5576f286c650 <col:25, line:288:5>
|   `-ReturnStmt 0x5576f286c640 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5576f286c628 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5576f286c5f8 <col:9> 'const int' lvalue ->_nerrors 0x5576f286b228
|         `-CXXThisExpr 0x5576f286c5e8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5576f2868630 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5576f28684d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5576f2868558 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5576f2868918 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5576f28686f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5576f2868778 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5576f28687f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576f2868ab0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5576f28689e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5576f2868cf8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5576f2868b70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5576f2868be8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5576f286c8b0 <col:58, line:357:5>
|   `-ReturnStmt 0x5576f286c8a0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5576f286c888 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5576f286c858 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5576f286c840 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5576f286c820 <col:9, col:29> 'String' (CXXTemporary 0x5576f286c820)
|             `-CallExpr 0x5576f286c7b0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5576f286c798 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5576f286c718 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5576f2868918 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5576f286c6b8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5576f286c7e8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5576f286c6d8 <col:21> 'const char *' lvalue ParmVar 0x5576f2868b70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5576f286c800 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5576f286c6f8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5576f2868be8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576f2868ed0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5576f2868dc0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5576f2868e38 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576f2869028 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5576f2868f98 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5576f2869170 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5576f28690e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5576f2869410 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5576f2869228 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5576f28692a8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5576f2869320 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5576f2869570 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5576f28694e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5576f286c9c8 <col:37, line:441:5>
|   `-IfStmt 0x5576f286c9b0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5576f286c938 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5576f286c908 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5576f286c8c8 <col:6> 'int' lvalue ParmVar 0x5576f28694e0 'level' 'int'
|     | `-ImplicitCastExpr 0x5576f286c920 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5576f286c8e8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5576f28655f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5576f286c998 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5576f286c968 <col:8> 'int' lvalue ->_nerrors 0x5576f286b228
|         `-CXXThisExpr 0x5576f286c958 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5576f2869638 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5576f286ca60 <col:26, line:448:5>
|   `-BinaryOperator 0x5576f286ca40 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5576f286c9f0 <col:2> 'int' lvalue ->_nerrors 0x5576f286b228
|     | `-CXXThisExpr 0x5576f286c9e0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5576f286ca20 <col:13> 'int' 0
|-CXXMethodDecl 0x5576f2869800 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5576f28696f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5576f2869768 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5576f2869a08 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5576f28698c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5576f2869938 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5576f2869cb8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5576f2869ac8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5576f2869b48 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5576f2869bc8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5576f2869d70 <col:59> 0 0
|-CXXMethodDecl 0x5576f2869f08 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5576f2869de8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5576f2869e68 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5576f286d0d0 <col:70, line:534:5>
|   |-DeclStmt 0x5576f286cbd0 <line:528:2, col:20>
|   | |-VarDecl 0x5576f286ca88 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5576f286caf0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5576f286cb28 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5576f286cb90 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5576f286cca0 <line:529:2, col:23>
|   | `-VarDecl 0x5576f286cc00 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5576f286cc88 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5576f286cc68 <col:18> 'const char *' lvalue ParmVar 0x5576f2869de8 'begin' 'const char *'
|   |-DoStmt 0x5576f286d068 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5576f286cf98 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5576f286cf80 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5576f286cf60 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5576f286ccb8 <col:6> 'const char *' lvalue Var 0x5576f286cc00 'x' 'const char *'
|   | |     `-CallExpr 0x5576f286ceb0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5576f286ce98 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5576f286ce50 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5576f286b700 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5576f286cf18 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5576f286cf00 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5576f286cd70 <col:20, col:27> 'String' (CXXTemporary 0x5576f286cd70)
|   | |       |     `-CXXTemporaryObjectExpr 0x5576f286cd38 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5576f286cf30 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5576f286cd90 <col:30> 'const char *' lvalue Var 0x5576f286cc00 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5576f286cf48 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5576f286cdb0 <col:33> 'const char *' lvalue ParmVar 0x5576f2869e68 'end' 'const char *'
|   | |       |-UnaryOperator 0x5576f286cdf0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5576f286cdd0 <col:39> 'String' lvalue Var 0x5576f286ca88 'name' 'String'
|   | |       |-UnaryOperator 0x5576f286ce28 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5576f286ce08 <col:46> 'String' lvalue Var 0x5576f286cb28 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5576f286ce40 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5576f286d050 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5576f286d038 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5576f286d018 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5576f286cfe8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|   |         `-ImplicitCastExpr 0x5576f286cfd0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5576f286cfb0 <col:11> 'String' lvalue Var 0x5576f286ca88 'name' 'String'
|   `-ReturnStmt 0x5576f286d0c0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5576f286d0a8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5576f286d088 <col:9> 'const char *' lvalue Var 0x5576f286cc00 'x' 'const char *'
|-CXXMethodDecl 0x5576f286a058 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5576f2869fc8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5576f286d6d8 <col:55, line:550:5>
|   `-IfStmt 0x5576f286d6b0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5576f286d310 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5576f286d2f8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576f286d2e0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576f286d2c0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576f286d290 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|     | |       `-DeclRefExpr 0x5576f286d130 <col:6> 'const String' lvalue ParmVar 0x5576f2869fc8 'x' 'const String &'
|     | `-BinaryOperator 0x5576f286d270 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5576f286d240 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5576f286d1f0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5576f286d1d8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5576f286d190 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5576f257df30 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5576f286d150 <col:11> 'const String' lvalue ParmVar 0x5576f2869fc8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5576f286d170 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5576f286d258 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5576f286d228 <col:19> 'char' 123
|     |-ReturnStmt 0x5576f286d380 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5576f286d350 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5576f286d330 <col:13> 'const String' lvalue ParmVar 0x5576f2869fc8 'x' 'const String &'
|     `-IfStmt 0x5576f286d688 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5576f286d418 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576f286d400 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576f286d3e0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576f286d3b0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|       |       `-DeclRefExpr 0x5576f286d390 <col:11> 'const String' lvalue ParmVar 0x5576f2869fc8 'x' 'const String &'
|       |-ReturnStmt 0x5576f286d5a0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5576f286d588 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5576f286d558 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5576f286d540 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5576f286d520 <col:13, col:29> 'String' (CXXTemporary 0x5576f286d520)
|       |         `-CallExpr 0x5576f286d4d0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5576f286d4b8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5576f286d430 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5576f2869800 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5576f286d500 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5576f286d450 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5576f286d470 <col:28> 'const String' lvalue ParmVar 0x5576f2869fc8 'x' 'const String &'
|       `-ReturnStmt 0x5576f286d678 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5576f286d660 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5576f286d630 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5576f286d618 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5576f286d5f8 <col:13, col:20> 'String' (CXXTemporary 0x5576f286d5f8)
|                 `-CXXTemporaryObjectExpr 0x5576f286d5c0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5576f286a220 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5576f286a110 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5576f286a188 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576f286b9a8 <col:71> 'bool' false
|-CXXRecordDecl 0x5576f286a2d0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5576f286a5c8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5576f286a560 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5576f286a500 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5576f286a4c0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5576f2560f90 'String'
|       | `-CXXRecord 0x5576f2560f00 'String'
|       |-BuiltinType 0x5576f2234370 'int'
|       `-DecayedType 0x5576f2716e90 '__va_list_tag *' sugar
|         |-TypedefType 0x5576f2716e60 'va_list' sugar
|         | |-Typedef 0x5576f2452040 'va_list'
|         | `-TypedefType 0x5576f2451ff0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5576f2389c18 '__gnuc_va_list'
|         |   `-TypedefType 0x5576f2389b80 '__builtin_va_list' sugar
|         |     |-Typedef 0x5576f2275bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5576f2275b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5576f22350c0 '__va_list_tag'
|         |         `-CXXRecord 0x5576f2235028 '__va_list_tag'
|         `-PointerType 0x5576f24578e0 '__va_list_tag *'
|           `-RecordType 0x5576f22350c0 '__va_list_tag'
|             `-CXXRecord 0x5576f2235028 '__va_list_tag'
|-EnumDecl 0x5576f286a620 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5576f286a720 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286ac80 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286a700 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5576f286a6e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5576f286a7b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286ac98 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286a790 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5576f286a770 <col:21> 'int' 2
| |-EnumConstantDecl 0x5576f286a840 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286acb0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286a820 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5576f286a800 <col:22> 'int' 4
| |-EnumConstantDecl 0x5576f286a8d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286acc8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286a8b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5576f286a890 <col:17> 'int' 8
| |-EnumConstantDecl 0x5576f286a960 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286ace0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286a940 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5576f286a920 <col:22> 'int' 16
| |-EnumConstantDecl 0x5576f286a9f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286acf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286a9d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5576f286a9b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5576f286aa80 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286ad10 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286aa60 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5576f286aa40 <col:17> 'int' 64
| |-EnumConstantDecl 0x5576f286ab10 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286ad28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286aaf0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5576f286aad0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5576f286aba0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5576f286ad40 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f286ab80 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5576f286ab60 <col:16> 'int' 256
| `-EnumConstantDecl 0x5576f286ac30 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5576f286ad58 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f286ac10 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5576f286abf0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5576f286afb8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5576f286ad80 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5576f286ae70 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5576f286b140 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5576f286b078 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5576f286b1e8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5576f286b228 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5576f286b288 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5576f286b300 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5576f286b700 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5576f286b378 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5576f286b3f8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5576f286b478 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5576f286b4f0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5576f286b568 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5576f286b5e0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5576f286b828 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5576f286b828
| `-ParmVarDecl 0x5576f286b938 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5576f286da38 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5576f286da38
  `-ParmVarDecl 0x5576f286db48 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2715ed8 prev 0x5576f275b1d8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f2715fd0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5576f2716060 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5576f2716198 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5576f2716098 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5576f27175c0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5576f27175a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5576f2717138 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5576f2717650 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5576f2717610 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5576f2716098 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5576f27171a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5576f27176d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5576f2717690 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5576f2717200 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5576f2717710 <col:54> 'bool' false
| `-CompoundStmt 0x5576f2717818 <col:61, line:38:5>
|   `-BinaryOperator 0x5576f27177f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5576f2717790 <col:9> 'const Element *' lvalue ->_context 0x5576f27170d8
|     | `-CXXThisExpr 0x5576f2717780 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5576f27177e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5576f27177c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5576f27163a8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f2716258 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5576f27162d0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5576f27175f8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5576f27175d8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5576f27170d8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5576f2717870 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5576f2717830 <col:20> 'const Element *' lvalue ParmVar 0x5576f2716258 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5576f2717138 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5576f27178f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5576f27178b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5576f27162d0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5576f27171a0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5576f2717970 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5576f2717930 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5576f2717200 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5576f27179b0 <col:73> 'bool' false
| `-CompoundStmt 0x5576f2717a28 <col:80, line:46:5>
|-CXXMethodDecl 0x5576f27164d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5576f2717aa0 <col:36, line:51:5>
|   `-ReturnStmt 0x5576f2717a90 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5576f2717a78 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5576f2717a48 <col:16> 'const Element *const' lvalue ->_context 0x5576f27170d8
|         `-CXXThisExpr 0x5576f2717a38 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5576f27165c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5576f2717b20 <col:32, line:57:5>
|   `-ReturnStmt 0x5576f2717b10 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5576f2717af8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5576f2717ac8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5576f2717138
|         `-CXXThisExpr 0x5576f2717ab8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5576f2716688 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5576f2716810 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5576f2716740 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5576f2716960 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5576f27168d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5576f2716ab0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5576f2716a20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5576f2716cb8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5576f2716b68 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5576f2716be0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5576f2716fe8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5576f2716d78 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5576f2716df8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5576f2716ec0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5576f27170a0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5576f27170d8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5576f2717138 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5576f27171a0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5576f2717200 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5576f2717250 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5576f2717250
| `-ParmVarDecl 0x5576f2717368 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5576f2717408 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5576f2717408
| `-ParmVarDecl 0x5576f2717518 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5576f287c560 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576f2823840 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5576f2823a18 prev 0x5576f2823840 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5576f2823aa8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5576f2823ad0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f28256a0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5576f2825650 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5576f2823f80 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5576f2823e80 'type'
|     `-TemplateSpecializationType 0x5576f2823e10 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5576f2823cf0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5576f2823cd0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5576f2823cb0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5576f2823df0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5576f2823d10 'char_array'
|-TypedefDecl 0x5576f2825758 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5576f2825720 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5576f2825700 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5576f28256a0 'type'
|     `-ElaboratedType 0x5576f2825650 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5576f2823f80 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5576f2823e80 'type'
|         `-TemplateSpecializationType 0x5576f2823e10 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5576f2823cf0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5576f2823cd0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5576f2823cb0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5576f2823df0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5576f2823d10 'char_array'
|-CXXMethodDecl 0x5576f28258d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5576f28257e8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5576f28259c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5576f2825aa8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5576f2825d78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5576f2825c80 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5576f2825fb8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5576f2825e30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576f2825ea8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576f2826188 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5576f2826078 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576f28260f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576f28262e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5576f28263b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5576f2826608 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5576f2826478 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5576f28264f0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576f2826868 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5576f28266d8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5576f2826750 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576f2826a28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5576f2826938 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576f2826be8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5576f2826af0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576f2826ca0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576f2826d50 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5576f2826f88 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5576f2826e00 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576f2826e78 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576f2827228 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5576f2827130 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5576f28272f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5576f2827340 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5576f282d7b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576f2822248 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5576f2822458 prev 0x5576f2822248 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5576f28237b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5576f2823760 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5576f2823740 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5576f28235f0 'type'
|     `-SubstTemplateTypeParmType 0x5576f2823410 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5576f24f9dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f24f9d78 'T'
|       `-RecordType 0x5576f2822f60 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5576f2822e78 'sized_array_memory'
|-FieldDecl 0x5576f282d800 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5576f282d850 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5576f282d888 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|   |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5576f2531a68 'T'
|   `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282d918 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5576f282d8e0 'int &'
|   `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|     |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5576f2531a68 'T'
|     `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282d9d8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5576f282d9a0 'const int &'
|   `-QualType 0x5576f28224f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282da68 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5576f282da30 'int *'
|   `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|     |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5576f2531a68 'T'
|     `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282daf8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5576f282dac0 'const int *'
|   `-QualType 0x5576f28224f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282e6e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5576f282e690 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5576f282e670 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5576f282e600 'type'
|     `-SubstTemplateTypeParmType 0x5576f282e3c0 'int' sugar
|       |-TemplateTypeParmType 0x5576f2504bd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2504b80 'T'
|       `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282e748 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5576f282d9a0 'const int &'
|   `-QualType 0x5576f28224f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282e7a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282e808 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5576f282da30 'int *'
|   `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|     |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5576f2531a68 'T'
|     `-BuiltinType 0x5576f2234370 'int'
|-TypedefDecl 0x5576f282e870 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5576f282dac0 'const int *'
|   `-QualType 0x5576f28224f1 'const int' const
|     `-SubstTemplateTypeParmType 0x5576f28224f0 'int' sugar
|       |-TemplateTypeParmType 0x5576f2531ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576f2531a68 'T'
|       `-BuiltinType 0x5576f2234370 'int'
|-EnumDecl 0x5576f282e8c8 <line:134:5> col:5
| `-EnumConstantDecl 0x5576f282e9c0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5576f282e9a0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5576f2533148 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5576f2533120 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5576f2533100 <col:40> 'int' 1
|-CXXConstructorDecl 0x5576f282ea48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5576f282ec98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f282eb00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576f282eba0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5576f282ef58 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5576f282ee40 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5576f282f218 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5576f282f100 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5576f282f560 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5576f282f440 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5576f282f870 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5576f282f750 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5576f282fb60 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f282f9a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576f282fa20 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5576f282fc88 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5576f282fd68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f282fdc0 <col:30> Inherited
|-CXXMethodDecl 0x5576f282fe08 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5576f282feb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f282ff10 <col:30> Inherited
|-CXXMethodDecl 0x5576f282ffd8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5576f2830088 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f28300e0 <col:30> Inherited
|-CXXMethodDecl 0x5576f2830128 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5576f28301d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f2830230 <col:30> Inherited
|-CXXMethodDecl 0x5576f2830278 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5576f2830328 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f2830380 <col:30> Inherited
|-CXXMethodDecl 0x5576f28303c8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5576f2830478 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576f28304d0 <col:30> Inherited
|-CXXMethodDecl 0x5576f28304f8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576f28305a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576f2830658 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5576f2830818 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f2830708 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576f2830780 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5576f2830968 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5576f28308d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f2830b18 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5576f2830a20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576f2830bd0 <col:20>
| `-OptimizeNoneAttr 0x5576f2830c28 <col:30>
|-CXXMethodDecl 0x5576f2830d48 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5576f2830c50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576f2830e00 <col:20>
| `-OptimizeNoneAttr 0x5576f2830e58 <col:30>
|-CXXMethodDecl 0x5576f2830f10 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576f2830e80 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f2831058 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576f2830fc8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f2831188 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5576f28312b8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5576f2831388 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5576f2831458 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5576f2831598 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576f2831508 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f28316e0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576f2831650 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576f2831828 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5576f2831798 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576f28318e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5576f28319e0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5576f2831950 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576f2831a98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5576f2831b58 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5576f2831c58 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5576f2831dd8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5576f2831d18 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5576f2832598 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5576f2831e90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5576f28324f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5576f28323f8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5576f2832678 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576f28327c8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5576f2832738 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5576f2832880 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5576f2832ac8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5576f2832940 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5576f28329b8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5576f2832c88 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5576f2832b98 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5576f2832ed8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5576f2832d50 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5576f2832dc8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5576f2832f98 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5576f28331f8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5576f2833100 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5576f28332c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f28203b8 prev 0x5576f271ca38 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576f28204b0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5576f28205a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5576f2845080 <col:16, line:828:9>
|-CXXDestructorDecl 0x5576f2820690 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5576f2845090 <col:25, line:830:9>
|-CXXMethodDecl 0x5576f2820790 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5576f2820840 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5576f28208e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5576f28208e8
| `-ParmVarDecl 0x5576f28209f8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5576f28211b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5576f28211b8
  `-ParmVarDecl 0x5576f28212c8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f271c848 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5576f271c9a8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5576f271ca38 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5576f271caf0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5576f271cbf8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5576f271cb28 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5576f2834888 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5576f2834868 <col:31> 'int' 0
|-CXXConstructorDecl 0x5576f2806198 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5576f2806010 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5576f2806088 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5576f28348c0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5576f28348a0 <col:59> 'int' 0
|-CXXConstructorDecl 0x5576f2806370 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f2806260 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5576f28062d8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5576f28348f8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5576f28348d8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5576f2806728 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5576f2806510 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5576f2806588 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5576f2806600 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5576f2834930 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5576f2834910 <col:31> 'int' 0
|-CXXConstructorDecl 0x5576f28068e8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5576f2806828 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5576f28069e0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5576f2806bc8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5576f2806ad0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5576f2806cb8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5576f2834ce0 <col:24, line:291:5>
|   `-ReturnStmt 0x5576f2834cd0 <line:290:9, col:79>
|     `-BinaryOperator 0x5576f2834cb0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5576f2834b88 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5576f2834ae0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5576f2834ac0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5576f28349b8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5576f28349a0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5576f2834988 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5576f2834958 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5576f28221e0
|       | |   |       `-CXXThisExpr 0x5576f2834948 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5576f2834aa8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5576f2834a90 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5576f2834a58 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5576f2834a28 <col:28, col:35> '<bound member function type>' ->size 0x5576f27e77d8
|       | |           `-ImplicitCastExpr 0x5576f2834a78 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5576f2834a10 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5576f28349e0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5576f28221e0
|       | |                 `-CXXThisExpr 0x5576f28349d0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5576f2834b70 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5576f2834b58 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5576f2834b40 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5576f2834b10 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5576f2833410
|       |         `-CXXThisExpr 0x5576f2834b00 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5576f2834c90 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5576f2834c78 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5576f2834c60 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5576f2834c20 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5576f2834c08 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5576f2834bb8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5576f28334c0
|         |     |   `-CXXThisExpr 0x5576f2834ba8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5576f2834be8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5576f2834c40 <col:79> 'int' 0
|-CXXMethodDecl 0x5576f2806d78 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5576f2834eb8 <col:32, line:296:5>
|   `-ReturnStmt 0x5576f2834ea8 <line:295:9, col:49>
|     `-BinaryOperator 0x5576f2834e88 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5576f2834d68 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5576f2834d50 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5576f2834d38 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5576f2834d08 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5576f2833410
|       |       `-CXXThisExpr 0x5576f2834cf8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5576f2834e68 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5576f2834e50 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5576f2834e38 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5576f2834df8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5576f2834de0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5576f2834d90 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5576f28334c0
|         |     |   `-CXXThisExpr 0x5576f2834d80 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5576f2834dc0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5576f2834e18 <col:49> 'int' 0
|-CXXMethodDecl 0x5576f2806e68 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5576f28350c8 <col:19, line:306:5>
|   |-IfStmt 0x5576f2834fe8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5576f2834f28 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5576f2834f10 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5576f2834ee0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5576f28221e0
|   | |     `-CXXThisExpr 0x5576f2834ed0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5576f2834fc8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5576f2834f98 <col:13, col:20> '<bound member function type>' ->clear 0x5576f27ea1d8
|   |     `-ImplicitCastExpr 0x5576f2834f80 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5576f2834f50 <col:13> 'Vector<String> *' lvalue ->_conf 0x5576f28221e0
|   |         `-CXXThisExpr 0x5576f2834f40 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5576f2835070 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5576f2835040 <col:9, col:16> '<bound member function type>' .clear 0x5576f2832f98
|   |   `-MemberExpr 0x5576f2835010 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5576f28333b0
|   |     `-CXXThisExpr 0x5576f2835000 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5576f28350b8 <line:305:9, col:17>
|     `-UnaryOperator 0x5576f28350a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f2835090 <col:17> 'Args *' this
|-CXXMethodDecl 0x5576f28070e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5576f2806ff0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5576f2807268 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5576f28071a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5576f28075e8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5576f2807310 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5576f2807548 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5576f28073b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5576f2807430 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5576f28353e8 <col:67, line:327:5>
|     |-WhileStmt 0x5576f2835398 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5576f28351b0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5576f2835130 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5576f27536a8 0x5576f259cc88 0x5576f259c960 0x5576f258e140 0x5576f258ddf0 0x5576f258d6e0 0x5576f2560050 0x5576f24ec510
|     | | |-DeclRefExpr 0x5576f28350f0 <col:16> 'Iter' lvalue ParmVar 0x5576f28073b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5576f2835110 <col:25> 'Iter' lvalue ParmVar 0x5576f2807430 'end' 'Iter'
|     | `-CompoundStmt 0x5576f2835378 <col:30, line:325:9>
|     |   |-CallExpr 0x5576f2835318 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5576f28351f8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5576f28352e8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5576f2835278 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|     |   |   `-DeclRefExpr 0x5576f2835258 <col:24> 'Iter' lvalue ParmVar 0x5576f28073b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5576f2835360 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5576f2835340 <col:15> 'Iter' lvalue ParmVar 0x5576f28073b8 'begin' 'Iter'
|     `-ReturnStmt 0x5576f28353d8 <line:326:9, col:17>
|       `-UnaryOperator 0x5576f28353c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f28353b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5576f28076f0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5576f2807660 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5576f2807838 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5576f28077a8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5576f2807900 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5576f28354c8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5576f2835468 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5576f2835418 <col:9> '<bound member function type>' ->reset_from 0x5576f2833838
|   | | `-CXXThisExpr 0x5576f2835408 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5576f2835448 <col:20> 'int' 0
|   `-ReturnStmt 0x5576f28354b8 <line:352:9, col:17>
|     `-UnaryOperator 0x5576f28354a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f2835490 <col:17> 'Args *' this
|-VarDecl 0x5576f28079b8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5576f2807a20 <col:38> 'int' 1
|-VarDecl 0x5576f2807ab0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5576f2807b18 <col:39> 'int' 2
|-VarDecl 0x5576f2807ba8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5576f2807c10 <col:39> 'int' 4
|-VarDecl 0x5576f2807ca0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5576f2807d08 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5576f2808088 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5576f2807d80 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5576f2807fe8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5576f2807e30 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5576f2807ed8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x5576f2835620 <col:43, line:371:5>
| |   `-ReturnStmt 0x5576f2835610 <line:370:9, col:34>
| |     `-CallExpr 0x5576f28355d8 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5576f28354f8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5576f2835578 <col:21> 'const char *' lvalue ParmVar 0x5576f2807e30 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5576f2835598 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5576f28355b8 <col:33> 'T' lvalue ParmVar 0x5576f2807ed8 'x' 'T &'
| `-CXXMethodDecl 0x5576f287d2e8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5576f287d140 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5576f287d218 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x5576f28083b8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5576f28080f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5576f2808318 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5576f28081a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2808248 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5576f2835770 <col:45, line:375:5>
|     `-ReturnStmt 0x5576f2835760 <line:374:9, col:42>
|       `-CallExpr 0x5576f2835728 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2835648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28356c8 <col:21> 'const char *' lvalue ParmVar 0x5576f28081a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f28356e8 <col:30> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5576f2835708 <col:41> 'T' lvalue ParmVar 0x5576f2808248 'x' 'T &'
|-FunctionTemplateDecl 0x5576f28086e8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5576f2808420 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5576f2808648 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5576f28084d0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5576f2808578 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5576f28371f8 <col:45, line:379:5>
| |   `-ReturnStmt 0x5576f28371e8 <line:378:9, col:43>
| |     `-CallExpr 0x5576f28371b0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5576f28370d0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5576f2837150 <col:21> 'const char *' lvalue ParmVar 0x5576f28084d0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5576f2837170 <col:30> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int'
| |       `-DeclRefExpr 0x5576f2837190 <col:42> 'T' lvalue ParmVar 0x5576f2808578 'x' 'T &'
| |-CXXMethodDecl 0x5576f287c9c8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned short &)'
| | |-TemplateArgument type 'unsigned short'
| | |-ParmVarDecl 0x5576f287c7e8 <col:18, col:30> col:30 keyword 'const char *'
| | `-ParmVarDecl 0x5576f287c8b8 <col:39, col:42> col:42 x 'unsigned short &'
| `-CXXMethodDecl 0x5576f287ce28 <col:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5576f287cc48 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5576f287cd18 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x5576f2808a18 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5576f2808750 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5576f2808978 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5576f2808800 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f28088a8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5576f28373f8 <col:46, line:383:5>
|     `-ReturnStmt 0x5576f28373e8 <line:382:9, col:55>
|       `-CallExpr 0x5576f28373b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2837220 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28372a0 <col:21> 'const char *' lvalue ParmVar 0x5576f2808800 'keyword' 'const char *'
|         |-BinaryOperator 0x5576f2837370 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5576f2837320 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5576f2837300 <col:30> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5576f2837358 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5576f2837338 <col:42> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5576f2837390 <col:54> 'T' lvalue ParmVar 0x5576f28088a8 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2808e18 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5576f2808a80 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5576f2808d78 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5576f2808b30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2808bb0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2808c58 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5576f2837538 <col:54, line:388:5>
|     |-CallExpr 0x5576f28374c0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f2837410 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5576f2837450 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5576f2837460 <col:30> 'const char *' lvalue ParmVar 0x5576f2808b30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576f2837480 <col:39> 'int' lvalue ParmVar 0x5576f2808bb0 'flags' 'int'
|     | `-DeclRefExpr 0x5576f28374a0 <col:46> 'T' lvalue ParmVar 0x5576f2808c58 'x' 'T &'
|     `-ReturnStmt 0x5576f2837528 <line:387:9, col:17>
|       `-UnaryOperator 0x5576f2837510 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f2837500 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f28092c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5576f2808e88 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5576f2808f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5576f2809228 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5576f2808fc8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2809068 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5576f2809108 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576f28376a8 <col:74, line:403:5>
|     `-ReturnStmt 0x5576f2837698 <line:402:9, col:56>
|       `-CallExpr 0x5576f2837658 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2837568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28375d8 <col:28> 'const char *' lvalue ParmVar 0x5576f2808fc8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f28375f8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5576f2837618 <col:40> 'T' lvalue ParmVar 0x5576f2809068 'x' 'T &'
|         `-DeclRefExpr 0x5576f2837638 <col:43> 'const V' lvalue ParmVar 0x5576f2809108 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5576f2809738 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5576f2809338 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5576f28093b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5576f2809698 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5576f2809478 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2809518 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5576f28095b8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576f2837810 <col:76, line:407:5>
|     `-ReturnStmt 0x5576f2837800 <line:406:9, col:65>
|       `-CallExpr 0x5576f28377c0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28376d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2837740 <col:28> 'const char *' lvalue ParmVar 0x5576f2809478 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2837760 <col:37> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5576f2837780 <col:49> 'T' lvalue ParmVar 0x5576f2809518 'x' 'T &'
|         `-DeclRefExpr 0x5576f28377a0 <col:52> 'const V' lvalue ParmVar 0x5576f28095b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5576f2809c88 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5576f28097a8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5576f2809828 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5576f2809be8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5576f28098e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2809968 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2809a08 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5576f2809aa8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576f2837978 <col:85, line:412:5>
|     |-CallExpr 0x5576f28378f8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f2837828 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5576f2837868 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5576f2837878 <col:37> 'const char *' lvalue ParmVar 0x5576f28098e8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576f2837898 <col:46> 'int' lvalue ParmVar 0x5576f2809968 'flags' 'int'
|     | |-DeclRefExpr 0x5576f28378b8 <col:53> 'T' lvalue ParmVar 0x5576f2809a08 'x' 'T &'
|     | `-DeclRefExpr 0x5576f28378d8 <col:56> 'const V' lvalue ParmVar 0x5576f2809aa8 'default_value' 'const V &'
|     `-ReturnStmt 0x5576f2837968 <line:411:9, col:17>
|       `-UnaryOperator 0x5576f2837950 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f2837940 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f280a118 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5576f2809d00 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2809d78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f280a078 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f2809e38 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2809eb0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2809f58 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5576f2837af8 <col:53, line:425:5>
|     `-ReturnStmt 0x5576f2837ae8 <line:424:9, col:42>
|       `-CallExpr 0x5576f2837aa8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28379a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2837a28 <col:21> 'const char *' lvalue ParmVar 0x5576f2809e38 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f2837a48 <col:30> 'int' 0
|         |-DeclRefExpr 0x5576f2837a68 <col:33> 'P' lvalue ParmVar 0x5576f2809eb0 'parser' 'P'
|         `-DeclRefExpr 0x5576f2837a88 <col:41> 'T' lvalue ParmVar 0x5576f2809f58 'x' 'T &'
|-FunctionTemplateDecl 0x5576f280a568 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5576f280a188 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280a208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f280a4c8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f280a2c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280a340 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280a3e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5576f2837c70 <col:55, line:429:5>
|     `-ReturnStmt 0x5576f2837c60 <line:428:9, col:50>
|       `-CallExpr 0x5576f2837c20 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2837b20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2837ba0 <col:21> 'const char *' lvalue ParmVar 0x5576f280a2c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2837bc0 <col:30> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5576f2837be0 <col:41> 'P' lvalue ParmVar 0x5576f280a340 'parser' 'P'
|         `-DeclRefExpr 0x5576f2837c00 <col:49> 'T' lvalue ParmVar 0x5576f280a3e8 'x' 'T &'
|-FunctionTemplateDecl 0x5576f280a9b8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5576f280a5d8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280a658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f280a918 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f280a718 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280a790 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280a838 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5576f2837de8 <col:55, line:433:5>
|     `-ReturnStmt 0x5576f2837dd8 <line:432:9, col:51>
|       `-CallExpr 0x5576f2837d98 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2837c98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2837d18 <col:21> 'const char *' lvalue ParmVar 0x5576f280a718 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2837d38 <col:30> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5576f2837d58 <col:42> 'P' lvalue ParmVar 0x5576f280a790 'parser' 'P'
|         `-DeclRefExpr 0x5576f2837d78 <col:50> 'T' lvalue ParmVar 0x5576f280a838 'x' 'T &'
|-FunctionTemplateDecl 0x5576f280ae08 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5576f280aa28 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280aaa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f280ad68 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f280ab68 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280abe0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280ac88 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5576f2838010 <col:56, line:437:5>
|     `-ReturnStmt 0x5576f2838000 <line:436:9, col:63>
|       `-CallExpr 0x5576f2837fc0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2837e10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2837e90 <col:21> 'const char *' lvalue ParmVar 0x5576f280ab68 'keyword' 'const char *'
|         |-BinaryOperator 0x5576f2837f60 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5576f2837f10 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5576f2837ef0 <col:30> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5576f2837f48 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5576f2837f28 <col:42> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5576f2837f80 <col:54> 'P' lvalue ParmVar 0x5576f280abe0 'parser' 'P'
|         `-DeclRefExpr 0x5576f2837fa0 <col:62> 'T' lvalue ParmVar 0x5576f280ac88 'x' 'T &'
|-FunctionTemplateDecl 0x5576f280b338 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5576f280ae78 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280aef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f280b298 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5576f280afb8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280b038 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5576f280b0b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280b158 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5576f2838178 <col:64, line:442:5>
|     |-CallExpr 0x5576f28380f8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f2838028 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5576f2838068 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5576f2838078 <col:30> 'const char *' lvalue ParmVar 0x5576f280afb8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576f2838098 <col:39> 'int' lvalue ParmVar 0x5576f280b038 'flags' 'int'
|     | |-DeclRefExpr 0x5576f28380b8 <col:46> 'P' lvalue ParmVar 0x5576f280b0b0 'parser' 'P'
|     | `-DeclRefExpr 0x5576f28380d8 <col:54> 'T' lvalue ParmVar 0x5576f280b158 'x' 'T &'
|     `-ReturnStmt 0x5576f2838168 <line:441:9, col:17>
|       `-UnaryOperator 0x5576f2838150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f2838140 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f280b938 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5576f280b3b0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280b428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5576f280b4a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5576f280b898 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5576f280b570 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280b5e8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280b688 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5576f280b758 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576f2838310 <col:84, line:458:5>
|     `-ReturnStmt 0x5576f2838300 <line:457:9, col:64>
|       `-CallExpr 0x5576f28382b8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28381a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2838218 <col:28> 'const char *' lvalue ParmVar 0x5576f280b570 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f2838238 <col:37> 'int' 0
|         |-DeclRefExpr 0x5576f2838258 <col:40> 'P' lvalue ParmVar 0x5576f280b5e8 'parser' 'P'
|         |-DeclRefExpr 0x5576f2838278 <col:48> 'T' lvalue ParmVar 0x5576f280b688 'x' 'T &'
|         `-DeclRefExpr 0x5576f2838298 <col:51> 'const V' lvalue ParmVar 0x5576f280b758 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5576f280beb8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5576f280b9b0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280ba28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5576f280baa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5576f280be18 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5576f280bb70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280bbe8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280bc88 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5576f280bd28 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576f28384a0 <col:86, line:462:5>
|     `-ReturnStmt 0x5576f2838490 <line:461:9, col:73>
|       `-CallExpr 0x5576f2838448 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2838338 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28383a8 <col:28> 'const char *' lvalue ParmVar 0x5576f280bb70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f28383c8 <col:37> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5576f28383e8 <col:49> 'P' lvalue ParmVar 0x5576f280bbe8 'parser' 'P'
|         |-DeclRefExpr 0x5576f2838408 <col:57> 'T' lvalue ParmVar 0x5576f280bc88 'x' 'T &'
|         `-DeclRefExpr 0x5576f2838428 <col:60> 'const V' lvalue ParmVar 0x5576f280bd28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5576f280c518 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5576f280bf30 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280bfa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5576f280c028 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5576f280c478 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5576f280c0f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280c170 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5576f280c1e8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280c288 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5576f280c328 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576f2838630 <col:95, line:467:5>
|     |-CallExpr 0x5576f28385a8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f28384b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5576f28384f8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5576f2838508 <col:37> 'const char *' lvalue ParmVar 0x5576f280c0f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576f2838528 <col:46> 'int' lvalue ParmVar 0x5576f280c170 'flags' 'int'
|     | |-DeclRefExpr 0x5576f2838548 <col:53> 'P' lvalue ParmVar 0x5576f280c1e8 'parser' 'P'
|     | |-DeclRefExpr 0x5576f2838568 <col:61> 'T' lvalue ParmVar 0x5576f280c288 'x' 'T &'
|     | `-DeclRefExpr 0x5576f2838588 <col:64> 'const V' lvalue ParmVar 0x5576f280c328 'default_value' 'const V &'
|     `-ReturnStmt 0x5576f2838620 <line:466:9, col:17>
|       `-UnaryOperator 0x5576f2838608 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f28385f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f280caf8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5576f280c598 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280c618 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576f280c698 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576f280ca58 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5576f280c760 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280c7d8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280c878 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576f280c918 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576f28387d8 <col:63, line:481:5>
|     `-ReturnStmt 0x5576f28387c8 <line:480:9, col:47>
|       `-CallExpr 0x5576f2838780 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2838660 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28386e0 <col:21> 'const char *' lvalue ParmVar 0x5576f280c760 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f2838700 <col:30> 'int' 0
|         |-DeclRefExpr 0x5576f2838720 <col:33> 'P' lvalue ParmVar 0x5576f280c7d8 'parser' 'P'
|         |-DeclRefExpr 0x5576f2838740 <col:41> 'T1' lvalue ParmVar 0x5576f280c878 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576f2838760 <col:45> 'T2' lvalue ParmVar 0x5576f280c918 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5576f280d078 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5576f280cb70 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280cbe8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576f280cc68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576f280cfd8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5576f280cd30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280cda8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280ce48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576f280cee8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576f2838978 <col:65, line:485:5>
|     `-ReturnStmt 0x5576f2838968 <line:484:9, col:55>
|       `-CallExpr 0x5576f2838920 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2838800 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2838880 <col:21> 'const char *' lvalue ParmVar 0x5576f280cd30 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f28388a0 <col:30> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5576f28388c0 <col:41> 'P' lvalue ParmVar 0x5576f280cda8 'parser' 'P'
|         |-DeclRefExpr 0x5576f28388e0 <col:49> 'T1' lvalue ParmVar 0x5576f280ce48 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576f2838900 <col:53> 'T2' lvalue ParmVar 0x5576f280cee8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5576f280d5f8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5576f280d0f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280d168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576f280d1e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576f280d558 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5576f280d2b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280d328 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280d3c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576f280d468 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576f2838b18 <col:65, line:489:5>
|     `-ReturnStmt 0x5576f2838b08 <line:488:9, col:56>
|       `-CallExpr 0x5576f2838ac0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28389a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2838a20 <col:21> 'const char *' lvalue ParmVar 0x5576f280d2b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2838a40 <col:30> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int'
|         |-DeclRefExpr 0x5576f2838a60 <col:42> 'P' lvalue ParmVar 0x5576f280d328 'parser' 'P'
|         |-DeclRefExpr 0x5576f2838a80 <col:50> 'T1' lvalue ParmVar 0x5576f280d3c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576f2838aa0 <col:54> 'T2' lvalue ParmVar 0x5576f280d468 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5576f280db78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5576f280d670 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280d6e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576f280d768 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576f280dad8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5576f280d830 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280d8a8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280d948 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576f280d9e8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576f2838d68 <col:66, line:493:5>
|     `-ReturnStmt 0x5576f2838d58 <line:492:9, col:68>
|       `-CallExpr 0x5576f2838d10 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2838b40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2838bc0 <col:21> 'const char *' lvalue ParmVar 0x5576f280d830 'keyword' 'const char *'
|         |-BinaryOperator 0x5576f2838c90 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5576f2838c40 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5576f2838c20 <col:30> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5576f2838c78 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5576f2838c58 <col:42> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5576f2838cb0 <col:54> 'P' lvalue ParmVar 0x5576f280d8a8 'parser' 'P'
|         |-DeclRefExpr 0x5576f2838cd0 <col:62> 'T1' lvalue ParmVar 0x5576f280d948 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576f2838cf0 <col:66> 'T2' lvalue ParmVar 0x5576f280d9e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5576f280f208 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5576f280dbf0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f280dc68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576f280dce8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576f280f168 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5576f280ddb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280de30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5576f280dea8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5576f280ef78 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576f280f018 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576f2838ef8 <col:74, line:498:5>
|     |-CallExpr 0x5576f2838e70 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f2838d80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5576f2838dc0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5576f2838dd0 <col:30> 'const char *' lvalue ParmVar 0x5576f280ddb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576f2838df0 <col:39> 'int' lvalue ParmVar 0x5576f280de30 'flags' 'int'
|     | |-DeclRefExpr 0x5576f2838e10 <col:46> 'P' lvalue ParmVar 0x5576f280dea8 'parser' 'P'
|     | |-DeclRefExpr 0x5576f2838e30 <col:54> 'T1' lvalue ParmVar 0x5576f280ef78 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5576f2838e50 <col:58> 'T2' lvalue ParmVar 0x5576f280f018 'x2' 'T2 &'
|     `-ReturnStmt 0x5576f2838ee8 <line:497:9, col:17>
|       `-UnaryOperator 0x5576f2838ed0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f2838ec0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f280f568 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5576f280f288 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f280f4c8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5576f280f340 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280f3b8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5576f2839040 <col:52, line:509:5>
|     `-ReturnStmt 0x5576f2839030 <line:508:9, col:44>
|       `-CallExpr 0x5576f2838ff8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2838f28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2838f98 <col:26> 'const char *' lvalue ParmVar 0x5576f280f340 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f2838fb8 <col:35> 'int' 0
|         `-DeclRefExpr 0x5576f2838fd8 <col:38> 'P' lvalue ParmVar 0x5576f280f3b8 'parser' 'P'
|-FunctionTemplateDecl 0x5576f280f868 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5576f280f5d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f280f7c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5576f280f680 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280f6f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5576f2839180 <col:54, line:513:5>
|     `-ReturnStmt 0x5576f2839170 <line:512:9, col:52>
|       `-CallExpr 0x5576f2839138 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2839068 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28390d8 <col:26> 'const char *' lvalue ParmVar 0x5576f280f680 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f28390f8 <col:35> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5576f2839118 <col:46> 'P' lvalue ParmVar 0x5576f280f6f8 'parser' 'P'
|-FunctionTemplateDecl 0x5576f280fb68 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5576f280f8d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f280fac8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5576f280f980 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280f9f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5576f28392c0 <col:54, line:517:5>
|     `-ReturnStmt 0x5576f28392b0 <line:516:9, col:53>
|       `-CallExpr 0x5576f2839278 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28391a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2839218 <col:26> 'const char *' lvalue ParmVar 0x5576f280f980 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2839238 <col:35> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int'
|         `-DeclRefExpr 0x5576f2839258 <col:47> 'P' lvalue ParmVar 0x5576f280f9f8 'parser' 'P'
|-FunctionTemplateDecl 0x5576f280fe68 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5576f280fbd0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f280fdc8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5576f280fc80 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f280fcf8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5576f28394b0 <col:55, line:521:5>
|     `-ReturnStmt 0x5576f28394a0 <line:520:9, col:65>
|       `-CallExpr 0x5576f2839468 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28392e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2839358 <col:26> 'const char *' lvalue ParmVar 0x5576f280fc80 'keyword' 'const char *'
|         |-BinaryOperator 0x5576f2839428 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5576f28393d8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5576f28393b8 <col:35> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5576f2839410 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5576f28393f0 <col:47> 'const int' lvalue Var 0x5576f2807ab0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5576f2839448 <col:59> 'P' lvalue ParmVar 0x5576f280fcf8 'parser' 'P'
|-FunctionTemplateDecl 0x5576f2810238 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5576f280fed0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f2810198 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5576f280ff80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2810000 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2810078 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5576f28395f0 <col:63, line:526:5>
|     |-CallExpr 0x5576f2839578 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f28394c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5576f2839508 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5576f2839518 <col:35> 'const char *' lvalue ParmVar 0x5576f280ff80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576f2839538 <col:44> 'int' lvalue ParmVar 0x5576f2810000 'flags' 'int'
|     | `-DeclRefExpr 0x5576f2839558 <col:51> 'P' lvalue ParmVar 0x5576f2810078 'parser' 'P'
|     `-ReturnStmt 0x5576f28395e0 <line:525:9, col:17>
|       `-UnaryOperator 0x5576f28395c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f28395b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f2810688 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5576f28102a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2810328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f28105e8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f28103e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2810460 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2810508 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5576f2839748 <col:58, line:541:5>
|     `-ReturnStmt 0x5576f2839738 <line:540:9, col:39>
|       `-CallExpr 0x5576f2839700 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2839620 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28396a0 <col:21> 'const char *' lvalue ParmVar 0x5576f28103e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f28396c0 <col:30> 'P' lvalue ParmVar 0x5576f2810460 'parser' 'P'
|         `-DeclRefExpr 0x5576f28396e0 <col:38> 'T' lvalue ParmVar 0x5576f2810508 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2810ad8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5576f28106f8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2810778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2810a38 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f2810838 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f28108b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2810958 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5576f2839880 <col:60, line:545:5>
|     `-ReturnStmt 0x5576f2839870 <line:544:9, col:41>
|       `-CallExpr 0x5576f2839838 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2839770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f28397d8 <col:23> 'const char *' lvalue ParmVar 0x5576f2810838 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f28397f8 <col:32> 'P' lvalue ParmVar 0x5576f28108b0 'parser' 'P'
|         `-DeclRefExpr 0x5576f2839818 <col:40> 'T' lvalue ParmVar 0x5576f2810958 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2810f28 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5576f2810b48 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2810bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2810e88 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f2810c88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2810d00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2810da8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5576f28399b8 <col:60, line:549:5>
|     `-ReturnStmt 0x5576f28399a8 <line:548:9, col:41>
|       `-CallExpr 0x5576f2839970 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28398a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2839910 <col:23> 'const char *' lvalue ParmVar 0x5576f2810c88 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2839930 <col:32> 'P' lvalue ParmVar 0x5576f2810d00 'parser' 'P'
|         `-DeclRefExpr 0x5576f2839950 <col:40> 'T' lvalue ParmVar 0x5576f2810da8 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2811378 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5576f2810f98 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2811018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f28112d8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f28110d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2811150 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5576f28111f8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5576f2839af0 <col:61, line:553:5>
|     `-ReturnStmt 0x5576f2839ae0 <line:552:9, col:42>
|       `-CallExpr 0x5576f2839aa8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f28399e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2839a48 <col:24> 'const char *' lvalue ParmVar 0x5576f28110d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2839a68 <col:33> 'P' lvalue ParmVar 0x5576f2811150 'parser' 'P'
|         `-DeclRefExpr 0x5576f2839a88 <col:41> 'T' lvalue ParmVar 0x5576f28111f8 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2811858 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5576f28113e8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2811468 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f28117b8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5576f2811528 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f28115a8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2811620 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5576f28116c8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5576f2839c68 <col:69, line:557:5>
|     `-ReturnStmt 0x5576f2839c58 <line:556:9, col:46>
|       `-CallExpr 0x5576f2839c18 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2839b18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2839b98 <col:21> 'const char *' lvalue ParmVar 0x5576f2811528 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f2839bb8 <col:30> 'int' lvalue ParmVar 0x5576f28115a8 'flags' 'int'
|         |-DeclRefExpr 0x5576f2839bd8 <col:37> 'P' lvalue ParmVar 0x5576f2811620 'parser' 'P'
|         `-DeclRefExpr 0x5576f2839bf8 <col:45> 'T' lvalue ParmVar 0x5576f28116c8 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2811b68 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5576f28118d0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f2811ac8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5576f2811980 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f28119f8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5576f2839da8 <col:56, line:571:5>
|     `-ReturnStmt 0x5576f2839d98 <line:570:9, col:48>
|       `-CallExpr 0x5576f2839d60 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2839c90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f2839d00 <col:30> 'const char *' lvalue ParmVar 0x5576f2811980 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f2839d20 <col:39> 'int' 0
|         `-DeclRefExpr 0x5576f2839d40 <col:42> 'P' lvalue ParmVar 0x5576f28119f8 'parser' 'P'
|-FunctionTemplateDecl 0x5576f2811ef8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5576f2811bd0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f2811e58 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5576f2811c80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2811d00 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2811d78 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5576f2839f78 <col:67, line:576:5>
|     |-CallExpr 0x5576f2839f00 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f2839dc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5576f2839e00 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5576f2839e10 <col:39> 'const char *' lvalue ParmVar 0x5576f2811c80 'keyword' 'const char *'
|     | |-BinaryOperator 0x5576f2839ec0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5576f2839e70 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5576f2839e30 <col:48> 'int' lvalue ParmVar 0x5576f2811d00 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5576f2839ea8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5576f2839e88 <col:56> 'const int' lvalue Var 0x5576f2807ca0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5576f2839ee0 <col:68> 'P' lvalue ParmVar 0x5576f2811d78 'parser' 'P'
|     `-ReturnStmt 0x5576f2839f68 <line:575:9, col:17>
|       `-UnaryOperator 0x5576f2839f50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f2839f40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f2812348 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5576f2811f68 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2811fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f28122a8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576f28120a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2812120 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5576f28121c8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5576f283a0e8 <col:62, line:592:5>
|     `-ReturnStmt 0x5576f283a0d8 <line:591:9, col:51>
|       `-CallExpr 0x5576f283a098 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f2839fa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f283a018 <col:30> 'const char *' lvalue ParmVar 0x5576f28120a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f283a038 <col:39> 'int' 0
|         |-DeclRefExpr 0x5576f283a058 <col:42> 'P' lvalue ParmVar 0x5576f2812120 'parser' 'P'
|         `-DeclRefExpr 0x5576f283a078 <col:50> 'T' lvalue ParmVar 0x5576f28121c8 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2812828 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5576f28123b8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2812438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2812788 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5576f28124f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2812578 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5576f28125f0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2812698 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5576f283a2e0 <col:73, line:597:5>
|     |-CallExpr 0x5576f283a260 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f283a100 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5576f283a140 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5576f283a150 <col:39> 'const char *' lvalue ParmVar 0x5576f28124f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5576f283a200 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5576f283a1b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5576f283a170 <col:48> 'int' lvalue ParmVar 0x5576f2812578 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5576f283a1e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5576f283a1c8 <col:56> 'const int' lvalue Var 0x5576f2807ca0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5576f283a220 <col:68> 'P' lvalue ParmVar 0x5576f28125f0 'parser' 'P'
|     | `-DeclRefExpr 0x5576f283a240 <col:76> 'T' lvalue ParmVar 0x5576f2812698 'x' 'T &'
|     `-ReturnStmt 0x5576f283a2d0 <line:596:9, col:17>
|       `-UnaryOperator 0x5576f283a2b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f283a2a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f2812dd8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5576f28128a0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2812918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2812d38 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5576f28129d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2812a50 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2812c10 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576f283a450 <col:65, line:614:5>
|     `-ReturnStmt 0x5576f283a440 <line:613:9, col:46>
|       `-CallExpr 0x5576f283a400 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f283a310 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f283a380 <col:25> 'const char *' lvalue ParmVar 0x5576f28129d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f283a3a0 <col:34> 'int' 0
|         |-DeclRefExpr 0x5576f283a3c0 <col:37> 'P' lvalue ParmVar 0x5576f2812a50 'parser' 'P'
|         `-DeclRefExpr 0x5576f283a3e0 <col:45> 'Vector<T>' lvalue ParmVar 0x5576f2812c10 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5576f2813208 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5576f2812e48 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5576f2813168 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5576f2812f00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2813050 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576f283a670 <col:55, line:618:5>
|     `-ReturnStmt 0x5576f283a660 <line:617:9, col:55>
|       `-CallExpr 0x5576f283a620 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f283a478 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f283a4e8 <col:25> 'const char *' lvalue ParmVar 0x5576f2812f00 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576f283a508 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5576f283a5e0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5576f283a600 <col:54> 'Vector<T>' lvalue ParmVar 0x5576f2813050 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5576f28137d8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5576f2813270 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f28132e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2813738 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5576f28133a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2813428 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5576f28134a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5576f28135f0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576f283a868 <col:76, line:623:5>
|     |-CallExpr 0x5576f283a7e8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576f283a688 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5576f283a6c8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5576f283a6d8 <col:34> 'const char *' lvalue ParmVar 0x5576f28133a8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5576f283a788 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5576f283a738 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5576f283a6f8 <col:43> 'int' lvalue ParmVar 0x5576f2813428 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5576f283a770 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5576f283a750 <col:51> 'const int' lvalue Var 0x5576f2807ca0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5576f283a7a8 <col:63> 'P' lvalue ParmVar 0x5576f28134a0 'parser' 'P'
|     | `-DeclRefExpr 0x5576f283a7c8 <col:71> 'Vector<T>' lvalue ParmVar 0x5576f28135f0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5576f283a858 <line:622:9, col:17>
|       `-UnaryOperator 0x5576f283a840 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f283a830 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f2813d18 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5576f2813850 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f28138c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2813c78 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5576f2813988 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2813a08 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2813b50 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576f283aad0 <col:66, line:627:5>
|     `-ReturnStmt 0x5576f283aac0 <line:626:9, col:59>
|       `-CallExpr 0x5576f283aa80 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576f283a898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576f283a908 <col:25> 'const char *' lvalue ParmVar 0x5576f2813988 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576f283a928 <col:34> 'int' lvalue ParmVar 0x5576f2813a08 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5576f283aa40 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5576f283aa60 <col:58> 'Vector<T>' lvalue ParmVar 0x5576f2813b50 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5576f2813da8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5576f283ab50 <col:25, line:633:5>
|   `-ReturnStmt 0x5576f283ab40 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5576f283ab28 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5576f283aaf8 <col:16> 'const bool' lvalue ->_status 0x5576f2822048
|         `-CXXThisExpr 0x5576f283aae8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5576f2813f28 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5576f2813e60 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5576f283ac38 <col:27, line:639:5>
|   |-BinaryOperator 0x5576f283abe0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576f283ab68 <col:9> 'bool' lvalue ParmVar 0x5576f2813e60 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576f283abc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576f283ab98 <col:13> 'bool' lvalue ->_status 0x5576f2822048
|   |     `-CXXThisExpr 0x5576f283ab88 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5576f283ac28 <line:638:9, col:17>
|     `-UnaryOperator 0x5576f283ac10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f283ac00 <col:17> 'Args *' this
|-CXXMethodDecl 0x5576f28140a8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5576f2813fe8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5576f283ad28 <col:39, line:644:5>
|   |-BinaryOperator 0x5576f283acd0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576f283ac58 <col:9> 'bool' lvalue ParmVar 0x5576f2813fe8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576f283acb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576f283ac88 <col:13> 'const bool' lvalue ->_status 0x5576f2822048
|   |     `-CXXThisExpr 0x5576f283ac78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5576f283ad18 <line:643:9, col:17>
|     `-UnaryOperator 0x5576f283ad00 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f283acf0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5576f2814170 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5576f283add0 <col:30, line:651:5>
|   `-ReturnStmt 0x5576f283adc0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5576f283ada8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5576f283ad78 <col:16> 'bool' lvalue ->_read_status 0x5576f2717200
|         `-ImplicitCastExpr 0x5576f283ad58 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5576f283ad48 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5576f28142b8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5576f2814228 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5576f283aed8 <col:32, line:658:5>
|   |-BinaryOperator 0x5576f283ae80 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576f283ade8 <col:9> 'bool' lvalue ParmVar 0x5576f2814228 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576f283ae68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576f283ae38 <col:13> 'bool' lvalue ->_read_status 0x5576f2717200
|   |     `-ImplicitCastExpr 0x5576f283ae18 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5576f283ae08 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5576f283aec8 <line:657:9, col:17>
|     `-UnaryOperator 0x5576f283aeb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f283aea0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5576f2814408 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5576f2814378 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5576f283afe8 <col:44, line:663:5>
|   |-BinaryOperator 0x5576f283af90 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576f283aef8 <col:9> 'bool' lvalue ParmVar 0x5576f2814378 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576f283af78 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576f283af48 <col:13> 'bool' lvalue ->_read_status 0x5576f2717200
|   |     `-ImplicitCastExpr 0x5576f283af28 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5576f283af18 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5576f283afd8 <line:662:9, col:17>
|     `-UnaryOperator 0x5576f283afc0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f283afb0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5576f28144d0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5576f2814598 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5576f2814660 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5576f2814728 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5576f2814a38 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5576f28147c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5576f2814998 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5576f28148a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5576f283b3a0 <col:19, line:706:5>
|     `-IfStmt 0x5576f283b378 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5576f283b0e8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5576f283b2a8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5576f283b278 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5576f283b238 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5576f283b140 <col:42> '<bound member function type>' ->simple_slot 0x5576f28344f0
|       |     | `-CXXThisExpr 0x5576f283b130 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5576f283b1d8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5576f283b190 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5576f25a1728
|       |     | `-DeclRefExpr 0x5576f283b170 <col:55> 'T' lvalue ParmVar 0x5576f28148a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5576f283b218 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5576f283b368 <line:705:13, col:34>
|         `-CallExpr 0x5576f283b340 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5576f283b2c8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5576f283b320 <col:33> 'T' lvalue ParmVar 0x5576f28148a8 'x' 'T &'
|-FunctionTemplateDecl 0x5576f2814d08 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5576f2814a98 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5576f2814c68 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5576f2814b78 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5576f283b780 <col:31, line:717:5>
|     |-DeclStmt 0x5576f283b4e0 <line:713:9, col:23>
|     | `-VarDecl 0x5576f283b3c8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5576f283b4b8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5576f283b440 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5576f283b498 <col:21> 'T' lvalue ParmVar 0x5576f2814b78 'x' 'T &'
|     |-IfStmt 0x5576f283b730 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5576f283b5d8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5576f283b710 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5576f283b6b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5576f283b640 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|     |   | `-DeclRefExpr 0x5576f283b620 <col:14> 'T *' lvalue Var 0x5576f283b3c8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5576f283b6f0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5576f283b768 <line:716:9, col:16>
|       `-DeclRefExpr 0x5576f283b748 <col:16> 'T *' lvalue Var 0x5576f283b3c8 's' 'T *'
|-FunctionTemplateDecl 0x5576f2815118 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5576f2814d68 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5576f2814de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5576f2815078 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5576f2814ec8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5576f2814f68 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5576f283ba90 <col:37, line:726:5>
|     |-IfStmt 0x5576f283ba20 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5576f283ba40 <line:723:13, col:26>
|     | | `-VarDecl 0x5576f283b7e8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5576f283b8d8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5576f283b860 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5576f283b8b8 <col:25> 'T' lvalue ParmVar 0x5576f2814ec8 'x' 'T &'
|     | |-DeclRefExpr 0x5576f283b900 <col:16> 'T *' lvalue Var 0x5576f283b7e8 's' 'T *'
|     | `-BinaryOperator 0x5576f283ba00 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5576f283b9b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5576f283b940 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|     |   | `-DeclRefExpr 0x5576f283b920 <col:14> 'T *' lvalue Var 0x5576f283b7e8 's' 'T *'
|     |   `-DeclRefExpr 0x5576f283b9e0 <col:18> 'const V' lvalue ParmVar 0x5576f2814f68 'value' 'const V &'
|     `-ReturnStmt 0x5576f283ba80 <line:725:9, col:17>
|       `-UnaryOperator 0x5576f283ba68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576f283ba58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576f2815518 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5576f2815180 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5576f2815478 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5576f2815230 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f28152b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2815358 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5576f283c8b0 <col:65, line:737:5>
|     |-DeclStmt 0x5576f283bb28 <line:732:9, col:26>
|     | `-VarDecl 0x5576f283bac0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576f283c878 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5576f283c898 <line:733:13, col:58>
|       | `-VarDecl 0x5576f283bb50 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576f283bd30 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576f283bd00 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576f283bce8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576f283bcc8 <col:26, col:58> 'String' (CXXTemporary 0x5576f283bcc8)
|       |           `-CXXMemberCallExpr 0x5576f283bc58 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576f283bbc8 <col:26> '<bound member function type>' ->find 0x5576f2833b08
|       |             | `-CXXThisExpr 0x5576f283bbb8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576f283bc90 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f283bbf8 <col:31> 'const char *' lvalue ParmVar 0x5576f2815230 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576f283bca8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f283bc18 <col:40> 'int' lvalue ParmVar 0x5576f28152b0 'flags' 'int'
|       |             `-DeclRefExpr 0x5576f283bc38 <col:47> 'Args::Slot *' lvalue Var 0x5576f283bac0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576f283bde8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576f283bdd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576f283bdb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576f283bd80 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|       |       `-ImplicitCastExpr 0x5576f283bd68 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576f283bd48 <col:20> 'String' lvalue Var 0x5576f283bb50 'str' 'String'
|       `-CompoundStmt 0x5576f283c858 <col:61, line:736:9>
|         |-DeclStmt 0x5576f283c2a0 <line:734:13, col:76>
|         | `-VarDecl 0x5576f283be38 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5576f283c270 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576f283c1e0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576f283c228 <col:60> 'T' lvalue ParmVar 0x5576f2815358 'variable' 'T &'
|         |     `-UnaryOperator 0x5576f283c258 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576f283c248 <col:71> 'Args *' this
|         `-CallExpr 0x5576f283c828 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5576f283c2c8 <col:13> '<bound member function type>' ->postparse 0x5576f2833d18
|           | `-CXXThisExpr 0x5576f283c2b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5576f283c7e8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5576f283c2f8 <col:23> 'T *' lvalue Var 0x5576f283be38 's' 'T *'
|           | `-CallExpr 0x5576f283c7a8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5576f283c580 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5576f283c680 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5576f283c6a0 <col:86> 'String' lvalue Var 0x5576f283bb50 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5576f283c750 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576f283c6e0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|           |   | `-DeclRefExpr 0x5576f283c6c0 <col:92> 'T *' lvalue Var 0x5576f283be38 's' 'T *'
|           |   `-UnaryOperator 0x5576f283c790 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5576f283c780 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5576f283c808 <col:103> 'Args::Slot *' lvalue Var 0x5576f283bac0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576f2815a68 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5576f2815588 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5576f2815608 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5576f28159c8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5576f28156c8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2815748 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5576f28157e8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5576f2815888 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5576f283d750 <col:88, line:745:5>
|     |-DeclStmt 0x5576f283c948 <line:741:9, col:26>
|     | `-VarDecl 0x5576f283c8e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576f283cb68 <line:742:9, col:55>
|     | `-VarDecl 0x5576f283c970 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5576f283cb50 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5576f283cb20 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5576f283cb08 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5576f283cae8 <col:22, col:54> 'String' (CXXTemporary 0x5576f283cae8)
|     |           `-CXXMemberCallExpr 0x5576f283ca78 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5576f283c9e8 <col:22> '<bound member function type>' ->find 0x5576f2833b08
|     |             | `-CXXThisExpr 0x5576f283c9d8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5576f283cab0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576f283ca18 <col:27> 'const char *' lvalue ParmVar 0x5576f28156c8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5576f283cac8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576f283ca38 <col:36> 'int' lvalue ParmVar 0x5576f2815748 'flags' 'int'
|     |             `-DeclRefExpr 0x5576f283ca58 <col:43> 'Args::Slot *' lvalue Var 0x5576f283c8e0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5576f283cf40 <line:743:9, col:72>
|     | `-VarDecl 0x5576f283cbb8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5576f283cf10 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5576f283ce80 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5576f283cec8 <col:56> 'T' lvalue ParmVar 0x5576f28157e8 'variable' 'T &'
|     |     `-UnaryOperator 0x5576f283cef8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5576f283cee8 <col:67> 'Args *' this
|     `-CallExpr 0x5576f283d720 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5576f283cf68 <col:9> '<bound member function type>' ->postparse 0x5576f2833d18
|       | `-CXXThisExpr 0x5576f283cf58 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5576f283d6e0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5576f283cf98 <col:19> 'T *' lvalue Var 0x5576f283cbb8 's' 'T *'
|       | `-ParenExpr 0x5576f283d6c0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5576f283d690 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5576f283d678 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5576f283d660 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5576f283d640 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5576f283d610 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|       |     |       `-ImplicitCastExpr 0x5576f283d5f8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5576f283cfb8 <col:25> 'String' lvalue Var 0x5576f283c970 'str' 'String'
|       |     |-CallExpr 0x5576f283d468 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5576f283d240 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5576f283d340 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5576f283d360 <col:89> 'String' lvalue Var 0x5576f283c970 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5576f283d410 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5576f283d3a0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|       |     | | `-DeclRefExpr 0x5576f283d380 <col:95> 'T *' lvalue Var 0x5576f283cbb8 's' 'T *'
|       |     | `-UnaryOperator 0x5576f283d450 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5576f283d440 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5576f283d5d8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5576f283d5b8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5576f283d588 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5576f283d538 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5576f283d4c8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|       |         | | `-DeclRefExpr 0x5576f283d4a8 <col:109> 'T *' lvalue Var 0x5576f283cbb8 's' 'T *'
|       |         | `-DeclRefExpr 0x5576f283d568 <col:113> 'const V' lvalue ParmVar 0x5576f2815888 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5576f283d5a8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5576f283d700 <col:128> 'Args::Slot *' lvalue Var 0x5576f283c8e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576f2815f98 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5576f2815ae0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f2815b58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2815ef8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5576f2815c18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2815c98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2815d10 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2815db8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5576f283e348 <col:75, line:754:5>
|     |-DeclStmt 0x5576f283d7f8 <line:749:9, col:26>
|     | `-VarDecl 0x5576f283d790 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576f283e310 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5576f283e330 <line:750:13, col:58>
|       | `-VarDecl 0x5576f283d820 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576f283da00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576f283d9d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576f283d9b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576f283d998 <col:26, col:58> 'String' (CXXTemporary 0x5576f283d998)
|       |           `-CXXMemberCallExpr 0x5576f283d928 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576f283d898 <col:26> '<bound member function type>' ->find 0x5576f2833b08
|       |             | `-CXXThisExpr 0x5576f283d888 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576f283d960 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f283d8c8 <col:31> 'const char *' lvalue ParmVar 0x5576f2815c18 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576f283d978 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f283d8e8 <col:40> 'int' lvalue ParmVar 0x5576f2815c98 'flags' 'int'
|       |             `-DeclRefExpr 0x5576f283d908 <col:47> 'Args::Slot *' lvalue Var 0x5576f283d790 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576f283dab8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576f283daa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576f283da80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576f283da50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|       |       `-ImplicitCastExpr 0x5576f283da38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576f283da18 <col:20> 'String' lvalue Var 0x5576f283d820 'str' 'String'
|       `-CompoundStmt 0x5576f283e2f0 <col:61, line:753:9>
|         |-DeclStmt 0x5576f283de90 <line:751:13, col:63>
|         | `-VarDecl 0x5576f283db08 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5576f283de60 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576f283ddd0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576f283de18 <col:47> 'T' lvalue ParmVar 0x5576f2815db8 'variable' 'T &'
|         |     `-UnaryOperator 0x5576f283de48 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576f283de38 <col:58> 'Args *' this
|         `-CallExpr 0x5576f283e2c0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5576f283deb8 <col:13> '<bound member function type>' ->postparse 0x5576f2833d18
|           | `-CXXThisExpr 0x5576f283dea8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5576f283e280 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5576f283dee8 <col:23> 'T *' lvalue Var 0x5576f283db08 's' 'T *'
|           | `-CallExpr 0x5576f283e240 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5576f283e0d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5576f283e118 <col:56> 'P' lvalue ParmVar 0x5576f2815d10 'parser' 'P'
|           |   |-DeclRefExpr 0x5576f283e138 <col:64> 'String' lvalue Var 0x5576f283d820 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5576f283e1e8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576f283e178 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|           |   | `-DeclRefExpr 0x5576f283e158 <col:70> 'T *' lvalue Var 0x5576f283db08 's' 'T *'
|           |   `-UnaryOperator 0x5576f283e228 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5576f283e218 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5576f283e2a0 <col:81> 'Args::Slot *' lvalue Var 0x5576f283d790 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576f28165f8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5576f2816010 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5576f2816088 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5576f2816108 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5576f2816558 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5576f28161d0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2816250 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5576f28162c8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2816368 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5576f2816408 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5576f2841450 <col:98, line:762:5>
|     |-DeclStmt 0x5576f283e3e0 <line:758:9, col:26>
|     | `-VarDecl 0x5576f283e378 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576f283e600 <line:759:9, col:55>
|     | `-VarDecl 0x5576f283e408 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5576f283e5e8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5576f283e5b8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5576f283e5a0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5576f283e580 <col:22, col:54> 'String' (CXXTemporary 0x5576f283e580)
|     |           `-CXXMemberCallExpr 0x5576f283e510 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5576f283e480 <col:22> '<bound member function type>' ->find 0x5576f2833b08
|     |             | `-CXXThisExpr 0x5576f283e470 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5576f283e548 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576f283e4b0 <col:27> 'const char *' lvalue ParmVar 0x5576f28161d0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5576f283e560 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576f283e4d0 <col:36> 'int' lvalue ParmVar 0x5576f2816250 'flags' 'int'
|     |             `-DeclRefExpr 0x5576f283e4f0 <col:43> 'Args::Slot *' lvalue Var 0x5576f283e378 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5576f283ea20 <line:760:9, col:59>
|     | `-VarDecl 0x5576f283e658 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5576f283e9f0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5576f283e960 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5576f283e9a8 <col:43> 'T' lvalue ParmVar 0x5576f2816368 'variable' 'T &'
|     |     `-UnaryOperator 0x5576f283e9d8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5576f283e9c8 <col:54> 'Args *' this
|     `-CallExpr 0x5576f2841420 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5576f283ea48 <col:9> '<bound member function type>' ->postparse 0x5576f2833d18
|       | `-CXXThisExpr 0x5576f283ea38 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5576f283f068 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5576f283ea78 <col:19> 'T *' lvalue Var 0x5576f283e658 's' 'T *'
|       | `-ParenExpr 0x5576f283f048 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5576f283f018 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5576f283f000 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5576f283efe8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5576f283efc8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5576f283ef98 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|       |     |       `-ImplicitCastExpr 0x5576f283ef80 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5576f283ea98 <col:25> 'String' lvalue Var 0x5576f283e408 'str' 'String'
|       |     |-CallExpr 0x5576f283edf0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5576f283ec80 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5576f283ecc8 <col:59> 'P' lvalue ParmVar 0x5576f28162c8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5576f283ece8 <col:67> 'String' lvalue Var 0x5576f283e408 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5576f283ed98 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5576f283ed28 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|       |     | | `-DeclRefExpr 0x5576f283ed08 <col:73> 'T *' lvalue Var 0x5576f283e658 's' 'T *'
|       |     | `-UnaryOperator 0x5576f283edd8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5576f283edc8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5576f283ef60 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5576f283ef40 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5576f283ef10 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5576f283eec0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5576f283ee50 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|       |         | | `-DeclRefExpr 0x5576f283ee30 <col:87> 'T *' lvalue Var 0x5576f283e658 's' 'T *'
|       |         | `-DeclRefExpr 0x5576f283eef0 <col:91> 'const V' lvalue ParmVar 0x5576f2816408 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5576f283ef30 <col:98> 'bool' true
|       `-DeclRefExpr 0x5576f283f088 <col:106> 'Args::Slot *' lvalue Var 0x5576f283e378 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576f2816c68 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5576f2816678 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f28166f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576f2816778 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576f2816bc8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5576f2816840 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f28168c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2816938 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5576f28169d8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5576f2816a78 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5576f2842428 <col:60, line:773:5>
|     |-DeclStmt 0x5576f28414f8 <line:767:9, col:26>
|     | `-VarDecl 0x5576f2841490 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576f28423f0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5576f2842410 <line:768:13, col:58>
|       | `-VarDecl 0x5576f2841520 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576f2841700 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576f28416d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576f28416b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576f2841698 <col:26, col:58> 'String' (CXXTemporary 0x5576f2841698)
|       |           `-CXXMemberCallExpr 0x5576f2841628 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576f2841598 <col:26> '<bound member function type>' ->find 0x5576f2833b08
|       |             | `-CXXThisExpr 0x5576f2841588 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576f2841660 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f28415c8 <col:31> 'const char *' lvalue ParmVar 0x5576f2816840 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576f2841678 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f28415e8 <col:40> 'int' lvalue ParmVar 0x5576f28168c0 'flags' 'int'
|       |             `-DeclRefExpr 0x5576f2841608 <col:47> 'Args::Slot *' lvalue Var 0x5576f2841490 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576f28417b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576f28417a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576f2841780 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576f2841750 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|       |       `-ImplicitCastExpr 0x5576f2841738 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576f2841718 <col:20> 'String' lvalue Var 0x5576f2841520 'str' 'String'
|       `-CompoundStmt 0x5576f28423c8 <col:61, line:772:9>
|         |-DeclStmt 0x5576f2841af0 <line:769:13, col:66>
|         | `-VarDecl 0x5576f2841808 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5576f2841ac0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576f2841a30 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576f2841a78 <col:49> 'T1' lvalue ParmVar 0x5576f28169d8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5576f2841aa8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576f2841a98 <col:61> 'Args *' this
|         |-DeclStmt 0x5576f2841e60 <line:770:13, col:66>
|         | `-VarDecl 0x5576f2841b78 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5576f2841e30 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576f2841da0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576f2841de8 <col:49> 'T2' lvalue ParmVar 0x5576f2816a78 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5576f2841e18 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576f2841e08 <col:61> 'Args *' this
|         `-CallExpr 0x5576f2842398 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5576f2841e88 <col:13> '<bound member function type>' ->postparse 0x5576f2833d18
|           | `-CXXThisExpr 0x5576f2841e78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5576f2842358 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5576f2841ef8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5576f2841eb8 <col:23> 'T1 *' lvalue Var 0x5576f2841808 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5576f2841ed8 <col:29> 'T2 *' lvalue Var 0x5576f2841b78 's2' 'T2 *'
|           | `-CallExpr 0x5576f2842310 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5576f28420e0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5576f2842128 <col:63> 'P' lvalue ParmVar 0x5576f2816938 'parser' 'P'
|           |   |-DeclRefExpr 0x5576f2842148 <col:71> 'String' lvalue Var 0x5576f2841520 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5576f28421f8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576f2842188 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|           |   | `-DeclRefExpr 0x5576f2842168 <col:77> 'T1 *' lvalue Var 0x5576f2841808 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5576f28422b8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576f2842248 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|           |   | `-DeclRefExpr 0x5576f2842228 <col:82> 'T2 *' lvalue Var 0x5576f2841b78 's2' 'T2 *'
|           |   `-UnaryOperator 0x5576f28422f8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5576f28422e8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5576f2842378 <col:94> 'Args::Slot *' lvalue Var 0x5576f2841490 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576f281f4b8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5576f2816ce8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f281f418 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5576f2816da0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f2816e20 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5576f2816e98 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5576f2842940 <col:67, line:780:5>
|     |-DeclStmt 0x5576f28424c0 <line:777:9, col:26>
|     | `-VarDecl 0x5576f2842458 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576f2842908 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5576f2842928 <line:778:13, col:58>
|       | `-VarDecl 0x5576f28424e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576f28426c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576f2842698 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576f2842680 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576f2842660 <col:26, col:58> 'String' (CXXTemporary 0x5576f2842660)
|       |           `-CXXMemberCallExpr 0x5576f28425f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576f2842560 <col:26> '<bound member function type>' ->find 0x5576f2833b08
|       |             | `-CXXThisExpr 0x5576f2842550 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576f2842628 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f2842590 <col:31> 'const char *' lvalue ParmVar 0x5576f2816da0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576f2842640 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576f28425b0 <col:40> 'int' lvalue ParmVar 0x5576f2816e20 'flags' 'int'
|       |             `-DeclRefExpr 0x5576f28425d0 <col:47> 'Args::Slot *' lvalue Var 0x5576f2842458 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576f2842780 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576f2842768 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576f2842748 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576f2842718 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|       |       `-ImplicitCastExpr 0x5576f2842700 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576f28426e0 <col:20> 'String' lvalue Var 0x5576f28424e8 'str' 'String'
|       `-CallExpr 0x5576f28428d8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5576f28427a8 <col:13> '<bound member function type>' ->postparse 0x5576f2833d18
|         | `-CXXThisExpr 0x5576f2842798 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5576f2842888 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5576f28427f8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5576f28427d8 <col:23> 'P' lvalue ParmVar 0x5576f2816e98 'parser' 'P'
|         | |-DeclRefExpr 0x5576f2842840 <col:36> 'String' lvalue Var 0x5576f28424e8 'str' 'String'
|         | `-UnaryOperator 0x5576f2842870 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5576f2842860 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5576f28428b8 <col:49> 'Args::Slot *' lvalue Var 0x5576f2842458 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576f281f858 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5576f281f528 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576f281f7b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5576f281f5e0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f281f660 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5576f281f6d8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5576f28432b0 <col:71, line:792:5>
|     |-DeclStmt 0x5576f28429d8 <line:784:9, col:26>
|     | `-VarDecl 0x5576f2842970 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576f2842aa8 <line:785:9, col:29>
|     | `-VarDecl 0x5576f2842a08 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5576f2842a90 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5576f2842a70 <col:28> 'int' 1
|     |-WhileStmt 0x5576f2843160 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5576f2843180 <line:786:16, col:61>
|     | | `-VarDecl 0x5576f2842ad0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5576f2842cb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5576f2842c80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5576f2842c68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5576f2842c48 <col:29, col:61> 'String' (CXXTemporary 0x5576f2842c48)
|     | |           `-CXXMemberCallExpr 0x5576f2842bd8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5576f2842b48 <col:29> '<bound member function type>' ->find 0x5576f2833b08
|     | |             | `-CXXThisExpr 0x5576f2842b38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5576f2842c10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576f2842b78 <col:34> 'const char *' lvalue ParmVar 0x5576f281f5e0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5576f2842c28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576f2842b98 <col:43> 'int' lvalue ParmVar 0x5576f281f660 'flags' 'int'
|     | |             `-DeclRefExpr 0x5576f2842bb8 <col:50> 'Args::Slot *' lvalue Var 0x5576f2842970 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5576f2842d68 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576f2842d50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576f2842d30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576f2842d00 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|     | |       `-ImplicitCastExpr 0x5576f2842ce8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5576f2842cc8 <col:23> 'String' lvalue Var 0x5576f2842ad0 'str' 'String'
|     | `-CompoundStmt 0x5576f2843138 <col:64, line:790:9>
|     |   |-CallExpr 0x5576f2842ec0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5576f2842d90 <col:13> '<bound member function type>' ->postparse 0x5576f2833d18
|     |   | | `-CXXThisExpr 0x5576f2842d80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5576f2842e70 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5576f2842de0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5576f2842dc0 <col:23> 'P' lvalue ParmVar 0x5576f281f6d8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5576f2842e28 <col:36> 'String' lvalue Var 0x5576f2842ad0 'str' 'String'
|     |   | | `-UnaryOperator 0x5576f2842e58 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5576f2842e48 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5576f2842ea0 <col:49> 'Args::Slot *' lvalue Var 0x5576f2842970 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5576f2843058 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5576f2842ef0 <col:13> 'int' lvalue Var 0x5576f2842a08 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576f2843040 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576f2843020 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5576f2842f88 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576f2842f68 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576f2842f50 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5576f2842f10 <col:28> 'int' lvalue Var 0x5576f2842a08 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576f2842f30 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5576f2843008 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5576f2842fd8 <col:49> 'bool' lvalue ->_read_status 0x5576f2717200
|     |   |         `-ImplicitCastExpr 0x5576f2842fb8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5576f2842fa8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5576f2843108 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5576f2843078 <col:13> 'int' lvalue ParmVar 0x5576f281f660 'flags' 'int'
|     |     `-UnaryOperator 0x5576f28430f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5576f28430d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576f28430b8 <col:23> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5576f2843290 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5576f28431c8 <col:9> 'bool' lvalue ->_read_status 0x5576f2717200
|       | `-ImplicitCastExpr 0x5576f28431a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5576f2843198 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5576f2843270 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576f2843250 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576f2843238 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5576f28431f8 <col:25> 'int' lvalue Var 0x5576f2842a08 'read_status' 'int'
|           `-IntegerLiteral 0x5576f2843218 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5576f281fd38 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5576f281f8c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f281f948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f281fc98 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5576f281fa08 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f281fa88 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5576f281fb00 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5576f281fba8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5576f2844240 <col:84, line:805:5>
|     |-DeclStmt 0x5576f2843358 <line:796:9, col:26>
|     | `-VarDecl 0x5576f28432f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576f2843428 <line:797:9, col:29>
|     | `-VarDecl 0x5576f2843388 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5576f2843410 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5576f28433f0 <col:28> 'int' 1
|     |-DeclStmt 0x5576f2843760 <line:798:9, col:71>
|     | `-VarDecl 0x5576f2843478 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5576f2843730 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5576f28436a0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5576f28436e8 <col:55> 'T' lvalue ParmVar 0x5576f281fba8 'variable' 'T &'
|     |     `-UnaryOperator 0x5576f2843718 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5576f2843708 <col:66> 'Args *' this
|     |-WhileStmt 0x5576f28440f0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5576f2844110 <line:799:16, col:61>
|     | | `-VarDecl 0x5576f2843788 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5576f2843968 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5576f2843938 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5576f2843920 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5576f2843900 <col:29, col:61> 'String' (CXXTemporary 0x5576f2843900)
|     | |           `-CXXMemberCallExpr 0x5576f2843890 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5576f2843800 <col:29> '<bound member function type>' ->find 0x5576f2833b08
|     | |             | `-CXXThisExpr 0x5576f28437f0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5576f28438c8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576f2843830 <col:34> 'const char *' lvalue ParmVar 0x5576f281fa08 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5576f28438e0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576f2843850 <col:43> 'int' lvalue ParmVar 0x5576f281fa88 'flags' 'int'
|     | |             `-DeclRefExpr 0x5576f2843870 <col:50> 'Args::Slot *' lvalue Var 0x5576f28432f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5576f2843a20 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576f2843a08 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576f28439e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576f28439b8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|     | |       `-ImplicitCastExpr 0x5576f28439a0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5576f2843980 <col:23> 'String' lvalue Var 0x5576f2843788 'str' 'String'
|     | `-CompoundStmt 0x5576f28440c8 <col:64, line:803:9>
|     |   |-CallExpr 0x5576f2843e50 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5576f2843a48 <col:13> '<bound member function type>' ->postparse 0x5576f2833d18
|     |   | | `-CXXThisExpr 0x5576f2843a38 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5576f2843e10 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5576f2843a78 <col:23> 'T *' lvalue Var 0x5576f2843478 's' 'T *'
|     |   | | `-CallExpr 0x5576f2843dd0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5576f2843c60 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5576f2843ca8 <col:56> 'P' lvalue ParmVar 0x5576f281fb00 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5576f2843cc8 <col:64> 'String' lvalue Var 0x5576f2843788 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5576f2843d78 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5576f2843d08 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|     |   | |   | `-DeclRefExpr 0x5576f2843ce8 <col:70> 'T *' lvalue Var 0x5576f2843478 's' 'T *'
|     |   | |   `-UnaryOperator 0x5576f2843db8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5576f2843da8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5576f2843e30 <col:81> 'Args::Slot *' lvalue Var 0x5576f28432f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5576f2843fe8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5576f2843e80 <col:13> 'int' lvalue Var 0x5576f2843388 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576f2843fd0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576f2843fb0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5576f2843f18 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576f2843ef8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576f2843ee0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5576f2843ea0 <col:28> 'int' lvalue Var 0x5576f2843388 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576f2843ec0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5576f2843f98 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5576f2843f68 <col:49> 'bool' lvalue ->_read_status 0x5576f2717200
|     |   |         `-ImplicitCastExpr 0x5576f2843f48 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5576f2843f38 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5576f2844098 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5576f2844008 <col:13> 'int' lvalue ParmVar 0x5576f281fa88 'flags' 'int'
|     |     `-UnaryOperator 0x5576f2844080 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5576f2844068 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576f2844048 <col:23> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5576f2844220 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5576f2844158 <col:9> 'bool' lvalue ->_read_status 0x5576f2717200
|       | `-ImplicitCastExpr 0x5576f2844138 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5576f2844128 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5576f2844200 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576f28441e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576f28441c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5576f2844188 <col:25> 'int' lvalue Var 0x5576f2843388 'read_status' 'int'
|           `-IntegerLiteral 0x5576f28441a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5576f2820318 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5576f281fdb0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576f281fe28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576f2820278 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5576f281fee8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576f281ff68 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5576f281ffe0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5576f2820130 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5576f2845048 <col:87, line:821:5>
|     |-DeclStmt 0x5576f28442f0 <line:809:9, col:26>
|     | `-VarDecl 0x5576f2844288 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576f28443c0 <line:810:9, col:29>
|     | `-VarDecl 0x5576f2844320 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5576f28443a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5576f2844388 <col:28> 'int' 1
|     |-DeclStmt 0x5576f2844608 <line:811:9, col:38>
|     | `-VarDecl 0x5576f28444f0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5576f28445e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5576f2844568 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5576f28445c0 <col:29> 'Vector<T>' lvalue ParmVar 0x5576f2820130 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5576f2844ef8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5576f2844f18 <line:812:16, col:61>
|     | | `-VarDecl 0x5576f2844630 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5576f2844810 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5576f28447e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5576f28447c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5576f28447a8 <col:29, col:61> 'String' (CXXTemporary 0x5576f28447a8)
|     | |           `-CXXMemberCallExpr 0x5576f2844738 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5576f28446a8 <col:29> '<bound member function type>' ->find 0x5576f2833b08
|     | |             | `-CXXThisExpr 0x5576f2844698 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5576f2844770 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576f28446d8 <col:34> 'const char *' lvalue ParmVar 0x5576f281fee8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5576f2844788 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576f28446f8 <col:43> 'int' lvalue ParmVar 0x5576f281ff68 'flags' 'int'
|     | |             `-DeclRefExpr 0x5576f2844718 <col:50> 'Args::Slot *' lvalue Var 0x5576f2844288 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5576f28448c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576f28448b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576f2844890 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576f2844860 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5576f25646f8
|     | |       `-ImplicitCastExpr 0x5576f2844848 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5576f2844828 <col:23> 'String' lvalue Var 0x5576f2844630 'str' 'String'
|     | `-CompoundStmt 0x5576f2844ec0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5576f2844988 <line:813:13, col:23>
|     |   | `-VarDecl 0x5576f28448f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5576f2844968 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5576f2844b08 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5576f28449b0 <col:13> '<bound member function type>' ->postparse 0x5576f2833d18
|     |   | | `-CXXThisExpr 0x5576f28449a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5576f2844ab0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5576f2844a00 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5576f28449e0 <col:23> 'P' lvalue ParmVar 0x5576f281ffe0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5576f2844a48 <col:36> 'String' lvalue Var 0x5576f2844630 'str' 'String'
|     |   | | |-DeclRefExpr 0x5576f2844a68 <col:41> 'T' lvalue Var 0x5576f28448f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5576f2844a98 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5576f2844a88 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5576f2844ae8 <col:53> 'Args::Slot *' lvalue Var 0x5576f2844288 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5576f2844c60 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5576f2844b98 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5576f2844b68 <col:17> 'bool' lvalue ->_read_status 0x5576f2717200
|     |   | |   `-ImplicitCastExpr 0x5576f2844b48 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5576f2844b38 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5576f2844c38 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5576f2844bd0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5576f2844bb0 <col:17> 'Vector<T> *' lvalue Var 0x5576f28444f0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5576f2844c18 <col:30> 'T' lvalue Var 0x5576f28448f0 'sx' 'T'
|     |   |-BinaryOperator 0x5576f2844de0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5576f2844c78 <col:13> 'int' lvalue Var 0x5576f2844320 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576f2844dc8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576f2844da8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5576f2844d10 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576f2844cf0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576f2844cd8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5576f2844c98 <col:28> 'int' lvalue Var 0x5576f2844320 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576f2844cb8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5576f2844d90 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5576f2844d60 <col:49> 'bool' lvalue ->_read_status 0x5576f2717200
|     |   |         `-ImplicitCastExpr 0x5576f2844d40 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5576f2844d30 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5576f2844e90 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5576f2844e00 <col:13> 'int' lvalue ParmVar 0x5576f281ff68 'flags' 'int'
|     |     `-UnaryOperator 0x5576f2844e78 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5576f2844e60 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576f2844e40 <col:23> 'const int' lvalue Var 0x5576f28079b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5576f2845028 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5576f2844f60 <col:9> 'bool' lvalue ->_read_status 0x5576f2717200
|       | `-ImplicitCastExpr 0x5576f2844f40 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5576f2844f30 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5576f2845008 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576f2844fe8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576f2844fd0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5576f2844f90 <col:25> 'int' lvalue Var 0x5576f2844320 'read_status' 'int'
|           `-IntegerLiteral 0x5576f2844fb0 <col:40> 'int' 1
|-AccessSpecDecl 0x5576f2820390 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5576f28203b8 prev 0x5576f271ca38 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5576f28204b0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5576f28205a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5576f2845080 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5576f2820690 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5576f2845090 <col:25, line:830:9>
| |-CXXMethodDecl 0x5576f2820790 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5576f2820840 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5576f28208e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5576f28208e8
| | `-ParmVarDecl 0x5576f28209f8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5576f28211b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5576f28211b8
|   `-ParmVarDecl 0x5576f28212c8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5576f2820a68 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5576f2820bc8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5576f2820dc0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5576f2820c70 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5576f2820ce8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5576f2845270 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5576f2821078 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5576f28450e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5576f28450a0 <col:20> 'void *' lvalue ParmVar 0x5576f2820c70 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5576f28210e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5576f2845168 <col:32, col:45> 'char *' array Function 0x5576f2387368 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5576f2845150 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5576f2845120 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5576f2820ce8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5576f2821140 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5576f2845230 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5576f28451f0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5576f2820ce8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5576f28452f0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5576f2820ec0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5576f2820690 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5576f2845378 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5576f2845358 <line:840:13, col:22> 'void' array Function 0x5576f23876c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5576f2845340 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5576f2845310 <col:22> 'char *' lvalue ->_slot 0x5576f28210e0
| |         `-CXXThisExpr 0x5576f2845300 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5576f2820fc0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5576f2820790 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5576f2845568 <col:22, line:844:9>
| |   `-CallExpr 0x5576f28454d0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5576f28454b8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5576f2845498 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5576f2493148 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5576f2845508 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5576f28453e8 <col:20> 'void *' lvalue ->_ptr 0x5576f2821078
| |     |   `-CXXThisExpr 0x5576f28453d8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5576f2845538 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5576f2845520 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5576f2845428 <col:26> 'char *' lvalue ->_slot 0x5576f28210e0
| |     |     `-CXXThisExpr 0x5576f2845418 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5576f2845550 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5576f2845468 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5576f2821140
| |         `-CXXThisExpr 0x5576f2845458 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5576f2821078 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5576f28210e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5576f2821140 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5576f2821338 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5576f2821338
| | `-ParmVarDecl 0x5576f2821448 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5576f28214e8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5576f28214e8
|   `-ParmVarDecl 0x5576f28215f8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5576f2821798 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5576f2821668 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5576f2821708 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5576f2821a30 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5576f2821c28 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5576f2821af8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5576f2821da8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5576f28455a0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5576f2845580 <col:20> 'T *' lvalue ParmVar 0x5576f2821af8 'ptr' 'T *'
|   | `-CompoundStmt 0x5576f28455f0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5576f2821cf8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5576f2820790 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5576f28457a0 <col:22, line:857:9>
|   |   `-CallExpr 0x5576f2845770 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5576f2845600 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5576f254b878 0x5576f24f5ba8
|   |     |-CXXOperatorCallExpr 0x5576f2845700 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5576f2845690 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5576f2758828 0x5576f2758448 0x5576f2758078 0x5576f2757c98 0x5576f27578b8 0x5576f27574e8
|   |     | `-MemberExpr 0x5576f2845660 <col:29> 'T *' lvalue ->_ptr 0x5576f2821da8
|   |     |   `-CXXThisExpr 0x5576f2845650 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5576f2845740 <col:35> 'T' lvalue ->_slot 0x5576f2821e08
|   |       `-CXXThisExpr 0x5576f2845730 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5576f2821da8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5576f2821e08 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5576f2821e70 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5576f2821f70 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5576f2821fc0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f2821f50 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5576f2821f30 <col:31> 'int' 48
|-FieldDecl 0x5576f2821fe8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5576f2822048 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5576f28220a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5576f28221e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5576f28333b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5576f2833410 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5576f28334c0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5576f28336e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5576f28335f0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5576f2833838 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5576f28337a8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5576f2833b08 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5576f28338f8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5576f2833978 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5576f2833a20 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5576f2833d18 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5576f2833bd0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5576f2833c48 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5576f2833de8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5576f2833f38 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5576f2833ea0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5576f28342c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5576f2833ff8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5576f2834078 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5576f2834120 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5576f28341d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5576f28344f0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5576f28343a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5576f2834418 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5576f2834808 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5576f28345a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5576f2834768 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5576f2834678 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f25545a0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f25546b8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5576f2554748 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5576f2554818 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5576f2554900 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f2554b18 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5576f25549c0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2554cc8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5576f2554bd0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5576f2554e10 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5576f2554d80 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5576f2554f58 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5576f2554ec8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f25550a0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5576f2555010 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2555168 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5576f25552b0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5576f2555220 <col:28> col:31 'int'
|-CXXMethodDecl 0x5576f2555378 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5576f25554c0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5576f2555430 <col:28> col:31 'int'
|-CXXMethodDecl 0x5576f2555638 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5576f2555578 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2555780 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5576f25556f0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2555848 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5576f2555a08 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5576f25558f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5576f2555970 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2555c58 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5576f2555ac8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576f2555b40 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576f2555d08 <col:86> "" ""
|-CXXMethodDecl 0x5576f2555f78 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5576f2555de8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5576f2555e60 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2556128 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5576f2556038 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5576f25562d8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5576f25561e0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5576f25565a8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5576f2556390 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5576f2556408 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5576f2556480 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2556888 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5576f2556670 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5576f25566e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576f2556760 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576f2556940 <col:115> "" ""
|-AccessSpecDecl 0x5576f25569b0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5576f25569e8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2557f00 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5576f2557f00
| `-ParmVarDecl 0x5576f2558008 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5576f25580a8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5576f25580a8
| `-ParmVarDecl 0x5576f25581b8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5576f258d7e8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576f277f5e0 <col:7>
|-CXXConstructorDecl 0x5576f258d8c0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5576f258d8c0
| `-ParmVarDecl 0x5576f258d9d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5576f258da48 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5576f258da48
| `-ParmVarDecl 0x5576f258db58 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5576f2781fe0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f276e188 prev 0x5576f2763390 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f276e280 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5576f276e370 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5576f276e498 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5576f276e618 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5576f276e798 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5576f276e918 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5576f277f748 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576f277ffb8 <col:11>
|-CXXDestructorDecl 0x5576f277f820 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5576f277f958 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5576f277f958
| `-ParmVarDecl 0x5576f277fa68 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5576f277fb08 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576f277fb08
| `-ParmVarDecl 0x5576f277fc18 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5576f27829d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f2782ae8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5576f2782d68 <col:11>
|   `-ReturnStmt 0x5576f2782d58 <col:11>
|     `-UnaryOperator 0x5576f2782d40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576f2782d30 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5576f2782b58 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576f2782b58
  `-ParmVarDecl 0x5576f2782c68 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f276e980 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f276ea98 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5576f276eb38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5576f276eba0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5576f276ec08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5576f276ec70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5576f276ecd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5576f276ed90 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5576f276edf0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5576f276ee50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5576f277f658 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5576f276eb38 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5576f277ffc8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5576f2780020 <col:12>
|-CXXConstructorDecl 0x5576f277fc88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5576f277fc88
| `-ParmVarDecl 0x5576f277fd98 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5576f277fe38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5576f277fe38
| `-ParmVarDecl 0x5576f277ff48 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5576f27820c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f275caa0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576f275cbb8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5576f275cc48 <col:16, col:22> col:16 public
|-EnumDecl 0x5576f275cc70 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5576f275cd70 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5576f275ce50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f275cd50 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5576f275cd30 <col:21> 'int' 28
| `-EnumConstantDecl 0x5576f275ce00 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5576f275ce68 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f275cde0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5576f275cdc0 <col:22> 'int' 64
|-CXXMethodDecl 0x5576f275d1a8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5576f275ce90 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576f275cf10 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5576f275cf88 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576f275d000 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576f275d268 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5576f275d468 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5576f275d2e0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5576f275d358 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576f275d518 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5576f275d678 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5576f275d588 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576f275d720 <col:72> warn_unused_result ""
|-TypedefDecl 0x5576f275da80 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5576f275da10 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5576f275d9b0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5576f275d970 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5576f22342d0 'void'
|       |-PointerType 0x5576f24dce40 'unsigned char *'
|       | `-BuiltinType 0x5576f22343d0 'unsigned char'
|       |-TypedefType 0x5576f22d93b0 'size_t' sugar
|       | |-Typedef 0x5576f22a4b20 'size_t'
|       | `-BuiltinType 0x5576f2234430 'unsigned long'
|       `-PointerType 0x5576f2234ad0 'void *'
|         `-BuiltinType 0x5576f22342d0 'void'
|-CXXMethodDecl 0x5576f275def8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5576f275daf0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5576f275db68 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576f275dc00 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5576f275dc80 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5576f27785f0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5576f27785d8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5576f27785a0 <col:58> 'int' 0
| |-ParmVarDecl 0x5576f275dd00 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5576f2778618 <col:76> 'int' 0
| |-ParmVarDecl 0x5576f275dd80 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5576f2778638 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5576f275dfc8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5576f275e048 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5576f275e108 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5576f275e1a8 <col:20>
| `-OptimizeNoneAttr 0x5576f275e200 <col:30>
|-CXXMethodDecl 0x5576f275e278 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5576f275e318 <col:20>
| `-OptimizeNoneAttr 0x5576f275e370 <col:30>
|-CXXMethodDecl 0x5576f275e3e8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5576f275e488 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5576f275e538 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5576f275e5d8 <col:20>
| |-OptimizeNoneAttr 0x5576f275e630 <col:30>
| `-WarnUnusedResultAttr 0x5576f275e658 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5576f275e6b0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5576f275e750 <col:20>
| `-OptimizeNoneAttr 0x5576f275e7a8 <col:30>
|-CXXMethodDecl 0x5576f275e7f8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5576f275e898 <col:20>
| `-OptimizeNoneAttr 0x5576f275e8f0 <col:30>
|-CXXMethodDecl 0x5576f275e938 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5576f275e9d8 <col:20>
| `-OptimizeNoneAttr 0x5576f275ea30 <col:30>
|-CXXMethodDecl 0x5576f275ea78 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f275eb38 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f275ec00 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5576f275ecc8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5576f275ed88 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f275eea8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5576f2778700 <col:54, line:99:5>
|   `-ReturnStmt 0x5576f27786f0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5576f27786d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5576f27786a8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5576f276f188
|         `-CXXThisExpr 0x5576f2778698 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5576f275f048 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5576f275ef58 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5576f27787b0 <col:67, line:103:5>
|   `-BinaryOperator 0x5576f2778790 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5576f2778728 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5576f276f188
|     | `-CXXThisExpr 0x5576f2778718 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5576f2778778 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5576f2778758 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5576f275ef58 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5576f275f140 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5576f2778830 <col:33, line:107:5>
|   `-ReturnStmt 0x5576f2778820 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5576f2778808 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5576f27787d8 <col:16> 'void *' lvalue ->_destructor_argument 0x5576f276f1f0
|         `-CXXThisExpr 0x5576f27787c8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5576f275f200 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5576f2778e60 <col:25, line:113:5>
|   |-ParenExpr 0x5576f2778ba8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5576f2778b78 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5576f27788e8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5576f27788c0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5576f2778888 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5576f2778858 <col:24> '<bound member function type>' ->shared 0x5576f275e278
|   |   |       `-ImplicitCastExpr 0x5576f27788a8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5576f2778848 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5576f2778948 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f2778928 <col:42> 'int' 0
|   |   `-CallExpr 0x5576f2778ad8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5576f2778ac0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f2778aa0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f2778b18 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f27789b8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5576f2778b30 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f27789e0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f2778b48 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f2778a18 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5576f2778b60 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f2778a88 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f2778a70 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f2778a38 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5576f2778da8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5576f2778bd8 <col:2> 'unsigned char *' lvalue ->_head 0x5576f276ef90
|   | | `-CXXThisExpr 0x5576f2778bc8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5576f2778d90 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5576f2778d70 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5576f2778c18 <col:10> 'unsigned char *' lvalue ->_data 0x5576f276eff8
|   |     | `-CXXThisExpr 0x5576f2778c08 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5576f2778d58 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5576f2778d38 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5576f2778c58 <col:18> 'unsigned char *' lvalue ->_tail 0x5576f276f060
|   |         | `-CXXThisExpr 0x5576f2778c48 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5576f2778d20 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5576f2778d00 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5576f2778c98 <col:26> 'unsigned char *' lvalue ->_end 0x5576f276f0c8
|   |             | `-CXXThisExpr 0x5576f2778c88 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5576f2778ce8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5576f2778cc8 <col:33> 'int' 0
|   `-BinaryOperator 0x5576f2778e40 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5576f2778dd8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5576f276f188
|     | `-CXXThisExpr 0x5576f2778dc8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5576f2778e28 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5576f2778e08 <col:16> 'int' 0
|-CXXMethodDecl 0x5576f275f340 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5576f275f2b0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576f275f3e8 <col:20>
| |-OptimizeNoneAttr 0x5576f275f440 <col:30>
| `-WarnUnusedResultAttr 0x5576f275f468 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5576f275f538 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5576f275f4a8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576f275f5e0 <col:20>
| |-OptimizeNoneAttr 0x5576f275f638 <col:30>
| `-WarnUnusedResultAttr 0x5576f275f660 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5576f275f798 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5576f275f6a0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576f275f840 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5576f275f940 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5576f275f8b0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576f275f9e8 <col:20>
| `-OptimizeNoneAttr 0x5576f275fa40 <col:30>
|-CXXMethodDecl 0x5576f275fb08 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5576f275fa78 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576f275fbb0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5576f275fcb0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5576f275fc20 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576f275fd58 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5576f275fe58 <line:245:5, col:62> col:45 used take 'void (uint32_t)'
| |-ParmVarDecl 0x5576f275fdc8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576f275ff00 <col:20>
| `-OptimizeNoneAttr 0x5576f275ff58 <col:30>
|-CXXMethodDecl 0x5576f27600e8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5576f275ff98 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5576f2760010 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5576f2778658 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5576f2760198 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5576f2760398 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5576f2760210 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5576f2760288 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f27605a8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5576f2760458 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5576f27604d0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f27607b8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5576f2760668 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5576f27606e8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5576f2778668 <col:39> 'int' 0
|-CXXMethodDecl 0x5576f2760888 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5576f2760950 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5576f2760a18 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576f2760ad8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f2760ba0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5576f2760ce8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5576f2760c58 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5576f2760eb8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5576f2760da8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5576f2760e20 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2760f88 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5576f2761048 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x5576f27610e8 <col:20>
| `-OptimizeNoneAttr 0x5576f2761140 <col:30>
|-CXXMethodDecl 0x5576f2761190 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5576f2761230 <col:20>
| `-OptimizeNoneAttr 0x5576f2761288 <col:30>
|-CXXMethodDecl 0x5576f27612d8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576f2761398 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f2761460 <line:292:5, col:61> col:44 used network_length 'int () const'
| |-NoInlineAttr 0x5576f2761500 <col:20>
| `-OptimizeNoneAttr 0x5576f2761558 <col:30>
|-CXXMethodDecl 0x5576f27616a8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5576f2761598 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5576f2761610 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f27617f8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5576f2761768 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f27618d0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5576f2761990 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5576f2761a30 <col:20>
| `-OptimizeNoneAttr 0x5576f2761a88 <col:30>
|-CXXMethodDecl 0x5576f2761ad8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5576f2761b78 <col:20>
| `-OptimizeNoneAttr 0x5576f2761bd0 <col:30>
|-CXXMethodDecl 0x5576f2761c20 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576f2761ce8 <line:300:5, col:63> col:44 used transport_length 'int () const'
| |-NoInlineAttr 0x5576f2761d88 <col:20>
| `-OptimizeNoneAttr 0x5576f2761de0 <col:30>
|-CXXMethodDecl 0x5576f2761e28 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5576f2761f48 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5576f27620b8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5576f2761ff8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5576f27621a8 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5576f2762248 <col:20>
| `-OptimizeNoneAttr 0x5576f27622a0 <col:30>
|-CXXMethodDecl 0x5576f27622f0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576f27623b0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576f27625e8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5576f2762460 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5576f27624d8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576f2762698 <col:20>
| `-OptimizeNoneAttr 0x5576f27626f0 <col:30>
|-CXXMethodDecl 0x5576f2762798 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5576f2762838 <col:20>
| `-OptimizeNoneAttr 0x5576f2762890 <col:30>
|-CXXMethodDecl 0x5576f27628e0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5576f2762980 <col:20>
| `-OptimizeNoneAttr 0x5576f27629d8 <col:30>
|-CXXMethodDecl 0x5576f2762a20 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5576f2762ac0 <col:20>
| `-OptimizeNoneAttr 0x5576f2762b18 <col:30>
|-CXXMethodDecl 0x5576f2762c18 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5576f2762b50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5576f2762cc0 <col:20>
| `-OptimizeNoneAttr 0x5576f2762d18 <col:30>
|-CXXMethodDecl 0x5576f2762ed8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5576f2762d50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5576f2762dc8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576f2762f88 <col:20>
| `-OptimizeNoneAttr 0x5576f2762fe0 <col:30>
|-CXXMethodDecl 0x5576f2763088 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5576f27631a8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5576f27632c8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5576f2763368 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5576f2763390 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5576f27634b8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5576f2763558 <col:20>
| `-OptimizeNoneAttr 0x5576f27635b0 <col:30>
|-CXXMethodDecl 0x5576f2763658 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5576f27636f8 <col:20>
| `-OptimizeNoneAttr 0x5576f2763750 <col:30>
|-AccessSpecDecl 0x5576f2763778 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5576f27637a0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5576f27638a0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5576f27638f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f2763880 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5576f2763860 <col:14> 'int' 48
|-CXXMethodDecl 0x5576f2763958 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5576f27639f8 <col:20>
| `-OptimizeNoneAttr 0x5576f2763a50 <col:30>
|-CXXMethodDecl 0x5576f2763ac8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5576f2763b68 <col:20>
| `-OptimizeNoneAttr 0x5576f2763bc0 <col:30>
|-CXXMethodDecl 0x5576f2763c88 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5576f2763bf8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5576f2763e28 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5576f2763fc8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5576f2763ed8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5576f2764070 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5576f2764170 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576f2764520 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2764150 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5576f2764130 <col:9> 'int' 0
| |-EnumConstantDecl 0x5576f2764200 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576f2764538 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f27641e0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5576f27641c0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5576f2764290 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576f2764550 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2764270 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5576f2764250 <col:14> 'int' 2
| |-EnumConstantDecl 0x5576f2764320 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576f2764568 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2764300 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5576f27642e0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5576f27643b0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576f2764580 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2764390 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5576f2764370 <col:13> 'int' 4
| |-EnumConstantDecl 0x5576f2764440 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576f2764598 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2764420 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5576f2764400 <col:13> 'int' 5
| `-EnumConstantDecl 0x5576f27644d0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5576f27645b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f27644b0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5576f2764490 <col:14> 'int' 6
|-CXXMethodDecl 0x5576f2764618 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5576f27646b8 <col:20>
| `-OptimizeNoneAttr 0x5576f2764710 <col:30>
|-CXXMethodDecl 0x5576f2764808 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5576f2764748 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5576f27648b0 <col:20>
| `-OptimizeNoneAttr 0x5576f2764908 <col:30>
|-CXXMethodDecl 0x5576f2764978 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5576f2764aa0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5576f2764c18 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5576f2764b50 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5576f2764ce0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5576f2764da8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5576f2764ee8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5576f2764e58 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5576f2764f90 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5576f2765090 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5576f2765290 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2765070 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5576f2765050 <col:23> 'int' 0
| |-EnumConstantDecl 0x5576f2765120 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5576f27652a8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2765100 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5576f27650e0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5576f27651b0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5576f27652c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2765190 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5576f2765170 <col:24> 'int' 0
| `-EnumConstantDecl 0x5576f2765240 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5576f27652d8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f2765220 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5576f2765200 <col:47> 'int' 16
|-CXXMethodDecl 0x5576f2765338 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5576f27654a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5576f27653e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5576f2765550 <col:20>
| `-OptimizeNoneAttr 0x5576f27655a8 <col:30>
|-CXXMethodDecl 0x5576f27655f8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5576f2778f80 <col:18, col:36>
|   `-ReturnStmt 0x5576f2778f70 <col:20, col:33>
|     `-ImplicitCastExpr 0x5576f2778f58 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5576f2778f38 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5576f2778f08 <col:27> '<bound member function type>' ->xanno 0x5576f2763658
|           `-CXXThisExpr 0x5576f2778ef8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5576f27656f0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5576f2779090 <col:30, col:48>
|   `-ReturnStmt 0x5576f2779080 <col:32, col:45>
|     `-ImplicitCastExpr 0x5576f2779068 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5576f2779048 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5576f2779018 <col:39> '<bound member function type>' ->xanno 0x5576f27634b8
|           `-CXXThisExpr 0x5576f2779008 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5576f27657d8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5576f2779228 <col:24, col:50>
|   `-ReturnStmt 0x5576f2779218 <col:26, col:47>
|     `-UnaryOperator 0x5576f2779200 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576f27791e0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576f27791c8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576f2779178 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5576f276e498
|         |   `-CXXMemberCallExpr 0x5576f2779158 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5576f2779128 <col:34> '<bound member function type>' ->xanno 0x5576f2763658
|         |       `-CXXThisExpr 0x5576f2779118 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5576f27791a8 <col:46> 'int' 0
|-CXXMethodDecl 0x5576f27658e0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5576f27793f8 <col:36, col:62>
|   `-ReturnStmt 0x5576f27793e8 <col:38, col:59>
|     `-UnaryOperator 0x5576f27793d0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576f27793b0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576f2779398 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576f2779310 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5576f276e498
|         |   `-CXXMemberCallExpr 0x5576f27792f0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5576f27792c0 <col:46> '<bound member function type>' ->xanno 0x5576f27634b8
|         |       `-CXXThisExpr 0x5576f27792b0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5576f2779340 <col:58> 'int' 0
|-CXXMethodDecl 0x5576f27659f8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5576f2779590 <col:26, col:53>
|   `-ReturnStmt 0x5576f2779580 <col:28, col:50>
|     `-UnaryOperator 0x5576f2779568 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576f2779548 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5576f2779530 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576f27794e0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5576f276e798
|         |   `-CXXMemberCallExpr 0x5576f27794c0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5576f2779490 <col:36> '<bound member function type>' ->xanno 0x5576f2763658
|         |       `-CXXThisExpr 0x5576f2779480 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5576f2779510 <col:49> 'int' 0
|-CXXMethodDecl 0x5576f2765b18 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5576f2779768 <col:38, col:65>
|   `-ReturnStmt 0x5576f2779758 <col:40, col:62>
|     `-UnaryOperator 0x5576f2779740 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576f2779720 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5576f2779708 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576f2779678 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5576f276e798
|         |   `-CXXMemberCallExpr 0x5576f2779658 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5576f2779628 <col:48> '<bound member function type>' ->xanno 0x5576f27634b8
|         |       `-CXXThisExpr 0x5576f2779618 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5576f27796a8 <col:61> 'int' 0
|-CXXMethodDecl 0x5576f2765cc8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5576f2765bd0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5576f2779e38 <col:34, line:463:5>
|   |-ParenExpr 0x5576f2779c80 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5576f2779c50 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5576f27798b8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f2779888 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f27797d8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f27797c0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f2779780 <col:23> 'int' lvalue ParmVar 0x5576f2765bd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f27797a0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f2779868 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f2779838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f27797f8 <col:33> 'int' lvalue ParmVar 0x5576f2765bd0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5576f2779850 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5576f2779818 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5576f2779918 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f27798f8 <col:56> 'int' 0
|   |   `-CallExpr 0x5576f2779bb0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5576f2779b98 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f2779b78 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f2779bf0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f2779a08 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5576f2779c08 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f2779a38 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f2779c20 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f2779a70 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5576f2779c38 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f2779b60 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f2779b48 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f2779b08 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5576f2779e28 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5576f2779e10 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5576f2779df0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576f2779dc0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576f2779d70 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5576f276e498
|         |   `-CXXMemberCallExpr 0x5576f2779d50 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5576f2779d20 <col:9> '<bound member function type>' ->xanno 0x5576f27634b8
|         |       `-CXXThisExpr 0x5576f2779d10 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5576f2779dd8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5576f2779da0 <col:21> 'int' lvalue ParmVar 0x5576f2765bd0 'i' 'int'
|-CXXMethodDecl 0x5576f2765f18 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5576f2765d88 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5576f2765e00 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5576f277a4c8 <col:40, line:472:5>
|   |-ParenExpr 0x5576f277a2e0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5576f277a2b0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5576f2779f90 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f2779f60 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f2779eb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f2779e98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f2779e58 <col:23> 'int' lvalue ParmVar 0x5576f2765d88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f2779e78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f2779f40 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f2779f10 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f2779ed0 <col:33> 'int' lvalue ParmVar 0x5576f2765d88 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5576f2779f28 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5576f2779ef0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5576f2779ff0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f2779fd0 <col:56> 'int' 0
|   |   `-CallExpr 0x5576f277a210 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5576f277a1f8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277a1d8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277a250 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277a060 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5576f277a268 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277a090 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277a280 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277a0c8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5576f277a298 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277a1c0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277a1a8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277a168 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5576f277a4a8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5576f277a450 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5576f277a420 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5576f277a3d0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5576f276e498
|     | |   `-CXXMemberCallExpr 0x5576f277a3b0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5576f277a380 <col:2> '<bound member function type>' ->xanno 0x5576f2763658
|     | |       `-CXXThisExpr 0x5576f277a370 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5576f277a438 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5576f277a400 <col:14> 'int' lvalue ParmVar 0x5576f2765d88 'i' 'int'
|     `-ImplicitCastExpr 0x5576f277a490 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5576f277a470 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5576f2765e00 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5576f27660d8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5576f2765fe0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5576f277ac48 <col:36, line:485:5>
|   |-ParenExpr 0x5576f277a9b0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277a980 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277a660 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277a630 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277a540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277a528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277a4e8 <col:23> 'int' lvalue ParmVar 0x5576f2765fe0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277a508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277a610 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277a5f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277a560 <col:33> 'int' lvalue ParmVar 0x5576f2765fe0 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277a5d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277a5c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277a580 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277a5a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5576f277a6c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277a6a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277a8e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277a8c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277a8a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277a920 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277a730 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5576f277a938 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277a768 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277a950 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277a7a0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5576f277a968 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277a890 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277a878 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277a838 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5576f277ac38 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5576f277ac20 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5576f277ac08 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576f277abd8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5576f277ab78 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576f277ab48 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576f277aac0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5576f276e370
|             |   `-CXXMemberCallExpr 0x5576f277aaa0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576f277aa70 <col:61> '<bound member function type>' ->xanno 0x5576f27634b8
|             |       `-CXXThisExpr 0x5576f277aa60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576f277ab60 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576f277aaf0 <col:74> 'int' lvalue ParmVar 0x5576f2765fe0 'i' 'int'
|-CXXMethodDecl 0x5576f2766328 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5576f2766198 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576f2766210 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5576f277b398 <col:42, line:500:5>
|   |-ParenExpr 0x5576f277b130 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277b100 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277ade0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277adb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277acc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277aca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277ac68 <col:23> 'int' lvalue ParmVar 0x5576f2766198 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277ac88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277ad90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277ad78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277ace0 <col:33> 'int' lvalue ParmVar 0x5576f2766198 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277ad58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277ad40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277ad00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277ad20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5576f277ae40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277ae20 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277b060 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277b048 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277b028 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277b0a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277aeb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5576f277b0b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277aee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277b0d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277af20 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5576f277b0e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277b010 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277aff8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277afb8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5576f277b378 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5576f277b328 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5576f277b2f8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5576f277b2a0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576f277b270 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5576f277b220 <col:48, col:57> 'char [48]' lvalue ->c 0x5576f276e370
|     |     |   `-CXXMemberCallExpr 0x5576f277b200 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5576f277b1d0 <col:48> '<bound member function type>' ->xanno 0x5576f2763658
|     |     |       `-CXXThisExpr 0x5576f277b1c0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5576f277b288 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5576f277b250 <col:61> 'int' lvalue ParmVar 0x5576f2766198 'i' 'int'
|     `-ImplicitCastExpr 0x5576f277b360 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5576f277b340 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5576f2766210 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5576f27664e8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5576f27663f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5576f277baf8 <col:35, line:513:5>
|   |-ParenExpr 0x5576f277b808 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277b7d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277b530 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277b500 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277b410 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277b3f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277b3b8 <col:23> 'int' lvalue ParmVar 0x5576f27663f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277b3d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277b4e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277b4c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277b430 <col:33> 'int' lvalue ParmVar 0x5576f27663f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277b4a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277b490 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277b450 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277b470 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5576f277b590 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277b570 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277b738 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277b720 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277b700 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277b778 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277b600 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5576f277b790 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277b638 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277b7a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277b670 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5576f277b7c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277b6e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277b6d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277b690 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5576f277bae8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5576f277bad0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5576f277bab8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576f277ba88 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5576f277ba00 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576f277b9d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576f277b980 <col:60, col:69> 'char const[48]' lvalue ->c 0x5576f276e370
|             |   `-CXXMemberCallExpr 0x5576f277b960 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576f277b930 <col:60> '<bound member function type>' ->xanno 0x5576f27634b8
|             |       `-CXXThisExpr 0x5576f277b920 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576f277b9e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576f277b9b0 <col:73> 'int' lvalue ParmVar 0x5576f27663f0 'i' 'int'
|-CXXMethodDecl 0x5576f2766738 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5576f27665a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576f2766620 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5576f277c218 <col:41, line:528:5>
|   |-ParenExpr 0x5576f277bfa0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277bf70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277bc90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277bc60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277bb70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277bb58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277bb18 <col:23> 'int' lvalue ParmVar 0x5576f27665a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277bb38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277bc40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277bc28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277bb90 <col:33> 'int' lvalue ParmVar 0x5576f27665a8 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277bc08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277bbf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277bbb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277bbd0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5576f277bcf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277bcd0 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277bed0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277beb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277be98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277bf10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277bd60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5576f277bf28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277bd98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277bf40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277bdd0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5576f277bf58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277be80 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277be68 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277be28 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5576f277c1f8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5576f277c1a8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5576f277c178 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5576f277c120 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576f277c0e0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5576f277c090 <col:47, col:56> 'char [48]' lvalue ->c 0x5576f276e370
|     |     |   `-CXXMemberCallExpr 0x5576f277c070 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5576f277c040 <col:47> '<bound member function type>' ->xanno 0x5576f2763658
|     |     |       `-CXXThisExpr 0x5576f277c030 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5576f277c0f8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5576f277c0c0 <col:60> 'int' lvalue ParmVar 0x5576f27665a8 'i' 'int'
|     `-ImplicitCastExpr 0x5576f277c1e0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5576f277c1c0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5576f2766620 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5576f27668f8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5576f2766800 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5576f277c8e8 <col:36, line:541:5>
|   |-ParenExpr 0x5576f277c688 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277c658 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277c3b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277c380 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277c290 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277c278 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277c238 <col:23> 'int' lvalue ParmVar 0x5576f2766800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277c258 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277c360 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277c348 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277c2b0 <col:33> 'int' lvalue ParmVar 0x5576f2766800 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277c328 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277c310 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277c2d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277c2f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5576f277c410 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277c3f0 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277c5b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277c5a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277c580 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277c5f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277c480 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5576f277c610 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277c4b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277c628 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277c4f0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5576f277c640 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277c568 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277c550 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277c510 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5576f277c8d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5576f277c8c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5576f277c8a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576f277c878 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5576f277c820 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576f277c7f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576f277c7a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5576f276e370
|             |   `-CXXMemberCallExpr 0x5576f277c780 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576f277c750 <col:61> '<bound member function type>' ->xanno 0x5576f27634b8
|             |       `-CXXThisExpr 0x5576f277c740 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576f277c808 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576f277c7d0 <col:74> 'int' lvalue ParmVar 0x5576f2766800 'i' 'int'
|-CXXMethodDecl 0x5576f2766ac8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5576f27669b8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5576f2766a30 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576f2766b78 <col:20>
| `-OptimizeNoneAttr 0x5576f2766bd0 <col:30>
|-CXXMethodDecl 0x5576f2766d08 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5576f2766c10 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5576f277cfb8 <col:35, line:562:5>
|   |-ParenExpr 0x5576f277cd58 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277cd28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277ca80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277ca50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277c960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277c948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277c908 <col:23> 'int' lvalue ParmVar 0x5576f2766c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277c928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277ca30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277ca18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277c980 <col:33> 'int' lvalue ParmVar 0x5576f2766c10 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277c9f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277c9e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277c9a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277c9c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5576f277cae0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277cac0 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277cc88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277cc70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277cc50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277ccc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277cb50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5576f277cce0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277cb88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277ccf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277cbc0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5576f277cd10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277cc38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277cc20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277cbe0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5576f277cfa8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5576f277cf90 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5576f277cf78 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576f277cf48 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5576f277cef0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576f277cec0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576f277ce70 <col:60, col:69> 'char const[48]' lvalue ->c 0x5576f276e370
|             |   `-CXXMemberCallExpr 0x5576f277ce50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576f277ce20 <col:60> '<bound member function type>' ->xanno 0x5576f27634b8
|             |       `-CXXThisExpr 0x5576f277ce10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576f277ced8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576f277cea0 <col:73> 'int' lvalue ParmVar 0x5576f2766c10 'i' 'int'
|-CXXMethodDecl 0x5576f2766f18 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5576f2766dc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576f2766e40 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5576f277d698 <col:41, line:577:5>
|   |-ParenExpr 0x5576f277d428 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277d3f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277d150 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277d120 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277d030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277d018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277cfd8 <col:23> 'int' lvalue ParmVar 0x5576f2766dc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277cff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277d100 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277d0e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277d050 <col:33> 'int' lvalue ParmVar 0x5576f2766dc8 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277d0c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277d0b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277d070 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277d090 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5576f277d1b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277d190 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277d358 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277d340 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277d320 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277d398 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277d220 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5576f277d3b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277d258 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277d3c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277d290 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5576f277d3e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277d308 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277d2f0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277d2b0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5576f277d678 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5576f277d628 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5576f277d5f8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5576f277d598 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576f277d568 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5576f277d518 <col:47, col:56> 'char [48]' lvalue ->c 0x5576f276e370
|     |     |   `-CXXMemberCallExpr 0x5576f277d4f8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5576f277d4c8 <col:47> '<bound member function type>' ->xanno 0x5576f2763658
|     |     |       `-CXXThisExpr 0x5576f277d4b8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5576f277d580 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5576f277d548 <col:60> 'int' lvalue ParmVar 0x5576f2766dc8 'i' 'int'
|     `-ImplicitCastExpr 0x5576f277d660 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5576f277d640 <col:65> 'int32_t':'int' lvalue ParmVar 0x5576f2766e40 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5576f27670d8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5576f2766fe0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5576f277ddc8 <col:36, line:591:5>
|   |-ParenExpr 0x5576f277db08 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277dad8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277d830 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277d800 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277d710 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277d6f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277d6b8 <col:23> 'int' lvalue ParmVar 0x5576f2766fe0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277d6d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277d7e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277d7c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277d730 <col:33> 'int' lvalue ParmVar 0x5576f2766fe0 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277d7a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277d790 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277d750 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277d770 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5576f277d890 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277d870 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277da38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277da20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277da00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277da78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277d900 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5576f277da90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277d938 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277daa8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277d970 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5576f277dac0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277d9e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277d9d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277d990 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5576f277ddb8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5576f277dda0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5576f277dd88 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576f277dd58 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5576f277dcd0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576f277dca0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576f277dc50 <col:61, col:70> 'char const[48]' lvalue ->c 0x5576f276e370
|             |   `-CXXMemberCallExpr 0x5576f277dc30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576f277dc00 <col:61> '<bound member function type>' ->xanno 0x5576f27634b8
|             |       `-CXXThisExpr 0x5576f277dbf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576f277dcb8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576f277dc80 <col:74> 'int' lvalue ParmVar 0x5576f2766fe0 'i' 'int'
|-CXXMethodDecl 0x5576f2767328 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5576f2767198 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576f2767210 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5576f277e4a8 <col:42, line:606:5>
|   |-ParenExpr 0x5576f277e238 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576f277e208 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277df60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277df30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277de40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277de28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277dde8 <col:23> 'int' lvalue ParmVar 0x5576f2767198 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277de08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277df10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576f277def8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277de60 <col:33> 'int' lvalue ParmVar 0x5576f2767198 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277ded8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277dec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277de80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576f277dea0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5576f277dfc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277dfa0 <col:60> 'int' 0
|   |   `-CallExpr 0x5576f277e168 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576f277e150 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277e130 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277e1a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277e030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5576f277e1c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277e068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277e1d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277e0a0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5576f277e1f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277e118 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277e100 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277e0c0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5576f277e488 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5576f277e438 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5576f277e408 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5576f277e3a8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576f277e378 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5576f277e328 <col:48, col:57> 'char [48]' lvalue ->c 0x5576f276e370
|     |     |   `-CXXMemberCallExpr 0x5576f277e308 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5576f277e2d8 <col:48> '<bound member function type>' ->xanno 0x5576f2763658
|     |     |       `-CXXThisExpr 0x5576f277e2c8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5576f277e390 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5576f277e358 <col:61> 'int' lvalue ParmVar 0x5576f2767198 'i' 'int'
|     `-ImplicitCastExpr 0x5576f277e470 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5576f277e450 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5576f2767210 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5576f27674c0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5576f27673f0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5576f277ed18 <col:33, line:620:5>
|   |-ParenExpr 0x5576f277ea90 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5576f277ea60 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277e6b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277e680 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277e520 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277e508 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277e4c8 <col:23> 'int' lvalue ParmVar 0x5576f27673f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277e4e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277e660 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5576f277e648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277e540 <col:33> 'int' lvalue ParmVar 0x5576f27673f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277e628 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277e610 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277e560 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5576f277e5e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5576f277e5d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5576f277e598 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5576f277e710 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277e6f0 <col:79> 'int' 0
|   |   `-CallExpr 0x5576f277e9c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5576f277e9a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277e988 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277ea00 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277e7f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5576f277ea18 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277e840 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277ea30 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277e878 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5576f277ea48 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277e970 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277e958 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277e918 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5576f277ed08 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5576f277ecf0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5576f277ecd8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5576f277eca8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5576f277ec20 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576f277ebf0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576f277eba0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5576f276e370
|             |   `-CXXMemberCallExpr 0x5576f277eb80 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576f277eb50 <col:67> '<bound member function type>' ->xanno 0x5576f27634b8
|             |       `-CXXThisExpr 0x5576f277eb40 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576f277ec08 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576f277ebd0 <col:80> 'int' lvalue ParmVar 0x5576f27673f0 'i' 'int'
|-CXXMethodDecl 0x5576f27676d8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5576f2767580 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576f2767600 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5576f277f540 <col:45, line:635:5>
|   |-ParenExpr 0x5576f277f288 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5576f277f258 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5576f277ef20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576f277eef0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576f277ed90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576f277ed78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576f277ed38 <col:23> 'int' lvalue ParmVar 0x5576f2767580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576f277ed58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576f277eed0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5576f277eeb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576f277edb0 <col:33> 'int' lvalue ParmVar 0x5576f2767580 'i' 'int'
|   |   |     `-BinaryOperator 0x5576f277ee98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576f277ee80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576f277edd0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576f27638a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5576f277ee58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5576f277ee40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5576f277ee08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5576f277ef80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576f277ef60 <col:79> 'int' 0
|   |   `-CallExpr 0x5576f277f1b8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5576f277f1a0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576f277f180 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576f22d01c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576f277f1f8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277eff0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5576f277f210 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576f277f038 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576f277f228 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576f277f070 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5576f277f240 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576f277f168 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576f277f150 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576f277f108 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5576f277f520 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5576f277f488 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5576f277f458 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5576f277f3f8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576f277f3c8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5576f277f378 <col:54, col:63> 'char [48]' lvalue ->c 0x5576f276e370
|     |     |   `-CXXMemberCallExpr 0x5576f277f358 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5576f277f328 <col:54> '<bound member function type>' ->xanno 0x5576f2763658
|     |     |       `-CXXThisExpr 0x5576f277f318 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5576f277f3e0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5576f277f3a8 <col:67> 'int' lvalue ParmVar 0x5576f2767580 'i' 'int'
|     `-CXXConstCastExpr 0x5576f277f4f0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5576f277f4d8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5576f277f4a0 <col:91> 'const void *' lvalue ParmVar 0x5576f2767600 'x' 'const void *'
|-CXXMethodDecl 0x5576f27677a8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5576f277f5c8 <col:34, line:640:5>
|   `-ReturnStmt 0x5576f277f5b8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5576f277f5a0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5576f277f570 <col:16> 'Packet *' lvalue ->_data_packet 0x5576f276ef28
|         `-CXXThisExpr 0x5576f277f560 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5576f27678e8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5576f2767858 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576f2778688 <col:46> 'bool' true
|-CXXMethodDecl 0x5576f2767a68 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5576f27679a0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5576f2767b10 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5576f27682c0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5576f2767c10 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f2768330 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767bf0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5576f2767bd0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5576f275cd70 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5576f2767ca0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f2768348 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767c80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5576f2767c60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5576f275ce00 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5576f2767d30 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f2768360 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767d10 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5576f2767cf0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5576f2767dc0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f2768378 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767da0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5576f2767d80 <col:19> 'int' 16
| |-EnumConstantDecl 0x5576f2767e50 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f2768390 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767e30 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5576f2767e10 <col:21> 'int' 16
| |-EnumConstantDecl 0x5576f2767ee0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f27683a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767ec0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5576f2767ea0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5576f2767f70 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f27683c0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767f50 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5576f2767f30 <col:19> 'int' EnumConstant 0x5576f2767dc0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5576f2768000 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f27683d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2767fe0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5576f2767fc0 <col:19> 'int' EnumConstant 0x5576f2767ee0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5576f27680d0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f27683f0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f27680b0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5576f2768090 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5576f2768050 <col:23> 'int' EnumConstant 0x5576f2768000 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5576f2768070 <col:40> 'int' 2
| |-EnumConstantDecl 0x5576f27681a0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576f2768408 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f2768180 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5576f2768160 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5576f2768120 <col:23> 'int' EnumConstant 0x5576f2768000 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5576f2768140 <col:40> 'int' 4
| `-EnumConstantDecl 0x5576f2768270 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5576f2768420 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576f2768250 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5576f2768230 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5576f27681f0 <col:23> 'int' EnumConstant 0x5576f2768000 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5576f2768210 <col:40> 'int' 8
|-CXXMethodDecl 0x5576f2768460 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5576f2768500 <col:68> "" ""
|-CXXMethodDecl 0x5576f2768598 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5576f2768638 <col:45> "" ""
|-CXXMethodDecl 0x5576f27686d0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5576f2768770 <col:57> "" ""
|-CXXMethodDecl 0x5576f2768808 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5576f27688a8 <col:45> "" ""
|-CXXMethodDecl 0x5576f2768940 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5576f27689e0 <col:57> "" ""
|-CXXMethodDecl 0x5576f2768a70 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5576f2768b10 <col:51> "" ""
|-CXXMethodDecl 0x5576f2768ba0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5576f2768c40 <col:63> "" ""
|-CXXMethodDecl 0x5576f2768cd0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5576f2768d70 <col:53> "" ""
|-CXXMethodDecl 0x5576f2768e00 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5576f2768ea0 <col:65> "" ""
|-CXXMethodDecl 0x5576f2768fb8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5576f2768f28 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5576f2769060 <col:61> "" ""
|-CXXMethodDecl 0x5576f27691f8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5576f27690e8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5576f2769160 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5576f27692a8 <col:67> "" ""
|-CXXMethodDecl 0x5576f27693c0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5576f2769330 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5576f2769468 <col:63> "" ""
|-CXXMethodDecl 0x5576f2769600 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5576f27694f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576f2769568 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5576f27696b0 <col:69> "" ""
|-CXXMethodDecl 0x5576f27697c8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5576f2769738 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5576f2769870 <col:63> "" ""
|-CXXMethodDecl 0x5576f276bf48 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5576f276be38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576f276beb0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576f276bff8 <col:69> "" ""
|-CXXMethodDecl 0x5576f276c110 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5576f276c080 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5576f276c1b8 <col:62> "" ""
|-CXXMethodDecl 0x5576f276c350 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5576f276c240 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576f276c2b8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5576f276c400 <col:68> "" ""
|-CXXMethodDecl 0x5576f276c518 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5576f276c488 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5576f276c5c0 <col:63> "" ""
|-CXXMethodDecl 0x5576f276c758 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5576f276c648 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576f276c6c0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5576f276c808 <col:69> "" ""
|-CXXMethodDecl 0x5576f276c898 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5576f276c938 <col:64> "" ""
|-CXXMethodDecl 0x5576f276c9c8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5576f276ca68 <col:52> "" ""
|-CXXMethodDecl 0x5576f276caf8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5576f276cb98 <col:67> "" ""
|-CXXMethodDecl 0x5576f276cc28 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5576f276ccc8 <col:55> "" ""
|-CXXMethodDecl 0x5576f276cde0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5576f276cd50 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5576f276ce88 <col:58> "" ""
|-CXXMethodDecl 0x5576f276d020 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5576f276cf10 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576f276cf88 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5576f276d0d0 <col:62> "" ""
|-CXXMethodDecl 0x5576f276d1e8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5576f276d158 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5576f276d290 <col:58> "" ""
|-CXXMethodDecl 0x5576f276d428 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5576f276d318 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576f276d390 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5576f276d4d8 <col:62> "" ""
|-CXXMethodDecl 0x5576f276d5f0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5576f276d560 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5576f276d698 <col:60> "" ""
|-CXXMethodDecl 0x5576f276d830 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5576f276d720 <col:34> col:37 'int'
| |-ParmVarDecl 0x5576f276d798 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5576f276d8e0 <col:64> "" ""
|-CXXMethodDecl 0x5576f276d9f8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5576f276d968 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5576f276daa0 <col:58> "" ""
|-CXXMethodDecl 0x5576f276dc38 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5576f276db28 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576f276dba0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5576f276dce8 <col:62> "" ""
|-CXXMethodDecl 0x5576f276de00 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5576f276dd70 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5576f276dea8 <col:59> "" ""
|-CXXMethodDecl 0x5576f276e040 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5576f276df30 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576f276dfa8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576f276e0f0 <col:63> "" ""
|-AccessSpecDecl 0x5576f276e160 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5576f276e188 prev 0x5576f2763390 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576f276e280 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5576f276e370 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5576f276e498 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5576f276e618 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5576f276e798 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5576f276e918 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5576f277f748 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5576f277ffb8 <col:11>
| |-CXXDestructorDecl 0x5576f277f820 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5576f277f958 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5576f277f958
| | `-ParmVarDecl 0x5576f277fa68 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5576f277fb08 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576f277fb08
| | `-ParmVarDecl 0x5576f277fc18 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5576f27829d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5576f2782ae8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5576f2782d68 <col:11>
| |   `-ReturnStmt 0x5576f2782d58 <col:11>
| |     `-UnaryOperator 0x5576f2782d40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5576f2782d30 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5576f2782b58 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5576f2782b58
|   `-ParmVarDecl 0x5576f2782c68 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5576f276e980 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576f276ea98 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5576f276eb38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5576f276eba0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5576f276ec08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5576f276ec70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5576f276ecd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5576f276ed90 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5576f276edf0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5576f276ee50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5576f277f658 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5576f276eb38 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5576f277ffc8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5576f2780020 <col:12>
| |-CXXConstructorDecl 0x5576f277fc88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5576f277fc88
| | `-ParmVarDecl 0x5576f277fd98 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5576f277fe38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5576f277fe38
| | `-ParmVarDecl 0x5576f277ff48 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5576f27820c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5576f276eec8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5576f276ef28 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5576f276ef90 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5576f276eff8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5576f276f060 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5576f276f0c8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5576f276f128 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5576f276f188 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5576f276f1f0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5576f276f278 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5576f276eec8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5576f277f5f0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5576f276f128 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5576f2780030 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5576f2780090 <col:21, line:755:5>
|-CXXConstructorDecl 0x5576f276f418 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5576f276f358 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5576f276f510 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5576f276f6f8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5576f276f600 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5576f276f9c8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5576f276f7b0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576f276f828 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5576f276f8a0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f276fbe8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5576f276fa98 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5576f276fb10 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5576f27781c8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5576f276fca8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5576f276fd20 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5576f276fd98 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5576f2778320 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5576f2778290 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576f2778468 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5576f27783d8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5576f2778560 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f24ca6c8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f24ca7e8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5576f24ca8b0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5576f259ae80 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576f25a0198 <col:8>
|-CXXConstructorDecl 0x5576f259af88 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5576f259af88
| `-ParmVarDecl 0x5576f259b098 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5576f259b138 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f259b248 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5576f24ca8b0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5576f25a03b0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5576f25a0380 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5576f24ca8b0
| |     `-CXXStaticCastExpr 0x5576f25a0350 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5576f25a0320 <col:8> 'in_addr' lvalue ParmVar 0x5576f259b248 '' 'in_addr &&'
| `-CompoundStmt 0x5576f25a03f8 <col:8>
`-CXXDestructorDecl 0x5576f25a0630 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2593b78 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5576f2593c98 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5576f2593d80 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5576f2593d60 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5576f2593d28 <col:22> 'int' 4
|-FieldDecl 0x5576f2593e28 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x5576f2593e08 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5576f2593dd0 <col:21> 'int' 4
|-FieldDecl 0x5576f2593e88 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5576f2593ee8 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5576f2593f48 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5576f2593fa8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5576f2594008 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5576f2594068 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5576f25940c8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5576f2594138 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5576f25941a8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2879370 prev 0x5576f275c7e0 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5576f2879468 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x5576f2879508 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x5576f2879568 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x5576f28795f0 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5576f2879650 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x5576f28796f8 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x5576f28796d8 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x5576f28796a0 <col:26> 'int' 4
|-FieldDecl 0x5576f28797a0 <line:31:5, col:23> col:14 referenced th_off 'unsigned int'
| `-ConstantExpr 0x5576f2879780 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x5576f2879748 <col:23> 'int' 4
|-FieldDecl 0x5576f2879800 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5576f2879860 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x5576f28798c0 <line:49:5, col:14> col:14 th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x5576f2879920 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f2879ca8 prev 0x5576f275c680 <../dummy_inc/clicknet/icmp.h:17:1, line:23:1> line:17:8 referenced struct click_icmp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5576f2879da0 <col:1, col:8> col:8 implicit struct click_icmp
|-FieldDecl 0x5576f2879e40 <line:18:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x5576f2879ea0 <line:19:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x5576f2879f00 <line:20:5, col:14> col:14 icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x5576f2879f60 <line:21:5, col:14> col:14 padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_icmp_tstamp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
         8 |   uint32_t icmp_originate
        12 |   uint32_t icmp_receive
        16 |   uint32_t icmp_transmit
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f284f8f0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f284fa08 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5576f284fa98 <col:16, col:22> col:16 public
|-EnumDecl 0x5576f284fac0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5576f284fbc0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5576f284fe10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f284fba0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5576f284fb80 <col:21> 'int' 0
| |-EnumConstantDecl 0x5576f284fc50 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5576f284fe28 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f284fc30 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5576f284fc10 <col:24> 'int' 22
| |-EnumConstantDecl 0x5576f284fce0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5576f284fe40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f284fcc0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5576f284fca0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5576f284fd70 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5576f284fe58 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576f284fd50 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5576f284fd30 <col:25> 'int' 95
| `-EnumConstantDecl 0x5576f284fdc0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5576f28517d0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576f2851c08 <col:7>
|-CXXConstructorDecl 0x5576f28518d8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5576f28518d8
| `-ParmVarDecl 0x5576f28519e8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5576f2851a88 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f2851b98 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5576f28c7120 <col:7>
`-CXXDestructorDecl 0x5576f2853d18 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f284fe88 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5576f284ffe8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5576f2850078 <col:32, col:38> col:32 public
|-TypedefDecl 0x5576f28500b0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5576f23896c0 'uint32_t' sugar
|   |-Typedef 0x5576f229d408 'uint32_t'
|   `-TypedefType 0x5576f2276440 '__uint32_t' sugar
|     |-Typedef 0x5576f2276038 '__uint32_t'
|     `-BuiltinType 0x5576f2234410 'unsigned int'
|-CXXConstructorDecl 0x5576f28501f8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5576f2850120 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5576f28516d8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5576f2851c18 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5576f2850f90 'base' 'int'
| | `-ImplicitCastExpr 0x5576f2851778 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5576f2851738 <col:16> 'int' lvalue ParmVar 0x5576f2850120 'b' 'int'
| `-CompoundStmt 0x5576f2851c88 <col:19, line:1046:5>
|-CXXMethodDecl 0x5576f28506f0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5576f28502c0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5576f2850340 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5576f28503b8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5576f2850438 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5576f28504f8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5576f2850578 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5576f2850b48 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5576f28507c0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5576f2850aa8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5576f2850868 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5576f2850908 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5576f2850980 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5576f28516f8 <col:82> 'const ArgContext' lvalue Var 0x5576f28457c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5576f2852bb8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5576f2851e18 <line:1054:9, col:64>
| |   | `-VarDecl 0x5576f2851ca8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5576f2851dd0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5576f2852038 <line:1055:9, col:91>
| |   | `-VarDecl 0x5576f2851e48 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5576f2852010 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5576f2851ff0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5576f2851fa0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5576f2851f80 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5576f2851f28 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5576f2851ed8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5576f2851f08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5576f2851f68 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5576f2851f48 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5576f2851fd0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5576f2852198 <line:1056:9, col:27>
| |   | `-VarDecl 0x5576f2852130 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5576f28525e0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5576f2852510 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5576f2852490 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5576f27536a8 0x5576f259cc88 0x5576f259c960 0x5576f258e140 0x5576f258ddf0 0x5576f258d6e0 0x5576f2560050 0x5576f24ec510
| |   | | |-CallExpr 0x5576f28523d0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5576f28521c0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5576f2852270 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5576f2852240 <col:19, col:23> '<bound member function type>' .begin 0x5576f257d348
| |   | | | |   `-DeclRefExpr 0x5576f2852220 <col:19> 'const String' lvalue ParmVar 0x5576f2850868 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5576f28522e0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5576f28522b0 <col:32, col:36> '<bound member function type>' .end 0x5576f257d560
| |   | | | |   `-DeclRefExpr 0x5576f2852290 <col:32> 'const String' lvalue ParmVar 0x5576f2850868 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5576f2852300 <col:43> 'const bool' lvalue Var 0x5576f2851ca8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5576f2852368 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5576f2852348 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5576f2852390 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5576f2852130 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5576f28523b0 <col:73> 'const int' lvalue Var 0x5576f2851e48 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5576f2852470 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5576f2852440 <col:16, col:20> '<bound member function type>' .end 0x5576f257d560
| |   | |     `-DeclRefExpr 0x5576f2852420 <col:16> 'const String' lvalue ParmVar 0x5576f2850868 'str' 'const String &'
| |   | `-BinaryOperator 0x5576f28525c0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5576f2852558 <col:13> 'int' lvalue ->status 0x5576f2850ff8
| |   |   | `-CXXThisExpr 0x5576f2852548 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5576f28525a8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5576f2852588 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fc50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5576f2852830 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5576f2852718 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5576f2852700 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5576f28526e8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5576f2852608 <col:13> 'int' lvalue ->status 0x5576f2850ff8
| |   | | |     `-CXXThisExpr 0x5576f28525f8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5576f28526c8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5576f2852698 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5576f2852648 <col:23> 'int' lvalue ->status 0x5576f2850ff8
| |   | |   |   `-CXXThisExpr 0x5576f2852638 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5576f28526b0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5576f2852678 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5576f2852810 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5576f28527b0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5576f2852758 <col:13, col:18> '<bound member function type>' .error 0x5576f2716810
| |   |   | | `-DeclRefExpr 0x5576f2852738 <col:13> 'const ArgContext' lvalue ParmVar 0x5576f2850980 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5576f28527d8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5576f2852788 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5576f2852800 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5576f28527f0 <col:20> 'bool' false
| |   |-DeclStmt 0x5576f2852a08 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5576f28529b0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5576f2852940 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5576f2852b68 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5576f2852a20 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5576f25204d8
| |   | |-DeclRefExpr 0x5576f2852a68 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5576f2852130 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5576f2852b38 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5576f2852ab0 <col:64> 'V' lvalue ParmVar 0x5576f2850908 'result' 'V &'
| |   `-ReturnStmt 0x5576f2852ba8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5576f2852b98 <col:16> 'bool' true
| `-CXXMethodDecl 0x5576f28cac98 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5576f28caa70 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5576f28cab48 <col:46, col:49> col:49 used result 'unsigned short &'
|   |-ParmVarDecl 0x5576f28cabb0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5576f28cca30 <col:94, line:1067:5>
|     |-DeclStmt 0x5576f28cb4a8 <line:1054:9, col:64>
|     | `-VarDecl 0x5576f28cb2c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5576f28cb438 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5576f28cb408 <col:36, col:55> 'const bool' lvalue Var 0x5576f250b540 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5576f28cb688 <line:1055:9, col:91>
|     | `-VarDecl 0x5576f28cb4c0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5576f28cb608 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5576f28cb5f0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5576f28cb5d0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5576f28cb5b0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5576f28cb590 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5576f28cb558 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5576f28cb538 <col:36, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5576f2851f08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5576f28cb578 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5576f2851f48 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5576f2851fd0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5576f28cb820 <line:1056:9, col:27>
|     | `-VarDecl 0x5576f28cb7b8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5576f28cbca8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5576f28cbc50 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5576f28cbb08 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5576f28cbad8 <col:13> '<bound member function type>' ->parse 0x5576f28506f0
|     | | | | `-CXXThisExpr 0x5576f28cbac8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5576f28cb968 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5576f28cb938 <col:19, col:23> '<bound member function type>' .begin 0x5576f257d348
|     | | | |   `-DeclRefExpr 0x5576f28cb918 <col:19> 'const String' lvalue ParmVar 0x5576f28caa70 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5576f28cb9d8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5576f28cb9a8 <col:32, col:36> '<bound member function type>' .end 0x5576f257d560
|     | | | |   `-DeclRefExpr 0x5576f28cb988 <col:32> 'const String' lvalue ParmVar 0x5576f28caa70 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5576f28cbb78 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5576f28cbb58 <col:43> 'const bool' lvalue Var 0x5576f28cb2c8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5576f28cba60 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5576f28cba48 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5576f28cba28 <col:58, col:66> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     | | | |-ImplicitCastExpr 0x5576f28cbb90 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5576f28cba88 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5576f28cb7b8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5576f28cbbc8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5576f28cbba8 <col:73> 'const int' lvalue Var 0x5576f28cb4c0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5576f28cbc30 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5576f28cbc00 <col:16, col:20> '<bound member function type>' .end 0x5576f257d560
|     | |     `-DeclRefExpr 0x5576f28cbbe0 <col:16> 'const String' lvalue ParmVar 0x5576f28caa70 'str' 'const String &'
|     | `-BinaryOperator 0x5576f28cbc88 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5576f2852558 <col:13> 'int' lvalue ->status 0x5576f2850ff8
|     |   | `-CXXThisExpr 0x5576f2852548 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5576f28cbc70 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5576f2852588 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fc50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5576f28cbe20 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5576f28cbd40 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5576f28cbd28 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5576f28cbd10 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5576f2852608 <col:13> 'int' lvalue ->status 0x5576f2850ff8
|     | | |     `-CXXThisExpr 0x5576f28525f8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5576f28cbcf0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5576f28cbcc0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5576f2852648 <col:23> 'int' lvalue ->status 0x5576f2850ff8
|     | |   |   `-CXXThisExpr 0x5576f2852638 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5576f28cbcd8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5576f2852678 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5576f28cbe00 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5576f28cbdb0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5576f28cbd80 <col:13, col:18> '<bound member function type>' .error 0x5576f2716810
|     |   | | `-DeclRefExpr 0x5576f28cbd60 <col:13> 'const ArgContext' lvalue ParmVar 0x5576f28cabb0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5576f28cbdd8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5576f2852788 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5576f28cbdf0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5576f28527f0 <col:20> 'bool' false
|     |-DeclStmt 0x5576f28cc368 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5576f28cc310 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned short>::type':'unsigned short'
|     |   `-ElaboratedType 0x5576f28cc2c0 'typename make_unsigned<unsigned short>::type' sugar
|     |     `-TypedefType 0x5576f28cc2a0 'make_unsigned<unsigned short>::type' sugar
|     |       |-Typedef 0x5576f28cc230 'type'
|     |       `-ElaboratedType 0x5576f28cc1e0 'typename integer_traits<unsigned short>::unsigned_type' sugar
|     |         `-TypedefType 0x5576f28cc1c0 'integer_traits<unsigned short>::unsigned_type' sugar
|     |           |-Typedef 0x5576f250b698 'unsigned_type'
|     |           `-BuiltinType 0x5576f22343f0 'unsigned short'
|     |-CallExpr 0x5576f28cc9c0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5576f28cc9a8 <col:9> 'void (*)(const unsigned int *, unsigned short &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5576f28cc928 <col:9> 'void (const unsigned int *, unsigned short &)' lvalue Function 0x5576f28cc808 'extract_integer' 'void (const unsigned int *, unsigned short &)' (FunctionTemplate 0x5576f25204d8 'extract_integer')
|     | |-ImplicitCastExpr 0x5576f28cca08 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5576f28cc9f0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5576f28cc3c8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5576f28cb7b8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5576f28cc498 <col:28, col:70> 'unsigned_v_type':'unsigned short' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5576f28cc448 <col:64> 'unsigned short':'unsigned short' lvalue ParmVar 0x5576f28cab48 'result' 'unsigned short &'
|     `-ReturnStmt 0x5576f28cca20 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5576f2852b98 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5576f2850f08 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5576f2850bb8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5576f2850e68 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5576f2850c68 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5576f2850d08 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5576f2850d80 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5576f2851718 <col:71> 'const ArgContext' lvalue Var 0x5576f28457c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5576f2853338 <col:83, line:1083:5>
| |   |-DeclStmt 0x5576f2852c80 <line:1071:9, col:12>
| |   | `-VarDecl 0x5576f2852c18 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5576f2853310 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5576f2852f20 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5576f2852d98 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5576f2852d60 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5576f2852ca8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5576f2852d00 <col:31> 'const String' lvalue ParmVar 0x5576f2850c68 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5576f2852d20 <col:36> 'V' lvalue Var 0x5576f2852c18 'x' 'V'
| |     | |   `-DeclRefExpr 0x5576f2852d40 <col:39> 'const ArgContext' lvalue ParmVar 0x5576f2850d80 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5576f2852f00 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5576f2852ee0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5576f2852ec8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5576f2852eb0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5576f2852dc0 <col:17> 'int' lvalue ->status 0x5576f2850ff8
| |     |     |     `-CXXThisExpr 0x5576f2852db0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5576f2852e90 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5576f2852e60 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5576f2852e00 <col:27> 'int' lvalue ->status 0x5576f2850ff8
| |     |       |   `-CXXThisExpr 0x5576f2852df0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5576f2852e78 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5576f2852e40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5576f2852f50 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5576f2852f40 <col:20> 'bool' false
| |     `-IfStmt 0x5576f28532e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5576f2852ff0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5576f2852fc0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5576f2852f70 <col:18> 'int' lvalue ->status 0x5576f2850ff8
| |       | |   `-CXXThisExpr 0x5576f2852f60 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5576f2852fd8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5576f2852fa0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5576f2853228 <col:42, line:1079:9>
| |       | |-CallExpr 0x5576f28531d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5576f2853020 <line:1076:13> '<bound member function type>' ->range_error 0x5576f2851608
| |       | | | `-CXXThisExpr 0x5576f2853010 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5576f2853050 <col:25> 'const ArgContext' lvalue ParmVar 0x5576f2850d80 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5576f2853130 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5576f28531a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5576f2853188 <col:43> 'V' lvalue Var 0x5576f2852c18 'x' 'V'
| |       | `-ReturnStmt 0x5576f2853218 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5576f2853208 <col:20> 'bool' false
| |       `-CompoundStmt 0x5576f28532c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5576f2853288 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5576f2853248 <col:13> 'V' lvalue ParmVar 0x5576f2850d08 'result' 'V &'
| |         | `-DeclRefExpr 0x5576f2853268 <col:22> 'V' lvalue Var 0x5576f2852c18 'x' 'V'
| |         `-ReturnStmt 0x5576f28532b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5576f28532a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5576f28ca658 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5576f28ca3f0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5576f28ca4c8 <col:35, col:38> col:38 used result 'unsigned short &'
|   |-ParmVarDecl 0x5576f28ca530 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5576f28cb2a8 <col:83, line:1083:5>
|     |-DeclStmt 0x5576f28ca8e0 <line:1071:9, col:12>
|     | `-VarDecl 0x5576f28ca878 <col:9, col:11> col:11 used x 'unsigned short':'unsigned short'
|     `-IfStmt 0x5576f28cb280 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5576f28caf10 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5576f28cae38 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5576f28cae00 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5576f28cadb8 <col:14> '<bound member function type>' ->parse_saturating 0x5576f28cac98
|       | |   | `-CXXThisExpr 0x5576f28cada8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5576f28ca950 <col:31> 'const String' lvalue ParmVar 0x5576f28ca3f0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5576f28ca970 <col:36> 'unsigned short':'unsigned short' lvalue Var 0x5576f28ca878 'x' 'unsigned short':'unsigned short'
|       | |   `-DeclRefExpr 0x5576f28ca990 <col:39> 'const ArgContext' lvalue ParmVar 0x5576f28ca530 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5576f28caef0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5576f28caed0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5576f28caeb8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5576f28caea0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5576f2852dc0 <col:17> 'int' lvalue ->status 0x5576f2850ff8
|       |     |     `-CXXThisExpr 0x5576f2852db0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5576f28cae80 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5576f28cae50 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5576f2852e00 <col:27> 'int' lvalue ->status 0x5576f2850ff8
|       |       |   `-CXXThisExpr 0x5576f2852df0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5576f28cae68 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5576f2852e40 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5576f28caf30 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5576f2852f40 <col:20> 'bool' false
|       `-IfStmt 0x5576f28cb258 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5576f28caf70 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5576f28caf40 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5576f2852f70 <col:18> 'int' lvalue ->status 0x5576f2850ff8
|         | |   `-CXXThisExpr 0x5576f2852f60 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5576f28caf58 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5576f2852fa0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5576f284fce0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5576f28cb190 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5576f28cb100 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5576f2853020 <line:1076:13> '<bound member function type>' ->range_error 0x5576f2851608
|         | | | `-CXXThisExpr 0x5576f2853010 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5576f28caf90 <col:25> 'const ArgContext' lvalue ParmVar 0x5576f28ca530 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5576f28cb168 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5576f28cb138 <col:31, col:50> 'const bool' lvalue Var 0x5576f250b540 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5576f28cb0d8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5576f28cb0c0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5576f28cb0a8 <col:43> 'unsigned short':'unsigned short' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5576f28cb088 <col:43> 'unsigned short':'unsigned short' lvalue Var 0x5576f28ca878 'x' 'unsigned short':'unsigned short'
|         | `-ReturnStmt 0x5576f28cb180 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5576f2853208 <col:20> 'bool' false
|         `-CompoundStmt 0x5576f28cb238 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5576f28cb208 <line:1080:13, col:22> 'unsigned short':'unsigned short' lvalue '='
|           | |-DeclRefExpr 0x5576f28cb1b0 <col:13> 'unsigned short':'unsigned short' lvalue ParmVar 0x5576f28ca4c8 'result' 'unsigned short &'
|           | `-ImplicitCastExpr 0x5576f28cb1f0 <col:22> 'unsigned short':'unsigned short' <LValueToRValue>
|           |   `-DeclRefExpr 0x5576f28cb1d0 <col:22> 'unsigned short':'unsigned short' lvalue Var 0x5576f28ca878 'x' 'unsigned short':'unsigned short'
|           `-ReturnStmt 0x5576f28cb228 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5576f28532a8 <col:20> 'bool' true
|-FieldDecl 0x5576f2850f90 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5576f2850ff8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5576f2851048 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5576f2851300 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5576f2851088 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5576f2851108 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5576f2851180 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5576f2851200 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5576f2851608 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5576f28513d0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5576f2851448 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5576f28514e0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5576f2853b98 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5576f2853b98
| `-ParmVarDecl 0x5576f2853ca8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5576f2853e28 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f2853f38 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5576f28c7130 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5576f28c7100 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5576f28c70d0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5576f28c70a0 <col:7> 'IntArg' lvalue ParmVar 0x5576f2853f38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5576f2850f90 'base' 'int'
| | `-ImplicitCastExpr 0x5576f28c7228 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5576f28c71f8 <col:7> 'int' xvalue .base 0x5576f2850f90
| |     `-CXXStaticCastExpr 0x5576f28c71c8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5576f28c7198 <col:7> 'IntArg' lvalue ParmVar 0x5576f2853f38 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5576f2850ff8 'status' 'int'
| | `-ImplicitCastExpr 0x5576f28c72f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5576f28c72c8 <col:7> 'int' xvalue .status 0x5576f2850ff8
| |     `-CXXStaticCastExpr 0x5576f28c7298 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5576f28c7268 <col:7> 'IntArg' lvalue ParmVar 0x5576f2853f38 '' 'IntArg &&'
| `-CompoundStmt 0x5576f28c7350 <col:7>
`-CXXDestructorDecl 0x5576f28c3fb0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576f2857ad0 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x5576f2857d28 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5576f28c3ed8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5576f28c6730 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5576f28c6710 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5576f28c67a0 <col:19>
|-CXXConstructorDecl 0x5576f28c40b8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x5576f28c40b8
| `-ParmVarDecl 0x5576f28c64b0 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x5576f28c6548 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f28c6658 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5576f28c7360 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5576f28c7080 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5576f28c7050 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x5576f28c7020 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x5576f28c6658 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x5576f28c73d0 <col:19>
`-CXXDestructorDecl 0x5576f28c67e0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576f285d510 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576f285d628 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5576f285d6b8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5576f285d8f8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5576f285d6f0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5576f285d770 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5576f285d7e8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5576f285db10 <col:81> 'const ArgContext' lvalue Var 0x5576f28457c8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5576f285da50 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5576f285d9c0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5576f285dc68 <col:35, line:1261:5>
|   `-ReturnStmt 0x5576f285dc58 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5576f285dc40 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5576f285dc10 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5576f285dbf8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5576f285dbd0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5576f285dbb0 <col:16, col:24> 'String' (CXXTemporary 0x5576f285dbb0)
|               `-CXXConstructExpr 0x5576f285db78 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5576f285db60 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5576f285db40 <col:23> 'bool' lvalue ParmVar 0x5576f285d9c0 'x' 'bool'
|-CXXConstructorDecl 0x5576f28d5b48 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5576f28d5c20 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5576f28d5d58 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x5576f28d5d58
| `-ParmVarDecl 0x5576f28d5e68 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x5576f28d5f08 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5576f28d6018 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x5576f28d6c70 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576f285dca8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5576f285df08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5576f28d5a58 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5576f28d6088 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x5576f28d6088
| `-ParmVarDecl 0x5576f28d6198 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5576f28d6238 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5576f28d6348 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5576f28d6c80 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5576f28d6c50 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x5576f28d6c20 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x5576f28d6bf0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5576f28d6348 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x5576f28d6cf0 <col:19>
`-CXXDestructorDecl 0x5576f28d63e8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
