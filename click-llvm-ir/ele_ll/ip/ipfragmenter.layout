
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402ef1e38 prev 0x559402ee95d8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402ef1f30 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x559402ef1fc0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x559402ef2038 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x559402ef20f8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x559402ef21c0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x559402ef2338 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x559402ef2270 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x559402ef23e0 <col:24>
| `-OptimizeNoneAttr 0x559402ef2438 <col:34>
|-CXXMethodDecl 0x559402ef2480 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x559402ef2738 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x559402ef2530 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x559402ef25a8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x559402ef2628 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x559402ef27f0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x559402ef2828 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x559402ef2890 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x559402ef2918 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x559402ef2c38 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x559402ef29d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x559402ef2a48 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x559402ef2ac0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x559402ef2b40 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x559402ef2d50 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x559402efa6c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559402efa6c8
| `-ParmVarDecl 0x559402efa7d8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x559402efa878 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559402efa878
| `-ParmVarDecl 0x559402efa988 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x559402fc7068 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402ee4e50 prev 0x559402ee4bd0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559402ee4f48 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x559402ee4fd8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x559402ee5038 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x559402ee5128 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x559402ee5228 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x559402ee53f8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x559402ee52a8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x559402ee5320 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x559402ee5588 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x559402ee54c0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x559402ee5630 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x559402ee5768 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x559402ee56a0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x559402ee5908 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x559402ee5848 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x559402ee5aa8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x559402ee59e8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x559402ee5b50 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x559402ee5c50 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x559402ee5d30 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402ee5c30 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x559402ee5c10 <col:26> 'int' 1
| `-EnumConstantDecl 0x559402ee5ce0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x559402ee5d48 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402ee5cc0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x559402ee5ca0 <col:44> 'int' 2
|-CXXMethodDecl 0x559402ee5e90 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x559402ee5d78 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x559402ee5df8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x559402ee5fe8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x559402ee5f58 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x559402ee6228 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x559402ee60a8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x559402ee6120 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x559402ee62d8 <col:20>
| `-OptimizeNoneAttr 0x559402ee6330 <col:30>
|-CXXMethodDecl 0x559402ee6438 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x559402ee6370 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x559402ee64e0 <col:20>
| `-OptimizeNoneAttr 0x559402ee6538 <col:30>
|-CXXMethodDecl 0x559402ee6588 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x559402ee6650 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x559402ee6768 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x559402ee67f0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x559402ee6878 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x559402ee6900 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x559402ee6988 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x559402ee6a18 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x559402ee6ad8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x559402ee6b60 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x559402ee6be8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x559402ee6c70 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x559402ee6cf8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x559402ee6d80 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x559402ee6e10 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x559402ee6ed0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x559402ee6f60 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x559402ee70b0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x559402ee7018 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x559402ee7240 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x559402ee7170 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x559402ee74f0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x559402ee72f8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x559402ee7378 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x559402ee73f8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x559402ee75a8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x559402ee76b0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559402ee7940 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402ee7690 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x559402ee7670 <col:33> 'int' 0
| |-EnumConstantDecl 0x559402ee7740 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559402ee7958 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402ee7720 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x559402ee7700 <col:32> 'int' 20
| |-EnumConstantDecl 0x559402ee77d0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559402ee7970 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402ee77b0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x559402ee7790 <col:38> 'int' 90
| |-EnumConstantDecl 0x559402ee7860 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x559402ee7988 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402ee7840 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x559402ee7820 <col:35> 'int' 100
| `-EnumConstantDecl 0x559402ee78f0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x559402ee79a0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402ee78d0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x559402ee78b0 <col:32> 'int' 2000
|-CXXMethodDecl 0x559402ee79e0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x559402ee7e20 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559402ee7c90 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x559402ee7d08 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559402ee7ef0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x559402ee8070 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x559402ee7fa0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559402ee8278 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559402ee8128 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x559402ee81a0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559402ee8378 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x559402ee8418 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x559402ee84e0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x559402ee8570 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x559402ee87a0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402ee8550 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x559402ee8530 <col:36> 'int' EnumConstant 0x559402ee84e0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x559402ee85c0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559402ee8610 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559402ee8660 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559402ee86b0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x559402ee8700 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x559402ee8750 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x559402ee8888 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x559402ee87c8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x559402ee8950 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x559402ee8a10 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x559402ee8ad0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x559402ee8b90 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x559402ee8ca8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x559402ee8d70 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x559402ee8ef0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x559402ee8e20 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x559402ee9018 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x559402ee9218 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x559402ee90c8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x559402ee9148 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x559402ef6b68 <col:54, line:127:5>
|   |-ParenExpr 0x559402ef6a18 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x559402ef69e8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x559402ef66d8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559402ef66b0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x559402ef6698 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x559402ef6680 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x559402ef6650 <col:31> 'Router *' lvalue ->_router 0x559402ef4530
|   |   |         `-CXXThisExpr 0x559402ef6640 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559402ef6738 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ef6718 <col:48> 'int' 0
|   |   `-CallExpr 0x559402ef6948 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x559402ef6930 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ef6910 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ef6988 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ef67a8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x559402ef69a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ef67c8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x559402ef69b8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ef6800 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x559402ef69d0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ef68f8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ef68e0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ef6898 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x559402ef6ab0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x559402ef6a48 <col:9> 'Router *' lvalue ->_router 0x559402ef4530
|   | | `-CXXThisExpr 0x559402ef6a38 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x559402ef6a98 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559402ef6a78 <col:19> 'Router *' lvalue ParmVar 0x559402ee90c8 'r' 'Router *'
|   `-BinaryOperator 0x559402ef6b48 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x559402ef6ae0 <col:9> 'int' lvalue ->_eindex 0x559402ef4598
|     | `-CXXThisExpr 0x559402ef6ad0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x559402ef6b30 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x559402ef6b10 <col:19> 'int' lvalue ParmVar 0x559402ee9148 'eindex' 'int'
|-CXXMethodDecl 0x559402ee93a0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x559402ee92d8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x559402ee9470 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x559402ee9538 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x559402ee95d8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x559402ee9828 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x559402ee96a0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x559402ee9720 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x559402ee98d8 <col:20>
| `-OptimizeNoneAttr 0x559402ee9930 <col:30>
|-CXXMethodDecl 0x559402ee9a38 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559402ee9970 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x559402ee9ae0 <col:20>
| `-OptimizeNoneAttr 0x559402ee9b38 <col:30>
|-CXXMethodDecl 0x559402ee9c08 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x559402ee9b78 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x559402ee9cb0 <col:20>
| `-OptimizeNoneAttr 0x559402ee9d08 <col:30>
|-CXXMethodDecl 0x559402ee9e98 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x559402ee9d40 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x559402ee9dc0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x559402eea028 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559402ee9f60 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x559402eea178 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x559402eea0e8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x559402eea2c8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x559402eea238 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x559402eea418 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x559402eea388 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x559402eea6d8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x559402eea4d0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x559402eea550 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x559402eea5f8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x559402eea7b0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x559402eea870 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x559402eeab40 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x559402eea9f0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x559402eeaa68 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x559402eeac68 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x559402eeae40 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x559402eead20 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x559402eeada0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x559402eeb028 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x559402eeaf08 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x559402eeaf88 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x559402eeb398 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x559402eeb0e8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559402eeb160 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559402eeb1e0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559402ef6150 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559402ef6130 <col:106> 'int' 0
| `-ParmVarDecl 0x559402eeb258 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559402ef6188 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559402ef6168 <col:126> 'int' 0
|-CXXMethodDecl 0x559402eeb738 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559402eeb468 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559402eeb500 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559402eeb580 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x559402eeb5f8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559402ef61c0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559402ef61a0 <col:114> 'int' 0
|-CXXMethodDecl 0x559402eebac8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559402eeb810 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x559402eeb888 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x559402eeb908 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x559402ef61d8 <col:96> 'int' 0
| `-ParmVarDecl 0x559402eeb980 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559402ef6218 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559402ef61f8 <col:116> 'int' 0
|-CXXMethodDecl 0x559402eebe48 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x559402eebb98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559402eebc10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559402eebc90 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559402ef6250 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559402ef6230 <col:109> 'int' 0
| `-ParmVarDecl 0x559402eebd08 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559402ef6288 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559402ef6268 <col:129> 'int' 0
|-CXXMethodDecl 0x559402eec1c8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559402eebf18 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x559402eebf90 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559402eec010 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x559402eec088 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559402ef62c0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559402ef62a0 <col:117> 'int' 0
|-CXXMethodDecl 0x559402eec558 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x559402eec2a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eec318 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x559402eec398 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x559402ef62d8 <col:99> 'int' 0
| `-ParmVarDecl 0x559402eec410 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x559402ef6318 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x559402ef62f8 <col:119> 'int' 0
|-CXXMethodDecl 0x559402eec978 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x559402eec628 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559402eec6a8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559402eec720 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559402eec7a0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x559402ef6350 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x559402ef6330 <col:108> 'int' 0
| `-ParmVarDecl 0x559402eec820 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x559402ef6388 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x559402ef6368 <col:141> 'int' 0
|-CXXMethodDecl 0x559402eecd98 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559402eeca50 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x559402eecad0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x559402eecb48 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559402eecbc8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x559402eecc48 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x559402ef63a0 <col:121> 'int' 0
|-CXXMethodDecl 0x559402eed1c8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x559402eece78 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x559402eecef8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x559402eecf70 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x559402eecff0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x559402ef63c0 <col:98> 'int' 0
| `-ParmVarDecl 0x559402eed070 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x559402ef63e0 <col:123> 'int' 0
|-CXXMethodDecl 0x559402eed490 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x559402eed2a0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x559402eed320 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x559402eed3a0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x559402ef6400 <col:80> 'int' 0
|-EnumDecl 0x559402eed548 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x559402eed650 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559402eed8e0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eed630 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x559402eed610 <col:42> 'int' 1
| |-EnumConstantDecl 0x559402eed6e0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559402eed8f8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eed6c0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x559402eed6a0 <col:40> 'int' 2
| |-EnumConstantDecl 0x559402eed770 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559402eed910 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eed750 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x559402eed730 <col:44> 'int' 4
| |-EnumConstantDecl 0x559402eed800 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x559402eed928 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eed7e0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x559402eed7c0 <col:36> 'int' 7
| `-EnumConstantDecl 0x559402eed890 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x559402eed940 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402eed870 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x559402eed850 <col:34> 'int' 6
|-CXXMethodDecl 0x559402eedbf8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x559402eed968 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x559402eeda08 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x559402eeda88 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x559402eedb00 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x559402ef64b8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x559402ef64a0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x559402ef6488 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x559402ef6468 <col:98, col:105> 'String' (CXXTemporary 0x559402ef6468)
|           `-CXXTemporaryObjectExpr 0x559402ef6430 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x559402eede98 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x559402eedcc8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x559402eedd40 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x559402eeddb8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559402ef6568 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559402ef6550 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559402ef6538 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x559402ef6518 <col:94, col:101> 'String' (CXXTemporary 0x559402ef6518)
| |         `-CXXTemporaryObjectExpr 0x559402ef64e0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x559402ef6d50 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x559402ef6cc8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x559402ef6c98 <col:9> '<bound member function type>' ->add_task_handlers 0x559402eedbf8
|     | `-CXXThisExpr 0x559402ef6c88 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x559402ef6d08 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559402ef6c08 <col:27> 'Task *' lvalue ParmVar 0x559402eedcc8 'task' 'Task *'
|     |-ImplicitCastExpr 0x559402ef6d20 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x559402ef6c28 <col:33> 'NotifierSignal *' lvalue ParmVar 0x559402eedd40 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x559402ef6d38 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559402ef6c48 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559402eed890 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559402ef6c68 <col:62> 'const String' lvalue ParmVar 0x559402eeddb8 'prefix' 'const String &'
|-CXXMethodDecl 0x559402eee0a8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x559402eedf60 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x559402eedfd8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x559402ef6618 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x559402ef6600 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x559402ef65e8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x559402ef65c8 <col:70, col:77> 'String' (CXXTemporary 0x559402ef65c8)
| |         `-CXXTemporaryObjectExpr 0x559402ef6590 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x559402ef6f28 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x559402ef6ea0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x559402ef6e70 <col:9> '<bound member function type>' ->add_task_handlers 0x559402eedbf8
|     | `-CXXThisExpr 0x559402ef6e60 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x559402ef6ee0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x559402ef6de0 <col:27> 'Task *' lvalue ParmVar 0x559402eedf60 'task' 'Task *'
|     |-ImplicitCastExpr 0x559402ef6ef8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x559402ef6e00 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x559402ef6f10 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x559402ef6e20 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x559402eed890 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x559402ef6e40 <col:57> 'const String' lvalue ParmVar 0x559402eedfd8 'prefix' 'const String &'
|-CXXMethodDecl 0x559402eee388 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x559402eee170 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eee1f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eee268 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x559402eee638 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x559402eee458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eee4d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eee558 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x559402eee928 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x559402eee708 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eee788 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eee800 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x559402eeebd8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x559402eee9f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eeea78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eeeaf8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x559402eeee88 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x559402eeeca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eeed28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eeeda8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x559402eef138 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x559402eeef58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eeefd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eef050 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x559402eef3e8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x559402eef208 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eef288 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eef308 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x559402eef6f8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x559402eef510 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eef590 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eef610 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x559402eef9d8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x559402eef7c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eef848 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eef8f0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x559402eefcb8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x559402eefaa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402eefb28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402eefbd0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x559402eeff20 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x559402eefd88 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559402eefe08 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x559402eefe80 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x559402ef01c8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x559402eefff0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x559402ef0070 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x559402ef00e8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x559402ef0478 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x559402ef0298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402ef0318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402ef0398 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x559402ef0728 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x559402ef0548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402ef05c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402ef0640 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x559402ef09d8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x559402ef07f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402ef0878 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402ef08f0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x559402ef0ca8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x559402ef0aa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402ef0b28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x559402ef0bc8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x559402ef0fd8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x559402ef0d78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x559402ef0df8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x559402ef0e70 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x559402ef0ee8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559402ef6630 <col:93> 'bool' false
|-CXXMethodDecl 0x559402ef11c0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559402ef10a8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x559402ef1128 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x559402ef1398 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559402ef1280 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x559402ef1300 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x559402ef1678 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559402ef1458 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x559402ef14d0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x559402ef1550 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x559402ef15c8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x559402ef1968 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x559402ef1748 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x559402ef17c0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x559402ef1840 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x559402ef18b8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x559402ef1ba0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x559402ef1a40 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x559402ef1ac0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x559402ef1d88 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x559402ef1c68 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x559402ef1ce8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x559402ef1e38 prev 0x559402ee95d8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559402ef1f30 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x559402ef1fc0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x559402ef2038 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x559402ef20f8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x559402ef21c0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x559402ef2338 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x559402ef2270 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x559402ef23e0 <col:24>
| | `-OptimizeNoneAttr 0x559402ef2438 <col:34>
| |-CXXMethodDecl 0x559402ef2480 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x559402ef2738 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x559402ef2530 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x559402ef25a8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x559402ef2628 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x559402ef27f0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x559402ef2828 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x559402ef2890 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x559402ef2918 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x559402ef2c38 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x559402ef29d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x559402ef2a48 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x559402ef2ac0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x559402ef2b40 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x559402ef2d50 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x559402efa6c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x559402efa6c8
| | `-ParmVarDecl 0x559402efa7d8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x559402efa878 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x559402efa878
| | `-ParmVarDecl 0x559402efa988 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x559402fc7068 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559402ef2dc8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x559402ef2e68 <col:38> "" ""
|-CXXMethodDecl 0x559402ef2ef8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x559402ef2f98 <col:44> "" ""
|-AccessSpecDecl 0x559402ef3008 <line:260:3, col:10> col:3 private
|-EnumDecl 0x559402ef3030 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x559402ef3130 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x559402ef3180 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402ef3110 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x559402ef30f0 <col:27> 'int' 4
|-FieldDecl 0x559402ef3238 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x559402ef33e8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x559402ef34a0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x559402ef4530 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x559402ef4598 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x559402ef46e8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x559402ef4628 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x559402ef4898 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x559402ef47a8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x559402ef4a78 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x559402ef4958 <col:20> col:23 'int'
| `-ParmVarDecl 0x559402ef49d8 <col:25> col:28 'int'
|-CXXMethodDecl 0x559402ef4d20 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x559402ef4b40 <col:23> col:26 'int'
| |-ParmVarDecl 0x559402ef4bc0 <col:28> col:31 'int'
| `-ParmVarDecl 0x559402ef4c38 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x559402ef4dd8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x559402ef4ea0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x559402ef4ef0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x559402ef4f40 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x559402ef5120 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x559402ef4fd0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x559402ef5048 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559402ef53c8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x559402ef51e8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x559402ef5268 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x559402ef52e0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x559402ef55e8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x559402ef5498 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x559402ef5518 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x559402ef5920 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x559402ef56a8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x559402ef5728 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x559402ef57a0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x559402ef5820 <col:57> col:60 'int'
|-CXXMethodDecl 0x559402ef5b08 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x559402ef59f0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x559402ef5a70 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x559402ef5c58 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x559402ef5bc8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x559402ef5fd8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x559402ef5d18 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x559402ef5d98 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x559402ef5e10 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x559402ef5e90 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x559402ef60f0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPFragmenter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _honor_df
       109 |   _Bool _verbose
       112 |   unsigned int _mtu
       116 |   unsigned int _headroom
       120 |   class atomic_uint32_t _drops
       120 |     uint32_t _val
       124 |   class atomic_uint32_t _fragments
       124 |     uint32_t _val
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402ca36e0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402ca37f8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x559402ca3888 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x559402ca3958 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x559402ca3a40 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x559402ca3c58 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559402ca3b00 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca3e08 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x559402ca3d10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x559402ca3f50 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x559402ca3ec0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x559402ca4098 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559402ca4008 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca41e0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x559402ca4150 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca42a8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x559402ca43f0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x559402ca4360 <col:28> col:31 'int'
|-CXXMethodDecl 0x559402ca44b8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x559402ca4600 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x559402ca4570 <col:28> col:31 'int'
|-CXXMethodDecl 0x559402ca4778 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x559402ca46b8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca48c0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x559402ca4830 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca4988 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x559402ca4b48 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559402ca4a38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559402ca4ab0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca4d98 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559402ca4c08 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559402ca4c80 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559402ca4e48 <col:86> "" ""
|-CXXMethodDecl 0x559402ca50b8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x559402ca4f28 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x559402ca4fa0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca5268 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x559402ca5178 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x559402ca5418 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x559402ca5320 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x559402ca56e8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x559402ca54d0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x559402ca5548 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559402ca55c0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca59c8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x559402ca57b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x559402ca5828 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559402ca58a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559402ca5a80 <col:115> "" ""
|-AccessSpecDecl 0x559402ca5af0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x559402ca5b28 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ca6030 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x559402ca6030
| `-ParmVarDecl 0x559402ca6138 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x559402ca61d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x559402ca61d8
| `-ParmVarDecl 0x559402ca62e8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x559402cdb918 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559402ece940 <col:7>
|-CXXConstructorDecl 0x559402cdb9f0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x559402cdb9f0
| `-ParmVarDecl 0x559402cdbb08 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x559402cdbb78 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x559402cdbb78
| `-ParmVarDecl 0x559402cdbc88 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x559402ed1340 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402efd838 <../elements/ip/ipfragmenter.hh:58:1, line:87:1> line:58:7 class IPFragmenter definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x559402efd998 <col:1, col:7> col:7 implicit referenced class IPFragmenter
|-AccessSpecDecl 0x559402efda28 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x559402efdab0 <line:60:3, col:16> col:3 IPFragmenter 'void ()'
|-CXXDestructorDecl 0x559402efdba0 <line:61:3, col:17> col:3 ~IPFragmenter 'void ()' noexcept-unevaluated 0x559402efdba0
| `-Overrides: [ 0x559402ee5128 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x559402efdcd0 <line:63:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x559402ee6588 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x559402efef78 <col:34, col:59>
|   `-ReturnStmt 0x559402efef68 <col:36, col:43>
|     `-ImplicitCastExpr 0x559402efef50 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x559402efef28 <col:43> 'const char [13]' lvalue "IPFragmenter"
|-CXXMethodDecl 0x559402efdd98 <line:64:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x559402ee6650 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x559402efefd8 <col:34, col:56>
|   `-ReturnStmt 0x559402efefc8 <col:36, col:43>
|     `-ImplicitCastExpr 0x559402efefb0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x559402efef90 <col:43> 'const char []' lvalue Var 0x559402ee6988 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x559402efde60 <line:65:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x559402ee6a18 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x559402eff038 <col:34, col:49>
|   `-ReturnStmt 0x559402eff028 <col:36, col:43>
|     `-ImplicitCastExpr 0x559402eff010 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x559402efeff0 <col:43> 'const char []' lvalue Var 0x559402ee6b60 'PUSH' 'const char []'
|-CXXMethodDecl 0x559402efe130 <line:66:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x559402ee7e20 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x559402efdfe0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x559402efe058 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x559402efe200 <line:68:3, col:43> col:12 drops 'uint32_t () const'
| `-CompoundStmt 0x559402eff108 <col:26, col:43>
|   `-ReturnStmt 0x559402eff0f8 <col:28, col:35>
|     `-ImplicitCastExpr 0x559402eff0e0 <col:35> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x559402eff0c0 <col:35> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x559402eff090 <col:35> '<bound member function type>' .operator unsigned int 0x559402ca3a40
|           `-MemberExpr 0x559402eff060 <col:35> 'const atomic_uint32_t' lvalue ->_drops 0x559402efe7c0
|             `-CXXThisExpr 0x559402eff050 <col:35> 'const IPFragmenter *' implicit this
|-CXXMethodDecl 0x559402efe2c0 <line:69:3, col:51> col:12 fragments 'uint32_t () const'
| `-CompoundStmt 0x559402eff1d8 <col:30, col:51>
|   `-ReturnStmt 0x559402eff1c8 <col:32, col:39>
|     `-ImplicitCastExpr 0x559402eff1b0 <col:39> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       `-CXXMemberCallExpr 0x559402eff190 <col:39> 'uint32_t':'unsigned int'
|         `-MemberExpr 0x559402eff160 <col:39> '<bound member function type>' .operator unsigned int 0x559402ca3a40
|           `-MemberExpr 0x559402eff130 <col:39> 'const atomic_uint32_t' lvalue ->_fragments 0x559402efe820
|             `-CXXThisExpr 0x559402eff120 <col:39> 'const IPFragmenter *' implicit this
|-CXXMethodDecl 0x559402efe380 <line:71:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x559402ee7ef0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x559402efe548 <line:73:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x559402ee53f8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x559402efe438 <col:13> col:16 'int'
| `-ParmVarDecl 0x559402efe4b0 <col:18, col:25> col:26 'Packet *'
|-AccessSpecDecl 0x559402efe5f8 <line:75:2, col:9> col:2 private
|-FieldDecl 0x559402efe630 <line:77:3, col:8> col:8 _honor_df 'bool'
|-FieldDecl 0x559402efe690 <line:78:3, col:8> col:8 _verbose 'bool'
|-FieldDecl 0x559402efe6f8 <line:79:3, col:12> col:12 _mtu 'unsigned int'
|-FieldDecl 0x559402efe760 <line:80:3, col:12> col:12 _headroom 'unsigned int'
|-FieldDecl 0x559402efe7c0 <line:81:3, col:19> col:19 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x559402efe820 <line:82:3, col:19> col:19 referenced _fragments 'atomic_uint32_t'
|-CXXMethodDecl 0x559402efe910 <line:84:3, col:25> col:8 fragment 'void (Packet *)'
| `-ParmVarDecl 0x559402efe880 <col:17, col:24> col:25 'Packet *'
|-CXXMethodDecl 0x559402efeb20 <line:85:3, col:49> col:7 optcopy 'int (const click_ip *, click_ip *)'
| |-ParmVarDecl 0x559402efe9c8 <col:15, col:31> col:31 ip1 'const click_ip *'
| `-ParmVarDecl 0x559402efea40 <col:36, col:46> col:46 ip2 'click_ip *'
|-CXXConstructorDecl 0x559402efebf8 <line:58:7> col:7 implicit IPFragmenter 'void (const IPFragmenter &)' inline default_delete noexcept-unevaluated 0x559402efebf8
| `-ParmVarDecl 0x559402efed08 <col:7> col:7 'const IPFragmenter &'
`-CXXMethodDecl 0x559402efeda8 <col:7> col:7 implicit operator= 'IPFragmenter &(const IPFragmenter &)' inline default_delete noexcept-unevaluated 0x559402efeda8
  `-ParmVarDecl 0x559402efeeb8 <col:7> col:7 'const IPFragmenter &'

Layout: <CGRecordLayout
  LLVMType:%class.IPFragmenter = type { %class.Element.base, i8, i8, i32, i32, %class.atomic_uint32_t, %class.atomic_uint32_t }
  NonVirtualBaseLLVMType:%class.IPFragmenter = type { %class.Element.base, i8, i8, i32, i32, %class.atomic_uint32_t, %class.atomic_uint32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402cb7ac0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x559402cb7bd8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x559402cb7c78 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x559402cb7cd8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x559402cb7d38 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x559402cb7de8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402cb80f0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402cb8208 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x559402cb82b0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x559402cb8318 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x559402cb83a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x559402cbe440 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559402cbe878 <col:12>
|-CXXConstructorDecl 0x559402cbe548 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559402cbe658 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559402cb82b0 'data' 'const char *'
| | `-ImplicitCastExpr 0x559402cc0e00 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x559402cc0dd0 <col:12> 'const char *const' lvalue .data 0x559402cb82b0
| |     `-DeclRefExpr 0x559402cc0db0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402cbe658 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559402cb8318 'length' 'int'
| | `-ImplicitCastExpr 0x559402cc0e90 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x559402cc0e60 <col:12> 'const int' lvalue .length 0x559402cb8318
| |     `-DeclRefExpr 0x559402cc0e40 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402cbe658 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x559402cb83a8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x559402cc0f20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x559402cc0ef0 <col:12> 'String::memo_t *const' lvalue .memo 0x559402cb83a8
| |     `-DeclRefExpr 0x559402cc0ed0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402cbe658 '' 'const String::rep_t &'
| `-CompoundStmt 0x559402cc0f78 <col:12>
|-CXXConstructorDecl 0x559402cbe6f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559402cbe6f8
| `-ParmVarDecl 0x559402cbe808 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x559402cc3d60 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559402ccf778 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559402ccf888 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x559402ccfda0 <col:12>
|   |-BinaryOperator 0x559402ccfbb8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x559402ccfb70 <col:12> 'const char *' lvalue ->data 0x559402cb82b0
|   | | `-CXXThisExpr 0x559402ccfb60 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559402ccfba0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x559402ccfb30 <col:12> 'const char *const' lvalue .data 0x559402cb82b0
|   |     `-DeclRefExpr 0x559402ccfb10 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402ccf888 '' 'const String::rep_t &'
|   |-BinaryOperator 0x559402ccfc80 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x559402ccfc38 <col:12> 'int' lvalue ->length 0x559402cb8318
|   | | `-CXXThisExpr 0x559402ccfc28 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559402ccfc68 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x559402ccfbf8 <col:12> 'const int' lvalue .length 0x559402cb8318
|   |     `-DeclRefExpr 0x559402ccfbd8 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402ccf888 '' 'const String::rep_t &'
|   |-BinaryOperator 0x559402ccfd48 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x559402ccfd00 <col:12> 'String::memo_t *' lvalue ->memo 0x559402cb83a8
|   | | `-CXXThisExpr 0x559402ccfcf0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x559402ccfd30 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x559402ccfcc0 <col:12> 'String::memo_t *const' lvalue .memo 0x559402cb83a8
|   |     `-DeclRefExpr 0x559402ccfca0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402ccf888 '' 'const String::rep_t &'
|   `-ReturnStmt 0x559402ccfd90 <col:12>
|     `-UnaryOperator 0x559402ccfd78 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402ccfd68 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x559402ccf8f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559402ccf8f8
  `-ParmVarDecl 0x559402ccfa08 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402caf030 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559402caf148 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x559402caf1d8 <col:16, col:22> col:16 public
|-TypedefDecl 0x559402caf218 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x559402983fd0 'const char *'
|   `-QualType 0x559402983521 'const char' const
|     `-BuiltinType 0x559402983520 'char'
|-TypedefDecl 0x559402caf2a0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x559402caf270 'String::const_iterator' sugar
|   |-Typedef 0x559402caf218 'const_iterator'
|   `-PointerType 0x559402983fd0 'const char *'
|     `-QualType 0x559402983521 'const char' const
|       `-BuiltinType 0x559402983520 'char'
|-TypedefDecl 0x559402caf410 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x559402caf380 'int (String::*)() const'
|   |-RecordType 0x559402caf0c0 'String'
|   | `-CXXRecord 0x559402caf030 'String'
|   `-ParenType 0x559402caf320 'int () const' sugar
|     `-FunctionProtoType 0x559402c83ec0 'int () const' const cdecl
|       `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402caf478 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x559402ad8aa0 'int64_t' sugar
|   |-Typedef 0x5594029ec390 'int64_t'
|   `-TypedefType 0x5594029c5630 '__int64_t' sugar
|     |-Typedef 0x5594029c5208 '__int64_t'
|     `-BuiltinType 0x5594029835a0 'long'
|-TypedefDecl 0x559402caf4e0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x559402ad89c0 'uint64_t' sugar
|   |-Typedef 0x5594029ec530 'uint64_t'
|   `-TypedefType 0x5594029c56c0 '__uint64_t' sugar
|     |-Typedef 0x5594029c5278 '__uint64_t'
|     `-BuiltinType 0x559402983640 'unsigned long'
|-TypedefDecl 0x559402caf570 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x559402caf540 'String::intmax_t' sugar
|   |-Typedef 0x559402caf478 'intmax_t'
|   `-TypedefType 0x559402ad8aa0 'int64_t' sugar
|     |-Typedef 0x5594029ec390 'int64_t'
|     `-TypedefType 0x5594029c5630 '__int64_t' sugar
|       |-Typedef 0x5594029c5208 '__int64_t'
|       `-BuiltinType 0x5594029835a0 'long'
|-TypedefDecl 0x559402caf600 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x559402caf5d0 'String::uintmax_t' sugar
|   |-Typedef 0x559402caf4e0 'uintmax_t'
|   `-TypedefType 0x559402ad89c0 'uint64_t' sugar
|     |-Typedef 0x5594029ec530 'uint64_t'
|     `-TypedefType 0x5594029c56c0 '__uint64_t' sugar
|       |-Typedef 0x5594029c5278 '__uint64_t'
|       `-BuiltinType 0x559402983640 'unsigned long'
|-CXXConstructorDecl 0x559402caf6c0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x559402caf868 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x559402caf7a8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x559402cafa18 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x559402caf958 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x559402cafb70 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x559402cafae0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x559402cafd88 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x559402cafc38 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x559402cafcb8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x559402caffa8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x559402cafe58 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x559402cafed8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x559402cb01c8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x559402cb0078 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x559402cb00f8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x559402cb03e8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x559402cb0298 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x559402cb0318 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x559402cb0578 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x559402cb04b0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x559402cb06f8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x559402cb0638 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x559402cb0888 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x559402cb07c0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x559402cb09e0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x559402cb0950 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x559402cb0b38 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x559402cb0aa8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x559402cb0c90 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x559402cb0c00 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x559402cb0e18 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x559402cb0d58 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x559402cb0fa8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x559402cb0ee0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x559402cb1138 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x559402cb1070 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x559402cb12c8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x559402cb1200 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x559402cb13c0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x559402cb14e8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x559402cb1668 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x559402cb15a0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x559402cb17b8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x559402cb1728 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x559402cb1870 <col:63> "" ""
|-CXXMethodDecl 0x559402cb19b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x559402cb18f8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x559402cb1bc8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x559402cb1a78 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x559402cb1af8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x559402cb1de8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x559402cb1c90 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x559402cb1d10 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x559402cb20c8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x559402cb1ea8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x559402cb1f28 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x559402cbdf10 <col:55> 'int' 10
| `-ParmVarDecl 0x559402cb1fa0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559402cbdf30 <col:76> 'bool' true
|-CXXMethodDecl 0x559402cb23a8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x559402cb2190 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x559402cb2210 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x559402cbdf40 <col:56> 'int' 10
| `-ParmVarDecl 0x559402cb2288 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559402cbdf60 <col:77> 'bool' true
|-CXXMethodDecl 0x559402cb24b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x559402cb2578 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x559402cb2640 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x559402cb26e0 <col:20>
| `-OptimizeNoneAttr 0x559402cb2738 <col:30>
|-CXXConversionDecl 0x559402cb2828 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x559402cb28f8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x559402cb29b8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x559402cb2aa8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x559402cb2b68 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x559402cb2ce8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x559402cb2c20 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x559402cb2e38 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x559402cb2da8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x559402cb2f28 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x559402cb2fe8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x559402cb3238 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x559402cb30a0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x559402cb3120 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x559402cb3498 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x559402cb3300 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x559402cb3380 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x559402cb3568 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x559402cb3778 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x559402cb3620 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x559402cb36a0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x559402cb3998 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x559402cb3840 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x559402cb38c0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x559402cb3b28 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x559402cb3a60 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x559402cb3c18 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x559402cb3d88 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x559402cb3cc8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559402cb3f98 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x559402cb3e48 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x559402cb3ec8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x559402cb41b0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x559402cb4058 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x559402cb40d0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x559402cb4340 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x559402cb4270 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559402cb4560 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x559402cb4400 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x559402cb4480 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x559402cb46b0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x559402cb4620 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x559402cb4888 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x559402cb4770 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x559402cb47f0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x559402cb49d8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x559402cb4948 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x559402cb4bf0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x559402cb4a90 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x559402cb4b10 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x559402cbdf70 <col:39> 'int' 0
|-CXXMethodDecl 0x559402cb4e10 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x559402cb4cb0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x559402cb4d30 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x559402cbdf90 <col:48> 'int' 0
|-CXXMethodDecl 0x559402cb4ff0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x559402cb4ed0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x559402cb4f50 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x559402cbdfb0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x559402cb50c0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x559402cb5180 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x559402cb5240 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x559402cb5300 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x559402cb53c0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x559402cb5568 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x559402cb5470 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x559402cb56e8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x559402cb5620 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x559402cb58c0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x559402cb57a8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x559402cb5a38 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x559402cb5978 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x559402cb5b80 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x559402cb5af0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x559402cb5cd0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x559402cb5c40 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x559402cb5ea8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x559402cb5d90 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x559402cb5e10 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x559402cb6088 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x559402cb5f70 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x559402cb5ff0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x559402cb61d8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x559402cb6148 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x559402cb63e8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x559402cb6298 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x559402cb6318 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x559402cb6548 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x559402cb64b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x559402cb66a0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x559402cb6608 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x559402cb6748 <col:57> "" ""
|-CXXMethodDecl 0x559402cb6858 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x559402cb67c8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x559402cb69a8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x559402cb6918 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x559402cb6b28 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x559402cb6a60 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x559402cb6bf0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x559402cb6cb0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x559402cb6d70 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x559402cb6e10 <col:49> "" ""
|-CXXMethodDecl 0x559402cb6ea0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x559402cb6f60 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x559402cb7050 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x559402cb7118 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x559402cb71d8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x559402cb7298 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x559402cb7390 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x559402cb7458 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x559402cb7520 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x559402cb76f8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x559402cb75d8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x559402cb7658 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x559402cb7920 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x559402cb77c0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x559402cb7840 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x559402cb7a30 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x559402cb7a98 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x559402cb7ac0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x559402cb7bd8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x559402cb7c78 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x559402cb7cd8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x559402cb7d38 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x559402cb7de8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x559402cb7e50 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x559402cb8088 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x559402cb80d8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402cb8068 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x559402cb7f78 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x559402cb7f20 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x559402cb7f60 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x559402cb7f40 <col:32> 'int' 8
|-CXXRecordDecl 0x559402cb80f0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559402cb8208 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x559402cb82b0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x559402cb8318 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x559402cb83a8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x559402cbe440 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x559402cbe878 <col:12>
| |-CXXConstructorDecl 0x559402cbe548 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559402cbe658 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559402cb82b0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x559402cc0e00 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x559402cc0dd0 <col:12> 'const char *const' lvalue .data 0x559402cb82b0
| | |     `-DeclRefExpr 0x559402cc0db0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402cbe658 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559402cb8318 'length' 'int'
| | | `-ImplicitCastExpr 0x559402cc0e90 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x559402cc0e60 <col:12> 'const int' lvalue .length 0x559402cb8318
| | |     `-DeclRefExpr 0x559402cc0e40 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402cbe658 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x559402cb83a8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x559402cc0f20 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x559402cc0ef0 <col:12> 'String::memo_t *const' lvalue .memo 0x559402cb83a8
| | |     `-DeclRefExpr 0x559402cc0ed0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402cbe658 '' 'const String::rep_t &'
| | `-CompoundStmt 0x559402cc0f78 <col:12>
| |-CXXConstructorDecl 0x559402cbe6f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559402cbe6f8
| | `-ParmVarDecl 0x559402cbe808 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x559402cc3d60 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x559402ccf778 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559402ccf888 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x559402ccfda0 <col:12>
| |   |-BinaryOperator 0x559402ccfbb8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x559402ccfb70 <col:12> 'const char *' lvalue ->data 0x559402cb82b0
| |   | | `-CXXThisExpr 0x559402ccfb60 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559402ccfba0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x559402ccfb30 <col:12> 'const char *const' lvalue .data 0x559402cb82b0
| |   |     `-DeclRefExpr 0x559402ccfb10 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402ccf888 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x559402ccfc80 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x559402ccfc38 <col:12> 'int' lvalue ->length 0x559402cb8318
| |   | | `-CXXThisExpr 0x559402ccfc28 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559402ccfc68 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x559402ccfbf8 <col:12> 'const int' lvalue .length 0x559402cb8318
| |   |     `-DeclRefExpr 0x559402ccfbd8 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402ccf888 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x559402ccfd48 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x559402ccfd00 <col:12> 'String::memo_t *' lvalue ->memo 0x559402cb83a8
| |   | | `-CXXThisExpr 0x559402ccfcf0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x559402ccfd30 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x559402ccfcc0 <col:12> 'String::memo_t *const' lvalue .memo 0x559402cb83a8
| |   |     `-DeclRefExpr 0x559402ccfca0 <col:12> 'const String::rep_t' lvalue ParmVar 0x559402ccf888 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x559402ccfd90 <col:12>
| |     `-UnaryOperator 0x559402ccfd78 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x559402ccfd68 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x559402ccf8f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x559402ccf8f8
|   `-ParmVarDecl 0x559402ccfa08 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x559402cb8420 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x559402cb8668 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x559402cb8488 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x559402cb8508 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x559402cb8580 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x559402cbe400 <col:79, line:261:5>
|   |-BinaryOperator 0x559402cbe078 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x559402cbe010 <col:2, col:5> 'const char *' lvalue .data 0x559402cb82b0
|   | | `-MemberExpr 0x559402cbdfe0 <col:2> 'String::rep_t' lvalue ->_r 0x559402cb8420
|   | |   `-CXXThisExpr 0x559402cbdfd0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x559402cbe060 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x559402cbe040 <col:12> 'const char *' lvalue ParmVar 0x559402cb8488 'data' 'const char *'
|   |-BinaryOperator 0x559402cbe140 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x559402cbe0d8 <col:2, col:5> 'int' lvalue .length 0x559402cb8318
|   | | `-MemberExpr 0x559402cbe0a8 <col:2> 'String::rep_t' lvalue ->_r 0x559402cb8420
|   | |   `-CXXThisExpr 0x559402cbe098 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x559402cbe128 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x559402cbe108 <col:14> 'int' lvalue ParmVar 0x559402cb8508 'length' 'int'
|   `-IfStmt 0x559402cbe3e8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x559402cbe260 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x559402cbe248 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x559402cbe228 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x559402cbe208 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x559402cbe1a0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x559402cb83a8
|     |       | `-MemberExpr 0x559402cbe170 <col:7> 'String::rep_t' lvalue ->_r 0x559402cb8420
|     |       |   `-CXXThisExpr 0x559402cbe160 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x559402cbe1f0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x559402cbe1d0 <col:17> 'String::memo_t *' lvalue ParmVar 0x559402cb8580 'memo' 'String::memo_t *'
|     `-CallExpr 0x559402cbe3c0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x559402cbe3a8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559402cbe2b0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x559402ca7098 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x559402cbe318 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559402cb7c78
|         `-ImplicitCastExpr 0x559402cbe300 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x559402cbe2e0 <col:27> 'String::memo_t *' lvalue ParmVar 0x559402cb8580 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x559402cb8918 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x559402cb8738 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x559402cb87b8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x559402cb8830 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x559402cb8420 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x559402cbe888 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559402cbea18 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x559402cbe980 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x559402cbe8f0 <col:2> '<bound member function type>' ->assign_memo 0x559402cb8668
|     | `-ImplicitCastExpr 0x559402cbe9b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x559402cbe8e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x559402cbe9d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x559402cbe920 <col:14> 'const char *' lvalue ParmVar 0x559402cb8738 'data' 'const char *'
|     |-ImplicitCastExpr 0x559402cbe9e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x559402cbe940 <col:20> 'int' lvalue ParmVar 0x559402cb87b8 'length' 'int'
|     `-ImplicitCastExpr 0x559402cbea00 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x559402cbe960 <col:28> 'String::memo_t *' lvalue ParmVar 0x559402cb8830 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x559402cb8aa8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x559402cb89e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x559402cbec70 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x559402cbebf0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x559402cbea40 <col:2> '<bound member function type>' ->assign_memo 0x559402cb8668
|     | `-CXXThisExpr 0x559402cbea30 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x559402cbec28 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x559402cbeac0 <col:14, col:19> 'const char *' lvalue .data 0x559402cb82b0
|     |   `-MemberExpr 0x559402cbea90 <col:14, col:16> 'String::rep_t' lvalue ._r 0x559402cb8420
|     |     `-DeclRefExpr 0x559402cbea70 <col:14> 'const String' lvalue ParmVar 0x559402cb89e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x559402cbec40 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x559402cbeb40 <col:25, col:30> 'int' lvalue .length 0x559402cb8318
|     |   `-MemberExpr 0x559402cbeb10 <col:25, col:27> 'String::rep_t' lvalue ._r 0x559402cb8420
|     |     `-DeclRefExpr 0x559402cbeaf0 <col:25> 'const String' lvalue ParmVar 0x559402cb89e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x559402cbec58 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x559402cbebc0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x559402cb83a8
|         `-MemberExpr 0x559402cbeb90 <col:38, col:40> 'String::rep_t' lvalue ._r 0x559402cb8420
|           `-DeclRefExpr 0x559402cbeb70 <col:38> 'const String' lvalue ParmVar 0x559402cb89e8 'x' 'const String &'
|-CXXMethodDecl 0x559402cb8b70 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x559402cbf630 <col:31, line:278:5>
|   `-IfStmt 0x559402cbf618 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x559402cbed10 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x559402cbecf8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x559402cbecc8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x559402cb83a8
|     |     `-MemberExpr 0x559402cbec98 <col:6> 'String::rep_t' lvalue ->_r 0x559402cb8420
|     |       `-CXXThisExpr 0x559402cbec88 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x559402cbf5f0 <col:15, line:277:2>
|       |-ParenExpr 0x559402cbf1c0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x559402cbf190 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x559402cbee20 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x559402cbee08 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x559402cbedf0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x559402cbedb0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559402cb7c78
|       |   |       `-ImplicitCastExpr 0x559402cbed98 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x559402cbed68 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x559402cb83a8
|       |   |           `-MemberExpr 0x559402cbed38 <col:27> 'String::rep_t' lvalue ->_r 0x559402cb8420
|       |   |             `-CXXThisExpr 0x559402cbed28 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x559402cbee80 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x559402cbee60 <col:54> 'int' 0
|       |   `-CallExpr 0x559402cbf0f0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x559402cbf0d8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x559402cbf058 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x559402cbf130 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x559402cbef68 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x559402cbf148 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x559402cbef98 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x559402cbf160 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x559402cbefd0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x559402cbf178 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x559402cbf040 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x559402cbf028 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x559402cbeff0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x559402cbf510 <line:274:6, line:275:22>
|       | |-CallExpr 0x559402cbf3d0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x559402cbf3b8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x559402cbf330 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x559402ca84e0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x559402cbf300 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x559402cb7c78
|       | |   `-ImplicitCastExpr 0x559402cbf2e8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x559402cbf2b8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x559402cb83a8
|       | |       `-MemberExpr 0x559402cbf288 <col:40> 'String::rep_t' lvalue ->_r 0x559402cb8420
|       | |         `-CXXThisExpr 0x559402cbf278 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x559402cbf4d0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x559402cbf4b8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x559402cbf3f8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x559402cbd350 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x559402cbf4f8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x559402cbf458 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x559402cb83a8
|       |       `-MemberExpr 0x559402cbf428 <col:15> 'String::rep_t' lvalue ->_r 0x559402cb8420
|       |         `-CXXThisExpr 0x559402cbf418 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x559402cbf5d0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x559402cbf568 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x559402cb83a8
|         | `-MemberExpr 0x559402cbf538 <col:6> 'String::rep_t' lvalue ->_r 0x559402cb8420
|         |   `-CXXThisExpr 0x559402cbf528 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x559402cbf5b8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x559402cbf598 <col:16> 'int' 0
|-CXXMethodDecl 0x559402cb8e08 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x559402cb8c28 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x559402cb8ca8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x559402cb8d20 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x559402cb8ee0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x559402cb9130 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x559402cb8f98 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x559402cb9018 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x559402cb9090 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x559402cb9318 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x559402cb9200 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x559402cb9280 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x559402cb9418 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x559402cbf708 <col:41, line:286:5>
|   `-ReturnStmt 0x559402cbf6f8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x559402cbf6c8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x559402cbf690 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x559402cbf678 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x559402cbf658 <col:46> 'int' 1
|-CXXMethodDecl 0x559402cb96b8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x559402cb94d0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x559402cb9550 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x559402cb95d0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x559402cbd350 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x559402cb9780 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x559402cbd420 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x559402cbd5f0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x559402cbd4d8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x559402cbd558 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x559402cbd6b0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x559402cbd778 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x559402cbd878 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x559402cbd8f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x559402cbd968 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x559402cbd9d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x559402cbdad0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x559402cbdb20 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402cbdab0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x559402cbda90 <col:22> 'int' 14
|-CXXMethodDecl 0x559402cbdd38 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x559402cbdb50 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x559402cbdbd0 <col:38> col:41 'int'
| `-ParmVarDecl 0x559402cbdc50 <col:43> col:46 'int'
|-FriendDecl 0x559402cbde40 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x559402cbded0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559402f2d760 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x559402f2d938 prev 0x559402f2d760 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x559402f2d9c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x559402f2d9f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f2f350 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x559402f2f300 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x559402f2f2e0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x559402f2dc08 'type'
|     `-SubstTemplateTypeParmType 0x559402f2dbd0 'String' sugar
|       |-TemplateTypeParmType 0x559402c738e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c73890 'T'
|       `-RecordType 0x559402caf0c0 'String'
|         `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f2f408 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x559402f2f3d0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x559402f2f3b0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x559402f2f350 'type'
|     `-ElaboratedType 0x559402f2f300 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x559402f2f2e0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x559402f2dc08 'type'
|         `-SubstTemplateTypeParmType 0x559402f2dbd0 'String' sugar
|           |-TemplateTypeParmType 0x559402c738e0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x559402c73890 'T'
|           `-RecordType 0x559402caf0c0 'String'
|             `-CXXRecord 0x559402caf030 'String'
|-CXXMethodDecl 0x559402f2f588 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x559402f2f498 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x559402f2f678 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x559402f2f758 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x559402f2f758
|-CXXMethodDecl 0x559402f2fa38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x559402f2f930 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x559402f2fc78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559402f2faf0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559402f2fb68 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559402f2fe48 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559402f2fd38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559402f2fdb0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559402f2ffa8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559402f30078 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x559402f302c8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559402f30138 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559402f301b0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559402f30528 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x559402f30398 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x559402f30410 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559402f306e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x559402f305f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559402f308a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x559402f307b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559402f30960 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559402f30a10 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x559402f30c48 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x559402f30ac0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559402f30b38 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x559402f30ee8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x559402f30df0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x559402f30fb0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x559402f31000 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x559402f31050 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559402ee7a90 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x559402f2c1c8 prev 0x559402ee7a90 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x559402f2d6d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x559402f2d680 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x559402f2d660 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x559402f2d510 'type'
|     `-SubstTemplateTypeParmType 0x559402f2d3a0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x559402c49690 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x559402c49638 'F'
|       `-RecordType 0x559402f2d000 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x559402f2cf20 'typed_array_memory'
|-FieldDecl 0x559402f310a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x559402f310f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x559402f31128 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|   |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x559402c80ba8 'T'
|   `-RecordType 0x559402caf0c0 'String'
|     `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f311b8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x559402f31180 'String &'
|   `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|     |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559402c80ba8 'T'
|     `-RecordType 0x559402caf0c0 'String'
|       `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f31248 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x559402f31210 'const String &'
|   `-QualType 0x559402f2c261 'const String' const
|     `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-RecordType 0x559402caf0c0 'String'
|         `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f312d8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x559402f312a0 'String *'
|   `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|     |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559402c80ba8 'T'
|     `-RecordType 0x559402caf0c0 'String'
|       `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f31368 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x559402f31330 'const String *'
|   `-QualType 0x559402f2c261 'const String' const
|     `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-RecordType 0x559402caf0c0 'String'
|         `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f31fc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x559402f31f70 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x559402f31f50 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x559402f31e88 'type'
|     `-LValueReferenceType 0x559402f31e50 'const String &'
|       `-QualType 0x559402f31bf1 'const String' const
|         `-SubstTemplateTypeParmType 0x559402f31bf0 'String' sugar
|           |-TemplateTypeParmType 0x559402c535e0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x559402c53588 'T'
|           `-RecordType 0x559402caf0c0 'String'
|             `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f32028 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x559402f31210 'const String &'
|   `-QualType 0x559402f2c261 'const String' const
|     `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-RecordType 0x559402caf0c0 'String'
|         `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f32080 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f320e8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x559402f312a0 'String *'
|   `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|     |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559402c80ba8 'T'
|     `-RecordType 0x559402caf0c0 'String'
|       `-CXXRecord 0x559402caf030 'String'
|-TypedefDecl 0x559402f32150 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x559402f31330 'const String *'
|   `-QualType 0x559402f2c261 'const String' const
|     `-SubstTemplateTypeParmType 0x559402f2c260 'String' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-RecordType 0x559402caf0c0 'String'
|         `-CXXRecord 0x559402caf030 'String'
|-EnumDecl 0x559402f321a8 <line:134:5> col:5
| `-EnumConstantDecl 0x559402f322a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x559402f32280 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x559402c82288 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x559402c82260 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x559402c82240 <col:40> 'int' 1
|-CXXConstructorDecl 0x559402f32328 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x559402f325b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f323e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559402f32480 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x559402f32848 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x559402f32730 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x559402f32b08 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x559402f329f0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x559402f32e20 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x559402f32d00 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x559402f33130 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x559402f33010 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x559402f33420 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f33268 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559402f332e0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559402f33548 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559402f335f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f33650 <col:30> Inherited
|-CXXMethodDecl 0x559402f33698 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x559402f33748 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f337a0 <col:30> Inherited
|-CXXMethodDecl 0x559402f33868 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559402f33918 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f33970 <col:30> Inherited
|-CXXMethodDecl 0x559402f339b8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559402f33a68 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f33ac0 <col:30> Inherited
|-CXXMethodDecl 0x559402f33b08 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559402f33bb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f33c10 <col:30> Inherited
|-CXXMethodDecl 0x559402f33c58 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x559402f33d08 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f33d60 <col:30> Inherited
|-CXXMethodDecl 0x559402f33d88 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559402f33e38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559402f33ee8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x559402f340a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f33f98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559402f34010 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559402f341f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x559402f34168 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f343a8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x559402f342b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559402f34460 <col:20>
| `-OptimizeNoneAttr 0x559402f344b8 <col:30>
|-CXXMethodDecl 0x559402f345d8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x559402f344e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559402f34690 <col:20>
| `-OptimizeNoneAttr 0x559402f346e8 <col:30>
|-CXXMethodDecl 0x559402f347a0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559402f34710 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f348e8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559402f34858 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f34a18 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x559402f34b18 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x559402f34be8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x559402f34cb8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x559402f34df8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x559402f34d68 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f34f40 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559402f34eb0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f35088 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x559402f34ff8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559402f35140 <col:48> Inherited "" ""
|-CXXMethodDecl 0x559402f35240 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x559402f351b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559402f352f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x559402f353b8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x559402f354b8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x559402f35638 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559402f35578 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x559402f35df8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x559402f356f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x559402f35d58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x559402f35c58 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x559402f35ed8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559402f36028 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x559402f35f98 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559402f360e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x559402f36328 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f361a0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x559402f36218 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x559402f364b8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x559402f363f8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559402f366c8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x559402f36580 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x559402f365f8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x559402f36788 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x559402f369e8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x559402f368f0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x559402f36ab8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x559402f36ab8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402fb63f8 prev 0x559402f4f0c8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559402fb64f0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x559402fb6580 <col:22, col:28> col:22 public
|-EnumDecl 0x559402fb65a8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x559402fb66c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb66a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x559402fb6690 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559402fb6670 <col:14> 'int' 999
| |-EnumConstantDecl 0x559402fb6770 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb6750 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x559402fb6738 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x559402fb6718 <col:14> 'int' 1
| |-EnumConstantDecl 0x559402fb6800 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb67e0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x559402fb67c0 <col:17> 'int' 0
| |-EnumConstantDecl 0x559402fb6890 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb6870 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x559402fb6850 <col:13> 'int' 1
| |-EnumConstantDecl 0x559402fb6920 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb6900 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x559402fb68e0 <col:16> 'int' 2
| |-EnumConstantDecl 0x559402fb69b0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb6990 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x559402fb6970 <col:13> 'int' 3
| |-EnumConstantDecl 0x559402fb6a40 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb6a20 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x559402fb6a00 <col:15> 'int' 4
| |-EnumConstantDecl 0x559402fb6ad0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb6ab0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x559402fb6a90 <col:14> 'int' 5
| |-EnumConstantDecl 0x559402fb6b60 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x559402fb6b40 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x559402fb6b20 <col:12> 'int' 6
| `-EnumConstantDecl 0x559402fb6bf0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x559402fb6bd0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x559402fb6bb0 <col:13> 'int' 7
|-VarDecl 0x559402fb6c60 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x559402fb6ce8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x559402fb6d70 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x559402fb6df8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x559402fb6e80 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x559402fb6f08 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x559402fb6f90 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x559402fb7018 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x559402fb70a0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x559402fb7128 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x559402fb71b0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x559402fb72b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x559402fbc608 '_nerrors' 'int'
| | `-IntegerLiteral 0x559402fbcd98 <line:128:13> 'int' 0
| `-CompoundStmt 0x559402fbce08 <col:16, line:129:5>
|-CXXDestructorDecl 0x559402fb73a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x559402fbce18 <col:29, line:132:5>
|-CXXMethodDecl 0x559402fb7558 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x559402fb7490 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559402fb7620 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x559402fb7708 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x559402fbce70 <col:44, line:161:5>
|   `-ReturnStmt 0x559402fbce60 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x559402fbce48 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x559402fbce28 <col:9> 'ErrorHandler *' lvalue Var 0x559402fbc668 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x559402fb7848 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x559402fb77b8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x559402fb7910 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x559402fbced0 <col:43, line:173:5>
|   `-ReturnStmt 0x559402fbcec0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x559402fbcea8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x559402fbce88 <col:9> 'ErrorHandler *' lvalue Var 0x559402fbc6e0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x559402fb79c8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x559402fb7a48 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x559402fb7b58 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x559402fb7ac8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x559402fb7ca8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x559402fb7c18 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559402fb7e00 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x559402fb7d68 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x559402fb7f58 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x559402fb7ec0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x559402fb80b0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x559402fb8018 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x559402fb82c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559402fb8168 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x559402fb81e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x559402fb8498 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x559402fb8380 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x559402fb8400 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x559402fb86b8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559402fb8558 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x559402fb85d8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x559402fb8898 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559402fb8778 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559402fb87f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559402fb8a78 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x559402fb8958 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x559402fb89d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x559402fb8c00 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x559402fb8b38 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x559402fb8dd0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x559402fb8cb8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559402fb8d30 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x559402fbd128 <col:57, line:234:5>
|   `-ReturnStmt 0x559402fbd118 <line:233:2, col:41>
|     `-ExprWithCleanups 0x559402fbd100 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559402fbd0a8 <col:9, col:41> 'int'
|         |-MemberExpr 0x559402fbd078 <col:9> '<bound member function type>' ->xmessage 0x559402fb8c00
|         | `-CXXThisExpr 0x559402fbd068 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x559402fbd0e8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x559402fbd0d0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559402fbd048 <col:18, col:40> 'String' (CXXTemporary 0x559402fbd048)
|               `-CallExpr 0x559402fbd010 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x559402fbcff8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x559402fbcf70 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x559402fbadc8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x559402fbcf90 <col:31> 'const String' lvalue ParmVar 0x559402fb8d30 'str' 'const String &'
|                 `-DeclRefExpr 0x559402fbcfb0 <col:36> 'const String' lvalue ParmVar 0x559402fb8cb8 'anno' 'const String &'
|-CXXMethodDecl 0x559402fb90b0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559402fb8e90 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x559402fb8f10 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x559402fb8f88 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559402fbd3b8 <col:68, line:243:5>
|   `-ReturnStmt 0x559402fbd3a8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x559402fbd390 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x559402fbd330 <col:9, col:41> 'int'
|         |-MemberExpr 0x559402fbd300 <col:9> '<bound member function type>' ->xmessage 0x559402fb8dd0
|         | `-CXXThisExpr 0x559402fbd2f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559402fbd1c8 <col:18> 'const String' lvalue ParmVar 0x559402fb8e90 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559402fbd378 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x559402fbd360 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559402fbd2d0 <col:24, col:40> 'String' (CXXTemporary 0x559402fbd2d0)
|               `-CXXMemberCallExpr 0x559402fbd268 <col:24, col:40> 'String'
|                 |-MemberExpr 0x559402fbd1f8 <col:24> '<bound member function type>' ->vformat 0x559402fba290
|                 | `-CXXThisExpr 0x559402fbd1e8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559402fbd298 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x559402fbd228 <col:32> 'const char *' lvalue ParmVar 0x559402fb8f10 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559402fbd2b0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559402fbd248 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559402fb8f88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559402fb9350 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x559402fb9178 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x559402fb91f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559402fb9268 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x559402fbd6f8 <col:23, line:254:5>
|   `-ReturnStmt 0x559402fbd6e8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x559402fbd6d0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x559402fbd670 <col:9, col:71> 'int'
|         |-MemberExpr 0x559402fbd640 <col:9> '<bound member function type>' ->xmessage 0x559402fb8dd0
|         | `-CXXThisExpr 0x559402fbd630 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x559402fbd6b8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x559402fbd6a0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x559402fbd5f0 <col:18, col:65> 'String' (CXXTemporary 0x559402fbd5f0)
|         |     `-CallExpr 0x559402fbd588 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x559402fbd570 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x559402fbd458 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x559402fbadc8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x559402fbd478 <col:31> 'const String' lvalue ParmVar 0x559402fb91f0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x559402fbd5d0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x559402fbd5b8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x559402fbd550 <col:37, col:64> 'String' (CXXTemporary 0x559402fbd550)
|         |             `-CallExpr 0x559402fbd520 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x559402fbd508 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x559402fbd498 <col:37> 'String (const String &)' lvalue CXXMethod 0x559402fbb418 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x559402fbd4b8 <col:56> 'const String' lvalue ParmVar 0x559402fb9178 'landmark' 'const String &'
|         `-DeclRefExpr 0x559402fbd610 <col:68> 'const String' lvalue ParmVar 0x559402fb9268 'str' 'const String &'
|-CXXMethodDecl 0x559402fb96d0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x559402fb9418 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x559402fb9490 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x559402fb9510 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x559402fb9588 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559402fbd9b0 <col:34, line:267:5>
|   `-ReturnStmt 0x559402fbd9a0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x559402fbd988 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x559402fbd920 <col:9, col:51> 'int'
|         |-MemberExpr 0x559402fbd8f0 <col:9> '<bound member function type>' ->xmessage 0x559402fb9350
|         | `-CXXThisExpr 0x559402fbd8e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x559402fbd798 <col:18> 'const String' lvalue ParmVar 0x559402fb9418 'landmark' 'const String &'
|         |-DeclRefExpr 0x559402fbd7b8 <col:28> 'const String' lvalue ParmVar 0x559402fb9490 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x559402fbd970 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x559402fbd958 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x559402fbd8c0 <col:34, col:50> 'String' (CXXTemporary 0x559402fbd8c0)
|               `-CXXMemberCallExpr 0x559402fbd858 <col:34, col:50> 'String'
|                 |-MemberExpr 0x559402fbd7e8 <col:34> '<bound member function type>' ->vformat 0x559402fba290
|                 | `-CXXThisExpr 0x559402fbd7d8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x559402fbd888 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x559402fbd818 <col:42> 'const char *' lvalue ParmVar 0x559402fb9510 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x559402fbd8a0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x559402fbd838 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559402fb9588 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559402fb97e0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x559402fbda30 <col:25, line:288:5>
|   `-ReturnStmt 0x559402fbda20 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x559402fbda08 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x559402fbd9d8 <col:9> 'const int' lvalue ->_nerrors 0x559402fbc608
|         `-CXXThisExpr 0x559402fbd9c8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x559402fb99f0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x559402fb9898 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x559402fb9918 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x559402fb9cd8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559402fb9ab8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x559402fb9b38 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x559402fb9bb0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559402fb9e70 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x559402fb9da8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x559402fba0b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x559402fb9f30 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x559402fb9fa8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x559402fbdc90 <col:58, line:357:5>
|   `-ReturnStmt 0x559402fbdc80 <line:356:2, col:29>
|     `-ExprWithCleanups 0x559402fbdc68 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x559402fbdc38 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x559402fbdc20 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x559402fbdc00 <col:9, col:29> 'String' (CXXTemporary 0x559402fbdc00)
|             `-CallExpr 0x559402fbdb90 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x559402fbdb78 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x559402fbdaf8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x559402fb9cd8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x559402fbda98 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x559402fbdbc8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x559402fbdab8 <col:21> 'const char *' lvalue ParmVar 0x559402fb9f30 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x559402fbdbe0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x559402fbdad8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x559402fb9fa8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559402fba290 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x559402fba180 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x559402fba1f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x559402fba3e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x559402fba358 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x559402fba530 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x559402fba4a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x559402fba7d0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x559402fba5e8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x559402fba668 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x559402fba6e0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x559402fba930 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x559402fba8a0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x559402fbdda8 <col:37, line:441:5>
|   `-IfStmt 0x559402fbdd90 <line:439:2, line:440:8>
|     |-BinaryOperator 0x559402fbdd18 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x559402fbdce8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x559402fbdca8 <col:6> 'int' lvalue ParmVar 0x559402fba8a0 'level' 'int'
|     | `-ImplicitCastExpr 0x559402fbdd00 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x559402fbdcc8 <col:15> 'ErrorHandler::Level' EnumConstant 0x559402fb69b0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x559402fbdd78 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x559402fbdd48 <col:8> 'int' lvalue ->_nerrors 0x559402fbc608
|         `-CXXThisExpr 0x559402fbdd38 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x559402fba9f8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x559402fbde40 <col:26, line:448:5>
|   `-BinaryOperator 0x559402fbde20 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x559402fbddd0 <col:2> 'int' lvalue ->_nerrors 0x559402fbc608
|     | `-CXXThisExpr 0x559402fbddc0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x559402fbde00 <col:13> 'int' 0
|-CXXMethodDecl 0x559402fbabc0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x559402fbaab0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x559402fbab28 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x559402fbadc8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x559402fbac80 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x559402fbacf8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x559402fbb078 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x559402fbae88 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x559402fbaf08 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x559402fbaf88 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x559402fbb130 <col:59> 0 0
|-CXXMethodDecl 0x559402fbb2c8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x559402fbb1a8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x559402fbb228 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x559402fbe4b0 <col:70, line:534:5>
|   |-DeclStmt 0x559402fbdfb0 <line:528:2, col:20>
|   | |-VarDecl 0x559402fbde68 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x559402fbded0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x559402fbdf08 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x559402fbdf70 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x559402fbe080 <line:529:2, col:23>
|   | `-VarDecl 0x559402fbdfe0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x559402fbe068 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x559402fbe048 <col:18> 'const char *' lvalue ParmVar 0x559402fbb1a8 'begin' 'const char *'
|   |-DoStmt 0x559402fbe448 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x559402fbe378 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x559402fbe360 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x559402fbe340 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x559402fbe098 <col:6> 'const char *' lvalue Var 0x559402fbdfe0 'x' 'const char *'
|   | |     `-CallExpr 0x559402fbe290 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x559402fbe278 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x559402fbe230 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x559402fbcae0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x559402fbe2f8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x559402fbe2e0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x559402fbe150 <col:20, col:27> 'String' (CXXTemporary 0x559402fbe150)
|   | |       |     `-CXXTemporaryObjectExpr 0x559402fbe118 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x559402fbe310 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x559402fbe170 <col:30> 'const char *' lvalue Var 0x559402fbdfe0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x559402fbe328 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x559402fbe190 <col:33> 'const char *' lvalue ParmVar 0x559402fbb228 'end' 'const char *'
|   | |       |-UnaryOperator 0x559402fbe1d0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x559402fbe1b0 <col:39> 'String' lvalue Var 0x559402fbde68 'name' 'String'
|   | |       |-UnaryOperator 0x559402fbe208 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x559402fbe1e8 <col:46> 'String' lvalue Var 0x559402fbdf08 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x559402fbe220 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x559402fbe430 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x559402fbe418 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x559402fbe3f8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x559402fbe3c8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|   |         `-ImplicitCastExpr 0x559402fbe3b0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x559402fbe390 <col:11> 'String' lvalue Var 0x559402fbde68 'name' 'String'
|   `-ReturnStmt 0x559402fbe4a0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x559402fbe488 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x559402fbe468 <col:9> 'const char *' lvalue Var 0x559402fbdfe0 'x' 'const char *'
|-CXXMethodDecl 0x559402fbb418 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x559402fbb388 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x559402fbeab8 <col:55, line:550:5>
|   `-IfStmt 0x559402fbea90 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x559402fbe6f0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x559402fbe6d8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559402fbe6c0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559402fbe6a0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559402fbe670 <col:6> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|     | |       `-DeclRefExpr 0x559402fbe510 <col:6> 'const String' lvalue ParmVar 0x559402fbb388 'x' 'const String &'
|     | `-BinaryOperator 0x559402fbe650 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x559402fbe620 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x559402fbe5d0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x559402fbe5b8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x559402fbe570 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x559402ccc060 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x559402fbe530 <col:11> 'const String' lvalue ParmVar 0x559402fbb388 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x559402fbe550 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x559402fbe638 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x559402fbe608 <col:19> 'char' 123
|     |-ReturnStmt 0x559402fbe760 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x559402fbe730 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x559402fbe710 <col:13> 'const String' lvalue ParmVar 0x559402fbb388 'x' 'const String &'
|     `-IfStmt 0x559402fbea68 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x559402fbe7f8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559402fbe7e0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559402fbe7c0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559402fbe790 <col:11> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|       |       `-DeclRefExpr 0x559402fbe770 <col:11> 'const String' lvalue ParmVar 0x559402fbb388 'x' 'const String &'
|       |-ReturnStmt 0x559402fbe980 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x559402fbe968 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x559402fbe938 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x559402fbe920 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x559402fbe900 <col:13, col:29> 'String' (CXXTemporary 0x559402fbe900)
|       |         `-CallExpr 0x559402fbe8b0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x559402fbe898 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x559402fbe810 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x559402fbabc0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x559402fbe8e0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x559402fbe830 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x559402fbe850 <col:28> 'const String' lvalue ParmVar 0x559402fbb388 'x' 'const String &'
|       `-ReturnStmt 0x559402fbea58 <line:549:6, col:20>
|         `-ExprWithCleanups 0x559402fbea40 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x559402fbea10 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x559402fbe9f8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x559402fbe9d8 <col:13, col:20> 'String' (CXXTemporary 0x559402fbe9d8)
|                 `-CXXTemporaryObjectExpr 0x559402fbe9a0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x559402fbb5e0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x559402fbb4d0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x559402fbb548 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559402fbcd88 <col:71> 'bool' false
|-CXXRecordDecl 0x559402fbb700 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x559402fbb9f8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x559402fbb990 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x559402fbb930 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x559402fbb8f0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x559402caf0c0 'String'
|       | `-CXXRecord 0x559402caf030 'String'
|       |-BuiltinType 0x559402983580 'int'
|       `-DecayedType 0x559402f50110 '__va_list_tag *' sugar
|         |-TypedefType 0x559402f500e0 'va_list' sugar
|         | |-Typedef 0x559402ba1180 'va_list'
|         | `-TypedefType 0x559402ba1130 '__gnuc_va_list' sugar
|         |   |-Typedef 0x559402ad8d58 '__gnuc_va_list'
|         |   `-TypedefType 0x559402ad8cc0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5594029c4d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5594029c4ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5594029842d0 '__va_list_tag'
|         |         `-CXXRecord 0x559402984238 '__va_list_tag'
|         `-PointerType 0x559402ba6a20 '__va_list_tag *'
|           `-RecordType 0x5594029842d0 '__va_list_tag'
|             `-CXXRecord 0x559402984238 '__va_list_tag'
|-EnumDecl 0x559402fbba50 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x559402fbbb50 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc0b0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbb30 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x559402fbbb10 <col:16> 'int' 1
| |-EnumConstantDecl 0x559402fbbbe0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc0c8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbbc0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x559402fbbba0 <col:21> 'int' 2
| |-EnumConstantDecl 0x559402fbbc70 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc0e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbc50 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x559402fbbc30 <col:22> 'int' 4
| |-EnumConstantDecl 0x559402fbbd00 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc0f8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbce0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x559402fbbcc0 <col:17> 'int' 8
| |-EnumConstantDecl 0x559402fbbd90 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc110 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbd70 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x559402fbbd50 <col:22> 'int' 16
| |-EnumConstantDecl 0x559402fbbe20 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc128 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbe00 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x559402fbbde0 <col:19> 'int' 32
| |-EnumConstantDecl 0x559402fbbeb0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc140 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbe90 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x559402fbbe70 <col:17> 'int' 64
| |-EnumConstantDecl 0x559402fbbf40 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc158 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbf20 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x559402fbbf00 <col:14> 'int' 128
| |-EnumConstantDecl 0x559402fbbfd0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x559402fbc170 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fbbfb0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x559402fbbf90 <col:16> 'int' 256
| `-EnumConstantDecl 0x559402fbc060 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x559402fbc188 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402fbc040 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x559402fbc020 <col:12> 'int' 1024
|-CXXMethodDecl 0x559402fbc398 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x559402fbc1b0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x559402fbc250 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x559402fbc520 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x559402fbc458 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x559402fbc5c8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x559402fbc608 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x559402fbc668 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x559402fbc6e0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x559402fbcae0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x559402fbc758 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x559402fbc7d8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x559402fbc858 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x559402fbc8d0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x559402fbc948 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x559402fbc9c0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x559402fbcc08 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x559402fbcc08
| `-ParmVarDecl 0x559402fbcd18 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x559402fbee18 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x559402fbee18
  `-ParmVarDecl 0x559402fbef28 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402f4f158 prev 0x559402eaa538 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402f4f250 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x559402f4f2e0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x559402f4f418 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x559402f4f318 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559402f50840 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559402f50820 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559402f503b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559402f508d0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x559402f50890 <col:17> 'ErrorHandler *' lvalue ParmVar 0x559402f4f318 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559402f50420 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x559402f50950 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x559402f50910 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x559402f50480 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x559402f50990 <col:54> 'bool' false
| `-CompoundStmt 0x559402f50a98 <col:61, line:38:5>
|   `-BinaryOperator 0x559402f50a78 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x559402f50a10 <col:9> 'const Element *' lvalue ->_context 0x559402f50358
|     | `-CXXThisExpr 0x559402f50a00 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x559402f50a60 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x559402f50a40 <col:20> 'int' 0
|-CXXConstructorDecl 0x559402f4f628 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559402f4f4d8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x559402f4f550 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x559402f50878 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x559402f50858 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x559402f50358 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x559402f50af0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x559402f50ab0 <col:20> 'const Element *' lvalue ParmVar 0x559402f4f4d8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x559402f503b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x559402f50b70 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x559402f50b30 <col:36> 'ErrorHandler *' lvalue ParmVar 0x559402f4f550 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x559402f50420 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x559402f50bf0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x559402f50bb0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x559402f50480 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x559402f50c30 <col:73> 'bool' false
| `-CompoundStmt 0x559402f50ca8 <col:80, line:46:5>
|-CXXMethodDecl 0x559402f4f758 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x559402f50d20 <col:36, line:51:5>
|   `-ReturnStmt 0x559402f50d10 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x559402f50cf8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x559402f50cc8 <col:16> 'const Element *const' lvalue ->_context 0x559402f50358
|         `-CXXThisExpr 0x559402f50cb8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x559402f4f848 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x559402f50da0 <col:32, line:57:5>
|   `-ReturnStmt 0x559402f50d90 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x559402f50d78 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x559402f50d48 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x559402f503b8
|         `-CXXThisExpr 0x559402f50d38 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x559402f4f908 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x559402f4fa90 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x559402f4f9c0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x559402f4fbe0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x559402f4fb50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559402f4fd30 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x559402f4fca0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x559402f4ff38 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x559402f4fde8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x559402f4fe60 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x559402f50268 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x559402f4fff8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x559402f50078 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x559402f50140 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x559402f50320 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x559402f50358 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x559402f503b8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x559402f50420 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x559402f50480 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x559402f504d0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x559402f504d0
| `-ParmVarDecl 0x559402f505e8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x559402f50688 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x559402f50688
| `-ParmVarDecl 0x559402f50798 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x559402fc7e78 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559402f73430 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x559402f73608 prev 0x559402f73430 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x559402f73698 <col:46, col:52> col:46 public
|-TypedefDecl 0x559402f736c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f75290 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x559402f75240 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x559402f73b70 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x559402f73a70 'type'
|     `-TemplateSpecializationType 0x559402f73a00 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x559402f738e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x559402f738c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x559402f738a0 <col:24> 'unsigned long' 4
|       `-RecordType 0x559402f739e0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x559402f73900 'char_array'
|-TypedefDecl 0x559402f75348 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x559402f75310 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x559402f752f0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x559402f75290 'type'
|     `-ElaboratedType 0x559402f75240 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x559402f73b70 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x559402f73a70 'type'
|         `-TemplateSpecializationType 0x559402f73a00 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x559402f738e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x559402f738c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x559402f738a0 <col:24> 'unsigned long' 4
|           `-RecordType 0x559402f739e0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x559402f73900 'char_array'
|-CXXMethodDecl 0x559402f754c8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x559402f753d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x559402f755b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x559402f75698 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x559402f75968 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x559402f75870 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x559402f75ba8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559402f75a20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559402f75a98 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559402f75d78 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559402f75c68 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559402f75ce0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559402f75ed8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x559402f75fa8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x559402f761f8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559402f76068 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x559402f760e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559402f7e038 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x559402f762c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x559402f76340 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559402f7e1f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x559402f7e108 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559402f7e3b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x559402f7e2c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559402f7e470 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559402f7e520 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x559402f7e758 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x559402f7e5d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x559402f7e648 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x559402f7e9f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x559402f7e900 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x559402f7eac0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x559402f7eb10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x559402f7eb60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559402f71e38 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x559402f72048 prev 0x559402f71e38 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x559402f733a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x559402f73350 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x559402f73330 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x559402f731e0 'type'
|     `-SubstTemplateTypeParmType 0x559402f73000 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x559402c48f10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c48eb8 'T'
|       `-RecordType 0x559402f72b50 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x559402f72a68 'sized_array_memory'
|-FieldDecl 0x559402f7ebb0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x559402f7ec00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x559402f7ec38 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|   |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x559402c80ba8 'T'
|   `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7ecc8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x559402f7ec90 'int &'
|   `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|     |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559402c80ba8 'T'
|     `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7ed88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x559402f7ed50 'const int &'
|   `-QualType 0x559402f720e1 'const int' const
|     `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7ee18 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x559402f7ede0 'int *'
|   `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|     |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559402c80ba8 'T'
|     `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7eea8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x559402f7ee70 'const int *'
|   `-QualType 0x559402f720e1 'const int' const
|     `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7fa90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x559402f7fa40 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x559402f7fa20 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x559402f7f9b0 'type'
|     `-SubstTemplateTypeParmType 0x559402f7f770 'int' sugar
|       |-TemplateTypeParmType 0x559402c53d10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c53cc0 'T'
|       `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7faf8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x559402f7ed50 'const int &'
|   `-QualType 0x559402f720e1 'const int' const
|     `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7fb50 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7fbb8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x559402f7ede0 'int *'
|   `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|     |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x559402c80ba8 'T'
|     `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402f7fc20 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x559402f7ee70 'const int *'
|   `-QualType 0x559402f720e1 'const int' const
|     `-SubstTemplateTypeParmType 0x559402f720e0 'int' sugar
|       |-TemplateTypeParmType 0x559402c80c00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x559402c80ba8 'T'
|       `-BuiltinType 0x559402983580 'int'
|-EnumDecl 0x559402f7fc78 <line:134:5> col:5
| `-EnumConstantDecl 0x559402f7fd70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x559402f7fd50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x559402c82288 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x559402c82260 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x559402c82240 <col:40> 'int' 1
|-CXXConstructorDecl 0x559402f7fdf8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x559402f80048 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f7feb0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559402f7ff50 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x559402f80308 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x559402f801f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x559402f805c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x559402f804b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x559402f80910 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x559402f807f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x559402f80c20 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x559402f80b00 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x559402f80f10 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f80d58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559402f80dd0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559402f81038 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x559402f81118 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f81170 <col:30> Inherited
|-CXXMethodDecl 0x559402f811b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x559402f81268 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f812c0 <col:30> Inherited
|-CXXMethodDecl 0x559402f81388 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559402f81438 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f81490 <col:30> Inherited
|-CXXMethodDecl 0x559402f814d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559402f81588 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f815e0 <col:30> Inherited
|-CXXMethodDecl 0x559402f81628 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559402f816d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f81730 <col:30> Inherited
|-CXXMethodDecl 0x559402f81778 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x559402f81828 <col:20> Inherited
| `-OptimizeNoneAttr 0x559402f81880 <col:30> Inherited
|-CXXMethodDecl 0x559402f818a8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559402f81958 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x559402f81a08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x559402f81bc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f81ab8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x559402f81b30 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559402f81d18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x559402f81c88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f81ec8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x559402f81dd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559402f81f80 <col:20>
| `-OptimizeNoneAttr 0x559402f81fd8 <col:30>
|-CXXMethodDecl 0x559402f820f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x559402f82000 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x559402f821b0 <col:20>
| `-OptimizeNoneAttr 0x559402f82208 <col:30>
|-CXXMethodDecl 0x559402f822c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x559402f82230 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f82408 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559402f82378 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f82538 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x559402f82668 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x559402f82738 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x559402f82808 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x559402f82948 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x559402f828b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f82a90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x559402f82a00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x559402f82bd8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x559402f82b48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559402f82c90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x559402f82d90 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x559402f82d00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x559402f82e48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x559402f82f08 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x559402f83008 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x559402f83188 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x559402f830c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x559402f83948 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x559402f83240 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x559402f838a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x559402f837a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x559402f83a28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x559402f83b78 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x559402f83ae8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559402f83c30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x559402f83e78 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x559402f83cf0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x559402f83d68 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x559402f84038 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x559402f83f48 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x559402f84288 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x559402f84100 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x559402f84178 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x559402f84348 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x559402f845a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x559402f844b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x559402f84678 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402f6ffa8 prev 0x559402f55ce8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559402f700a0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x559402f70190 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x559402f96330 <col:16, line:828:9>
|-CXXDestructorDecl 0x559402f70280 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x559402f96340 <col:25, line:830:9>
|-CXXMethodDecl 0x559402f70380 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x559402f70430 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x559402f704d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x559402f704d8
| `-ParmVarDecl 0x559402f705e8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x559402f70da8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x559402f70da8
  `-ParmVarDecl 0x559402f70eb8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402f55af8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x559402f55c58 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x559402f55ce8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x559402f55da0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x559402f55ea8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x559402f55dd8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559402f85c38 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559402f85c18 <col:31> 'int' 0
|-CXXConstructorDecl 0x559402f561c8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x559402f56040 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x559402f560b8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559402f85c70 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559402f85c50 <col:59> 'int' 0
|-CXXConstructorDecl 0x559402f563a0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559402f56290 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x559402f56308 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559402f85ca8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559402f85c88 <col:55> 'int' 0
|-CXXConstructorDecl 0x559402f56758 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x559402f56540 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x559402f565b8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x559402f56630 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x559402f85ce0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x559402f85cc0 <col:31> 'int' 0
|-CXXConstructorDecl 0x559402f56918 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x559402f56858 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x559402f56a10 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x559402f56bf8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x559402f56b00 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x559402f56ce8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x559402f87980 <col:24, line:291:5>
|   `-ReturnStmt 0x559402f87970 <line:290:9, col:79>
|     `-BinaryOperator 0x559402f87950 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x559402f85f38 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x559402f85e90 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x559402f85e70 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x559402f85d68 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x559402f85d50 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x559402f85d38 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x559402f85d08 <col:18> 'Vector<String> *const' lvalue ->_conf 0x559402f71dd0
|       | |   |       `-CXXThisExpr 0x559402f85cf8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x559402f85e58 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x559402f85e40 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x559402f85e08 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x559402f85dd8 <col:28, col:35> '<bound member function type>' ->size 0x559402f33d88
|       | |           `-ImplicitCastExpr 0x559402f85e28 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x559402f85dc0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x559402f85d90 <col:28> 'Vector<String> *const' lvalue ->_conf 0x559402f71dd0
|       | |                 `-CXXThisExpr 0x559402f85d80 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x559402f85f20 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x559402f85f08 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x559402f85ef0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x559402f85ec0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x559402f847c0
|       |         `-CXXThisExpr 0x559402f85eb0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x559402f87930 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x559402f87918 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x559402f87900 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x559402f878c0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x559402f85fb8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x559402f85f68 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x559402f84870
|         |     |   `-CXXThisExpr 0x559402f85f58 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x559402f85f98 <col:73> 'int' 0
|         `-IntegerLiteral 0x559402f878e0 <col:79> 'int' 0
|-CXXMethodDecl 0x559402f56da8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x559402f87b58 <col:32, line:296:5>
|   `-ReturnStmt 0x559402f87b48 <line:295:9, col:49>
|     `-BinaryOperator 0x559402f87b28 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x559402f87a08 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x559402f879f0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x559402f879d8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x559402f879a8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x559402f847c0
|       |       `-CXXThisExpr 0x559402f87998 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x559402f87b08 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x559402f87af0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x559402f87ad8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x559402f87a98 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x559402f87a80 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x559402f87a30 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x559402f84870
|         |     |   `-CXXThisExpr 0x559402f87a20 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x559402f87a60 <col:43> 'int' 0
|         `-IntegerLiteral 0x559402f87ab8 <col:49> 'int' 0
|-CXXMethodDecl 0x559402f56e98 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x559402f87d68 <col:19, line:306:5>
|   |-IfStmt 0x559402f87c88 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x559402f87bc8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x559402f87bb0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x559402f87b80 <col:13> 'Vector<String> *' lvalue ->_conf 0x559402f71dd0
|   | |     `-CXXThisExpr 0x559402f87b70 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x559402f87c68 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x559402f87c38 <col:13, col:20> '<bound member function type>' ->clear 0x559402f36788
|   |     `-ImplicitCastExpr 0x559402f87c20 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x559402f87bf0 <col:13> 'Vector<String> *' lvalue ->_conf 0x559402f71dd0
|   |         `-CXXThisExpr 0x559402f87be0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x559402f87d10 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x559402f87ce0 <col:9, col:16> '<bound member function type>' .clear 0x559402f84348
|   |   `-MemberExpr 0x559402f87cb0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x559402f84760
|   |     `-CXXThisExpr 0x559402f87ca0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x559402f87d58 <line:305:9, col:17>
|     `-UnaryOperator 0x559402f87d40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402f87d30 <col:17> 'Args *' this
|-CXXMethodDecl 0x559402f57118 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x559402f57020 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x559402f57298 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x559402f571d0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x559402f57618 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x559402f57340 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x559402f57578 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x559402f573e8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x559402f57460 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x559402f88088 <col:67, line:327:5>
|     |-WhileStmt 0x559402f88038 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x559402f87e50 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x559402f87dd0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x559402ea2a08 0x559402cebdc8 0x559402cebaa0 0x559402cdc270 0x559402cdbf20 0x559402cdb810 0x559402cae180 0x559402c3b650
|     | | |-DeclRefExpr 0x559402f87d90 <col:16> 'Iter' lvalue ParmVar 0x559402f573e8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x559402f87db0 <col:25> 'Iter' lvalue ParmVar 0x559402f57460 'end' 'Iter'
|     | `-CompoundStmt 0x559402f88018 <col:30, line:325:9>
|     |   |-CallExpr 0x559402f87fb8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x559402f87e98 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x559402f87f88 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x559402f87f18 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|     |   |   `-DeclRefExpr 0x559402f87ef8 <col:24> 'Iter' lvalue ParmVar 0x559402f573e8 'begin' 'Iter'
|     |   `-UnaryOperator 0x559402f88000 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x559402f87fe0 <col:15> 'Iter' lvalue ParmVar 0x559402f573e8 'begin' 'Iter'
|     `-ReturnStmt 0x559402f88078 <line:326:9, col:17>
|       `-UnaryOperator 0x559402f88060 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f88050 <col:17> 'Args *' this
|-CXXMethodDecl 0x559402f57720 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x559402f57690 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x559402f57868 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x559402f577d8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x559402f57930 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x559402f88168 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x559402f88108 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x559402f880b8 <col:9> '<bound member function type>' ->reset_from 0x559402f84be8
|   | | `-CXXThisExpr 0x559402f880a8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x559402f880e8 <col:20> 'int' 0
|   `-ReturnStmt 0x559402f88158 <line:352:9, col:17>
|     `-UnaryOperator 0x559402f88140 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402f88130 <col:17> 'Args *' this
|-VarDecl 0x559402f579e8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x559402f57a50 <col:38> 'int' 1
|-VarDecl 0x559402f57ae0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x559402f57b48 <col:39> 'int' 2
|-VarDecl 0x559402f57bd8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x559402f57c40 <col:39> 'int' 4
|-VarDecl 0x559402f57cd0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x559402f57d38 <col:39> 'int' 8
|-FunctionTemplateDecl 0x559402f580b8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x559402f57db0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x559402f58018 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x559402f57e60 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x559402f57f08 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x559402f882c0 <col:43, line:371:5>
| |   `-ReturnStmt 0x559402f882b0 <line:370:9, col:34>
| |     `-CallExpr 0x559402f88278 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x559402f88198 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x559402f88218 <col:21> 'const char *' lvalue ParmVar 0x559402f57e60 'keyword' 'const char *'
| |       |-IntegerLiteral 0x559402f88238 <col:30> 'int' 0
| |       `-DeclRefExpr 0x559402f88258 <col:33> 'T' lvalue ParmVar 0x559402f57f08 'x' 'T &'
| `-CXXMethodDecl 0x559402fc8e78 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559402fc8cd0 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x559402fc8da8 <col:37, col:40> col:40 x 'unsigned int &'
|-FunctionTemplateDecl 0x559402f583e8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x559402f58120 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559402f58348 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x559402f581d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f58278 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x559402f88410 <col:45, line:375:5>
|     `-ReturnStmt 0x559402f88400 <line:374:9, col:42>
|       `-CallExpr 0x559402f883c8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f882e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f88368 <col:21> 'const char *' lvalue ParmVar 0x559402f581d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f88388 <col:30> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x559402f883a8 <col:41> 'T' lvalue ParmVar 0x559402f58278 'x' 'T &'
|-FunctionTemplateDecl 0x559402f58718 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x559402f58450 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x559402f58678 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x559402f58500 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x559402f585a8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x559402f88560 <col:45, line:379:5>
| |   `-ReturnStmt 0x559402f88550 <line:378:9, col:43>
| |     `-CallExpr 0x559402f88518 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x559402f88438 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x559402f884b8 <col:21> 'const char *' lvalue ParmVar 0x559402f58500 'keyword' 'const char *'
| |       |-DeclRefExpr 0x559402f884d8 <col:30> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int'
| |       `-DeclRefExpr 0x559402f884f8 <col:42> 'T' lvalue ParmVar 0x559402f585a8 'x' 'T &'
| `-CXXMethodDecl 0x559402fc8808 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x559402fc8620 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x559402fc86f8 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x559402f58a48 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x559402f58780 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x559402f589a8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x559402f58830 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x559402f588d8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x559402f88760 <col:46, line:383:5>
| |   `-ReturnStmt 0x559402f88750 <line:382:9, col:55>
| |     `-CallExpr 0x559402f88718 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x559402f88588 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x559402f88608 <col:21> 'const char *' lvalue ParmVar 0x559402f58830 'keyword' 'const char *'
| |       |-BinaryOperator 0x559402f886d8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x559402f88688 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x559402f88668 <col:30> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x559402f886c0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x559402f886a0 <col:42> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x559402f886f8 <col:54> 'T' lvalue ParmVar 0x559402f588d8 'x' 'T &'
| `-CXXMethodDecl 0x559402fc8308 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559402fc8128 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x559402fc81f8 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x559402f58e48 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x559402f58ab0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559402f58da8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x559402f58b60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f58be0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559402f58c88 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x559402f888a0 <col:54, line:388:5>
|     |-CallExpr 0x559402f88828 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f88778 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559402f887b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559402f887c8 <col:30> 'const char *' lvalue ParmVar 0x559402f58b60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559402f887e8 <col:39> 'int' lvalue ParmVar 0x559402f58be0 'flags' 'int'
|     | `-DeclRefExpr 0x559402f88808 <col:46> 'T' lvalue ParmVar 0x559402f58c88 'x' 'T &'
|     `-ReturnStmt 0x559402f88890 <line:387:9, col:17>
|       `-UnaryOperator 0x559402f88878 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f88868 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f592f8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x559402f58eb8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559402f58f38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559402f59258 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x559402f58ff8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f59098 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x559402f59138 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x559402f88a10 <col:74, line:403:5>
|     `-ReturnStmt 0x559402f88a00 <line:402:9, col:56>
|       `-CallExpr 0x559402f889c0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f888d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f88940 <col:28> 'const char *' lvalue ParmVar 0x559402f58ff8 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f88960 <col:37> 'int' 0
|         |-DeclRefExpr 0x559402f88980 <col:40> 'T' lvalue ParmVar 0x559402f59098 'x' 'T &'
|         `-DeclRefExpr 0x559402f889a0 <col:43> 'const V' lvalue ParmVar 0x559402f59138 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559402f59768 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x559402f59368 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559402f593e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559402f596c8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x559402f594a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f59548 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x559402f595e8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x559402f88b78 <col:76, line:407:5>
|     `-ReturnStmt 0x559402f88b68 <line:406:9, col:65>
|       `-CallExpr 0x559402f88b28 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f88a38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f88aa8 <col:28> 'const char *' lvalue ParmVar 0x559402f594a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f88ac8 <col:37> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int'
|         |-DeclRefExpr 0x559402f88ae8 <col:49> 'T' lvalue ParmVar 0x559402f59548 'x' 'T &'
|         `-DeclRefExpr 0x559402f88b08 <col:52> 'const V' lvalue ParmVar 0x559402f595e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559402f59cb8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x559402f597d8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559402f59858 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559402f59c18 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x559402f59918 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f59998 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559402f59a38 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x559402f59ad8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x559402f88ce0 <col:85, line:412:5>
|     |-CallExpr 0x559402f88c60 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f88b90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x559402f88bd0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x559402f88be0 <col:37> 'const char *' lvalue ParmVar 0x559402f59918 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559402f88c00 <col:46> 'int' lvalue ParmVar 0x559402f59998 'flags' 'int'
|     | |-DeclRefExpr 0x559402f88c20 <col:53> 'T' lvalue ParmVar 0x559402f59a38 'x' 'T &'
|     | `-DeclRefExpr 0x559402f88c40 <col:56> 'const V' lvalue ParmVar 0x559402f59ad8 'default_value' 'const V &'
|     `-ReturnStmt 0x559402f88cd0 <line:411:9, col:17>
|       `-UnaryOperator 0x559402f88cb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f88ca8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f5a148 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x559402f59d30 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f59da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f5a0a8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f59e68 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f59ee0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x559402f59f88 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x559402f88e60 <col:53, line:425:5>
|     `-ReturnStmt 0x559402f88e50 <line:424:9, col:42>
|       `-CallExpr 0x559402f88e10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f88d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f88d90 <col:21> 'const char *' lvalue ParmVar 0x559402f59e68 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f88db0 <col:30> 'int' 0
|         |-DeclRefExpr 0x559402f88dd0 <col:33> 'P' lvalue ParmVar 0x559402f59ee0 'parser' 'P'
|         `-DeclRefExpr 0x559402f88df0 <col:41> 'T' lvalue ParmVar 0x559402f59f88 'x' 'T &'
|-FunctionTemplateDecl 0x559402f5a598 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x559402f5a1b8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5a238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f5a4f8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f5a2f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5a370 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5a418 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x559402f88fd8 <col:55, line:429:5>
|     `-ReturnStmt 0x559402f88fc8 <line:428:9, col:50>
|       `-CallExpr 0x559402f88f88 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f88e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f88f08 <col:21> 'const char *' lvalue ParmVar 0x559402f5a2f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f88f28 <col:30> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x559402f88f48 <col:41> 'P' lvalue ParmVar 0x559402f5a370 'parser' 'P'
|         `-DeclRefExpr 0x559402f88f68 <col:49> 'T' lvalue ParmVar 0x559402f5a418 'x' 'T &'
|-FunctionTemplateDecl 0x559402f5a9e8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x559402f5a608 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5a688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f5a948 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f5a748 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5a7c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5a868 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x559402f89150 <col:55, line:433:5>
|     `-ReturnStmt 0x559402f89140 <line:432:9, col:51>
|       `-CallExpr 0x559402f89100 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f89000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f89080 <col:21> 'const char *' lvalue ParmVar 0x559402f5a748 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f890a0 <col:30> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int'
|         |-DeclRefExpr 0x559402f890c0 <col:42> 'P' lvalue ParmVar 0x559402f5a7c0 'parser' 'P'
|         `-DeclRefExpr 0x559402f890e0 <col:50> 'T' lvalue ParmVar 0x559402f5a868 'x' 'T &'
|-FunctionTemplateDecl 0x559402f5ae38 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x559402f5aa58 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5aad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f5ad98 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f5ab98 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5ac10 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5acb8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x559402f89378 <col:56, line:437:5>
|     `-ReturnStmt 0x559402f89368 <line:436:9, col:63>
|       `-CallExpr 0x559402f89328 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f89178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f891f8 <col:21> 'const char *' lvalue ParmVar 0x559402f5ab98 'keyword' 'const char *'
|         |-BinaryOperator 0x559402f892c8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x559402f89278 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559402f89258 <col:30> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559402f892b0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559402f89290 <col:42> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x559402f892e8 <col:54> 'P' lvalue ParmVar 0x559402f5ac10 'parser' 'P'
|         `-DeclRefExpr 0x559402f89308 <col:62> 'T' lvalue ParmVar 0x559402f5acb8 'x' 'T &'
|-FunctionTemplateDecl 0x559402f5b368 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x559402f5aea8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5af28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f5b2c8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559402f5afe8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5b068 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559402f5b0e0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5b188 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x559402f894e0 <col:64, line:442:5>
|     |-CallExpr 0x559402f89460 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f89390 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559402f893d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559402f893e0 <col:30> 'const char *' lvalue ParmVar 0x559402f5afe8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559402f89400 <col:39> 'int' lvalue ParmVar 0x559402f5b068 'flags' 'int'
|     | |-DeclRefExpr 0x559402f89420 <col:46> 'P' lvalue ParmVar 0x559402f5b0e0 'parser' 'P'
|     | `-DeclRefExpr 0x559402f89440 <col:54> 'T' lvalue ParmVar 0x559402f5b188 'x' 'T &'
|     `-ReturnStmt 0x559402f894d0 <line:441:9, col:17>
|       `-UnaryOperator 0x559402f894b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f894a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f5b968 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x559402f5b3e0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5b458 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559402f5b4d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559402f5b8c8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x559402f5b5a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5b618 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5b6b8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x559402f5b788 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x559402f89678 <col:84, line:458:5>
|     `-ReturnStmt 0x559402f89668 <line:457:9, col:64>
|       `-CallExpr 0x559402f89620 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f89510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f89580 <col:28> 'const char *' lvalue ParmVar 0x559402f5b5a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f895a0 <col:37> 'int' 0
|         |-DeclRefExpr 0x559402f895c0 <col:40> 'P' lvalue ParmVar 0x559402f5b618 'parser' 'P'
|         |-DeclRefExpr 0x559402f895e0 <col:48> 'T' lvalue ParmVar 0x559402f5b6b8 'x' 'T &'
|         `-DeclRefExpr 0x559402f89600 <col:51> 'const V' lvalue ParmVar 0x559402f5b788 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559402f5bee8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x559402f5b9e0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5ba58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559402f5bad8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559402f5be48 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x559402f5bba0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5bc18 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5bcb8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x559402f5bd58 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x559402f89808 <col:86, line:462:5>
|     `-ReturnStmt 0x559402f897f8 <line:461:9, col:73>
|       `-CallExpr 0x559402f897b0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f896a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f89710 <col:28> 'const char *' lvalue ParmVar 0x559402f5bba0 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f89730 <col:37> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int'
|         |-DeclRefExpr 0x559402f89750 <col:49> 'P' lvalue ParmVar 0x559402f5bc18 'parser' 'P'
|         |-DeclRefExpr 0x559402f89770 <col:57> 'T' lvalue ParmVar 0x559402f5bcb8 'x' 'T &'
|         `-DeclRefExpr 0x559402f89790 <col:60> 'const V' lvalue ParmVar 0x559402f5bd58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x559402f5c548 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x559402f5bf60 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5bfd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x559402f5c058 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559402f5c4a8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x559402f5c120 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5c1a0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x559402f5c218 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5c2b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x559402f5c358 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x559402f89998 <col:95, line:467:5>
|     |-CallExpr 0x559402f89910 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f89820 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x559402f89860 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x559402f89870 <col:37> 'const char *' lvalue ParmVar 0x559402f5c120 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559402f89890 <col:46> 'int' lvalue ParmVar 0x559402f5c1a0 'flags' 'int'
|     | |-DeclRefExpr 0x559402f898b0 <col:53> 'P' lvalue ParmVar 0x559402f5c218 'parser' 'P'
|     | |-DeclRefExpr 0x559402f898d0 <col:61> 'T' lvalue ParmVar 0x559402f5c2b8 'x' 'T &'
|     | `-DeclRefExpr 0x559402f898f0 <col:64> 'const V' lvalue ParmVar 0x559402f5c358 'default_value' 'const V &'
|     `-ReturnStmt 0x559402f89988 <line:466:9, col:17>
|       `-UnaryOperator 0x559402f89970 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f89960 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f5cb28 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x559402f5c5c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5c648 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559402f5c6c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559402f5ca88 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559402f5c790 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5c808 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5c8a8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559402f5c948 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x559402f89b40 <col:63, line:481:5>
|     `-ReturnStmt 0x559402f89b30 <line:480:9, col:47>
|       `-CallExpr 0x559402f89ae8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f899c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f89a48 <col:21> 'const char *' lvalue ParmVar 0x559402f5c790 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f89a68 <col:30> 'int' 0
|         |-DeclRefExpr 0x559402f89a88 <col:33> 'P' lvalue ParmVar 0x559402f5c808 'parser' 'P'
|         |-DeclRefExpr 0x559402f89aa8 <col:41> 'T1' lvalue ParmVar 0x559402f5c8a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x559402f89ac8 <col:45> 'T2' lvalue ParmVar 0x559402f5c948 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559402f5d0a8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x559402f5cba0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5cc18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559402f5cc98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559402f5d008 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559402f5cd60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5cdd8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5ce78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559402f5cf18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x559402f89ce0 <col:65, line:485:5>
|     `-ReturnStmt 0x559402f89cd0 <line:484:9, col:55>
|       `-CallExpr 0x559402f89c88 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f89b68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f89be8 <col:21> 'const char *' lvalue ParmVar 0x559402f5cd60 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f89c08 <col:30> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x559402f89c28 <col:41> 'P' lvalue ParmVar 0x559402f5cdd8 'parser' 'P'
|         |-DeclRefExpr 0x559402f89c48 <col:49> 'T1' lvalue ParmVar 0x559402f5ce78 'x1' 'T1 &'
|         `-DeclRefExpr 0x559402f89c68 <col:53> 'T2' lvalue ParmVar 0x559402f5cf18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559402f5efe8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x559402f5d120 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5d198 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559402f5d218 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559402f5ef48 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559402f5d2e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5d358 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5edb0 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559402f5ee58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x559402f89e80 <col:65, line:489:5>
|     `-ReturnStmt 0x559402f89e70 <line:488:9, col:56>
|       `-CallExpr 0x559402f89e28 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f89d08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f89d88 <col:21> 'const char *' lvalue ParmVar 0x559402f5d2e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f89da8 <col:30> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int'
|         |-DeclRefExpr 0x559402f89dc8 <col:42> 'P' lvalue ParmVar 0x559402f5d358 'parser' 'P'
|         |-DeclRefExpr 0x559402f89de8 <col:50> 'T1' lvalue ParmVar 0x559402f5edb0 'x1' 'T1 &'
|         `-DeclRefExpr 0x559402f89e08 <col:54> 'T2' lvalue ParmVar 0x559402f5ee58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559402f5f568 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x559402f5f060 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5f0d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559402f5f158 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559402f5f4c8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559402f5f220 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5f298 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5f338 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559402f5f3d8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x559402f8a0d0 <col:66, line:493:5>
|     `-ReturnStmt 0x559402f8a0c0 <line:492:9, col:68>
|       `-CallExpr 0x559402f8a078 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f89ea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f89f28 <col:21> 'const char *' lvalue ParmVar 0x559402f5f220 'keyword' 'const char *'
|         |-BinaryOperator 0x559402f89ff8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x559402f89fa8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559402f89f88 <col:30> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559402f89fe0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559402f89fc0 <col:42> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x559402f8a018 <col:54> 'P' lvalue ParmVar 0x559402f5f298 'parser' 'P'
|         |-DeclRefExpr 0x559402f8a038 <col:62> 'T1' lvalue ParmVar 0x559402f5f338 'x1' 'T1 &'
|         `-DeclRefExpr 0x559402f8a058 <col:66> 'T2' lvalue ParmVar 0x559402f5f3d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x559402f5fbc8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x559402f5f5e0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f5f658 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559402f5f6d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559402f5fb28 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559402f5f7a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5f820 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x559402f5f898 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x559402f5f938 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x559402f5f9d8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x559402f8a260 <col:74, line:498:5>
|     |-CallExpr 0x559402f8a1d8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f8a0e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x559402f8a128 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x559402f8a138 <col:30> 'const char *' lvalue ParmVar 0x559402f5f7a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559402f8a158 <col:39> 'int' lvalue ParmVar 0x559402f5f820 'flags' 'int'
|     | |-DeclRefExpr 0x559402f8a178 <col:46> 'P' lvalue ParmVar 0x559402f5f898 'parser' 'P'
|     | |-DeclRefExpr 0x559402f8a198 <col:54> 'T1' lvalue ParmVar 0x559402f5f938 'x1' 'T1 &'
|     | `-DeclRefExpr 0x559402f8a1b8 <col:58> 'T2' lvalue ParmVar 0x559402f5f9d8 'x2' 'T2 &'
|     `-ReturnStmt 0x559402f8a250 <line:497:9, col:17>
|       `-UnaryOperator 0x559402f8a238 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f8a228 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f5ff28 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x559402f5fc48 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f5fe88 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559402f5fd00 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f5fd78 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x559402f8a3a8 <col:52, line:509:5>
|     `-ReturnStmt 0x559402f8a398 <line:508:9, col:44>
|       `-CallExpr 0x559402f8a360 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8a290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8a300 <col:26> 'const char *' lvalue ParmVar 0x559402f5fd00 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f8a320 <col:35> 'int' 0
|         `-DeclRefExpr 0x559402f8a340 <col:38> 'P' lvalue ParmVar 0x559402f5fd78 'parser' 'P'
|-FunctionTemplateDecl 0x559402f60228 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x559402f5ff90 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f60188 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559402f60040 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f600b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x559402f8a4e8 <col:54, line:513:5>
|     `-ReturnStmt 0x559402f8a4d8 <line:512:9, col:52>
|       `-CallExpr 0x559402f8a4a0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8a3d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8a440 <col:26> 'const char *' lvalue ParmVar 0x559402f60040 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8a460 <col:35> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x559402f8a480 <col:46> 'P' lvalue ParmVar 0x559402f600b8 'parser' 'P'
|-FunctionTemplateDecl 0x559402f60528 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x559402f60290 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f60488 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559402f60340 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f603b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x559402f8a628 <col:54, line:517:5>
|     `-ReturnStmt 0x559402f8a618 <line:516:9, col:53>
|       `-CallExpr 0x559402f8a5e0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8a510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8a580 <col:26> 'const char *' lvalue ParmVar 0x559402f60340 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8a5a0 <col:35> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int'
|         `-DeclRefExpr 0x559402f8a5c0 <col:47> 'P' lvalue ParmVar 0x559402f603b8 'parser' 'P'
|-FunctionTemplateDecl 0x559402f60828 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x559402f60590 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f60788 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559402f60640 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f606b8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x559402f8a818 <col:55, line:521:5>
|     `-ReturnStmt 0x559402f8a808 <line:520:9, col:65>
|       `-CallExpr 0x559402f8a7d0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8a650 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8a6c0 <col:26> 'const char *' lvalue ParmVar 0x559402f60640 'keyword' 'const char *'
|         |-BinaryOperator 0x559402f8a790 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x559402f8a740 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x559402f8a720 <col:35> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x559402f8a778 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x559402f8a758 <col:47> 'const int' lvalue Var 0x559402f57ae0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x559402f8a7b0 <col:59> 'P' lvalue ParmVar 0x559402f606b8 'parser' 'P'
|-FunctionTemplateDecl 0x559402f60bf8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x559402f60890 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f60b58 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x559402f60940 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f609c0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x559402f60a38 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x559402f8a958 <col:63, line:526:5>
|     |-CallExpr 0x559402f8a8e0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f8a830 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x559402f8a870 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x559402f8a880 <col:35> 'const char *' lvalue ParmVar 0x559402f60940 'keyword' 'const char *'
|     | |-DeclRefExpr 0x559402f8a8a0 <col:44> 'int' lvalue ParmVar 0x559402f609c0 'flags' 'int'
|     | `-DeclRefExpr 0x559402f8a8c0 <col:51> 'P' lvalue ParmVar 0x559402f60a38 'parser' 'P'
|     `-ReturnStmt 0x559402f8a948 <line:525:9, col:17>
|       `-UnaryOperator 0x559402f8a930 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f8a920 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f61048 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x559402f60c68 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f60ce8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f60fa8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f60da8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f60e20 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x559402f60ec8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x559402f8aab0 <col:58, line:541:5>
|     `-ReturnStmt 0x559402f8aaa0 <line:540:9, col:39>
|       `-CallExpr 0x559402f8aa68 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8a988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8aa08 <col:21> 'const char *' lvalue ParmVar 0x559402f60da8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8aa28 <col:30> 'P' lvalue ParmVar 0x559402f60e20 'parser' 'P'
|         `-DeclRefExpr 0x559402f8aa48 <col:38> 'T' lvalue ParmVar 0x559402f60ec8 'x' 'T &'
|-FunctionTemplateDecl 0x559402f61498 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x559402f610b8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f61138 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f613f8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f611f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f61270 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559402f61318 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x559402f8abe8 <col:60, line:545:5>
|     `-ReturnStmt 0x559402f8abd8 <line:544:9, col:41>
|       `-CallExpr 0x559402f8aba0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8aad8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8ab40 <col:23> 'const char *' lvalue ParmVar 0x559402f611f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8ab60 <col:32> 'P' lvalue ParmVar 0x559402f61270 'parser' 'P'
|         `-DeclRefExpr 0x559402f8ab80 <col:40> 'T' lvalue ParmVar 0x559402f61318 'x' 'T &'
|-FunctionTemplateDecl 0x559402f618e8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x559402f61508 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f61588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f61848 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f61648 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f616c0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x559402f61768 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x559402f8ad20 <col:60, line:549:5>
|     `-ReturnStmt 0x559402f8ad10 <line:548:9, col:41>
|       `-CallExpr 0x559402f8acd8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8ac10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8ac78 <col:23> 'const char *' lvalue ParmVar 0x559402f61648 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8ac98 <col:32> 'P' lvalue ParmVar 0x559402f616c0 'parser' 'P'
|         `-DeclRefExpr 0x559402f8acb8 <col:40> 'T' lvalue ParmVar 0x559402f61768 'x' 'T &'
|-FunctionTemplateDecl 0x559402f61d38 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x559402f61958 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f619d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f61c98 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f61a98 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f61b10 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x559402f61bb8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x559402f8ae58 <col:61, line:553:5>
|     `-ReturnStmt 0x559402f8ae48 <line:552:9, col:42>
|       `-CallExpr 0x559402f8ae10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8ad48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8adb0 <col:24> 'const char *' lvalue ParmVar 0x559402f61a98 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8add0 <col:33> 'P' lvalue ParmVar 0x559402f61b10 'parser' 'P'
|         `-DeclRefExpr 0x559402f8adf0 <col:41> 'T' lvalue ParmVar 0x559402f61bb8 'x' 'T &'
|-FunctionTemplateDecl 0x559402f62218 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x559402f61da8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f61e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f62178 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559402f61ee8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f61f68 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x559402f61fe0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x559402f62088 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x559402f8afd0 <col:69, line:557:5>
|     `-ReturnStmt 0x559402f8afc0 <line:556:9, col:46>
|       `-CallExpr 0x559402f8af80 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8ae80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8af00 <col:21> 'const char *' lvalue ParmVar 0x559402f61ee8 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8af20 <col:30> 'int' lvalue ParmVar 0x559402f61f68 'flags' 'int'
|         |-DeclRefExpr 0x559402f8af40 <col:37> 'P' lvalue ParmVar 0x559402f61fe0 'parser' 'P'
|         `-DeclRefExpr 0x559402f8af60 <col:45> 'T' lvalue ParmVar 0x559402f62088 'x' 'T &'
|-FunctionTemplateDecl 0x559402f62528 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x559402f62290 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f62488 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x559402f62340 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f623b8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x559402f8b110 <col:56, line:571:5>
|     `-ReturnStmt 0x559402f8b100 <line:570:9, col:48>
|       `-CallExpr 0x559402f8b0c8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8aff8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8b068 <col:30> 'const char *' lvalue ParmVar 0x559402f62340 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f8b088 <col:39> 'int' 0
|         `-DeclRefExpr 0x559402f8b0a8 <col:42> 'P' lvalue ParmVar 0x559402f623b8 'parser' 'P'
|-FunctionTemplateDecl 0x559402f628b8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x559402f62590 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f62818 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x559402f62640 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f626c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559402f62738 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x559402f8b2e0 <col:67, line:576:5>
|     |-CallExpr 0x559402f8b268 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f8b128 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x559402f8b168 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x559402f8b178 <col:39> 'const char *' lvalue ParmVar 0x559402f62640 'keyword' 'const char *'
|     | |-BinaryOperator 0x559402f8b228 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x559402f8b1d8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559402f8b198 <col:48> 'int' lvalue ParmVar 0x559402f626c0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559402f8b210 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559402f8b1f0 <col:56> 'const int' lvalue Var 0x559402f57cd0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x559402f8b248 <col:68> 'P' lvalue ParmVar 0x559402f62738 'parser' 'P'
|     `-ReturnStmt 0x559402f8b2d0 <line:575:9, col:17>
|       `-UnaryOperator 0x559402f8b2b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f8b2a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f62d08 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x559402f62928 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f629a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f62c68 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x559402f62a68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f62ae0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x559402f62b88 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x559402f8b450 <col:62, line:592:5>
|     `-ReturnStmt 0x559402f8b440 <line:591:9, col:51>
|       `-CallExpr 0x559402f8b400 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8b310 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8b380 <col:30> 'const char *' lvalue ParmVar 0x559402f62a68 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f8b3a0 <col:39> 'int' 0
|         |-DeclRefExpr 0x559402f8b3c0 <col:42> 'P' lvalue ParmVar 0x559402f62ae0 'parser' 'P'
|         `-DeclRefExpr 0x559402f8b3e0 <col:50> 'T' lvalue ParmVar 0x559402f62b88 'x' 'T &'
|-FunctionTemplateDecl 0x559402f631e8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x559402f62d78 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f62df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f63148 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x559402f62eb8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f62f38 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559402f62fb0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x559402f63058 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x559402f8b648 <col:73, line:597:5>
|     |-CallExpr 0x559402f8b5c8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f8b468 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x559402f8b4a8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x559402f8b4b8 <col:39> 'const char *' lvalue ParmVar 0x559402f62eb8 'keyword' 'const char *'
|     | |-BinaryOperator 0x559402f8b568 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x559402f8b518 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559402f8b4d8 <col:48> 'int' lvalue ParmVar 0x559402f62f38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559402f8b550 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559402f8b530 <col:56> 'const int' lvalue Var 0x559402f57cd0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x559402f8b588 <col:68> 'P' lvalue ParmVar 0x559402f62fb0 'parser' 'P'
|     | `-DeclRefExpr 0x559402f8b5a8 <col:76> 'T' lvalue ParmVar 0x559402f63058 'x' 'T &'
|     `-ReturnStmt 0x559402f8b638 <line:596:9, col:17>
|       `-UnaryOperator 0x559402f8b620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f8b610 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f63798 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x559402f63260 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f632d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f636f8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x559402f63398 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f63410 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x559402f635d0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559402f8b7b8 <col:65, line:614:5>
|     `-ReturnStmt 0x559402f8b7a8 <line:613:9, col:46>
|       `-CallExpr 0x559402f8b768 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8b678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8b6e8 <col:25> 'const char *' lvalue ParmVar 0x559402f63398 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f8b708 <col:34> 'int' 0
|         |-DeclRefExpr 0x559402f8b728 <col:37> 'P' lvalue ParmVar 0x559402f63410 'parser' 'P'
|         `-DeclRefExpr 0x559402f8b748 <col:45> 'Vector<T>' lvalue ParmVar 0x559402f635d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x559402f63bc8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x559402f63808 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559402f63b28 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x559402f638c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f63a10 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559402f8b9d0 <col:55, line:618:5>
|     `-ReturnStmt 0x559402f8b9c0 <line:617:9, col:55>
|       `-CallExpr 0x559402f8b980 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8b7e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8b850 <col:25> 'const char *' lvalue ParmVar 0x559402f638c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x559402f8b870 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x559402f8b940 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x559402f8b960 <col:54> 'Vector<T>' lvalue ParmVar 0x559402f63a10 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x559402f64198 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x559402f63c30 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f63ca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f640f8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x559402f63d68 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f63de8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559402f63e60 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x559402f63fb0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559402f8bbc8 <col:76, line:623:5>
|     |-CallExpr 0x559402f8bb48 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x559402f8b9e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x559402f8ba28 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x559402f8ba38 <col:34> 'const char *' lvalue ParmVar 0x559402f63d68 'keyword' 'const char *'
|     | |-BinaryOperator 0x559402f8bae8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x559402f8ba98 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x559402f8ba58 <col:43> 'int' lvalue ParmVar 0x559402f63de8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x559402f8bad0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x559402f8bab0 <col:51> 'const int' lvalue Var 0x559402f57cd0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x559402f8bb08 <col:63> 'P' lvalue ParmVar 0x559402f63e60 'parser' 'P'
|     | `-DeclRefExpr 0x559402f8bb28 <col:71> 'Vector<T>' lvalue ParmVar 0x559402f63fb0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x559402f8bbb8 <line:622:9, col:17>
|       `-UnaryOperator 0x559402f8bba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f8bb90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f646d8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x559402f64210 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f64288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f64638 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x559402f64348 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f643c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559402f64510 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x559402f8be30 <col:66, line:627:5>
|     `-ReturnStmt 0x559402f8be20 <line:626:9, col:59>
|       `-CallExpr 0x559402f8bde0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x559402f8bbf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x559402f8bc68 <col:25> 'const char *' lvalue ParmVar 0x559402f64348 'keyword' 'const char *'
|         |-DeclRefExpr 0x559402f8bc88 <col:34> 'int' lvalue ParmVar 0x559402f643c8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x559402f8bda0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x559402f8bdc0 <col:58> 'Vector<T>' lvalue ParmVar 0x559402f64510 'x' 'Vector<T> &'
|-CXXMethodDecl 0x559402f64768 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x559402f8beb0 <col:25, line:633:5>
|   `-ReturnStmt 0x559402f8bea0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x559402f8be88 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x559402f8be58 <col:16> 'const bool' lvalue ->_status 0x559402f71c38
|         `-CXXThisExpr 0x559402f8be48 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x559402f648e8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x559402f64820 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x559402f8bf98 <col:27, line:639:5>
|   |-BinaryOperator 0x559402f8bf40 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559402f8bec8 <col:9> 'bool' lvalue ParmVar 0x559402f64820 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559402f8bf28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559402f8bef8 <col:13> 'bool' lvalue ->_status 0x559402f71c38
|   |     `-CXXThisExpr 0x559402f8bee8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x559402f8bf88 <line:638:9, col:17>
|     `-UnaryOperator 0x559402f8bf70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402f8bf60 <col:17> 'Args *' this
|-CXXMethodDecl 0x559402f64a68 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x559402f649a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x559402f8c088 <col:39, line:644:5>
|   |-BinaryOperator 0x559402f8c030 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559402f8bfb8 <col:9> 'bool' lvalue ParmVar 0x559402f649a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559402f8c018 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559402f8bfe8 <col:13> 'const bool' lvalue ->_status 0x559402f71c38
|   |     `-CXXThisExpr 0x559402f8bfd8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x559402f8c078 <line:643:9, col:17>
|     `-UnaryOperator 0x559402f8c060 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402f8c050 <col:17> 'const Args *' this
|-CXXMethodDecl 0x559402f64b30 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x559402f8c130 <col:30, line:651:5>
|   `-ReturnStmt 0x559402f8c120 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x559402f8c108 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x559402f8c0d8 <col:16> 'bool' lvalue ->_read_status 0x559402f50480
|         `-ImplicitCastExpr 0x559402f8c0b8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x559402f8c0a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x559402f64c78 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x559402f64be8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x559402f8c238 <col:32, line:658:5>
|   |-BinaryOperator 0x559402f8c1e0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559402f8c148 <col:9> 'bool' lvalue ParmVar 0x559402f64be8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559402f8c1c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559402f8c198 <col:13> 'bool' lvalue ->_read_status 0x559402f50480
|   |     `-ImplicitCastExpr 0x559402f8c178 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x559402f8c168 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x559402f8c228 <line:657:9, col:17>
|     `-UnaryOperator 0x559402f8c210 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402f8c200 <col:17> 'Args *' this
|-CXXMethodDecl 0x559402f64dc8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x559402f64d38 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x559402f8c348 <col:44, line:663:5>
|   |-BinaryOperator 0x559402f8c2f0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x559402f8c258 <col:9> 'bool' lvalue ParmVar 0x559402f64d38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x559402f8c2d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x559402f8c2a8 <col:13> 'bool' lvalue ->_read_status 0x559402f50480
|   |     `-ImplicitCastExpr 0x559402f8c288 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x559402f8c278 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x559402f8c338 <line:662:9, col:17>
|     `-UnaryOperator 0x559402f8c320 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402f8c310 <col:17> 'const Args *' this
|-CXXMethodDecl 0x559402f64e90 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x559402f64f58 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x559402f65020 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x559402f650e8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x559402f653f8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x559402f65188 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559402f65358 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x559402f65268 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x559402f8c700 <col:19, line:706:5>
|     `-IfStmt 0x559402f8c6d8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x559402f8c448 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x559402f8c608 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x559402f8c5d8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x559402f8c598 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x559402f8c4a0 <col:42> '<bound member function type>' ->simple_slot 0x559402f858a0
|       |     | `-CXXThisExpr 0x559402f8c490 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x559402f8c538 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x559402f8c4f0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x559402cf0868
|       |     | `-DeclRefExpr 0x559402f8c4d0 <col:55> 'T' lvalue ParmVar 0x559402f65268 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x559402f8c578 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x559402f8c6c8 <line:705:13, col:34>
|         `-CallExpr 0x559402f8c6a0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x559402f8c628 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x559402f8c680 <col:33> 'T' lvalue ParmVar 0x559402f65268 'x' 'T &'
|-FunctionTemplateDecl 0x559402f656c8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x559402f65458 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559402f65628 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x559402f65538 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x559402f8cae0 <col:31, line:717:5>
|     |-DeclStmt 0x559402f8c840 <line:713:9, col:23>
|     | `-VarDecl 0x559402f8c728 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x559402f8c818 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x559402f8c7a0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x559402f8c7f8 <col:21> 'T' lvalue ParmVar 0x559402f65538 'x' 'T &'
|     |-IfStmt 0x559402f8ca90 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x559402f8c938 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x559402f8ca70 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x559402f8ca10 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x559402f8c9a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|     |   | `-DeclRefExpr 0x559402f8c980 <col:14> 'T *' lvalue Var 0x559402f8c728 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x559402f8ca50 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x559402f8cac8 <line:716:9, col:16>
|       `-DeclRefExpr 0x559402f8caa8 <col:16> 'T *' lvalue Var 0x559402f8c728 's' 'T *'
|-FunctionTemplateDecl 0x559402f65ad8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x559402f65728 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559402f657a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559402f65a38 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x559402f65888 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x559402f65928 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x559402f8cdf0 <col:37, line:726:5>
|     |-IfStmt 0x559402f8cd80 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x559402f8cda0 <line:723:13, col:26>
|     | | `-VarDecl 0x559402f8cb48 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x559402f8cc38 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x559402f8cbc0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x559402f8cc18 <col:25> 'T' lvalue ParmVar 0x559402f65888 'x' 'T &'
|     | |-DeclRefExpr 0x559402f8cc60 <col:16> 'T *' lvalue Var 0x559402f8cb48 's' 'T *'
|     | `-BinaryOperator 0x559402f8cd60 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x559402f8cd10 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x559402f8cca0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|     |   | `-DeclRefExpr 0x559402f8cc80 <col:14> 'T *' lvalue Var 0x559402f8cb48 's' 'T *'
|     |   `-DeclRefExpr 0x559402f8cd40 <col:18> 'const V' lvalue ParmVar 0x559402f65928 'value' 'const V &'
|     `-ReturnStmt 0x559402f8cde0 <line:725:9, col:17>
|       `-UnaryOperator 0x559402f8cdc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402f8cdb8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x559402f65ed8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x559402f65b40 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x559402f65e38 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x559402f65bf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f65c70 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559402f65d18 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x559402f8dc10 <col:65, line:737:5>
|     |-DeclStmt 0x559402f8ce88 <line:732:9, col:26>
|     | `-VarDecl 0x559402f8ce20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559402f8dbd8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x559402f8dbf8 <line:733:13, col:58>
|       | `-VarDecl 0x559402f8ceb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559402f8d090 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559402f8d060 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559402f8d048 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559402f8d028 <col:26, col:58> 'String' (CXXTemporary 0x559402f8d028)
|       |           `-CXXMemberCallExpr 0x559402f8cfb8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559402f8cf28 <col:26> '<bound member function type>' ->find 0x559402f84eb8
|       |             | `-CXXThisExpr 0x559402f8cf18 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559402f8cff0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f8cf58 <col:31> 'const char *' lvalue ParmVar 0x559402f65bf0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559402f8d008 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f8cf78 <col:40> 'int' lvalue ParmVar 0x559402f65c70 'flags' 'int'
|       |             `-DeclRefExpr 0x559402f8cf98 <col:47> 'Args::Slot *' lvalue Var 0x559402f8ce20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559402f8d148 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559402f8d130 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559402f8d110 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559402f8d0e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|       |       `-ImplicitCastExpr 0x559402f8d0c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559402f8d0a8 <col:20> 'String' lvalue Var 0x559402f8ceb0 'str' 'String'
|       `-CompoundStmt 0x559402f8dbb8 <col:61, line:736:9>
|         |-DeclStmt 0x559402f8d600 <line:734:13, col:76>
|         | `-VarDecl 0x559402f8d198 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x559402f8d5d0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559402f8d540 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559402f8d588 <col:60> 'T' lvalue ParmVar 0x559402f65d18 'variable' 'T &'
|         |     `-UnaryOperator 0x559402f8d5b8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559402f8d5a8 <col:71> 'Args *' this
|         `-CallExpr 0x559402f8db88 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x559402f8d628 <col:13> '<bound member function type>' ->postparse 0x559402f850c8
|           | `-CXXThisExpr 0x559402f8d618 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559402f8db48 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x559402f8d658 <col:23> 'T *' lvalue Var 0x559402f8d198 's' 'T *'
|           | `-CallExpr 0x559402f8db08 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559402f8d8e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x559402f8d9e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x559402f8da00 <col:86> 'String' lvalue Var 0x559402f8ceb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559402f8dab0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559402f8da40 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|           |   | `-DeclRefExpr 0x559402f8da20 <col:92> 'T *' lvalue Var 0x559402f8d198 's' 'T *'
|           |   `-UnaryOperator 0x559402f8daf0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559402f8dae0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x559402f8db68 <col:103> 'Args::Slot *' lvalue Var 0x559402f8ce20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559402f66428 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x559402f65f48 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559402f65fc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x559402f66388 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x559402f66088 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f66108 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x559402f661a8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x559402f66248 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x559402f8eab0 <col:88, line:745:5>
|     |-DeclStmt 0x559402f8dca8 <line:741:9, col:26>
|     | `-VarDecl 0x559402f8dc40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559402f8dec8 <line:742:9, col:55>
|     | `-VarDecl 0x559402f8dcd0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x559402f8deb0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x559402f8de80 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x559402f8de68 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x559402f8de48 <col:22, col:54> 'String' (CXXTemporary 0x559402f8de48)
|     |           `-CXXMemberCallExpr 0x559402f8ddd8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x559402f8dd48 <col:22> '<bound member function type>' ->find 0x559402f84eb8
|     |             | `-CXXThisExpr 0x559402f8dd38 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x559402f8de10 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559402f8dd78 <col:27> 'const char *' lvalue ParmVar 0x559402f66088 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x559402f8de28 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559402f8dd98 <col:36> 'int' lvalue ParmVar 0x559402f66108 'flags' 'int'
|     |             `-DeclRefExpr 0x559402f8ddb8 <col:43> 'Args::Slot *' lvalue Var 0x559402f8dc40 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x559402f8e2a0 <line:743:9, col:72>
|     | `-VarDecl 0x559402f8df18 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559402f8e270 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559402f8e1e0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x559402f8e228 <col:56> 'T' lvalue ParmVar 0x559402f661a8 'variable' 'T &'
|     |     `-UnaryOperator 0x559402f8e258 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559402f8e248 <col:67> 'Args *' this
|     `-CallExpr 0x559402f8ea80 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x559402f8e2c8 <col:9> '<bound member function type>' ->postparse 0x559402f850c8
|       | `-CXXThisExpr 0x559402f8e2b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x559402f8ea40 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x559402f8e2f8 <col:19> 'T *' lvalue Var 0x559402f8df18 's' 'T *'
|       | `-ParenExpr 0x559402f8ea20 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x559402f8e9f0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x559402f8e9d8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x559402f8e9c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x559402f8e9a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x559402f8e970 <col:25> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|       |     |       `-ImplicitCastExpr 0x559402f8e958 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x559402f8e318 <col:25> 'String' lvalue Var 0x559402f8dcd0 'str' 'String'
|       |     |-CallExpr 0x559402f8e7c8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x559402f8e5a0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x559402f8e6a0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x559402f8e6c0 <col:89> 'String' lvalue Var 0x559402f8dcd0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x559402f8e770 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x559402f8e700 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|       |     | | `-DeclRefExpr 0x559402f8e6e0 <col:95> 'T *' lvalue Var 0x559402f8df18 's' 'T *'
|       |     | `-UnaryOperator 0x559402f8e7b0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x559402f8e7a0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x559402f8e938 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x559402f8e918 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x559402f8e8e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x559402f8e898 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x559402f8e828 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|       |         | | `-DeclRefExpr 0x559402f8e808 <col:109> 'T *' lvalue Var 0x559402f8df18 's' 'T *'
|       |         | `-DeclRefExpr 0x559402f8e8c8 <col:113> 'const V' lvalue ParmVar 0x559402f66248 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x559402f8e908 <col:120> 'bool' true
|       `-DeclRefExpr 0x559402f8ea60 <col:128> 'Args::Slot *' lvalue Var 0x559402f8dc40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559402f66958 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x559402f664a0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f66518 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f668b8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x559402f665d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f66658 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559402f666d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x559402f66778 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x559402f8f6a8 <col:75, line:754:5>
|     |-DeclStmt 0x559402f8eb58 <line:749:9, col:26>
|     | `-VarDecl 0x559402f8eaf0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559402f8f670 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x559402f8f690 <line:750:13, col:58>
|       | `-VarDecl 0x559402f8eb80 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559402f8ed60 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559402f8ed30 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559402f8ed18 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559402f8ecf8 <col:26, col:58> 'String' (CXXTemporary 0x559402f8ecf8)
|       |           `-CXXMemberCallExpr 0x559402f8ec88 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559402f8ebf8 <col:26> '<bound member function type>' ->find 0x559402f84eb8
|       |             | `-CXXThisExpr 0x559402f8ebe8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559402f8ecc0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f8ec28 <col:31> 'const char *' lvalue ParmVar 0x559402f665d8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559402f8ecd8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f8ec48 <col:40> 'int' lvalue ParmVar 0x559402f66658 'flags' 'int'
|       |             `-DeclRefExpr 0x559402f8ec68 <col:47> 'Args::Slot *' lvalue Var 0x559402f8eaf0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559402f8ee18 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559402f8ee00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559402f8ede0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559402f8edb0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|       |       `-ImplicitCastExpr 0x559402f8ed98 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559402f8ed78 <col:20> 'String' lvalue Var 0x559402f8eb80 'str' 'String'
|       `-CompoundStmt 0x559402f8f650 <col:61, line:753:9>
|         |-DeclStmt 0x559402f8f1f0 <line:751:13, col:63>
|         | `-VarDecl 0x559402f8ee68 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x559402f8f1c0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559402f8f130 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559402f8f178 <col:47> 'T' lvalue ParmVar 0x559402f66778 'variable' 'T &'
|         |     `-UnaryOperator 0x559402f8f1a8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559402f8f198 <col:58> 'Args *' this
|         `-CallExpr 0x559402f8f620 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x559402f8f218 <col:13> '<bound member function type>' ->postparse 0x559402f850c8
|           | `-CXXThisExpr 0x559402f8f208 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559402f8f5e0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x559402f8f248 <col:23> 'T *' lvalue Var 0x559402f8ee68 's' 'T *'
|           | `-CallExpr 0x559402f8f5a0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559402f8f430 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x559402f8f478 <col:56> 'P' lvalue ParmVar 0x559402f666d0 'parser' 'P'
|           |   |-DeclRefExpr 0x559402f8f498 <col:64> 'String' lvalue Var 0x559402f8eb80 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559402f8f548 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559402f8f4d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|           |   | `-DeclRefExpr 0x559402f8f4b8 <col:70> 'T *' lvalue Var 0x559402f8ee68 's' 'T *'
|           |   `-UnaryOperator 0x559402f8f588 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559402f8f578 <col:74> 'Args *' this
|           `-DeclRefExpr 0x559402f8f600 <col:81> 'Args::Slot *' lvalue Var 0x559402f8eaf0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559402f6e648 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x559402f669d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x559402f66a48 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x559402f66ac8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x559402f6e5a8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x559402f66b90 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f66c10 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x559402f66c88 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x559402f66d28 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x559402f6e458 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x559402f926f8 <col:98, line:762:5>
|     |-DeclStmt 0x559402f8f740 <line:758:9, col:26>
|     | `-VarDecl 0x559402f8f6d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559402f91c20 <line:759:9, col:55>
|     | `-VarDecl 0x559402f8f768 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x559402f91c08 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x559402f91bd8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x559402f91bc0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x559402f91ba0 <col:22, col:54> 'String' (CXXTemporary 0x559402f91ba0)
|     |           `-CXXMemberCallExpr 0x559402f8f870 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x559402f8f7e0 <col:22> '<bound member function type>' ->find 0x559402f84eb8
|     |             | `-CXXThisExpr 0x559402f8f7d0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x559402f8f8a8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559402f8f810 <col:27> 'const char *' lvalue ParmVar 0x559402f66b90 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x559402f91b80 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x559402f8f830 <col:36> 'int' lvalue ParmVar 0x559402f66c10 'flags' 'int'
|     |             `-DeclRefExpr 0x559402f8f850 <col:43> 'Args::Slot *' lvalue Var 0x559402f8f6d8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x559402f92040 <line:760:9, col:59>
|     | `-VarDecl 0x559402f91c78 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559402f92010 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559402f91f80 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x559402f91fc8 <col:43> 'T' lvalue ParmVar 0x559402f66d28 'variable' 'T &'
|     |     `-UnaryOperator 0x559402f91ff8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559402f91fe8 <col:54> 'Args *' this
|     `-CallExpr 0x559402f926c8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x559402f92068 <col:9> '<bound member function type>' ->postparse 0x559402f850c8
|       | `-CXXThisExpr 0x559402f92058 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x559402f92688 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x559402f92098 <col:19> 'T *' lvalue Var 0x559402f91c78 's' 'T *'
|       | `-ParenExpr 0x559402f92668 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x559402f92638 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x559402f92620 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x559402f92608 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x559402f925e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x559402f925b8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|       |     |       `-ImplicitCastExpr 0x559402f925a0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x559402f920b8 <col:25> 'String' lvalue Var 0x559402f8f768 'str' 'String'
|       |     |-CallExpr 0x559402f92410 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x559402f922a0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x559402f922e8 <col:59> 'P' lvalue ParmVar 0x559402f66c88 'parser' 'P'
|       |     | |-DeclRefExpr 0x559402f92308 <col:67> 'String' lvalue Var 0x559402f8f768 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x559402f923b8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x559402f92348 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|       |     | | `-DeclRefExpr 0x559402f92328 <col:73> 'T *' lvalue Var 0x559402f91c78 's' 'T *'
|       |     | `-UnaryOperator 0x559402f923f8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x559402f923e8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x559402f92580 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x559402f92560 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x559402f92530 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x559402f924e0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x559402f92470 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|       |         | | `-DeclRefExpr 0x559402f92450 <col:87> 'T *' lvalue Var 0x559402f91c78 's' 'T *'
|       |         | `-DeclRefExpr 0x559402f92510 <col:91> 'const V' lvalue ParmVar 0x559402f6e458 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x559402f92550 <col:98> 'bool' true
|       `-DeclRefExpr 0x559402f926a8 <col:106> 'Args::Slot *' lvalue Var 0x559402f8f6d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559402f6ecb8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x559402f6e6c8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f6e748 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x559402f6e7c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x559402f6ec18 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x559402f6e890 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f6e910 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x559402f6e988 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x559402f6ea28 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x559402f6eac8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x559402f936d8 <col:60, line:773:5>
|     |-DeclStmt 0x559402f927a0 <line:767:9, col:26>
|     | `-VarDecl 0x559402f92738 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559402f936a0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x559402f936c0 <line:768:13, col:58>
|       | `-VarDecl 0x559402f927c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559402f929a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559402f92978 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559402f92960 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559402f92940 <col:26, col:58> 'String' (CXXTemporary 0x559402f92940)
|       |           `-CXXMemberCallExpr 0x559402f928d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559402f92840 <col:26> '<bound member function type>' ->find 0x559402f84eb8
|       |             | `-CXXThisExpr 0x559402f92830 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559402f92908 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f92870 <col:31> 'const char *' lvalue ParmVar 0x559402f6e890 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559402f92920 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f92890 <col:40> 'int' lvalue ParmVar 0x559402f6e910 'flags' 'int'
|       |             `-DeclRefExpr 0x559402f928b0 <col:47> 'Args::Slot *' lvalue Var 0x559402f92738 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559402f92a60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559402f92a48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559402f92a28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559402f929f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|       |       `-ImplicitCastExpr 0x559402f929e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559402f929c0 <col:20> 'String' lvalue Var 0x559402f927c8 'str' 'String'
|       `-CompoundStmt 0x559402f93678 <col:61, line:772:9>
|         |-DeclStmt 0x559402f92da0 <line:769:13, col:66>
|         | `-VarDecl 0x559402f92ab8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x559402f92d70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559402f92ce0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559402f92d28 <col:49> 'T1' lvalue ParmVar 0x559402f6ea28 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x559402f92d58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559402f92d48 <col:61> 'Args *' this
|         |-DeclStmt 0x559402f93110 <line:770:13, col:66>
|         | `-VarDecl 0x559402f92e28 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x559402f930e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x559402f93050 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x559402f93098 <col:49> 'T2' lvalue ParmVar 0x559402f6eac8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x559402f930c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x559402f930b8 <col:61> 'Args *' this
|         `-CallExpr 0x559402f93648 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x559402f93138 <col:13> '<bound member function type>' ->postparse 0x559402f850c8
|           | `-CXXThisExpr 0x559402f93128 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x559402f93608 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x559402f931a8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x559402f93168 <col:23> 'T1 *' lvalue Var 0x559402f92ab8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x559402f93188 <col:29> 'T2 *' lvalue Var 0x559402f92e28 's2' 'T2 *'
|           | `-CallExpr 0x559402f935c0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x559402f93390 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x559402f933d8 <col:63> 'P' lvalue ParmVar 0x559402f6e988 'parser' 'P'
|           |   |-DeclRefExpr 0x559402f933f8 <col:71> 'String' lvalue Var 0x559402f927c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x559402f934a8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559402f93438 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|           |   | `-DeclRefExpr 0x559402f93418 <col:77> 'T1 *' lvalue Var 0x559402f92ab8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x559402f93568 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x559402f934f8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|           |   | `-DeclRefExpr 0x559402f934d8 <col:82> 'T2 *' lvalue Var 0x559402f92e28 's2' 'T2 *'
|           |   `-UnaryOperator 0x559402f935a8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x559402f93598 <col:87> 'Args *' this
|           `-DeclRefExpr 0x559402f93628 <col:94> 'Args::Slot *' lvalue Var 0x559402f92738 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559402f6f0a8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x559402f6ed38 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f6f008 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x559402f6edf0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f6ee70 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x559402f6eee8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x559402f93bf0 <col:67, line:780:5>
|     |-DeclStmt 0x559402f93770 <line:777:9, col:26>
|     | `-VarDecl 0x559402f93708 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x559402f93bb8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x559402f93bd8 <line:778:13, col:58>
|       | `-VarDecl 0x559402f93798 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x559402f93978 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x559402f93948 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x559402f93930 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x559402f93910 <col:26, col:58> 'String' (CXXTemporary 0x559402f93910)
|       |           `-CXXMemberCallExpr 0x559402f938a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x559402f93810 <col:26> '<bound member function type>' ->find 0x559402f84eb8
|       |             | `-CXXThisExpr 0x559402f93800 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x559402f938d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f93840 <col:31> 'const char *' lvalue ParmVar 0x559402f6edf0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x559402f938f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x559402f93860 <col:40> 'int' lvalue ParmVar 0x559402f6ee70 'flags' 'int'
|       |             `-DeclRefExpr 0x559402f93880 <col:47> 'Args::Slot *' lvalue Var 0x559402f93708 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x559402f93a30 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x559402f93a18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x559402f939f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x559402f939c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|       |       `-ImplicitCastExpr 0x559402f939b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x559402f93990 <col:20> 'String' lvalue Var 0x559402f93798 'str' 'String'
|       `-CallExpr 0x559402f93b88 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x559402f93a58 <col:13> '<bound member function type>' ->postparse 0x559402f850c8
|         | `-CXXThisExpr 0x559402f93a48 <col:13> 'Args *' implicit this
|         |-CallExpr 0x559402f93b38 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x559402f93aa8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x559402f93a88 <col:23> 'P' lvalue ParmVar 0x559402f6eee8 'parser' 'P'
|         | |-DeclRefExpr 0x559402f93af0 <col:36> 'String' lvalue Var 0x559402f93798 'str' 'String'
|         | `-UnaryOperator 0x559402f93b20 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x559402f93b10 <col:42> 'Args *' this
|         `-DeclRefExpr 0x559402f93b68 <col:49> 'Args::Slot *' lvalue Var 0x559402f93708 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x559402f6f448 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x559402f6f118 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x559402f6f3a8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x559402f6f1d0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f6f250 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x559402f6f2c8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x559402f94560 <col:71, line:792:5>
|     |-DeclStmt 0x559402f93c88 <line:784:9, col:26>
|     | `-VarDecl 0x559402f93c20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559402f93d58 <line:785:9, col:29>
|     | `-VarDecl 0x559402f93cb8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559402f93d40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559402f93d20 <col:28> 'int' 1
|     |-WhileStmt 0x559402f94410 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x559402f94430 <line:786:16, col:61>
|     | | `-VarDecl 0x559402f93d80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559402f93f60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559402f93f30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559402f93f18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559402f93ef8 <col:29, col:61> 'String' (CXXTemporary 0x559402f93ef8)
|     | |           `-CXXMemberCallExpr 0x559402f93e88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559402f93df8 <col:29> '<bound member function type>' ->find 0x559402f84eb8
|     | |             | `-CXXThisExpr 0x559402f93de8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559402f93ec0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559402f93e28 <col:34> 'const char *' lvalue ParmVar 0x559402f6f1d0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559402f93ed8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559402f93e48 <col:43> 'int' lvalue ParmVar 0x559402f6f250 'flags' 'int'
|     | |             `-DeclRefExpr 0x559402f93e68 <col:50> 'Args::Slot *' lvalue Var 0x559402f93c20 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559402f94018 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559402f94000 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559402f93fe0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559402f93fb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|     | |       `-ImplicitCastExpr 0x559402f93f98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559402f93f78 <col:23> 'String' lvalue Var 0x559402f93d80 'str' 'String'
|     | `-CompoundStmt 0x559402f943e8 <col:64, line:790:9>
|     |   |-CallExpr 0x559402f94170 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x559402f94040 <col:13> '<bound member function type>' ->postparse 0x559402f850c8
|     |   | | `-CXXThisExpr 0x559402f94030 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x559402f94120 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x559402f94090 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x559402f94070 <col:23> 'P' lvalue ParmVar 0x559402f6f2c8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x559402f940d8 <col:36> 'String' lvalue Var 0x559402f93d80 'str' 'String'
|     |   | | `-UnaryOperator 0x559402f94108 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x559402f940f8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x559402f94150 <col:49> 'Args::Slot *' lvalue Var 0x559402f93c20 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x559402f94308 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559402f941a0 <col:13> 'int' lvalue Var 0x559402f93cb8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559402f942f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559402f942d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559402f94238 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559402f94218 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559402f94200 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559402f941c0 <col:28> 'int' lvalue Var 0x559402f93cb8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559402f941e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559402f942b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559402f94288 <col:49> 'bool' lvalue ->_read_status 0x559402f50480
|     |   |         `-ImplicitCastExpr 0x559402f94268 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559402f94258 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559402f943b8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559402f94328 <col:13> 'int' lvalue ParmVar 0x559402f6f250 'flags' 'int'
|     |     `-UnaryOperator 0x559402f943a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559402f94388 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559402f94368 <col:23> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559402f94540 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559402f94478 <col:9> 'bool' lvalue ->_read_status 0x559402f50480
|       | `-ImplicitCastExpr 0x559402f94458 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559402f94448 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559402f94520 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559402f94500 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559402f944e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559402f944a8 <col:25> 'int' lvalue Var 0x559402f93cb8 'read_status' 'int'
|           `-IntegerLiteral 0x559402f944c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x559402f6f928 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x559402f6f4b8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f6f538 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f6f888 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x559402f6f5f8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f6f678 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x559402f6f6f0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x559402f6f798 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x559402f954f0 <col:84, line:805:5>
|     |-DeclStmt 0x559402f94608 <line:796:9, col:26>
|     | `-VarDecl 0x559402f945a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559402f946d8 <line:797:9, col:29>
|     | `-VarDecl 0x559402f94638 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559402f946c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559402f946a0 <col:28> 'int' 1
|     |-DeclStmt 0x559402f94a10 <line:798:9, col:71>
|     | `-VarDecl 0x559402f94728 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x559402f949e0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x559402f94950 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x559402f94998 <col:55> 'T' lvalue ParmVar 0x559402f6f798 'variable' 'T &'
|     |     `-UnaryOperator 0x559402f949c8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x559402f949b8 <col:66> 'Args *' this
|     |-WhileStmt 0x559402f953a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x559402f953c0 <line:799:16, col:61>
|     | | `-VarDecl 0x559402f94a38 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559402f94c18 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559402f94be8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559402f94bd0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559402f94bb0 <col:29, col:61> 'String' (CXXTemporary 0x559402f94bb0)
|     | |           `-CXXMemberCallExpr 0x559402f94b40 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559402f94ab0 <col:29> '<bound member function type>' ->find 0x559402f84eb8
|     | |             | `-CXXThisExpr 0x559402f94aa0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559402f94b78 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559402f94ae0 <col:34> 'const char *' lvalue ParmVar 0x559402f6f5f8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559402f94b90 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559402f94b00 <col:43> 'int' lvalue ParmVar 0x559402f6f678 'flags' 'int'
|     | |             `-DeclRefExpr 0x559402f94b20 <col:50> 'Args::Slot *' lvalue Var 0x559402f945a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559402f94cd0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559402f94cb8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559402f94c98 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559402f94c68 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|     | |       `-ImplicitCastExpr 0x559402f94c50 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559402f94c30 <col:23> 'String' lvalue Var 0x559402f94a38 'str' 'String'
|     | `-CompoundStmt 0x559402f95378 <col:64, line:803:9>
|     |   |-CallExpr 0x559402f95100 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x559402f94cf8 <col:13> '<bound member function type>' ->postparse 0x559402f850c8
|     |   | | `-CXXThisExpr 0x559402f94ce8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x559402f950c0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x559402f94d28 <col:23> 'T *' lvalue Var 0x559402f94728 's' 'T *'
|     |   | | `-CallExpr 0x559402f95080 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x559402f94f10 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x559402f94f58 <col:56> 'P' lvalue ParmVar 0x559402f6f6f0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x559402f94f78 <col:64> 'String' lvalue Var 0x559402f94a38 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x559402f95028 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x559402f94fb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|     |   | |   | `-DeclRefExpr 0x559402f94f98 <col:70> 'T *' lvalue Var 0x559402f94728 's' 'T *'
|     |   | |   `-UnaryOperator 0x559402f95068 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x559402f95058 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x559402f950e0 <col:81> 'Args::Slot *' lvalue Var 0x559402f945a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x559402f95298 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559402f95130 <col:13> 'int' lvalue Var 0x559402f94638 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559402f95280 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559402f95260 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559402f951c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559402f951a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559402f95190 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559402f95150 <col:28> 'int' lvalue Var 0x559402f94638 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559402f95170 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559402f95248 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559402f95218 <col:49> 'bool' lvalue ->_read_status 0x559402f50480
|     |   |         `-ImplicitCastExpr 0x559402f951f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559402f951e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559402f95348 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559402f952b8 <col:13> 'int' lvalue ParmVar 0x559402f6f678 'flags' 'int'
|     |     `-UnaryOperator 0x559402f95330 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559402f95318 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559402f952f8 <col:23> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559402f954d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559402f95408 <col:9> 'bool' lvalue ->_read_status 0x559402f50480
|       | `-ImplicitCastExpr 0x559402f953e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559402f953d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559402f954b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559402f95490 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559402f95478 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559402f95438 <col:25> 'int' lvalue Var 0x559402f94638 'read_status' 'int'
|           `-IntegerLiteral 0x559402f95458 <col:40> 'int' 1
|-FunctionTemplateDecl 0x559402f6ff08 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x559402f6f9a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x559402f6fa18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x559402f6fe68 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x559402f6fad8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x559402f6fb58 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x559402f6fbd0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x559402f6fd20 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x559402f962f8 <col:87, line:821:5>
|     |-DeclStmt 0x559402f955a0 <line:809:9, col:26>
|     | `-VarDecl 0x559402f95538 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x559402f95670 <line:810:9, col:29>
|     | `-VarDecl 0x559402f955d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x559402f95658 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x559402f95638 <col:28> 'int' 1
|     |-DeclStmt 0x559402f958b8 <line:811:9, col:38>
|     | `-VarDecl 0x559402f957a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x559402f95890 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x559402f95818 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x559402f95870 <col:29> 'Vector<T>' lvalue ParmVar 0x559402f6fd20 'variable' 'Vector<T> &'
|     |-WhileStmt 0x559402f961a8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x559402f961c8 <line:812:16, col:61>
|     | | `-VarDecl 0x559402f958e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x559402f95ac0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x559402f95a90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x559402f95a78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x559402f95a58 <col:29, col:61> 'String' (CXXTemporary 0x559402f95a58)
|     | |           `-CXXMemberCallExpr 0x559402f959e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x559402f95958 <col:29> '<bound member function type>' ->find 0x559402f84eb8
|     | |             | `-CXXThisExpr 0x559402f95948 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x559402f95a20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559402f95988 <col:34> 'const char *' lvalue ParmVar 0x559402f6fad8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x559402f95a38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x559402f959a8 <col:43> 'int' lvalue ParmVar 0x559402f6fb58 'flags' 'int'
|     | |             `-DeclRefExpr 0x559402f959c8 <col:50> 'Args::Slot *' lvalue Var 0x559402f95538 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x559402f95b78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x559402f95b60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x559402f95b40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x559402f95b10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x559402cb2828
|     | |       `-ImplicitCastExpr 0x559402f95af8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x559402f95ad8 <col:23> 'String' lvalue Var 0x559402f958e0 'str' 'String'
|     | `-CompoundStmt 0x559402f96170 <col:64, line:819:9>
|     |   |-DeclStmt 0x559402f95c38 <line:813:13, col:23>
|     |   | `-VarDecl 0x559402f95ba0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x559402f95c18 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x559402f95db8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x559402f95c60 <col:13> '<bound member function type>' ->postparse 0x559402f850c8
|     |   | | `-CXXThisExpr 0x559402f95c50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x559402f95d60 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x559402f95cb0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x559402f95c90 <col:23> 'P' lvalue ParmVar 0x559402f6fbd0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x559402f95cf8 <col:36> 'String' lvalue Var 0x559402f958e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x559402f95d18 <col:41> 'T' lvalue Var 0x559402f95ba0 'sx' 'T'
|     |   | | `-UnaryOperator 0x559402f95d48 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x559402f95d38 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x559402f95d98 <col:53> 'Args::Slot *' lvalue Var 0x559402f95538 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x559402f95f10 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x559402f95e48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x559402f95e18 <col:17> 'bool' lvalue ->_read_status 0x559402f50480
|     |   | |   `-ImplicitCastExpr 0x559402f95df8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x559402f95de8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x559402f95ee8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x559402f95e80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x559402f95e60 <col:17> 'Vector<T> *' lvalue Var 0x559402f957a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x559402f95ec8 <col:30> 'T' lvalue Var 0x559402f95ba0 'sx' 'T'
|     |   |-BinaryOperator 0x559402f96090 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x559402f95f28 <col:13> 'int' lvalue Var 0x559402f955d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x559402f96078 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x559402f96058 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x559402f95fc0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x559402f95fa0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x559402f95f88 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x559402f95f48 <col:28> 'int' lvalue Var 0x559402f955d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x559402f95f68 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x559402f96040 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x559402f96010 <col:49> 'bool' lvalue ->_read_status 0x559402f50480
|     |   |         `-ImplicitCastExpr 0x559402f95ff0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x559402f95fe0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x559402f96140 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x559402f960b0 <col:13> 'int' lvalue ParmVar 0x559402f6fb58 'flags' 'int'
|     |     `-UnaryOperator 0x559402f96128 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x559402f96110 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x559402f960f0 <col:23> 'const int' lvalue Var 0x559402f579e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x559402f962d8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x559402f96210 <col:9> 'bool' lvalue ->_read_status 0x559402f50480
|       | `-ImplicitCastExpr 0x559402f961f0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x559402f961e0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x559402f962b8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x559402f96298 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x559402f96280 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x559402f96240 <col:25> 'int' lvalue Var 0x559402f955d0 'read_status' 'int'
|           `-IntegerLiteral 0x559402f96260 <col:40> 'int' 1
|-AccessSpecDecl 0x559402f6ff80 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x559402f6ffa8 prev 0x559402f55ce8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x559402f700a0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x559402f70190 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x559402f96330 <col:16, line:828:9>
| |-CXXDestructorDecl 0x559402f70280 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x559402f96340 <col:25, line:830:9>
| |-CXXMethodDecl 0x559402f70380 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x559402f70430 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x559402f704d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x559402f704d8
| | `-ParmVarDecl 0x559402f705e8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x559402f70da8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x559402f70da8
|   `-ParmVarDecl 0x559402f70eb8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x559402f70658 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x559402f707b8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x559402f709b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x559402f70860 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x559402f708d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x559402f96520 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x559402f70c68 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x559402f96390 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x559402f96350 <col:20> 'void *' lvalue ParmVar 0x559402f70860 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x559402f70cd0 '_slot' 'char *'
| | | `-CXXNewExpr 0x559402f96418 <col:32, col:45> 'char *' array Function 0x559402ad64a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x559402f96400 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x559402f963d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x559402f708d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x559402f70d30 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x559402f964e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x559402f964a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x559402f708d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x559402f965a0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x559402f70ab0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x559402f70280 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x559402f96628 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x559402f96608 <line:840:13, col:22> 'void' array Function 0x559402ad6808 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x559402f965f0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x559402f965c0 <col:22> 'char *' lvalue ->_slot 0x559402f70cd0
| |         `-CXXThisExpr 0x559402f965b0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x559402f70bb0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x559402f70380 Slot::store 'void ()' ]
| | `-CompoundStmt 0x559402f96818 <col:22, line:844:9>
| |   `-CallExpr 0x559402f96780 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x559402f96768 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x559402f96748 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x559402be2288 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x559402f967b8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x559402f96698 <col:20> 'void *' lvalue ->_ptr 0x559402f70c68
| |     |   `-CXXThisExpr 0x559402f96688 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x559402f967e8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x559402f967d0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x559402f966d8 <col:26> 'char *' lvalue ->_slot 0x559402f70cd0
| |     |     `-CXXThisExpr 0x559402f966c8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x559402f96800 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x559402f96718 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x559402f70d30
| |         `-CXXThisExpr 0x559402f96708 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x559402f70c68 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x559402f70cd0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x559402f70d30 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x559402f70f28 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x559402f70f28
| | `-ParmVarDecl 0x559402f71038 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x559402f710d8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x559402f710d8
|   `-ParmVarDecl 0x559402f711e8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x559402f71388 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x559402f71258 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x559402f712f8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x559402f71620 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x559402f71818 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x559402f716e8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x559402f71998 '_ptr' 'T *'
|   | | `-ParenListExpr 0x559402f96850 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x559402f96830 <col:20> 'T *' lvalue ParmVar 0x559402f716e8 'ptr' 'T *'
|   | `-CompoundStmt 0x559402f968a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x559402f718e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x559402f70380 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x559402f96a50 <col:22, line:857:9>
|   |   `-CallExpr 0x559402f96a20 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x559402f968b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x559402c9a9b8 0x559402c44ce8
|   |     |-CXXOperatorCallExpr 0x559402f969b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x559402f96940 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x559402ea7b88 0x559402ea77a8 0x559402ea73d8 0x559402ea6ff8 0x559402ea6c18 0x559402ea6848
|   |     | `-MemberExpr 0x559402f96910 <col:29> 'T *' lvalue ->_ptr 0x559402f71998
|   |     |   `-CXXThisExpr 0x559402f96900 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x559402f969f0 <col:35> 'T' lvalue ->_slot 0x559402f719f8
|   |       `-CXXThisExpr 0x559402f969e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x559402f71998 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x559402f719f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x559402f71a60 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x559402f71b60 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x559402f71bb0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402f71b40 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x559402f71b20 <col:31> 'int' 48
|-FieldDecl 0x559402f71bd8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x559402f71c38 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x559402f71c98 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x559402f71dd0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x559402f84760 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x559402f847c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x559402f84870 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x559402f84a98 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x559402f849a0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x559402f84be8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x559402f84b58 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x559402f84eb8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x559402f84ca8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x559402f84d28 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x559402f84dd0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x559402f850c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x559402f84f80 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x559402f84ff8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x559402f85198 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x559402f852e8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x559402f85250 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x559402f85678 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x559402f853a8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x559402f85428 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x559402f854d0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x559402f85588 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x559402f858a0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x559402f85750 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x559402f857c8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x559402f85bb8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x559402f85950 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x559402f85b18 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x559402f85a28 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402c19808 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402c19928 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x559402c199f0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x559402ce9fc0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559402cef2d8 <col:8>
|-CXXConstructorDecl 0x559402cea0c8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x559402cea0c8
| `-ParmVarDecl 0x559402cea1d8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x559402cea278 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559402cea388 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x559402c199f0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x559402cef4f0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x559402cef4c0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x559402c199f0
| |     `-CXXStaticCastExpr 0x559402cef490 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x559402cef460 <col:8> 'in_addr' lvalue ParmVar 0x559402cea388 '' 'in_addr &&'
| `-CompoundStmt 0x559402cef538 <col:8>
`-CXXDestructorDecl 0x559402cef770 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402ce1ca8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x559402ce1dc8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x559402ce1eb0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x559402ce1e90 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x559402ce1e58 <col:22> 'int' 4
|-FieldDecl 0x559402ce1f58 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x559402ce1f38 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x559402ce1f00 <col:21> 'int' 4
|-FieldDecl 0x559402ce1fb8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x559402ce2018 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x559402ce2078 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x559402ce20d8 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x559402ce2138 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x559402ce2198 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x559402ce21f8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x559402ce2268 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x559402ce22d8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402ebd4e8 prev 0x559402eb26f0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402ebd5e0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x559402ebd6d0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x559402ebd7f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x559402ebd978 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x559402ebdaf8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x559402ebdc78 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x559402eceaa8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559402ecf318 <col:11>
|-CXXDestructorDecl 0x559402eceb80 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x559402ececb8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x559402ececb8
| `-ParmVarDecl 0x559402ecedc8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x559402ecee68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559402ecee68
| `-ParmVarDecl 0x559402ecef78 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x559402ed1d38 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x559402ed1e48 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x559402ed20c8 <col:11>
|   `-ReturnStmt 0x559402ed20b8 <col:11>
|     `-UnaryOperator 0x559402ed20a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402ed2090 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x559402ed1eb8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559402ed1eb8
  `-ParmVarDecl 0x559402ed1fc8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402ebdce0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402ebddf8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x559402ebde98 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x559402ebdf00 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x559402ebdf68 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x559402ebdfd0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x559402ebe030 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x559402ebe0f0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x559402ebe150 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x559402ebe1b0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x559402ece9b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x559402ebde98 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x559402ecf328 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x559402ecf380 <col:12>
|-CXXConstructorDecl 0x559402ecefe8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x559402ecefe8
| `-ParmVarDecl 0x559402ecf0f8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x559402ecf198 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x559402ecf198
| `-ParmVarDecl 0x559402ecf2a8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x559402ed1420 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402eabe00 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x559402eabf18 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x559402eabfa8 <col:16, col:22> col:16 public
|-EnumDecl 0x559402eabfd0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x559402eac0d0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x559402eac1b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eac0b0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x559402eac090 <col:21> 'int' 28
| `-EnumConstantDecl 0x559402eac160 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x559402eac1c8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402eac140 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x559402eac120 <col:22> 'int' 64
|-CXXMethodDecl 0x559402eac508 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x559402eac1f0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559402eac270 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x559402eac2e8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559402eac360 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559402eac5c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x559402eac7c8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x559402eac640 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x559402eac6b8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559402eac878 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x559402eac9d8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x559402eac8e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559402eaca80 <col:72> warn_unused_result ""
|-TypedefDecl 0x559402eacde0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x559402eacd70 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x559402eacd10 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x559402eaccd0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5594029834e0 'void'
|       |-PointerType 0x559402c2bf80 'unsigned char *'
|       | `-BuiltinType 0x5594029835e0 'unsigned char'
|       |-TypedefType 0x559402a28550 'size_t' sugar
|       | |-Typedef 0x5594029f3be0 'size_t'
|       | `-BuiltinType 0x559402983640 'unsigned long'
|       `-PointerType 0x559402983ce0 'void *'
|         `-BuiltinType 0x5594029834e0 'void'
|-CXXMethodDecl 0x559402ead258 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x559402eace50 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x559402eacec8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559402eacf60 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x559402eacfe0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x559402ec7950 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x559402ec7938 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x559402ec7900 <col:58> 'int' 0
| |-ParmVarDecl 0x559402ead060 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x559402ec7978 <col:76> 'int' 0
| |-ParmVarDecl 0x559402ead0e0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x559402ec7998 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x559402ead328 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x559402ead3a8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x559402ead468 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x559402ead508 <col:20>
| `-OptimizeNoneAttr 0x559402ead560 <col:30>
|-CXXMethodDecl 0x559402ead5d8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x559402ead678 <col:20>
| `-OptimizeNoneAttr 0x559402ead6d0 <col:30>
|-CXXMethodDecl 0x559402ead748 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x559402ead7e8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x559402ead898 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x559402ead938 <col:20>
| |-OptimizeNoneAttr 0x559402ead990 <col:30>
| `-WarnUnusedResultAttr 0x559402ead9b8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x559402eada10 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x559402eadab0 <col:20>
| `-OptimizeNoneAttr 0x559402eadb08 <col:30>
|-CXXMethodDecl 0x559402eadb58 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x559402eadbf8 <col:20>
| `-OptimizeNoneAttr 0x559402eadc50 <col:30>
|-CXXMethodDecl 0x559402eadc98 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x559402eadd38 <col:20>
| `-OptimizeNoneAttr 0x559402eadd90 <col:30>
|-CXXMethodDecl 0x559402eaddd8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x559402eade98 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x559402eadf60 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559402eae028 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559402eae0e8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559402eae208 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x559402ec7a60 <col:54, line:99:5>
|   `-ReturnStmt 0x559402ec7a50 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x559402ec7a38 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x559402ec7a08 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559402ebe4e8
|         `-CXXThisExpr 0x559402ec79f8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x559402eae3a8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x559402eae2b8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x559402ec7b10 <col:67, line:103:5>
|   `-BinaryOperator 0x559402ec7af0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559402ec7a88 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559402ebe4e8
|     | `-CXXThisExpr 0x559402ec7a78 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559402ec7ad8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x559402ec7ab8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x559402eae2b8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x559402eae4a0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x559402ec7b90 <col:33, line:107:5>
|   `-ReturnStmt 0x559402ec7b80 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x559402ec7b68 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x559402ec7b38 <col:16> 'void *' lvalue ->_destructor_argument 0x559402ebe550
|         `-CXXThisExpr 0x559402ec7b28 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x559402eae560 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x559402ec81c0 <col:25, line:113:5>
|   |-ParenExpr 0x559402ec7f08 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x559402ec7ed8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x559402ec7c48 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x559402ec7c20 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x559402ec7be8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x559402ec7bb8 <col:24> '<bound member function type>' ->shared 0x559402ead5d8
|   |   |       `-ImplicitCastExpr 0x559402ec7c08 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x559402ec7ba8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x559402ec7ca8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ec7c88 <col:42> 'int' 0
|   |   `-CallExpr 0x559402ec7e38 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x559402ec7e20 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ec7e00 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ec7e78 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec7d18 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x559402ec7e90 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec7d40 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ec7ea8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ec7d78 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x559402ec7ec0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ec7de8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ec7dd0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ec7d98 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x559402ec8108 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x559402ec7f38 <col:2> 'unsigned char *' lvalue ->_head 0x559402ebe2f0
|   | | `-CXXThisExpr 0x559402ec7f28 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x559402ec80f0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x559402ec80d0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x559402ec7f78 <col:10> 'unsigned char *' lvalue ->_data 0x559402ebe358
|   |     | `-CXXThisExpr 0x559402ec7f68 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x559402ec80b8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x559402ec8098 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x559402ec7fb8 <col:18> 'unsigned char *' lvalue ->_tail 0x559402ebe3c0
|   |         | `-CXXThisExpr 0x559402ec7fa8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x559402ec8080 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x559402ec8060 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x559402ec7ff8 <col:26> 'unsigned char *' lvalue ->_end 0x559402ebe428
|   |             | `-CXXThisExpr 0x559402ec7fe8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x559402ec8048 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x559402ec8028 <col:33> 'int' 0
|   `-BinaryOperator 0x559402ec81a0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x559402ec8138 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x559402ebe4e8
|     | `-CXXThisExpr 0x559402ec8128 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x559402ec8188 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x559402ec8168 <col:16> 'int' 0
|-CXXMethodDecl 0x559402eae6a0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559402eae610 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559402eae748 <col:20>
| |-OptimizeNoneAttr 0x559402eae7a0 <col:30>
| `-WarnUnusedResultAttr 0x559402eae7c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x559402eae898 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559402eae808 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559402eae940 <col:20>
| |-OptimizeNoneAttr 0x559402eae998 <col:30>
| `-WarnUnusedResultAttr 0x559402eae9c0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x559402eaeaf8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x559402eaea00 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559402eaeba0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x559402eaeca0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x559402eaec10 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559402eaed48 <col:20>
| `-OptimizeNoneAttr 0x559402eaeda0 <col:30>
|-CXXMethodDecl 0x559402eaee68 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x559402eaedd8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559402eaef10 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x559402eaf010 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x559402eaef80 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x559402eaf0b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x559402eaf1b8 <line:245:5, col:62> col:45 used take 'void (uint32_t)'
| |-ParmVarDecl 0x559402eaf128 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559402eaf260 <col:20>
| `-OptimizeNoneAttr 0x559402eaf2b8 <col:30>
|-CXXMethodDecl 0x559402eaf448 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x559402eaf2f8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x559402eaf370 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x559402ec79b8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x559402eaf4f8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x559402eaf6f8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559402eaf570 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x559402eaf5e8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402eaf908 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x559402eaf7b8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559402eaf830 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402eafb18 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x559402eaf9c8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x559402eafa48 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x559402ec79c8 <col:39> 'int' 0
|-CXXMethodDecl 0x559402eafbe8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x559402eafcb0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x559402eafd78 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x559402eafe38 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559402eaff00 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x559402eb0048 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x559402eaffb8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x559402eb0218 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559402eb0108 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x559402eb0180 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402eb02e8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x559402eb03a8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x559402eb0448 <col:20>
| `-OptimizeNoneAttr 0x559402eb04a0 <col:30>
|-CXXMethodDecl 0x559402eb04f0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x559402eb0590 <col:20>
| `-OptimizeNoneAttr 0x559402eb05e8 <col:30>
|-CXXMethodDecl 0x559402eb0638 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x559402eb06f8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559402eb07c0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x559402eb0860 <col:20>
| `-OptimizeNoneAttr 0x559402eb08b8 <col:30>
|-CXXMethodDecl 0x559402eb0a08 <line:293:5, col:72> col:17 used set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x559402eb08f8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x559402eb0970 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402eb0b58 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x559402eb0ac8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402eb0c30 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x559402eb0cf0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x559402eb0d90 <col:20>
| `-OptimizeNoneAttr 0x559402eb0de8 <col:30>
|-CXXMethodDecl 0x559402eb0e38 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x559402eb0ed8 <col:20>
| `-OptimizeNoneAttr 0x559402eb0f30 <col:30>
|-CXXMethodDecl 0x559402eb0f80 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x559402eb1048 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x559402eb10e8 <col:20>
| `-OptimizeNoneAttr 0x559402eb1140 <col:30>
|-CXXMethodDecl 0x559402eb1188 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x559402eb12a8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x559402eb1418 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x559402eb1358 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x559402eb1508 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x559402eb15a8 <col:20>
| `-OptimizeNoneAttr 0x559402eb1600 <col:30>
|-CXXMethodDecl 0x559402eb1650 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x559402eb1710 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x559402eb1948 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x559402eb17c0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x559402eb1838 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559402eb19f8 <col:20>
| `-OptimizeNoneAttr 0x559402eb1a50 <col:30>
|-CXXMethodDecl 0x559402eb1af8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x559402eb1b98 <col:20>
| `-OptimizeNoneAttr 0x559402eb1bf0 <col:30>
|-CXXMethodDecl 0x559402eb1c40 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x559402eb1ce0 <col:20>
| `-OptimizeNoneAttr 0x559402eb1d38 <col:30>
|-CXXMethodDecl 0x559402eb1d80 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x559402eb1e20 <col:20>
| `-OptimizeNoneAttr 0x559402eb1e78 <col:30>
|-CXXMethodDecl 0x559402eb1f78 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x559402eb1eb0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x559402eb2020 <col:20>
| `-OptimizeNoneAttr 0x559402eb2078 <col:30>
|-CXXMethodDecl 0x559402eb2238 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x559402eb20b0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x559402eb2128 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559402eb22e8 <col:20>
| `-OptimizeNoneAttr 0x559402eb2340 <col:30>
|-CXXMethodDecl 0x559402eb23e8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x559402eb2508 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x559402eb2628 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x559402eb26c8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x559402eb26f0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x559402eb2818 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x559402eb28b8 <col:20>
| `-OptimizeNoneAttr 0x559402eb2910 <col:30>
|-CXXMethodDecl 0x559402eb29b8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x559402eb2a58 <col:20>
| `-OptimizeNoneAttr 0x559402eb2ab0 <col:30>
|-AccessSpecDecl 0x559402eb2ad8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x559402eb2b00 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x559402eb2c00 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x559402eb2c50 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402eb2be0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x559402eb2bc0 <col:14> 'int' 48
|-CXXMethodDecl 0x559402eb2cb8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x559402eb2d58 <col:20>
| `-OptimizeNoneAttr 0x559402eb2db0 <col:30>
|-CXXMethodDecl 0x559402eb2e28 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x559402eb2ec8 <col:20>
| `-OptimizeNoneAttr 0x559402eb2f20 <col:30>
|-CXXMethodDecl 0x559402eb2fe8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x559402eb2f58 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x559402eb3188 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x559402eb3328 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x559402eb3238 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x559402eb33d0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x559402eb34d0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559402eb3880 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb34b0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x559402eb3490 <col:9> 'int' 0
| |-EnumConstantDecl 0x559402eb3560 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559402eb3898 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb3540 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x559402eb3520 <col:14> 'int' 1
| |-EnumConstantDecl 0x559402eb35f0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559402eb38b0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb35d0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x559402eb35b0 <col:14> 'int' 2
| |-EnumConstantDecl 0x559402eb3680 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559402eb38c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb3660 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x559402eb3640 <col:14> 'int' 3
| |-EnumConstantDecl 0x559402eb3710 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559402eb38e0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb36f0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x559402eb36d0 <col:13> 'int' 4
| |-EnumConstantDecl 0x559402eb37a0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x559402eb38f8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb3780 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x559402eb3760 <col:13> 'int' 5
| `-EnumConstantDecl 0x559402eb3830 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x559402eb3910 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402eb3810 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x559402eb37f0 <col:14> 'int' 6
|-CXXMethodDecl 0x559402eb3978 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x559402eb3a18 <col:20>
| `-OptimizeNoneAttr 0x559402eb3a70 <col:30>
|-CXXMethodDecl 0x559402eb3b68 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x559402eb3aa8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x559402eb3c10 <col:20>
| `-OptimizeNoneAttr 0x559402eb3c68 <col:30>
|-CXXMethodDecl 0x559402eb3cd8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x559402eb3e00 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x559402eb3f78 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x559402eb3eb0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x559402eb4040 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x559402eb4108 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x559402eb4248 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x559402eb41b8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x559402eb42f0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x559402eb43f0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559402eb45f0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb43d0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x559402eb43b0 <col:23> 'int' 0
| |-EnumConstantDecl 0x559402eb4480 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559402eb4608 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb4460 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x559402eb4440 <col:45> 'int' 4
| |-EnumConstantDecl 0x559402eb4510 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x559402eb4620 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb44f0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x559402eb44d0 <col:24> 'int' 0
| `-EnumConstantDecl 0x559402eb45a0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x559402eb4638 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402eb4580 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x559402eb4560 <col:47> 'int' 16
|-CXXMethodDecl 0x559402eb4698 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x559402eb4808 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x559402eb4748 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x559402eb48b0 <col:20>
| `-OptimizeNoneAttr 0x559402eb4908 <col:30>
|-CXXMethodDecl 0x559402eb4958 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x559402ec82e0 <col:18, col:36>
|   `-ReturnStmt 0x559402ec82d0 <col:20, col:33>
|     `-ImplicitCastExpr 0x559402ec82b8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x559402ec8298 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x559402ec8268 <col:27> '<bound member function type>' ->xanno 0x559402eb29b8
|           `-CXXThisExpr 0x559402ec8258 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x559402eb4a50 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x559402ec83f0 <col:30, col:48>
|   `-ReturnStmt 0x559402ec83e0 <col:32, col:45>
|     `-ImplicitCastExpr 0x559402ec83c8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x559402ec83a8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x559402ec8378 <col:39> '<bound member function type>' ->xanno 0x559402eb2818
|           `-CXXThisExpr 0x559402ec8368 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x559402eb4b38 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x559402ec8588 <col:24, col:50>
|   `-ReturnStmt 0x559402ec8578 <col:26, col:47>
|     `-UnaryOperator 0x559402ec8560 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559402ec8540 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x559402ec8528 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559402ec84d8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x559402ebd7f8
|         |   `-CXXMemberCallExpr 0x559402ec84b8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x559402ec8488 <col:34> '<bound member function type>' ->xanno 0x559402eb29b8
|         |       `-CXXThisExpr 0x559402ec8478 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x559402ec8508 <col:46> 'int' 0
|-CXXMethodDecl 0x559402eb4c40 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x559402ec8758 <col:36, col:62>
|   `-ReturnStmt 0x559402ec8748 <col:38, col:59>
|     `-UnaryOperator 0x559402ec8730 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559402ec8710 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559402ec86f8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559402ec8670 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x559402ebd7f8
|         |   `-CXXMemberCallExpr 0x559402ec8650 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559402ec8620 <col:46> '<bound member function type>' ->xanno 0x559402eb2818
|         |       `-CXXThisExpr 0x559402ec8610 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559402ec86a0 <col:58> 'int' 0
|-CXXMethodDecl 0x559402eb4d58 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x559402ec88f0 <col:26, col:53>
|   `-ReturnStmt 0x559402ec88e0 <col:28, col:50>
|     `-UnaryOperator 0x559402ec88c8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559402ec88a8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x559402ec8890 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559402ec8840 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x559402ebdaf8
|         |   `-CXXMemberCallExpr 0x559402ec8820 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x559402ec87f0 <col:36> '<bound member function type>' ->xanno 0x559402eb29b8
|         |       `-CXXThisExpr 0x559402ec87e0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x559402ec8870 <col:49> 'int' 0
|-CXXMethodDecl 0x559402eb4e78 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x559402ec8ac8 <col:38, col:65>
|   `-ReturnStmt 0x559402ec8ab8 <col:40, col:62>
|     `-UnaryOperator 0x559402ec8aa0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x559402ec8a80 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x559402ec8a68 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559402ec89d8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x559402ebdaf8
|         |   `-CXXMemberCallExpr 0x559402ec89b8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559402ec8988 <col:48> '<bound member function type>' ->xanno 0x559402eb2818
|         |       `-CXXThisExpr 0x559402ec8978 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x559402ec8a08 <col:61> 'int' 0
|-CXXMethodDecl 0x559402eb5028 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x559402eb4f30 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x559402ec9198 <col:34, line:463:5>
|   |-ParenExpr 0x559402ec8fe0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x559402ec8fb0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x559402ec8c18 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ec8be8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ec8b38 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ec8b20 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ec8ae0 <col:23> 'int' lvalue ParmVar 0x559402eb4f30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ec8b00 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ec8bc8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ec8b98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ec8b58 <col:33> 'int' lvalue ParmVar 0x559402eb4f30 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559402ec8bb0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559402ec8b78 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559402ec8c78 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ec8c58 <col:56> 'int' 0
|   |   `-CallExpr 0x559402ec8f10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x559402ec8ef8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ec8ed8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ec8f50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec8d68 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x559402ec8f68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec8d98 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ec8f80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ec8dd0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x559402ec8f98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ec8ec0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ec8ea8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ec8e68 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x559402ec9188 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x559402ec9170 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x559402ec9150 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x559402ec9120 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x559402ec90d0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x559402ebd7f8
|         |   `-CXXMemberCallExpr 0x559402ec90b0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x559402ec9080 <col:9> '<bound member function type>' ->xanno 0x559402eb2818
|         |       `-CXXThisExpr 0x559402ec9070 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x559402ec9138 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x559402ec9100 <col:21> 'int' lvalue ParmVar 0x559402eb4f30 'i' 'int'
|-CXXMethodDecl 0x559402eb5278 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x559402eb50e8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x559402eb5160 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x559402ec9828 <col:40, line:472:5>
|   |-ParenExpr 0x559402ec9640 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x559402ec9610 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x559402ec92f0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ec92c0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ec9210 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ec91f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ec91b8 <col:23> 'int' lvalue ParmVar 0x559402eb50e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ec91d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ec92a0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ec9270 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ec9230 <col:33> 'int' lvalue ParmVar 0x559402eb50e8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x559402ec9288 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x559402ec9250 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x559402ec9350 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ec9330 <col:56> 'int' 0
|   |   `-CallExpr 0x559402ec9570 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x559402ec9558 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ec9538 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ec95b0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec93c0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x559402ec95c8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec93f0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ec95e0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ec9428 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x559402ec95f8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ec9520 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ec9508 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ec94c8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x559402ec9808 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x559402ec97b0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x559402ec9780 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x559402ec9730 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x559402ebd7f8
|     | |   `-CXXMemberCallExpr 0x559402ec9710 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x559402ec96e0 <col:2> '<bound member function type>' ->xanno 0x559402eb29b8
|     | |       `-CXXThisExpr 0x559402ec96d0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x559402ec9798 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x559402ec9760 <col:14> 'int' lvalue ParmVar 0x559402eb50e8 'i' 'int'
|     `-ImplicitCastExpr 0x559402ec97f0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x559402ec97d0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x559402eb5160 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x559402eb5438 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x559402eb5340 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559402ec9fa8 <col:36, line:485:5>
|   |-ParenExpr 0x559402ec9d10 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ec9ce0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402ec99c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ec9990 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ec98a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ec9888 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ec9848 <col:23> 'int' lvalue ParmVar 0x559402eb5340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ec9868 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ec9970 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ec9958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ec98c0 <col:33> 'int' lvalue ParmVar 0x559402eb5340 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ec9938 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ec9920 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ec98e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402ec9900 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559402ec9a20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ec9a00 <col:60> 'int' 0
|   |   `-CallExpr 0x559402ec9c40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402ec9c28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ec9c08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ec9c80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec9a90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559402ec9c98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ec9ac8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ec9cb0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ec9b00 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x559402ec9cc8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ec9bf0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ec9bd8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ec9b98 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x559402ec9f98 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x559402ec9f80 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x559402ec9f68 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559402ec9f38 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x559402ec9ed8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559402ec9ea8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559402ec9e20 <col:61, col:70> 'char const[48]' lvalue ->c 0x559402ebd6d0
|             |   `-CXXMemberCallExpr 0x559402ec9e00 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559402ec9dd0 <col:61> '<bound member function type>' ->xanno 0x559402eb2818
|             |       `-CXXThisExpr 0x559402ec9dc0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559402ec9ec0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559402ec9e50 <col:74> 'int' lvalue ParmVar 0x559402eb5340 'i' 'int'
|-CXXMethodDecl 0x559402eb5688 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x559402eb54f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559402eb5570 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x559402eca6f8 <col:42, line:500:5>
|   |-ParenExpr 0x559402eca490 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402eca460 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402eca140 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402eca110 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402eca020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402eca008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ec9fc8 <col:23> 'int' lvalue ParmVar 0x559402eb54f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ec9fe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402eca0f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402eca0d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402eca040 <col:33> 'int' lvalue ParmVar 0x559402eb54f8 'i' 'int'
|   |   |     `-BinaryOperator 0x559402eca0b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402eca0a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402eca060 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402eca080 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559402eca1a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402eca180 <col:60> 'int' 0
|   |   `-CallExpr 0x559402eca3c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402eca3a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402eca388 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402eca400 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402eca210 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559402eca418 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402eca248 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402eca430 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402eca280 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x559402eca448 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402eca370 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402eca358 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402eca318 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x559402eca6d8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x559402eca688 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559402eca658 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x559402eca600 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559402eca5d0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559402eca580 <col:48, col:57> 'char [48]' lvalue ->c 0x559402ebd6d0
|     |     |   `-CXXMemberCallExpr 0x559402eca560 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559402eca530 <col:48> '<bound member function type>' ->xanno 0x559402eb29b8
|     |     |       `-CXXThisExpr 0x559402eca520 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559402eca5e8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559402eca5b0 <col:61> 'int' lvalue ParmVar 0x559402eb54f8 'i' 'int'
|     `-ImplicitCastExpr 0x559402eca6c0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x559402eca6a0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x559402eb5570 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x559402eb5848 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x559402eb5750 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x559402ecae58 <col:35, line:513:5>
|   |-ParenExpr 0x559402ecab68 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ecab38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402eca890 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402eca860 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402eca770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402eca758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402eca718 <col:23> 'int' lvalue ParmVar 0x559402eb5750 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402eca738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402eca840 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402eca828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402eca790 <col:33> 'int' lvalue ParmVar 0x559402eb5750 'i' 'int'
|   |   |     `-BinaryOperator 0x559402eca808 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402eca7f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402eca7b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402eca7d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559402eca8f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402eca8d0 <col:60> 'int' 0
|   |   `-CallExpr 0x559402ecaa98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402ecaa80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ecaa60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ecaad8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402eca960 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559402ecaaf0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402eca998 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecab08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402eca9d0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x559402ecab20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ecaa48 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ecaa30 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402eca9f0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x559402ecae48 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x559402ecae30 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x559402ecae18 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559402ecade8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x559402ecad60 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559402ecad30 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559402ecace0 <col:60, col:69> 'char const[48]' lvalue ->c 0x559402ebd6d0
|             |   `-CXXMemberCallExpr 0x559402ecacc0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559402ecac90 <col:60> '<bound member function type>' ->xanno 0x559402eb2818
|             |       `-CXXThisExpr 0x559402ecac80 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559402ecad48 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559402ecad10 <col:73> 'int' lvalue ParmVar 0x559402eb5750 'i' 'int'
|-CXXMethodDecl 0x559402eb5a98 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x559402eb5908 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559402eb5980 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x559402ecb578 <col:41, line:528:5>
|   |-ParenExpr 0x559402ecb300 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ecb2d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402ecaff0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ecafc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ecaed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ecaeb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ecae78 <col:23> 'int' lvalue ParmVar 0x559402eb5908 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ecae98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ecafa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ecaf88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ecaef0 <col:33> 'int' lvalue ParmVar 0x559402eb5908 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ecaf68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ecaf50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ecaf10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402ecaf30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x559402ecb050 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ecb030 <col:60> 'int' 0
|   |   `-CallExpr 0x559402ecb230 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402ecb218 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ecb1f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ecb270 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecb0c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x559402ecb288 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecb0f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecb2a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ecb130 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x559402ecb2b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ecb1e0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ecb1c8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ecb188 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x559402ecb558 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x559402ecb508 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559402ecb4d8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x559402ecb480 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559402ecb440 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559402ecb3f0 <col:47, col:56> 'char [48]' lvalue ->c 0x559402ebd6d0
|     |     |   `-CXXMemberCallExpr 0x559402ecb3d0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559402ecb3a0 <col:47> '<bound member function type>' ->xanno 0x559402eb29b8
|     |     |       `-CXXThisExpr 0x559402ecb390 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559402ecb458 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559402ecb420 <col:60> 'int' lvalue ParmVar 0x559402eb5908 'i' 'int'
|     `-ImplicitCastExpr 0x559402ecb540 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x559402ecb520 <col:65> 'int16_t':'short' lvalue ParmVar 0x559402eb5980 'x' 'int16_t':'short'
|-CXXMethodDecl 0x559402eb5c58 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x559402eb5b60 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559402ecbc48 <col:36, line:541:5>
|   |-ParenExpr 0x559402ecb9e8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ecb9b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402ecb710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ecb6e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ecb5f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ecb5d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ecb598 <col:23> 'int' lvalue ParmVar 0x559402eb5b60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ecb5b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ecb6c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ecb6a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ecb610 <col:33> 'int' lvalue ParmVar 0x559402eb5b60 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ecb688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ecb670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ecb630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402ecb650 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559402ecb770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ecb750 <col:60> 'int' 0
|   |   `-CallExpr 0x559402ecb918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402ecb900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ecb8e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ecb958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecb7e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559402ecb970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecb818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecb988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ecb850 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x559402ecb9a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ecb8c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ecb8b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ecb870 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x559402ecbc38 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x559402ecbc20 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x559402ecbc08 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559402ecbbd8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x559402ecbb80 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559402ecbb50 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559402ecbb00 <col:61, col:70> 'char const[48]' lvalue ->c 0x559402ebd6d0
|             |   `-CXXMemberCallExpr 0x559402ecbae0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559402ecbab0 <col:61> '<bound member function type>' ->xanno 0x559402eb2818
|             |       `-CXXThisExpr 0x559402ecbaa0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559402ecbb68 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559402ecbb30 <col:74> 'int' lvalue ParmVar 0x559402eb5b60 'i' 'int'
|-CXXMethodDecl 0x559402eb5e28 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x559402eb5d18 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x559402eb5d90 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x559402eb5ed8 <col:20>
| `-OptimizeNoneAttr 0x559402eb5f30 <col:30>
|-CXXMethodDecl 0x559402eb6068 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x559402eb5f70 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x559402ecc318 <col:35, line:562:5>
|   |-ParenExpr 0x559402ecc0b8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ecc088 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402ecbde0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ecbdb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ecbcc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ecbca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ecbc68 <col:23> 'int' lvalue ParmVar 0x559402eb5f70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ecbc88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ecbd90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ecbd78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ecbce0 <col:33> 'int' lvalue ParmVar 0x559402eb5f70 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ecbd58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ecbd40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ecbd00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402ecbd20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559402ecbe40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ecbe20 <col:60> 'int' 0
|   |   `-CallExpr 0x559402ecbfe8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402ecbfd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ecbfb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ecc028 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecbeb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559402ecc040 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecbee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecc058 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ecbf20 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x559402ecc070 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ecbf98 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ecbf80 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ecbf40 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x559402ecc308 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x559402ecc2f0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x559402ecc2d8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559402ecc2a8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x559402ecc250 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x559402ecc220 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559402ecc1d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x559402ebd6d0
|             |   `-CXXMemberCallExpr 0x559402ecc1b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559402ecc180 <col:60> '<bound member function type>' ->xanno 0x559402eb2818
|             |       `-CXXThisExpr 0x559402ecc170 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559402ecc238 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559402ecc200 <col:73> 'int' lvalue ParmVar 0x559402eb5f70 'i' 'int'
|-CXXMethodDecl 0x559402eb6278 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x559402eb6128 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559402eb61a0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x559402ecc9f8 <col:41, line:577:5>
|   |-ParenExpr 0x559402ecc788 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ecc758 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402ecc4b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ecc480 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ecc390 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ecc378 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ecc338 <col:23> 'int' lvalue ParmVar 0x559402eb6128 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ecc358 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ecc460 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ecc448 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ecc3b0 <col:33> 'int' lvalue ParmVar 0x559402eb6128 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ecc428 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ecc410 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ecc3d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402ecc3f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x559402ecc510 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ecc4f0 <col:60> 'int' 0
|   |   `-CallExpr 0x559402ecc6b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402ecc6a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ecc680 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ecc6f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecc580 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x559402ecc710 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecc5b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecc728 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ecc5f0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x559402ecc740 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ecc668 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ecc650 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ecc610 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x559402ecc9d8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x559402ecc988 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559402ecc958 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x559402ecc8f8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559402ecc8c8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559402ecc878 <col:47, col:56> 'char [48]' lvalue ->c 0x559402ebd6d0
|     |     |   `-CXXMemberCallExpr 0x559402ecc858 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559402ecc828 <col:47> '<bound member function type>' ->xanno 0x559402eb29b8
|     |     |       `-CXXThisExpr 0x559402ecc818 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559402ecc8e0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559402ecc8a8 <col:60> 'int' lvalue ParmVar 0x559402eb6128 'i' 'int'
|     `-ImplicitCastExpr 0x559402ecc9c0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x559402ecc9a0 <col:65> 'int32_t':'int' lvalue ParmVar 0x559402eb61a0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x559402eb6438 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x559402eb6340 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x559402ecd128 <col:36, line:591:5>
|   |-ParenExpr 0x559402ecce68 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ecce38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402eccb90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402eccb60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ecca70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ecca58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ecca18 <col:23> 'int' lvalue ParmVar 0x559402eb6340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ecca38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402eccb40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402eccb28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ecca90 <col:33> 'int' lvalue ParmVar 0x559402eb6340 'i' 'int'
|   |   |     `-BinaryOperator 0x559402eccb08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402eccaf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402eccab0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402eccad0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559402eccbf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402eccbd0 <col:60> 'int' 0
|   |   `-CallExpr 0x559402eccd98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402eccd80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402eccd60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402eccdd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402eccc60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x559402eccdf0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402eccc98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecce08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ecccd0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x559402ecce20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402eccd48 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402eccd30 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ecccf0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x559402ecd118 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x559402ecd100 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x559402ecd0e8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559402ecd0b8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x559402ecd030 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x559402ecd000 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559402eccfb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x559402ebd6d0
|             |   `-CXXMemberCallExpr 0x559402eccf90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559402eccf60 <col:61> '<bound member function type>' ->xanno 0x559402eb2818
|             |       `-CXXThisExpr 0x559402eccf50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559402ecd018 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559402eccfe0 <col:74> 'int' lvalue ParmVar 0x559402eb6340 'i' 'int'
|-CXXMethodDecl 0x559402eb6688 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x559402eb64f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559402eb6570 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x559402ecd808 <col:42, line:606:5>
|   |-ParenExpr 0x559402ecd598 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x559402ecd568 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x559402ecd2c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ecd290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ecd1a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ecd188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ecd148 <col:23> 'int' lvalue ParmVar 0x559402eb64f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ecd168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ecd270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x559402ecd258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ecd1c0 <col:33> 'int' lvalue ParmVar 0x559402eb64f8 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ecd238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ecd220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ecd1e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x559402ecd200 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x559402ecd320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ecd300 <col:60> 'int' 0
|   |   `-CallExpr 0x559402ecd4c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x559402ecd4b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ecd490 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ecd508 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecd390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x559402ecd520 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecd3c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecd538 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ecd400 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x559402ecd550 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ecd478 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ecd460 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ecd420 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x559402ecd7e8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x559402ecd798 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559402ecd768 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x559402ecd708 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559402ecd6d8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559402ecd688 <col:48, col:57> 'char [48]' lvalue ->c 0x559402ebd6d0
|     |     |   `-CXXMemberCallExpr 0x559402ecd668 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559402ecd638 <col:48> '<bound member function type>' ->xanno 0x559402eb29b8
|     |     |       `-CXXThisExpr 0x559402ecd628 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559402ecd6f0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559402ecd6b8 <col:61> 'int' lvalue ParmVar 0x559402eb64f8 'i' 'int'
|     `-ImplicitCastExpr 0x559402ecd7d0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x559402ecd7b0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x559402eb6570 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x559402eb6820 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x559402eb6750 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x559402ece078 <col:33, line:620:5>
|   |-ParenExpr 0x559402ecddf0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x559402ecddc0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x559402ecda10 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ecd9e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ecd880 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ecd868 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ecd828 <col:23> 'int' lvalue ParmVar 0x559402eb6750 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ecd848 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ecd9c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x559402ecd9a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ecd8a0 <col:33> 'int' lvalue ParmVar 0x559402eb6750 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ecd988 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ecd970 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ecd8c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x559402ecd948 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x559402ecd930 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x559402ecd8f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x559402ecda70 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ecda50 <col:79> 'int' 0
|   |   `-CallExpr 0x559402ecdd20 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x559402ecdd08 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ecdce8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ecdd60 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecdb58 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x559402ecdd78 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ecdba0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ecdd90 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ecdbd8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x559402ecdda8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ecdcd0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ecdcb8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ecdc78 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x559402ece068 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x559402ece050 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x559402ece038 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x559402ece008 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x559402ecdf80 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x559402ecdf50 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x559402ecdf00 <col:67, col:76> 'char const[48]' lvalue ->c 0x559402ebd6d0
|             |   `-CXXMemberCallExpr 0x559402ecdee0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x559402ecdeb0 <col:67> '<bound member function type>' ->xanno 0x559402eb2818
|             |       `-CXXThisExpr 0x559402ecdea0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x559402ecdf68 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x559402ecdf30 <col:80> 'int' lvalue ParmVar 0x559402eb6750 'i' 'int'
|-CXXMethodDecl 0x559402eb6a38 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x559402eb68e0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x559402eb6960 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x559402ece8a0 <col:45, line:635:5>
|   |-ParenExpr 0x559402ece5e8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x559402ece5b8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x559402ece280 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x559402ece250 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x559402ece0f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x559402ece0d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x559402ece098 <col:23> 'int' lvalue ParmVar 0x559402eb68e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x559402ece0b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x559402ece230 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x559402ece218 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x559402ece110 <col:33> 'int' lvalue ParmVar 0x559402eb68e0 'i' 'int'
|   |   |     `-BinaryOperator 0x559402ece1f8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x559402ece1e0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x559402ece130 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x559402eb2c00 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x559402ece1b8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x559402ece1a0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x559402ece168 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x559402ece2e0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x559402ece2c0 <col:79> 'int' 0
|   |   `-CallExpr 0x559402ece518 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x559402ece500 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402ece4e0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x559402a1f2b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x559402ece558 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ece350 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x559402ece570 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x559402ece398 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x559402ece588 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x559402ece3d0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x559402ece5a0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x559402ece4c8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x559402ece4b0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x559402ece468 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x559402ece880 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x559402ece7e8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x559402ece7b8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x559402ece758 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x559402ece728 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x559402ece6d8 <col:54, col:63> 'char [48]' lvalue ->c 0x559402ebd6d0
|     |     |   `-CXXMemberCallExpr 0x559402ece6b8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x559402ece688 <col:54> '<bound member function type>' ->xanno 0x559402eb29b8
|     |     |       `-CXXThisExpr 0x559402ece678 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x559402ece740 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x559402ece708 <col:67> 'int' lvalue ParmVar 0x559402eb68e0 'i' 'int'
|     `-CXXConstCastExpr 0x559402ece850 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x559402ece838 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x559402ece800 <col:91> 'const void *' lvalue ParmVar 0x559402eb6960 'x' 'const void *'
|-CXXMethodDecl 0x559402eb6b08 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x559402ece928 <col:34, line:640:5>
|   `-ReturnStmt 0x559402ece918 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x559402ece900 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x559402ece8d0 <col:16> 'Packet *' lvalue ->_data_packet 0x559402ebe288
|         `-CXXThisExpr 0x559402ece8c0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x559402eb6c48 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x559402eb6bb8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x559402ec79e8 <col:46> 'bool' true
|-CXXMethodDecl 0x559402eb6dc8 <line:644:5, col:48> col:17 used copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x559402eb6d00 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x559402eb6e70 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x559402eb7620 <line:660:22> "" ""
| |-EnumConstantDecl 0x559402eb6f70 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb7690 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb6f50 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x559402eb6f30 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x559402eac0d0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x559402eb7000 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb76a8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb6fe0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x559402eb6fc0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x559402eac160 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x559402eb7090 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb76c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb7070 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x559402eb7050 <col:21> 'int' 0
| |-EnumConstantDecl 0x559402eb7120 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb76d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb7100 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x559402eb70e0 <col:19> 'int' 16
| |-EnumConstantDecl 0x559402eb71b0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb76f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb7190 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x559402eb7170 <col:21> 'int' 16
| |-EnumConstantDecl 0x559402eb7240 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb7708 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb7220 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x559402eb7200 <col:19> 'int' 32
| |-EnumConstantDecl 0x559402eb72d0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb7720 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb72b0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x559402eb7290 <col:19> 'int' EnumConstant 0x559402eb7120 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x559402eb7360 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb7738 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb7340 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x559402eb7320 <col:19> 'int' EnumConstant 0x559402eb7240 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x559402eb7430 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb7750 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb7410 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x559402eb73f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x559402eb73b0 <col:23> 'int' EnumConstant 0x559402eb7360 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x559402eb73d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x559402eb7500 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x559402eb7768 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402eb74e0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x559402eb74c0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x559402eb7480 <col:23> 'int' EnumConstant 0x559402eb7360 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x559402eb74a0 <col:40> 'int' 4
| `-EnumConstantDecl 0x559402eb75d0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x559402eb7780 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402eb75b0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x559402eb7590 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x559402eb7550 <col:23> 'int' EnumConstant 0x559402eb7360 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x559402eb7570 <col:40> 'int' 8
|-CXXMethodDecl 0x559402eb77c0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x559402eb7860 <col:68> "" ""
|-CXXMethodDecl 0x559402eb78f8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x559402eb7998 <col:45> "" ""
|-CXXMethodDecl 0x559402eb7a30 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x559402eb7ad0 <col:57> "" ""
|-CXXMethodDecl 0x559402eb7b68 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x559402eb7c08 <col:45> "" ""
|-CXXMethodDecl 0x559402eb7ca0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x559402eb7d40 <col:57> "" ""
|-CXXMethodDecl 0x559402eb7dd0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x559402eb7e70 <col:51> "" ""
|-CXXMethodDecl 0x559402eb7f00 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x559402eb7fa0 <col:63> "" ""
|-CXXMethodDecl 0x559402eb8030 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x559402eb80d0 <col:53> "" ""
|-CXXMethodDecl 0x559402eb8160 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x559402eb8200 <col:65> "" ""
|-CXXMethodDecl 0x559402eb8318 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x559402eb8288 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x559402eb83c0 <col:61> "" ""
|-CXXMethodDecl 0x559402eb8558 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x559402eb8448 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x559402eb84c0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x559402eb8608 <col:67> "" ""
|-CXXMethodDecl 0x559402eb8720 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x559402eb8690 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559402eb87c8 <col:63> "" ""
|-CXXMethodDecl 0x559402eb8960 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x559402eb8850 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559402eb88c8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x559402eb8a10 <col:69> "" ""
|-CXXMethodDecl 0x559402eb8b28 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x559402eb8a98 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559402eb8bd0 <col:63> "" ""
|-CXXMethodDecl 0x559402ebb2a8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x559402ebb198 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559402ebb210 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559402ebb358 <col:69> "" ""
|-CXXMethodDecl 0x559402ebb470 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x559402ebb3e0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x559402ebb518 <col:62> "" ""
|-CXXMethodDecl 0x559402ebb6b0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x559402ebb5a0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559402ebb618 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x559402ebb760 <col:68> "" ""
|-CXXMethodDecl 0x559402ebb878 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x559402ebb7e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x559402ebb920 <col:63> "" ""
|-CXXMethodDecl 0x559402ebbab8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x559402ebb9a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x559402ebba20 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x559402ebbb68 <col:69> "" ""
|-CXXMethodDecl 0x559402ebbbf8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x559402ebbc98 <col:64> "" ""
|-CXXMethodDecl 0x559402ebbd28 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x559402ebbdc8 <col:52> "" ""
|-CXXMethodDecl 0x559402ebbe58 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x559402ebbef8 <col:67> "" ""
|-CXXMethodDecl 0x559402ebbf88 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x559402ebc028 <col:55> "" ""
|-CXXMethodDecl 0x559402ebc140 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x559402ebc0b0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559402ebc1e8 <col:58> "" ""
|-CXXMethodDecl 0x559402ebc380 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x559402ebc270 <col:33> col:36 'int'
| |-ParmVarDecl 0x559402ebc2e8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x559402ebc430 <col:62> "" ""
|-CXXMethodDecl 0x559402ebc548 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x559402ebc4b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559402ebc5f0 <col:58> "" ""
|-CXXMethodDecl 0x559402ebc788 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x559402ebc678 <col:33> col:36 'int'
| |-ParmVarDecl 0x559402ebc6f0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x559402ebc838 <col:62> "" ""
|-CXXMethodDecl 0x559402ebc950 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x559402ebc8c0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x559402ebc9f8 <col:60> "" ""
|-CXXMethodDecl 0x559402ebcb90 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x559402ebca80 <col:34> col:37 'int'
| |-ParmVarDecl 0x559402ebcaf8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x559402ebcc40 <col:64> "" ""
|-CXXMethodDecl 0x559402ebcd58 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x559402ebccc8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x559402ebce00 <col:58> "" ""
|-CXXMethodDecl 0x559402ebcf98 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x559402ebce88 <col:33> col:36 'int'
| |-ParmVarDecl 0x559402ebcf00 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x559402ebd048 <col:62> "" ""
|-CXXMethodDecl 0x559402ebd160 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x559402ebd0d0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x559402ebd208 <col:59> "" ""
|-CXXMethodDecl 0x559402ebd3a0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x559402ebd290 <col:33> col:36 'int'
| |-ParmVarDecl 0x559402ebd308 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559402ebd450 <col:63> "" ""
|-AccessSpecDecl 0x559402ebd4c0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x559402ebd4e8 prev 0x559402eb26f0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559402ebd5e0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x559402ebd6d0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x559402ebd7f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x559402ebd978 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x559402ebdaf8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x559402ebdc78 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x559402eceaa8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x559402ecf318 <col:11>
| |-CXXDestructorDecl 0x559402eceb80 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x559402ececb8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x559402ececb8
| | `-ParmVarDecl 0x559402ecedc8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x559402ecee68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559402ecee68
| | `-ParmVarDecl 0x559402ecef78 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x559402ed1d38 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559402ed1e48 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x559402ed20c8 <col:11>
| |   `-ReturnStmt 0x559402ed20b8 <col:11>
| |     `-UnaryOperator 0x559402ed20a0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x559402ed2090 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x559402ed1eb8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x559402ed1eb8
|   `-ParmVarDecl 0x559402ed1fc8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x559402ebdce0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559402ebddf8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x559402ebde98 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x559402ebdf00 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x559402ebdf68 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x559402ebdfd0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x559402ebe030 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x559402ebe0f0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x559402ebe150 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x559402ebe1b0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x559402ece9b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x559402ebde98 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x559402ecf328 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x559402ecf380 <col:12>
| |-CXXConstructorDecl 0x559402ecefe8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x559402ecefe8
| | `-ParmVarDecl 0x559402ecf0f8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x559402ecf198 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x559402ecf198
| | `-ParmVarDecl 0x559402ecf2a8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x559402ed1420 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x559402ebe228 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x559402ebe288 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x559402ebe2f0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x559402ebe358 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x559402ebe3c0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x559402ebe428 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x559402ebe488 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x559402ebe4e8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x559402ebe550 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x559402ebe5d8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x559402ebe228 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x559402ece950 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x559402ebe488 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x559402ecf390 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x559402ecf3f0 <col:21, line:755:5>
|-CXXConstructorDecl 0x559402ebe778 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x559402ebe6b8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x559402ebe870 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x559402ebea58 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x559402ebe960 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x559402ebed28 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x559402ebeb10 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559402ebeb88 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559402ebec00 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ebef48 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x559402ebedf8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x559402ebee70 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x559402ec7528 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x559402ebf008 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x559402ebf080 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x559402ebf0f8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x559402ec7680 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x559402ec75f0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ec77c8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x559402ec7738 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x559402ec78c0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402ecf490 prev 0x559402eabd50 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x559402ecf5c8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x559402ecf658 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x559402ecf700 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x559402ecf7a0 <col:20>
| `-OptimizeNoneAttr 0x559402ecf7f8 <col:30>
|-CXXMethodDecl 0x559402ecf848 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x559402ecf8e8 <col:20>
| `-OptimizeNoneAttr 0x559402ecf940 <col:30>
|-CXXMethodDecl 0x559402ecf990 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x559402ecfa58 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x559402ecfb20 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x559402ecfc38 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x559402ecfd00 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x559402ecfda0 <col:20>
| `-OptimizeNoneAttr 0x559402ecfdf8 <col:30>
|-CXXMethodDecl 0x559402ecfe68 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x559402ecff08 <col:20>
| `-OptimizeNoneAttr 0x559402ecff60 <col:30>
|-CXXMethodDecl 0x559402ed0008 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x559402ed00a8 <col:20>
| `-OptimizeNoneAttr 0x559402ed0100 <col:30>
|-CXXMethodDecl 0x559402ed0150 <line:789:5, col:46> col:27 used transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x559402ed0268 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x559402ed0388 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x559402ed04a8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x559402ed0570 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x559402ed0610 <col:62> "" ""
|-AccessSpecDecl 0x559402ed0680 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x559402ed06e0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x559402ed12d8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x559402ed1500 <col:29, col:31>
|-CXXMethodDecl 0x559402ed07a8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x559402ed08e8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x559402ed0858 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x559402ed09e0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x559402ed1510 <col:23, col:25>
|-CXXMethodDecl 0x559402ed0b98 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x559402ed0ad0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x559402ed0e68 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x559402ed0c50 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x559402ed0cc8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x559402ed0d40 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402ed0ff8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x559402ed0f30 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x559402ed10f0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x559402ed1158 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x559402ed1158
  `-ParmVarDecl 0x559402ed1268 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402e7d780 prev 0x559402e745c0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402e7d878 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x559402e7d918 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x559402e846e0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559402e84ac8 <col:11>
|-CXXConstructorDecl 0x559402e847c0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559402e848a8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x559402e85210 <col:11>
|-CXXConstructorDecl 0x559402e84948 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559402e84a58 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x559402e86a68 <col:11>
|-CXXDestructorDecl 0x559402e85d78 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559402b8c708 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x559402b8c818 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x559402b8d0e0 <col:11>
|   `-ReturnStmt 0x559402b8d0d0 <col:11>
|     `-UnaryOperator 0x559402b8d0b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402b8d0a8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x559402b8c888 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x559402b8c888
  `-ParmVarDecl 0x559402b8c998 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402e73778 prev 0x559402e73488 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402e73870 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x559402e73900 <col:19, col:25> col:19 public
|-TypedefDecl 0x559402e73938 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x559402ad88e0 'int32_t' sugar
|   |-Typedef 0x5594029ec328 'int32_t'
|   `-TypedefType 0x5594029c5510 '__int32_t' sugar
|     |-Typedef 0x5594029c5128 '__int32_t'
|     `-BuiltinType 0x559402983580 'int'
|-TypedefDecl 0x559402e739a0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x559402ad8aa0 'int64_t' sugar
|   |-Typedef 0x5594029ec390 'int64_t'
|   `-TypedefType 0x5594029c5630 '__int64_t' sugar
|     |-Typedef 0x5594029c5208 '__int64_t'
|     `-BuiltinType 0x5594029835a0 'long'
|-EnumDecl 0x559402e739f8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x559402e73b70 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x559402e73b50 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x559402e73b28 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x559402e73b10 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x559402e73ae0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x559402e73c68 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x559402e73c48 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x559402e73c20 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x559402e73c08 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x559402e73be0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x559402e73bc0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x559402e73cb8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x559402e73dc0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e74310 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e73da0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x559402e73d80 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x559402e73e50 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e74328 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e73e30 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x559402e73e10 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x559402e73ee0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e74340 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e73ec0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x559402e73ea0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x559402e73f70 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e74358 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e73f50 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x559402e73f30 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x559402e74000 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e74370 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e73fe0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x559402e73fc0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x559402e74090 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e74388 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e74070 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x559402e74050 <col:24> 'int' 1000
| |-EnumConstantDecl 0x559402e74120 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e743a0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e74100 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x559402e740e0 <col:26> 'int' EnumConstant 0x559402e73dc0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x559402e741f0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x559402e743b8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e741d0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x559402e741b0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x559402e74170 <col:27> 'int' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x559402e74190 <col:44> 'int' EnumConstant 0x559402e74090 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x559402e742c0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x559402e743d0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402e742a0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x559402e74280 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x559402e74240 <col:27> 'int' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x559402e74260 <col:44> 'int' EnumConstant 0x559402e73f70 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x559402e743e8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x559402e744f0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x559402e74540 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402e744d0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x559402e744b0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x559402e74568 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x559402ad8510 'uninitialized_type'
|   `-CXXRecord 0x559402ad8478 'uninitialized_type'
|-CXXRecordDecl 0x559402e745c0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x559402e746d0 <line:174:5, line:176:5> line:174:12 Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e84ad8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559402e84bf8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x559402e84bb0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x559402e84b40 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e84b30 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x559402e84b70 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x559402e84be0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x559402e84b90 <col:19> 'int' 0
|-CXXConstructorDecl 0x559402e74918 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x559402e74790 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x559402e74808 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x559402e80410 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559402e803f0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e84c10 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559402e84d60 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x559402e84ce8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x559402e84c78 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e84c68 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x559402e84d30 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x559402e84d18 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x559402e84ca8 <col:16> 'long' lvalue ParmVar 0x559402e74790 'sec' 'long'
|     `-ImplicitCastExpr 0x559402e84d48 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x559402e84cc8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e74808 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x559402e74b78 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x559402e749e8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x559402e74a60 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x559402e80448 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559402e80428 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e84d78 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559402e84eb0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x559402e84e50 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x559402e84de0 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e84dd0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x559402e84e80 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x559402e84e10 <col:16> 'int' lvalue ParmVar 0x559402e749e8 'sec' 'int'
|     `-ImplicitCastExpr 0x559402e84e98 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x559402e84e30 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e74a60 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x559402e74dd8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x559402e74c48 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x559402e74cc0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x559402e80480 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559402e80460 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e84ec8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559402e85018 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x559402e84fa0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x559402e84f30 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e84f20 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x559402e84fe8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x559402e84fd0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x559402e84f60 <col:16> 'unsigned long' lvalue ParmVar 0x559402e74c48 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x559402e85000 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x559402e84f80 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e74cc0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x559402e75f70 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x559402e74ea8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x559402e74f20 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x559402e804b8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559402e80498 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e85030 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559402e85180 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x559402e85108 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x559402e85098 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e85088 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x559402e85150 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x559402e85138 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x559402e850c8 <col:16> 'unsigned int' lvalue ParmVar 0x559402e74ea8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x559402e85168 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x559402e850e8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e74f20 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x559402e760d0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x559402e76040 <col:31> col:37 'double'
|-CXXConstructorDecl 0x559402e76268 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x559402e761a8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x559402e76498 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x559402e763a0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x559402e76648 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x559402e76588 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e85220 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x559402e85198 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x559402e76588 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x559402e85280 <col:19, line:214:5>
|-CXXConstructorDecl 0x559402e76818 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x559402e76758 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e85290 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x559402e85340 <col:53, line:219:5>
|   `-CStyleCastExpr 0x559402e85318 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x559402e852e8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x559402e76758 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x559402e76a08 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x559402e76980 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x559402e73520 'Timestamp'
|   | `-CXXRecord 0x559402e73778 'Timestamp'
|   `-ParenType 0x559402e76920 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x559402e768f0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x559402e73ac0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x559402e73938 'seconds_type'
|         `-TypedefType 0x559402ad88e0 'int32_t' sugar
|           |-Typedef 0x5594029ec328 'int32_t'
|           `-TypedefType 0x5594029c5510 '__int32_t' sugar
|             |-Typedef 0x5594029c5128 '__int32_t'
|             `-BuiltinType 0x559402983580 'int'
|-CXXConversionDecl 0x559402e76b48 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x559402e76c18 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x559402e85448 <col:37, line:231:5>
|   `-ReturnStmt 0x559402e85438 <line:227:9, col:23>
|     `-BinaryOperator 0x559402e85418 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x559402e853e8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x559402e85398 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x559402e7d918
|       |   `-MemberExpr 0x559402e85368 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x559402e7e8c8
|       |     `-CXXThisExpr 0x559402e85358 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x559402e85400 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x559402e853c8 <col:23> 'int' 0
|-CXXMethodDecl 0x559402e76cd8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x559402e76d98 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x559402e76e58 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x559402e76f18 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x559402e76fd8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x559402e77148 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x559402e77088 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x559402e77290 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x559402e77200 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e77358 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x559402e773f8 <col:54> "" ""
|-CXXMethodDecl 0x559402e77488 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x559402e77528 <col:54> "" ""
|-CXXMethodDecl 0x559402e775b8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x559402e77658 <col:54> "" ""
|-CXXMethodDecl 0x559402e77758 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x559402e77828 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x559402e77958 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x559402e77a50 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x559402e77b88 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x559402e85660 <col:39, line:271:5>
|   `-ReturnStmt 0x559402e85650 <line:267:9, col:61>
|     `-CallExpr 0x559402e855f0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x559402e855d8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559402e85460 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x559402e7ebf8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x559402e85620 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x559402e854c0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x559402e7d918
|       |   `-MemberExpr 0x559402e85490 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x559402e7e8c8
|       |     `-CXXThisExpr 0x559402e85480 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x559402e85638 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x559402e85560 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x559402e85530 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x559402e854f0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x559402e85548 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x559402e85510 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74090 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e77c48 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x559402e85820 <col:39, line:279:5>
|   `-ReturnStmt 0x559402e85810 <line:275:9, col:61>
|     `-CallExpr 0x559402e857b0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x559402e85798 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559402e85678 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x559402e7ebf8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x559402e857e0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x559402e856d8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x559402e7d918
|       |   `-MemberExpr 0x559402e856a8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x559402e7e8c8
|       |     `-CXXThisExpr 0x559402e85698 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x559402e857f8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x559402e85778 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x559402e85748 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x559402e85708 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x559402e85760 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x559402e85728 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73f70 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e77d08 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x559402e859b8 <col:39, line:287:5>
|   `-ReturnStmt 0x559402e859a8 <line:283:9, col:53>
|     `-BinaryOperator 0x559402e85988 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x559402e85958 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x559402e85878 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x559402e7d918
|       |   `-MemberExpr 0x559402e85848 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x559402e7e8c8
|       |     `-CXXThisExpr 0x559402e85838 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x559402e85970 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x559402e85938 <col:23, col:53> 'int'
|           `-BinaryOperator 0x559402e85918 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x559402e858e8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x559402e858a8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73dc0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x559402e85900 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x559402e858c8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e77df8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x559402e86c50 <col:40, line:293:5>
|   |-DeclStmt 0x559402e85b00 <line:291:9, col:48>
|   | `-VarDecl 0x559402e859e0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x559402e85ae0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x559402e85a88 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x559402e85a58 <col:22> '<bound member function type>' ->subsec 0x559402e76d98
|   |     |   `-CXXThisExpr 0x559402e85a48 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x559402e85ac8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x559402e85aa8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e741f0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x559402e86c40 <line:292:9, col:70>
|     `-ExprWithCleanups 0x559402e86c28 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x559402e86bf8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559402e86be0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x559402e86bc0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x559402e86b90 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x559402e86928 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x559402e86910 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x559402e85b18 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x559402e859e0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x559402e86b30 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x559402e86b18 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x559402e86ae8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x559402e86940 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x559402e868b0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x559402e86898 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x559402e86848 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x559402e736c8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x559402e867e8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x559402e85b48 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x559402e85b38 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x559402e86830 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x559402e86818 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x559402e86008 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x559402e85b70 <col:39> 'int' 0
|               |               `-BinaryOperator 0x559402e85c00 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x559402e85bd0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x559402e85b90 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e741f0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x559402e85be8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x559402e85bb0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x559402e859e0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x559402e86b60 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x559402e868f8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x559402e868e8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x559402e77eb8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x559402e871a8 <col:40, line:302:5>
|   |-DeclStmt 0x559402e86da0 <line:297:9, col:48>
|   | `-VarDecl 0x559402e86c80 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x559402e86d80 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x559402e86d28 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x559402e86cf8 <col:22> '<bound member function type>' ->subsec 0x559402e76d98
|   |     |   `-CXXThisExpr 0x559402e86ce8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x559402e86d68 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x559402e86d48 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e742c0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x559402e87198 <line:298:9, col:70>
|     `-ExprWithCleanups 0x559402e87180 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x559402e87150 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559402e87138 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x559402e87118 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x559402e870e8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x559402e87010 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x559402e86ff8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x559402e86db8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x559402e86c80 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x559402e87088 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x559402e87070 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x559402e87040 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x559402e87028 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x559402e86f98 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x559402e86f80 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x559402e86f60 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x559402e736c8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x559402e86f00 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x559402e86de8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x559402e86dd8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x559402e86f48 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x559402e86f30 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x559402e86ec0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x559402e86e10 <col:39> 'int' 0
|               |               `-BinaryOperator 0x559402e86ea0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x559402e86e70 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x559402e86e30 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e742c0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x559402e86e88 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x559402e86e50 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x559402e86c80 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x559402e870b8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x559402e86fe0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x559402e86fd0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x559402e77f78 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x559402e87230 <col:40, line:306:5>
|   `-ReturnStmt 0x559402e87220 <line:305:9, col:17>
|     `-CXXConstructExpr 0x559402e871f0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x559402e871d8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x559402e871c8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x559402e78118 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x559402e78028 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x559402e782e8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x559402e781f0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x559402e783d8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x559402e78548 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x559402e78488 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x559402e87378 <col:56, line:320:5>
|   `-ReturnStmt 0x559402e87368 <line:319:9, col:32>
|     `-ExprWithCleanups 0x559402e87350 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x559402e87320 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559402e87308 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x559402e872c8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x559402e87298 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x559402e87258 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x559402e78488 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x559402e872b0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x559402e87278 <col:31> 'int' 0
|-CXXMethodDecl 0x559402e78788 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x559402e78600 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e78678 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e87548 <col:72, line:326:5>
|   `-ReturnStmt 0x559402e87538 <line:325:9, col:51>
|     `-ExprWithCleanups 0x559402e87520 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x559402e874f0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559402e874d8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x559402e87498 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x559402e87480 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x559402e873a0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x559402e78600 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x559402e87440 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x559402e87428 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x559402e873c0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x559402e7d070 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x559402e87468 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x559402e873e0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e78678 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e78938 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x559402e78848 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x559402e87c10 <col:56, line:337:5>
|   |-DeclStmt 0x559402e87848 <line:329:9, col:51>
|   | `-VarDecl 0x559402e87570 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x559402e87830 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x559402e87800 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x559402e877e8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x559402e877d0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x559402e877a0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x559402e87788 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x559402e87770 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x559402e87660 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x559402e87a00 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x559402e878b0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x559402e7d918
|   | | `-MemberExpr 0x559402e87880 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x559402e7e8c8
|   | |   `-DeclRefExpr 0x559402e87860 <col:9> 'Timestamp' lvalue Var 0x559402e87570 't' 'Timestamp'
|   | `-BinaryOperator 0x559402e879e0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x559402e879b0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559402e878e0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x559402e78848 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x559402e879c8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x559402e87990 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x559402e87970 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x559402e87940 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x559402e87900 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x559402e87958 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x559402e87920 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74090 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x559402e87bf8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x559402e87bc8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x559402e87bb0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x559402e87b90 <col:16> 'Timestamp' lvalue Var 0x559402e87570 't' 'Timestamp'
|-CXXMethodDecl 0x559402e78b00 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x559402e789f0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e78a68 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e87dc8 <col:72, line:343:5>
|   `-ReturnStmt 0x559402e87db8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x559402e87da0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x559402e87d70 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559402e87d58 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x559402e87d18 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x559402e87d00 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x559402e87c48 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x559402e789f0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x559402e87cc0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x559402e87ca8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x559402e87c68 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x559402e7d1b8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x559402e87ce8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x559402e87c88 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e78a68 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e78c50 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x559402e78bc0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x559402e88210 <col:56, line:354:5>
|   |-DeclStmt 0x559402e87fb8 <line:346:9, col:51>
|   | `-VarDecl 0x559402e87df0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x559402e87fa0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x559402e87f70 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x559402e87f58 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x559402e87f40 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x559402e87f10 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x559402e87ef8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x559402e87ee0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x559402e87eb0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x559402e88170 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x559402e88020 <col:9, col:14> 'int64_t':'long' lvalue .x 0x559402e7d918
|   | | `-MemberExpr 0x559402e87ff0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x559402e7e8c8
|   | |   `-DeclRefExpr 0x559402e87fd0 <col:9> 'Timestamp' lvalue Var 0x559402e87df0 't' 'Timestamp'
|   | `-BinaryOperator 0x559402e88150 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x559402e88120 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559402e88050 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x559402e78bc0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x559402e88138 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x559402e88100 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x559402e880e0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x559402e880b0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x559402e88070 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x559402e880c8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x559402e88090 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73f70 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x559402e881f8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x559402e881c8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x559402e881b0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x559402e88190 <col:16> 'Timestamp' lvalue Var 0x559402e87df0 't' 'Timestamp'
|-CXXMethodDecl 0x559402e78e18 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x559402e78d08 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e78d80 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e883c8 <col:72, line:360:5>
|   `-ReturnStmt 0x559402e883b8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x559402e883a0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x559402e88370 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559402e88358 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x559402e88318 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x559402e88300 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x559402e88248 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x559402e78d08 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x559402e882c0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x559402e882a8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x559402e88268 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x559402e7d300 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x559402e882e8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x559402e88288 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e78d80 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e78f68 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x559402e78ed8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x559402e94d38 <col:56, line:371:5>
|   |-DeclStmt 0x559402e885b8 <line:363:9, col:51>
|   | `-VarDecl 0x559402e883f0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x559402e885a0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x559402e88570 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x559402e88558 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x559402e88540 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x559402e88510 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x559402e884f8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x559402e884e0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x559402e884b0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x559402e94c98 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x559402e88620 <col:9, col:14> 'int64_t':'long' lvalue .x 0x559402e7d918
|   | | `-MemberExpr 0x559402e885f0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x559402e7e8c8
|   | |   `-DeclRefExpr 0x559402e885d0 <col:9> 'Timestamp' lvalue Var 0x559402e883f0 't' 'Timestamp'
|   | `-CallExpr 0x559402e94c38 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x559402e94c20 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x559402e88650 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x559402e7ebf8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x559402e94c68 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x559402e88670 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x559402e78ed8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x559402e94c80 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x559402e94c00 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x559402e94bd0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x559402e88690 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73dc0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x559402e94be8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x559402e886b0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x559402e94d20 <line:370:9, col:16>
|     `-CXXConstructExpr 0x559402e94cf0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x559402e94cd8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x559402e94cb8 <col:16> 'Timestamp' lvalue Var 0x559402e883f0 't' 'Timestamp'
|-CXXMethodDecl 0x559402e79058 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x559402e94e78 <col:39, line:377:5>
|   `-ReturnStmt 0x559402e94e68 <line:376:9, col:30>
|     `-ExprWithCleanups 0x559402e94e50 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x559402e94e20 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x559402e94e08 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x559402e94dc8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x559402e94d70 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x559402e94db0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x559402e94d90 <col:29> 'int' 1
|-CXXMethodDecl 0x559402e79118 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x559402e94f58 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x559402e94f10 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x559402e94ea0 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e94e90 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x559402e94ed0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x559402e94f40 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x559402e94ef0 <col:19> 'int' 0
|-CXXMethodDecl 0x559402e79318 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x559402e791c8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e79240 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x559402e804f0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559402e804d0 <col:60> 'int' 0
| `-CompoundStmt 0x559402e95150 <col:63, line:395:5>
|   `-BinaryOperator 0x559402e95130 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x559402e94fb0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x559402e7d918
|     | `-MemberExpr 0x559402e94f80 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x559402e7e8c8
|     |   `-CXXThisExpr 0x559402e94f70 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x559402e95110 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x559402e950a0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x559402e95040 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x559402e95028 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x559402e95010 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x559402e94fe0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x559402e791c8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x559402e95088 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x559402e95068 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x559402e950f8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x559402e950e0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x559402e950c0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e79240 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e794e8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x559402e793d8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e79450 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e952a8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x559402e95260 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x559402e95178 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e95168 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x559402e95290 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x559402e951a8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x559402e793d8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x559402e95220 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559402e95208 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559402e951c8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x559402e7d1b8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x559402e95248 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559402e951e8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e79450 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e796b8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x559402e795a8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e79620 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e95400 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x559402e953b8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x559402e952d0 <col:9> '<bound member function type>' ->assign 0x559402e79318
|     | `-CXXThisExpr 0x559402e952c0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x559402e953e8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x559402e95300 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x559402e795a8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x559402e95378 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x559402e95360 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559402e95320 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x559402e7d300 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x559402e953a0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559402e95340 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e79620 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e79888 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x559402e79778 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e797f0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x559402e80528 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x559402e80508 <col:57> 'int' 0
| `-DeprecatedAttr 0x559402e79938 <col:75> "" ""
|-CXXMethodDecl 0x559402e79ac8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x559402e799b8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e79a30 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559402e79b78 <col:74> "" ""
|-CXXMethodDecl 0x559402e79d08 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x559402e79bf8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x559402e79c70 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x559402e79db8 <col:74> "" ""
|-CXXMethodDecl 0x559402e79e48 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x559402e79ee8 <col:42> "" ""
|-CXXMethodDecl 0x559402e7c720 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x559402e7c600 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x559402e7c680 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x559402e7c7f0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x559402e7c8b0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x559402e7c950 <col:20>
| `-OptimizeNoneAttr 0x559402e7c9a8 <col:30>
|-CXXMethodDecl 0x559402e7c9f0 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x559402e7cab0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x559402e7cb70 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x559402e7cc30 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x559402e7ccf0 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x559402e7cdb0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x559402e7ce70 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x559402e7cf30 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x559402e7d070 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x559402e7cfe0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e95548 <col:58, line:512:5>
|   `-ReturnStmt 0x559402e95538 <line:511:9, col:53>
|     `-BinaryOperator 0x559402e95518 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x559402e954e8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559402e95418 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7cfe0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x559402e95500 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x559402e954c8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x559402e954a8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x559402e95478 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x559402e95438 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x559402e95490 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x559402e95458 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74090 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e7d1b8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x559402e7d128 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e95690 <col:58, line:516:5>
|   `-ReturnStmt 0x559402e95680 <line:515:9, col:53>
|     `-BinaryOperator 0x559402e95660 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x559402e95630 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559402e95560 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7d128 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x559402e95648 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x559402e95610 <col:23, col:53> 'int'
|           `-BinaryOperator 0x559402e955f0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x559402e955c0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x559402e95580 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x559402e955d8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x559402e955a0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73f70 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e7d300 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x559402e7d270 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e957d8 <col:58, line:520:5>
|   `-ReturnStmt 0x559402e957c8 <line:519:9, col:53>
|     `-BinaryOperator 0x559402e957a8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x559402e95778 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559402e956a8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7d270 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x559402e95790 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x559402e95758 <col:23, col:53> 'int'
|           `-BinaryOperator 0x559402e95738 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x559402e95708 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x559402e956c8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73dc0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x559402e95720 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x559402e956e8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e7d448 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x559402e7d3b8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e95920 <col:60, line:524:5>
|   `-ReturnStmt 0x559402e95910 <line:523:9, col:55>
|     `-BinaryOperator 0x559402e958f0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x559402e958c0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559402e957f0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7d3b8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x559402e958d8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x559402e958a0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x559402e95880 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x559402e95850 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x559402e95810 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x559402e95868 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x559402e95830 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74090 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e7d590 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x559402e7d500 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e95a68 <col:60, line:528:5>
|   `-ReturnStmt 0x559402e95a58 <line:527:9, col:55>
|     `-BinaryOperator 0x559402e95a38 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x559402e95a08 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559402e95938 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7d500 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x559402e95a20 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x559402e959e8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x559402e959c8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x559402e95998 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x559402e95958 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x559402e959b0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x559402e95978 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73f70 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x559402e7d6d8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x559402e7d648 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e95bb0 <col:60, line:532:5>
|   `-ReturnStmt 0x559402e95ba0 <line:531:9, col:55>
|     `-BinaryOperator 0x559402e95b80 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x559402e95b50 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x559402e95a80 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7d648 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x559402e95b68 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x559402e95b30 <col:25, col:55> 'int'
|           `-BinaryOperator 0x559402e95b10 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x559402e95ae0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x559402e95aa0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e73dc0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x559402e95af8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x559402e95ac0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x559402e74120 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x559402e7d780 prev 0x559402e745c0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x559402e7d878 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x559402e7d918 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x559402e846e0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x559402e84ac8 <col:11>
| |-CXXConstructorDecl 0x559402e847c0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559402e848a8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x559402e85210 <col:11>
| |-CXXConstructorDecl 0x559402e84948 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x559402e84a58 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x559402e86a68 <col:11>
| |-CXXDestructorDecl 0x559402e85d78 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x559402b8c708 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x559402b8c818 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x559402b8d0e0 <col:11>
| |   `-ReturnStmt 0x559402b8d0d0 <col:11>
| |     `-UnaryOperator 0x559402b8d0b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x559402b8d0a8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x559402b8c888 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x559402b8c888
|   `-ParmVarDecl 0x559402b8c998 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x559402e7d980 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x559402e7da80 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x559402e7dc80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e7da60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x559402e7da40 <col:21> 'int' 0
| |-EnumConstantDecl 0x559402e7db10 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x559402e7dc98 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e7daf0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x559402e7dad0 <col:23> 'int' 1
| |-EnumConstantDecl 0x559402e7dba0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x559402e7dcb0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402e7db80 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x559402e7db60 <col:23> 'int' 2
| `-EnumConstantDecl 0x559402e7dc30 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x559402e7dcc8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x559402e7dc10 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x559402e7dbf0 <col:27> 'int' 3
|-CXXMethodDecl 0x559402e7dd08 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x559402e7ddd0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x559402e7dfd8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x559402e7de80 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x559402e7df00 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x559402e80540 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x559402e7e1e8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x559402e7e098 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x559402e7e110 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x559402e7e2b8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x559402e7e378 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x559402e7e4e8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x559402e7e428 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x559402e7e5b0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x559402e7e670 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x559402e7e730 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x559402e7e7f0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x559402e7e890 <line:670:3, col:10> col:3 private
|-FieldDecl 0x559402e7e8c8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x559402e7e938 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x559402e95bc8 <col:27, line:684:5>
|-CXXMethodDecl 0x559402e7e9f8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x559402e95bd8 <col:27, line:696:5>
|-CXXMethodDecl 0x559402e7ebf8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x559402e7eaa8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x559402e7eb20 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e95d60 <col:66, line:700:5>
|   `-ReturnStmt 0x559402e95d50 <line:699:9, col:31>
|     `-CallExpr 0x559402e95cf0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x559402e95cd8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x559402e95c88 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x559402d00d88 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x559402e95d20 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x559402e95c48 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x559402e7eaa8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x559402e95d38 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x559402e95c68 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7eb20 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x559402e7ef68 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x559402e7ecb8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x559402e7ed30 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x559402e7eda8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x559402e7ee20 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x559402e960b0 <col:64, line:707:5>
|   |-DeclStmt 0x559402e95df0 <line:704:9, col:24>
|   | `-VarDecl 0x559402e95d88 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x559402e96000 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x559402e95e08 <col:9> 'int32_t':'int' lvalue ParmVar 0x559402e7ed30 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x559402e95fe8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x559402e95f80 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x559402e95f68 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559402e95ee8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x559402d06058 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x559402e95fb8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x559402e95e88 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x559402e7eda8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x559402e95fd0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x559402e95ea8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x559402e7ee20 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x559402e95ec8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x559402e95d88 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x559402e96090 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x559402e96020 <col:9> 'int32_t':'int' lvalue ParmVar 0x559402e7ecb8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x559402e96078 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x559402e96060 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x559402e96040 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x559402e95d88 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x559402e7f208 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x559402e7f038 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x559402e7f0b0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x559402e7f128 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x559402e7f4a8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x559402e7f2d0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x559402e7f348 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x559402e7f3c0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x559402e7f638 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x559402e7f570 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x559402e7f838 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x559402e7f6f0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x559402e7f768 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x559402e7fb08 <line:717:5, col:73> col:24
| `-FunctionDecl 0x559402e7fa48 parent 0x559402983488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x559402e7f8f8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x559402e7f970 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x559402e7fd28 <line:718:5, col:72> col:24
| `-FunctionDecl 0x559402e7fc68 parent 0x559402983488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x559402e7fb58 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x559402e7fbd0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x559402e7fef0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x559402e7fe38 parent 0x559402983488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x559402e7fd78 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x559402e80178 <line:720:5, col:73> col:30
| `-FunctionDecl 0x559402e800b8 parent 0x559402983488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x559402e7ff68 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x559402e7ffe0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x559402e80398 <line:721:5, col:73> col:30
| `-FunctionDecl 0x559402e802d8 parent 0x559402983488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x559402e801c8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x559402e80240 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x559402e85c20 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x559402e85d08 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e86778 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x559402e86730 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x559402e7e8c8
| |     `-DeclRefExpr 0x559402e86710 <col:7> 'const Timestamp' lvalue ParmVar 0x559402e85d08 '' 'const Timestamp &'
| `-CompoundStmt 0x559402e867d8 <col:7>
|-CXXConstructorDecl 0x559402e85e88 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559402e85f98 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x559402e7e8c8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x559402e86a78 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x559402e86a20 <col:7> 'Timestamp::rep_t' xvalue ._t 0x559402e7e8c8
| |     `-CXXStaticCastExpr 0x559402e869f0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x559402e869c0 <col:7> 'Timestamp' lvalue ParmVar 0x559402e85f98 '' 'Timestamp &&'
| `-CompoundStmt 0x559402e86ad8 <col:7>
|-CXXDestructorDecl 0x559402e86048 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x559402b8c558 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x559402b8c668 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x559402b8d158 <col:7>
|   |-CXXMemberCallExpr 0x559402b8d0f8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x559402b8d038 <col:7> '<bound member function type>' .operator= 0x559402b8c708
|   | | `-MemberExpr 0x559402b8cf48 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x559402e7e8c8
|   | |   `-CXXThisExpr 0x559402b8cf38 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x559402b8d008 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x559402e7e8c8
|   |   `-DeclRefExpr 0x559402b8cfe8 <col:7> 'const Timestamp' lvalue ParmVar 0x559402b8c668 '' 'const Timestamp &'
|   `-ReturnStmt 0x559402b8d148 <col:7>
|     `-UnaryOperator 0x559402b8d130 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x559402b8d120 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x559402b8ca08 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x559402b8ca08
  `-ParmVarDecl 0x559402b8cb18 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402fa0d10 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402fa0e28 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x559402fa0eb8 <col:16, col:22> col:16 public
|-EnumDecl 0x559402fa0ee0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x559402fa0fe0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559402fa1230 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fa0fc0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x559402fa0fa0 <col:21> 'int' 0
| |-EnumConstantDecl 0x559402fa1070 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559402fa1248 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fa1050 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x559402fa1030 <col:24> 'int' 22
| |-EnumConstantDecl 0x559402fa1100 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559402fa1260 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fa10e0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x559402fa10c0 <col:24> 'int' 34
| |-EnumConstantDecl 0x559402fa1190 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x559402fa1278 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x559402fa1170 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x559402fa1150 <col:25> 'int' 95
| `-EnumConstantDecl 0x559402fa11e0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x559402fa2bf0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x559402fa3028 <col:7>
|-CXXConstructorDecl 0x559402fa2cf8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x559402fa2cf8
| `-ParmVarDecl 0x559402fa2e08 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x559402fa2ea8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559402fa2fb8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55940302fa40 <col:7>
`-CXXDestructorDecl 0x559402fa5148 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402fa12a8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x559402fa1408 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x559402fa1498 <col:32, col:38> col:32 public
|-TypedefDecl 0x559402fa14d0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x559402ad8800 'uint32_t' sugar
|   |-Typedef 0x5594029ec4c8 'uint32_t'
|   `-TypedefType 0x5594029c55a0 '__uint32_t' sugar
|     |-Typedef 0x5594029c5198 '__uint32_t'
|     `-BuiltinType 0x559402983620 'unsigned int'
|-CXXConstructorDecl 0x559402fa1618 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x559402fa1540 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x559402fa2af8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x559402fa3038 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x559402fa23b0 'base' 'int'
| | `-ImplicitCastExpr 0x559402fa2b98 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x559402fa2b58 <col:16> 'int' lvalue ParmVar 0x559402fa1540 'b' 'int'
| `-CompoundStmt 0x559402fa30a8 <col:19, line:1046:5>
|-CXXMethodDecl 0x559402fa1b10 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x559402fa16e0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x559402fa1760 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x559402fa17d8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x559402fa1858 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x559402fa1918 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x559402fa1998 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x559402fa1f68 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x559402fa1be0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x559402fa1ec8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x559402fa1c88 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x559402fa1d28 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x559402fa1da0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x559402fa2b18 <col:82> 'const ArgContext' lvalue Var 0x559402f96a78 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x559402fa3ff8 <col:94, line:1067:5>
| |   |-DeclStmt 0x559402fa3238 <line:1054:9, col:64>
| |   | `-VarDecl 0x559402fa30c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x559402fa31f0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x559402fa3458 <line:1055:9, col:91>
| |   | `-VarDecl 0x559402fa3268 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x559402fa3430 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x559402fa3410 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x559402fa33c0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x559402fa33a0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x559402fa3348 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x559402fa32f8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x559402fa3328 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x559402fa3388 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x559402fa3368 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x559402fa33f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x559402fa35b8 <line:1056:9, col:27>
| |   | `-VarDecl 0x559402fa3550 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x559402fa3a20 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x559402fa3950 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x559402fa38d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x559402ea2a08 0x559402cebdc8 0x559402cebaa0 0x559402cdc270 0x559402cdbf20 0x559402cdb810 0x559402cae180 0x559402c3b650
| |   | | |-CallExpr 0x559402fa3810 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x559402fa35e0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x559402fa3690 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x559402fa3660 <col:19, col:23> '<bound member function type>' .begin 0x559402ccb478
| |   | | | |   `-DeclRefExpr 0x559402fa3640 <col:19> 'const String' lvalue ParmVar 0x559402fa1c88 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x559402fa3720 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x559402fa36f0 <col:32, col:36> '<bound member function type>' .end 0x559402ccb690
| |   | | | |   `-DeclRefExpr 0x559402fa36d0 <col:32> 'const String' lvalue ParmVar 0x559402fa1c88 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x559402fa3740 <col:43> 'const bool' lvalue Var 0x559402fa30c8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x559402fa37a8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x559402fa3788 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x559402fa37d0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x559402fa3550 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x559402fa37f0 <col:73> 'const int' lvalue Var 0x559402fa3268 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x559402fa38b0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x559402fa3880 <col:16, col:20> '<bound member function type>' .end 0x559402ccb690
| |   | |     `-DeclRefExpr 0x559402fa3860 <col:16> 'const String' lvalue ParmVar 0x559402fa1c88 'str' 'const String &'
| |   | `-BinaryOperator 0x559402fa3a00 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x559402fa3998 <col:13> 'int' lvalue ->status 0x559402fa2418
| |   |   | `-CXXThisExpr 0x559402fa3988 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x559402fa39e8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x559402fa39c8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1070 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x559402fa3c70 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x559402fa3b58 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x559402fa3b40 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x559402fa3b28 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x559402fa3a48 <col:13> 'int' lvalue ->status 0x559402fa2418
| |   | | |     `-CXXThisExpr 0x559402fa3a38 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x559402fa3b08 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x559402fa3ad8 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x559402fa3a88 <col:23> 'int' lvalue ->status 0x559402fa2418
| |   | |   |   `-CXXThisExpr 0x559402fa3a78 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x559402fa3af0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x559402fa3ab8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x559402fa3c50 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x559402fa3bf0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x559402fa3b98 <col:13, col:18> '<bound member function type>' .error 0x559402f4fa90
| |   |   | | `-DeclRefExpr 0x559402fa3b78 <col:13> 'const ArgContext' lvalue ParmVar 0x559402fa1da0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x559402fa3c18 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x559402fa3bc8 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x559402fa3c40 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x559402fa3c30 <col:20> 'bool' false
| |   |-DeclStmt 0x559402fa3e48 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x559402fa3df0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x559402fa3d80 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x559402fa3fa8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x559402fa3e60 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x559402c6f618
| |   | |-DeclRefExpr 0x559402fa3ea8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x559402fa3550 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x559402fa3f78 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x559402fa3ef0 <col:64> 'V' lvalue ParmVar 0x559402fa1d28 'result' 'V &'
| |   `-ReturnStmt 0x559402fa3fe8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x559402fa3fd8 <col:16> 'bool' true
| `-CXXMethodDecl 0x559403036228 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559403036008 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5594030360d8 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x559403036140 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x559403037fc0 <col:94, line:1067:5>
|     |-DeclStmt 0x559403036a38 <line:1054:9, col:64>
|     | `-VarDecl 0x559403036858 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5594030369c8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x559403036998 <col:36, col:55> 'const bool' lvalue Var 0x559402c5e830 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x559403036c18 <line:1055:9, col:91>
|     | `-VarDecl 0x559403036a50 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x559403036b98 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x559403036b80 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x559403036b60 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x559403036b40 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x559403036b20 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x559403036ae8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x559403036ac8 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x559402fa3328 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x559403036b08 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x559402fa3368 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x559402fa33f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x559403036db0 <line:1056:9, col:27>
|     | `-VarDecl 0x559403036d48 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x559403037238 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5594030371e0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x559403037098 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x559403037068 <col:13> '<bound member function type>' ->parse 0x559402fa1b10
|     | | | | `-CXXThisExpr 0x559403037058 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x559403036ef8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x559403036ec8 <col:19, col:23> '<bound member function type>' .begin 0x559402ccb478
|     | | | |   `-DeclRefExpr 0x559403036ea8 <col:19> 'const String' lvalue ParmVar 0x559403036008 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x559403036f68 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x559403036f38 <col:32, col:36> '<bound member function type>' .end 0x559402ccb690
|     | | | |   `-DeclRefExpr 0x559403036f18 <col:32> 'const String' lvalue ParmVar 0x559403036008 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x559403037108 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5594030370e8 <col:43> 'const bool' lvalue Var 0x559403036858 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x559403036ff0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x559403036fd8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x559403036fb8 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x559403037120 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x559403037018 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x559403036d48 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x559403037158 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x559403037138 <col:73> 'const int' lvalue Var 0x559403036a50 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5594030371c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x559403037190 <col:16, col:20> '<bound member function type>' .end 0x559402ccb690
|     | |     `-DeclRefExpr 0x559403037170 <col:16> 'const String' lvalue ParmVar 0x559403036008 'str' 'const String &'
|     | `-BinaryOperator 0x559403037218 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x559402fa3998 <col:13> 'int' lvalue ->status 0x559402fa2418
|     |   | `-CXXThisExpr 0x559402fa3988 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x559403037200 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x559402fa39c8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1070 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5594030373b0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5594030372d0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5594030372b8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5594030372a0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x559402fa3a48 <col:13> 'int' lvalue ->status 0x559402fa2418
|     | | |     `-CXXThisExpr 0x559402fa3a38 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x559403037280 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x559403037250 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x559402fa3a88 <col:23> 'int' lvalue ->status 0x559402fa2418
|     | |   |   `-CXXThisExpr 0x559402fa3a78 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x559403037268 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x559402fa3ab8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x559403037390 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x559403037340 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x559403037310 <col:13, col:18> '<bound member function type>' .error 0x559402f4fa90
|     |   | | `-DeclRefExpr 0x5594030372f0 <col:13> 'const ArgContext' lvalue ParmVar 0x559403036140 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x559403037368 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x559402fa3bc8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x559403037380 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x559402fa3c30 <col:20> 'bool' false
|     |-DeclStmt 0x5594030378f8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5594030378a0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x559403037850 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x559403037830 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x5594030377c0 'type'
|     |       `-ElaboratedType 0x559403037770 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x559403037750 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x559402c5e988 'unsigned_type'
|     |           `-BuiltinType 0x559402983620 'unsigned int'
|     |-CallExpr 0x559403037f50 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x559403037f38 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x559403037eb8 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x559403037d98 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x559402c6f618 'extract_integer')
|     | |-ImplicitCastExpr 0x559403037f98 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x559403037f80 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x559403037958 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x559403036d48 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x559403037a28 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5594030379d8 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5594030360d8 'result' 'unsigned int &'
|     `-ReturnStmt 0x559403037fb0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x559402fa3fd8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x559402fa2328 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x559402fa1fd8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x559402fa2288 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x559402fa2088 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x559402fa2128 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x559402fa21a0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x559402fa2b38 <col:71> 'const ArgContext' lvalue Var 0x559402f96a78 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x559402fa4768 <col:83, line:1083:5>
| |   |-DeclStmt 0x559402fa40c0 <line:1071:9, col:12>
| |   | `-VarDecl 0x559402fa4058 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x559402fa4740 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x559402fa4350 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x559402fa41d8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x559402fa41a0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x559402fa40e8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x559402fa4140 <col:31> 'const String' lvalue ParmVar 0x559402fa2088 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x559402fa4160 <col:36> 'V' lvalue Var 0x559402fa4058 'x' 'V'
| |     | |   `-DeclRefExpr 0x559402fa4180 <col:39> 'const ArgContext' lvalue ParmVar 0x559402fa21a0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x559402fa4330 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x559402fa4310 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x559402fa42f8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x559402fa42e0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x559402fa4200 <col:17> 'int' lvalue ->status 0x559402fa2418
| |     |     |     `-CXXThisExpr 0x559402fa41f0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x559402fa42c0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x559402fa4290 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x559402fa4240 <col:27> 'int' lvalue ->status 0x559402fa2418
| |     |       |   `-CXXThisExpr 0x559402fa4230 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x559402fa42a8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x559402fa4270 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x559402fa4380 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x559402fa4370 <col:20> 'bool' false
| |     `-IfStmt 0x559402fa4718 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x559402fa4420 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x559402fa43f0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x559402fa43a0 <col:18> 'int' lvalue ->status 0x559402fa2418
| |       | |   `-CXXThisExpr 0x559402fa4390 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x559402fa4408 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x559402fa43d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x559402fa4658 <col:42, line:1079:9>
| |       | |-CallExpr 0x559402fa4600 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x559402fa4450 <line:1076:13> '<bound member function type>' ->range_error 0x559402fa2a28
| |       | | | `-CXXThisExpr 0x559402fa4440 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x559402fa4480 <col:25> 'const ArgContext' lvalue ParmVar 0x559402fa21a0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x559402fa4560 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x559402fa45d8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x559402fa45b8 <col:43> 'V' lvalue Var 0x559402fa4058 'x' 'V'
| |       | `-ReturnStmt 0x559402fa4648 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x559402fa4638 <col:20> 'bool' false
| |       `-CompoundStmt 0x559402fa46f8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x559402fa46b8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x559402fa4678 <col:13> 'V' lvalue ParmVar 0x559402fa2128 'result' 'V &'
| |         | `-DeclRefExpr 0x559402fa4698 <col:22> 'V' lvalue Var 0x559402fa4058 'x' 'V'
| |         `-ReturnStmt 0x559402fa46e8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x559402fa46d8 <col:20> 'bool' true
| `-CXXMethodDecl 0x559403032f68 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x559403032d40 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x559403032e18 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x559403032e80 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x559403036838 <col:83, line:1083:5>
|     |-DeclStmt 0x5594030331f0 <line:1071:9, col:12>
|     | `-VarDecl 0x559403033188 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x559403036810 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5594030364a0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5594030363c8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x559403036390 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x559403036348 <col:14> '<bound member function type>' ->parse_saturating 0x559403036228
|       | |   | `-CXXThisExpr 0x559403036338 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x559403035ee8 <col:31> 'const String' lvalue ParmVar 0x559403032d40 'str' 'const String &'
|       | |   |-DeclRefExpr 0x559403035f08 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x559403033188 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x559403035f28 <col:39> 'const ArgContext' lvalue ParmVar 0x559403032e80 'args' 'const ArgContext &'
|       | `-ParenExpr 0x559403036480 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x559403036460 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x559403036448 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x559403036430 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x559402fa4200 <col:17> 'int' lvalue ->status 0x559402fa2418
|       |     |     `-CXXThisExpr 0x559402fa41f0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x559403036410 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5594030363e0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x559402fa4240 <col:27> 'int' lvalue ->status 0x559402fa2418
|       |       |   `-CXXThisExpr 0x559402fa4230 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5594030363f8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x559402fa4270 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5594030364c0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x559402fa4370 <col:20> 'bool' false
|       `-IfStmt 0x5594030367e8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x559403036500 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5594030364d0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x559402fa43a0 <col:18> 'int' lvalue ->status 0x559402fa2418
|         | |   `-CXXThisExpr 0x559402fa4390 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5594030364e8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x559402fa43d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x559402fa1100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x559403036720 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x559403036690 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x559402fa4450 <line:1076:13> '<bound member function type>' ->range_error 0x559402fa2a28
|         | | | `-CXXThisExpr 0x559402fa4440 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x559403036520 <col:25> 'const ArgContext' lvalue ParmVar 0x559403032e80 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5594030366f8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5594030366c8 <col:31, col:50> 'const bool' lvalue Var 0x559402c5e830 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x559403036668 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x559403036650 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x559403036638 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x559403036618 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x559403033188 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x559403036710 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x559402fa4638 <col:20> 'bool' false
|         `-CompoundStmt 0x5594030367c8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x559403036798 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x559403036740 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x559403032e18 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x559403036780 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x559403036760 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x559403033188 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5594030367b8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x559402fa46d8 <col:20> 'bool' true
|-FieldDecl 0x559402fa23b0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x559402fa2418 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x559402fa2468 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x559402fa2720 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x559402fa24a8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x559402fa2528 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x559402fa25a0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x559402fa2620 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x559402fa2a28 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x559402fa27f0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x559402fa2868 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x559402fa2900 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x559402fa4fc8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x559402fa4fc8
| `-ParmVarDecl 0x559402fa50d8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x559402fa5258 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x559402fa5368 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55940302fa50 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55940302fa20 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55940302f9f0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55940302f9c0 <col:7> 'IntArg' lvalue ParmVar 0x559402fa5368 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x559402fa23b0 'base' 'int'
| | `-ImplicitCastExpr 0x55940302fb48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55940302fb18 <col:7> 'int' xvalue .base 0x559402fa23b0
| |     `-CXXStaticCastExpr 0x55940302fae8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55940302fab8 <col:7> 'IntArg' lvalue ParmVar 0x559402fa5368 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x559402fa2418 'status' 'int'
| | `-ImplicitCastExpr 0x55940302fc18 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55940302fbe8 <col:7> 'int' xvalue .status 0x559402fa2418
| |     `-CXXStaticCastExpr 0x55940302fbb8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55940302fb88 <col:7> 'IntArg' lvalue ParmVar 0x559402fa5368 '' 'IntArg &&'
| `-CompoundStmt 0x55940302fc70 <col:7>
`-CXXDestructorDecl 0x55940302ebb0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559402fa9560 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x559402fa97b8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55940302ead8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55940302f050 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55940302f030 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55940302f0c0 <col:19>
|-CXXConstructorDecl 0x55940302ecb8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55940302ecb8
| `-ParmVarDecl 0x55940302edc8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55940302ee68 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55940302ef78 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55940302fc80 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55940302f9a0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55940302f970 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55940302f940 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55940302ef78 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55940302fcf0 <col:19>
`-CXXDestructorDecl 0x55940302f100 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x559402fae930 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x559402faea48 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x559402faead8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x559402faed18 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x559402faeb10 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x559402faeb90 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x559402faec08 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x559402faef30 <col:81> 'const ArgContext' lvalue Var 0x559402f96a78 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x559402faee70 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x559402faede0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x559402faf088 <col:35, line:1261:5>
|   `-ReturnStmt 0x559402faf078 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x559402faf060 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x559402faf030 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x559402faf018 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x559402faeff0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x559402faefd0 <col:16, col:24> 'String' (CXXTemporary 0x559402faefd0)
|               `-CXXConstructExpr 0x559402faef98 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x559402faef80 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x559402faef60 <col:23> 'bool' lvalue ParmVar 0x559402faede0 'x' 'bool'
|-CXXConstructorDecl 0x55940303d528 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55940303d600 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55940303d738 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55940303d738
| `-ParmVarDecl 0x55940303d848 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55940303d8e8 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55940303d9f8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x559403043c60 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x559402faf0c8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x559402faf328 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55940303d438 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55940303da68 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55940303da68
| `-ParmVarDecl 0x55940303db78 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55940303dc18 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55940303dd28 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x559403043c70 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x559403043c40 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x559403043c10 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x559403043be0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55940303dd28 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x559403043ce0 <col:19>
`-CXXDestructorDecl 0x55940303ddc8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
